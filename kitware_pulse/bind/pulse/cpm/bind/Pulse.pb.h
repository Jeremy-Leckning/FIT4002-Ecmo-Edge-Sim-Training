// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/Pulse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Scenario.pb.h"
#include "pulse/cpm/bind/PulseConfiguration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcpm_2fbind_2fPulse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class ScenarioData;
class ScenarioDataDefaultTypeInternal;
extern ScenarioDataDefaultTypeInternal _ScenarioData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cpm::bind::ScenarioData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ScenarioData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class ScenarioData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ScenarioData) */ {
 public:
  inline ScenarioData() : ScenarioData(nullptr) {}
  virtual ~ScenarioData();

  ScenarioData(const ScenarioData& from);
  ScenarioData(ScenarioData&& from) noexcept
    : ScenarioData() {
    *this = ::std::move(from);
  }

  inline ScenarioData& operator=(const ScenarioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioData& operator=(ScenarioData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioData& default_instance();

  static inline const ScenarioData* internal_default_instance() {
    return reinterpret_cast<const ScenarioData*>(
               &_ScenarioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScenarioData& a, ScenarioData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioData* New() const final {
    return CreateMaybeMessage<ScenarioData>(nullptr);
  }

  ScenarioData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioData& from);
  void MergeFrom(const ScenarioData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ScenarioData";
  }
  protected:
  explicit ScenarioData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kConfigurationFieldNumber = 2,
  };
  // .pulse.cdm.bind.ScenarioData Scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::pulse::cdm::bind::ScenarioData& scenario() const;
  ::pulse::cdm::bind::ScenarioData* release_scenario();
  ::pulse::cdm::bind::ScenarioData* mutable_scenario();
  void set_allocated_scenario(::pulse::cdm::bind::ScenarioData* scenario);
  private:
  const ::pulse::cdm::bind::ScenarioData& _internal_scenario() const;
  ::pulse::cdm::bind::ScenarioData* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::pulse::cdm::bind::ScenarioData* scenario);
  ::pulse::cdm::bind::ScenarioData* unsafe_arena_release_scenario();

  // .pulse.cpm.bind.ConfigurationData Configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::pulse::cpm::bind::ConfigurationData& configuration() const;
  ::pulse::cpm::bind::ConfigurationData* release_configuration();
  ::pulse::cpm::bind::ConfigurationData* mutable_configuration();
  void set_allocated_configuration(::pulse::cpm::bind::ConfigurationData* configuration);
  private:
  const ::pulse::cpm::bind::ConfigurationData& _internal_configuration() const;
  ::pulse::cpm::bind::ConfigurationData* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::pulse::cpm::bind::ConfigurationData* configuration);
  ::pulse::cpm::bind::ConfigurationData* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ScenarioData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScenarioData* scenario_;
  ::pulse::cpm::bind::ConfigurationData* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenarioData

// .pulse.cdm.bind.ScenarioData Scenario = 1;
inline bool ScenarioData::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool ScenarioData::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::pulse::cdm::bind::ScenarioData& ScenarioData::_internal_scenario() const {
  const ::pulse::cdm::bind::ScenarioData* p = scenario_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScenarioData&>(
      ::pulse::cdm::bind::_ScenarioData_default_instance_);
}
inline const ::pulse::cdm::bind::ScenarioData& ScenarioData::scenario() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ScenarioData.Scenario)
  return _internal_scenario();
}
inline void ScenarioData::unsafe_arena_set_allocated_scenario(
    ::pulse::cdm::bind::ScenarioData* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ScenarioData.Scenario)
}
inline ::pulse::cdm::bind::ScenarioData* ScenarioData::release_scenario() {
  
  ::pulse::cdm::bind::ScenarioData* temp = scenario_;
  scenario_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScenarioData* ScenarioData::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ScenarioData.Scenario)
  
  ::pulse::cdm::bind::ScenarioData* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScenarioData* ScenarioData::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScenarioData>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::pulse::cdm::bind::ScenarioData* ScenarioData::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ScenarioData.Scenario)
  return _internal_mutable_scenario();
}
inline void ScenarioData::set_allocated_scenario(::pulse::cdm::bind::ScenarioData* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ScenarioData.Scenario)
}

// .pulse.cpm.bind.ConfigurationData Configuration = 2;
inline bool ScenarioData::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool ScenarioData::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::pulse::cpm::bind::ConfigurationData& ScenarioData::_internal_configuration() const {
  const ::pulse::cpm::bind::ConfigurationData* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData& ScenarioData::configuration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ScenarioData.Configuration)
  return _internal_configuration();
}
inline void ScenarioData::unsafe_arena_set_allocated_configuration(
    ::pulse::cpm::bind::ConfigurationData* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ScenarioData.Configuration)
}
inline ::pulse::cpm::bind::ConfigurationData* ScenarioData::release_configuration() {
  
  ::pulse::cpm::bind::ConfigurationData* temp = configuration_;
  configuration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData* ScenarioData::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ScenarioData.Configuration)
  
  ::pulse::cpm::bind::ConfigurationData* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData* ScenarioData::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::pulse::cpm::bind::ConfigurationData* ScenarioData::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ScenarioData.Configuration)
  return _internal_mutable_configuration();
}
inline void ScenarioData::set_allocated_configuration(::pulse::cpm::bind::ConfigurationData* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration)->GetArena();
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ScenarioData.Configuration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cpm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulse_2eproto
