// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseState.proto

#include "pulse/cpm/bind/PulseState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEvents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCircuit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_CircuitManagerData_pulse_2fcdm_2fbind_2fCircuit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class StateDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateData> _instance;
} _StateData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_StateData_default_instance_;
    new (ptr) ::pulse::cpm::bind::StateData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<27> scc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 27, 0, InitDefaultsscc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto.base,
      &scc_info_ConditionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_ActionListData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_ActiveEventListData_pulse_2fcdm_2fbind_2fEvents_2eproto.base,
      &scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
      &scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto.base,
      &scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
      &scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
      &scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
      &scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
      &scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_CircuitManagerData_pulse_2fcdm_2fbind_2fCircuit_2eproto.base,
      &scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulseState_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseState_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulseState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, airwaymode_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, intubation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, simulationtime_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, currentpatient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, initialpatient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, conditions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, activeactions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, activeevents_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, bloodchemistry_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, cardiovascular_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, drug_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, endocrine_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, energy_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, gastrointestinal_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, hepatic_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, nervous_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, renal_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, respiratory_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, tissue_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, environment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, anesthesiamachine_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, electrocardiogram_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, inhaler_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, mechanicalventilator_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, compartmentmanager_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, circuitmanager_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, activesubstance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, activecompound_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, substance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, compound_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, configuration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::StateData, datarequestmanager_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::StateData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_StateData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037pulse/cpm/bind/PulseState.proto\022\016pulse"
  ".cpm.bind\032\032pulse/cdm/bind/Enums.proto\032\033p"
  "ulse/cdm/bind/Events.proto\032\034pulse/cdm/bi"
  "nd/Patient.proto\032\037pulse/cdm/bind/Propert"
  "ies.proto\032\033pulse/cdm/bind/Engine.proto\032\036"
  "pulse/cdm/bind/Substance.proto\032 pulse/cd"
  "m/bind/Compartment.proto\032\034pulse/cdm/bind"
  "/Circuit.proto\032$pulse/cpm/bind/PulsePhys"
  "iology.proto\032%pulse/cpm/bind/PulseEnviro"
  "nment.proto\032#pulse/cpm/bind/PulseEquipme"
  "nt.proto\032\'pulse/cpm/bind/PulseConfigurat"
  "ion.proto\"\244\r\n\tStateData\022/\n\nAirwayMode\030\001 "
  "\001(\0162\033.pulse.cpm.bind.eAirwayMode\022+\n\nIntu"
  "bation\030\002 \001(\0162\027.pulse.cdm.bind.eSwitch\0226\n"
  "\016SimulationTime\030\003 \001(\0132\036.pulse.cdm.bind.S"
  "calarTimeData\0223\n\016CurrentPatient\030\004 \001(\0132\033."
  "pulse.cdm.bind.PatientData\0223\n\016InitialPat"
  "ient\030\005 \001(\0132\033.pulse.cdm.bind.PatientData\022"
  "5\n\nConditions\030\006 \001(\0132!.pulse.cdm.bind.Con"
  "ditionListData\0225\n\rActiveActions\030\007 \001(\0132\036."
  "pulse.cdm.bind.ActionListData\0229\n\014ActiveE"
  "vents\030\010 \001(\0132#.pulse.cdm.bind.ActiveEvent"
  "ListData\022:\n\016BloodChemistry\030\t \001(\0132\".pulse"
  ".cpm.bind.BloodChemistryData\022:\n\016Cardiova"
  "scular\030\n \001(\0132\".pulse.cpm.bind.Cardiovasc"
  "ularData\022&\n\004Drug\030\013 \001(\0132\030.pulse.cpm.bind."
  "DrugData\0220\n\tEndocrine\030\014 \001(\0132\035.pulse.cpm."
  "bind.EndocrineData\022*\n\006Energy\030\r \001(\0132\032.pul"
  "se.cpm.bind.EnergyData\022>\n\020Gastrointestin"
  "al\030\016 \001(\0132$.pulse.cpm.bind.Gastrointestin"
  "alData\022,\n\007Hepatic\030\017 \001(\0132\033.pulse.cpm.bind"
  ".HepaticData\022,\n\007Nervous\030\020 \001(\0132\033.pulse.cp"
  "m.bind.NervousData\022(\n\005Renal\030\021 \001(\0132\031.puls"
  "e.cpm.bind.RenalData\0224\n\013Respiratory\030\022 \001("
  "\0132\037.pulse.cpm.bind.RespiratoryData\022*\n\006Ti"
  "ssue\030\023 \001(\0132\032.pulse.cpm.bind.TissueData\0224"
  "\n\013Environment\030\024 \001(\0132\037.pulse.cpm.bind.Env"
  "ironmentData\022@\n\021AnesthesiaMachine\030\025 \001(\0132"
  "%.pulse.cpm.bind.AnesthesiaMachineData\022@"
  "\n\021ElectroCardioGram\030\026 \001(\0132%.pulse.cpm.bi"
  "nd.ElectroCardioGramData\022,\n\007Inhaler\030\027 \001("
  "\0132\033.pulse.cpm.bind.InhalerData\022F\n\024Mechan"
  "icalVentilator\030\030 \001(\0132(.pulse.cpm.bind.Me"
  "chanicalVentilatorData\022B\n\022CompartmentMan"
  "ager\030\031 \001(\0132&.pulse.cdm.bind.CompartmentM"
  "anagerData\022:\n\016CircuitManager\030\032 \001(\0132\".pul"
  "se.cdm.bind.CircuitManagerData\022\027\n\017Active"
  "Substance\030\033 \003(\t\022\026\n\016ActiveCompound\030\034 \003(\t\022"
  "0\n\tSubstance\030\035 \003(\0132\035.pulse.cdm.bind.Subs"
  "tanceData\0227\n\010Compound\030\036 \003(\0132%.pulse.cdm."
  "bind.SubstanceCompoundData\0228\n\rConfigurat"
  "ion\030\037 \001(\0132!.pulse.cpm.bind.Configuration"
  "Data\022B\n\022DataRequestManager\030  \001(\0132&.pulse"
  ".cdm.bind.DataRequestManagerData*\251\001\n\013eAi"
  "rwayMode\022\010\n\004Free\020\000\022\025\n\021AnesthesiaMachine\020"
  "\001\022\013\n\007Inhaler\020\002\022\031\n\025MechanicalVentilation\020"
  "\003\022\030\n\024MechanicalVentilator\020\004\022\020\n\014NasalCann"
  "ula\020\005\022\025\n\021NonRebreatherMask\020\006\022\016\n\nSimpleMa"
  "sk\020\007B/\n\032com.kitware.pulse.cpm.bindH\001\252\002\016p"
  "ulse.cpm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_deps[12] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fCircuit_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto,
  &::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto,
  &::descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto,
  &::descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto,
  &::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_sccs[1] = {
  &scc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseState_2eproto, "pulse/cpm/bind/PulseState.proto", 2381,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulseState_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulseState_2eproto, 1, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseState_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseState_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulseState_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eAirwayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulseState_2eproto);
  return file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseState_2eproto[0];
}
bool eAirwayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StateData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& simulationtime(const StateData* msg);
  static const ::pulse::cdm::bind::PatientData& currentpatient(const StateData* msg);
  static const ::pulse::cdm::bind::PatientData& initialpatient(const StateData* msg);
  static const ::pulse::cdm::bind::ConditionListData& conditions(const StateData* msg);
  static const ::pulse::cdm::bind::ActionListData& activeactions(const StateData* msg);
  static const ::pulse::cdm::bind::ActiveEventListData& activeevents(const StateData* msg);
  static const ::pulse::cpm::bind::BloodChemistryData& bloodchemistry(const StateData* msg);
  static const ::pulse::cpm::bind::CardiovascularData& cardiovascular(const StateData* msg);
  static const ::pulse::cpm::bind::DrugData& drug(const StateData* msg);
  static const ::pulse::cpm::bind::EndocrineData& endocrine(const StateData* msg);
  static const ::pulse::cpm::bind::EnergyData& energy(const StateData* msg);
  static const ::pulse::cpm::bind::GastrointestinalData& gastrointestinal(const StateData* msg);
  static const ::pulse::cpm::bind::HepaticData& hepatic(const StateData* msg);
  static const ::pulse::cpm::bind::NervousData& nervous(const StateData* msg);
  static const ::pulse::cpm::bind::RenalData& renal(const StateData* msg);
  static const ::pulse::cpm::bind::RespiratoryData& respiratory(const StateData* msg);
  static const ::pulse::cpm::bind::TissueData& tissue(const StateData* msg);
  static const ::pulse::cpm::bind::EnvironmentData& environment(const StateData* msg);
  static const ::pulse::cpm::bind::AnesthesiaMachineData& anesthesiamachine(const StateData* msg);
  static const ::pulse::cpm::bind::ElectroCardioGramData& electrocardiogram(const StateData* msg);
  static const ::pulse::cpm::bind::InhalerData& inhaler(const StateData* msg);
  static const ::pulse::cpm::bind::MechanicalVentilatorData& mechanicalventilator(const StateData* msg);
  static const ::pulse::cdm::bind::CompartmentManagerData& compartmentmanager(const StateData* msg);
  static const ::pulse::cdm::bind::CircuitManagerData& circuitmanager(const StateData* msg);
  static const ::pulse::cpm::bind::ConfigurationData& configuration(const StateData* msg);
  static const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager(const StateData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
StateData::_Internal::simulationtime(const StateData* msg) {
  return *msg->simulationtime_;
}
const ::pulse::cdm::bind::PatientData&
StateData::_Internal::currentpatient(const StateData* msg) {
  return *msg->currentpatient_;
}
const ::pulse::cdm::bind::PatientData&
StateData::_Internal::initialpatient(const StateData* msg) {
  return *msg->initialpatient_;
}
const ::pulse::cdm::bind::ConditionListData&
StateData::_Internal::conditions(const StateData* msg) {
  return *msg->conditions_;
}
const ::pulse::cdm::bind::ActionListData&
StateData::_Internal::activeactions(const StateData* msg) {
  return *msg->activeactions_;
}
const ::pulse::cdm::bind::ActiveEventListData&
StateData::_Internal::activeevents(const StateData* msg) {
  return *msg->activeevents_;
}
const ::pulse::cpm::bind::BloodChemistryData&
StateData::_Internal::bloodchemistry(const StateData* msg) {
  return *msg->bloodchemistry_;
}
const ::pulse::cpm::bind::CardiovascularData&
StateData::_Internal::cardiovascular(const StateData* msg) {
  return *msg->cardiovascular_;
}
const ::pulse::cpm::bind::DrugData&
StateData::_Internal::drug(const StateData* msg) {
  return *msg->drug_;
}
const ::pulse::cpm::bind::EndocrineData&
StateData::_Internal::endocrine(const StateData* msg) {
  return *msg->endocrine_;
}
const ::pulse::cpm::bind::EnergyData&
StateData::_Internal::energy(const StateData* msg) {
  return *msg->energy_;
}
const ::pulse::cpm::bind::GastrointestinalData&
StateData::_Internal::gastrointestinal(const StateData* msg) {
  return *msg->gastrointestinal_;
}
const ::pulse::cpm::bind::HepaticData&
StateData::_Internal::hepatic(const StateData* msg) {
  return *msg->hepatic_;
}
const ::pulse::cpm::bind::NervousData&
StateData::_Internal::nervous(const StateData* msg) {
  return *msg->nervous_;
}
const ::pulse::cpm::bind::RenalData&
StateData::_Internal::renal(const StateData* msg) {
  return *msg->renal_;
}
const ::pulse::cpm::bind::RespiratoryData&
StateData::_Internal::respiratory(const StateData* msg) {
  return *msg->respiratory_;
}
const ::pulse::cpm::bind::TissueData&
StateData::_Internal::tissue(const StateData* msg) {
  return *msg->tissue_;
}
const ::pulse::cpm::bind::EnvironmentData&
StateData::_Internal::environment(const StateData* msg) {
  return *msg->environment_;
}
const ::pulse::cpm::bind::AnesthesiaMachineData&
StateData::_Internal::anesthesiamachine(const StateData* msg) {
  return *msg->anesthesiamachine_;
}
const ::pulse::cpm::bind::ElectroCardioGramData&
StateData::_Internal::electrocardiogram(const StateData* msg) {
  return *msg->electrocardiogram_;
}
const ::pulse::cpm::bind::InhalerData&
StateData::_Internal::inhaler(const StateData* msg) {
  return *msg->inhaler_;
}
const ::pulse::cpm::bind::MechanicalVentilatorData&
StateData::_Internal::mechanicalventilator(const StateData* msg) {
  return *msg->mechanicalventilator_;
}
const ::pulse::cdm::bind::CompartmentManagerData&
StateData::_Internal::compartmentmanager(const StateData* msg) {
  return *msg->compartmentmanager_;
}
const ::pulse::cdm::bind::CircuitManagerData&
StateData::_Internal::circuitmanager(const StateData* msg) {
  return *msg->circuitmanager_;
}
const ::pulse::cpm::bind::ConfigurationData&
StateData::_Internal::configuration(const StateData* msg) {
  return *msg->configuration_;
}
const ::pulse::cdm::bind::DataRequestManagerData&
StateData::_Internal::datarequestmanager(const StateData* msg) {
  return *msg->datarequestmanager_;
}
void StateData::clear_simulationtime() {
  if (GetArena() == nullptr && simulationtime_ != nullptr) {
    delete simulationtime_;
  }
  simulationtime_ = nullptr;
}
void StateData::clear_currentpatient() {
  if (GetArena() == nullptr && currentpatient_ != nullptr) {
    delete currentpatient_;
  }
  currentpatient_ = nullptr;
}
void StateData::clear_initialpatient() {
  if (GetArena() == nullptr && initialpatient_ != nullptr) {
    delete initialpatient_;
  }
  initialpatient_ = nullptr;
}
void StateData::clear_conditions() {
  if (GetArena() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
}
void StateData::clear_activeactions() {
  if (GetArena() == nullptr && activeactions_ != nullptr) {
    delete activeactions_;
  }
  activeactions_ = nullptr;
}
void StateData::clear_activeevents() {
  if (GetArena() == nullptr && activeevents_ != nullptr) {
    delete activeevents_;
  }
  activeevents_ = nullptr;
}
void StateData::clear_bloodchemistry() {
  if (GetArena() == nullptr && bloodchemistry_ != nullptr) {
    delete bloodchemistry_;
  }
  bloodchemistry_ = nullptr;
}
void StateData::clear_cardiovascular() {
  if (GetArena() == nullptr && cardiovascular_ != nullptr) {
    delete cardiovascular_;
  }
  cardiovascular_ = nullptr;
}
void StateData::clear_drug() {
  if (GetArena() == nullptr && drug_ != nullptr) {
    delete drug_;
  }
  drug_ = nullptr;
}
void StateData::clear_endocrine() {
  if (GetArena() == nullptr && endocrine_ != nullptr) {
    delete endocrine_;
  }
  endocrine_ = nullptr;
}
void StateData::clear_energy() {
  if (GetArena() == nullptr && energy_ != nullptr) {
    delete energy_;
  }
  energy_ = nullptr;
}
void StateData::clear_gastrointestinal() {
  if (GetArena() == nullptr && gastrointestinal_ != nullptr) {
    delete gastrointestinal_;
  }
  gastrointestinal_ = nullptr;
}
void StateData::clear_hepatic() {
  if (GetArena() == nullptr && hepatic_ != nullptr) {
    delete hepatic_;
  }
  hepatic_ = nullptr;
}
void StateData::clear_nervous() {
  if (GetArena() == nullptr && nervous_ != nullptr) {
    delete nervous_;
  }
  nervous_ = nullptr;
}
void StateData::clear_renal() {
  if (GetArena() == nullptr && renal_ != nullptr) {
    delete renal_;
  }
  renal_ = nullptr;
}
void StateData::clear_respiratory() {
  if (GetArena() == nullptr && respiratory_ != nullptr) {
    delete respiratory_;
  }
  respiratory_ = nullptr;
}
void StateData::clear_tissue() {
  if (GetArena() == nullptr && tissue_ != nullptr) {
    delete tissue_;
  }
  tissue_ = nullptr;
}
void StateData::clear_environment() {
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
}
void StateData::clear_anesthesiamachine() {
  if (GetArena() == nullptr && anesthesiamachine_ != nullptr) {
    delete anesthesiamachine_;
  }
  anesthesiamachine_ = nullptr;
}
void StateData::clear_electrocardiogram() {
  if (GetArena() == nullptr && electrocardiogram_ != nullptr) {
    delete electrocardiogram_;
  }
  electrocardiogram_ = nullptr;
}
void StateData::clear_inhaler() {
  if (GetArena() == nullptr && inhaler_ != nullptr) {
    delete inhaler_;
  }
  inhaler_ = nullptr;
}
void StateData::clear_mechanicalventilator() {
  if (GetArena() == nullptr && mechanicalventilator_ != nullptr) {
    delete mechanicalventilator_;
  }
  mechanicalventilator_ = nullptr;
}
void StateData::clear_compartmentmanager() {
  if (GetArena() == nullptr && compartmentmanager_ != nullptr) {
    delete compartmentmanager_;
  }
  compartmentmanager_ = nullptr;
}
void StateData::clear_circuitmanager() {
  if (GetArena() == nullptr && circuitmanager_ != nullptr) {
    delete circuitmanager_;
  }
  circuitmanager_ = nullptr;
}
void StateData::clear_substance() {
  substance_.Clear();
}
void StateData::clear_compound() {
  compound_.Clear();
}
void StateData::clear_configuration() {
  if (GetArena() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
void StateData::clear_datarequestmanager() {
  if (GetArena() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
}
StateData::StateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activesubstance_(arena),
  activecompound_(arena),
  substance_(arena),
  compound_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.StateData)
}
StateData::StateData(const StateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      activesubstance_(from.activesubstance_),
      activecompound_(from.activecompound_),
      substance_(from.substance_),
      compound_(from.compound_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simulationtime()) {
    simulationtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.simulationtime_);
  } else {
    simulationtime_ = nullptr;
  }
  if (from._internal_has_currentpatient()) {
    currentpatient_ = new ::pulse::cdm::bind::PatientData(*from.currentpatient_);
  } else {
    currentpatient_ = nullptr;
  }
  if (from._internal_has_initialpatient()) {
    initialpatient_ = new ::pulse::cdm::bind::PatientData(*from.initialpatient_);
  } else {
    initialpatient_ = nullptr;
  }
  if (from._internal_has_conditions()) {
    conditions_ = new ::pulse::cdm::bind::ConditionListData(*from.conditions_);
  } else {
    conditions_ = nullptr;
  }
  if (from._internal_has_activeactions()) {
    activeactions_ = new ::pulse::cdm::bind::ActionListData(*from.activeactions_);
  } else {
    activeactions_ = nullptr;
  }
  if (from._internal_has_activeevents()) {
    activeevents_ = new ::pulse::cdm::bind::ActiveEventListData(*from.activeevents_);
  } else {
    activeevents_ = nullptr;
  }
  if (from._internal_has_bloodchemistry()) {
    bloodchemistry_ = new ::pulse::cpm::bind::BloodChemistryData(*from.bloodchemistry_);
  } else {
    bloodchemistry_ = nullptr;
  }
  if (from._internal_has_cardiovascular()) {
    cardiovascular_ = new ::pulse::cpm::bind::CardiovascularData(*from.cardiovascular_);
  } else {
    cardiovascular_ = nullptr;
  }
  if (from._internal_has_drug()) {
    drug_ = new ::pulse::cpm::bind::DrugData(*from.drug_);
  } else {
    drug_ = nullptr;
  }
  if (from._internal_has_endocrine()) {
    endocrine_ = new ::pulse::cpm::bind::EndocrineData(*from.endocrine_);
  } else {
    endocrine_ = nullptr;
  }
  if (from._internal_has_energy()) {
    energy_ = new ::pulse::cpm::bind::EnergyData(*from.energy_);
  } else {
    energy_ = nullptr;
  }
  if (from._internal_has_gastrointestinal()) {
    gastrointestinal_ = new ::pulse::cpm::bind::GastrointestinalData(*from.gastrointestinal_);
  } else {
    gastrointestinal_ = nullptr;
  }
  if (from._internal_has_hepatic()) {
    hepatic_ = new ::pulse::cpm::bind::HepaticData(*from.hepatic_);
  } else {
    hepatic_ = nullptr;
  }
  if (from._internal_has_nervous()) {
    nervous_ = new ::pulse::cpm::bind::NervousData(*from.nervous_);
  } else {
    nervous_ = nullptr;
  }
  if (from._internal_has_renal()) {
    renal_ = new ::pulse::cpm::bind::RenalData(*from.renal_);
  } else {
    renal_ = nullptr;
  }
  if (from._internal_has_respiratory()) {
    respiratory_ = new ::pulse::cpm::bind::RespiratoryData(*from.respiratory_);
  } else {
    respiratory_ = nullptr;
  }
  if (from._internal_has_tissue()) {
    tissue_ = new ::pulse::cpm::bind::TissueData(*from.tissue_);
  } else {
    tissue_ = nullptr;
  }
  if (from._internal_has_environment()) {
    environment_ = new ::pulse::cpm::bind::EnvironmentData(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  if (from._internal_has_anesthesiamachine()) {
    anesthesiamachine_ = new ::pulse::cpm::bind::AnesthesiaMachineData(*from.anesthesiamachine_);
  } else {
    anesthesiamachine_ = nullptr;
  }
  if (from._internal_has_electrocardiogram()) {
    electrocardiogram_ = new ::pulse::cpm::bind::ElectroCardioGramData(*from.electrocardiogram_);
  } else {
    electrocardiogram_ = nullptr;
  }
  if (from._internal_has_inhaler()) {
    inhaler_ = new ::pulse::cpm::bind::InhalerData(*from.inhaler_);
  } else {
    inhaler_ = nullptr;
  }
  if (from._internal_has_mechanicalventilator()) {
    mechanicalventilator_ = new ::pulse::cpm::bind::MechanicalVentilatorData(*from.mechanicalventilator_);
  } else {
    mechanicalventilator_ = nullptr;
  }
  if (from._internal_has_compartmentmanager()) {
    compartmentmanager_ = new ::pulse::cdm::bind::CompartmentManagerData(*from.compartmentmanager_);
  } else {
    compartmentmanager_ = nullptr;
  }
  if (from._internal_has_circuitmanager()) {
    circuitmanager_ = new ::pulse::cdm::bind::CircuitManagerData(*from.circuitmanager_);
  } else {
    circuitmanager_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::pulse::cpm::bind::ConfigurationData(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_datarequestmanager()) {
    datarequestmanager_ = new ::pulse::cdm::bind::DataRequestManagerData(*from.datarequestmanager_);
  } else {
    datarequestmanager_ = nullptr;
  }
  ::memcpy(&airwaymode_, &from.airwaymode_,
    static_cast<size_t>(reinterpret_cast<char*>(&intubation_) -
    reinterpret_cast<char*>(&airwaymode_)) + sizeof(intubation_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.StateData)
}

void StateData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&simulationtime_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&intubation_) -
      reinterpret_cast<char*>(&simulationtime_)) + sizeof(intubation_));
}

StateData::~StateData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.StateData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete simulationtime_;
  if (this != internal_default_instance()) delete currentpatient_;
  if (this != internal_default_instance()) delete initialpatient_;
  if (this != internal_default_instance()) delete conditions_;
  if (this != internal_default_instance()) delete activeactions_;
  if (this != internal_default_instance()) delete activeevents_;
  if (this != internal_default_instance()) delete bloodchemistry_;
  if (this != internal_default_instance()) delete cardiovascular_;
  if (this != internal_default_instance()) delete drug_;
  if (this != internal_default_instance()) delete endocrine_;
  if (this != internal_default_instance()) delete energy_;
  if (this != internal_default_instance()) delete gastrointestinal_;
  if (this != internal_default_instance()) delete hepatic_;
  if (this != internal_default_instance()) delete nervous_;
  if (this != internal_default_instance()) delete renal_;
  if (this != internal_default_instance()) delete respiratory_;
  if (this != internal_default_instance()) delete tissue_;
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete anesthesiamachine_;
  if (this != internal_default_instance()) delete electrocardiogram_;
  if (this != internal_default_instance()) delete inhaler_;
  if (this != internal_default_instance()) delete mechanicalventilator_;
  if (this != internal_default_instance()) delete compartmentmanager_;
  if (this != internal_default_instance()) delete circuitmanager_;
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete datarequestmanager_;
}

void StateData::ArenaDtor(void* object) {
  StateData* _this = reinterpret_cast< StateData* >(object);
  (void)_this;
}
void StateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateData& StateData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateData_pulse_2fcpm_2fbind_2fPulseState_2eproto.base);
  return *internal_default_instance();
}


void StateData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.StateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activesubstance_.Clear();
  activecompound_.Clear();
  substance_.Clear();
  compound_.Clear();
  if (GetArena() == nullptr && simulationtime_ != nullptr) {
    delete simulationtime_;
  }
  simulationtime_ = nullptr;
  if (GetArena() == nullptr && currentpatient_ != nullptr) {
    delete currentpatient_;
  }
  currentpatient_ = nullptr;
  if (GetArena() == nullptr && initialpatient_ != nullptr) {
    delete initialpatient_;
  }
  initialpatient_ = nullptr;
  if (GetArena() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
  if (GetArena() == nullptr && activeactions_ != nullptr) {
    delete activeactions_;
  }
  activeactions_ = nullptr;
  if (GetArena() == nullptr && activeevents_ != nullptr) {
    delete activeevents_;
  }
  activeevents_ = nullptr;
  if (GetArena() == nullptr && bloodchemistry_ != nullptr) {
    delete bloodchemistry_;
  }
  bloodchemistry_ = nullptr;
  if (GetArena() == nullptr && cardiovascular_ != nullptr) {
    delete cardiovascular_;
  }
  cardiovascular_ = nullptr;
  if (GetArena() == nullptr && drug_ != nullptr) {
    delete drug_;
  }
  drug_ = nullptr;
  if (GetArena() == nullptr && endocrine_ != nullptr) {
    delete endocrine_;
  }
  endocrine_ = nullptr;
  if (GetArena() == nullptr && energy_ != nullptr) {
    delete energy_;
  }
  energy_ = nullptr;
  if (GetArena() == nullptr && gastrointestinal_ != nullptr) {
    delete gastrointestinal_;
  }
  gastrointestinal_ = nullptr;
  if (GetArena() == nullptr && hepatic_ != nullptr) {
    delete hepatic_;
  }
  hepatic_ = nullptr;
  if (GetArena() == nullptr && nervous_ != nullptr) {
    delete nervous_;
  }
  nervous_ = nullptr;
  if (GetArena() == nullptr && renal_ != nullptr) {
    delete renal_;
  }
  renal_ = nullptr;
  if (GetArena() == nullptr && respiratory_ != nullptr) {
    delete respiratory_;
  }
  respiratory_ = nullptr;
  if (GetArena() == nullptr && tissue_ != nullptr) {
    delete tissue_;
  }
  tissue_ = nullptr;
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
  if (GetArena() == nullptr && anesthesiamachine_ != nullptr) {
    delete anesthesiamachine_;
  }
  anesthesiamachine_ = nullptr;
  if (GetArena() == nullptr && electrocardiogram_ != nullptr) {
    delete electrocardiogram_;
  }
  electrocardiogram_ = nullptr;
  if (GetArena() == nullptr && inhaler_ != nullptr) {
    delete inhaler_;
  }
  inhaler_ = nullptr;
  if (GetArena() == nullptr && mechanicalventilator_ != nullptr) {
    delete mechanicalventilator_;
  }
  mechanicalventilator_ = nullptr;
  if (GetArena() == nullptr && compartmentmanager_ != nullptr) {
    delete compartmentmanager_;
  }
  compartmentmanager_ = nullptr;
  if (GetArena() == nullptr && circuitmanager_ != nullptr) {
    delete circuitmanager_;
  }
  circuitmanager_ = nullptr;
  if (GetArena() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArena() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
  ::memset(&airwaymode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intubation_) -
      reinterpret_cast<char*>(&airwaymode_)) + sizeof(intubation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cpm.bind.eAirwayMode AirwayMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_airwaymode(static_cast<::pulse::cpm::bind::eAirwayMode>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch Intubation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_intubation(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData SimulationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulationtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PatientData CurrentPatient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentpatient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PatientData InitialPatient = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialpatient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ConditionListData Conditions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActionListData ActiveActions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_activeactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActiveEventListData ActiveEvents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activeevents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.BloodChemistryData BloodChemistry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodchemistry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.CardiovascularData Cardiovascular = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiovascular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.DrugData Drug = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_drug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.EndocrineData Endocrine = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_endocrine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.EnergyData Energy = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_energy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.GastrointestinalData Gastrointestinal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gastrointestinal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.HepaticData Hepatic = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_hepatic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.NervousData Nervous = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_nervous(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.RenalData Renal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_renal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.RespiratoryData Respiratory = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.TissueData Tissue = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.EnvironmentData Environment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.AnesthesiaMachineData AnesthesiaMachine = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_anesthesiamachine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ElectroCardioGramData ElectroCardioGram = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_electrocardiogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.InhalerData Inhaler = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_inhaler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.MechanicalVentilatorData MechanicalVentilator = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mechanicalventilator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.CompartmentManagerData CompartmentManager = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_compartmentmanager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.CircuitManagerData CircuitManager = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_circuitmanager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ActiveSubstance = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_activesubstance();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.StateData.ActiveSubstance"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ActiveCompound = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_activecompound();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.StateData.ActiveCompound"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceData Substance = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_substance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceCompoundData Compound = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_compound(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData Configuration = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_datarequestmanager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.StateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cpm.bind.eAirwayMode AirwayMode = 1;
  if (this->airwaymode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_airwaymode(), target);
  }

  // .pulse.cdm.bind.eSwitch Intubation = 2;
  if (this->intubation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_intubation(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData SimulationTime = 3;
  if (this->has_simulationtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::simulationtime(this), target, stream);
  }

  // .pulse.cdm.bind.PatientData CurrentPatient = 4;
  if (this->has_currentpatient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::currentpatient(this), target, stream);
  }

  // .pulse.cdm.bind.PatientData InitialPatient = 5;
  if (this->has_initialpatient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::initialpatient(this), target, stream);
  }

  // .pulse.cdm.bind.ConditionListData Conditions = 6;
  if (this->has_conditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::conditions(this), target, stream);
  }

  // .pulse.cdm.bind.ActionListData ActiveActions = 7;
  if (this->has_activeactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::activeactions(this), target, stream);
  }

  // .pulse.cdm.bind.ActiveEventListData ActiveEvents = 8;
  if (this->has_activeevents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::activeevents(this), target, stream);
  }

  // .pulse.cpm.bind.BloodChemistryData BloodChemistry = 9;
  if (this->has_bloodchemistry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::bloodchemistry(this), target, stream);
  }

  // .pulse.cpm.bind.CardiovascularData Cardiovascular = 10;
  if (this->has_cardiovascular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cardiovascular(this), target, stream);
  }

  // .pulse.cpm.bind.DrugData Drug = 11;
  if (this->has_drug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::drug(this), target, stream);
  }

  // .pulse.cpm.bind.EndocrineData Endocrine = 12;
  if (this->has_endocrine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::endocrine(this), target, stream);
  }

  // .pulse.cpm.bind.EnergyData Energy = 13;
  if (this->has_energy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::energy(this), target, stream);
  }

  // .pulse.cpm.bind.GastrointestinalData Gastrointestinal = 14;
  if (this->has_gastrointestinal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::gastrointestinal(this), target, stream);
  }

  // .pulse.cpm.bind.HepaticData Hepatic = 15;
  if (this->has_hepatic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::hepatic(this), target, stream);
  }

  // .pulse.cpm.bind.NervousData Nervous = 16;
  if (this->has_nervous()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::nervous(this), target, stream);
  }

  // .pulse.cpm.bind.RenalData Renal = 17;
  if (this->has_renal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::renal(this), target, stream);
  }

  // .pulse.cpm.bind.RespiratoryData Respiratory = 18;
  if (this->has_respiratory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::respiratory(this), target, stream);
  }

  // .pulse.cpm.bind.TissueData Tissue = 19;
  if (this->has_tissue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::tissue(this), target, stream);
  }

  // .pulse.cpm.bind.EnvironmentData Environment = 20;
  if (this->has_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::environment(this), target, stream);
  }

  // .pulse.cpm.bind.AnesthesiaMachineData AnesthesiaMachine = 21;
  if (this->has_anesthesiamachine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::anesthesiamachine(this), target, stream);
  }

  // .pulse.cpm.bind.ElectroCardioGramData ElectroCardioGram = 22;
  if (this->has_electrocardiogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::electrocardiogram(this), target, stream);
  }

  // .pulse.cpm.bind.InhalerData Inhaler = 23;
  if (this->has_inhaler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::inhaler(this), target, stream);
  }

  // .pulse.cpm.bind.MechanicalVentilatorData MechanicalVentilator = 24;
  if (this->has_mechanicalventilator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::mechanicalventilator(this), target, stream);
  }

  // .pulse.cdm.bind.CompartmentManagerData CompartmentManager = 25;
  if (this->has_compartmentmanager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::compartmentmanager(this), target, stream);
  }

  // .pulse.cdm.bind.CircuitManagerData CircuitManager = 26;
  if (this->has_circuitmanager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::circuitmanager(this), target, stream);
  }

  // repeated string ActiveSubstance = 27;
  for (int i = 0, n = this->_internal_activesubstance_size(); i < n; i++) {
    const auto& s = this->_internal_activesubstance(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.StateData.ActiveSubstance");
    target = stream->WriteString(27, s, target);
  }

  // repeated string ActiveCompound = 28;
  for (int i = 0, n = this->_internal_activecompound_size(); i < n; i++) {
    const auto& s = this->_internal_activecompound(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.StateData.ActiveCompound");
    target = stream->WriteString(28, s, target);
  }

  // repeated .pulse.cdm.bind.SubstanceData Substance = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_substance(i), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceCompoundData Compound = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compound_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_compound(i), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData Configuration = 31;
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::configuration(this), target, stream);
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 32;
  if (this->has_datarequestmanager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::datarequestmanager(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.StateData)
  return target;
}

size_t StateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.StateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ActiveSubstance = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(activesubstance_.size());
  for (int i = 0, n = activesubstance_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      activesubstance_.Get(i));
  }

  // repeated string ActiveCompound = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(activecompound_.size());
  for (int i = 0, n = activecompound_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      activecompound_.Get(i));
  }

  // repeated .pulse.cdm.bind.SubstanceData Substance = 29;
  total_size += 2UL * this->_internal_substance_size();
  for (const auto& msg : this->substance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.SubstanceCompoundData Compound = 30;
  total_size += 2UL * this->_internal_compound_size();
  for (const auto& msg : this->compound_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.ScalarTimeData SimulationTime = 3;
  if (this->has_simulationtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simulationtime_);
  }

  // .pulse.cdm.bind.PatientData CurrentPatient = 4;
  if (this->has_currentpatient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentpatient_);
  }

  // .pulse.cdm.bind.PatientData InitialPatient = 5;
  if (this->has_initialpatient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initialpatient_);
  }

  // .pulse.cdm.bind.ConditionListData Conditions = 6;
  if (this->has_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditions_);
  }

  // .pulse.cdm.bind.ActionListData ActiveActions = 7;
  if (this->has_activeactions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activeactions_);
  }

  // .pulse.cdm.bind.ActiveEventListData ActiveEvents = 8;
  if (this->has_activeevents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activeevents_);
  }

  // .pulse.cpm.bind.BloodChemistryData BloodChemistry = 9;
  if (this->has_bloodchemistry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodchemistry_);
  }

  // .pulse.cpm.bind.CardiovascularData Cardiovascular = 10;
  if (this->has_cardiovascular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiovascular_);
  }

  // .pulse.cpm.bind.DrugData Drug = 11;
  if (this->has_drug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drug_);
  }

  // .pulse.cpm.bind.EndocrineData Endocrine = 12;
  if (this->has_endocrine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endocrine_);
  }

  // .pulse.cpm.bind.EnergyData Energy = 13;
  if (this->has_energy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energy_);
  }

  // .pulse.cpm.bind.GastrointestinalData Gastrointestinal = 14;
  if (this->has_gastrointestinal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gastrointestinal_);
  }

  // .pulse.cpm.bind.HepaticData Hepatic = 15;
  if (this->has_hepatic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hepatic_);
  }

  // .pulse.cpm.bind.NervousData Nervous = 16;
  if (this->has_nervous()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nervous_);
  }

  // .pulse.cpm.bind.RenalData Renal = 17;
  if (this->has_renal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renal_);
  }

  // .pulse.cpm.bind.RespiratoryData Respiratory = 18;
  if (this->has_respiratory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratory_);
  }

  // .pulse.cpm.bind.TissueData Tissue = 19;
  if (this->has_tissue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissue_);
  }

  // .pulse.cpm.bind.EnvironmentData Environment = 20;
  if (this->has_environment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  // .pulse.cpm.bind.AnesthesiaMachineData AnesthesiaMachine = 21;
  if (this->has_anesthesiamachine()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anesthesiamachine_);
  }

  // .pulse.cpm.bind.ElectroCardioGramData ElectroCardioGram = 22;
  if (this->has_electrocardiogram()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *electrocardiogram_);
  }

  // .pulse.cpm.bind.InhalerData Inhaler = 23;
  if (this->has_inhaler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inhaler_);
  }

  // .pulse.cpm.bind.MechanicalVentilatorData MechanicalVentilator = 24;
  if (this->has_mechanicalventilator()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mechanicalventilator_);
  }

  // .pulse.cdm.bind.CompartmentManagerData CompartmentManager = 25;
  if (this->has_compartmentmanager()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compartmentmanager_);
  }

  // .pulse.cdm.bind.CircuitManagerData CircuitManager = 26;
  if (this->has_circuitmanager()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *circuitmanager_);
  }

  // .pulse.cpm.bind.ConfigurationData Configuration = 31;
  if (this->has_configuration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 32;
  if (this->has_datarequestmanager()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datarequestmanager_);
  }

  // .pulse.cpm.bind.eAirwayMode AirwayMode = 1;
  if (this->airwaymode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_airwaymode());
  }

  // .pulse.cdm.bind.eSwitch Intubation = 2;
  if (this->intubation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intubation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.StateData)
  GOOGLE_DCHECK_NE(&from, this);
  const StateData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.StateData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.StateData)
    MergeFrom(*source);
  }
}

void StateData::MergeFrom(const StateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.StateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activesubstance_.MergeFrom(from.activesubstance_);
  activecompound_.MergeFrom(from.activecompound_);
  substance_.MergeFrom(from.substance_);
  compound_.MergeFrom(from.compound_);
  if (from.has_simulationtime()) {
    _internal_mutable_simulationtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_simulationtime());
  }
  if (from.has_currentpatient()) {
    _internal_mutable_currentpatient()->::pulse::cdm::bind::PatientData::MergeFrom(from._internal_currentpatient());
  }
  if (from.has_initialpatient()) {
    _internal_mutable_initialpatient()->::pulse::cdm::bind::PatientData::MergeFrom(from._internal_initialpatient());
  }
  if (from.has_conditions()) {
    _internal_mutable_conditions()->::pulse::cdm::bind::ConditionListData::MergeFrom(from._internal_conditions());
  }
  if (from.has_activeactions()) {
    _internal_mutable_activeactions()->::pulse::cdm::bind::ActionListData::MergeFrom(from._internal_activeactions());
  }
  if (from.has_activeevents()) {
    _internal_mutable_activeevents()->::pulse::cdm::bind::ActiveEventListData::MergeFrom(from._internal_activeevents());
  }
  if (from.has_bloodchemistry()) {
    _internal_mutable_bloodchemistry()->::pulse::cpm::bind::BloodChemistryData::MergeFrom(from._internal_bloodchemistry());
  }
  if (from.has_cardiovascular()) {
    _internal_mutable_cardiovascular()->::pulse::cpm::bind::CardiovascularData::MergeFrom(from._internal_cardiovascular());
  }
  if (from.has_drug()) {
    _internal_mutable_drug()->::pulse::cpm::bind::DrugData::MergeFrom(from._internal_drug());
  }
  if (from.has_endocrine()) {
    _internal_mutable_endocrine()->::pulse::cpm::bind::EndocrineData::MergeFrom(from._internal_endocrine());
  }
  if (from.has_energy()) {
    _internal_mutable_energy()->::pulse::cpm::bind::EnergyData::MergeFrom(from._internal_energy());
  }
  if (from.has_gastrointestinal()) {
    _internal_mutable_gastrointestinal()->::pulse::cpm::bind::GastrointestinalData::MergeFrom(from._internal_gastrointestinal());
  }
  if (from.has_hepatic()) {
    _internal_mutable_hepatic()->::pulse::cpm::bind::HepaticData::MergeFrom(from._internal_hepatic());
  }
  if (from.has_nervous()) {
    _internal_mutable_nervous()->::pulse::cpm::bind::NervousData::MergeFrom(from._internal_nervous());
  }
  if (from.has_renal()) {
    _internal_mutable_renal()->::pulse::cpm::bind::RenalData::MergeFrom(from._internal_renal());
  }
  if (from.has_respiratory()) {
    _internal_mutable_respiratory()->::pulse::cpm::bind::RespiratoryData::MergeFrom(from._internal_respiratory());
  }
  if (from.has_tissue()) {
    _internal_mutable_tissue()->::pulse::cpm::bind::TissueData::MergeFrom(from._internal_tissue());
  }
  if (from.has_environment()) {
    _internal_mutable_environment()->::pulse::cpm::bind::EnvironmentData::MergeFrom(from._internal_environment());
  }
  if (from.has_anesthesiamachine()) {
    _internal_mutable_anesthesiamachine()->::pulse::cpm::bind::AnesthesiaMachineData::MergeFrom(from._internal_anesthesiamachine());
  }
  if (from.has_electrocardiogram()) {
    _internal_mutable_electrocardiogram()->::pulse::cpm::bind::ElectroCardioGramData::MergeFrom(from._internal_electrocardiogram());
  }
  if (from.has_inhaler()) {
    _internal_mutable_inhaler()->::pulse::cpm::bind::InhalerData::MergeFrom(from._internal_inhaler());
  }
  if (from.has_mechanicalventilator()) {
    _internal_mutable_mechanicalventilator()->::pulse::cpm::bind::MechanicalVentilatorData::MergeFrom(from._internal_mechanicalventilator());
  }
  if (from.has_compartmentmanager()) {
    _internal_mutable_compartmentmanager()->::pulse::cdm::bind::CompartmentManagerData::MergeFrom(from._internal_compartmentmanager());
  }
  if (from.has_circuitmanager()) {
    _internal_mutable_circuitmanager()->::pulse::cdm::bind::CircuitManagerData::MergeFrom(from._internal_circuitmanager());
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->::pulse::cpm::bind::ConfigurationData::MergeFrom(from._internal_configuration());
  }
  if (from.has_datarequestmanager()) {
    _internal_mutable_datarequestmanager()->::pulse::cdm::bind::DataRequestManagerData::MergeFrom(from._internal_datarequestmanager());
  }
  if (from.airwaymode() != 0) {
    _internal_set_airwaymode(from._internal_airwaymode());
  }
  if (from.intubation() != 0) {
    _internal_set_intubation(from._internal_intubation());
  }
}

void StateData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.StateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateData::CopyFrom(const StateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.StateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateData::IsInitialized() const {
  return true;
}

void StateData::InternalSwap(StateData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  activesubstance_.InternalSwap(&other->activesubstance_);
  activecompound_.InternalSwap(&other->activecompound_);
  substance_.InternalSwap(&other->substance_);
  compound_.InternalSwap(&other->compound_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateData, intubation_)
      + sizeof(StateData::intubation_)
      - PROTOBUF_FIELD_OFFSET(StateData, simulationtime_)>(
          reinterpret_cast<char*>(&simulationtime_),
          reinterpret_cast<char*>(&other->simulationtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::StateData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::StateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::StateData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
