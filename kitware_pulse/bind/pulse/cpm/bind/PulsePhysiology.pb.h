// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulsePhysiology.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Physiology.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class BloodChemistryData;
class BloodChemistryDataDefaultTypeInternal;
extern BloodChemistryDataDefaultTypeInternal _BloodChemistryData_default_instance_;
class CardiovascularData;
class CardiovascularDataDefaultTypeInternal;
extern CardiovascularDataDefaultTypeInternal _CardiovascularData_default_instance_;
class DrugData;
class DrugDataDefaultTypeInternal;
extern DrugDataDefaultTypeInternal _DrugData_default_instance_;
class EndocrineData;
class EndocrineDataDefaultTypeInternal;
extern EndocrineDataDefaultTypeInternal _EndocrineData_default_instance_;
class EnergyData;
class EnergyDataDefaultTypeInternal;
extern EnergyDataDefaultTypeInternal _EnergyData_default_instance_;
class GastrointestinalData;
class GastrointestinalDataDefaultTypeInternal;
extern GastrointestinalDataDefaultTypeInternal _GastrointestinalData_default_instance_;
class HepaticData;
class HepaticDataDefaultTypeInternal;
extern HepaticDataDefaultTypeInternal _HepaticData_default_instance_;
class NervousData;
class NervousDataDefaultTypeInternal;
extern NervousDataDefaultTypeInternal _NervousData_default_instance_;
class RenalData;
class RenalDataDefaultTypeInternal;
extern RenalDataDefaultTypeInternal _RenalData_default_instance_;
class RespiratoryData;
class RespiratoryDataDefaultTypeInternal;
extern RespiratoryDataDefaultTypeInternal _RespiratoryData_default_instance_;
class TissueData;
class TissueDataDefaultTypeInternal;
extern TissueDataDefaultTypeInternal _TissueData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cpm::bind::BloodChemistryData* Arena::CreateMaybeMessage<::pulse::cpm::bind::BloodChemistryData>(Arena*);
template<> ::pulse::cpm::bind::CardiovascularData* Arena::CreateMaybeMessage<::pulse::cpm::bind::CardiovascularData>(Arena*);
template<> ::pulse::cpm::bind::DrugData* Arena::CreateMaybeMessage<::pulse::cpm::bind::DrugData>(Arena*);
template<> ::pulse::cpm::bind::EndocrineData* Arena::CreateMaybeMessage<::pulse::cpm::bind::EndocrineData>(Arena*);
template<> ::pulse::cpm::bind::EnergyData* Arena::CreateMaybeMessage<::pulse::cpm::bind::EnergyData>(Arena*);
template<> ::pulse::cpm::bind::GastrointestinalData* Arena::CreateMaybeMessage<::pulse::cpm::bind::GastrointestinalData>(Arena*);
template<> ::pulse::cpm::bind::HepaticData* Arena::CreateMaybeMessage<::pulse::cpm::bind::HepaticData>(Arena*);
template<> ::pulse::cpm::bind::NervousData* Arena::CreateMaybeMessage<::pulse::cpm::bind::NervousData>(Arena*);
template<> ::pulse::cpm::bind::RenalData* Arena::CreateMaybeMessage<::pulse::cpm::bind::RenalData>(Arena*);
template<> ::pulse::cpm::bind::RespiratoryData* Arena::CreateMaybeMessage<::pulse::cpm::bind::RespiratoryData>(Arena*);
template<> ::pulse::cpm::bind::TissueData* Arena::CreateMaybeMessage<::pulse::cpm::bind::TissueData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class BloodChemistryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.BloodChemistryData) */ {
 public:
  inline BloodChemistryData() : BloodChemistryData(nullptr) {}
  virtual ~BloodChemistryData();

  BloodChemistryData(const BloodChemistryData& from);
  BloodChemistryData(BloodChemistryData&& from) noexcept
    : BloodChemistryData() {
    *this = ::std::move(from);
  }

  inline BloodChemistryData& operator=(const BloodChemistryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloodChemistryData& operator=(BloodChemistryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BloodChemistryData& default_instance();

  static inline const BloodChemistryData* internal_default_instance() {
    return reinterpret_cast<const BloodChemistryData*>(
               &_BloodChemistryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BloodChemistryData& a, BloodChemistryData& b) {
    a.Swap(&b);
  }
  inline void Swap(BloodChemistryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloodChemistryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BloodChemistryData* New() const final {
    return CreateMaybeMessage<BloodChemistryData>(nullptr);
  }

  BloodChemistryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BloodChemistryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BloodChemistryData& from);
  void MergeFrom(const BloodChemistryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloodChemistryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.BloodChemistryData";
  }
  protected:
  explicit BloodChemistryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kArterialOxygenAverageMmHgFieldNumber = 2,
    kArterialCarbonDioxideAverageMmHgFieldNumber = 3,
  };
  // .pulse.cdm.bind.BloodChemistrySystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::BloodChemistrySystemData& common() const;
  ::pulse::cdm::bind::BloodChemistrySystemData* release_common();
  ::pulse::cdm::bind::BloodChemistrySystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::BloodChemistrySystemData* common);
  private:
  const ::pulse::cdm::bind::BloodChemistrySystemData& _internal_common() const;
  ::pulse::cdm::bind::BloodChemistrySystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::BloodChemistrySystemData* common);
  ::pulse::cdm::bind::BloodChemistrySystemData* unsafe_arena_release_common();

  // .pulse.cdm.bind.RunningAverageData ArterialOxygenAverage_mmHg = 2;
  bool has_arterialoxygenaverage_mmhg() const;
  private:
  bool _internal_has_arterialoxygenaverage_mmhg() const;
  public:
  void clear_arterialoxygenaverage_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& arterialoxygenaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_arterialoxygenaverage_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_arterialoxygenaverage_mmhg();
  void set_allocated_arterialoxygenaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialoxygenaverage_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_arterialoxygenaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_arterialoxygenaverage_mmhg();
  public:
  void unsafe_arena_set_allocated_arterialoxygenaverage_mmhg(
      ::pulse::cdm::bind::RunningAverageData* arterialoxygenaverage_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_arterialoxygenaverage_mmhg();

  // .pulse.cdm.bind.RunningAverageData ArterialCarbonDioxideAverage_mmHg = 3;
  bool has_arterialcarbondioxideaverage_mmhg() const;
  private:
  bool _internal_has_arterialcarbondioxideaverage_mmhg() const;
  public:
  void clear_arterialcarbondioxideaverage_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& arterialcarbondioxideaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_arterialcarbondioxideaverage_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_arterialcarbondioxideaverage_mmhg();
  void set_allocated_arterialcarbondioxideaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialcarbondioxideaverage_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_arterialcarbondioxideaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_arterialcarbondioxideaverage_mmhg();
  public:
  void unsafe_arena_set_allocated_arterialcarbondioxideaverage_mmhg(
      ::pulse::cdm::bind::RunningAverageData* arterialcarbondioxideaverage_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_arterialcarbondioxideaverage_mmhg();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.BloodChemistryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BloodChemistrySystemData* common_;
  ::pulse::cdm::bind::RunningAverageData* arterialoxygenaverage_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* arterialcarbondioxideaverage_mmhg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class CardiovascularData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.CardiovascularData) */ {
 public:
  inline CardiovascularData() : CardiovascularData(nullptr) {}
  virtual ~CardiovascularData();

  CardiovascularData(const CardiovascularData& from);
  CardiovascularData(CardiovascularData&& from) noexcept
    : CardiovascularData() {
    *this = ::std::move(from);
  }

  inline CardiovascularData& operator=(const CardiovascularData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardiovascularData& operator=(CardiovascularData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardiovascularData& default_instance();

  static inline const CardiovascularData* internal_default_instance() {
    return reinterpret_cast<const CardiovascularData*>(
               &_CardiovascularData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CardiovascularData& a, CardiovascularData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardiovascularData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardiovascularData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardiovascularData* New() const final {
    return CreateMaybeMessage<CardiovascularData>(nullptr);
  }

  CardiovascularData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardiovascularData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardiovascularData& from);
  void MergeFrom(const CardiovascularData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardiovascularData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.CardiovascularData";
  }
  protected:
  explicit CardiovascularData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kCardiacCycleArterialPressureMmHgFieldNumber = 25,
    kCardiacCycleArterialCO2PartialPressureMmHgFieldNumber = 26,
    kCardiacCyclePulmonaryCapillariesWedgePressureMmHgFieldNumber = 27,
    kCardiacCyclePulmonaryCapillariesFlowMLPerSFieldNumber = 28,
    kCardiacCyclePulmonaryShuntFlowMLPerSFieldNumber = 29,
    kCardiacCyclePulmonaryArteryPressureMmHgFieldNumber = 30,
    kCardiacCycleCentralVenousPressureMmHgFieldNumber = 31,
    kCardiacCycleSkinFlowMLPerSFieldNumber = 32,
    kCardiacCyclePeriodSFieldNumber = 5,
    kCurrentCardiacCycleDurationSFieldNumber = 6,
    kLeftHeartElastanceModifierFieldNumber = 7,
    kLeftHeartElastanceMmHgPerMLFieldNumber = 8,
    kLeftHeartElastanceMaxMmHgPerMLFieldNumber = 9,
    kLeftHeartElastanceMinMmHgPerMLFieldNumber = 10,
    kRightHeartElastanceMmHgPerMLFieldNumber = 11,
    kRightHeartElastanceMaxMmHgPerMLFieldNumber = 12,
    kRightHeartElastanceMinMmHgPerMLFieldNumber = 13,
    kCompressionTimeSFieldNumber = 14,
    kCompressionRatioFieldNumber = 15,
    kCompressionPeriodSFieldNumber = 16,
    kCurrentCardiacCycleTimeSFieldNumber = 17,
    kCardiacCycleDiastolicVolumeMLFieldNumber = 18,
    kCardiacCycleAortaPressureLowMmHgFieldNumber = 19,
    kCardiacCycleAortaPressureHighMmHgFieldNumber = 20,
    kCardiacCyclePulmonaryArteryPressureLowMmHgFieldNumber = 21,
    kCardiacCyclePulmonaryArteryPressureHighMmHgFieldNumber = 22,
    kLastCardiacCycleMeanArterialCO2PartialPressureMmHgFieldNumber = 23,
    kCardiacCycleStrokeVolumeMLFieldNumber = 24,
    kStartSystoleFieldNumber = 2,
    kHeartFlowDetectedFieldNumber = 3,
    kEnterCardiacArrestFieldNumber = 4,
  };
  // .pulse.cdm.bind.CardiovascularSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::CardiovascularSystemData& common() const;
  ::pulse::cdm::bind::CardiovascularSystemData* release_common();
  ::pulse::cdm::bind::CardiovascularSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::CardiovascularSystemData* common);
  private:
  const ::pulse::cdm::bind::CardiovascularSystemData& _internal_common() const;
  ::pulse::cdm::bind::CardiovascularSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::CardiovascularSystemData* common);
  ::pulse::cdm::bind::CardiovascularSystemData* unsafe_arena_release_common();

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialPressure_mmHg = 25;
  bool has_cardiaccyclearterialpressure_mmhg() const;
  private:
  bool _internal_has_cardiaccyclearterialpressure_mmhg() const;
  public:
  void clear_cardiaccyclearterialpressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclearterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclearterialpressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclearterialpressure_mmhg();
  void set_allocated_cardiaccyclearterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialpressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclearterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclearterialpressure_mmhg();
  public:
  void unsafe_arena_set_allocated_cardiaccyclearterialpressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialpressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclearterialpressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg = 26;
  bool has_cardiaccyclearterialco2partialpressure_mmhg() const;
  private:
  bool _internal_has_cardiaccyclearterialco2partialpressure_mmhg() const;
  public:
  void clear_cardiaccyclearterialco2partialpressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclearterialco2partialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclearterialco2partialpressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclearterialco2partialpressure_mmhg();
  void set_allocated_cardiaccyclearterialco2partialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialco2partialpressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclearterialco2partialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclearterialco2partialpressure_mmhg();
  public:
  void unsafe_arena_set_allocated_cardiaccyclearterialco2partialpressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialco2partialpressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclearterialco2partialpressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg = 27;
  bool has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const;
  private:
  bool _internal_has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const;
  public:
  void clear_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
  void set_allocated_cardiaccyclepulmonarycapillarieswedgepressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillarieswedgepressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
  public:
  void unsafe_arena_set_allocated_cardiaccyclepulmonarycapillarieswedgepressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillarieswedgepressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s = 28;
  bool has_cardiaccyclepulmonarycapillariesflow_ml_per_s() const;
  private:
  bool _internal_has_cardiaccyclepulmonarycapillariesflow_ml_per_s() const;
  public:
  void clear_cardiaccyclepulmonarycapillariesflow_ml_per_s();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonarycapillariesflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclepulmonarycapillariesflow_ml_per_s();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s();
  void set_allocated_cardiaccyclepulmonarycapillariesflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillariesflow_ml_per_s);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclepulmonarycapillariesflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s();
  public:
  void unsafe_arena_set_allocated_cardiaccyclepulmonarycapillariesflow_ml_per_s(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillariesflow_ml_per_s);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclepulmonarycapillariesflow_ml_per_s();

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s = 29;
  bool has_cardiaccyclepulmonaryshuntflow_ml_per_s() const;
  private:
  bool _internal_has_cardiaccyclepulmonaryshuntflow_ml_per_s() const;
  public:
  void clear_cardiaccyclepulmonaryshuntflow_ml_per_s();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonaryshuntflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclepulmonaryshuntflow_ml_per_s();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclepulmonaryshuntflow_ml_per_s();
  void set_allocated_cardiaccyclepulmonaryshuntflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryshuntflow_ml_per_s);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclepulmonaryshuntflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclepulmonaryshuntflow_ml_per_s();
  public:
  void unsafe_arena_set_allocated_cardiaccyclepulmonaryshuntflow_ml_per_s(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryshuntflow_ml_per_s);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclepulmonaryshuntflow_ml_per_s();

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg = 30;
  bool has_cardiaccyclepulmonaryarterypressure_mmhg() const;
  private:
  bool _internal_has_cardiaccyclepulmonaryarterypressure_mmhg() const;
  public:
  void clear_cardiaccyclepulmonaryarterypressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonaryarterypressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclepulmonaryarterypressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclepulmonaryarterypressure_mmhg();
  void set_allocated_cardiaccyclepulmonaryarterypressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryarterypressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclepulmonaryarterypressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclepulmonaryarterypressure_mmhg();
  public:
  void unsafe_arena_set_allocated_cardiaccyclepulmonaryarterypressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryarterypressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclepulmonaryarterypressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData CardiacCycleCentralVenousPressure_mmHg = 31;
  bool has_cardiaccyclecentralvenouspressure_mmhg() const;
  private:
  bool _internal_has_cardiaccyclecentralvenouspressure_mmhg() const;
  public:
  void clear_cardiaccyclecentralvenouspressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccyclecentralvenouspressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccyclecentralvenouspressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccyclecentralvenouspressure_mmhg();
  void set_allocated_cardiaccyclecentralvenouspressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclecentralvenouspressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccyclecentralvenouspressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccyclecentralvenouspressure_mmhg();
  public:
  void unsafe_arena_set_allocated_cardiaccyclecentralvenouspressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* cardiaccyclecentralvenouspressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccyclecentralvenouspressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData CardiacCycleSkinFlow_mL_Per_s = 32;
  bool has_cardiaccycleskinflow_ml_per_s() const;
  private:
  bool _internal_has_cardiaccycleskinflow_ml_per_s() const;
  public:
  void clear_cardiaccycleskinflow_ml_per_s();
  const ::pulse::cdm::bind::RunningAverageData& cardiaccycleskinflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* release_cardiaccycleskinflow_ml_per_s();
  ::pulse::cdm::bind::RunningAverageData* mutable_cardiaccycleskinflow_ml_per_s();
  void set_allocated_cardiaccycleskinflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccycleskinflow_ml_per_s);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_cardiaccycleskinflow_ml_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_cardiaccycleskinflow_ml_per_s();
  public:
  void unsafe_arena_set_allocated_cardiaccycleskinflow_ml_per_s(
      ::pulse::cdm::bind::RunningAverageData* cardiaccycleskinflow_ml_per_s);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_cardiaccycleskinflow_ml_per_s();

  // double CardiacCyclePeriod_s = 5;
  void clear_cardiaccycleperiod_s();
  double cardiaccycleperiod_s() const;
  void set_cardiaccycleperiod_s(double value);
  private:
  double _internal_cardiaccycleperiod_s() const;
  void _internal_set_cardiaccycleperiod_s(double value);
  public:

  // double CurrentCardiacCycleDuration_s = 6;
  void clear_currentcardiaccycleduration_s();
  double currentcardiaccycleduration_s() const;
  void set_currentcardiaccycleduration_s(double value);
  private:
  double _internal_currentcardiaccycleduration_s() const;
  void _internal_set_currentcardiaccycleduration_s(double value);
  public:

  // double LeftHeartElastanceModifier = 7;
  void clear_leftheartelastancemodifier();
  double leftheartelastancemodifier() const;
  void set_leftheartelastancemodifier(double value);
  private:
  double _internal_leftheartelastancemodifier() const;
  void _internal_set_leftheartelastancemodifier(double value);
  public:

  // double LeftHeartElastance_mmHg_Per_mL = 8;
  void clear_leftheartelastance_mmhg_per_ml();
  double leftheartelastance_mmhg_per_ml() const;
  void set_leftheartelastance_mmhg_per_ml(double value);
  private:
  double _internal_leftheartelastance_mmhg_per_ml() const;
  void _internal_set_leftheartelastance_mmhg_per_ml(double value);
  public:

  // double LeftHeartElastanceMax_mmHg_Per_mL = 9;
  void clear_leftheartelastancemax_mmhg_per_ml();
  double leftheartelastancemax_mmhg_per_ml() const;
  void set_leftheartelastancemax_mmhg_per_ml(double value);
  private:
  double _internal_leftheartelastancemax_mmhg_per_ml() const;
  void _internal_set_leftheartelastancemax_mmhg_per_ml(double value);
  public:

  // double LeftHeartElastanceMin_mmHg_Per_mL = 10;
  void clear_leftheartelastancemin_mmhg_per_ml();
  double leftheartelastancemin_mmhg_per_ml() const;
  void set_leftheartelastancemin_mmhg_per_ml(double value);
  private:
  double _internal_leftheartelastancemin_mmhg_per_ml() const;
  void _internal_set_leftheartelastancemin_mmhg_per_ml(double value);
  public:

  // double RightHeartElastance_mmHg_Per_mL = 11;
  void clear_rightheartelastance_mmhg_per_ml();
  double rightheartelastance_mmhg_per_ml() const;
  void set_rightheartelastance_mmhg_per_ml(double value);
  private:
  double _internal_rightheartelastance_mmhg_per_ml() const;
  void _internal_set_rightheartelastance_mmhg_per_ml(double value);
  public:

  // double RightHeartElastanceMax_mmHg_Per_mL = 12;
  void clear_rightheartelastancemax_mmhg_per_ml();
  double rightheartelastancemax_mmhg_per_ml() const;
  void set_rightheartelastancemax_mmhg_per_ml(double value);
  private:
  double _internal_rightheartelastancemax_mmhg_per_ml() const;
  void _internal_set_rightheartelastancemax_mmhg_per_ml(double value);
  public:

  // double RightHeartElastanceMin_mmHg_Per_mL = 13;
  void clear_rightheartelastancemin_mmhg_per_ml();
  double rightheartelastancemin_mmhg_per_ml() const;
  void set_rightheartelastancemin_mmhg_per_ml(double value);
  private:
  double _internal_rightheartelastancemin_mmhg_per_ml() const;
  void _internal_set_rightheartelastancemin_mmhg_per_ml(double value);
  public:

  // double CompressionTime_s = 14;
  void clear_compressiontime_s();
  double compressiontime_s() const;
  void set_compressiontime_s(double value);
  private:
  double _internal_compressiontime_s() const;
  void _internal_set_compressiontime_s(double value);
  public:

  // double CompressionRatio = 15;
  void clear_compressionratio();
  double compressionratio() const;
  void set_compressionratio(double value);
  private:
  double _internal_compressionratio() const;
  void _internal_set_compressionratio(double value);
  public:

  // double CompressionPeriod_s = 16;
  void clear_compressionperiod_s();
  double compressionperiod_s() const;
  void set_compressionperiod_s(double value);
  private:
  double _internal_compressionperiod_s() const;
  void _internal_set_compressionperiod_s(double value);
  public:

  // double CurrentCardiacCycleTime_s = 17;
  void clear_currentcardiaccycletime_s();
  double currentcardiaccycletime_s() const;
  void set_currentcardiaccycletime_s(double value);
  private:
  double _internal_currentcardiaccycletime_s() const;
  void _internal_set_currentcardiaccycletime_s(double value);
  public:

  // double CardiacCycleDiastolicVolume_mL = 18;
  void clear_cardiaccyclediastolicvolume_ml();
  double cardiaccyclediastolicvolume_ml() const;
  void set_cardiaccyclediastolicvolume_ml(double value);
  private:
  double _internal_cardiaccyclediastolicvolume_ml() const;
  void _internal_set_cardiaccyclediastolicvolume_ml(double value);
  public:

  // double CardiacCycleAortaPressureLow_mmHg = 19;
  void clear_cardiaccycleaortapressurelow_mmhg();
  double cardiaccycleaortapressurelow_mmhg() const;
  void set_cardiaccycleaortapressurelow_mmhg(double value);
  private:
  double _internal_cardiaccycleaortapressurelow_mmhg() const;
  void _internal_set_cardiaccycleaortapressurelow_mmhg(double value);
  public:

  // double CardiacCycleAortaPressureHigh_mmHg = 20;
  void clear_cardiaccycleaortapressurehigh_mmhg();
  double cardiaccycleaortapressurehigh_mmhg() const;
  void set_cardiaccycleaortapressurehigh_mmhg(double value);
  private:
  double _internal_cardiaccycleaortapressurehigh_mmhg() const;
  void _internal_set_cardiaccycleaortapressurehigh_mmhg(double value);
  public:

  // double CardiacCyclePulmonaryArteryPressureLow_mmHg = 21;
  void clear_cardiaccyclepulmonaryarterypressurelow_mmhg();
  double cardiaccyclepulmonaryarterypressurelow_mmhg() const;
  void set_cardiaccyclepulmonaryarterypressurelow_mmhg(double value);
  private:
  double _internal_cardiaccyclepulmonaryarterypressurelow_mmhg() const;
  void _internal_set_cardiaccyclepulmonaryarterypressurelow_mmhg(double value);
  public:

  // double CardiacCyclePulmonaryArteryPressureHigh_mmHg = 22;
  void clear_cardiaccyclepulmonaryarterypressurehigh_mmhg();
  double cardiaccyclepulmonaryarterypressurehigh_mmhg() const;
  void set_cardiaccyclepulmonaryarterypressurehigh_mmhg(double value);
  private:
  double _internal_cardiaccyclepulmonaryarterypressurehigh_mmhg() const;
  void _internal_set_cardiaccyclepulmonaryarterypressurehigh_mmhg(double value);
  public:

  // double LastCardiacCycleMeanArterialCO2PartialPressure_mmHg = 23;
  void clear_lastcardiaccyclemeanarterialco2partialpressure_mmhg();
  double lastcardiaccyclemeanarterialco2partialpressure_mmhg() const;
  void set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(double value);
  private:
  double _internal_lastcardiaccyclemeanarterialco2partialpressure_mmhg() const;
  void _internal_set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(double value);
  public:

  // double CardiacCycleStrokeVolume_mL = 24;
  void clear_cardiaccyclestrokevolume_ml();
  double cardiaccyclestrokevolume_ml() const;
  void set_cardiaccyclestrokevolume_ml(double value);
  private:
  double _internal_cardiaccyclestrokevolume_ml() const;
  void _internal_set_cardiaccyclestrokevolume_ml(double value);
  public:

  // bool StartSystole = 2;
  void clear_startsystole();
  bool startsystole() const;
  void set_startsystole(bool value);
  private:
  bool _internal_startsystole() const;
  void _internal_set_startsystole(bool value);
  public:

  // bool HeartFlowDetected = 3;
  void clear_heartflowdetected();
  bool heartflowdetected() const;
  void set_heartflowdetected(bool value);
  private:
  bool _internal_heartflowdetected() const;
  void _internal_set_heartflowdetected(bool value);
  public:

  // bool EnterCardiacArrest = 4;
  void clear_entercardiacarrest();
  bool entercardiacarrest() const;
  void set_entercardiacarrest(bool value);
  private:
  bool _internal_entercardiacarrest() const;
  void _internal_set_entercardiacarrest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.CardiovascularData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::CardiovascularSystemData* common_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialpressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialco2partialpressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryshuntflow_ml_per_s_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryarterypressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccyclecentralvenouspressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* cardiaccycleskinflow_ml_per_s_;
  double cardiaccycleperiod_s_;
  double currentcardiaccycleduration_s_;
  double leftheartelastancemodifier_;
  double leftheartelastance_mmhg_per_ml_;
  double leftheartelastancemax_mmhg_per_ml_;
  double leftheartelastancemin_mmhg_per_ml_;
  double rightheartelastance_mmhg_per_ml_;
  double rightheartelastancemax_mmhg_per_ml_;
  double rightheartelastancemin_mmhg_per_ml_;
  double compressiontime_s_;
  double compressionratio_;
  double compressionperiod_s_;
  double currentcardiaccycletime_s_;
  double cardiaccyclediastolicvolume_ml_;
  double cardiaccycleaortapressurelow_mmhg_;
  double cardiaccycleaortapressurehigh_mmhg_;
  double cardiaccyclepulmonaryarterypressurelow_mmhg_;
  double cardiaccyclepulmonaryarterypressurehigh_mmhg_;
  double lastcardiaccyclemeanarterialco2partialpressure_mmhg_;
  double cardiaccyclestrokevolume_ml_;
  bool startsystole_;
  bool heartflowdetected_;
  bool entercardiacarrest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class DrugData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.DrugData) */ {
 public:
  inline DrugData() : DrugData(nullptr) {}
  virtual ~DrugData();

  DrugData(const DrugData& from);
  DrugData(DrugData&& from) noexcept
    : DrugData() {
    *this = ::std::move(from);
  }

  inline DrugData& operator=(const DrugData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrugData& operator=(DrugData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrugData& default_instance();

  static inline const DrugData* internal_default_instance() {
    return reinterpret_cast<const DrugData*>(
               &_DrugData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DrugData& a, DrugData& b) {
    a.Swap(&b);
  }
  inline void Swap(DrugData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrugData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrugData* New() const final {
    return CreateMaybeMessage<DrugData>(nullptr);
  }

  DrugData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrugData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrugData& from);
  void MergeFrom(const DrugData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrugData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.DrugData";
  }
  protected:
  explicit DrugData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
  };
  // .pulse.cdm.bind.DrugSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::DrugSystemData& common() const;
  ::pulse::cdm::bind::DrugSystemData* release_common();
  ::pulse::cdm::bind::DrugSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::DrugSystemData* common);
  private:
  const ::pulse::cdm::bind::DrugSystemData& _internal_common() const;
  ::pulse::cdm::bind::DrugSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::DrugSystemData* common);
  ::pulse::cdm::bind::DrugSystemData* unsafe_arena_release_common();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.DrugData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::DrugSystemData* common_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class EndocrineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.EndocrineData) */ {
 public:
  inline EndocrineData() : EndocrineData(nullptr) {}
  virtual ~EndocrineData();

  EndocrineData(const EndocrineData& from);
  EndocrineData(EndocrineData&& from) noexcept
    : EndocrineData() {
    *this = ::std::move(from);
  }

  inline EndocrineData& operator=(const EndocrineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndocrineData& operator=(EndocrineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndocrineData& default_instance();

  static inline const EndocrineData* internal_default_instance() {
    return reinterpret_cast<const EndocrineData*>(
               &_EndocrineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndocrineData& a, EndocrineData& b) {
    a.Swap(&b);
  }
  inline void Swap(EndocrineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndocrineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndocrineData* New() const final {
    return CreateMaybeMessage<EndocrineData>(nullptr);
  }

  EndocrineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndocrineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndocrineData& from);
  void MergeFrom(const EndocrineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndocrineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.EndocrineData";
  }
  protected:
  explicit EndocrineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
  };
  // .pulse.cdm.bind.EndocrineSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::EndocrineSystemData& common() const;
  ::pulse::cdm::bind::EndocrineSystemData* release_common();
  ::pulse::cdm::bind::EndocrineSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::EndocrineSystemData* common);
  private:
  const ::pulse::cdm::bind::EndocrineSystemData& _internal_common() const;
  ::pulse::cdm::bind::EndocrineSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::EndocrineSystemData* common);
  ::pulse::cdm::bind::EndocrineSystemData* unsafe_arena_release_common();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.EndocrineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EndocrineSystemData* common_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class EnergyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.EnergyData) */ {
 public:
  inline EnergyData() : EnergyData(nullptr) {}
  virtual ~EnergyData();

  EnergyData(const EnergyData& from);
  EnergyData(EnergyData&& from) noexcept
    : EnergyData() {
    *this = ::std::move(from);
  }

  inline EnergyData& operator=(const EnergyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnergyData& operator=(EnergyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnergyData& default_instance();

  static inline const EnergyData* internal_default_instance() {
    return reinterpret_cast<const EnergyData*>(
               &_EnergyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnergyData& a, EnergyData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnergyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnergyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnergyData* New() const final {
    return CreateMaybeMessage<EnergyData>(nullptr);
  }

  EnergyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnergyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnergyData& from);
  void MergeFrom(const EnergyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnergyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.EnergyData";
  }
  protected:
  explicit EnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBloodpHFieldNumber = 6,
    kBicarbonateMolarityMmolPerLFieldNumber = 7,
    kEnduranceEnergyStoreJFieldNumber = 2,
    kMediumPowerEnergyStoreJFieldNumber = 3,
    kPeakPowerEnergyStoreJFieldNumber = 4,
    kUsableEnergyStoreJFieldNumber = 5,
  };
  // .pulse.cdm.bind.EnergySystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::EnergySystemData& common() const;
  ::pulse::cdm::bind::EnergySystemData* release_common();
  ::pulse::cdm::bind::EnergySystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::EnergySystemData* common);
  private:
  const ::pulse::cdm::bind::EnergySystemData& _internal_common() const;
  ::pulse::cdm::bind::EnergySystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::EnergySystemData* common);
  ::pulse::cdm::bind::EnergySystemData* unsafe_arena_release_common();

  // .pulse.cdm.bind.RunningAverageData BloodpH = 6;
  bool has_bloodph() const;
  private:
  bool _internal_has_bloodph() const;
  public:
  void clear_bloodph();
  const ::pulse::cdm::bind::RunningAverageData& bloodph() const;
  ::pulse::cdm::bind::RunningAverageData* release_bloodph();
  ::pulse::cdm::bind::RunningAverageData* mutable_bloodph();
  void set_allocated_bloodph(::pulse::cdm::bind::RunningAverageData* bloodph);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_bloodph() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_bloodph();
  public:
  void unsafe_arena_set_allocated_bloodph(
      ::pulse::cdm::bind::RunningAverageData* bloodph);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_bloodph();

  // .pulse.cdm.bind.RunningAverageData BicarbonateMolarity_mmol_Per_L = 7;
  bool has_bicarbonatemolarity_mmol_per_l() const;
  private:
  bool _internal_has_bicarbonatemolarity_mmol_per_l() const;
  public:
  void clear_bicarbonatemolarity_mmol_per_l();
  const ::pulse::cdm::bind::RunningAverageData& bicarbonatemolarity_mmol_per_l() const;
  ::pulse::cdm::bind::RunningAverageData* release_bicarbonatemolarity_mmol_per_l();
  ::pulse::cdm::bind::RunningAverageData* mutable_bicarbonatemolarity_mmol_per_l();
  void set_allocated_bicarbonatemolarity_mmol_per_l(::pulse::cdm::bind::RunningAverageData* bicarbonatemolarity_mmol_per_l);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_bicarbonatemolarity_mmol_per_l() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_bicarbonatemolarity_mmol_per_l();
  public:
  void unsafe_arena_set_allocated_bicarbonatemolarity_mmol_per_l(
      ::pulse::cdm::bind::RunningAverageData* bicarbonatemolarity_mmol_per_l);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_bicarbonatemolarity_mmol_per_l();

  // double EnduranceEnergyStore_J = 2;
  void clear_enduranceenergystore_j();
  double enduranceenergystore_j() const;
  void set_enduranceenergystore_j(double value);
  private:
  double _internal_enduranceenergystore_j() const;
  void _internal_set_enduranceenergystore_j(double value);
  public:

  // double MediumPowerEnergyStore_J = 3;
  void clear_mediumpowerenergystore_j();
  double mediumpowerenergystore_j() const;
  void set_mediumpowerenergystore_j(double value);
  private:
  double _internal_mediumpowerenergystore_j() const;
  void _internal_set_mediumpowerenergystore_j(double value);
  public:

  // double PeakPowerEnergyStore_J = 4;
  void clear_peakpowerenergystore_j();
  double peakpowerenergystore_j() const;
  void set_peakpowerenergystore_j(double value);
  private:
  double _internal_peakpowerenergystore_j() const;
  void _internal_set_peakpowerenergystore_j(double value);
  public:

  // double UsableEnergyStore_J = 5;
  void clear_usableenergystore_j();
  double usableenergystore_j() const;
  void set_usableenergystore_j(double value);
  private:
  double _internal_usableenergystore_j() const;
  void _internal_set_usableenergystore_j(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.EnergyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EnergySystemData* common_;
  ::pulse::cdm::bind::RunningAverageData* bloodph_;
  ::pulse::cdm::bind::RunningAverageData* bicarbonatemolarity_mmol_per_l_;
  double enduranceenergystore_j_;
  double mediumpowerenergystore_j_;
  double peakpowerenergystore_j_;
  double usableenergystore_j_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class GastrointestinalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.GastrointestinalData) */ {
 public:
  inline GastrointestinalData() : GastrointestinalData(nullptr) {}
  virtual ~GastrointestinalData();

  GastrointestinalData(const GastrointestinalData& from);
  GastrointestinalData(GastrointestinalData&& from) noexcept
    : GastrointestinalData() {
    *this = ::std::move(from);
  }

  inline GastrointestinalData& operator=(const GastrointestinalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GastrointestinalData& operator=(GastrointestinalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GastrointestinalData& default_instance();

  static inline const GastrointestinalData* internal_default_instance() {
    return reinterpret_cast<const GastrointestinalData*>(
               &_GastrointestinalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GastrointestinalData& a, GastrointestinalData& b) {
    a.Swap(&b);
  }
  inline void Swap(GastrointestinalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GastrointestinalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GastrointestinalData* New() const final {
    return CreateMaybeMessage<GastrointestinalData>(nullptr);
  }

  GastrointestinalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GastrointestinalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GastrointestinalData& from);
  void MergeFrom(const GastrointestinalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GastrointestinalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.GastrointestinalData";
  }
  protected:
  explicit GastrointestinalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
  };
  // .pulse.cdm.bind.GastrointestinalSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::GastrointestinalSystemData& common() const;
  ::pulse::cdm::bind::GastrointestinalSystemData* release_common();
  ::pulse::cdm::bind::GastrointestinalSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::GastrointestinalSystemData* common);
  private:
  const ::pulse::cdm::bind::GastrointestinalSystemData& _internal_common() const;
  ::pulse::cdm::bind::GastrointestinalSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::GastrointestinalSystemData* common);
  ::pulse::cdm::bind::GastrointestinalSystemData* unsafe_arena_release_common();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.GastrointestinalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::GastrointestinalSystemData* common_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class HepaticData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.HepaticData) */ {
 public:
  inline HepaticData() : HepaticData(nullptr) {}
  virtual ~HepaticData();

  HepaticData(const HepaticData& from);
  HepaticData(HepaticData&& from) noexcept
    : HepaticData() {
    *this = ::std::move(from);
  }

  inline HepaticData& operator=(const HepaticData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HepaticData& operator=(HepaticData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HepaticData& default_instance();

  static inline const HepaticData* internal_default_instance() {
    return reinterpret_cast<const HepaticData*>(
               &_HepaticData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HepaticData& a, HepaticData& b) {
    a.Swap(&b);
  }
  inline void Swap(HepaticData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HepaticData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HepaticData* New() const final {
    return CreateMaybeMessage<HepaticData>(nullptr);
  }

  HepaticData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HepaticData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HepaticData& from);
  void MergeFrom(const HepaticData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HepaticData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.HepaticData";
  }
  protected:
  explicit HepaticData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
  };
  // .pulse.cdm.bind.HepaticSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::HepaticSystemData& common() const;
  ::pulse::cdm::bind::HepaticSystemData* release_common();
  ::pulse::cdm::bind::HepaticSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::HepaticSystemData* common);
  private:
  const ::pulse::cdm::bind::HepaticSystemData& _internal_common() const;
  ::pulse::cdm::bind::HepaticSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::HepaticSystemData* common);
  ::pulse::cdm::bind::HepaticSystemData* unsafe_arena_release_common();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.HepaticData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::HepaticSystemData* common_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class NervousData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.NervousData) */ {
 public:
  inline NervousData() : NervousData(nullptr) {}
  virtual ~NervousData();

  NervousData(const NervousData& from);
  NervousData(NervousData&& from) noexcept
    : NervousData() {
    *this = ::std::move(from);
  }

  inline NervousData& operator=(const NervousData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NervousData& operator=(NervousData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NervousData& default_instance();

  static inline const NervousData* internal_default_instance() {
    return reinterpret_cast<const NervousData*>(
               &_NervousData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NervousData& a, NervousData& b) {
    a.Swap(&b);
  }
  inline void Swap(NervousData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NervousData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NervousData* New() const final {
    return CreateMaybeMessage<NervousData>(nullptr);
  }

  NervousData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NervousData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NervousData& from);
  void MergeFrom(const NervousData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NervousData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.NervousData";
  }
  protected:
  explicit NervousData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kArterialOxygenBaselineMmHgFieldNumber = 2,
    kArterialCarbonDioxideBaselineMmHgFieldNumber = 3,
    kBaroreceptorActiveTimeSFieldNumber = 6,
    kBaroreceptorEffectivenessParameterFieldNumber = 7,
    kBaroreceptorMeanArterialPressureBaselineMmHgFieldNumber = 8,
    kBaroreceptorSaturationTimeSFieldNumber = 9,
    kLastMeanArterialPressureMmHgFieldNumber = 10,
    kPreviousBloodVolumeMLFieldNumber = 11,
    kTotalSympatheticFractionFieldNumber = 12,
    kBaroreceptorFeedbackStatusFieldNumber = 4,
    kBaroreceptorSaturationStatusFieldNumber = 5,
  };
  // .pulse.cdm.bind.NervousSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::NervousSystemData& common() const;
  ::pulse::cdm::bind::NervousSystemData* release_common();
  ::pulse::cdm::bind::NervousSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::NervousSystemData* common);
  private:
  const ::pulse::cdm::bind::NervousSystemData& _internal_common() const;
  ::pulse::cdm::bind::NervousSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::NervousSystemData* common);
  ::pulse::cdm::bind::NervousSystemData* unsafe_arena_release_common();

  // double ArterialOxygenBaseline_mmHg = 2;
  void clear_arterialoxygenbaseline_mmhg();
  double arterialoxygenbaseline_mmhg() const;
  void set_arterialoxygenbaseline_mmhg(double value);
  private:
  double _internal_arterialoxygenbaseline_mmhg() const;
  void _internal_set_arterialoxygenbaseline_mmhg(double value);
  public:

  // double ArterialCarbonDioxideBaseline_mmHg = 3;
  void clear_arterialcarbondioxidebaseline_mmhg();
  double arterialcarbondioxidebaseline_mmhg() const;
  void set_arterialcarbondioxidebaseline_mmhg(double value);
  private:
  double _internal_arterialcarbondioxidebaseline_mmhg() const;
  void _internal_set_arterialcarbondioxidebaseline_mmhg(double value);
  public:

  // double BaroreceptorActiveTime_s = 6;
  void clear_baroreceptoractivetime_s();
  double baroreceptoractivetime_s() const;
  void set_baroreceptoractivetime_s(double value);
  private:
  double _internal_baroreceptoractivetime_s() const;
  void _internal_set_baroreceptoractivetime_s(double value);
  public:

  // double BaroreceptorEffectivenessParameter = 7;
  void clear_baroreceptoreffectivenessparameter();
  double baroreceptoreffectivenessparameter() const;
  void set_baroreceptoreffectivenessparameter(double value);
  private:
  double _internal_baroreceptoreffectivenessparameter() const;
  void _internal_set_baroreceptoreffectivenessparameter(double value);
  public:

  // double BaroreceptorMeanArterialPressureBaseline_mmHg = 8;
  void clear_baroreceptormeanarterialpressurebaseline_mmhg();
  double baroreceptormeanarterialpressurebaseline_mmhg() const;
  void set_baroreceptormeanarterialpressurebaseline_mmhg(double value);
  private:
  double _internal_baroreceptormeanarterialpressurebaseline_mmhg() const;
  void _internal_set_baroreceptormeanarterialpressurebaseline_mmhg(double value);
  public:

  // double BaroreceptorSaturationTime_s = 9;
  void clear_baroreceptorsaturationtime_s();
  double baroreceptorsaturationtime_s() const;
  void set_baroreceptorsaturationtime_s(double value);
  private:
  double _internal_baroreceptorsaturationtime_s() const;
  void _internal_set_baroreceptorsaturationtime_s(double value);
  public:

  // double LastMeanArterialPressure_mmHg = 10;
  void clear_lastmeanarterialpressure_mmhg();
  double lastmeanarterialpressure_mmhg() const;
  void set_lastmeanarterialpressure_mmhg(double value);
  private:
  double _internal_lastmeanarterialpressure_mmhg() const;
  void _internal_set_lastmeanarterialpressure_mmhg(double value);
  public:

  // double PreviousBloodVolume_mL = 11;
  void clear_previousbloodvolume_ml();
  double previousbloodvolume_ml() const;
  void set_previousbloodvolume_ml(double value);
  private:
  double _internal_previousbloodvolume_ml() const;
  void _internal_set_previousbloodvolume_ml(double value);
  public:

  // double TotalSympatheticFraction = 12;
  void clear_totalsympatheticfraction();
  double totalsympatheticfraction() const;
  void set_totalsympatheticfraction(double value);
  private:
  double _internal_totalsympatheticfraction() const;
  void _internal_set_totalsympatheticfraction(double value);
  public:

  // bool BaroreceptorFeedbackStatus = 4;
  void clear_baroreceptorfeedbackstatus();
  bool baroreceptorfeedbackstatus() const;
  void set_baroreceptorfeedbackstatus(bool value);
  private:
  bool _internal_baroreceptorfeedbackstatus() const;
  void _internal_set_baroreceptorfeedbackstatus(bool value);
  public:

  // bool BaroreceptorSaturationStatus = 5;
  void clear_baroreceptorsaturationstatus();
  bool baroreceptorsaturationstatus() const;
  void set_baroreceptorsaturationstatus(bool value);
  private:
  bool _internal_baroreceptorsaturationstatus() const;
  void _internal_set_baroreceptorsaturationstatus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.NervousData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::NervousSystemData* common_;
  double arterialoxygenbaseline_mmhg_;
  double arterialcarbondioxidebaseline_mmhg_;
  double baroreceptoractivetime_s_;
  double baroreceptoreffectivenessparameter_;
  double baroreceptormeanarterialpressurebaseline_mmhg_;
  double baroreceptorsaturationtime_s_;
  double lastmeanarterialpressure_mmhg_;
  double previousbloodvolume_ml_;
  double totalsympatheticfraction_;
  bool baroreceptorfeedbackstatus_;
  bool baroreceptorsaturationstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class RenalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.RenalData) */ {
 public:
  inline RenalData() : RenalData(nullptr) {}
  virtual ~RenalData();

  RenalData(const RenalData& from);
  RenalData(RenalData&& from) noexcept
    : RenalData() {
    *this = ::std::move(from);
  }

  inline RenalData& operator=(const RenalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenalData& operator=(RenalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenalData& default_instance();

  static inline const RenalData* internal_default_instance() {
    return reinterpret_cast<const RenalData*>(
               &_RenalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RenalData& a, RenalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RenalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenalData* New() const final {
    return CreateMaybeMessage<RenalData>(nullptr);
  }

  RenalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenalData& from);
  void MergeFrom(const RenalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.RenalData";
  }
  protected:
  explicit RenalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kUrineProductionRateMLPerMinFieldNumber = 7,
    kUrineOsmolarityMOsmPerLFieldNumber = 8,
    kSodiumConcentrationMgPerMLFieldNumber = 9,
    kSodiumExcretionRateMgPerMinFieldNumber = 10,
    kLeftSodiumFlowMgPerSFieldNumber = 11,
    kRightSodiumFlowMgPerSFieldNumber = 12,
    kLeftRenalArterialPressureMmHgFieldNumber = 13,
    kRightRenalArterialPressureMmHgFieldNumber = 14,
    kLeftAfferentResistanceMmHgSPerMLFieldNumber = 3,
    kRightAfferentResistanceMmHgSPerMLFieldNumber = 4,
    kLeftSodiumFlowSetPointMgPerSFieldNumber = 5,
    kRightSodiumFlowSetPointMgPerSFieldNumber = 6,
    kUrinatingFieldNumber = 2,
  };
  // .pulse.cdm.bind.RenalSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::RenalSystemData& common() const;
  ::pulse::cdm::bind::RenalSystemData* release_common();
  ::pulse::cdm::bind::RenalSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::RenalSystemData* common);
  private:
  const ::pulse::cdm::bind::RenalSystemData& _internal_common() const;
  ::pulse::cdm::bind::RenalSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::RenalSystemData* common);
  ::pulse::cdm::bind::RenalSystemData* unsafe_arena_release_common();

  // .pulse.cdm.bind.RunningAverageData UrineProductionRate_mL_Per_min = 7;
  bool has_urineproductionrate_ml_per_min() const;
  private:
  bool _internal_has_urineproductionrate_ml_per_min() const;
  public:
  void clear_urineproductionrate_ml_per_min();
  const ::pulse::cdm::bind::RunningAverageData& urineproductionrate_ml_per_min() const;
  ::pulse::cdm::bind::RunningAverageData* release_urineproductionrate_ml_per_min();
  ::pulse::cdm::bind::RunningAverageData* mutable_urineproductionrate_ml_per_min();
  void set_allocated_urineproductionrate_ml_per_min(::pulse::cdm::bind::RunningAverageData* urineproductionrate_ml_per_min);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_urineproductionrate_ml_per_min() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_urineproductionrate_ml_per_min();
  public:
  void unsafe_arena_set_allocated_urineproductionrate_ml_per_min(
      ::pulse::cdm::bind::RunningAverageData* urineproductionrate_ml_per_min);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_urineproductionrate_ml_per_min();

  // .pulse.cdm.bind.RunningAverageData UrineOsmolarity_mOsm_Per_L = 8;
  bool has_urineosmolarity_mosm_per_l() const;
  private:
  bool _internal_has_urineosmolarity_mosm_per_l() const;
  public:
  void clear_urineosmolarity_mosm_per_l();
  const ::pulse::cdm::bind::RunningAverageData& urineosmolarity_mosm_per_l() const;
  ::pulse::cdm::bind::RunningAverageData* release_urineosmolarity_mosm_per_l();
  ::pulse::cdm::bind::RunningAverageData* mutable_urineosmolarity_mosm_per_l();
  void set_allocated_urineosmolarity_mosm_per_l(::pulse::cdm::bind::RunningAverageData* urineosmolarity_mosm_per_l);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_urineosmolarity_mosm_per_l() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_urineosmolarity_mosm_per_l();
  public:
  void unsafe_arena_set_allocated_urineosmolarity_mosm_per_l(
      ::pulse::cdm::bind::RunningAverageData* urineosmolarity_mosm_per_l);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_urineosmolarity_mosm_per_l();

  // .pulse.cdm.bind.RunningAverageData SodiumConcentration_mg_Per_mL = 9;
  bool has_sodiumconcentration_mg_per_ml() const;
  private:
  bool _internal_has_sodiumconcentration_mg_per_ml() const;
  public:
  void clear_sodiumconcentration_mg_per_ml();
  const ::pulse::cdm::bind::RunningAverageData& sodiumconcentration_mg_per_ml() const;
  ::pulse::cdm::bind::RunningAverageData* release_sodiumconcentration_mg_per_ml();
  ::pulse::cdm::bind::RunningAverageData* mutable_sodiumconcentration_mg_per_ml();
  void set_allocated_sodiumconcentration_mg_per_ml(::pulse::cdm::bind::RunningAverageData* sodiumconcentration_mg_per_ml);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_sodiumconcentration_mg_per_ml() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_sodiumconcentration_mg_per_ml();
  public:
  void unsafe_arena_set_allocated_sodiumconcentration_mg_per_ml(
      ::pulse::cdm::bind::RunningAverageData* sodiumconcentration_mg_per_ml);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_sodiumconcentration_mg_per_ml();

  // .pulse.cdm.bind.RunningAverageData SodiumExcretionRate_mg_Per_min = 10;
  bool has_sodiumexcretionrate_mg_per_min() const;
  private:
  bool _internal_has_sodiumexcretionrate_mg_per_min() const;
  public:
  void clear_sodiumexcretionrate_mg_per_min();
  const ::pulse::cdm::bind::RunningAverageData& sodiumexcretionrate_mg_per_min() const;
  ::pulse::cdm::bind::RunningAverageData* release_sodiumexcretionrate_mg_per_min();
  ::pulse::cdm::bind::RunningAverageData* mutable_sodiumexcretionrate_mg_per_min();
  void set_allocated_sodiumexcretionrate_mg_per_min(::pulse::cdm::bind::RunningAverageData* sodiumexcretionrate_mg_per_min);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_sodiumexcretionrate_mg_per_min() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_sodiumexcretionrate_mg_per_min();
  public:
  void unsafe_arena_set_allocated_sodiumexcretionrate_mg_per_min(
      ::pulse::cdm::bind::RunningAverageData* sodiumexcretionrate_mg_per_min);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_sodiumexcretionrate_mg_per_min();

  // .pulse.cdm.bind.RunningAverageData LeftSodiumFlow_mg_Per_s = 11;
  bool has_leftsodiumflow_mg_per_s() const;
  private:
  bool _internal_has_leftsodiumflow_mg_per_s() const;
  public:
  void clear_leftsodiumflow_mg_per_s();
  const ::pulse::cdm::bind::RunningAverageData& leftsodiumflow_mg_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* release_leftsodiumflow_mg_per_s();
  ::pulse::cdm::bind::RunningAverageData* mutable_leftsodiumflow_mg_per_s();
  void set_allocated_leftsodiumflow_mg_per_s(::pulse::cdm::bind::RunningAverageData* leftsodiumflow_mg_per_s);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_leftsodiumflow_mg_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_leftsodiumflow_mg_per_s();
  public:
  void unsafe_arena_set_allocated_leftsodiumflow_mg_per_s(
      ::pulse::cdm::bind::RunningAverageData* leftsodiumflow_mg_per_s);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_leftsodiumflow_mg_per_s();

  // .pulse.cdm.bind.RunningAverageData RightSodiumFlow_mg_Per_s = 12;
  bool has_rightsodiumflow_mg_per_s() const;
  private:
  bool _internal_has_rightsodiumflow_mg_per_s() const;
  public:
  void clear_rightsodiumflow_mg_per_s();
  const ::pulse::cdm::bind::RunningAverageData& rightsodiumflow_mg_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* release_rightsodiumflow_mg_per_s();
  ::pulse::cdm::bind::RunningAverageData* mutable_rightsodiumflow_mg_per_s();
  void set_allocated_rightsodiumflow_mg_per_s(::pulse::cdm::bind::RunningAverageData* rightsodiumflow_mg_per_s);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_rightsodiumflow_mg_per_s() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_rightsodiumflow_mg_per_s();
  public:
  void unsafe_arena_set_allocated_rightsodiumflow_mg_per_s(
      ::pulse::cdm::bind::RunningAverageData* rightsodiumflow_mg_per_s);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_rightsodiumflow_mg_per_s();

  // .pulse.cdm.bind.RunningAverageData LeftRenalArterialPressure_mmHg = 13;
  bool has_leftrenalarterialpressure_mmhg() const;
  private:
  bool _internal_has_leftrenalarterialpressure_mmhg() const;
  public:
  void clear_leftrenalarterialpressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& leftrenalarterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_leftrenalarterialpressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_leftrenalarterialpressure_mmhg();
  void set_allocated_leftrenalarterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* leftrenalarterialpressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_leftrenalarterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_leftrenalarterialpressure_mmhg();
  public:
  void unsafe_arena_set_allocated_leftrenalarterialpressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* leftrenalarterialpressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_leftrenalarterialpressure_mmhg();

  // .pulse.cdm.bind.RunningAverageData RightRenalArterialPressure_mmHg = 14;
  bool has_rightrenalarterialpressure_mmhg() const;
  private:
  bool _internal_has_rightrenalarterialpressure_mmhg() const;
  public:
  void clear_rightrenalarterialpressure_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& rightrenalarterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_rightrenalarterialpressure_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_rightrenalarterialpressure_mmhg();
  void set_allocated_rightrenalarterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* rightrenalarterialpressure_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_rightrenalarterialpressure_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_rightrenalarterialpressure_mmhg();
  public:
  void unsafe_arena_set_allocated_rightrenalarterialpressure_mmhg(
      ::pulse::cdm::bind::RunningAverageData* rightrenalarterialpressure_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_rightrenalarterialpressure_mmhg();

  // double LeftAfferentResistance_mmHg_s_Per_mL = 3;
  void clear_leftafferentresistance_mmhg_s_per_ml();
  double leftafferentresistance_mmhg_s_per_ml() const;
  void set_leftafferentresistance_mmhg_s_per_ml(double value);
  private:
  double _internal_leftafferentresistance_mmhg_s_per_ml() const;
  void _internal_set_leftafferentresistance_mmhg_s_per_ml(double value);
  public:

  // double RightAfferentResistance_mmHg_s_Per_mL = 4;
  void clear_rightafferentresistance_mmhg_s_per_ml();
  double rightafferentresistance_mmhg_s_per_ml() const;
  void set_rightafferentresistance_mmhg_s_per_ml(double value);
  private:
  double _internal_rightafferentresistance_mmhg_s_per_ml() const;
  void _internal_set_rightafferentresistance_mmhg_s_per_ml(double value);
  public:

  // double LeftSodiumFlowSetPoint_mg_Per_s = 5;
  void clear_leftsodiumflowsetpoint_mg_per_s();
  double leftsodiumflowsetpoint_mg_per_s() const;
  void set_leftsodiumflowsetpoint_mg_per_s(double value);
  private:
  double _internal_leftsodiumflowsetpoint_mg_per_s() const;
  void _internal_set_leftsodiumflowsetpoint_mg_per_s(double value);
  public:

  // double RightSodiumFlowSetPoint_mg_Per_s = 6;
  void clear_rightsodiumflowsetpoint_mg_per_s();
  double rightsodiumflowsetpoint_mg_per_s() const;
  void set_rightsodiumflowsetpoint_mg_per_s(double value);
  private:
  double _internal_rightsodiumflowsetpoint_mg_per_s() const;
  void _internal_set_rightsodiumflowsetpoint_mg_per_s(double value);
  public:

  // bool Urinating = 2;
  void clear_urinating();
  bool urinating() const;
  void set_urinating(bool value);
  private:
  bool _internal_urinating() const;
  void _internal_set_urinating(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.RenalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::RenalSystemData* common_;
  ::pulse::cdm::bind::RunningAverageData* urineproductionrate_ml_per_min_;
  ::pulse::cdm::bind::RunningAverageData* urineosmolarity_mosm_per_l_;
  ::pulse::cdm::bind::RunningAverageData* sodiumconcentration_mg_per_ml_;
  ::pulse::cdm::bind::RunningAverageData* sodiumexcretionrate_mg_per_min_;
  ::pulse::cdm::bind::RunningAverageData* leftsodiumflow_mg_per_s_;
  ::pulse::cdm::bind::RunningAverageData* rightsodiumflow_mg_per_s_;
  ::pulse::cdm::bind::RunningAverageData* leftrenalarterialpressure_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* rightrenalarterialpressure_mmhg_;
  double leftafferentresistance_mmhg_s_per_ml_;
  double rightafferentresistance_mmhg_s_per_ml_;
  double leftsodiumflowsetpoint_mg_per_s_;
  double rightsodiumflowsetpoint_mg_per_s_;
  bool urinating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class RespiratoryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.RespiratoryData) */ {
 public:
  inline RespiratoryData() : RespiratoryData(nullptr) {}
  virtual ~RespiratoryData();

  RespiratoryData(const RespiratoryData& from);
  RespiratoryData(RespiratoryData&& from) noexcept
    : RespiratoryData() {
    *this = ::std::move(from);
  }

  inline RespiratoryData& operator=(const RespiratoryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespiratoryData& operator=(RespiratoryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespiratoryData& default_instance();

  static inline const RespiratoryData* internal_default_instance() {
    return reinterpret_cast<const RespiratoryData*>(
               &_RespiratoryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RespiratoryData& a, RespiratoryData& b) {
    a.Swap(&b);
  }
  inline void Swap(RespiratoryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespiratoryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespiratoryData* New() const final {
    return CreateMaybeMessage<RespiratoryData>(nullptr);
  }

  RespiratoryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespiratoryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespiratoryData& from);
  void MergeFrom(const RespiratoryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespiratoryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.RespiratoryData";
  }
  protected:
  explicit RespiratoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBloodPHRunningAverageFieldNumber = 22,
    kMeanAirwayPressureCmH2OFieldNumber = 23,
    kArterialO2RunningAverageMmHgFieldNumber = 35,
    kArterialCO2RunningAverageMmHgFieldNumber = 36,
    kTopBreathTotalVolumeLFieldNumber = 4,
    kTopBreathAlveoliVolumeLFieldNumber = 5,
    kTopBreathPleuralVolumeLFieldNumber = 6,
    kTopBreathAlveoliPressureCmH2OFieldNumber = 7,
    kTopBreathDriverPressureCmH2OFieldNumber = 8,
    kTopBreathPleuralPressureCmH2OFieldNumber = 9,
    kLastCardiacCycleBloodPHFieldNumber = 10,
    kTopCarinaO2FieldNumber = 11,
    kTopBreathElapsedTimeMinFieldNumber = 12,
    kBottomBreathElapsedTimeMinFieldNumber = 13,
    kBottomBreathTotalVolumeLFieldNumber = 14,
    kBottomBreathAlveoliVolumeLFieldNumber = 15,
    kBottomBreathPleuralVolumeLFieldNumber = 16,
    kBottomBreathAlveoliPressureCmH2OFieldNumber = 17,
    kBottomBreathDriverPressureCmH2OFieldNumber = 18,
    kBottomBreathPleuralPressureCmH2OFieldNumber = 19,
    kPeakAlveolarPressureCmH2OFieldNumber = 20,
    kMaximalAlveolarPressureCmH2OFieldNumber = 21,
    kArterialO2PartialPressureMmHgFieldNumber = 24,
    kArterialCO2PartialPressureMmHgFieldNumber = 25,
    kBreathingCycleTimeSFieldNumber = 26,
    kDriverPressureCmH2OFieldNumber = 27,
    kElapsedBreathingCycleTimeMinFieldNumber = 28,
    kIERatioScaleFactorFieldNumber = 29,
    kPeakInspiratoryPressureCmH2OFieldNumber = 30,
    kPeakExpiratoryPressureCmH2OFieldNumber = 31,
    kPreviousTargetAlveolarVentilationLPerMinFieldNumber = 32,
    kVentilationFrequencyPerMinFieldNumber = 33,
    kVentilationToTidalVolumeSlopeFieldNumber = 34,
    kExpiratoryHoldFractionFieldNumber = 37,
    kExpiratoryReleaseFractionFieldNumber = 38,
    kExpiratoryRiseFractionFieldNumber = 39,
    kInspiratoryHoldFractionFieldNumber = 40,
    kInspiratoryReleaseFractionFieldNumber = 41,
    kInspiratoryRiseFractionFieldNumber = 42,
    kInspiratoryToExpiratoryPauseFractionFieldNumber = 43,
    kLeftAlveoliDecreaseLFieldNumber = 44,
    kRightAlveoliDecreaseLFieldNumber = 45,
    kRespiratoryComplianceOverrideLPerCmH2OFieldNumber = 47,
    kRespiratoryResistanceOverrideCmH2OSPerLFieldNumber = 48,
    kBreathingCycleFieldNumber = 2,
    kNotBreathingFieldNumber = 3,
    kActiveConsciousRespirationCommandFieldNumber = 46,
  };
  // .pulse.cdm.bind.RespiratorySystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::RespiratorySystemData& common() const;
  ::pulse::cdm::bind::RespiratorySystemData* release_common();
  ::pulse::cdm::bind::RespiratorySystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::RespiratorySystemData* common);
  private:
  const ::pulse::cdm::bind::RespiratorySystemData& _internal_common() const;
  ::pulse::cdm::bind::RespiratorySystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::RespiratorySystemData* common);
  ::pulse::cdm::bind::RespiratorySystemData* unsafe_arena_release_common();

  // .pulse.cdm.bind.RunningAverageData BloodPHRunningAverage = 22;
  bool has_bloodphrunningaverage() const;
  private:
  bool _internal_has_bloodphrunningaverage() const;
  public:
  void clear_bloodphrunningaverage();
  const ::pulse::cdm::bind::RunningAverageData& bloodphrunningaverage() const;
  ::pulse::cdm::bind::RunningAverageData* release_bloodphrunningaverage();
  ::pulse::cdm::bind::RunningAverageData* mutable_bloodphrunningaverage();
  void set_allocated_bloodphrunningaverage(::pulse::cdm::bind::RunningAverageData* bloodphrunningaverage);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_bloodphrunningaverage() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_bloodphrunningaverage();
  public:
  void unsafe_arena_set_allocated_bloodphrunningaverage(
      ::pulse::cdm::bind::RunningAverageData* bloodphrunningaverage);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_bloodphrunningaverage();

  // .pulse.cdm.bind.RunningAverageData MeanAirwayPressure_cmH2O = 23;
  bool has_meanairwaypressure_cmh2o() const;
  private:
  bool _internal_has_meanairwaypressure_cmh2o() const;
  public:
  void clear_meanairwaypressure_cmh2o();
  const ::pulse::cdm::bind::RunningAverageData& meanairwaypressure_cmh2o() const;
  ::pulse::cdm::bind::RunningAverageData* release_meanairwaypressure_cmh2o();
  ::pulse::cdm::bind::RunningAverageData* mutable_meanairwaypressure_cmh2o();
  void set_allocated_meanairwaypressure_cmh2o(::pulse::cdm::bind::RunningAverageData* meanairwaypressure_cmh2o);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_meanairwaypressure_cmh2o() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_meanairwaypressure_cmh2o();
  public:
  void unsafe_arena_set_allocated_meanairwaypressure_cmh2o(
      ::pulse::cdm::bind::RunningAverageData* meanairwaypressure_cmh2o);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_meanairwaypressure_cmh2o();

  // .pulse.cdm.bind.RunningAverageData ArterialO2RunningAverage_mmHg = 35;
  bool has_arterialo2runningaverage_mmhg() const;
  private:
  bool _internal_has_arterialo2runningaverage_mmhg() const;
  public:
  void clear_arterialo2runningaverage_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& arterialo2runningaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_arterialo2runningaverage_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_arterialo2runningaverage_mmhg();
  void set_allocated_arterialo2runningaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialo2runningaverage_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_arterialo2runningaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_arterialo2runningaverage_mmhg();
  public:
  void unsafe_arena_set_allocated_arterialo2runningaverage_mmhg(
      ::pulse::cdm::bind::RunningAverageData* arterialo2runningaverage_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_arterialo2runningaverage_mmhg();

  // .pulse.cdm.bind.RunningAverageData ArterialCO2RunningAverage_mmHg = 36;
  bool has_arterialco2runningaverage_mmhg() const;
  private:
  bool _internal_has_arterialco2runningaverage_mmhg() const;
  public:
  void clear_arterialco2runningaverage_mmhg();
  const ::pulse::cdm::bind::RunningAverageData& arterialco2runningaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* release_arterialco2runningaverage_mmhg();
  ::pulse::cdm::bind::RunningAverageData* mutable_arterialco2runningaverage_mmhg();
  void set_allocated_arterialco2runningaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialco2runningaverage_mmhg);
  private:
  const ::pulse::cdm::bind::RunningAverageData& _internal_arterialco2runningaverage_mmhg() const;
  ::pulse::cdm::bind::RunningAverageData* _internal_mutable_arterialco2runningaverage_mmhg();
  public:
  void unsafe_arena_set_allocated_arterialco2runningaverage_mmhg(
      ::pulse::cdm::bind::RunningAverageData* arterialco2runningaverage_mmhg);
  ::pulse::cdm::bind::RunningAverageData* unsafe_arena_release_arterialco2runningaverage_mmhg();

  // double TopBreathTotalVolume_L = 4;
  void clear_topbreathtotalvolume_l();
  double topbreathtotalvolume_l() const;
  void set_topbreathtotalvolume_l(double value);
  private:
  double _internal_topbreathtotalvolume_l() const;
  void _internal_set_topbreathtotalvolume_l(double value);
  public:

  // double TopBreathAlveoliVolume_L = 5;
  void clear_topbreathalveolivolume_l();
  double topbreathalveolivolume_l() const;
  void set_topbreathalveolivolume_l(double value);
  private:
  double _internal_topbreathalveolivolume_l() const;
  void _internal_set_topbreathalveolivolume_l(double value);
  public:

  // double TopBreathPleuralVolume_L = 6;
  void clear_topbreathpleuralvolume_l();
  double topbreathpleuralvolume_l() const;
  void set_topbreathpleuralvolume_l(double value);
  private:
  double _internal_topbreathpleuralvolume_l() const;
  void _internal_set_topbreathpleuralvolume_l(double value);
  public:

  // double TopBreathAlveoliPressure_cmH2O = 7;
  void clear_topbreathalveolipressure_cmh2o();
  double topbreathalveolipressure_cmh2o() const;
  void set_topbreathalveolipressure_cmh2o(double value);
  private:
  double _internal_topbreathalveolipressure_cmh2o() const;
  void _internal_set_topbreathalveolipressure_cmh2o(double value);
  public:

  // double TopBreathDriverPressure_cmH2O = 8;
  void clear_topbreathdriverpressure_cmh2o();
  double topbreathdriverpressure_cmh2o() const;
  void set_topbreathdriverpressure_cmh2o(double value);
  private:
  double _internal_topbreathdriverpressure_cmh2o() const;
  void _internal_set_topbreathdriverpressure_cmh2o(double value);
  public:

  // double TopBreathPleuralPressure_cmH2O = 9;
  void clear_topbreathpleuralpressure_cmh2o();
  double topbreathpleuralpressure_cmh2o() const;
  void set_topbreathpleuralpressure_cmh2o(double value);
  private:
  double _internal_topbreathpleuralpressure_cmh2o() const;
  void _internal_set_topbreathpleuralpressure_cmh2o(double value);
  public:

  // double LastCardiacCycleBloodPH = 10;
  void clear_lastcardiaccyclebloodph();
  double lastcardiaccyclebloodph() const;
  void set_lastcardiaccyclebloodph(double value);
  private:
  double _internal_lastcardiaccyclebloodph() const;
  void _internal_set_lastcardiaccyclebloodph(double value);
  public:

  // double TopCarinaO2 = 11;
  void clear_topcarinao2();
  double topcarinao2() const;
  void set_topcarinao2(double value);
  private:
  double _internal_topcarinao2() const;
  void _internal_set_topcarinao2(double value);
  public:

  // double TopBreathElapsedTime_min = 12;
  void clear_topbreathelapsedtime_min();
  double topbreathelapsedtime_min() const;
  void set_topbreathelapsedtime_min(double value);
  private:
  double _internal_topbreathelapsedtime_min() const;
  void _internal_set_topbreathelapsedtime_min(double value);
  public:

  // double BottomBreathElapsedTime_min = 13;
  void clear_bottombreathelapsedtime_min();
  double bottombreathelapsedtime_min() const;
  void set_bottombreathelapsedtime_min(double value);
  private:
  double _internal_bottombreathelapsedtime_min() const;
  void _internal_set_bottombreathelapsedtime_min(double value);
  public:

  // double BottomBreathTotalVolume_L = 14;
  void clear_bottombreathtotalvolume_l();
  double bottombreathtotalvolume_l() const;
  void set_bottombreathtotalvolume_l(double value);
  private:
  double _internal_bottombreathtotalvolume_l() const;
  void _internal_set_bottombreathtotalvolume_l(double value);
  public:

  // double BottomBreathAlveoliVolume_L = 15;
  void clear_bottombreathalveolivolume_l();
  double bottombreathalveolivolume_l() const;
  void set_bottombreathalveolivolume_l(double value);
  private:
  double _internal_bottombreathalveolivolume_l() const;
  void _internal_set_bottombreathalveolivolume_l(double value);
  public:

  // double BottomBreathPleuralVolume_L = 16;
  void clear_bottombreathpleuralvolume_l();
  double bottombreathpleuralvolume_l() const;
  void set_bottombreathpleuralvolume_l(double value);
  private:
  double _internal_bottombreathpleuralvolume_l() const;
  void _internal_set_bottombreathpleuralvolume_l(double value);
  public:

  // double BottomBreathAlveoliPressure_cmH2O = 17;
  void clear_bottombreathalveolipressure_cmh2o();
  double bottombreathalveolipressure_cmh2o() const;
  void set_bottombreathalveolipressure_cmh2o(double value);
  private:
  double _internal_bottombreathalveolipressure_cmh2o() const;
  void _internal_set_bottombreathalveolipressure_cmh2o(double value);
  public:

  // double BottomBreathDriverPressure_cmH2O = 18;
  void clear_bottombreathdriverpressure_cmh2o();
  double bottombreathdriverpressure_cmh2o() const;
  void set_bottombreathdriverpressure_cmh2o(double value);
  private:
  double _internal_bottombreathdriverpressure_cmh2o() const;
  void _internal_set_bottombreathdriverpressure_cmh2o(double value);
  public:

  // double BottomBreathPleuralPressure_cmH2O = 19;
  void clear_bottombreathpleuralpressure_cmh2o();
  double bottombreathpleuralpressure_cmh2o() const;
  void set_bottombreathpleuralpressure_cmh2o(double value);
  private:
  double _internal_bottombreathpleuralpressure_cmh2o() const;
  void _internal_set_bottombreathpleuralpressure_cmh2o(double value);
  public:

  // double PeakAlveolarPressure_cmH2O = 20;
  void clear_peakalveolarpressure_cmh2o();
  double peakalveolarpressure_cmh2o() const;
  void set_peakalveolarpressure_cmh2o(double value);
  private:
  double _internal_peakalveolarpressure_cmh2o() const;
  void _internal_set_peakalveolarpressure_cmh2o(double value);
  public:

  // double MaximalAlveolarPressure_cmH2O = 21;
  void clear_maximalalveolarpressure_cmh2o();
  double maximalalveolarpressure_cmh2o() const;
  void set_maximalalveolarpressure_cmh2o(double value);
  private:
  double _internal_maximalalveolarpressure_cmh2o() const;
  void _internal_set_maximalalveolarpressure_cmh2o(double value);
  public:

  // double ArterialO2PartialPressure_mmHg = 24;
  void clear_arterialo2partialpressure_mmhg();
  double arterialo2partialpressure_mmhg() const;
  void set_arterialo2partialpressure_mmhg(double value);
  private:
  double _internal_arterialo2partialpressure_mmhg() const;
  void _internal_set_arterialo2partialpressure_mmhg(double value);
  public:

  // double ArterialCO2PartialPressure_mmHg = 25;
  void clear_arterialco2partialpressure_mmhg();
  double arterialco2partialpressure_mmhg() const;
  void set_arterialco2partialpressure_mmhg(double value);
  private:
  double _internal_arterialco2partialpressure_mmhg() const;
  void _internal_set_arterialco2partialpressure_mmhg(double value);
  public:

  // double BreathingCycleTime_s = 26;
  void clear_breathingcycletime_s();
  double breathingcycletime_s() const;
  void set_breathingcycletime_s(double value);
  private:
  double _internal_breathingcycletime_s() const;
  void _internal_set_breathingcycletime_s(double value);
  public:

  // double DriverPressure_cmH2O = 27;
  void clear_driverpressure_cmh2o();
  double driverpressure_cmh2o() const;
  void set_driverpressure_cmh2o(double value);
  private:
  double _internal_driverpressure_cmh2o() const;
  void _internal_set_driverpressure_cmh2o(double value);
  public:

  // double ElapsedBreathingCycleTime_min = 28;
  void clear_elapsedbreathingcycletime_min();
  double elapsedbreathingcycletime_min() const;
  void set_elapsedbreathingcycletime_min(double value);
  private:
  double _internal_elapsedbreathingcycletime_min() const;
  void _internal_set_elapsedbreathingcycletime_min(double value);
  public:

  // double IERatioScaleFactor = 29;
  void clear_ieratioscalefactor();
  double ieratioscalefactor() const;
  void set_ieratioscalefactor(double value);
  private:
  double _internal_ieratioscalefactor() const;
  void _internal_set_ieratioscalefactor(double value);
  public:

  // double PeakInspiratoryPressure_cmH2O = 30;
  void clear_peakinspiratorypressure_cmh2o();
  double peakinspiratorypressure_cmh2o() const;
  void set_peakinspiratorypressure_cmh2o(double value);
  private:
  double _internal_peakinspiratorypressure_cmh2o() const;
  void _internal_set_peakinspiratorypressure_cmh2o(double value);
  public:

  // double PeakExpiratoryPressure_cmH2O = 31;
  void clear_peakexpiratorypressure_cmh2o();
  double peakexpiratorypressure_cmh2o() const;
  void set_peakexpiratorypressure_cmh2o(double value);
  private:
  double _internal_peakexpiratorypressure_cmh2o() const;
  void _internal_set_peakexpiratorypressure_cmh2o(double value);
  public:

  // double PreviousTargetAlveolarVentilation_L_Per_min = 32;
  void clear_previoustargetalveolarventilation_l_per_min();
  double previoustargetalveolarventilation_l_per_min() const;
  void set_previoustargetalveolarventilation_l_per_min(double value);
  private:
  double _internal_previoustargetalveolarventilation_l_per_min() const;
  void _internal_set_previoustargetalveolarventilation_l_per_min(double value);
  public:

  // double VentilationFrequency_Per_min = 33;
  void clear_ventilationfrequency_per_min();
  double ventilationfrequency_per_min() const;
  void set_ventilationfrequency_per_min(double value);
  private:
  double _internal_ventilationfrequency_per_min() const;
  void _internal_set_ventilationfrequency_per_min(double value);
  public:

  // double VentilationToTidalVolumeSlope = 34;
  void clear_ventilationtotidalvolumeslope();
  double ventilationtotidalvolumeslope() const;
  void set_ventilationtotidalvolumeslope(double value);
  private:
  double _internal_ventilationtotidalvolumeslope() const;
  void _internal_set_ventilationtotidalvolumeslope(double value);
  public:

  // double ExpiratoryHoldFraction = 37;
  void clear_expiratoryholdfraction();
  double expiratoryholdfraction() const;
  void set_expiratoryholdfraction(double value);
  private:
  double _internal_expiratoryholdfraction() const;
  void _internal_set_expiratoryholdfraction(double value);
  public:

  // double ExpiratoryReleaseFraction = 38;
  void clear_expiratoryreleasefraction();
  double expiratoryreleasefraction() const;
  void set_expiratoryreleasefraction(double value);
  private:
  double _internal_expiratoryreleasefraction() const;
  void _internal_set_expiratoryreleasefraction(double value);
  public:

  // double ExpiratoryRiseFraction = 39;
  void clear_expiratoryrisefraction();
  double expiratoryrisefraction() const;
  void set_expiratoryrisefraction(double value);
  private:
  double _internal_expiratoryrisefraction() const;
  void _internal_set_expiratoryrisefraction(double value);
  public:

  // double InspiratoryHoldFraction = 40;
  void clear_inspiratoryholdfraction();
  double inspiratoryholdfraction() const;
  void set_inspiratoryholdfraction(double value);
  private:
  double _internal_inspiratoryholdfraction() const;
  void _internal_set_inspiratoryholdfraction(double value);
  public:

  // double InspiratoryReleaseFraction = 41;
  void clear_inspiratoryreleasefraction();
  double inspiratoryreleasefraction() const;
  void set_inspiratoryreleasefraction(double value);
  private:
  double _internal_inspiratoryreleasefraction() const;
  void _internal_set_inspiratoryreleasefraction(double value);
  public:

  // double InspiratoryRiseFraction = 42;
  void clear_inspiratoryrisefraction();
  double inspiratoryrisefraction() const;
  void set_inspiratoryrisefraction(double value);
  private:
  double _internal_inspiratoryrisefraction() const;
  void _internal_set_inspiratoryrisefraction(double value);
  public:

  // double InspiratoryToExpiratoryPauseFraction = 43;
  void clear_inspiratorytoexpiratorypausefraction();
  double inspiratorytoexpiratorypausefraction() const;
  void set_inspiratorytoexpiratorypausefraction(double value);
  private:
  double _internal_inspiratorytoexpiratorypausefraction() const;
  void _internal_set_inspiratorytoexpiratorypausefraction(double value);
  public:

  // double LeftAlveoliDecrease_L = 44;
  void clear_leftalveolidecrease_l();
  double leftalveolidecrease_l() const;
  void set_leftalveolidecrease_l(double value);
  private:
  double _internal_leftalveolidecrease_l() const;
  void _internal_set_leftalveolidecrease_l(double value);
  public:

  // double RightAlveoliDecrease_L = 45;
  void clear_rightalveolidecrease_l();
  double rightalveolidecrease_l() const;
  void set_rightalveolidecrease_l(double value);
  private:
  double _internal_rightalveolidecrease_l() const;
  void _internal_set_rightalveolidecrease_l(double value);
  public:

  // double RespiratoryComplianceOverride_L_Per_cmH2O = 47;
  void clear_respiratorycomplianceoverride_l_per_cmh2o();
  double respiratorycomplianceoverride_l_per_cmh2o() const;
  void set_respiratorycomplianceoverride_l_per_cmh2o(double value);
  private:
  double _internal_respiratorycomplianceoverride_l_per_cmh2o() const;
  void _internal_set_respiratorycomplianceoverride_l_per_cmh2o(double value);
  public:

  // double RespiratoryResistanceOverride_cmH2O_s_Per_L = 48;
  void clear_respiratoryresistanceoverride_cmh2o_s_per_l();
  double respiratoryresistanceoverride_cmh2o_s_per_l() const;
  void set_respiratoryresistanceoverride_cmh2o_s_per_l(double value);
  private:
  double _internal_respiratoryresistanceoverride_cmh2o_s_per_l() const;
  void _internal_set_respiratoryresistanceoverride_cmh2o_s_per_l(double value);
  public:

  // bool BreathingCycle = 2;
  void clear_breathingcycle();
  bool breathingcycle() const;
  void set_breathingcycle(bool value);
  private:
  bool _internal_breathingcycle() const;
  void _internal_set_breathingcycle(bool value);
  public:

  // bool NotBreathing = 3;
  void clear_notbreathing();
  bool notbreathing() const;
  void set_notbreathing(bool value);
  private:
  bool _internal_notbreathing() const;
  void _internal_set_notbreathing(bool value);
  public:

  // bool ActiveConsciousRespirationCommand = 46;
  void clear_activeconsciousrespirationcommand();
  bool activeconsciousrespirationcommand() const;
  void set_activeconsciousrespirationcommand(bool value);
  private:
  bool _internal_activeconsciousrespirationcommand() const;
  void _internal_set_activeconsciousrespirationcommand(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.RespiratoryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::RespiratorySystemData* common_;
  ::pulse::cdm::bind::RunningAverageData* bloodphrunningaverage_;
  ::pulse::cdm::bind::RunningAverageData* meanairwaypressure_cmh2o_;
  ::pulse::cdm::bind::RunningAverageData* arterialo2runningaverage_mmhg_;
  ::pulse::cdm::bind::RunningAverageData* arterialco2runningaverage_mmhg_;
  double topbreathtotalvolume_l_;
  double topbreathalveolivolume_l_;
  double topbreathpleuralvolume_l_;
  double topbreathalveolipressure_cmh2o_;
  double topbreathdriverpressure_cmh2o_;
  double topbreathpleuralpressure_cmh2o_;
  double lastcardiaccyclebloodph_;
  double topcarinao2_;
  double topbreathelapsedtime_min_;
  double bottombreathelapsedtime_min_;
  double bottombreathtotalvolume_l_;
  double bottombreathalveolivolume_l_;
  double bottombreathpleuralvolume_l_;
  double bottombreathalveolipressure_cmh2o_;
  double bottombreathdriverpressure_cmh2o_;
  double bottombreathpleuralpressure_cmh2o_;
  double peakalveolarpressure_cmh2o_;
  double maximalalveolarpressure_cmh2o_;
  double arterialo2partialpressure_mmhg_;
  double arterialco2partialpressure_mmhg_;
  double breathingcycletime_s_;
  double driverpressure_cmh2o_;
  double elapsedbreathingcycletime_min_;
  double ieratioscalefactor_;
  double peakinspiratorypressure_cmh2o_;
  double peakexpiratorypressure_cmh2o_;
  double previoustargetalveolarventilation_l_per_min_;
  double ventilationfrequency_per_min_;
  double ventilationtotidalvolumeslope_;
  double expiratoryholdfraction_;
  double expiratoryreleasefraction_;
  double expiratoryrisefraction_;
  double inspiratoryholdfraction_;
  double inspiratoryreleasefraction_;
  double inspiratoryrisefraction_;
  double inspiratorytoexpiratorypausefraction_;
  double leftalveolidecrease_l_;
  double rightalveolidecrease_l_;
  double respiratorycomplianceoverride_l_per_cmh2o_;
  double respiratoryresistanceoverride_cmh2o_s_per_l_;
  bool breathingcycle_;
  bool notbreathing_;
  bool activeconsciousrespirationcommand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// -------------------------------------------------------------------

class TissueData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.TissueData) */ {
 public:
  inline TissueData() : TissueData(nullptr) {}
  virtual ~TissueData();

  TissueData(const TissueData& from);
  TissueData(TissueData&& from) noexcept
    : TissueData() {
    *this = ::std::move(from);
  }

  inline TissueData& operator=(const TissueData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TissueData& operator=(TissueData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TissueData& default_instance();

  static inline const TissueData* internal_default_instance() {
    return reinterpret_cast<const TissueData*>(
               &_TissueData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TissueData& a, TissueData& b) {
    a.Swap(&b);
  }
  inline void Swap(TissueData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TissueData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TissueData* New() const final {
    return CreateMaybeMessage<TissueData>(nullptr);
  }

  TissueData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TissueData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TissueData& from);
  void MergeFrom(const TissueData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TissueData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.TissueData";
  }
  protected:
  explicit TissueData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kRestingTissueGlucoseGFieldNumber = 2,
    kRestingBloodGlucoseMgPerMLFieldNumber = 3,
    kRestingBloodLipidMgPerMLFieldNumber = 4,
    kRestingBloodInsulinMgPerMLFieldNumber = 5,
    kRestingFluidMassKgFieldNumber = 6,
  };
  // .pulse.cdm.bind.TissueSystemData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::TissueSystemData& common() const;
  ::pulse::cdm::bind::TissueSystemData* release_common();
  ::pulse::cdm::bind::TissueSystemData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::TissueSystemData* common);
  private:
  const ::pulse::cdm::bind::TissueSystemData& _internal_common() const;
  ::pulse::cdm::bind::TissueSystemData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::TissueSystemData* common);
  ::pulse::cdm::bind::TissueSystemData* unsafe_arena_release_common();

  // double RestingTissueGlucose_g = 2;
  void clear_restingtissueglucose_g();
  double restingtissueglucose_g() const;
  void set_restingtissueglucose_g(double value);
  private:
  double _internal_restingtissueglucose_g() const;
  void _internal_set_restingtissueglucose_g(double value);
  public:

  // double RestingBloodGlucose_mg_Per_mL = 3;
  void clear_restingbloodglucose_mg_per_ml();
  double restingbloodglucose_mg_per_ml() const;
  void set_restingbloodglucose_mg_per_ml(double value);
  private:
  double _internal_restingbloodglucose_mg_per_ml() const;
  void _internal_set_restingbloodglucose_mg_per_ml(double value);
  public:

  // double RestingBloodLipid_mg_Per_mL = 4;
  void clear_restingbloodlipid_mg_per_ml();
  double restingbloodlipid_mg_per_ml() const;
  void set_restingbloodlipid_mg_per_ml(double value);
  private:
  double _internal_restingbloodlipid_mg_per_ml() const;
  void _internal_set_restingbloodlipid_mg_per_ml(double value);
  public:

  // double RestingBloodInsulin_mg_Per_mL = 5;
  void clear_restingbloodinsulin_mg_per_ml();
  double restingbloodinsulin_mg_per_ml() const;
  void set_restingbloodinsulin_mg_per_ml(double value);
  private:
  double _internal_restingbloodinsulin_mg_per_ml() const;
  void _internal_set_restingbloodinsulin_mg_per_ml(double value);
  public:

  // double RestingFluidMass_kg = 6;
  void clear_restingfluidmass_kg();
  double restingfluidmass_kg() const;
  void set_restingfluidmass_kg(double value);
  private:
  double _internal_restingfluidmass_kg() const;
  void _internal_set_restingfluidmass_kg(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.TissueData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::TissueSystemData* common_;
  double restingtissueglucose_g_;
  double restingbloodglucose_mg_per_ml_;
  double restingbloodlipid_mg_per_ml_;
  double restingbloodinsulin_mg_per_ml_;
  double restingfluidmass_kg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BloodChemistryData

// .pulse.cdm.bind.BloodChemistrySystemData Common = 1;
inline bool BloodChemistryData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool BloodChemistryData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::BloodChemistrySystemData& BloodChemistryData::_internal_common() const {
  const ::pulse::cdm::bind::BloodChemistrySystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BloodChemistrySystemData&>(
      ::pulse::cdm::bind::_BloodChemistrySystemData_default_instance_);
}
inline const ::pulse::cdm::bind::BloodChemistrySystemData& BloodChemistryData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.BloodChemistryData.Common)
  return _internal_common();
}
inline void BloodChemistryData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::BloodChemistrySystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.BloodChemistryData.Common)
}
inline ::pulse::cdm::bind::BloodChemistrySystemData* BloodChemistryData::release_common() {
  
  ::pulse::cdm::bind::BloodChemistrySystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BloodChemistrySystemData* BloodChemistryData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.BloodChemistryData.Common)
  
  ::pulse::cdm::bind::BloodChemistrySystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BloodChemistrySystemData* BloodChemistryData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BloodChemistrySystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::BloodChemistrySystemData* BloodChemistryData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.BloodChemistryData.Common)
  return _internal_mutable_common();
}
inline void BloodChemistryData::set_allocated_common(::pulse::cdm::bind::BloodChemistrySystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.BloodChemistryData.Common)
}

// .pulse.cdm.bind.RunningAverageData ArterialOxygenAverage_mmHg = 2;
inline bool BloodChemistryData::_internal_has_arterialoxygenaverage_mmhg() const {
  return this != internal_default_instance() && arterialoxygenaverage_mmhg_ != nullptr;
}
inline bool BloodChemistryData::has_arterialoxygenaverage_mmhg() const {
  return _internal_has_arterialoxygenaverage_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& BloodChemistryData::_internal_arterialoxygenaverage_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = arterialoxygenaverage_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& BloodChemistryData::arterialoxygenaverage_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.BloodChemistryData.ArterialOxygenAverage_mmHg)
  return _internal_arterialoxygenaverage_mmhg();
}
inline void BloodChemistryData::unsafe_arena_set_allocated_arterialoxygenaverage_mmhg(
    ::pulse::cdm::bind::RunningAverageData* arterialoxygenaverage_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenaverage_mmhg_);
  }
  arterialoxygenaverage_mmhg_ = arterialoxygenaverage_mmhg;
  if (arterialoxygenaverage_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.BloodChemistryData.ArterialOxygenAverage_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::release_arterialoxygenaverage_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialoxygenaverage_mmhg_;
  arterialoxygenaverage_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::unsafe_arena_release_arterialoxygenaverage_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.BloodChemistryData.ArterialOxygenAverage_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialoxygenaverage_mmhg_;
  arterialoxygenaverage_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::_internal_mutable_arterialoxygenaverage_mmhg() {
  
  if (arterialoxygenaverage_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    arterialoxygenaverage_mmhg_ = p;
  }
  return arterialoxygenaverage_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::mutable_arterialoxygenaverage_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.BloodChemistryData.ArterialOxygenAverage_mmHg)
  return _internal_mutable_arterialoxygenaverage_mmhg();
}
inline void BloodChemistryData::set_allocated_arterialoxygenaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialoxygenaverage_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenaverage_mmhg_);
  }
  if (arterialoxygenaverage_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenaverage_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      arterialoxygenaverage_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialoxygenaverage_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  arterialoxygenaverage_mmhg_ = arterialoxygenaverage_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.BloodChemistryData.ArterialOxygenAverage_mmHg)
}

// .pulse.cdm.bind.RunningAverageData ArterialCarbonDioxideAverage_mmHg = 3;
inline bool BloodChemistryData::_internal_has_arterialcarbondioxideaverage_mmhg() const {
  return this != internal_default_instance() && arterialcarbondioxideaverage_mmhg_ != nullptr;
}
inline bool BloodChemistryData::has_arterialcarbondioxideaverage_mmhg() const {
  return _internal_has_arterialcarbondioxideaverage_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& BloodChemistryData::_internal_arterialcarbondioxideaverage_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = arterialcarbondioxideaverage_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& BloodChemistryData::arterialcarbondioxideaverage_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.BloodChemistryData.ArterialCarbonDioxideAverage_mmHg)
  return _internal_arterialcarbondioxideaverage_mmhg();
}
inline void BloodChemistryData::unsafe_arena_set_allocated_arterialcarbondioxideaverage_mmhg(
    ::pulse::cdm::bind::RunningAverageData* arterialcarbondioxideaverage_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxideaverage_mmhg_);
  }
  arterialcarbondioxideaverage_mmhg_ = arterialcarbondioxideaverage_mmhg;
  if (arterialcarbondioxideaverage_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.BloodChemistryData.ArterialCarbonDioxideAverage_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::release_arterialcarbondioxideaverage_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialcarbondioxideaverage_mmhg_;
  arterialcarbondioxideaverage_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::unsafe_arena_release_arterialcarbondioxideaverage_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.BloodChemistryData.ArterialCarbonDioxideAverage_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialcarbondioxideaverage_mmhg_;
  arterialcarbondioxideaverage_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::_internal_mutable_arterialcarbondioxideaverage_mmhg() {
  
  if (arterialcarbondioxideaverage_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    arterialcarbondioxideaverage_mmhg_ = p;
  }
  return arterialcarbondioxideaverage_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* BloodChemistryData::mutable_arterialcarbondioxideaverage_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.BloodChemistryData.ArterialCarbonDioxideAverage_mmHg)
  return _internal_mutable_arterialcarbondioxideaverage_mmhg();
}
inline void BloodChemistryData::set_allocated_arterialcarbondioxideaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialcarbondioxideaverage_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxideaverage_mmhg_);
  }
  if (arterialcarbondioxideaverage_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxideaverage_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      arterialcarbondioxideaverage_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialcarbondioxideaverage_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  arterialcarbondioxideaverage_mmhg_ = arterialcarbondioxideaverage_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.BloodChemistryData.ArterialCarbonDioxideAverage_mmHg)
}

// -------------------------------------------------------------------

// CardiovascularData

// .pulse.cdm.bind.CardiovascularSystemData Common = 1;
inline bool CardiovascularData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool CardiovascularData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::CardiovascularSystemData& CardiovascularData::_internal_common() const {
  const ::pulse::cdm::bind::CardiovascularSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::CardiovascularSystemData&>(
      ::pulse::cdm::bind::_CardiovascularSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::CardiovascularSystemData& CardiovascularData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.Common)
  return _internal_common();
}
inline void CardiovascularData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::CardiovascularSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.Common)
}
inline ::pulse::cdm::bind::CardiovascularSystemData* CardiovascularData::release_common() {
  
  ::pulse::cdm::bind::CardiovascularSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::CardiovascularSystemData* CardiovascularData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.Common)
  
  ::pulse::cdm::bind::CardiovascularSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::CardiovascularSystemData* CardiovascularData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::CardiovascularSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::CardiovascularSystemData* CardiovascularData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.Common)
  return _internal_mutable_common();
}
inline void CardiovascularData::set_allocated_common(::pulse::cdm::bind::CardiovascularSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.Common)
}

// bool StartSystole = 2;
inline void CardiovascularData::clear_startsystole() {
  startsystole_ = false;
}
inline bool CardiovascularData::_internal_startsystole() const {
  return startsystole_;
}
inline bool CardiovascularData::startsystole() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.StartSystole)
  return _internal_startsystole();
}
inline void CardiovascularData::_internal_set_startsystole(bool value) {
  
  startsystole_ = value;
}
inline void CardiovascularData::set_startsystole(bool value) {
  _internal_set_startsystole(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.StartSystole)
}

// bool HeartFlowDetected = 3;
inline void CardiovascularData::clear_heartflowdetected() {
  heartflowdetected_ = false;
}
inline bool CardiovascularData::_internal_heartflowdetected() const {
  return heartflowdetected_;
}
inline bool CardiovascularData::heartflowdetected() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.HeartFlowDetected)
  return _internal_heartflowdetected();
}
inline void CardiovascularData::_internal_set_heartflowdetected(bool value) {
  
  heartflowdetected_ = value;
}
inline void CardiovascularData::set_heartflowdetected(bool value) {
  _internal_set_heartflowdetected(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.HeartFlowDetected)
}

// bool EnterCardiacArrest = 4;
inline void CardiovascularData::clear_entercardiacarrest() {
  entercardiacarrest_ = false;
}
inline bool CardiovascularData::_internal_entercardiacarrest() const {
  return entercardiacarrest_;
}
inline bool CardiovascularData::entercardiacarrest() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.EnterCardiacArrest)
  return _internal_entercardiacarrest();
}
inline void CardiovascularData::_internal_set_entercardiacarrest(bool value) {
  
  entercardiacarrest_ = value;
}
inline void CardiovascularData::set_entercardiacarrest(bool value) {
  _internal_set_entercardiacarrest(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.EnterCardiacArrest)
}

// double CardiacCyclePeriod_s = 5;
inline void CardiovascularData::clear_cardiaccycleperiod_s() {
  cardiaccycleperiod_s_ = 0;
}
inline double CardiovascularData::_internal_cardiaccycleperiod_s() const {
  return cardiaccycleperiod_s_;
}
inline double CardiovascularData::cardiaccycleperiod_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePeriod_s)
  return _internal_cardiaccycleperiod_s();
}
inline void CardiovascularData::_internal_set_cardiaccycleperiod_s(double value) {
  
  cardiaccycleperiod_s_ = value;
}
inline void CardiovascularData::set_cardiaccycleperiod_s(double value) {
  _internal_set_cardiaccycleperiod_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCyclePeriod_s)
}

// double CurrentCardiacCycleDuration_s = 6;
inline void CardiovascularData::clear_currentcardiaccycleduration_s() {
  currentcardiaccycleduration_s_ = 0;
}
inline double CardiovascularData::_internal_currentcardiaccycleduration_s() const {
  return currentcardiaccycleduration_s_;
}
inline double CardiovascularData::currentcardiaccycleduration_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CurrentCardiacCycleDuration_s)
  return _internal_currentcardiaccycleduration_s();
}
inline void CardiovascularData::_internal_set_currentcardiaccycleduration_s(double value) {
  
  currentcardiaccycleduration_s_ = value;
}
inline void CardiovascularData::set_currentcardiaccycleduration_s(double value) {
  _internal_set_currentcardiaccycleduration_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CurrentCardiacCycleDuration_s)
}

// double LeftHeartElastanceModifier = 7;
inline void CardiovascularData::clear_leftheartelastancemodifier() {
  leftheartelastancemodifier_ = 0;
}
inline double CardiovascularData::_internal_leftheartelastancemodifier() const {
  return leftheartelastancemodifier_;
}
inline double CardiovascularData::leftheartelastancemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceModifier)
  return _internal_leftheartelastancemodifier();
}
inline void CardiovascularData::_internal_set_leftheartelastancemodifier(double value) {
  
  leftheartelastancemodifier_ = value;
}
inline void CardiovascularData::set_leftheartelastancemodifier(double value) {
  _internal_set_leftheartelastancemodifier(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceModifier)
}

// double LeftHeartElastance_mmHg_Per_mL = 8;
inline void CardiovascularData::clear_leftheartelastance_mmhg_per_ml() {
  leftheartelastance_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_leftheartelastance_mmhg_per_ml() const {
  return leftheartelastance_mmhg_per_ml_;
}
inline double CardiovascularData::leftheartelastance_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.LeftHeartElastance_mmHg_Per_mL)
  return _internal_leftheartelastance_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_leftheartelastance_mmhg_per_ml(double value) {
  
  leftheartelastance_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_leftheartelastance_mmhg_per_ml(double value) {
  _internal_set_leftheartelastance_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.LeftHeartElastance_mmHg_Per_mL)
}

// double LeftHeartElastanceMax_mmHg_Per_mL = 9;
inline void CardiovascularData::clear_leftheartelastancemax_mmhg_per_ml() {
  leftheartelastancemax_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_leftheartelastancemax_mmhg_per_ml() const {
  return leftheartelastancemax_mmhg_per_ml_;
}
inline double CardiovascularData::leftheartelastancemax_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceMax_mmHg_Per_mL)
  return _internal_leftheartelastancemax_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_leftheartelastancemax_mmhg_per_ml(double value) {
  
  leftheartelastancemax_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_leftheartelastancemax_mmhg_per_ml(double value) {
  _internal_set_leftheartelastancemax_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceMax_mmHg_Per_mL)
}

// double LeftHeartElastanceMin_mmHg_Per_mL = 10;
inline void CardiovascularData::clear_leftheartelastancemin_mmhg_per_ml() {
  leftheartelastancemin_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_leftheartelastancemin_mmhg_per_ml() const {
  return leftheartelastancemin_mmhg_per_ml_;
}
inline double CardiovascularData::leftheartelastancemin_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceMin_mmHg_Per_mL)
  return _internal_leftheartelastancemin_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_leftheartelastancemin_mmhg_per_ml(double value) {
  
  leftheartelastancemin_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_leftheartelastancemin_mmhg_per_ml(double value) {
  _internal_set_leftheartelastancemin_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.LeftHeartElastanceMin_mmHg_Per_mL)
}

// double RightHeartElastance_mmHg_Per_mL = 11;
inline void CardiovascularData::clear_rightheartelastance_mmhg_per_ml() {
  rightheartelastance_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_rightheartelastance_mmhg_per_ml() const {
  return rightheartelastance_mmhg_per_ml_;
}
inline double CardiovascularData::rightheartelastance_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.RightHeartElastance_mmHg_Per_mL)
  return _internal_rightheartelastance_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_rightheartelastance_mmhg_per_ml(double value) {
  
  rightheartelastance_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_rightheartelastance_mmhg_per_ml(double value) {
  _internal_set_rightheartelastance_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.RightHeartElastance_mmHg_Per_mL)
}

// double RightHeartElastanceMax_mmHg_Per_mL = 12;
inline void CardiovascularData::clear_rightheartelastancemax_mmhg_per_ml() {
  rightheartelastancemax_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_rightheartelastancemax_mmhg_per_ml() const {
  return rightheartelastancemax_mmhg_per_ml_;
}
inline double CardiovascularData::rightheartelastancemax_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.RightHeartElastanceMax_mmHg_Per_mL)
  return _internal_rightheartelastancemax_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_rightheartelastancemax_mmhg_per_ml(double value) {
  
  rightheartelastancemax_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_rightheartelastancemax_mmhg_per_ml(double value) {
  _internal_set_rightheartelastancemax_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.RightHeartElastanceMax_mmHg_Per_mL)
}

// double RightHeartElastanceMin_mmHg_Per_mL = 13;
inline void CardiovascularData::clear_rightheartelastancemin_mmhg_per_ml() {
  rightheartelastancemin_mmhg_per_ml_ = 0;
}
inline double CardiovascularData::_internal_rightheartelastancemin_mmhg_per_ml() const {
  return rightheartelastancemin_mmhg_per_ml_;
}
inline double CardiovascularData::rightheartelastancemin_mmhg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.RightHeartElastanceMin_mmHg_Per_mL)
  return _internal_rightheartelastancemin_mmhg_per_ml();
}
inline void CardiovascularData::_internal_set_rightheartelastancemin_mmhg_per_ml(double value) {
  
  rightheartelastancemin_mmhg_per_ml_ = value;
}
inline void CardiovascularData::set_rightheartelastancemin_mmhg_per_ml(double value) {
  _internal_set_rightheartelastancemin_mmhg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.RightHeartElastanceMin_mmHg_Per_mL)
}

// double CompressionTime_s = 14;
inline void CardiovascularData::clear_compressiontime_s() {
  compressiontime_s_ = 0;
}
inline double CardiovascularData::_internal_compressiontime_s() const {
  return compressiontime_s_;
}
inline double CardiovascularData::compressiontime_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CompressionTime_s)
  return _internal_compressiontime_s();
}
inline void CardiovascularData::_internal_set_compressiontime_s(double value) {
  
  compressiontime_s_ = value;
}
inline void CardiovascularData::set_compressiontime_s(double value) {
  _internal_set_compressiontime_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CompressionTime_s)
}

// double CompressionRatio = 15;
inline void CardiovascularData::clear_compressionratio() {
  compressionratio_ = 0;
}
inline double CardiovascularData::_internal_compressionratio() const {
  return compressionratio_;
}
inline double CardiovascularData::compressionratio() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CompressionRatio)
  return _internal_compressionratio();
}
inline void CardiovascularData::_internal_set_compressionratio(double value) {
  
  compressionratio_ = value;
}
inline void CardiovascularData::set_compressionratio(double value) {
  _internal_set_compressionratio(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CompressionRatio)
}

// double CompressionPeriod_s = 16;
inline void CardiovascularData::clear_compressionperiod_s() {
  compressionperiod_s_ = 0;
}
inline double CardiovascularData::_internal_compressionperiod_s() const {
  return compressionperiod_s_;
}
inline double CardiovascularData::compressionperiod_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CompressionPeriod_s)
  return _internal_compressionperiod_s();
}
inline void CardiovascularData::_internal_set_compressionperiod_s(double value) {
  
  compressionperiod_s_ = value;
}
inline void CardiovascularData::set_compressionperiod_s(double value) {
  _internal_set_compressionperiod_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CompressionPeriod_s)
}

// double CurrentCardiacCycleTime_s = 17;
inline void CardiovascularData::clear_currentcardiaccycletime_s() {
  currentcardiaccycletime_s_ = 0;
}
inline double CardiovascularData::_internal_currentcardiaccycletime_s() const {
  return currentcardiaccycletime_s_;
}
inline double CardiovascularData::currentcardiaccycletime_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CurrentCardiacCycleTime_s)
  return _internal_currentcardiaccycletime_s();
}
inline void CardiovascularData::_internal_set_currentcardiaccycletime_s(double value) {
  
  currentcardiaccycletime_s_ = value;
}
inline void CardiovascularData::set_currentcardiaccycletime_s(double value) {
  _internal_set_currentcardiaccycletime_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CurrentCardiacCycleTime_s)
}

// double CardiacCycleDiastolicVolume_mL = 18;
inline void CardiovascularData::clear_cardiaccyclediastolicvolume_ml() {
  cardiaccyclediastolicvolume_ml_ = 0;
}
inline double CardiovascularData::_internal_cardiaccyclediastolicvolume_ml() const {
  return cardiaccyclediastolicvolume_ml_;
}
inline double CardiovascularData::cardiaccyclediastolicvolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleDiastolicVolume_mL)
  return _internal_cardiaccyclediastolicvolume_ml();
}
inline void CardiovascularData::_internal_set_cardiaccyclediastolicvolume_ml(double value) {
  
  cardiaccyclediastolicvolume_ml_ = value;
}
inline void CardiovascularData::set_cardiaccyclediastolicvolume_ml(double value) {
  _internal_set_cardiaccyclediastolicvolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCycleDiastolicVolume_mL)
}

// double CardiacCycleAortaPressureLow_mmHg = 19;
inline void CardiovascularData::clear_cardiaccycleaortapressurelow_mmhg() {
  cardiaccycleaortapressurelow_mmhg_ = 0;
}
inline double CardiovascularData::_internal_cardiaccycleaortapressurelow_mmhg() const {
  return cardiaccycleaortapressurelow_mmhg_;
}
inline double CardiovascularData::cardiaccycleaortapressurelow_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleAortaPressureLow_mmHg)
  return _internal_cardiaccycleaortapressurelow_mmhg();
}
inline void CardiovascularData::_internal_set_cardiaccycleaortapressurelow_mmhg(double value) {
  
  cardiaccycleaortapressurelow_mmhg_ = value;
}
inline void CardiovascularData::set_cardiaccycleaortapressurelow_mmhg(double value) {
  _internal_set_cardiaccycleaortapressurelow_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCycleAortaPressureLow_mmHg)
}

// double CardiacCycleAortaPressureHigh_mmHg = 20;
inline void CardiovascularData::clear_cardiaccycleaortapressurehigh_mmhg() {
  cardiaccycleaortapressurehigh_mmhg_ = 0;
}
inline double CardiovascularData::_internal_cardiaccycleaortapressurehigh_mmhg() const {
  return cardiaccycleaortapressurehigh_mmhg_;
}
inline double CardiovascularData::cardiaccycleaortapressurehigh_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleAortaPressureHigh_mmHg)
  return _internal_cardiaccycleaortapressurehigh_mmhg();
}
inline void CardiovascularData::_internal_set_cardiaccycleaortapressurehigh_mmhg(double value) {
  
  cardiaccycleaortapressurehigh_mmhg_ = value;
}
inline void CardiovascularData::set_cardiaccycleaortapressurehigh_mmhg(double value) {
  _internal_set_cardiaccycleaortapressurehigh_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCycleAortaPressureHigh_mmHg)
}

// double CardiacCyclePulmonaryArteryPressureLow_mmHg = 21;
inline void CardiovascularData::clear_cardiaccyclepulmonaryarterypressurelow_mmhg() {
  cardiaccyclepulmonaryarterypressurelow_mmhg_ = 0;
}
inline double CardiovascularData::_internal_cardiaccyclepulmonaryarterypressurelow_mmhg() const {
  return cardiaccyclepulmonaryarterypressurelow_mmhg_;
}
inline double CardiovascularData::cardiaccyclepulmonaryarterypressurelow_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressureLow_mmHg)
  return _internal_cardiaccyclepulmonaryarterypressurelow_mmhg();
}
inline void CardiovascularData::_internal_set_cardiaccyclepulmonaryarterypressurelow_mmhg(double value) {
  
  cardiaccyclepulmonaryarterypressurelow_mmhg_ = value;
}
inline void CardiovascularData::set_cardiaccyclepulmonaryarterypressurelow_mmhg(double value) {
  _internal_set_cardiaccyclepulmonaryarterypressurelow_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressureLow_mmHg)
}

// double CardiacCyclePulmonaryArteryPressureHigh_mmHg = 22;
inline void CardiovascularData::clear_cardiaccyclepulmonaryarterypressurehigh_mmhg() {
  cardiaccyclepulmonaryarterypressurehigh_mmhg_ = 0;
}
inline double CardiovascularData::_internal_cardiaccyclepulmonaryarterypressurehigh_mmhg() const {
  return cardiaccyclepulmonaryarterypressurehigh_mmhg_;
}
inline double CardiovascularData::cardiaccyclepulmonaryarterypressurehigh_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressureHigh_mmHg)
  return _internal_cardiaccyclepulmonaryarterypressurehigh_mmhg();
}
inline void CardiovascularData::_internal_set_cardiaccyclepulmonaryarterypressurehigh_mmhg(double value) {
  
  cardiaccyclepulmonaryarterypressurehigh_mmhg_ = value;
}
inline void CardiovascularData::set_cardiaccyclepulmonaryarterypressurehigh_mmhg(double value) {
  _internal_set_cardiaccyclepulmonaryarterypressurehigh_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressureHigh_mmHg)
}

// double LastCardiacCycleMeanArterialCO2PartialPressure_mmHg = 23;
inline void CardiovascularData::clear_lastcardiaccyclemeanarterialco2partialpressure_mmhg() {
  lastcardiaccyclemeanarterialco2partialpressure_mmhg_ = 0;
}
inline double CardiovascularData::_internal_lastcardiaccyclemeanarterialco2partialpressure_mmhg() const {
  return lastcardiaccyclemeanarterialco2partialpressure_mmhg_;
}
inline double CardiovascularData::lastcardiaccyclemeanarterialco2partialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg)
  return _internal_lastcardiaccyclemeanarterialco2partialpressure_mmhg();
}
inline void CardiovascularData::_internal_set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(double value) {
  
  lastcardiaccyclemeanarterialco2partialpressure_mmhg_ = value;
}
inline void CardiovascularData::set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(double value) {
  _internal_set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.LastCardiacCycleMeanArterialCO2PartialPressure_mmHg)
}

// double CardiacCycleStrokeVolume_mL = 24;
inline void CardiovascularData::clear_cardiaccyclestrokevolume_ml() {
  cardiaccyclestrokevolume_ml_ = 0;
}
inline double CardiovascularData::_internal_cardiaccyclestrokevolume_ml() const {
  return cardiaccyclestrokevolume_ml_;
}
inline double CardiovascularData::cardiaccyclestrokevolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleStrokeVolume_mL)
  return _internal_cardiaccyclestrokevolume_ml();
}
inline void CardiovascularData::_internal_set_cardiaccyclestrokevolume_ml(double value) {
  
  cardiaccyclestrokevolume_ml_ = value;
}
inline void CardiovascularData::set_cardiaccyclestrokevolume_ml(double value) {
  _internal_set_cardiaccyclestrokevolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.CardiovascularData.CardiacCycleStrokeVolume_mL)
}

// .pulse.cdm.bind.RunningAverageData CardiacCycleArterialPressure_mmHg = 25;
inline bool CardiovascularData::_internal_has_cardiaccyclearterialpressure_mmhg() const {
  return this != internal_default_instance() && cardiaccyclearterialpressure_mmhg_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclearterialpressure_mmhg() const {
  return _internal_has_cardiaccyclearterialpressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclearterialpressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclearterialpressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclearterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialPressure_mmHg)
  return _internal_cardiaccyclearterialpressure_mmhg();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclearterialpressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialpressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialpressure_mmhg_);
  }
  cardiaccyclearterialpressure_mmhg_ = cardiaccyclearterialpressure_mmhg;
  if (cardiaccyclearterialpressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclearterialpressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclearterialpressure_mmhg_;
  cardiaccyclearterialpressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclearterialpressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclearterialpressure_mmhg_;
  cardiaccyclearterialpressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclearterialpressure_mmhg() {
  
  if (cardiaccyclearterialpressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclearterialpressure_mmhg_ = p;
  }
  return cardiaccyclearterialpressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclearterialpressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialPressure_mmHg)
  return _internal_mutable_cardiaccyclearterialpressure_mmhg();
}
inline void CardiovascularData::set_allocated_cardiaccyclearterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialpressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialpressure_mmhg_);
  }
  if (cardiaccyclearterialpressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialpressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclearterialpressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclearterialpressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclearterialpressure_mmhg_ = cardiaccyclearterialpressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialPressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg = 26;
inline bool CardiovascularData::_internal_has_cardiaccyclearterialco2partialpressure_mmhg() const {
  return this != internal_default_instance() && cardiaccyclearterialco2partialpressure_mmhg_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclearterialco2partialpressure_mmhg() const {
  return _internal_has_cardiaccyclearterialco2partialpressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclearterialco2partialpressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclearterialco2partialpressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclearterialco2partialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialCO2PartialPressure_mmHg)
  return _internal_cardiaccyclearterialco2partialpressure_mmhg();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclearterialco2partialpressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialco2partialpressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialco2partialpressure_mmhg_);
  }
  cardiaccyclearterialco2partialpressure_mmhg_ = cardiaccyclearterialco2partialpressure_mmhg;
  if (cardiaccyclearterialco2partialpressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialCO2PartialPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclearterialco2partialpressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclearterialco2partialpressure_mmhg_;
  cardiaccyclearterialco2partialpressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclearterialco2partialpressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialCO2PartialPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclearterialco2partialpressure_mmhg_;
  cardiaccyclearterialco2partialpressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclearterialco2partialpressure_mmhg() {
  
  if (cardiaccyclearterialco2partialpressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclearterialco2partialpressure_mmhg_ = p;
  }
  return cardiaccyclearterialco2partialpressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclearterialco2partialpressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialCO2PartialPressure_mmHg)
  return _internal_mutable_cardiaccyclearterialco2partialpressure_mmhg();
}
inline void CardiovascularData::set_allocated_cardiaccyclearterialco2partialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclearterialco2partialpressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialco2partialpressure_mmhg_);
  }
  if (cardiaccyclearterialco2partialpressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclearterialco2partialpressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclearterialco2partialpressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclearterialco2partialpressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclearterialco2partialpressure_mmhg_ = cardiaccyclearterialco2partialpressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleArterialCO2PartialPressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg = 27;
inline bool CardiovascularData::_internal_has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const {
  return this != internal_default_instance() && cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const {
  return _internal_has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclepulmonarycapillarieswedgepressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg)
  return _internal_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclepulmonarycapillarieswedgepressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillarieswedgepressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillarieswedgepressure_mmhg_);
  }
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = cardiaccyclepulmonarycapillarieswedgepressure_mmhg;
  if (cardiaccyclepulmonarycapillarieswedgepressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() {
  
  if (cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = p;
  }
  return cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg)
  return _internal_mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg();
}
inline void CardiovascularData::set_allocated_cardiaccyclepulmonarycapillarieswedgepressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillarieswedgepressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillarieswedgepressure_mmhg_);
  }
  if (cardiaccyclepulmonarycapillarieswedgepressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillarieswedgepressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclepulmonarycapillarieswedgepressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclepulmonarycapillarieswedgepressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = cardiaccyclepulmonarycapillarieswedgepressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesWedgePressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s = 28;
inline bool CardiovascularData::_internal_has_cardiaccyclepulmonarycapillariesflow_ml_per_s() const {
  return this != internal_default_instance() && cardiaccyclepulmonarycapillariesflow_ml_per_s_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclepulmonarycapillariesflow_ml_per_s() const {
  return _internal_has_cardiaccyclepulmonarycapillariesflow_ml_per_s();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclepulmonarycapillariesflow_ml_per_s() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclepulmonarycapillariesflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s)
  return _internal_cardiaccyclepulmonarycapillariesflow_ml_per_s();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclepulmonarycapillariesflow_ml_per_s(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillariesflow_ml_per_s) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillariesflow_ml_per_s_);
  }
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = cardiaccyclepulmonarycapillariesflow_ml_per_s;
  if (cardiaccyclepulmonarycapillariesflow_ml_per_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclepulmonarycapillariesflow_ml_per_s() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclepulmonarycapillariesflow_ml_per_s() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s() {
  
  if (cardiaccyclepulmonarycapillariesflow_ml_per_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclepulmonarycapillariesflow_ml_per_s_ = p;
  }
  return cardiaccyclepulmonarycapillariesflow_ml_per_s_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s)
  return _internal_mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s();
}
inline void CardiovascularData::set_allocated_cardiaccyclepulmonarycapillariesflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonarycapillariesflow_ml_per_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillariesflow_ml_per_s_);
  }
  if (cardiaccyclepulmonarycapillariesflow_ml_per_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonarycapillariesflow_ml_per_s)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclepulmonarycapillariesflow_ml_per_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclepulmonarycapillariesflow_ml_per_s, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = cardiaccyclepulmonarycapillariesflow_ml_per_s;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryCapillariesFlow_mL_Per_s)
}

// .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s = 29;
inline bool CardiovascularData::_internal_has_cardiaccyclepulmonaryshuntflow_ml_per_s() const {
  return this != internal_default_instance() && cardiaccyclepulmonaryshuntflow_ml_per_s_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclepulmonaryshuntflow_ml_per_s() const {
  return _internal_has_cardiaccyclepulmonaryshuntflow_ml_per_s();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclepulmonaryshuntflow_ml_per_s() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclepulmonaryshuntflow_ml_per_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclepulmonaryshuntflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryShuntFlow_mL_Per_s)
  return _internal_cardiaccyclepulmonaryshuntflow_ml_per_s();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclepulmonaryshuntflow_ml_per_s(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryshuntflow_ml_per_s) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryshuntflow_ml_per_s_);
  }
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = cardiaccyclepulmonaryshuntflow_ml_per_s;
  if (cardiaccyclepulmonaryshuntflow_ml_per_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryShuntFlow_mL_Per_s)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclepulmonaryshuntflow_ml_per_s() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonaryshuntflow_ml_per_s_;
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclepulmonaryshuntflow_ml_per_s() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryShuntFlow_mL_Per_s)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonaryshuntflow_ml_per_s_;
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclepulmonaryshuntflow_ml_per_s() {
  
  if (cardiaccyclepulmonaryshuntflow_ml_per_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclepulmonaryshuntflow_ml_per_s_ = p;
  }
  return cardiaccyclepulmonaryshuntflow_ml_per_s_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclepulmonaryshuntflow_ml_per_s() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryShuntFlow_mL_Per_s)
  return _internal_mutable_cardiaccyclepulmonaryshuntflow_ml_per_s();
}
inline void CardiovascularData::set_allocated_cardiaccyclepulmonaryshuntflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryshuntflow_ml_per_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryshuntflow_ml_per_s_);
  }
  if (cardiaccyclepulmonaryshuntflow_ml_per_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryshuntflow_ml_per_s)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclepulmonaryshuntflow_ml_per_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclepulmonaryshuntflow_ml_per_s, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = cardiaccyclepulmonaryshuntflow_ml_per_s;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryShuntFlow_mL_Per_s)
}

// .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg = 30;
inline bool CardiovascularData::_internal_has_cardiaccyclepulmonaryarterypressure_mmhg() const {
  return this != internal_default_instance() && cardiaccyclepulmonaryarterypressure_mmhg_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclepulmonaryarterypressure_mmhg() const {
  return _internal_has_cardiaccyclepulmonaryarterypressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclepulmonaryarterypressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclepulmonaryarterypressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclepulmonaryarterypressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressure_mmHg)
  return _internal_cardiaccyclepulmonaryarterypressure_mmhg();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclepulmonaryarterypressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryarterypressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryarterypressure_mmhg_);
  }
  cardiaccyclepulmonaryarterypressure_mmhg_ = cardiaccyclepulmonaryarterypressure_mmhg;
  if (cardiaccyclepulmonaryarterypressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclepulmonaryarterypressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonaryarterypressure_mmhg_;
  cardiaccyclepulmonaryarterypressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclepulmonaryarterypressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclepulmonaryarterypressure_mmhg_;
  cardiaccyclepulmonaryarterypressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclepulmonaryarterypressure_mmhg() {
  
  if (cardiaccyclepulmonaryarterypressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclepulmonaryarterypressure_mmhg_ = p;
  }
  return cardiaccyclepulmonaryarterypressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclepulmonaryarterypressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressure_mmHg)
  return _internal_mutable_cardiaccyclepulmonaryarterypressure_mmhg();
}
inline void CardiovascularData::set_allocated_cardiaccyclepulmonaryarterypressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclepulmonaryarterypressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryarterypressure_mmhg_);
  }
  if (cardiaccyclepulmonaryarterypressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclepulmonaryarterypressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclepulmonaryarterypressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclepulmonaryarterypressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclepulmonaryarterypressure_mmhg_ = cardiaccyclepulmonaryarterypressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCyclePulmonaryArteryPressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData CardiacCycleCentralVenousPressure_mmHg = 31;
inline bool CardiovascularData::_internal_has_cardiaccyclecentralvenouspressure_mmhg() const {
  return this != internal_default_instance() && cardiaccyclecentralvenouspressure_mmhg_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccyclecentralvenouspressure_mmhg() const {
  return _internal_has_cardiaccyclecentralvenouspressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccyclecentralvenouspressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccyclecentralvenouspressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccyclecentralvenouspressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleCentralVenousPressure_mmHg)
  return _internal_cardiaccyclecentralvenouspressure_mmhg();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccyclecentralvenouspressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* cardiaccyclecentralvenouspressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclecentralvenouspressure_mmhg_);
  }
  cardiaccyclecentralvenouspressure_mmhg_ = cardiaccyclecentralvenouspressure_mmhg;
  if (cardiaccyclecentralvenouspressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleCentralVenousPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccyclecentralvenouspressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclecentralvenouspressure_mmhg_;
  cardiaccyclecentralvenouspressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccyclecentralvenouspressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCycleCentralVenousPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccyclecentralvenouspressure_mmhg_;
  cardiaccyclecentralvenouspressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccyclecentralvenouspressure_mmhg() {
  
  if (cardiaccyclecentralvenouspressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccyclecentralvenouspressure_mmhg_ = p;
  }
  return cardiaccyclecentralvenouspressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccyclecentralvenouspressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCycleCentralVenousPressure_mmHg)
  return _internal_mutable_cardiaccyclecentralvenouspressure_mmhg();
}
inline void CardiovascularData::set_allocated_cardiaccyclecentralvenouspressure_mmhg(::pulse::cdm::bind::RunningAverageData* cardiaccyclecentralvenouspressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclecentralvenouspressure_mmhg_);
  }
  if (cardiaccyclecentralvenouspressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccyclecentralvenouspressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccyclecentralvenouspressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccyclecentralvenouspressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccyclecentralvenouspressure_mmhg_ = cardiaccyclecentralvenouspressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleCentralVenousPressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData CardiacCycleSkinFlow_mL_Per_s = 32;
inline bool CardiovascularData::_internal_has_cardiaccycleskinflow_ml_per_s() const {
  return this != internal_default_instance() && cardiaccycleskinflow_ml_per_s_ != nullptr;
}
inline bool CardiovascularData::has_cardiaccycleskinflow_ml_per_s() const {
  return _internal_has_cardiaccycleskinflow_ml_per_s();
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::_internal_cardiaccycleskinflow_ml_per_s() const {
  const ::pulse::cdm::bind::RunningAverageData* p = cardiaccycleskinflow_ml_per_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& CardiovascularData::cardiaccycleskinflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.CardiovascularData.CardiacCycleSkinFlow_mL_Per_s)
  return _internal_cardiaccycleskinflow_ml_per_s();
}
inline void CardiovascularData::unsafe_arena_set_allocated_cardiaccycleskinflow_ml_per_s(
    ::pulse::cdm::bind::RunningAverageData* cardiaccycleskinflow_ml_per_s) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccycleskinflow_ml_per_s_);
  }
  cardiaccycleskinflow_ml_per_s_ = cardiaccycleskinflow_ml_per_s;
  if (cardiaccycleskinflow_ml_per_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleSkinFlow_mL_Per_s)
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::release_cardiaccycleskinflow_ml_per_s() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccycleskinflow_ml_per_s_;
  cardiaccycleskinflow_ml_per_s_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::unsafe_arena_release_cardiaccycleskinflow_ml_per_s() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.CardiovascularData.CardiacCycleSkinFlow_mL_Per_s)
  
  ::pulse::cdm::bind::RunningAverageData* temp = cardiaccycleskinflow_ml_per_s_;
  cardiaccycleskinflow_ml_per_s_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::_internal_mutable_cardiaccycleskinflow_ml_per_s() {
  
  if (cardiaccycleskinflow_ml_per_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    cardiaccycleskinflow_ml_per_s_ = p;
  }
  return cardiaccycleskinflow_ml_per_s_;
}
inline ::pulse::cdm::bind::RunningAverageData* CardiovascularData::mutable_cardiaccycleskinflow_ml_per_s() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.CardiovascularData.CardiacCycleSkinFlow_mL_Per_s)
  return _internal_mutable_cardiaccycleskinflow_ml_per_s();
}
inline void CardiovascularData::set_allocated_cardiaccycleskinflow_ml_per_s(::pulse::cdm::bind::RunningAverageData* cardiaccycleskinflow_ml_per_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccycleskinflow_ml_per_s_);
  }
  if (cardiaccycleskinflow_ml_per_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiaccycleskinflow_ml_per_s)->GetArena();
    if (message_arena != submessage_arena) {
      cardiaccycleskinflow_ml_per_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiaccycleskinflow_ml_per_s, submessage_arena);
    }
    
  } else {
    
  }
  cardiaccycleskinflow_ml_per_s_ = cardiaccycleskinflow_ml_per_s;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.CardiovascularData.CardiacCycleSkinFlow_mL_Per_s)
}

// -------------------------------------------------------------------

// DrugData

// .pulse.cdm.bind.DrugSystemData Common = 1;
inline bool DrugData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool DrugData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::DrugSystemData& DrugData::_internal_common() const {
  const ::pulse::cdm::bind::DrugSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DrugSystemData&>(
      ::pulse::cdm::bind::_DrugSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::DrugSystemData& DrugData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.DrugData.Common)
  return _internal_common();
}
inline void DrugData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::DrugSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.DrugData.Common)
}
inline ::pulse::cdm::bind::DrugSystemData* DrugData::release_common() {
  
  ::pulse::cdm::bind::DrugSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DrugSystemData* DrugData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.DrugData.Common)
  
  ::pulse::cdm::bind::DrugSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DrugSystemData* DrugData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DrugSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::DrugSystemData* DrugData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.DrugData.Common)
  return _internal_mutable_common();
}
inline void DrugData::set_allocated_common(::pulse::cdm::bind::DrugSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.DrugData.Common)
}

// -------------------------------------------------------------------

// EndocrineData

// .pulse.cdm.bind.EndocrineSystemData Common = 1;
inline bool EndocrineData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool EndocrineData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::EndocrineSystemData& EndocrineData::_internal_common() const {
  const ::pulse::cdm::bind::EndocrineSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EndocrineSystemData&>(
      ::pulse::cdm::bind::_EndocrineSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::EndocrineSystemData& EndocrineData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EndocrineData.Common)
  return _internal_common();
}
inline void EndocrineData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::EndocrineSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.EndocrineData.Common)
}
inline ::pulse::cdm::bind::EndocrineSystemData* EndocrineData::release_common() {
  
  ::pulse::cdm::bind::EndocrineSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EndocrineSystemData* EndocrineData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.EndocrineData.Common)
  
  ::pulse::cdm::bind::EndocrineSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EndocrineSystemData* EndocrineData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EndocrineSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::EndocrineSystemData* EndocrineData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.EndocrineData.Common)
  return _internal_mutable_common();
}
inline void EndocrineData::set_allocated_common(::pulse::cdm::bind::EndocrineSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.EndocrineData.Common)
}

// -------------------------------------------------------------------

// EnergyData

// .pulse.cdm.bind.EnergySystemData Common = 1;
inline bool EnergyData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool EnergyData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::EnergySystemData& EnergyData::_internal_common() const {
  const ::pulse::cdm::bind::EnergySystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EnergySystemData&>(
      ::pulse::cdm::bind::_EnergySystemData_default_instance_);
}
inline const ::pulse::cdm::bind::EnergySystemData& EnergyData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.Common)
  return _internal_common();
}
inline void EnergyData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::EnergySystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.EnergyData.Common)
}
inline ::pulse::cdm::bind::EnergySystemData* EnergyData::release_common() {
  
  ::pulse::cdm::bind::EnergySystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EnergySystemData* EnergyData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.EnergyData.Common)
  
  ::pulse::cdm::bind::EnergySystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnergySystemData* EnergyData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnergySystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::EnergySystemData* EnergyData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.EnergyData.Common)
  return _internal_mutable_common();
}
inline void EnergyData::set_allocated_common(::pulse::cdm::bind::EnergySystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.EnergyData.Common)
}

// double EnduranceEnergyStore_J = 2;
inline void EnergyData::clear_enduranceenergystore_j() {
  enduranceenergystore_j_ = 0;
}
inline double EnergyData::_internal_enduranceenergystore_j() const {
  return enduranceenergystore_j_;
}
inline double EnergyData::enduranceenergystore_j() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.EnduranceEnergyStore_J)
  return _internal_enduranceenergystore_j();
}
inline void EnergyData::_internal_set_enduranceenergystore_j(double value) {
  
  enduranceenergystore_j_ = value;
}
inline void EnergyData::set_enduranceenergystore_j(double value) {
  _internal_set_enduranceenergystore_j(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.EnergyData.EnduranceEnergyStore_J)
}

// double MediumPowerEnergyStore_J = 3;
inline void EnergyData::clear_mediumpowerenergystore_j() {
  mediumpowerenergystore_j_ = 0;
}
inline double EnergyData::_internal_mediumpowerenergystore_j() const {
  return mediumpowerenergystore_j_;
}
inline double EnergyData::mediumpowerenergystore_j() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.MediumPowerEnergyStore_J)
  return _internal_mediumpowerenergystore_j();
}
inline void EnergyData::_internal_set_mediumpowerenergystore_j(double value) {
  
  mediumpowerenergystore_j_ = value;
}
inline void EnergyData::set_mediumpowerenergystore_j(double value) {
  _internal_set_mediumpowerenergystore_j(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.EnergyData.MediumPowerEnergyStore_J)
}

// double PeakPowerEnergyStore_J = 4;
inline void EnergyData::clear_peakpowerenergystore_j() {
  peakpowerenergystore_j_ = 0;
}
inline double EnergyData::_internal_peakpowerenergystore_j() const {
  return peakpowerenergystore_j_;
}
inline double EnergyData::peakpowerenergystore_j() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.PeakPowerEnergyStore_J)
  return _internal_peakpowerenergystore_j();
}
inline void EnergyData::_internal_set_peakpowerenergystore_j(double value) {
  
  peakpowerenergystore_j_ = value;
}
inline void EnergyData::set_peakpowerenergystore_j(double value) {
  _internal_set_peakpowerenergystore_j(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.EnergyData.PeakPowerEnergyStore_J)
}

// double UsableEnergyStore_J = 5;
inline void EnergyData::clear_usableenergystore_j() {
  usableenergystore_j_ = 0;
}
inline double EnergyData::_internal_usableenergystore_j() const {
  return usableenergystore_j_;
}
inline double EnergyData::usableenergystore_j() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.UsableEnergyStore_J)
  return _internal_usableenergystore_j();
}
inline void EnergyData::_internal_set_usableenergystore_j(double value) {
  
  usableenergystore_j_ = value;
}
inline void EnergyData::set_usableenergystore_j(double value) {
  _internal_set_usableenergystore_j(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.EnergyData.UsableEnergyStore_J)
}

// .pulse.cdm.bind.RunningAverageData BloodpH = 6;
inline bool EnergyData::_internal_has_bloodph() const {
  return this != internal_default_instance() && bloodph_ != nullptr;
}
inline bool EnergyData::has_bloodph() const {
  return _internal_has_bloodph();
}
inline const ::pulse::cdm::bind::RunningAverageData& EnergyData::_internal_bloodph() const {
  const ::pulse::cdm::bind::RunningAverageData* p = bloodph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& EnergyData::bloodph() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.BloodpH)
  return _internal_bloodph();
}
inline void EnergyData::unsafe_arena_set_allocated_bloodph(
    ::pulse::cdm::bind::RunningAverageData* bloodph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph_);
  }
  bloodph_ = bloodph;
  if (bloodph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.EnergyData.BloodpH)
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::release_bloodph() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = bloodph_;
  bloodph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::unsafe_arena_release_bloodph() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.EnergyData.BloodpH)
  
  ::pulse::cdm::bind::RunningAverageData* temp = bloodph_;
  bloodph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::_internal_mutable_bloodph() {
  
  if (bloodph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    bloodph_ = p;
  }
  return bloodph_;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::mutable_bloodph() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.EnergyData.BloodpH)
  return _internal_mutable_bloodph();
}
inline void EnergyData::set_allocated_bloodph(::pulse::cdm::bind::RunningAverageData* bloodph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph_);
  }
  if (bloodph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph)->GetArena();
    if (message_arena != submessage_arena) {
      bloodph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodph, submessage_arena);
    }
    
  } else {
    
  }
  bloodph_ = bloodph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.EnergyData.BloodpH)
}

// .pulse.cdm.bind.RunningAverageData BicarbonateMolarity_mmol_Per_L = 7;
inline bool EnergyData::_internal_has_bicarbonatemolarity_mmol_per_l() const {
  return this != internal_default_instance() && bicarbonatemolarity_mmol_per_l_ != nullptr;
}
inline bool EnergyData::has_bicarbonatemolarity_mmol_per_l() const {
  return _internal_has_bicarbonatemolarity_mmol_per_l();
}
inline const ::pulse::cdm::bind::RunningAverageData& EnergyData::_internal_bicarbonatemolarity_mmol_per_l() const {
  const ::pulse::cdm::bind::RunningAverageData* p = bicarbonatemolarity_mmol_per_l_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& EnergyData::bicarbonatemolarity_mmol_per_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnergyData.BicarbonateMolarity_mmol_Per_L)
  return _internal_bicarbonatemolarity_mmol_per_l();
}
inline void EnergyData::unsafe_arena_set_allocated_bicarbonatemolarity_mmol_per_l(
    ::pulse::cdm::bind::RunningAverageData* bicarbonatemolarity_mmol_per_l) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bicarbonatemolarity_mmol_per_l_);
  }
  bicarbonatemolarity_mmol_per_l_ = bicarbonatemolarity_mmol_per_l;
  if (bicarbonatemolarity_mmol_per_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.EnergyData.BicarbonateMolarity_mmol_Per_L)
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::release_bicarbonatemolarity_mmol_per_l() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = bicarbonatemolarity_mmol_per_l_;
  bicarbonatemolarity_mmol_per_l_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::unsafe_arena_release_bicarbonatemolarity_mmol_per_l() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.EnergyData.BicarbonateMolarity_mmol_Per_L)
  
  ::pulse::cdm::bind::RunningAverageData* temp = bicarbonatemolarity_mmol_per_l_;
  bicarbonatemolarity_mmol_per_l_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::_internal_mutable_bicarbonatemolarity_mmol_per_l() {
  
  if (bicarbonatemolarity_mmol_per_l_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    bicarbonatemolarity_mmol_per_l_ = p;
  }
  return bicarbonatemolarity_mmol_per_l_;
}
inline ::pulse::cdm::bind::RunningAverageData* EnergyData::mutable_bicarbonatemolarity_mmol_per_l() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.EnergyData.BicarbonateMolarity_mmol_Per_L)
  return _internal_mutable_bicarbonatemolarity_mmol_per_l();
}
inline void EnergyData::set_allocated_bicarbonatemolarity_mmol_per_l(::pulse::cdm::bind::RunningAverageData* bicarbonatemolarity_mmol_per_l) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bicarbonatemolarity_mmol_per_l_);
  }
  if (bicarbonatemolarity_mmol_per_l) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bicarbonatemolarity_mmol_per_l)->GetArena();
    if (message_arena != submessage_arena) {
      bicarbonatemolarity_mmol_per_l = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bicarbonatemolarity_mmol_per_l, submessage_arena);
    }
    
  } else {
    
  }
  bicarbonatemolarity_mmol_per_l_ = bicarbonatemolarity_mmol_per_l;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.EnergyData.BicarbonateMolarity_mmol_Per_L)
}

// -------------------------------------------------------------------

// GastrointestinalData

// .pulse.cdm.bind.GastrointestinalSystemData Common = 1;
inline bool GastrointestinalData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool GastrointestinalData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::GastrointestinalSystemData& GastrointestinalData::_internal_common() const {
  const ::pulse::cdm::bind::GastrointestinalSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::GastrointestinalSystemData&>(
      ::pulse::cdm::bind::_GastrointestinalSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::GastrointestinalSystemData& GastrointestinalData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.GastrointestinalData.Common)
  return _internal_common();
}
inline void GastrointestinalData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::GastrointestinalSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.GastrointestinalData.Common)
}
inline ::pulse::cdm::bind::GastrointestinalSystemData* GastrointestinalData::release_common() {
  
  ::pulse::cdm::bind::GastrointestinalSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::GastrointestinalSystemData* GastrointestinalData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.GastrointestinalData.Common)
  
  ::pulse::cdm::bind::GastrointestinalSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::GastrointestinalSystemData* GastrointestinalData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::GastrointestinalSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::GastrointestinalSystemData* GastrointestinalData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.GastrointestinalData.Common)
  return _internal_mutable_common();
}
inline void GastrointestinalData::set_allocated_common(::pulse::cdm::bind::GastrointestinalSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.GastrointestinalData.Common)
}

// -------------------------------------------------------------------

// HepaticData

// .pulse.cdm.bind.HepaticSystemData Common = 1;
inline bool HepaticData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool HepaticData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::HepaticSystemData& HepaticData::_internal_common() const {
  const ::pulse::cdm::bind::HepaticSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::HepaticSystemData&>(
      ::pulse::cdm::bind::_HepaticSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::HepaticSystemData& HepaticData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.HepaticData.Common)
  return _internal_common();
}
inline void HepaticData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::HepaticSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.HepaticData.Common)
}
inline ::pulse::cdm::bind::HepaticSystemData* HepaticData::release_common() {
  
  ::pulse::cdm::bind::HepaticSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::HepaticSystemData* HepaticData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.HepaticData.Common)
  
  ::pulse::cdm::bind::HepaticSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::HepaticSystemData* HepaticData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::HepaticSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::HepaticSystemData* HepaticData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.HepaticData.Common)
  return _internal_mutable_common();
}
inline void HepaticData::set_allocated_common(::pulse::cdm::bind::HepaticSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.HepaticData.Common)
}

// -------------------------------------------------------------------

// NervousData

// .pulse.cdm.bind.NervousSystemData Common = 1;
inline bool NervousData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool NervousData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::NervousSystemData& NervousData::_internal_common() const {
  const ::pulse::cdm::bind::NervousSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::NervousSystemData&>(
      ::pulse::cdm::bind::_NervousSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::NervousSystemData& NervousData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.Common)
  return _internal_common();
}
inline void NervousData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::NervousSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.NervousData.Common)
}
inline ::pulse::cdm::bind::NervousSystemData* NervousData::release_common() {
  
  ::pulse::cdm::bind::NervousSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::NervousSystemData* NervousData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.NervousData.Common)
  
  ::pulse::cdm::bind::NervousSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::NervousSystemData* NervousData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::NervousSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::NervousSystemData* NervousData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.NervousData.Common)
  return _internal_mutable_common();
}
inline void NervousData::set_allocated_common(::pulse::cdm::bind::NervousSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.NervousData.Common)
}

// double ArterialOxygenBaseline_mmHg = 2;
inline void NervousData::clear_arterialoxygenbaseline_mmhg() {
  arterialoxygenbaseline_mmhg_ = 0;
}
inline double NervousData::_internal_arterialoxygenbaseline_mmhg() const {
  return arterialoxygenbaseline_mmhg_;
}
inline double NervousData::arterialoxygenbaseline_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.ArterialOxygenBaseline_mmHg)
  return _internal_arterialoxygenbaseline_mmhg();
}
inline void NervousData::_internal_set_arterialoxygenbaseline_mmhg(double value) {
  
  arterialoxygenbaseline_mmhg_ = value;
}
inline void NervousData::set_arterialoxygenbaseline_mmhg(double value) {
  _internal_set_arterialoxygenbaseline_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.ArterialOxygenBaseline_mmHg)
}

// double ArterialCarbonDioxideBaseline_mmHg = 3;
inline void NervousData::clear_arterialcarbondioxidebaseline_mmhg() {
  arterialcarbondioxidebaseline_mmhg_ = 0;
}
inline double NervousData::_internal_arterialcarbondioxidebaseline_mmhg() const {
  return arterialcarbondioxidebaseline_mmhg_;
}
inline double NervousData::arterialcarbondioxidebaseline_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.ArterialCarbonDioxideBaseline_mmHg)
  return _internal_arterialcarbondioxidebaseline_mmhg();
}
inline void NervousData::_internal_set_arterialcarbondioxidebaseline_mmhg(double value) {
  
  arterialcarbondioxidebaseline_mmhg_ = value;
}
inline void NervousData::set_arterialcarbondioxidebaseline_mmhg(double value) {
  _internal_set_arterialcarbondioxidebaseline_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.ArterialCarbonDioxideBaseline_mmHg)
}

// bool BaroreceptorFeedbackStatus = 4;
inline void NervousData::clear_baroreceptorfeedbackstatus() {
  baroreceptorfeedbackstatus_ = false;
}
inline bool NervousData::_internal_baroreceptorfeedbackstatus() const {
  return baroreceptorfeedbackstatus_;
}
inline bool NervousData::baroreceptorfeedbackstatus() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorFeedbackStatus)
  return _internal_baroreceptorfeedbackstatus();
}
inline void NervousData::_internal_set_baroreceptorfeedbackstatus(bool value) {
  
  baroreceptorfeedbackstatus_ = value;
}
inline void NervousData::set_baroreceptorfeedbackstatus(bool value) {
  _internal_set_baroreceptorfeedbackstatus(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorFeedbackStatus)
}

// bool BaroreceptorSaturationStatus = 5;
inline void NervousData::clear_baroreceptorsaturationstatus() {
  baroreceptorsaturationstatus_ = false;
}
inline bool NervousData::_internal_baroreceptorsaturationstatus() const {
  return baroreceptorsaturationstatus_;
}
inline bool NervousData::baroreceptorsaturationstatus() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorSaturationStatus)
  return _internal_baroreceptorsaturationstatus();
}
inline void NervousData::_internal_set_baroreceptorsaturationstatus(bool value) {
  
  baroreceptorsaturationstatus_ = value;
}
inline void NervousData::set_baroreceptorsaturationstatus(bool value) {
  _internal_set_baroreceptorsaturationstatus(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorSaturationStatus)
}

// double BaroreceptorActiveTime_s = 6;
inline void NervousData::clear_baroreceptoractivetime_s() {
  baroreceptoractivetime_s_ = 0;
}
inline double NervousData::_internal_baroreceptoractivetime_s() const {
  return baroreceptoractivetime_s_;
}
inline double NervousData::baroreceptoractivetime_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorActiveTime_s)
  return _internal_baroreceptoractivetime_s();
}
inline void NervousData::_internal_set_baroreceptoractivetime_s(double value) {
  
  baroreceptoractivetime_s_ = value;
}
inline void NervousData::set_baroreceptoractivetime_s(double value) {
  _internal_set_baroreceptoractivetime_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorActiveTime_s)
}

// double BaroreceptorEffectivenessParameter = 7;
inline void NervousData::clear_baroreceptoreffectivenessparameter() {
  baroreceptoreffectivenessparameter_ = 0;
}
inline double NervousData::_internal_baroreceptoreffectivenessparameter() const {
  return baroreceptoreffectivenessparameter_;
}
inline double NervousData::baroreceptoreffectivenessparameter() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorEffectivenessParameter)
  return _internal_baroreceptoreffectivenessparameter();
}
inline void NervousData::_internal_set_baroreceptoreffectivenessparameter(double value) {
  
  baroreceptoreffectivenessparameter_ = value;
}
inline void NervousData::set_baroreceptoreffectivenessparameter(double value) {
  _internal_set_baroreceptoreffectivenessparameter(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorEffectivenessParameter)
}

// double BaroreceptorMeanArterialPressureBaseline_mmHg = 8;
inline void NervousData::clear_baroreceptormeanarterialpressurebaseline_mmhg() {
  baroreceptormeanarterialpressurebaseline_mmhg_ = 0;
}
inline double NervousData::_internal_baroreceptormeanarterialpressurebaseline_mmhg() const {
  return baroreceptormeanarterialpressurebaseline_mmhg_;
}
inline double NervousData::baroreceptormeanarterialpressurebaseline_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorMeanArterialPressureBaseline_mmHg)
  return _internal_baroreceptormeanarterialpressurebaseline_mmhg();
}
inline void NervousData::_internal_set_baroreceptormeanarterialpressurebaseline_mmhg(double value) {
  
  baroreceptormeanarterialpressurebaseline_mmhg_ = value;
}
inline void NervousData::set_baroreceptormeanarterialpressurebaseline_mmhg(double value) {
  _internal_set_baroreceptormeanarterialpressurebaseline_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorMeanArterialPressureBaseline_mmHg)
}

// double BaroreceptorSaturationTime_s = 9;
inline void NervousData::clear_baroreceptorsaturationtime_s() {
  baroreceptorsaturationtime_s_ = 0;
}
inline double NervousData::_internal_baroreceptorsaturationtime_s() const {
  return baroreceptorsaturationtime_s_;
}
inline double NervousData::baroreceptorsaturationtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.BaroreceptorSaturationTime_s)
  return _internal_baroreceptorsaturationtime_s();
}
inline void NervousData::_internal_set_baroreceptorsaturationtime_s(double value) {
  
  baroreceptorsaturationtime_s_ = value;
}
inline void NervousData::set_baroreceptorsaturationtime_s(double value) {
  _internal_set_baroreceptorsaturationtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.BaroreceptorSaturationTime_s)
}

// double LastMeanArterialPressure_mmHg = 10;
inline void NervousData::clear_lastmeanarterialpressure_mmhg() {
  lastmeanarterialpressure_mmhg_ = 0;
}
inline double NervousData::_internal_lastmeanarterialpressure_mmhg() const {
  return lastmeanarterialpressure_mmhg_;
}
inline double NervousData::lastmeanarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.LastMeanArterialPressure_mmHg)
  return _internal_lastmeanarterialpressure_mmhg();
}
inline void NervousData::_internal_set_lastmeanarterialpressure_mmhg(double value) {
  
  lastmeanarterialpressure_mmhg_ = value;
}
inline void NervousData::set_lastmeanarterialpressure_mmhg(double value) {
  _internal_set_lastmeanarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.LastMeanArterialPressure_mmHg)
}

// double PreviousBloodVolume_mL = 11;
inline void NervousData::clear_previousbloodvolume_ml() {
  previousbloodvolume_ml_ = 0;
}
inline double NervousData::_internal_previousbloodvolume_ml() const {
  return previousbloodvolume_ml_;
}
inline double NervousData::previousbloodvolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.PreviousBloodVolume_mL)
  return _internal_previousbloodvolume_ml();
}
inline void NervousData::_internal_set_previousbloodvolume_ml(double value) {
  
  previousbloodvolume_ml_ = value;
}
inline void NervousData::set_previousbloodvolume_ml(double value) {
  _internal_set_previousbloodvolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.PreviousBloodVolume_mL)
}

// double TotalSympatheticFraction = 12;
inline void NervousData::clear_totalsympatheticfraction() {
  totalsympatheticfraction_ = 0;
}
inline double NervousData::_internal_totalsympatheticfraction() const {
  return totalsympatheticfraction_;
}
inline double NervousData::totalsympatheticfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.NervousData.TotalSympatheticFraction)
  return _internal_totalsympatheticfraction();
}
inline void NervousData::_internal_set_totalsympatheticfraction(double value) {
  
  totalsympatheticfraction_ = value;
}
inline void NervousData::set_totalsympatheticfraction(double value) {
  _internal_set_totalsympatheticfraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.NervousData.TotalSympatheticFraction)
}

// -------------------------------------------------------------------

// RenalData

// .pulse.cdm.bind.RenalSystemData Common = 1;
inline bool RenalData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool RenalData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::RenalSystemData& RenalData::_internal_common() const {
  const ::pulse::cdm::bind::RenalSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RenalSystemData&>(
      ::pulse::cdm::bind::_RenalSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::RenalSystemData& RenalData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.Common)
  return _internal_common();
}
inline void RenalData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::RenalSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.Common)
}
inline ::pulse::cdm::bind::RenalSystemData* RenalData::release_common() {
  
  ::pulse::cdm::bind::RenalSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RenalSystemData* RenalData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.Common)
  
  ::pulse::cdm::bind::RenalSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RenalSystemData* RenalData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RenalSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::RenalSystemData* RenalData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.Common)
  return _internal_mutable_common();
}
inline void RenalData::set_allocated_common(::pulse::cdm::bind::RenalSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.Common)
}

// bool Urinating = 2;
inline void RenalData::clear_urinating() {
  urinating_ = false;
}
inline bool RenalData::_internal_urinating() const {
  return urinating_;
}
inline bool RenalData::urinating() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.Urinating)
  return _internal_urinating();
}
inline void RenalData::_internal_set_urinating(bool value) {
  
  urinating_ = value;
}
inline void RenalData::set_urinating(bool value) {
  _internal_set_urinating(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RenalData.Urinating)
}

// double LeftAfferentResistance_mmHg_s_Per_mL = 3;
inline void RenalData::clear_leftafferentresistance_mmhg_s_per_ml() {
  leftafferentresistance_mmhg_s_per_ml_ = 0;
}
inline double RenalData::_internal_leftafferentresistance_mmhg_s_per_ml() const {
  return leftafferentresistance_mmhg_s_per_ml_;
}
inline double RenalData::leftafferentresistance_mmhg_s_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.LeftAfferentResistance_mmHg_s_Per_mL)
  return _internal_leftafferentresistance_mmhg_s_per_ml();
}
inline void RenalData::_internal_set_leftafferentresistance_mmhg_s_per_ml(double value) {
  
  leftafferentresistance_mmhg_s_per_ml_ = value;
}
inline void RenalData::set_leftafferentresistance_mmhg_s_per_ml(double value) {
  _internal_set_leftafferentresistance_mmhg_s_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RenalData.LeftAfferentResistance_mmHg_s_Per_mL)
}

// double RightAfferentResistance_mmHg_s_Per_mL = 4;
inline void RenalData::clear_rightafferentresistance_mmhg_s_per_ml() {
  rightafferentresistance_mmhg_s_per_ml_ = 0;
}
inline double RenalData::_internal_rightafferentresistance_mmhg_s_per_ml() const {
  return rightafferentresistance_mmhg_s_per_ml_;
}
inline double RenalData::rightafferentresistance_mmhg_s_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.RightAfferentResistance_mmHg_s_Per_mL)
  return _internal_rightafferentresistance_mmhg_s_per_ml();
}
inline void RenalData::_internal_set_rightafferentresistance_mmhg_s_per_ml(double value) {
  
  rightafferentresistance_mmhg_s_per_ml_ = value;
}
inline void RenalData::set_rightafferentresistance_mmhg_s_per_ml(double value) {
  _internal_set_rightafferentresistance_mmhg_s_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RenalData.RightAfferentResistance_mmHg_s_Per_mL)
}

// double LeftSodiumFlowSetPoint_mg_Per_s = 5;
inline void RenalData::clear_leftsodiumflowsetpoint_mg_per_s() {
  leftsodiumflowsetpoint_mg_per_s_ = 0;
}
inline double RenalData::_internal_leftsodiumflowsetpoint_mg_per_s() const {
  return leftsodiumflowsetpoint_mg_per_s_;
}
inline double RenalData::leftsodiumflowsetpoint_mg_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.LeftSodiumFlowSetPoint_mg_Per_s)
  return _internal_leftsodiumflowsetpoint_mg_per_s();
}
inline void RenalData::_internal_set_leftsodiumflowsetpoint_mg_per_s(double value) {
  
  leftsodiumflowsetpoint_mg_per_s_ = value;
}
inline void RenalData::set_leftsodiumflowsetpoint_mg_per_s(double value) {
  _internal_set_leftsodiumflowsetpoint_mg_per_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RenalData.LeftSodiumFlowSetPoint_mg_Per_s)
}

// double RightSodiumFlowSetPoint_mg_Per_s = 6;
inline void RenalData::clear_rightsodiumflowsetpoint_mg_per_s() {
  rightsodiumflowsetpoint_mg_per_s_ = 0;
}
inline double RenalData::_internal_rightsodiumflowsetpoint_mg_per_s() const {
  return rightsodiumflowsetpoint_mg_per_s_;
}
inline double RenalData::rightsodiumflowsetpoint_mg_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.RightSodiumFlowSetPoint_mg_Per_s)
  return _internal_rightsodiumflowsetpoint_mg_per_s();
}
inline void RenalData::_internal_set_rightsodiumflowsetpoint_mg_per_s(double value) {
  
  rightsodiumflowsetpoint_mg_per_s_ = value;
}
inline void RenalData::set_rightsodiumflowsetpoint_mg_per_s(double value) {
  _internal_set_rightsodiumflowsetpoint_mg_per_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RenalData.RightSodiumFlowSetPoint_mg_Per_s)
}

// .pulse.cdm.bind.RunningAverageData UrineProductionRate_mL_Per_min = 7;
inline bool RenalData::_internal_has_urineproductionrate_ml_per_min() const {
  return this != internal_default_instance() && urineproductionrate_ml_per_min_ != nullptr;
}
inline bool RenalData::has_urineproductionrate_ml_per_min() const {
  return _internal_has_urineproductionrate_ml_per_min();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_urineproductionrate_ml_per_min() const {
  const ::pulse::cdm::bind::RunningAverageData* p = urineproductionrate_ml_per_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::urineproductionrate_ml_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.UrineProductionRate_mL_Per_min)
  return _internal_urineproductionrate_ml_per_min();
}
inline void RenalData::unsafe_arena_set_allocated_urineproductionrate_ml_per_min(
    ::pulse::cdm::bind::RunningAverageData* urineproductionrate_ml_per_min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate_ml_per_min_);
  }
  urineproductionrate_ml_per_min_ = urineproductionrate_ml_per_min;
  if (urineproductionrate_ml_per_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.UrineProductionRate_mL_Per_min)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_urineproductionrate_ml_per_min() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = urineproductionrate_ml_per_min_;
  urineproductionrate_ml_per_min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_urineproductionrate_ml_per_min() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.UrineProductionRate_mL_Per_min)
  
  ::pulse::cdm::bind::RunningAverageData* temp = urineproductionrate_ml_per_min_;
  urineproductionrate_ml_per_min_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_urineproductionrate_ml_per_min() {
  
  if (urineproductionrate_ml_per_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    urineproductionrate_ml_per_min_ = p;
  }
  return urineproductionrate_ml_per_min_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_urineproductionrate_ml_per_min() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.UrineProductionRate_mL_Per_min)
  return _internal_mutable_urineproductionrate_ml_per_min();
}
inline void RenalData::set_allocated_urineproductionrate_ml_per_min(::pulse::cdm::bind::RunningAverageData* urineproductionrate_ml_per_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate_ml_per_min_);
  }
  if (urineproductionrate_ml_per_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate_ml_per_min)->GetArena();
    if (message_arena != submessage_arena) {
      urineproductionrate_ml_per_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineproductionrate_ml_per_min, submessage_arena);
    }
    
  } else {
    
  }
  urineproductionrate_ml_per_min_ = urineproductionrate_ml_per_min;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.UrineProductionRate_mL_Per_min)
}

// .pulse.cdm.bind.RunningAverageData UrineOsmolarity_mOsm_Per_L = 8;
inline bool RenalData::_internal_has_urineosmolarity_mosm_per_l() const {
  return this != internal_default_instance() && urineosmolarity_mosm_per_l_ != nullptr;
}
inline bool RenalData::has_urineosmolarity_mosm_per_l() const {
  return _internal_has_urineosmolarity_mosm_per_l();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_urineosmolarity_mosm_per_l() const {
  const ::pulse::cdm::bind::RunningAverageData* p = urineosmolarity_mosm_per_l_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::urineosmolarity_mosm_per_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.UrineOsmolarity_mOsm_Per_L)
  return _internal_urineosmolarity_mosm_per_l();
}
inline void RenalData::unsafe_arena_set_allocated_urineosmolarity_mosm_per_l(
    ::pulse::cdm::bind::RunningAverageData* urineosmolarity_mosm_per_l) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity_mosm_per_l_);
  }
  urineosmolarity_mosm_per_l_ = urineosmolarity_mosm_per_l;
  if (urineosmolarity_mosm_per_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.UrineOsmolarity_mOsm_Per_L)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_urineosmolarity_mosm_per_l() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = urineosmolarity_mosm_per_l_;
  urineosmolarity_mosm_per_l_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_urineosmolarity_mosm_per_l() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.UrineOsmolarity_mOsm_Per_L)
  
  ::pulse::cdm::bind::RunningAverageData* temp = urineosmolarity_mosm_per_l_;
  urineosmolarity_mosm_per_l_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_urineosmolarity_mosm_per_l() {
  
  if (urineosmolarity_mosm_per_l_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    urineosmolarity_mosm_per_l_ = p;
  }
  return urineosmolarity_mosm_per_l_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_urineosmolarity_mosm_per_l() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.UrineOsmolarity_mOsm_Per_L)
  return _internal_mutable_urineosmolarity_mosm_per_l();
}
inline void RenalData::set_allocated_urineosmolarity_mosm_per_l(::pulse::cdm::bind::RunningAverageData* urineosmolarity_mosm_per_l) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity_mosm_per_l_);
  }
  if (urineosmolarity_mosm_per_l) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity_mosm_per_l)->GetArena();
    if (message_arena != submessage_arena) {
      urineosmolarity_mosm_per_l = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineosmolarity_mosm_per_l, submessage_arena);
    }
    
  } else {
    
  }
  urineosmolarity_mosm_per_l_ = urineosmolarity_mosm_per_l;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.UrineOsmolarity_mOsm_Per_L)
}

// .pulse.cdm.bind.RunningAverageData SodiumConcentration_mg_Per_mL = 9;
inline bool RenalData::_internal_has_sodiumconcentration_mg_per_ml() const {
  return this != internal_default_instance() && sodiumconcentration_mg_per_ml_ != nullptr;
}
inline bool RenalData::has_sodiumconcentration_mg_per_ml() const {
  return _internal_has_sodiumconcentration_mg_per_ml();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_sodiumconcentration_mg_per_ml() const {
  const ::pulse::cdm::bind::RunningAverageData* p = sodiumconcentration_mg_per_ml_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::sodiumconcentration_mg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.SodiumConcentration_mg_Per_mL)
  return _internal_sodiumconcentration_mg_per_ml();
}
inline void RenalData::unsafe_arena_set_allocated_sodiumconcentration_mg_per_ml(
    ::pulse::cdm::bind::RunningAverageData* sodiumconcentration_mg_per_ml) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumconcentration_mg_per_ml_);
  }
  sodiumconcentration_mg_per_ml_ = sodiumconcentration_mg_per_ml;
  if (sodiumconcentration_mg_per_ml) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.SodiumConcentration_mg_Per_mL)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_sodiumconcentration_mg_per_ml() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = sodiumconcentration_mg_per_ml_;
  sodiumconcentration_mg_per_ml_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_sodiumconcentration_mg_per_ml() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.SodiumConcentration_mg_Per_mL)
  
  ::pulse::cdm::bind::RunningAverageData* temp = sodiumconcentration_mg_per_ml_;
  sodiumconcentration_mg_per_ml_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_sodiumconcentration_mg_per_ml() {
  
  if (sodiumconcentration_mg_per_ml_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    sodiumconcentration_mg_per_ml_ = p;
  }
  return sodiumconcentration_mg_per_ml_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_sodiumconcentration_mg_per_ml() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.SodiumConcentration_mg_Per_mL)
  return _internal_mutable_sodiumconcentration_mg_per_ml();
}
inline void RenalData::set_allocated_sodiumconcentration_mg_per_ml(::pulse::cdm::bind::RunningAverageData* sodiumconcentration_mg_per_ml) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumconcentration_mg_per_ml_);
  }
  if (sodiumconcentration_mg_per_ml) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumconcentration_mg_per_ml)->GetArena();
    if (message_arena != submessage_arena) {
      sodiumconcentration_mg_per_ml = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sodiumconcentration_mg_per_ml, submessage_arena);
    }
    
  } else {
    
  }
  sodiumconcentration_mg_per_ml_ = sodiumconcentration_mg_per_ml;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.SodiumConcentration_mg_Per_mL)
}

// .pulse.cdm.bind.RunningAverageData SodiumExcretionRate_mg_Per_min = 10;
inline bool RenalData::_internal_has_sodiumexcretionrate_mg_per_min() const {
  return this != internal_default_instance() && sodiumexcretionrate_mg_per_min_ != nullptr;
}
inline bool RenalData::has_sodiumexcretionrate_mg_per_min() const {
  return _internal_has_sodiumexcretionrate_mg_per_min();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_sodiumexcretionrate_mg_per_min() const {
  const ::pulse::cdm::bind::RunningAverageData* p = sodiumexcretionrate_mg_per_min_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::sodiumexcretionrate_mg_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.SodiumExcretionRate_mg_Per_min)
  return _internal_sodiumexcretionrate_mg_per_min();
}
inline void RenalData::unsafe_arena_set_allocated_sodiumexcretionrate_mg_per_min(
    ::pulse::cdm::bind::RunningAverageData* sodiumexcretionrate_mg_per_min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumexcretionrate_mg_per_min_);
  }
  sodiumexcretionrate_mg_per_min_ = sodiumexcretionrate_mg_per_min;
  if (sodiumexcretionrate_mg_per_min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.SodiumExcretionRate_mg_Per_min)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_sodiumexcretionrate_mg_per_min() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = sodiumexcretionrate_mg_per_min_;
  sodiumexcretionrate_mg_per_min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_sodiumexcretionrate_mg_per_min() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.SodiumExcretionRate_mg_Per_min)
  
  ::pulse::cdm::bind::RunningAverageData* temp = sodiumexcretionrate_mg_per_min_;
  sodiumexcretionrate_mg_per_min_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_sodiumexcretionrate_mg_per_min() {
  
  if (sodiumexcretionrate_mg_per_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    sodiumexcretionrate_mg_per_min_ = p;
  }
  return sodiumexcretionrate_mg_per_min_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_sodiumexcretionrate_mg_per_min() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.SodiumExcretionRate_mg_Per_min)
  return _internal_mutable_sodiumexcretionrate_mg_per_min();
}
inline void RenalData::set_allocated_sodiumexcretionrate_mg_per_min(::pulse::cdm::bind::RunningAverageData* sodiumexcretionrate_mg_per_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumexcretionrate_mg_per_min_);
  }
  if (sodiumexcretionrate_mg_per_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodiumexcretionrate_mg_per_min)->GetArena();
    if (message_arena != submessage_arena) {
      sodiumexcretionrate_mg_per_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sodiumexcretionrate_mg_per_min, submessage_arena);
    }
    
  } else {
    
  }
  sodiumexcretionrate_mg_per_min_ = sodiumexcretionrate_mg_per_min;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.SodiumExcretionRate_mg_Per_min)
}

// .pulse.cdm.bind.RunningAverageData LeftSodiumFlow_mg_Per_s = 11;
inline bool RenalData::_internal_has_leftsodiumflow_mg_per_s() const {
  return this != internal_default_instance() && leftsodiumflow_mg_per_s_ != nullptr;
}
inline bool RenalData::has_leftsodiumflow_mg_per_s() const {
  return _internal_has_leftsodiumflow_mg_per_s();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_leftsodiumflow_mg_per_s() const {
  const ::pulse::cdm::bind::RunningAverageData* p = leftsodiumflow_mg_per_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::leftsodiumflow_mg_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.LeftSodiumFlow_mg_Per_s)
  return _internal_leftsodiumflow_mg_per_s();
}
inline void RenalData::unsafe_arena_set_allocated_leftsodiumflow_mg_per_s(
    ::pulse::cdm::bind::RunningAverageData* leftsodiumflow_mg_per_s) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftsodiumflow_mg_per_s_);
  }
  leftsodiumflow_mg_per_s_ = leftsodiumflow_mg_per_s;
  if (leftsodiumflow_mg_per_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.LeftSodiumFlow_mg_Per_s)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_leftsodiumflow_mg_per_s() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = leftsodiumflow_mg_per_s_;
  leftsodiumflow_mg_per_s_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_leftsodiumflow_mg_per_s() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.LeftSodiumFlow_mg_Per_s)
  
  ::pulse::cdm::bind::RunningAverageData* temp = leftsodiumflow_mg_per_s_;
  leftsodiumflow_mg_per_s_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_leftsodiumflow_mg_per_s() {
  
  if (leftsodiumflow_mg_per_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    leftsodiumflow_mg_per_s_ = p;
  }
  return leftsodiumflow_mg_per_s_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_leftsodiumflow_mg_per_s() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.LeftSodiumFlow_mg_Per_s)
  return _internal_mutable_leftsodiumflow_mg_per_s();
}
inline void RenalData::set_allocated_leftsodiumflow_mg_per_s(::pulse::cdm::bind::RunningAverageData* leftsodiumflow_mg_per_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftsodiumflow_mg_per_s_);
  }
  if (leftsodiumflow_mg_per_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftsodiumflow_mg_per_s)->GetArena();
    if (message_arena != submessage_arena) {
      leftsodiumflow_mg_per_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftsodiumflow_mg_per_s, submessage_arena);
    }
    
  } else {
    
  }
  leftsodiumflow_mg_per_s_ = leftsodiumflow_mg_per_s;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.LeftSodiumFlow_mg_Per_s)
}

// .pulse.cdm.bind.RunningAverageData RightSodiumFlow_mg_Per_s = 12;
inline bool RenalData::_internal_has_rightsodiumflow_mg_per_s() const {
  return this != internal_default_instance() && rightsodiumflow_mg_per_s_ != nullptr;
}
inline bool RenalData::has_rightsodiumflow_mg_per_s() const {
  return _internal_has_rightsodiumflow_mg_per_s();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_rightsodiumflow_mg_per_s() const {
  const ::pulse::cdm::bind::RunningAverageData* p = rightsodiumflow_mg_per_s_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::rightsodiumflow_mg_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.RightSodiumFlow_mg_Per_s)
  return _internal_rightsodiumflow_mg_per_s();
}
inline void RenalData::unsafe_arena_set_allocated_rightsodiumflow_mg_per_s(
    ::pulse::cdm::bind::RunningAverageData* rightsodiumflow_mg_per_s) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightsodiumflow_mg_per_s_);
  }
  rightsodiumflow_mg_per_s_ = rightsodiumflow_mg_per_s;
  if (rightsodiumflow_mg_per_s) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.RightSodiumFlow_mg_Per_s)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_rightsodiumflow_mg_per_s() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = rightsodiumflow_mg_per_s_;
  rightsodiumflow_mg_per_s_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_rightsodiumflow_mg_per_s() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.RightSodiumFlow_mg_Per_s)
  
  ::pulse::cdm::bind::RunningAverageData* temp = rightsodiumflow_mg_per_s_;
  rightsodiumflow_mg_per_s_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_rightsodiumflow_mg_per_s() {
  
  if (rightsodiumflow_mg_per_s_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    rightsodiumflow_mg_per_s_ = p;
  }
  return rightsodiumflow_mg_per_s_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_rightsodiumflow_mg_per_s() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.RightSodiumFlow_mg_Per_s)
  return _internal_mutable_rightsodiumflow_mg_per_s();
}
inline void RenalData::set_allocated_rightsodiumflow_mg_per_s(::pulse::cdm::bind::RunningAverageData* rightsodiumflow_mg_per_s) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightsodiumflow_mg_per_s_);
  }
  if (rightsodiumflow_mg_per_s) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightsodiumflow_mg_per_s)->GetArena();
    if (message_arena != submessage_arena) {
      rightsodiumflow_mg_per_s = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightsodiumflow_mg_per_s, submessage_arena);
    }
    
  } else {
    
  }
  rightsodiumflow_mg_per_s_ = rightsodiumflow_mg_per_s;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.RightSodiumFlow_mg_Per_s)
}

// .pulse.cdm.bind.RunningAverageData LeftRenalArterialPressure_mmHg = 13;
inline bool RenalData::_internal_has_leftrenalarterialpressure_mmhg() const {
  return this != internal_default_instance() && leftrenalarterialpressure_mmhg_ != nullptr;
}
inline bool RenalData::has_leftrenalarterialpressure_mmhg() const {
  return _internal_has_leftrenalarterialpressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_leftrenalarterialpressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = leftrenalarterialpressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::leftrenalarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.LeftRenalArterialPressure_mmHg)
  return _internal_leftrenalarterialpressure_mmhg();
}
inline void RenalData::unsafe_arena_set_allocated_leftrenalarterialpressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* leftrenalarterialpressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftrenalarterialpressure_mmhg_);
  }
  leftrenalarterialpressure_mmhg_ = leftrenalarterialpressure_mmhg;
  if (leftrenalarterialpressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.LeftRenalArterialPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_leftrenalarterialpressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = leftrenalarterialpressure_mmhg_;
  leftrenalarterialpressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_leftrenalarterialpressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.LeftRenalArterialPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = leftrenalarterialpressure_mmhg_;
  leftrenalarterialpressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_leftrenalarterialpressure_mmhg() {
  
  if (leftrenalarterialpressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    leftrenalarterialpressure_mmhg_ = p;
  }
  return leftrenalarterialpressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_leftrenalarterialpressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.LeftRenalArterialPressure_mmHg)
  return _internal_mutable_leftrenalarterialpressure_mmhg();
}
inline void RenalData::set_allocated_leftrenalarterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* leftrenalarterialpressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftrenalarterialpressure_mmhg_);
  }
  if (leftrenalarterialpressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftrenalarterialpressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      leftrenalarterialpressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftrenalarterialpressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  leftrenalarterialpressure_mmhg_ = leftrenalarterialpressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.LeftRenalArterialPressure_mmHg)
}

// .pulse.cdm.bind.RunningAverageData RightRenalArterialPressure_mmHg = 14;
inline bool RenalData::_internal_has_rightrenalarterialpressure_mmhg() const {
  return this != internal_default_instance() && rightrenalarterialpressure_mmhg_ != nullptr;
}
inline bool RenalData::has_rightrenalarterialpressure_mmhg() const {
  return _internal_has_rightrenalarterialpressure_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::_internal_rightrenalarterialpressure_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = rightrenalarterialpressure_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RenalData::rightrenalarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RenalData.RightRenalArterialPressure_mmHg)
  return _internal_rightrenalarterialpressure_mmhg();
}
inline void RenalData::unsafe_arena_set_allocated_rightrenalarterialpressure_mmhg(
    ::pulse::cdm::bind::RunningAverageData* rightrenalarterialpressure_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightrenalarterialpressure_mmhg_);
  }
  rightrenalarterialpressure_mmhg_ = rightrenalarterialpressure_mmhg;
  if (rightrenalarterialpressure_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RenalData.RightRenalArterialPressure_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::release_rightrenalarterialpressure_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = rightrenalarterialpressure_mmhg_;
  rightrenalarterialpressure_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::unsafe_arena_release_rightrenalarterialpressure_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RenalData.RightRenalArterialPressure_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = rightrenalarterialpressure_mmhg_;
  rightrenalarterialpressure_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::_internal_mutable_rightrenalarterialpressure_mmhg() {
  
  if (rightrenalarterialpressure_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    rightrenalarterialpressure_mmhg_ = p;
  }
  return rightrenalarterialpressure_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* RenalData::mutable_rightrenalarterialpressure_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RenalData.RightRenalArterialPressure_mmHg)
  return _internal_mutable_rightrenalarterialpressure_mmhg();
}
inline void RenalData::set_allocated_rightrenalarterialpressure_mmhg(::pulse::cdm::bind::RunningAverageData* rightrenalarterialpressure_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightrenalarterialpressure_mmhg_);
  }
  if (rightrenalarterialpressure_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightrenalarterialpressure_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      rightrenalarterialpressure_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightrenalarterialpressure_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  rightrenalarterialpressure_mmhg_ = rightrenalarterialpressure_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RenalData.RightRenalArterialPressure_mmHg)
}

// -------------------------------------------------------------------

// RespiratoryData

// .pulse.cdm.bind.RespiratorySystemData Common = 1;
inline bool RespiratoryData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool RespiratoryData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::RespiratorySystemData& RespiratoryData::_internal_common() const {
  const ::pulse::cdm::bind::RespiratorySystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RespiratorySystemData&>(
      ::pulse::cdm::bind::_RespiratorySystemData_default_instance_);
}
inline const ::pulse::cdm::bind::RespiratorySystemData& RespiratoryData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.Common)
  return _internal_common();
}
inline void RespiratoryData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::RespiratorySystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RespiratoryData.Common)
}
inline ::pulse::cdm::bind::RespiratorySystemData* RespiratoryData::release_common() {
  
  ::pulse::cdm::bind::RespiratorySystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RespiratorySystemData* RespiratoryData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RespiratoryData.Common)
  
  ::pulse::cdm::bind::RespiratorySystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RespiratorySystemData* RespiratoryData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RespiratorySystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::RespiratorySystemData* RespiratoryData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RespiratoryData.Common)
  return _internal_mutable_common();
}
inline void RespiratoryData::set_allocated_common(::pulse::cdm::bind::RespiratorySystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RespiratoryData.Common)
}

// bool BreathingCycle = 2;
inline void RespiratoryData::clear_breathingcycle() {
  breathingcycle_ = false;
}
inline bool RespiratoryData::_internal_breathingcycle() const {
  return breathingcycle_;
}
inline bool RespiratoryData::breathingcycle() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BreathingCycle)
  return _internal_breathingcycle();
}
inline void RespiratoryData::_internal_set_breathingcycle(bool value) {
  
  breathingcycle_ = value;
}
inline void RespiratoryData::set_breathingcycle(bool value) {
  _internal_set_breathingcycle(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BreathingCycle)
}

// bool NotBreathing = 3;
inline void RespiratoryData::clear_notbreathing() {
  notbreathing_ = false;
}
inline bool RespiratoryData::_internal_notbreathing() const {
  return notbreathing_;
}
inline bool RespiratoryData::notbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.NotBreathing)
  return _internal_notbreathing();
}
inline void RespiratoryData::_internal_set_notbreathing(bool value) {
  
  notbreathing_ = value;
}
inline void RespiratoryData::set_notbreathing(bool value) {
  _internal_set_notbreathing(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.NotBreathing)
}

// double TopBreathTotalVolume_L = 4;
inline void RespiratoryData::clear_topbreathtotalvolume_l() {
  topbreathtotalvolume_l_ = 0;
}
inline double RespiratoryData::_internal_topbreathtotalvolume_l() const {
  return topbreathtotalvolume_l_;
}
inline double RespiratoryData::topbreathtotalvolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathTotalVolume_L)
  return _internal_topbreathtotalvolume_l();
}
inline void RespiratoryData::_internal_set_topbreathtotalvolume_l(double value) {
  
  topbreathtotalvolume_l_ = value;
}
inline void RespiratoryData::set_topbreathtotalvolume_l(double value) {
  _internal_set_topbreathtotalvolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathTotalVolume_L)
}

// double TopBreathAlveoliVolume_L = 5;
inline void RespiratoryData::clear_topbreathalveolivolume_l() {
  topbreathalveolivolume_l_ = 0;
}
inline double RespiratoryData::_internal_topbreathalveolivolume_l() const {
  return topbreathalveolivolume_l_;
}
inline double RespiratoryData::topbreathalveolivolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathAlveoliVolume_L)
  return _internal_topbreathalveolivolume_l();
}
inline void RespiratoryData::_internal_set_topbreathalveolivolume_l(double value) {
  
  topbreathalveolivolume_l_ = value;
}
inline void RespiratoryData::set_topbreathalveolivolume_l(double value) {
  _internal_set_topbreathalveolivolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathAlveoliVolume_L)
}

// double TopBreathPleuralVolume_L = 6;
inline void RespiratoryData::clear_topbreathpleuralvolume_l() {
  topbreathpleuralvolume_l_ = 0;
}
inline double RespiratoryData::_internal_topbreathpleuralvolume_l() const {
  return topbreathpleuralvolume_l_;
}
inline double RespiratoryData::topbreathpleuralvolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathPleuralVolume_L)
  return _internal_topbreathpleuralvolume_l();
}
inline void RespiratoryData::_internal_set_topbreathpleuralvolume_l(double value) {
  
  topbreathpleuralvolume_l_ = value;
}
inline void RespiratoryData::set_topbreathpleuralvolume_l(double value) {
  _internal_set_topbreathpleuralvolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathPleuralVolume_L)
}

// double TopBreathAlveoliPressure_cmH2O = 7;
inline void RespiratoryData::clear_topbreathalveolipressure_cmh2o() {
  topbreathalveolipressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_topbreathalveolipressure_cmh2o() const {
  return topbreathalveolipressure_cmh2o_;
}
inline double RespiratoryData::topbreathalveolipressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathAlveoliPressure_cmH2O)
  return _internal_topbreathalveolipressure_cmh2o();
}
inline void RespiratoryData::_internal_set_topbreathalveolipressure_cmh2o(double value) {
  
  topbreathalveolipressure_cmh2o_ = value;
}
inline void RespiratoryData::set_topbreathalveolipressure_cmh2o(double value) {
  _internal_set_topbreathalveolipressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathAlveoliPressure_cmH2O)
}

// double TopBreathDriverPressure_cmH2O = 8;
inline void RespiratoryData::clear_topbreathdriverpressure_cmh2o() {
  topbreathdriverpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_topbreathdriverpressure_cmh2o() const {
  return topbreathdriverpressure_cmh2o_;
}
inline double RespiratoryData::topbreathdriverpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathDriverPressure_cmH2O)
  return _internal_topbreathdriverpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_topbreathdriverpressure_cmh2o(double value) {
  
  topbreathdriverpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_topbreathdriverpressure_cmh2o(double value) {
  _internal_set_topbreathdriverpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathDriverPressure_cmH2O)
}

// double TopBreathPleuralPressure_cmH2O = 9;
inline void RespiratoryData::clear_topbreathpleuralpressure_cmh2o() {
  topbreathpleuralpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_topbreathpleuralpressure_cmh2o() const {
  return topbreathpleuralpressure_cmh2o_;
}
inline double RespiratoryData::topbreathpleuralpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathPleuralPressure_cmH2O)
  return _internal_topbreathpleuralpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_topbreathpleuralpressure_cmh2o(double value) {
  
  topbreathpleuralpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_topbreathpleuralpressure_cmh2o(double value) {
  _internal_set_topbreathpleuralpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathPleuralPressure_cmH2O)
}

// double LastCardiacCycleBloodPH = 10;
inline void RespiratoryData::clear_lastcardiaccyclebloodph() {
  lastcardiaccyclebloodph_ = 0;
}
inline double RespiratoryData::_internal_lastcardiaccyclebloodph() const {
  return lastcardiaccyclebloodph_;
}
inline double RespiratoryData::lastcardiaccyclebloodph() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.LastCardiacCycleBloodPH)
  return _internal_lastcardiaccyclebloodph();
}
inline void RespiratoryData::_internal_set_lastcardiaccyclebloodph(double value) {
  
  lastcardiaccyclebloodph_ = value;
}
inline void RespiratoryData::set_lastcardiaccyclebloodph(double value) {
  _internal_set_lastcardiaccyclebloodph(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.LastCardiacCycleBloodPH)
}

// double TopCarinaO2 = 11;
inline void RespiratoryData::clear_topcarinao2() {
  topcarinao2_ = 0;
}
inline double RespiratoryData::_internal_topcarinao2() const {
  return topcarinao2_;
}
inline double RespiratoryData::topcarinao2() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopCarinaO2)
  return _internal_topcarinao2();
}
inline void RespiratoryData::_internal_set_topcarinao2(double value) {
  
  topcarinao2_ = value;
}
inline void RespiratoryData::set_topcarinao2(double value) {
  _internal_set_topcarinao2(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopCarinaO2)
}

// double TopBreathElapsedTime_min = 12;
inline void RespiratoryData::clear_topbreathelapsedtime_min() {
  topbreathelapsedtime_min_ = 0;
}
inline double RespiratoryData::_internal_topbreathelapsedtime_min() const {
  return topbreathelapsedtime_min_;
}
inline double RespiratoryData::topbreathelapsedtime_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.TopBreathElapsedTime_min)
  return _internal_topbreathelapsedtime_min();
}
inline void RespiratoryData::_internal_set_topbreathelapsedtime_min(double value) {
  
  topbreathelapsedtime_min_ = value;
}
inline void RespiratoryData::set_topbreathelapsedtime_min(double value) {
  _internal_set_topbreathelapsedtime_min(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.TopBreathElapsedTime_min)
}

// double BottomBreathElapsedTime_min = 13;
inline void RespiratoryData::clear_bottombreathelapsedtime_min() {
  bottombreathelapsedtime_min_ = 0;
}
inline double RespiratoryData::_internal_bottombreathelapsedtime_min() const {
  return bottombreathelapsedtime_min_;
}
inline double RespiratoryData::bottombreathelapsedtime_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathElapsedTime_min)
  return _internal_bottombreathelapsedtime_min();
}
inline void RespiratoryData::_internal_set_bottombreathelapsedtime_min(double value) {
  
  bottombreathelapsedtime_min_ = value;
}
inline void RespiratoryData::set_bottombreathelapsedtime_min(double value) {
  _internal_set_bottombreathelapsedtime_min(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathElapsedTime_min)
}

// double BottomBreathTotalVolume_L = 14;
inline void RespiratoryData::clear_bottombreathtotalvolume_l() {
  bottombreathtotalvolume_l_ = 0;
}
inline double RespiratoryData::_internal_bottombreathtotalvolume_l() const {
  return bottombreathtotalvolume_l_;
}
inline double RespiratoryData::bottombreathtotalvolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathTotalVolume_L)
  return _internal_bottombreathtotalvolume_l();
}
inline void RespiratoryData::_internal_set_bottombreathtotalvolume_l(double value) {
  
  bottombreathtotalvolume_l_ = value;
}
inline void RespiratoryData::set_bottombreathtotalvolume_l(double value) {
  _internal_set_bottombreathtotalvolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathTotalVolume_L)
}

// double BottomBreathAlveoliVolume_L = 15;
inline void RespiratoryData::clear_bottombreathalveolivolume_l() {
  bottombreathalveolivolume_l_ = 0;
}
inline double RespiratoryData::_internal_bottombreathalveolivolume_l() const {
  return bottombreathalveolivolume_l_;
}
inline double RespiratoryData::bottombreathalveolivolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathAlveoliVolume_L)
  return _internal_bottombreathalveolivolume_l();
}
inline void RespiratoryData::_internal_set_bottombreathalveolivolume_l(double value) {
  
  bottombreathalveolivolume_l_ = value;
}
inline void RespiratoryData::set_bottombreathalveolivolume_l(double value) {
  _internal_set_bottombreathalveolivolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathAlveoliVolume_L)
}

// double BottomBreathPleuralVolume_L = 16;
inline void RespiratoryData::clear_bottombreathpleuralvolume_l() {
  bottombreathpleuralvolume_l_ = 0;
}
inline double RespiratoryData::_internal_bottombreathpleuralvolume_l() const {
  return bottombreathpleuralvolume_l_;
}
inline double RespiratoryData::bottombreathpleuralvolume_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathPleuralVolume_L)
  return _internal_bottombreathpleuralvolume_l();
}
inline void RespiratoryData::_internal_set_bottombreathpleuralvolume_l(double value) {
  
  bottombreathpleuralvolume_l_ = value;
}
inline void RespiratoryData::set_bottombreathpleuralvolume_l(double value) {
  _internal_set_bottombreathpleuralvolume_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathPleuralVolume_L)
}

// double BottomBreathAlveoliPressure_cmH2O = 17;
inline void RespiratoryData::clear_bottombreathalveolipressure_cmh2o() {
  bottombreathalveolipressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_bottombreathalveolipressure_cmh2o() const {
  return bottombreathalveolipressure_cmh2o_;
}
inline double RespiratoryData::bottombreathalveolipressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathAlveoliPressure_cmH2O)
  return _internal_bottombreathalveolipressure_cmh2o();
}
inline void RespiratoryData::_internal_set_bottombreathalveolipressure_cmh2o(double value) {
  
  bottombreathalveolipressure_cmh2o_ = value;
}
inline void RespiratoryData::set_bottombreathalveolipressure_cmh2o(double value) {
  _internal_set_bottombreathalveolipressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathAlveoliPressure_cmH2O)
}

// double BottomBreathDriverPressure_cmH2O = 18;
inline void RespiratoryData::clear_bottombreathdriverpressure_cmh2o() {
  bottombreathdriverpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_bottombreathdriverpressure_cmh2o() const {
  return bottombreathdriverpressure_cmh2o_;
}
inline double RespiratoryData::bottombreathdriverpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathDriverPressure_cmH2O)
  return _internal_bottombreathdriverpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_bottombreathdriverpressure_cmh2o(double value) {
  
  bottombreathdriverpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_bottombreathdriverpressure_cmh2o(double value) {
  _internal_set_bottombreathdriverpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathDriverPressure_cmH2O)
}

// double BottomBreathPleuralPressure_cmH2O = 19;
inline void RespiratoryData::clear_bottombreathpleuralpressure_cmh2o() {
  bottombreathpleuralpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_bottombreathpleuralpressure_cmh2o() const {
  return bottombreathpleuralpressure_cmh2o_;
}
inline double RespiratoryData::bottombreathpleuralpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BottomBreathPleuralPressure_cmH2O)
  return _internal_bottombreathpleuralpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_bottombreathpleuralpressure_cmh2o(double value) {
  
  bottombreathpleuralpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_bottombreathpleuralpressure_cmh2o(double value) {
  _internal_set_bottombreathpleuralpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BottomBreathPleuralPressure_cmH2O)
}

// double PeakAlveolarPressure_cmH2O = 20;
inline void RespiratoryData::clear_peakalveolarpressure_cmh2o() {
  peakalveolarpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_peakalveolarpressure_cmh2o() const {
  return peakalveolarpressure_cmh2o_;
}
inline double RespiratoryData::peakalveolarpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.PeakAlveolarPressure_cmH2O)
  return _internal_peakalveolarpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_peakalveolarpressure_cmh2o(double value) {
  
  peakalveolarpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_peakalveolarpressure_cmh2o(double value) {
  _internal_set_peakalveolarpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.PeakAlveolarPressure_cmH2O)
}

// double MaximalAlveolarPressure_cmH2O = 21;
inline void RespiratoryData::clear_maximalalveolarpressure_cmh2o() {
  maximalalveolarpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_maximalalveolarpressure_cmh2o() const {
  return maximalalveolarpressure_cmh2o_;
}
inline double RespiratoryData::maximalalveolarpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.MaximalAlveolarPressure_cmH2O)
  return _internal_maximalalveolarpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_maximalalveolarpressure_cmh2o(double value) {
  
  maximalalveolarpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_maximalalveolarpressure_cmh2o(double value) {
  _internal_set_maximalalveolarpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.MaximalAlveolarPressure_cmH2O)
}

// .pulse.cdm.bind.RunningAverageData BloodPHRunningAverage = 22;
inline bool RespiratoryData::_internal_has_bloodphrunningaverage() const {
  return this != internal_default_instance() && bloodphrunningaverage_ != nullptr;
}
inline bool RespiratoryData::has_bloodphrunningaverage() const {
  return _internal_has_bloodphrunningaverage();
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::_internal_bloodphrunningaverage() const {
  const ::pulse::cdm::bind::RunningAverageData* p = bloodphrunningaverage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::bloodphrunningaverage() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BloodPHRunningAverage)
  return _internal_bloodphrunningaverage();
}
inline void RespiratoryData::unsafe_arena_set_allocated_bloodphrunningaverage(
    ::pulse::cdm::bind::RunningAverageData* bloodphrunningaverage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodphrunningaverage_);
  }
  bloodphrunningaverage_ = bloodphrunningaverage;
  if (bloodphrunningaverage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RespiratoryData.BloodPHRunningAverage)
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::release_bloodphrunningaverage() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = bloodphrunningaverage_;
  bloodphrunningaverage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::unsafe_arena_release_bloodphrunningaverage() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RespiratoryData.BloodPHRunningAverage)
  
  ::pulse::cdm::bind::RunningAverageData* temp = bloodphrunningaverage_;
  bloodphrunningaverage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::_internal_mutable_bloodphrunningaverage() {
  
  if (bloodphrunningaverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    bloodphrunningaverage_ = p;
  }
  return bloodphrunningaverage_;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::mutable_bloodphrunningaverage() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RespiratoryData.BloodPHRunningAverage)
  return _internal_mutable_bloodphrunningaverage();
}
inline void RespiratoryData::set_allocated_bloodphrunningaverage(::pulse::cdm::bind::RunningAverageData* bloodphrunningaverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodphrunningaverage_);
  }
  if (bloodphrunningaverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodphrunningaverage)->GetArena();
    if (message_arena != submessage_arena) {
      bloodphrunningaverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodphrunningaverage, submessage_arena);
    }
    
  } else {
    
  }
  bloodphrunningaverage_ = bloodphrunningaverage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RespiratoryData.BloodPHRunningAverage)
}

// .pulse.cdm.bind.RunningAverageData MeanAirwayPressure_cmH2O = 23;
inline bool RespiratoryData::_internal_has_meanairwaypressure_cmh2o() const {
  return this != internal_default_instance() && meanairwaypressure_cmh2o_ != nullptr;
}
inline bool RespiratoryData::has_meanairwaypressure_cmh2o() const {
  return _internal_has_meanairwaypressure_cmh2o();
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::_internal_meanairwaypressure_cmh2o() const {
  const ::pulse::cdm::bind::RunningAverageData* p = meanairwaypressure_cmh2o_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::meanairwaypressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.MeanAirwayPressure_cmH2O)
  return _internal_meanairwaypressure_cmh2o();
}
inline void RespiratoryData::unsafe_arena_set_allocated_meanairwaypressure_cmh2o(
    ::pulse::cdm::bind::RunningAverageData* meanairwaypressure_cmh2o) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure_cmh2o_);
  }
  meanairwaypressure_cmh2o_ = meanairwaypressure_cmh2o;
  if (meanairwaypressure_cmh2o) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RespiratoryData.MeanAirwayPressure_cmH2O)
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::release_meanairwaypressure_cmh2o() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = meanairwaypressure_cmh2o_;
  meanairwaypressure_cmh2o_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::unsafe_arena_release_meanairwaypressure_cmh2o() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RespiratoryData.MeanAirwayPressure_cmH2O)
  
  ::pulse::cdm::bind::RunningAverageData* temp = meanairwaypressure_cmh2o_;
  meanairwaypressure_cmh2o_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::_internal_mutable_meanairwaypressure_cmh2o() {
  
  if (meanairwaypressure_cmh2o_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    meanairwaypressure_cmh2o_ = p;
  }
  return meanairwaypressure_cmh2o_;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::mutable_meanairwaypressure_cmh2o() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RespiratoryData.MeanAirwayPressure_cmH2O)
  return _internal_mutable_meanairwaypressure_cmh2o();
}
inline void RespiratoryData::set_allocated_meanairwaypressure_cmh2o(::pulse::cdm::bind::RunningAverageData* meanairwaypressure_cmh2o) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure_cmh2o_);
  }
  if (meanairwaypressure_cmh2o) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure_cmh2o)->GetArena();
    if (message_arena != submessage_arena) {
      meanairwaypressure_cmh2o = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanairwaypressure_cmh2o, submessage_arena);
    }
    
  } else {
    
  }
  meanairwaypressure_cmh2o_ = meanairwaypressure_cmh2o;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RespiratoryData.MeanAirwayPressure_cmH2O)
}

// double ArterialO2PartialPressure_mmHg = 24;
inline void RespiratoryData::clear_arterialo2partialpressure_mmhg() {
  arterialo2partialpressure_mmhg_ = 0;
}
inline double RespiratoryData::_internal_arterialo2partialpressure_mmhg() const {
  return arterialo2partialpressure_mmhg_;
}
inline double RespiratoryData::arterialo2partialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ArterialO2PartialPressure_mmHg)
  return _internal_arterialo2partialpressure_mmhg();
}
inline void RespiratoryData::_internal_set_arterialo2partialpressure_mmhg(double value) {
  
  arterialo2partialpressure_mmhg_ = value;
}
inline void RespiratoryData::set_arterialo2partialpressure_mmhg(double value) {
  _internal_set_arterialo2partialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ArterialO2PartialPressure_mmHg)
}

// double ArterialCO2PartialPressure_mmHg = 25;
inline void RespiratoryData::clear_arterialco2partialpressure_mmhg() {
  arterialco2partialpressure_mmhg_ = 0;
}
inline double RespiratoryData::_internal_arterialco2partialpressure_mmhg() const {
  return arterialco2partialpressure_mmhg_;
}
inline double RespiratoryData::arterialco2partialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ArterialCO2PartialPressure_mmHg)
  return _internal_arterialco2partialpressure_mmhg();
}
inline void RespiratoryData::_internal_set_arterialco2partialpressure_mmhg(double value) {
  
  arterialco2partialpressure_mmhg_ = value;
}
inline void RespiratoryData::set_arterialco2partialpressure_mmhg(double value) {
  _internal_set_arterialco2partialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ArterialCO2PartialPressure_mmHg)
}

// double BreathingCycleTime_s = 26;
inline void RespiratoryData::clear_breathingcycletime_s() {
  breathingcycletime_s_ = 0;
}
inline double RespiratoryData::_internal_breathingcycletime_s() const {
  return breathingcycletime_s_;
}
inline double RespiratoryData::breathingcycletime_s() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.BreathingCycleTime_s)
  return _internal_breathingcycletime_s();
}
inline void RespiratoryData::_internal_set_breathingcycletime_s(double value) {
  
  breathingcycletime_s_ = value;
}
inline void RespiratoryData::set_breathingcycletime_s(double value) {
  _internal_set_breathingcycletime_s(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.BreathingCycleTime_s)
}

// double DriverPressure_cmH2O = 27;
inline void RespiratoryData::clear_driverpressure_cmh2o() {
  driverpressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_driverpressure_cmh2o() const {
  return driverpressure_cmh2o_;
}
inline double RespiratoryData::driverpressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.DriverPressure_cmH2O)
  return _internal_driverpressure_cmh2o();
}
inline void RespiratoryData::_internal_set_driverpressure_cmh2o(double value) {
  
  driverpressure_cmh2o_ = value;
}
inline void RespiratoryData::set_driverpressure_cmh2o(double value) {
  _internal_set_driverpressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.DriverPressure_cmH2O)
}

// double ElapsedBreathingCycleTime_min = 28;
inline void RespiratoryData::clear_elapsedbreathingcycletime_min() {
  elapsedbreathingcycletime_min_ = 0;
}
inline double RespiratoryData::_internal_elapsedbreathingcycletime_min() const {
  return elapsedbreathingcycletime_min_;
}
inline double RespiratoryData::elapsedbreathingcycletime_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ElapsedBreathingCycleTime_min)
  return _internal_elapsedbreathingcycletime_min();
}
inline void RespiratoryData::_internal_set_elapsedbreathingcycletime_min(double value) {
  
  elapsedbreathingcycletime_min_ = value;
}
inline void RespiratoryData::set_elapsedbreathingcycletime_min(double value) {
  _internal_set_elapsedbreathingcycletime_min(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ElapsedBreathingCycleTime_min)
}

// double IERatioScaleFactor = 29;
inline void RespiratoryData::clear_ieratioscalefactor() {
  ieratioscalefactor_ = 0;
}
inline double RespiratoryData::_internal_ieratioscalefactor() const {
  return ieratioscalefactor_;
}
inline double RespiratoryData::ieratioscalefactor() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.IERatioScaleFactor)
  return _internal_ieratioscalefactor();
}
inline void RespiratoryData::_internal_set_ieratioscalefactor(double value) {
  
  ieratioscalefactor_ = value;
}
inline void RespiratoryData::set_ieratioscalefactor(double value) {
  _internal_set_ieratioscalefactor(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.IERatioScaleFactor)
}

// double PeakInspiratoryPressure_cmH2O = 30;
inline void RespiratoryData::clear_peakinspiratorypressure_cmh2o() {
  peakinspiratorypressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_peakinspiratorypressure_cmh2o() const {
  return peakinspiratorypressure_cmh2o_;
}
inline double RespiratoryData::peakinspiratorypressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.PeakInspiratoryPressure_cmH2O)
  return _internal_peakinspiratorypressure_cmh2o();
}
inline void RespiratoryData::_internal_set_peakinspiratorypressure_cmh2o(double value) {
  
  peakinspiratorypressure_cmh2o_ = value;
}
inline void RespiratoryData::set_peakinspiratorypressure_cmh2o(double value) {
  _internal_set_peakinspiratorypressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.PeakInspiratoryPressure_cmH2O)
}

// double PeakExpiratoryPressure_cmH2O = 31;
inline void RespiratoryData::clear_peakexpiratorypressure_cmh2o() {
  peakexpiratorypressure_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_peakexpiratorypressure_cmh2o() const {
  return peakexpiratorypressure_cmh2o_;
}
inline double RespiratoryData::peakexpiratorypressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.PeakExpiratoryPressure_cmH2O)
  return _internal_peakexpiratorypressure_cmh2o();
}
inline void RespiratoryData::_internal_set_peakexpiratorypressure_cmh2o(double value) {
  
  peakexpiratorypressure_cmh2o_ = value;
}
inline void RespiratoryData::set_peakexpiratorypressure_cmh2o(double value) {
  _internal_set_peakexpiratorypressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.PeakExpiratoryPressure_cmH2O)
}

// double PreviousTargetAlveolarVentilation_L_Per_min = 32;
inline void RespiratoryData::clear_previoustargetalveolarventilation_l_per_min() {
  previoustargetalveolarventilation_l_per_min_ = 0;
}
inline double RespiratoryData::_internal_previoustargetalveolarventilation_l_per_min() const {
  return previoustargetalveolarventilation_l_per_min_;
}
inline double RespiratoryData::previoustargetalveolarventilation_l_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.PreviousTargetAlveolarVentilation_L_Per_min)
  return _internal_previoustargetalveolarventilation_l_per_min();
}
inline void RespiratoryData::_internal_set_previoustargetalveolarventilation_l_per_min(double value) {
  
  previoustargetalveolarventilation_l_per_min_ = value;
}
inline void RespiratoryData::set_previoustargetalveolarventilation_l_per_min(double value) {
  _internal_set_previoustargetalveolarventilation_l_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.PreviousTargetAlveolarVentilation_L_Per_min)
}

// double VentilationFrequency_Per_min = 33;
inline void RespiratoryData::clear_ventilationfrequency_per_min() {
  ventilationfrequency_per_min_ = 0;
}
inline double RespiratoryData::_internal_ventilationfrequency_per_min() const {
  return ventilationfrequency_per_min_;
}
inline double RespiratoryData::ventilationfrequency_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.VentilationFrequency_Per_min)
  return _internal_ventilationfrequency_per_min();
}
inline void RespiratoryData::_internal_set_ventilationfrequency_per_min(double value) {
  
  ventilationfrequency_per_min_ = value;
}
inline void RespiratoryData::set_ventilationfrequency_per_min(double value) {
  _internal_set_ventilationfrequency_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.VentilationFrequency_Per_min)
}

// double VentilationToTidalVolumeSlope = 34;
inline void RespiratoryData::clear_ventilationtotidalvolumeslope() {
  ventilationtotidalvolumeslope_ = 0;
}
inline double RespiratoryData::_internal_ventilationtotidalvolumeslope() const {
  return ventilationtotidalvolumeslope_;
}
inline double RespiratoryData::ventilationtotidalvolumeslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.VentilationToTidalVolumeSlope)
  return _internal_ventilationtotidalvolumeslope();
}
inline void RespiratoryData::_internal_set_ventilationtotidalvolumeslope(double value) {
  
  ventilationtotidalvolumeslope_ = value;
}
inline void RespiratoryData::set_ventilationtotidalvolumeslope(double value) {
  _internal_set_ventilationtotidalvolumeslope(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.VentilationToTidalVolumeSlope)
}

// .pulse.cdm.bind.RunningAverageData ArterialO2RunningAverage_mmHg = 35;
inline bool RespiratoryData::_internal_has_arterialo2runningaverage_mmhg() const {
  return this != internal_default_instance() && arterialo2runningaverage_mmhg_ != nullptr;
}
inline bool RespiratoryData::has_arterialo2runningaverage_mmhg() const {
  return _internal_has_arterialo2runningaverage_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::_internal_arterialo2runningaverage_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = arterialo2runningaverage_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::arterialo2runningaverage_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ArterialO2RunningAverage_mmHg)
  return _internal_arterialo2runningaverage_mmhg();
}
inline void RespiratoryData::unsafe_arena_set_allocated_arterialo2runningaverage_mmhg(
    ::pulse::cdm::bind::RunningAverageData* arterialo2runningaverage_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialo2runningaverage_mmhg_);
  }
  arterialo2runningaverage_mmhg_ = arterialo2runningaverage_mmhg;
  if (arterialo2runningaverage_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RespiratoryData.ArterialO2RunningAverage_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::release_arterialo2runningaverage_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialo2runningaverage_mmhg_;
  arterialo2runningaverage_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::unsafe_arena_release_arterialo2runningaverage_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RespiratoryData.ArterialO2RunningAverage_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialo2runningaverage_mmhg_;
  arterialo2runningaverage_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::_internal_mutable_arterialo2runningaverage_mmhg() {
  
  if (arterialo2runningaverage_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    arterialo2runningaverage_mmhg_ = p;
  }
  return arterialo2runningaverage_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::mutable_arterialo2runningaverage_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RespiratoryData.ArterialO2RunningAverage_mmHg)
  return _internal_mutable_arterialo2runningaverage_mmhg();
}
inline void RespiratoryData::set_allocated_arterialo2runningaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialo2runningaverage_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialo2runningaverage_mmhg_);
  }
  if (arterialo2runningaverage_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialo2runningaverage_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      arterialo2runningaverage_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialo2runningaverage_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  arterialo2runningaverage_mmhg_ = arterialo2runningaverage_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RespiratoryData.ArterialO2RunningAverage_mmHg)
}

// .pulse.cdm.bind.RunningAverageData ArterialCO2RunningAverage_mmHg = 36;
inline bool RespiratoryData::_internal_has_arterialco2runningaverage_mmhg() const {
  return this != internal_default_instance() && arterialco2runningaverage_mmhg_ != nullptr;
}
inline bool RespiratoryData::has_arterialco2runningaverage_mmhg() const {
  return _internal_has_arterialco2runningaverage_mmhg();
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::_internal_arterialco2runningaverage_mmhg() const {
  const ::pulse::cdm::bind::RunningAverageData* p = arterialco2runningaverage_mmhg_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::RunningAverageData&>(
      ::pulse::cdm::bind::_RunningAverageData_default_instance_);
}
inline const ::pulse::cdm::bind::RunningAverageData& RespiratoryData::arterialco2runningaverage_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ArterialCO2RunningAverage_mmHg)
  return _internal_arterialco2runningaverage_mmhg();
}
inline void RespiratoryData::unsafe_arena_set_allocated_arterialco2runningaverage_mmhg(
    ::pulse::cdm::bind::RunningAverageData* arterialco2runningaverage_mmhg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialco2runningaverage_mmhg_);
  }
  arterialco2runningaverage_mmhg_ = arterialco2runningaverage_mmhg;
  if (arterialco2runningaverage_mmhg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.RespiratoryData.ArterialCO2RunningAverage_mmHg)
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::release_arterialco2runningaverage_mmhg() {
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialco2runningaverage_mmhg_;
  arterialco2runningaverage_mmhg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::unsafe_arena_release_arterialco2runningaverage_mmhg() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.RespiratoryData.ArterialCO2RunningAverage_mmHg)
  
  ::pulse::cdm::bind::RunningAverageData* temp = arterialco2runningaverage_mmhg_;
  arterialco2runningaverage_mmhg_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::_internal_mutable_arterialco2runningaverage_mmhg() {
  
  if (arterialco2runningaverage_mmhg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::RunningAverageData>(GetArena());
    arterialco2runningaverage_mmhg_ = p;
  }
  return arterialco2runningaverage_mmhg_;
}
inline ::pulse::cdm::bind::RunningAverageData* RespiratoryData::mutable_arterialco2runningaverage_mmhg() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.RespiratoryData.ArterialCO2RunningAverage_mmHg)
  return _internal_mutable_arterialco2runningaverage_mmhg();
}
inline void RespiratoryData::set_allocated_arterialco2runningaverage_mmhg(::pulse::cdm::bind::RunningAverageData* arterialco2runningaverage_mmhg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialco2runningaverage_mmhg_);
  }
  if (arterialco2runningaverage_mmhg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialco2runningaverage_mmhg)->GetArena();
    if (message_arena != submessage_arena) {
      arterialco2runningaverage_mmhg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialco2runningaverage_mmhg, submessage_arena);
    }
    
  } else {
    
  }
  arterialco2runningaverage_mmhg_ = arterialco2runningaverage_mmhg;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.RespiratoryData.ArterialCO2RunningAverage_mmHg)
}

// double ExpiratoryHoldFraction = 37;
inline void RespiratoryData::clear_expiratoryholdfraction() {
  expiratoryholdfraction_ = 0;
}
inline double RespiratoryData::_internal_expiratoryholdfraction() const {
  return expiratoryholdfraction_;
}
inline double RespiratoryData::expiratoryholdfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ExpiratoryHoldFraction)
  return _internal_expiratoryholdfraction();
}
inline void RespiratoryData::_internal_set_expiratoryholdfraction(double value) {
  
  expiratoryholdfraction_ = value;
}
inline void RespiratoryData::set_expiratoryholdfraction(double value) {
  _internal_set_expiratoryholdfraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ExpiratoryHoldFraction)
}

// double ExpiratoryReleaseFraction = 38;
inline void RespiratoryData::clear_expiratoryreleasefraction() {
  expiratoryreleasefraction_ = 0;
}
inline double RespiratoryData::_internal_expiratoryreleasefraction() const {
  return expiratoryreleasefraction_;
}
inline double RespiratoryData::expiratoryreleasefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ExpiratoryReleaseFraction)
  return _internal_expiratoryreleasefraction();
}
inline void RespiratoryData::_internal_set_expiratoryreleasefraction(double value) {
  
  expiratoryreleasefraction_ = value;
}
inline void RespiratoryData::set_expiratoryreleasefraction(double value) {
  _internal_set_expiratoryreleasefraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ExpiratoryReleaseFraction)
}

// double ExpiratoryRiseFraction = 39;
inline void RespiratoryData::clear_expiratoryrisefraction() {
  expiratoryrisefraction_ = 0;
}
inline double RespiratoryData::_internal_expiratoryrisefraction() const {
  return expiratoryrisefraction_;
}
inline double RespiratoryData::expiratoryrisefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ExpiratoryRiseFraction)
  return _internal_expiratoryrisefraction();
}
inline void RespiratoryData::_internal_set_expiratoryrisefraction(double value) {
  
  expiratoryrisefraction_ = value;
}
inline void RespiratoryData::set_expiratoryrisefraction(double value) {
  _internal_set_expiratoryrisefraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ExpiratoryRiseFraction)
}

// double InspiratoryHoldFraction = 40;
inline void RespiratoryData::clear_inspiratoryholdfraction() {
  inspiratoryholdfraction_ = 0;
}
inline double RespiratoryData::_internal_inspiratoryholdfraction() const {
  return inspiratoryholdfraction_;
}
inline double RespiratoryData::inspiratoryholdfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.InspiratoryHoldFraction)
  return _internal_inspiratoryholdfraction();
}
inline void RespiratoryData::_internal_set_inspiratoryholdfraction(double value) {
  
  inspiratoryholdfraction_ = value;
}
inline void RespiratoryData::set_inspiratoryholdfraction(double value) {
  _internal_set_inspiratoryholdfraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.InspiratoryHoldFraction)
}

// double InspiratoryReleaseFraction = 41;
inline void RespiratoryData::clear_inspiratoryreleasefraction() {
  inspiratoryreleasefraction_ = 0;
}
inline double RespiratoryData::_internal_inspiratoryreleasefraction() const {
  return inspiratoryreleasefraction_;
}
inline double RespiratoryData::inspiratoryreleasefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.InspiratoryReleaseFraction)
  return _internal_inspiratoryreleasefraction();
}
inline void RespiratoryData::_internal_set_inspiratoryreleasefraction(double value) {
  
  inspiratoryreleasefraction_ = value;
}
inline void RespiratoryData::set_inspiratoryreleasefraction(double value) {
  _internal_set_inspiratoryreleasefraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.InspiratoryReleaseFraction)
}

// double InspiratoryRiseFraction = 42;
inline void RespiratoryData::clear_inspiratoryrisefraction() {
  inspiratoryrisefraction_ = 0;
}
inline double RespiratoryData::_internal_inspiratoryrisefraction() const {
  return inspiratoryrisefraction_;
}
inline double RespiratoryData::inspiratoryrisefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.InspiratoryRiseFraction)
  return _internal_inspiratoryrisefraction();
}
inline void RespiratoryData::_internal_set_inspiratoryrisefraction(double value) {
  
  inspiratoryrisefraction_ = value;
}
inline void RespiratoryData::set_inspiratoryrisefraction(double value) {
  _internal_set_inspiratoryrisefraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.InspiratoryRiseFraction)
}

// double InspiratoryToExpiratoryPauseFraction = 43;
inline void RespiratoryData::clear_inspiratorytoexpiratorypausefraction() {
  inspiratorytoexpiratorypausefraction_ = 0;
}
inline double RespiratoryData::_internal_inspiratorytoexpiratorypausefraction() const {
  return inspiratorytoexpiratorypausefraction_;
}
inline double RespiratoryData::inspiratorytoexpiratorypausefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.InspiratoryToExpiratoryPauseFraction)
  return _internal_inspiratorytoexpiratorypausefraction();
}
inline void RespiratoryData::_internal_set_inspiratorytoexpiratorypausefraction(double value) {
  
  inspiratorytoexpiratorypausefraction_ = value;
}
inline void RespiratoryData::set_inspiratorytoexpiratorypausefraction(double value) {
  _internal_set_inspiratorytoexpiratorypausefraction(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.InspiratoryToExpiratoryPauseFraction)
}

// double LeftAlveoliDecrease_L = 44;
inline void RespiratoryData::clear_leftalveolidecrease_l() {
  leftalveolidecrease_l_ = 0;
}
inline double RespiratoryData::_internal_leftalveolidecrease_l() const {
  return leftalveolidecrease_l_;
}
inline double RespiratoryData::leftalveolidecrease_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.LeftAlveoliDecrease_L)
  return _internal_leftalveolidecrease_l();
}
inline void RespiratoryData::_internal_set_leftalveolidecrease_l(double value) {
  
  leftalveolidecrease_l_ = value;
}
inline void RespiratoryData::set_leftalveolidecrease_l(double value) {
  _internal_set_leftalveolidecrease_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.LeftAlveoliDecrease_L)
}

// double RightAlveoliDecrease_L = 45;
inline void RespiratoryData::clear_rightalveolidecrease_l() {
  rightalveolidecrease_l_ = 0;
}
inline double RespiratoryData::_internal_rightalveolidecrease_l() const {
  return rightalveolidecrease_l_;
}
inline double RespiratoryData::rightalveolidecrease_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.RightAlveoliDecrease_L)
  return _internal_rightalveolidecrease_l();
}
inline void RespiratoryData::_internal_set_rightalveolidecrease_l(double value) {
  
  rightalveolidecrease_l_ = value;
}
inline void RespiratoryData::set_rightalveolidecrease_l(double value) {
  _internal_set_rightalveolidecrease_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.RightAlveoliDecrease_L)
}

// bool ActiveConsciousRespirationCommand = 46;
inline void RespiratoryData::clear_activeconsciousrespirationcommand() {
  activeconsciousrespirationcommand_ = false;
}
inline bool RespiratoryData::_internal_activeconsciousrespirationcommand() const {
  return activeconsciousrespirationcommand_;
}
inline bool RespiratoryData::activeconsciousrespirationcommand() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.ActiveConsciousRespirationCommand)
  return _internal_activeconsciousrespirationcommand();
}
inline void RespiratoryData::_internal_set_activeconsciousrespirationcommand(bool value) {
  
  activeconsciousrespirationcommand_ = value;
}
inline void RespiratoryData::set_activeconsciousrespirationcommand(bool value) {
  _internal_set_activeconsciousrespirationcommand(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.ActiveConsciousRespirationCommand)
}

// double RespiratoryComplianceOverride_L_Per_cmH2O = 47;
inline void RespiratoryData::clear_respiratorycomplianceoverride_l_per_cmh2o() {
  respiratorycomplianceoverride_l_per_cmh2o_ = 0;
}
inline double RespiratoryData::_internal_respiratorycomplianceoverride_l_per_cmh2o() const {
  return respiratorycomplianceoverride_l_per_cmh2o_;
}
inline double RespiratoryData::respiratorycomplianceoverride_l_per_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.RespiratoryComplianceOverride_L_Per_cmH2O)
  return _internal_respiratorycomplianceoverride_l_per_cmh2o();
}
inline void RespiratoryData::_internal_set_respiratorycomplianceoverride_l_per_cmh2o(double value) {
  
  respiratorycomplianceoverride_l_per_cmh2o_ = value;
}
inline void RespiratoryData::set_respiratorycomplianceoverride_l_per_cmh2o(double value) {
  _internal_set_respiratorycomplianceoverride_l_per_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.RespiratoryComplianceOverride_L_Per_cmH2O)
}

// double RespiratoryResistanceOverride_cmH2O_s_Per_L = 48;
inline void RespiratoryData::clear_respiratoryresistanceoverride_cmh2o_s_per_l() {
  respiratoryresistanceoverride_cmh2o_s_per_l_ = 0;
}
inline double RespiratoryData::_internal_respiratoryresistanceoverride_cmh2o_s_per_l() const {
  return respiratoryresistanceoverride_cmh2o_s_per_l_;
}
inline double RespiratoryData::respiratoryresistanceoverride_cmh2o_s_per_l() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.RespiratoryData.RespiratoryResistanceOverride_cmH2O_s_Per_L)
  return _internal_respiratoryresistanceoverride_cmh2o_s_per_l();
}
inline void RespiratoryData::_internal_set_respiratoryresistanceoverride_cmh2o_s_per_l(double value) {
  
  respiratoryresistanceoverride_cmh2o_s_per_l_ = value;
}
inline void RespiratoryData::set_respiratoryresistanceoverride_cmh2o_s_per_l(double value) {
  _internal_set_respiratoryresistanceoverride_cmh2o_s_per_l(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.RespiratoryData.RespiratoryResistanceOverride_cmH2O_s_Per_L)
}

// -------------------------------------------------------------------

// TissueData

// .pulse.cdm.bind.TissueSystemData Common = 1;
inline bool TissueData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool TissueData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::TissueSystemData& TissueData::_internal_common() const {
  const ::pulse::cdm::bind::TissueSystemData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::TissueSystemData&>(
      ::pulse::cdm::bind::_TissueSystemData_default_instance_);
}
inline const ::pulse::cdm::bind::TissueSystemData& TissueData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.Common)
  return _internal_common();
}
inline void TissueData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::TissueSystemData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.TissueData.Common)
}
inline ::pulse::cdm::bind::TissueSystemData* TissueData::release_common() {
  
  ::pulse::cdm::bind::TissueSystemData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::TissueSystemData* TissueData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.TissueData.Common)
  
  ::pulse::cdm::bind::TissueSystemData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::TissueSystemData* TissueData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::TissueSystemData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::TissueSystemData* TissueData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.TissueData.Common)
  return _internal_mutable_common();
}
inline void TissueData::set_allocated_common(::pulse::cdm::bind::TissueSystemData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.TissueData.Common)
}

// double RestingTissueGlucose_g = 2;
inline void TissueData::clear_restingtissueglucose_g() {
  restingtissueglucose_g_ = 0;
}
inline double TissueData::_internal_restingtissueglucose_g() const {
  return restingtissueglucose_g_;
}
inline double TissueData::restingtissueglucose_g() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.RestingTissueGlucose_g)
  return _internal_restingtissueglucose_g();
}
inline void TissueData::_internal_set_restingtissueglucose_g(double value) {
  
  restingtissueglucose_g_ = value;
}
inline void TissueData::set_restingtissueglucose_g(double value) {
  _internal_set_restingtissueglucose_g(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.TissueData.RestingTissueGlucose_g)
}

// double RestingBloodGlucose_mg_Per_mL = 3;
inline void TissueData::clear_restingbloodglucose_mg_per_ml() {
  restingbloodglucose_mg_per_ml_ = 0;
}
inline double TissueData::_internal_restingbloodglucose_mg_per_ml() const {
  return restingbloodglucose_mg_per_ml_;
}
inline double TissueData::restingbloodglucose_mg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.RestingBloodGlucose_mg_Per_mL)
  return _internal_restingbloodglucose_mg_per_ml();
}
inline void TissueData::_internal_set_restingbloodglucose_mg_per_ml(double value) {
  
  restingbloodglucose_mg_per_ml_ = value;
}
inline void TissueData::set_restingbloodglucose_mg_per_ml(double value) {
  _internal_set_restingbloodglucose_mg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.TissueData.RestingBloodGlucose_mg_Per_mL)
}

// double RestingBloodLipid_mg_Per_mL = 4;
inline void TissueData::clear_restingbloodlipid_mg_per_ml() {
  restingbloodlipid_mg_per_ml_ = 0;
}
inline double TissueData::_internal_restingbloodlipid_mg_per_ml() const {
  return restingbloodlipid_mg_per_ml_;
}
inline double TissueData::restingbloodlipid_mg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.RestingBloodLipid_mg_Per_mL)
  return _internal_restingbloodlipid_mg_per_ml();
}
inline void TissueData::_internal_set_restingbloodlipid_mg_per_ml(double value) {
  
  restingbloodlipid_mg_per_ml_ = value;
}
inline void TissueData::set_restingbloodlipid_mg_per_ml(double value) {
  _internal_set_restingbloodlipid_mg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.TissueData.RestingBloodLipid_mg_Per_mL)
}

// double RestingBloodInsulin_mg_Per_mL = 5;
inline void TissueData::clear_restingbloodinsulin_mg_per_ml() {
  restingbloodinsulin_mg_per_ml_ = 0;
}
inline double TissueData::_internal_restingbloodinsulin_mg_per_ml() const {
  return restingbloodinsulin_mg_per_ml_;
}
inline double TissueData::restingbloodinsulin_mg_per_ml() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.RestingBloodInsulin_mg_Per_mL)
  return _internal_restingbloodinsulin_mg_per_ml();
}
inline void TissueData::_internal_set_restingbloodinsulin_mg_per_ml(double value) {
  
  restingbloodinsulin_mg_per_ml_ = value;
}
inline void TissueData::set_restingbloodinsulin_mg_per_ml(double value) {
  _internal_set_restingbloodinsulin_mg_per_ml(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.TissueData.RestingBloodInsulin_mg_Per_mL)
}

// double RestingFluidMass_kg = 6;
inline void TissueData::clear_restingfluidmass_kg() {
  restingfluidmass_kg_ = 0;
}
inline double TissueData::_internal_restingfluidmass_kg() const {
  return restingfluidmass_kg_;
}
inline double TissueData::restingfluidmass_kg() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.TissueData.RestingFluidMass_kg)
  return _internal_restingfluidmass_kg();
}
inline void TissueData::_internal_set_restingfluidmass_kg(double value) {
  
  restingfluidmass_kg_ = value;
}
inline void TissueData::set_restingfluidmass_kg(double value) {
  _internal_set_restingfluidmass_kg(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.TissueData.RestingFluidMass_kg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cpm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto
