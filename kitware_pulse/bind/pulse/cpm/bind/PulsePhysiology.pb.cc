// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulsePhysiology.proto

#include "pulse/cpm/bind/PulsePhysiology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class BloodChemistryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BloodChemistryData> _instance;
} _BloodChemistryData_default_instance_;
class CardiovascularDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardiovascularData> _instance;
} _CardiovascularData_default_instance_;
class DrugDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrugData> _instance;
} _DrugData_default_instance_;
class EndocrineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndocrineData> _instance;
} _EndocrineData_default_instance_;
class EnergyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnergyData> _instance;
} _EnergyData_default_instance_;
class GastrointestinalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GastrointestinalData> _instance;
} _GastrointestinalData_default_instance_;
class HepaticDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HepaticData> _instance;
} _HepaticData_default_instance_;
class NervousDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NervousData> _instance;
} _NervousData_default_instance_;
class RenalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenalData> _instance;
} _RenalData_default_instance_;
class RespiratoryDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RespiratoryData> _instance;
} _RespiratoryData_default_instance_;
class TissueDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TissueData> _instance;
} _TissueData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_BloodChemistryData_default_instance_;
    new (ptr) ::pulse::cpm::bind::BloodChemistryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_CardiovascularData_default_instance_;
    new (ptr) ::pulse::cpm::bind::CardiovascularData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_DrugData_default_instance_;
    new (ptr) ::pulse::cpm::bind::DrugData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_EndocrineData_default_instance_;
    new (ptr) ::pulse::cpm::bind::EndocrineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_EnergyData_default_instance_;
    new (ptr) ::pulse::cpm::bind::EnergyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_GastrointestinalData_default_instance_;
    new (ptr) ::pulse::cpm::bind::GastrointestinalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_HepaticData_default_instance_;
    new (ptr) ::pulse::cpm::bind::HepaticData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_NervousData_default_instance_;
    new (ptr) ::pulse::cpm::bind::NervousData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_RenalData_default_instance_;
    new (ptr) ::pulse::cpm::bind::RenalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_RespiratoryData_default_instance_;
    new (ptr) ::pulse::cpm::bind::RespiratoryData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_TissueData_default_instance_;
    new (ptr) ::pulse::cpm::bind::TissueData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto}, {
      &scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::BloodChemistryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::BloodChemistryData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::BloodChemistryData, arterialoxygenaverage_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::BloodChemistryData, arterialcarbondioxideaverage_mmhg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, startsystole_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, heartflowdetected_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, entercardiacarrest_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccycleperiod_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, currentcardiaccycleduration_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, leftheartelastancemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, leftheartelastance_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, leftheartelastancemax_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, leftheartelastancemin_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, rightheartelastance_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, rightheartelastancemax_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, rightheartelastancemin_mmhg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, compressiontime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, compressionratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, compressionperiod_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, currentcardiaccycletime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclediastolicvolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccycleaortapressurelow_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccycleaortapressurehigh_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonaryarterypressurelow_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonaryarterypressurehigh_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, lastcardiaccyclemeanarterialco2partialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclestrokevolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclearterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclearterialco2partialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonarycapillarieswedgepressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonarycapillariesflow_ml_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonaryshuntflow_ml_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclepulmonaryarterypressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccyclecentralvenouspressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::CardiovascularData, cardiaccycleskinflow_ml_per_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::DrugData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::DrugData, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EndocrineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EndocrineData, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, enduranceenergystore_j_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, mediumpowerenergystore_j_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, peakpowerenergystore_j_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, usableenergystore_j_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, bloodph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnergyData, bicarbonatemolarity_mmol_per_l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::GastrointestinalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::GastrointestinalData, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::HepaticData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::HepaticData, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, arterialoxygenbaseline_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, arterialcarbondioxidebaseline_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptorfeedbackstatus_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptorsaturationstatus_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptoractivetime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptoreffectivenessparameter_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptormeanarterialpressurebaseline_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, baroreceptorsaturationtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, lastmeanarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, previousbloodvolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::NervousData, totalsympatheticfraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, urinating_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, leftafferentresistance_mmhg_s_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, rightafferentresistance_mmhg_s_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, leftsodiumflowsetpoint_mg_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, rightsodiumflowsetpoint_mg_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, urineproductionrate_ml_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, urineosmolarity_mosm_per_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, sodiumconcentration_mg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, sodiumexcretionrate_mg_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, leftsodiumflow_mg_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, rightsodiumflow_mg_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, leftrenalarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RenalData, rightrenalarterialpressure_mmhg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, breathingcycle_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, notbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathtotalvolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathalveolivolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathpleuralvolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathalveolipressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathdriverpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathpleuralpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, lastcardiaccyclebloodph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topcarinao2_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, topbreathelapsedtime_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathelapsedtime_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathtotalvolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathalveolivolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathpleuralvolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathalveolipressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathdriverpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bottombreathpleuralpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, peakalveolarpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, maximalalveolarpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, bloodphrunningaverage_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, meanairwaypressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, arterialo2partialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, arterialco2partialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, breathingcycletime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, driverpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, elapsedbreathingcycletime_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, ieratioscalefactor_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, peakinspiratorypressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, peakexpiratorypressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, previoustargetalveolarventilation_l_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, ventilationfrequency_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, ventilationtotidalvolumeslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, arterialo2runningaverage_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, arterialco2runningaverage_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, expiratoryholdfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, expiratoryreleasefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, expiratoryrisefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, inspiratoryholdfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, inspiratoryreleasefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, inspiratoryrisefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, inspiratorytoexpiratorypausefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, leftalveolidecrease_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, rightalveolidecrease_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, activeconsciousrespirationcommand_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, respiratorycomplianceoverride_l_per_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::RespiratoryData, respiratoryresistanceoverride_cmh2o_s_per_l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, restingtissueglucose_g_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, restingbloodglucose_mg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, restingbloodlipid_mg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, restingbloodinsulin_mg_per_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::TissueData, restingfluidmass_kg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::BloodChemistryData)},
  { 8, -1, sizeof(::pulse::cpm::bind::CardiovascularData)},
  { 45, -1, sizeof(::pulse::cpm::bind::DrugData)},
  { 51, -1, sizeof(::pulse::cpm::bind::EndocrineData)},
  { 57, -1, sizeof(::pulse::cpm::bind::EnergyData)},
  { 69, -1, sizeof(::pulse::cpm::bind::GastrointestinalData)},
  { 75, -1, sizeof(::pulse::cpm::bind::HepaticData)},
  { 81, -1, sizeof(::pulse::cpm::bind::NervousData)},
  { 98, -1, sizeof(::pulse::cpm::bind::RenalData)},
  { 117, -1, sizeof(::pulse::cpm::bind::RespiratoryData)},
  { 170, -1, sizeof(::pulse::cpm::bind::TissueData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_BloodChemistryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_CardiovascularData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_DrugData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_EndocrineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_EnergyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_GastrointestinalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_HepaticData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_NervousData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_RenalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_RespiratoryData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_TissueData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$pulse/cpm/bind/PulsePhysiology.proto\022\016"
  "pulse.cpm.bind\032\037pulse/cdm/bind/Propertie"
  "s.proto\032\037pulse/cdm/bind/Physiology.proto"
  "\"\345\001\n\022BloodChemistryData\0228\n\006Common\030\001 \001(\0132"
  "(.pulse.cdm.bind.BloodChemistrySystemDat"
  "a\022F\n\032ArterialOxygenAverage_mmHg\030\002 \001(\0132\"."
  "pulse.cdm.bind.RunningAverageData\022M\n!Art"
  "erialCarbonDioxideAverage_mmHg\030\003 \001(\0132\".p"
  "ulse.cdm.bind.RunningAverageData\"\361\014\n\022Car"
  "diovascularData\0228\n\006Common\030\001 \001(\0132(.pulse."
  "cdm.bind.CardiovascularSystemData\022\024\n\014Sta"
  "rtSystole\030\002 \001(\010\022\031\n\021HeartFlowDetected\030\003 \001"
  "(\010\022\032\n\022EnterCardiacArrest\030\004 \001(\010\022\034\n\024Cardia"
  "cCyclePeriod_s\030\005 \001(\001\022%\n\035CurrentCardiacCy"
  "cleDuration_s\030\006 \001(\001\022\"\n\032LeftHeartElastanc"
  "eModifier\030\007 \001(\001\022&\n\036LeftHeartElastance_mm"
  "Hg_Per_mL\030\010 \001(\001\022)\n!LeftHeartElastanceMax"
  "_mmHg_Per_mL\030\t \001(\001\022)\n!LeftHeartElastance"
  "Min_mmHg_Per_mL\030\n \001(\001\022\'\n\037RightHeartElast"
  "ance_mmHg_Per_mL\030\013 \001(\001\022*\n\"RightHeartElas"
  "tanceMax_mmHg_Per_mL\030\014 \001(\001\022*\n\"RightHeart"
  "ElastanceMin_mmHg_Per_mL\030\r \001(\001\022\031\n\021Compre"
  "ssionTime_s\030\016 \001(\001\022\030\n\020CompressionRatio\030\017 "
  "\001(\001\022\033\n\023CompressionPeriod_s\030\020 \001(\001\022!\n\031Curr"
  "entCardiacCycleTime_s\030\021 \001(\001\022&\n\036CardiacCy"
  "cleDiastolicVolume_mL\030\022 \001(\001\022)\n!CardiacCy"
  "cleAortaPressureLow_mmHg\030\023 \001(\001\022*\n\"Cardia"
  "cCycleAortaPressureHigh_mmHg\030\024 \001(\001\0223\n+Ca"
  "rdiacCyclePulmonaryArteryPressureLow_mmH"
  "g\030\025 \001(\001\0224\n,CardiacCyclePulmonaryArteryPr"
  "essureHigh_mmHg\030\026 \001(\001\022;\n3LastCardiacCycl"
  "eMeanArterialCO2PartialPressure_mmHg\030\027 \001"
  "(\001\022#\n\033CardiacCycleStrokeVolume_mL\030\030 \001(\001\022"
  "M\n!CardiacCycleArterialPressure_mmHg\030\031 \001"
  "(\0132\".pulse.cdm.bind.RunningAverageData\022W"
  "\n+CardiacCycleArterialCO2PartialPressure"
  "_mmHg\030\032 \001(\0132\".pulse.cdm.bind.RunningAver"
  "ageData\022^\n2CardiacCyclePulmonaryCapillar"
  "iesWedgePressure_mmHg\030\033 \001(\0132\".pulse.cdm."
  "bind.RunningAverageData\022Y\n-CardiacCycleP"
  "ulmonaryCapillariesFlow_mL_Per_s\030\034 \001(\0132\""
  ".pulse.cdm.bind.RunningAverageData\022S\n\'Ca"
  "rdiacCyclePulmonaryShuntFlow_mL_Per_s\030\035 "
  "\001(\0132\".pulse.cdm.bind.RunningAverageData\022"
  "T\n(CardiacCyclePulmonaryArteryPressure_m"
  "mHg\030\036 \001(\0132\".pulse.cdm.bind.RunningAverag"
  "eData\022R\n&CardiacCycleCentralVenousPressu"
  "re_mmHg\030\037 \001(\0132\".pulse.cdm.bind.RunningAv"
  "erageData\022I\n\035CardiacCycleSkinFlow_mL_Per"
  "_s\030  \001(\0132\".pulse.cdm.bind.RunningAverage"
  "Data\":\n\010DrugData\022.\n\006Common\030\001 \001(\0132\036.pulse"
  ".cdm.bind.DrugSystemData\"D\n\rEndocrineDat"
  "a\0223\n\006Common\030\001 \001(\0132#.pulse.cdm.bind.Endoc"
  "rineSystemData\"\276\002\n\nEnergyData\0220\n\006Common\030"
  "\001 \001(\0132 .pulse.cdm.bind.EnergySystemData\022"
  "\036\n\026EnduranceEnergyStore_J\030\002 \001(\001\022 \n\030Mediu"
  "mPowerEnergyStore_J\030\003 \001(\001\022\036\n\026PeakPowerEn"
  "ergyStore_J\030\004 \001(\001\022\033\n\023UsableEnergyStore_J"
  "\030\005 \001(\001\0223\n\007BloodpH\030\006 \001(\0132\".pulse.cdm.bind"
  ".RunningAverageData\022J\n\036BicarbonateMolari"
  "ty_mmol_Per_L\030\007 \001(\0132\".pulse.cdm.bind.Run"
  "ningAverageData\"R\n\024GastrointestinalData\022"
  ":\n\006Common\030\001 \001(\0132*.pulse.cdm.bind.Gastroi"
  "ntestinalSystemData\"@\n\013HepaticData\0221\n\006Co"
  "mmon\030\001 \001(\0132!.pulse.cdm.bind.HepaticSyste"
  "mData\"\357\003\n\013NervousData\0221\n\006Common\030\001 \001(\0132!."
  "pulse.cdm.bind.NervousSystemData\022#\n\033Arte"
  "rialOxygenBaseline_mmHg\030\002 \001(\001\022*\n\"Arteria"
  "lCarbonDioxideBaseline_mmHg\030\003 \001(\001\022\"\n\032Bar"
  "oreceptorFeedbackStatus\030\004 \001(\010\022$\n\034Barorec"
  "eptorSaturationStatus\030\005 \001(\010\022 \n\030Barorecep"
  "torActiveTime_s\030\006 \001(\001\022*\n\"BaroreceptorEff"
  "ectivenessParameter\030\007 \001(\001\0225\n-Barorecepto"
  "rMeanArterialPressureBaseline_mmHg\030\010 \001(\001"
  "\022$\n\034BaroreceptorSaturationTime_s\030\t \001(\001\022%"
  "\n\035LastMeanArterialPressure_mmHg\030\n \001(\001\022\036\n"
  "\026PreviousBloodVolume_mL\030\013 \001(\001\022 \n\030TotalSy"
  "mpatheticFraction\030\014 \001(\001\"\316\006\n\tRenalData\022/\n"
  "\006Common\030\001 \001(\0132\037.pulse.cdm.bind.RenalSyst"
  "emData\022\021\n\tUrinating\030\002 \001(\010\022,\n$LeftAfferen"
  "tResistance_mmHg_s_Per_mL\030\003 \001(\001\022-\n%Right"
  "AfferentResistance_mmHg_s_Per_mL\030\004 \001(\001\022\'"
  "\n\037LeftSodiumFlowSetPoint_mg_Per_s\030\005 \001(\001\022"
  "(\n RightSodiumFlowSetPoint_mg_Per_s\030\006 \001("
  "\001\022J\n\036UrineProductionRate_mL_Per_min\030\007 \001("
  "\0132\".pulse.cdm.bind.RunningAverageData\022F\n"
  "\032UrineOsmolarity_mOsm_Per_L\030\010 \001(\0132\".puls"
  "e.cdm.bind.RunningAverageData\022I\n\035SodiumC"
  "oncentration_mg_Per_mL\030\t \001(\0132\".pulse.cdm"
  ".bind.RunningAverageData\022J\n\036SodiumExcret"
  "ionRate_mg_Per_min\030\n \001(\0132\".pulse.cdm.bin"
  "d.RunningAverageData\022C\n\027LeftSodiumFlow_m"
  "g_Per_s\030\013 \001(\0132\".pulse.cdm.bind.RunningAv"
  "erageData\022D\n\030RightSodiumFlow_mg_Per_s\030\014 "
  "\001(\0132\".pulse.cdm.bind.RunningAverageData\022"
  "J\n\036LeftRenalArterialPressure_mmHg\030\r \001(\0132"
  "\".pulse.cdm.bind.RunningAverageData\022K\n\037R"
  "ightRenalArterialPressure_mmHg\030\016 \001(\0132\".p"
  "ulse.cdm.bind.RunningAverageData\"\216\017\n\017Res"
  "piratoryData\0225\n\006Common\030\001 \001(\0132%.pulse.cdm"
  ".bind.RespiratorySystemData\022\026\n\016Breathing"
  "Cycle\030\002 \001(\010\022\024\n\014NotBreathing\030\003 \001(\010\022\036\n\026Top"
  "BreathTotalVolume_L\030\004 \001(\001\022 \n\030TopBreathAl"
  "veoliVolume_L\030\005 \001(\001\022 \n\030TopBreathPleuralV"
  "olume_L\030\006 \001(\001\022&\n\036TopBreathAlveoliPressur"
  "e_cmH2O\030\007 \001(\001\022%\n\035TopBreathDriverPressure"
  "_cmH2O\030\010 \001(\001\022&\n\036TopBreathPleuralPressure"
  "_cmH2O\030\t \001(\001\022\037\n\027LastCardiacCycleBloodPH\030"
  "\n \001(\001\022\023\n\013TopCarinaO2\030\013 \001(\001\022 \n\030TopBreathE"
  "lapsedTime_min\030\014 \001(\001\022#\n\033BottomBreathElap"
  "sedTime_min\030\r \001(\001\022!\n\031BottomBreathTotalVo"
  "lume_L\030\016 \001(\001\022#\n\033BottomBreathAlveoliVolum"
  "e_L\030\017 \001(\001\022#\n\033BottomBreathPleuralVolume_L"
  "\030\020 \001(\001\022)\n!BottomBreathAlveoliPressure_cm"
  "H2O\030\021 \001(\001\022(\n BottomBreathDriverPressure_"
  "cmH2O\030\022 \001(\001\022)\n!BottomBreathPleuralPressu"
  "re_cmH2O\030\023 \001(\001\022\"\n\032PeakAlveolarPressure_c"
  "mH2O\030\024 \001(\001\022%\n\035MaximalAlveolarPressure_cm"
  "H2O\030\025 \001(\001\022A\n\025BloodPHRunningAverage\030\026 \001(\013"
  "2\".pulse.cdm.bind.RunningAverageData\022D\n\030"
  "MeanAirwayPressure_cmH2O\030\027 \001(\0132\".pulse.c"
  "dm.bind.RunningAverageData\022&\n\036ArterialO2"
  "PartialPressure_mmHg\030\030 \001(\001\022\'\n\037ArterialCO"
  "2PartialPressure_mmHg\030\031 \001(\001\022\034\n\024Breathing"
  "CycleTime_s\030\032 \001(\001\022\034\n\024DriverPressure_cmH2"
  "O\030\033 \001(\001\022%\n\035ElapsedBreathingCycleTime_min"
  "\030\034 \001(\001\022\032\n\022IERatioScaleFactor\030\035 \001(\001\022%\n\035Pe"
  "akInspiratoryPressure_cmH2O\030\036 \001(\001\022$\n\034Pea"
  "kExpiratoryPressure_cmH2O\030\037 \001(\001\0223\n+Previ"
  "ousTargetAlveolarVentilation_L_Per_min\030 "
  " \001(\001\022$\n\034VentilationFrequency_Per_min\030! \001"
  "(\001\022%\n\035VentilationToTidalVolumeSlope\030\" \001("
  "\001\022I\n\035ArterialO2RunningAverage_mmHg\030# \001(\013"
  "2\".pulse.cdm.bind.RunningAverageData\022J\n\036"
  "ArterialCO2RunningAverage_mmHg\030$ \001(\0132\".p"
  "ulse.cdm.bind.RunningAverageData\022\036\n\026Expi"
  "ratoryHoldFraction\030% \001(\001\022!\n\031ExpiratoryRe"
  "leaseFraction\030& \001(\001\022\036\n\026ExpiratoryRiseFra"
  "ction\030\' \001(\001\022\037\n\027InspiratoryHoldFraction\030("
  " \001(\001\022\"\n\032InspiratoryReleaseFraction\030) \001(\001"
  "\022\037\n\027InspiratoryRiseFraction\030* \001(\001\022,\n$Ins"
  "piratoryToExpiratoryPauseFraction\030+ \001(\001\022"
  "\035\n\025LeftAlveoliDecrease_L\030, \001(\001\022\036\n\026RightA"
  "lveoliDecrease_L\030- \001(\001\022)\n!ActiveConsciou"
  "sRespirationCommand\030. \001(\010\0221\n)Respiratory"
  "ComplianceOverride_L_Per_cmH2O\030/ \001(\001\0223\n+"
  "RespiratoryResistanceOverride_cmH2O_s_Pe"
  "r_L\0300 \001(\001\"\356\001\n\nTissueData\0220\n\006Common\030\001 \001(\013"
  "2 .pulse.cdm.bind.TissueSystemData\022\036\n\026Re"
  "stingTissueGlucose_g\030\002 \001(\001\022%\n\035RestingBlo"
  "odGlucose_mg_Per_mL\030\003 \001(\001\022#\n\033RestingBloo"
  "dLipid_mg_Per_mL\030\004 \001(\001\022%\n\035RestingBloodIn"
  "sulin_mg_Per_mL\030\005 \001(\001\022\033\n\023RestingFluidMas"
  "s_kg\030\006 \001(\001B/\n\032com.kitware.pulse.cpm.bind"
  "H\001\252\002\016pulse.cpm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_sccs[11] = {
  &scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
  &scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto, "pulse/cpm/bind/PulsePhysiology.proto", 6187,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto, 11, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class BloodChemistryData::_Internal {
 public:
  static const ::pulse::cdm::bind::BloodChemistrySystemData& common(const BloodChemistryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& arterialoxygenaverage_mmhg(const BloodChemistryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& arterialcarbondioxideaverage_mmhg(const BloodChemistryData* msg);
};

const ::pulse::cdm::bind::BloodChemistrySystemData&
BloodChemistryData::_Internal::common(const BloodChemistryData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::RunningAverageData&
BloodChemistryData::_Internal::arterialoxygenaverage_mmhg(const BloodChemistryData* msg) {
  return *msg->arterialoxygenaverage_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
BloodChemistryData::_Internal::arterialcarbondioxideaverage_mmhg(const BloodChemistryData* msg) {
  return *msg->arterialcarbondioxideaverage_mmhg_;
}
void BloodChemistryData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void BloodChemistryData::clear_arterialoxygenaverage_mmhg() {
  if (GetArena() == nullptr && arterialoxygenaverage_mmhg_ != nullptr) {
    delete arterialoxygenaverage_mmhg_;
  }
  arterialoxygenaverage_mmhg_ = nullptr;
}
void BloodChemistryData::clear_arterialcarbondioxideaverage_mmhg() {
  if (GetArena() == nullptr && arterialcarbondioxideaverage_mmhg_ != nullptr) {
    delete arterialcarbondioxideaverage_mmhg_;
  }
  arterialcarbondioxideaverage_mmhg_ = nullptr;
}
BloodChemistryData::BloodChemistryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.BloodChemistryData)
}
BloodChemistryData::BloodChemistryData(const BloodChemistryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::BloodChemistrySystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_arterialoxygenaverage_mmhg()) {
    arterialoxygenaverage_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.arterialoxygenaverage_mmhg_);
  } else {
    arterialoxygenaverage_mmhg_ = nullptr;
  }
  if (from._internal_has_arterialcarbondioxideaverage_mmhg()) {
    arterialcarbondioxideaverage_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.arterialcarbondioxideaverage_mmhg_);
  } else {
    arterialcarbondioxideaverage_mmhg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.BloodChemistryData)
}

void BloodChemistryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&arterialcarbondioxideaverage_mmhg_) -
      reinterpret_cast<char*>(&common_)) + sizeof(arterialcarbondioxideaverage_mmhg_));
}

BloodChemistryData::~BloodChemistryData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.BloodChemistryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BloodChemistryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete arterialoxygenaverage_mmhg_;
  if (this != internal_default_instance()) delete arterialcarbondioxideaverage_mmhg_;
}

void BloodChemistryData::ArenaDtor(void* object) {
  BloodChemistryData* _this = reinterpret_cast< BloodChemistryData* >(object);
  (void)_this;
}
void BloodChemistryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BloodChemistryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BloodChemistryData& BloodChemistryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BloodChemistryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void BloodChemistryData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.BloodChemistryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && arterialoxygenaverage_mmhg_ != nullptr) {
    delete arterialoxygenaverage_mmhg_;
  }
  arterialoxygenaverage_mmhg_ = nullptr;
  if (GetArena() == nullptr && arterialcarbondioxideaverage_mmhg_ != nullptr) {
    delete arterialcarbondioxideaverage_mmhg_;
  }
  arterialcarbondioxideaverage_mmhg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BloodChemistryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BloodChemistrySystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData ArterialOxygenAverage_mmHg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialoxygenaverage_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData ArterialCarbonDioxideAverage_mmHg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialcarbondioxideaverage_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BloodChemistryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.BloodChemistryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BloodChemistrySystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialOxygenAverage_mmHg = 2;
  if (this->has_arterialoxygenaverage_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arterialoxygenaverage_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialCarbonDioxideAverage_mmHg = 3;
  if (this->has_arterialcarbondioxideaverage_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::arterialcarbondioxideaverage_mmhg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.BloodChemistryData)
  return target;
}

size_t BloodChemistryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.BloodChemistryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BloodChemistrySystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialOxygenAverage_mmHg = 2;
  if (this->has_arterialoxygenaverage_mmhg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialoxygenaverage_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialCarbonDioxideAverage_mmHg = 3;
  if (this->has_arterialcarbondioxideaverage_mmhg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialcarbondioxideaverage_mmhg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BloodChemistryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.BloodChemistryData)
  GOOGLE_DCHECK_NE(&from, this);
  const BloodChemistryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BloodChemistryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.BloodChemistryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.BloodChemistryData)
    MergeFrom(*source);
  }
}

void BloodChemistryData::MergeFrom(const BloodChemistryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.BloodChemistryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::BloodChemistrySystemData::MergeFrom(from._internal_common());
  }
  if (from.has_arterialoxygenaverage_mmhg()) {
    _internal_mutable_arterialoxygenaverage_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_arterialoxygenaverage_mmhg());
  }
  if (from.has_arterialcarbondioxideaverage_mmhg()) {
    _internal_mutable_arterialcarbondioxideaverage_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_arterialcarbondioxideaverage_mmhg());
  }
}

void BloodChemistryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.BloodChemistryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloodChemistryData::CopyFrom(const BloodChemistryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.BloodChemistryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodChemistryData::IsInitialized() const {
  return true;
}

void BloodChemistryData::InternalSwap(BloodChemistryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BloodChemistryData, arterialcarbondioxideaverage_mmhg_)
      + sizeof(BloodChemistryData::arterialcarbondioxideaverage_mmhg_)
      - PROTOBUF_FIELD_OFFSET(BloodChemistryData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BloodChemistryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardiovascularData::_Internal {
 public:
  static const ::pulse::cdm::bind::CardiovascularSystemData& common(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclearterialpressure_mmhg(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclearterialco2partialpressure_mmhg(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonarycapillarieswedgepressure_mmhg(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonarycapillariesflow_ml_per_s(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonaryshuntflow_ml_per_s(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclepulmonaryarterypressure_mmhg(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccyclecentralvenouspressure_mmhg(const CardiovascularData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& cardiaccycleskinflow_ml_per_s(const CardiovascularData* msg);
};

const ::pulse::cdm::bind::CardiovascularSystemData&
CardiovascularData::_Internal::common(const CardiovascularData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclearterialpressure_mmhg(const CardiovascularData* msg) {
  return *msg->cardiaccyclearterialpressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclearterialco2partialpressure_mmhg(const CardiovascularData* msg) {
  return *msg->cardiaccyclearterialco2partialpressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclepulmonarycapillarieswedgepressure_mmhg(const CardiovascularData* msg) {
  return *msg->cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclepulmonarycapillariesflow_ml_per_s(const CardiovascularData* msg) {
  return *msg->cardiaccyclepulmonarycapillariesflow_ml_per_s_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclepulmonaryshuntflow_ml_per_s(const CardiovascularData* msg) {
  return *msg->cardiaccyclepulmonaryshuntflow_ml_per_s_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclepulmonaryarterypressure_mmhg(const CardiovascularData* msg) {
  return *msg->cardiaccyclepulmonaryarterypressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccyclecentralvenouspressure_mmhg(const CardiovascularData* msg) {
  return *msg->cardiaccyclecentralvenouspressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
CardiovascularData::_Internal::cardiaccycleskinflow_ml_per_s(const CardiovascularData* msg) {
  return *msg->cardiaccycleskinflow_ml_per_s_;
}
void CardiovascularData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclearterialpressure_mmhg() {
  if (GetArena() == nullptr && cardiaccyclearterialpressure_mmhg_ != nullptr) {
    delete cardiaccyclearterialpressure_mmhg_;
  }
  cardiaccyclearterialpressure_mmhg_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclearterialco2partialpressure_mmhg() {
  if (GetArena() == nullptr && cardiaccyclearterialco2partialpressure_mmhg_ != nullptr) {
    delete cardiaccyclearterialco2partialpressure_mmhg_;
  }
  cardiaccyclearterialco2partialpressure_mmhg_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclepulmonarycapillarieswedgepressure_mmhg() {
  if (GetArena() == nullptr && cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ != nullptr) {
    delete cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  }
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclepulmonarycapillariesflow_ml_per_s() {
  if (GetArena() == nullptr && cardiaccyclepulmonarycapillariesflow_ml_per_s_ != nullptr) {
    delete cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  }
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclepulmonaryshuntflow_ml_per_s() {
  if (GetArena() == nullptr && cardiaccyclepulmonaryshuntflow_ml_per_s_ != nullptr) {
    delete cardiaccyclepulmonaryshuntflow_ml_per_s_;
  }
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclepulmonaryarterypressure_mmhg() {
  if (GetArena() == nullptr && cardiaccyclepulmonaryarterypressure_mmhg_ != nullptr) {
    delete cardiaccyclepulmonaryarterypressure_mmhg_;
  }
  cardiaccyclepulmonaryarterypressure_mmhg_ = nullptr;
}
void CardiovascularData::clear_cardiaccyclecentralvenouspressure_mmhg() {
  if (GetArena() == nullptr && cardiaccyclecentralvenouspressure_mmhg_ != nullptr) {
    delete cardiaccyclecentralvenouspressure_mmhg_;
  }
  cardiaccyclecentralvenouspressure_mmhg_ = nullptr;
}
void CardiovascularData::clear_cardiaccycleskinflow_ml_per_s() {
  if (GetArena() == nullptr && cardiaccycleskinflow_ml_per_s_ != nullptr) {
    delete cardiaccycleskinflow_ml_per_s_;
  }
  cardiaccycleskinflow_ml_per_s_ = nullptr;
}
CardiovascularData::CardiovascularData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.CardiovascularData)
}
CardiovascularData::CardiovascularData(const CardiovascularData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::CardiovascularSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_cardiaccyclearterialpressure_mmhg()) {
    cardiaccyclearterialpressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclearterialpressure_mmhg_);
  } else {
    cardiaccyclearterialpressure_mmhg_ = nullptr;
  }
  if (from._internal_has_cardiaccyclearterialco2partialpressure_mmhg()) {
    cardiaccyclearterialco2partialpressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclearterialco2partialpressure_mmhg_);
  } else {
    cardiaccyclearterialco2partialpressure_mmhg_ = nullptr;
  }
  if (from._internal_has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg()) {
    cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclepulmonarycapillarieswedgepressure_mmhg_);
  } else {
    cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = nullptr;
  }
  if (from._internal_has_cardiaccyclepulmonarycapillariesflow_ml_per_s()) {
    cardiaccyclepulmonarycapillariesflow_ml_per_s_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclepulmonarycapillariesflow_ml_per_s_);
  } else {
    cardiaccyclepulmonarycapillariesflow_ml_per_s_ = nullptr;
  }
  if (from._internal_has_cardiaccyclepulmonaryshuntflow_ml_per_s()) {
    cardiaccyclepulmonaryshuntflow_ml_per_s_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclepulmonaryshuntflow_ml_per_s_);
  } else {
    cardiaccyclepulmonaryshuntflow_ml_per_s_ = nullptr;
  }
  if (from._internal_has_cardiaccyclepulmonaryarterypressure_mmhg()) {
    cardiaccyclepulmonaryarterypressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclepulmonaryarterypressure_mmhg_);
  } else {
    cardiaccyclepulmonaryarterypressure_mmhg_ = nullptr;
  }
  if (from._internal_has_cardiaccyclecentralvenouspressure_mmhg()) {
    cardiaccyclecentralvenouspressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccyclecentralvenouspressure_mmhg_);
  } else {
    cardiaccyclecentralvenouspressure_mmhg_ = nullptr;
  }
  if (from._internal_has_cardiaccycleskinflow_ml_per_s()) {
    cardiaccycleskinflow_ml_per_s_ = new ::pulse::cdm::bind::RunningAverageData(*from.cardiaccycleskinflow_ml_per_s_);
  } else {
    cardiaccycleskinflow_ml_per_s_ = nullptr;
  }
  ::memcpy(&cardiaccycleperiod_s_, &from.cardiaccycleperiod_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&entercardiacarrest_) -
    reinterpret_cast<char*>(&cardiaccycleperiod_s_)) + sizeof(entercardiacarrest_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.CardiovascularData)
}

void CardiovascularData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&entercardiacarrest_) -
      reinterpret_cast<char*>(&common_)) + sizeof(entercardiacarrest_));
}

CardiovascularData::~CardiovascularData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.CardiovascularData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardiovascularData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete cardiaccyclearterialpressure_mmhg_;
  if (this != internal_default_instance()) delete cardiaccyclearterialco2partialpressure_mmhg_;
  if (this != internal_default_instance()) delete cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  if (this != internal_default_instance()) delete cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  if (this != internal_default_instance()) delete cardiaccyclepulmonaryshuntflow_ml_per_s_;
  if (this != internal_default_instance()) delete cardiaccyclepulmonaryarterypressure_mmhg_;
  if (this != internal_default_instance()) delete cardiaccyclecentralvenouspressure_mmhg_;
  if (this != internal_default_instance()) delete cardiaccycleskinflow_ml_per_s_;
}

void CardiovascularData::ArenaDtor(void* object) {
  CardiovascularData* _this = reinterpret_cast< CardiovascularData* >(object);
  (void)_this;
}
void CardiovascularData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardiovascularData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardiovascularData& CardiovascularData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardiovascularData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void CardiovascularData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.CardiovascularData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclearterialpressure_mmhg_ != nullptr) {
    delete cardiaccyclearterialpressure_mmhg_;
  }
  cardiaccyclearterialpressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclearterialco2partialpressure_mmhg_ != nullptr) {
    delete cardiaccyclearterialco2partialpressure_mmhg_;
  }
  cardiaccyclearterialco2partialpressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ != nullptr) {
    delete cardiaccyclepulmonarycapillarieswedgepressure_mmhg_;
  }
  cardiaccyclepulmonarycapillarieswedgepressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclepulmonarycapillariesflow_ml_per_s_ != nullptr) {
    delete cardiaccyclepulmonarycapillariesflow_ml_per_s_;
  }
  cardiaccyclepulmonarycapillariesflow_ml_per_s_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclepulmonaryshuntflow_ml_per_s_ != nullptr) {
    delete cardiaccyclepulmonaryshuntflow_ml_per_s_;
  }
  cardiaccyclepulmonaryshuntflow_ml_per_s_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclepulmonaryarterypressure_mmhg_ != nullptr) {
    delete cardiaccyclepulmonaryarterypressure_mmhg_;
  }
  cardiaccyclepulmonaryarterypressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && cardiaccyclecentralvenouspressure_mmhg_ != nullptr) {
    delete cardiaccyclecentralvenouspressure_mmhg_;
  }
  cardiaccyclecentralvenouspressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && cardiaccycleskinflow_ml_per_s_ != nullptr) {
    delete cardiaccycleskinflow_ml_per_s_;
  }
  cardiaccycleskinflow_ml_per_s_ = nullptr;
  ::memset(&cardiaccycleperiod_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entercardiacarrest_) -
      reinterpret_cast<char*>(&cardiaccycleperiod_s_)) + sizeof(entercardiacarrest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardiovascularData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CardiovascularSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool StartSystole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          startsystole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HeartFlowDetected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heartflowdetected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EnterCardiacArrest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          entercardiacarrest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double CardiacCyclePeriod_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cardiaccycleperiod_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CurrentCardiacCycleDuration_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          currentcardiaccycleduration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftHeartElastanceModifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          leftheartelastancemodifier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftHeartElastance_mmHg_Per_mL = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          leftheartelastance_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftHeartElastanceMax_mmHg_Per_mL = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          leftheartelastancemax_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftHeartElastanceMin_mmHg_Per_mL = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          leftheartelastancemin_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightHeartElastance_mmHg_Per_mL = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          rightheartelastance_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightHeartElastanceMax_mmHg_Per_mL = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          rightheartelastancemax_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightHeartElastanceMin_mmHg_Per_mL = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          rightheartelastancemin_mmhg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CompressionTime_s = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          compressiontime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CompressionRatio = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          compressionratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CompressionPeriod_s = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          compressionperiod_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CurrentCardiacCycleTime_s = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          currentcardiaccycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCycleDiastolicVolume_mL = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          cardiaccyclediastolicvolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCycleAortaPressureLow_mmHg = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          cardiaccycleaortapressurelow_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCycleAortaPressureHigh_mmHg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          cardiaccycleaortapressurehigh_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCyclePulmonaryArteryPressureLow_mmHg = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          cardiaccyclepulmonaryarterypressurelow_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCyclePulmonaryArteryPressureHigh_mmHg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          cardiaccyclepulmonaryarterypressurehigh_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LastCardiacCycleMeanArterialCO2PartialPressure_mmHg = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          lastcardiaccyclemeanarterialco2partialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacCycleStrokeVolume_mL = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          cardiaccyclestrokevolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialPressure_mmHg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclearterialpressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclearterialco2partialpressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclepulmonaryshuntflow_ml_per_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclepulmonaryarterypressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCycleCentralVenousPressure_mmHg = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccyclecentralvenouspressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData CardiacCycleSkinFlow_mL_Per_s = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiaccycleskinflow_ml_per_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardiovascularData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.CardiovascularData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CardiovascularSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // bool StartSystole = 2;
  if (this->startsystole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_startsystole(), target);
  }

  // bool HeartFlowDetected = 3;
  if (this->heartflowdetected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_heartflowdetected(), target);
  }

  // bool EnterCardiacArrest = 4;
  if (this->entercardiacarrest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_entercardiacarrest(), target);
  }

  // double CardiacCyclePeriod_s = 5;
  if (!(this->cardiaccycleperiod_s() <= 0 && this->cardiaccycleperiod_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cardiaccycleperiod_s(), target);
  }

  // double CurrentCardiacCycleDuration_s = 6;
  if (!(this->currentcardiaccycleduration_s() <= 0 && this->currentcardiaccycleduration_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_currentcardiaccycleduration_s(), target);
  }

  // double LeftHeartElastanceModifier = 7;
  if (!(this->leftheartelastancemodifier() <= 0 && this->leftheartelastancemodifier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_leftheartelastancemodifier(), target);
  }

  // double LeftHeartElastance_mmHg_Per_mL = 8;
  if (!(this->leftheartelastance_mmhg_per_ml() <= 0 && this->leftheartelastance_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_leftheartelastance_mmhg_per_ml(), target);
  }

  // double LeftHeartElastanceMax_mmHg_Per_mL = 9;
  if (!(this->leftheartelastancemax_mmhg_per_ml() <= 0 && this->leftheartelastancemax_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_leftheartelastancemax_mmhg_per_ml(), target);
  }

  // double LeftHeartElastanceMin_mmHg_Per_mL = 10;
  if (!(this->leftheartelastancemin_mmhg_per_ml() <= 0 && this->leftheartelastancemin_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_leftheartelastancemin_mmhg_per_ml(), target);
  }

  // double RightHeartElastance_mmHg_Per_mL = 11;
  if (!(this->rightheartelastance_mmhg_per_ml() <= 0 && this->rightheartelastance_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_rightheartelastance_mmhg_per_ml(), target);
  }

  // double RightHeartElastanceMax_mmHg_Per_mL = 12;
  if (!(this->rightheartelastancemax_mmhg_per_ml() <= 0 && this->rightheartelastancemax_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_rightheartelastancemax_mmhg_per_ml(), target);
  }

  // double RightHeartElastanceMin_mmHg_Per_mL = 13;
  if (!(this->rightheartelastancemin_mmhg_per_ml() <= 0 && this->rightheartelastancemin_mmhg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_rightheartelastancemin_mmhg_per_ml(), target);
  }

  // double CompressionTime_s = 14;
  if (!(this->compressiontime_s() <= 0 && this->compressiontime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_compressiontime_s(), target);
  }

  // double CompressionRatio = 15;
  if (!(this->compressionratio() <= 0 && this->compressionratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_compressionratio(), target);
  }

  // double CompressionPeriod_s = 16;
  if (!(this->compressionperiod_s() <= 0 && this->compressionperiod_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_compressionperiod_s(), target);
  }

  // double CurrentCardiacCycleTime_s = 17;
  if (!(this->currentcardiaccycletime_s() <= 0 && this->currentcardiaccycletime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_currentcardiaccycletime_s(), target);
  }

  // double CardiacCycleDiastolicVolume_mL = 18;
  if (!(this->cardiaccyclediastolicvolume_ml() <= 0 && this->cardiaccyclediastolicvolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_cardiaccyclediastolicvolume_ml(), target);
  }

  // double CardiacCycleAortaPressureLow_mmHg = 19;
  if (!(this->cardiaccycleaortapressurelow_mmhg() <= 0 && this->cardiaccycleaortapressurelow_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_cardiaccycleaortapressurelow_mmhg(), target);
  }

  // double CardiacCycleAortaPressureHigh_mmHg = 20;
  if (!(this->cardiaccycleaortapressurehigh_mmhg() <= 0 && this->cardiaccycleaortapressurehigh_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_cardiaccycleaortapressurehigh_mmhg(), target);
  }

  // double CardiacCyclePulmonaryArteryPressureLow_mmHg = 21;
  if (!(this->cardiaccyclepulmonaryarterypressurelow_mmhg() <= 0 && this->cardiaccyclepulmonaryarterypressurelow_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_cardiaccyclepulmonaryarterypressurelow_mmhg(), target);
  }

  // double CardiacCyclePulmonaryArteryPressureHigh_mmHg = 22;
  if (!(this->cardiaccyclepulmonaryarterypressurehigh_mmhg() <= 0 && this->cardiaccyclepulmonaryarterypressurehigh_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_cardiaccyclepulmonaryarterypressurehigh_mmhg(), target);
  }

  // double LastCardiacCycleMeanArterialCO2PartialPressure_mmHg = 23;
  if (!(this->lastcardiaccyclemeanarterialco2partialpressure_mmhg() <= 0 && this->lastcardiaccyclemeanarterialco2partialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_lastcardiaccyclemeanarterialco2partialpressure_mmhg(), target);
  }

  // double CardiacCycleStrokeVolume_mL = 24;
  if (!(this->cardiaccyclestrokevolume_ml() <= 0 && this->cardiaccyclestrokevolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_cardiaccyclestrokevolume_ml(), target);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialPressure_mmHg = 25;
  if (this->has_cardiaccyclearterialpressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::cardiaccyclearterialpressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg = 26;
  if (this->has_cardiaccyclearterialco2partialpressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::cardiaccyclearterialco2partialpressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg = 27;
  if (this->has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::cardiaccyclepulmonarycapillarieswedgepressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s = 28;
  if (this->has_cardiaccyclepulmonarycapillariesflow_ml_per_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::cardiaccyclepulmonarycapillariesflow_ml_per_s(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s = 29;
  if (this->has_cardiaccyclepulmonaryshuntflow_ml_per_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::cardiaccyclepulmonaryshuntflow_ml_per_s(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg = 30;
  if (this->has_cardiaccyclepulmonaryarterypressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::cardiaccyclepulmonaryarterypressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleCentralVenousPressure_mmHg = 31;
  if (this->has_cardiaccyclecentralvenouspressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::cardiaccyclecentralvenouspressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleSkinFlow_mL_Per_s = 32;
  if (this->has_cardiaccycleskinflow_ml_per_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::cardiaccycleskinflow_ml_per_s(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.CardiovascularData)
  return target;
}

size_t CardiovascularData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.CardiovascularData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CardiovascularSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialPressure_mmHg = 25;
  if (this->has_cardiaccyclearterialpressure_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclearterialpressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleArterialCO2PartialPressure_mmHg = 26;
  if (this->has_cardiaccyclearterialco2partialpressure_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclearterialco2partialpressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesWedgePressure_mmHg = 27;
  if (this->has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclepulmonarycapillarieswedgepressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryCapillariesFlow_mL_Per_s = 28;
  if (this->has_cardiaccyclepulmonarycapillariesflow_ml_per_s()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclepulmonarycapillariesflow_ml_per_s_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryShuntFlow_mL_Per_s = 29;
  if (this->has_cardiaccyclepulmonaryshuntflow_ml_per_s()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclepulmonaryshuntflow_ml_per_s_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCyclePulmonaryArteryPressure_mmHg = 30;
  if (this->has_cardiaccyclepulmonaryarterypressure_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclepulmonaryarterypressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleCentralVenousPressure_mmHg = 31;
  if (this->has_cardiaccyclecentralvenouspressure_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccyclecentralvenouspressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData CardiacCycleSkinFlow_mL_Per_s = 32;
  if (this->has_cardiaccycleskinflow_ml_per_s()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiaccycleskinflow_ml_per_s_);
  }

  // double CardiacCyclePeriod_s = 5;
  if (!(this->cardiaccycleperiod_s() <= 0 && this->cardiaccycleperiod_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double CurrentCardiacCycleDuration_s = 6;
  if (!(this->currentcardiaccycleduration_s() <= 0 && this->currentcardiaccycleduration_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double LeftHeartElastanceModifier = 7;
  if (!(this->leftheartelastancemodifier() <= 0 && this->leftheartelastancemodifier() >= 0)) {
    total_size += 1 + 8;
  }

  // double LeftHeartElastance_mmHg_Per_mL = 8;
  if (!(this->leftheartelastance_mmhg_per_ml() <= 0 && this->leftheartelastance_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double LeftHeartElastanceMax_mmHg_Per_mL = 9;
  if (!(this->leftheartelastancemax_mmhg_per_ml() <= 0 && this->leftheartelastancemax_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double LeftHeartElastanceMin_mmHg_Per_mL = 10;
  if (!(this->leftheartelastancemin_mmhg_per_ml() <= 0 && this->leftheartelastancemin_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RightHeartElastance_mmHg_Per_mL = 11;
  if (!(this->rightheartelastance_mmhg_per_ml() <= 0 && this->rightheartelastance_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RightHeartElastanceMax_mmHg_Per_mL = 12;
  if (!(this->rightheartelastancemax_mmhg_per_ml() <= 0 && this->rightheartelastancemax_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RightHeartElastanceMin_mmHg_Per_mL = 13;
  if (!(this->rightheartelastancemin_mmhg_per_ml() <= 0 && this->rightheartelastancemin_mmhg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double CompressionTime_s = 14;
  if (!(this->compressiontime_s() <= 0 && this->compressiontime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double CompressionRatio = 15;
  if (!(this->compressionratio() <= 0 && this->compressionratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double CompressionPeriod_s = 16;
  if (!(this->compressionperiod_s() <= 0 && this->compressionperiod_s() >= 0)) {
    total_size += 2 + 8;
  }

  // double CurrentCardiacCycleTime_s = 17;
  if (!(this->currentcardiaccycletime_s() <= 0 && this->currentcardiaccycletime_s() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCycleDiastolicVolume_mL = 18;
  if (!(this->cardiaccyclediastolicvolume_ml() <= 0 && this->cardiaccyclediastolicvolume_ml() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCycleAortaPressureLow_mmHg = 19;
  if (!(this->cardiaccycleaortapressurelow_mmhg() <= 0 && this->cardiaccycleaortapressurelow_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCycleAortaPressureHigh_mmHg = 20;
  if (!(this->cardiaccycleaortapressurehigh_mmhg() <= 0 && this->cardiaccycleaortapressurehigh_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCyclePulmonaryArteryPressureLow_mmHg = 21;
  if (!(this->cardiaccyclepulmonaryarterypressurelow_mmhg() <= 0 && this->cardiaccyclepulmonaryarterypressurelow_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCyclePulmonaryArteryPressureHigh_mmHg = 22;
  if (!(this->cardiaccyclepulmonaryarterypressurehigh_mmhg() <= 0 && this->cardiaccyclepulmonaryarterypressurehigh_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double LastCardiacCycleMeanArterialCO2PartialPressure_mmHg = 23;
  if (!(this->lastcardiaccyclemeanarterialco2partialpressure_mmhg() <= 0 && this->lastcardiaccyclemeanarterialco2partialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double CardiacCycleStrokeVolume_mL = 24;
  if (!(this->cardiaccyclestrokevolume_ml() <= 0 && this->cardiaccyclestrokevolume_ml() >= 0)) {
    total_size += 2 + 8;
  }

  // bool StartSystole = 2;
  if (this->startsystole() != 0) {
    total_size += 1 + 1;
  }

  // bool HeartFlowDetected = 3;
  if (this->heartflowdetected() != 0) {
    total_size += 1 + 1;
  }

  // bool EnterCardiacArrest = 4;
  if (this->entercardiacarrest() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardiovascularData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.CardiovascularData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardiovascularData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardiovascularData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.CardiovascularData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.CardiovascularData)
    MergeFrom(*source);
  }
}

void CardiovascularData::MergeFrom(const CardiovascularData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.CardiovascularData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::CardiovascularSystemData::MergeFrom(from._internal_common());
  }
  if (from.has_cardiaccyclearterialpressure_mmhg()) {
    _internal_mutable_cardiaccyclearterialpressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclearterialpressure_mmhg());
  }
  if (from.has_cardiaccyclearterialco2partialpressure_mmhg()) {
    _internal_mutable_cardiaccyclearterialco2partialpressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclearterialco2partialpressure_mmhg());
  }
  if (from.has_cardiaccyclepulmonarycapillarieswedgepressure_mmhg()) {
    _internal_mutable_cardiaccyclepulmonarycapillarieswedgepressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclepulmonarycapillarieswedgepressure_mmhg());
  }
  if (from.has_cardiaccyclepulmonarycapillariesflow_ml_per_s()) {
    _internal_mutable_cardiaccyclepulmonarycapillariesflow_ml_per_s()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclepulmonarycapillariesflow_ml_per_s());
  }
  if (from.has_cardiaccyclepulmonaryshuntflow_ml_per_s()) {
    _internal_mutable_cardiaccyclepulmonaryshuntflow_ml_per_s()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclepulmonaryshuntflow_ml_per_s());
  }
  if (from.has_cardiaccyclepulmonaryarterypressure_mmhg()) {
    _internal_mutable_cardiaccyclepulmonaryarterypressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclepulmonaryarterypressure_mmhg());
  }
  if (from.has_cardiaccyclecentralvenouspressure_mmhg()) {
    _internal_mutable_cardiaccyclecentralvenouspressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccyclecentralvenouspressure_mmhg());
  }
  if (from.has_cardiaccycleskinflow_ml_per_s()) {
    _internal_mutable_cardiaccycleskinflow_ml_per_s()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_cardiaccycleskinflow_ml_per_s());
  }
  if (!(from.cardiaccycleperiod_s() <= 0 && from.cardiaccycleperiod_s() >= 0)) {
    _internal_set_cardiaccycleperiod_s(from._internal_cardiaccycleperiod_s());
  }
  if (!(from.currentcardiaccycleduration_s() <= 0 && from.currentcardiaccycleduration_s() >= 0)) {
    _internal_set_currentcardiaccycleduration_s(from._internal_currentcardiaccycleduration_s());
  }
  if (!(from.leftheartelastancemodifier() <= 0 && from.leftheartelastancemodifier() >= 0)) {
    _internal_set_leftheartelastancemodifier(from._internal_leftheartelastancemodifier());
  }
  if (!(from.leftheartelastance_mmhg_per_ml() <= 0 && from.leftheartelastance_mmhg_per_ml() >= 0)) {
    _internal_set_leftheartelastance_mmhg_per_ml(from._internal_leftheartelastance_mmhg_per_ml());
  }
  if (!(from.leftheartelastancemax_mmhg_per_ml() <= 0 && from.leftheartelastancemax_mmhg_per_ml() >= 0)) {
    _internal_set_leftheartelastancemax_mmhg_per_ml(from._internal_leftheartelastancemax_mmhg_per_ml());
  }
  if (!(from.leftheartelastancemin_mmhg_per_ml() <= 0 && from.leftheartelastancemin_mmhg_per_ml() >= 0)) {
    _internal_set_leftheartelastancemin_mmhg_per_ml(from._internal_leftheartelastancemin_mmhg_per_ml());
  }
  if (!(from.rightheartelastance_mmhg_per_ml() <= 0 && from.rightheartelastance_mmhg_per_ml() >= 0)) {
    _internal_set_rightheartelastance_mmhg_per_ml(from._internal_rightheartelastance_mmhg_per_ml());
  }
  if (!(from.rightheartelastancemax_mmhg_per_ml() <= 0 && from.rightheartelastancemax_mmhg_per_ml() >= 0)) {
    _internal_set_rightheartelastancemax_mmhg_per_ml(from._internal_rightheartelastancemax_mmhg_per_ml());
  }
  if (!(from.rightheartelastancemin_mmhg_per_ml() <= 0 && from.rightheartelastancemin_mmhg_per_ml() >= 0)) {
    _internal_set_rightheartelastancemin_mmhg_per_ml(from._internal_rightheartelastancemin_mmhg_per_ml());
  }
  if (!(from.compressiontime_s() <= 0 && from.compressiontime_s() >= 0)) {
    _internal_set_compressiontime_s(from._internal_compressiontime_s());
  }
  if (!(from.compressionratio() <= 0 && from.compressionratio() >= 0)) {
    _internal_set_compressionratio(from._internal_compressionratio());
  }
  if (!(from.compressionperiod_s() <= 0 && from.compressionperiod_s() >= 0)) {
    _internal_set_compressionperiod_s(from._internal_compressionperiod_s());
  }
  if (!(from.currentcardiaccycletime_s() <= 0 && from.currentcardiaccycletime_s() >= 0)) {
    _internal_set_currentcardiaccycletime_s(from._internal_currentcardiaccycletime_s());
  }
  if (!(from.cardiaccyclediastolicvolume_ml() <= 0 && from.cardiaccyclediastolicvolume_ml() >= 0)) {
    _internal_set_cardiaccyclediastolicvolume_ml(from._internal_cardiaccyclediastolicvolume_ml());
  }
  if (!(from.cardiaccycleaortapressurelow_mmhg() <= 0 && from.cardiaccycleaortapressurelow_mmhg() >= 0)) {
    _internal_set_cardiaccycleaortapressurelow_mmhg(from._internal_cardiaccycleaortapressurelow_mmhg());
  }
  if (!(from.cardiaccycleaortapressurehigh_mmhg() <= 0 && from.cardiaccycleaortapressurehigh_mmhg() >= 0)) {
    _internal_set_cardiaccycleaortapressurehigh_mmhg(from._internal_cardiaccycleaortapressurehigh_mmhg());
  }
  if (!(from.cardiaccyclepulmonaryarterypressurelow_mmhg() <= 0 && from.cardiaccyclepulmonaryarterypressurelow_mmhg() >= 0)) {
    _internal_set_cardiaccyclepulmonaryarterypressurelow_mmhg(from._internal_cardiaccyclepulmonaryarterypressurelow_mmhg());
  }
  if (!(from.cardiaccyclepulmonaryarterypressurehigh_mmhg() <= 0 && from.cardiaccyclepulmonaryarterypressurehigh_mmhg() >= 0)) {
    _internal_set_cardiaccyclepulmonaryarterypressurehigh_mmhg(from._internal_cardiaccyclepulmonaryarterypressurehigh_mmhg());
  }
  if (!(from.lastcardiaccyclemeanarterialco2partialpressure_mmhg() <= 0 && from.lastcardiaccyclemeanarterialco2partialpressure_mmhg() >= 0)) {
    _internal_set_lastcardiaccyclemeanarterialco2partialpressure_mmhg(from._internal_lastcardiaccyclemeanarterialco2partialpressure_mmhg());
  }
  if (!(from.cardiaccyclestrokevolume_ml() <= 0 && from.cardiaccyclestrokevolume_ml() >= 0)) {
    _internal_set_cardiaccyclestrokevolume_ml(from._internal_cardiaccyclestrokevolume_ml());
  }
  if (from.startsystole() != 0) {
    _internal_set_startsystole(from._internal_startsystole());
  }
  if (from.heartflowdetected() != 0) {
    _internal_set_heartflowdetected(from._internal_heartflowdetected());
  }
  if (from.entercardiacarrest() != 0) {
    _internal_set_entercardiacarrest(from._internal_entercardiacarrest());
  }
}

void CardiovascularData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.CardiovascularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardiovascularData::CopyFrom(const CardiovascularData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.CardiovascularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardiovascularData::IsInitialized() const {
  return true;
}

void CardiovascularData::InternalSwap(CardiovascularData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardiovascularData, entercardiacarrest_)
      + sizeof(CardiovascularData::entercardiacarrest_)
      - PROTOBUF_FIELD_OFFSET(CardiovascularData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardiovascularData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DrugData::_Internal {
 public:
  static const ::pulse::cdm::bind::DrugSystemData& common(const DrugData* msg);
};

const ::pulse::cdm::bind::DrugSystemData&
DrugData::_Internal::common(const DrugData* msg) {
  return *msg->common_;
}
void DrugData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
DrugData::DrugData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.DrugData)
}
DrugData::DrugData(const DrugData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::DrugSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.DrugData)
}

void DrugData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  common_ = nullptr;
}

DrugData::~DrugData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.DrugData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrugData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void DrugData::ArenaDtor(void* object) {
  DrugData* _this = reinterpret_cast< DrugData* >(object);
  (void)_this;
}
void DrugData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrugData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrugData& DrugData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrugData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void DrugData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.DrugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrugData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DrugSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrugData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.DrugData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DrugSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.DrugData)
  return target;
}

size_t DrugData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.DrugData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.DrugSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrugData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.DrugData)
  GOOGLE_DCHECK_NE(&from, this);
  const DrugData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrugData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.DrugData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.DrugData)
    MergeFrom(*source);
  }
}

void DrugData::MergeFrom(const DrugData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.DrugData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::DrugSystemData::MergeFrom(from._internal_common());
  }
}

void DrugData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.DrugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrugData::CopyFrom(const DrugData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.DrugData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrugData::IsInitialized() const {
  return true;
}

void DrugData::InternalSwap(DrugData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrugData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndocrineData::_Internal {
 public:
  static const ::pulse::cdm::bind::EndocrineSystemData& common(const EndocrineData* msg);
};

const ::pulse::cdm::bind::EndocrineSystemData&
EndocrineData::_Internal::common(const EndocrineData* msg) {
  return *msg->common_;
}
void EndocrineData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
EndocrineData::EndocrineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.EndocrineData)
}
EndocrineData::EndocrineData(const EndocrineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::EndocrineSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.EndocrineData)
}

void EndocrineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  common_ = nullptr;
}

EndocrineData::~EndocrineData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.EndocrineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndocrineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void EndocrineData::ArenaDtor(void* object) {
  EndocrineData* _this = reinterpret_cast< EndocrineData* >(object);
  (void)_this;
}
void EndocrineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndocrineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndocrineData& EndocrineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndocrineData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void EndocrineData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.EndocrineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndocrineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EndocrineSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndocrineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.EndocrineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EndocrineSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.EndocrineData)
  return target;
}

size_t EndocrineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.EndocrineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EndocrineSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndocrineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.EndocrineData)
  GOOGLE_DCHECK_NE(&from, this);
  const EndocrineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndocrineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.EndocrineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.EndocrineData)
    MergeFrom(*source);
  }
}

void EndocrineData::MergeFrom(const EndocrineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.EndocrineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::EndocrineSystemData::MergeFrom(from._internal_common());
  }
}

void EndocrineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.EndocrineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndocrineData::CopyFrom(const EndocrineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.EndocrineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndocrineData::IsInitialized() const {
  return true;
}

void EndocrineData::InternalSwap(EndocrineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndocrineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnergyData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnergySystemData& common(const EnergyData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& bloodph(const EnergyData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& bicarbonatemolarity_mmol_per_l(const EnergyData* msg);
};

const ::pulse::cdm::bind::EnergySystemData&
EnergyData::_Internal::common(const EnergyData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::RunningAverageData&
EnergyData::_Internal::bloodph(const EnergyData* msg) {
  return *msg->bloodph_;
}
const ::pulse::cdm::bind::RunningAverageData&
EnergyData::_Internal::bicarbonatemolarity_mmol_per_l(const EnergyData* msg) {
  return *msg->bicarbonatemolarity_mmol_per_l_;
}
void EnergyData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void EnergyData::clear_bloodph() {
  if (GetArena() == nullptr && bloodph_ != nullptr) {
    delete bloodph_;
  }
  bloodph_ = nullptr;
}
void EnergyData::clear_bicarbonatemolarity_mmol_per_l() {
  if (GetArena() == nullptr && bicarbonatemolarity_mmol_per_l_ != nullptr) {
    delete bicarbonatemolarity_mmol_per_l_;
  }
  bicarbonatemolarity_mmol_per_l_ = nullptr;
}
EnergyData::EnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.EnergyData)
}
EnergyData::EnergyData(const EnergyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::EnergySystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_bloodph()) {
    bloodph_ = new ::pulse::cdm::bind::RunningAverageData(*from.bloodph_);
  } else {
    bloodph_ = nullptr;
  }
  if (from._internal_has_bicarbonatemolarity_mmol_per_l()) {
    bicarbonatemolarity_mmol_per_l_ = new ::pulse::cdm::bind::RunningAverageData(*from.bicarbonatemolarity_mmol_per_l_);
  } else {
    bicarbonatemolarity_mmol_per_l_ = nullptr;
  }
  ::memcpy(&enduranceenergystore_j_, &from.enduranceenergystore_j_,
    static_cast<size_t>(reinterpret_cast<char*>(&usableenergystore_j_) -
    reinterpret_cast<char*>(&enduranceenergystore_j_)) + sizeof(usableenergystore_j_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.EnergyData)
}

void EnergyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&usableenergystore_j_) -
      reinterpret_cast<char*>(&common_)) + sizeof(usableenergystore_j_));
}

EnergyData::~EnergyData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.EnergyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnergyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete bloodph_;
  if (this != internal_default_instance()) delete bicarbonatemolarity_mmol_per_l_;
}

void EnergyData::ArenaDtor(void* object) {
  EnergyData* _this = reinterpret_cast< EnergyData* >(object);
  (void)_this;
}
void EnergyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnergyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnergyData& EnergyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnergyData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void EnergyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.EnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && bloodph_ != nullptr) {
    delete bloodph_;
  }
  bloodph_ = nullptr;
  if (GetArena() == nullptr && bicarbonatemolarity_mmol_per_l_ != nullptr) {
    delete bicarbonatemolarity_mmol_per_l_;
  }
  bicarbonatemolarity_mmol_per_l_ = nullptr;
  ::memset(&enduranceenergystore_j_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usableenergystore_j_) -
      reinterpret_cast<char*>(&enduranceenergystore_j_)) + sizeof(usableenergystore_j_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnergyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnergySystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double EnduranceEnergyStore_J = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          enduranceenergystore_j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MediumPowerEnergyStore_J = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          mediumpowerenergystore_j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PeakPowerEnergyStore_J = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          peakpowerenergystore_j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double UsableEnergyStore_J = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          usableenergystore_j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData BloodpH = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData BicarbonateMolarity_mmol_Per_L = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bicarbonatemolarity_mmol_per_l(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnergyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.EnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnergySystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // double EnduranceEnergyStore_J = 2;
  if (!(this->enduranceenergystore_j() <= 0 && this->enduranceenergystore_j() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_enduranceenergystore_j(), target);
  }

  // double MediumPowerEnergyStore_J = 3;
  if (!(this->mediumpowerenergystore_j() <= 0 && this->mediumpowerenergystore_j() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mediumpowerenergystore_j(), target);
  }

  // double PeakPowerEnergyStore_J = 4;
  if (!(this->peakpowerenergystore_j() <= 0 && this->peakpowerenergystore_j() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_peakpowerenergystore_j(), target);
  }

  // double UsableEnergyStore_J = 5;
  if (!(this->usableenergystore_j() <= 0 && this->usableenergystore_j() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_usableenergystore_j(), target);
  }

  // .pulse.cdm.bind.RunningAverageData BloodpH = 6;
  if (this->has_bloodph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bloodph(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData BicarbonateMolarity_mmol_Per_L = 7;
  if (this->has_bicarbonatemolarity_mmol_per_l()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bicarbonatemolarity_mmol_per_l(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.EnergyData)
  return target;
}

size_t EnergyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.EnergyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnergySystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.RunningAverageData BloodpH = 6;
  if (this->has_bloodph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodph_);
  }

  // .pulse.cdm.bind.RunningAverageData BicarbonateMolarity_mmol_Per_L = 7;
  if (this->has_bicarbonatemolarity_mmol_per_l()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bicarbonatemolarity_mmol_per_l_);
  }

  // double EnduranceEnergyStore_J = 2;
  if (!(this->enduranceenergystore_j() <= 0 && this->enduranceenergystore_j() >= 0)) {
    total_size += 1 + 8;
  }

  // double MediumPowerEnergyStore_J = 3;
  if (!(this->mediumpowerenergystore_j() <= 0 && this->mediumpowerenergystore_j() >= 0)) {
    total_size += 1 + 8;
  }

  // double PeakPowerEnergyStore_J = 4;
  if (!(this->peakpowerenergystore_j() <= 0 && this->peakpowerenergystore_j() >= 0)) {
    total_size += 1 + 8;
  }

  // double UsableEnergyStore_J = 5;
  if (!(this->usableenergystore_j() <= 0 && this->usableenergystore_j() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnergyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.EnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnergyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnergyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.EnergyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.EnergyData)
    MergeFrom(*source);
  }
}

void EnergyData::MergeFrom(const EnergyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.EnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::EnergySystemData::MergeFrom(from._internal_common());
  }
  if (from.has_bloodph()) {
    _internal_mutable_bloodph()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_bloodph());
  }
  if (from.has_bicarbonatemolarity_mmol_per_l()) {
    _internal_mutable_bicarbonatemolarity_mmol_per_l()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_bicarbonatemolarity_mmol_per_l());
  }
  if (!(from.enduranceenergystore_j() <= 0 && from.enduranceenergystore_j() >= 0)) {
    _internal_set_enduranceenergystore_j(from._internal_enduranceenergystore_j());
  }
  if (!(from.mediumpowerenergystore_j() <= 0 && from.mediumpowerenergystore_j() >= 0)) {
    _internal_set_mediumpowerenergystore_j(from._internal_mediumpowerenergystore_j());
  }
  if (!(from.peakpowerenergystore_j() <= 0 && from.peakpowerenergystore_j() >= 0)) {
    _internal_set_peakpowerenergystore_j(from._internal_peakpowerenergystore_j());
  }
  if (!(from.usableenergystore_j() <= 0 && from.usableenergystore_j() >= 0)) {
    _internal_set_usableenergystore_j(from._internal_usableenergystore_j());
  }
}

void EnergyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.EnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyData::CopyFrom(const EnergyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.EnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyData::IsInitialized() const {
  return true;
}

void EnergyData::InternalSwap(EnergyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnergyData, usableenergystore_j_)
      + sizeof(EnergyData::usableenergystore_j_)
      - PROTOBUF_FIELD_OFFSET(EnergyData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnergyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GastrointestinalData::_Internal {
 public:
  static const ::pulse::cdm::bind::GastrointestinalSystemData& common(const GastrointestinalData* msg);
};

const ::pulse::cdm::bind::GastrointestinalSystemData&
GastrointestinalData::_Internal::common(const GastrointestinalData* msg) {
  return *msg->common_;
}
void GastrointestinalData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
GastrointestinalData::GastrointestinalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.GastrointestinalData)
}
GastrointestinalData::GastrointestinalData(const GastrointestinalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::GastrointestinalSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.GastrointestinalData)
}

void GastrointestinalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  common_ = nullptr;
}

GastrointestinalData::~GastrointestinalData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.GastrointestinalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GastrointestinalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void GastrointestinalData::ArenaDtor(void* object) {
  GastrointestinalData* _this = reinterpret_cast< GastrointestinalData* >(object);
  (void)_this;
}
void GastrointestinalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GastrointestinalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GastrointestinalData& GastrointestinalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GastrointestinalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void GastrointestinalData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.GastrointestinalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GastrointestinalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.GastrointestinalSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GastrointestinalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.GastrointestinalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.GastrointestinalSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.GastrointestinalData)
  return target;
}

size_t GastrointestinalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.GastrointestinalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.GastrointestinalSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GastrointestinalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.GastrointestinalData)
  GOOGLE_DCHECK_NE(&from, this);
  const GastrointestinalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GastrointestinalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.GastrointestinalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.GastrointestinalData)
    MergeFrom(*source);
  }
}

void GastrointestinalData::MergeFrom(const GastrointestinalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.GastrointestinalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::GastrointestinalSystemData::MergeFrom(from._internal_common());
  }
}

void GastrointestinalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.GastrointestinalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GastrointestinalData::CopyFrom(const GastrointestinalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.GastrointestinalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GastrointestinalData::IsInitialized() const {
  return true;
}

void GastrointestinalData::InternalSwap(GastrointestinalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GastrointestinalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HepaticData::_Internal {
 public:
  static const ::pulse::cdm::bind::HepaticSystemData& common(const HepaticData* msg);
};

const ::pulse::cdm::bind::HepaticSystemData&
HepaticData::_Internal::common(const HepaticData* msg) {
  return *msg->common_;
}
void HepaticData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
HepaticData::HepaticData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.HepaticData)
}
HepaticData::HepaticData(const HepaticData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::HepaticSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.HepaticData)
}

void HepaticData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  common_ = nullptr;
}

HepaticData::~HepaticData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.HepaticData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HepaticData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void HepaticData::ArenaDtor(void* object) {
  HepaticData* _this = reinterpret_cast< HepaticData* >(object);
  (void)_this;
}
void HepaticData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HepaticData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HepaticData& HepaticData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HepaticData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void HepaticData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.HepaticData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HepaticData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.HepaticSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HepaticData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.HepaticData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.HepaticSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.HepaticData)
  return target;
}

size_t HepaticData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.HepaticData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.HepaticSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HepaticData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.HepaticData)
  GOOGLE_DCHECK_NE(&from, this);
  const HepaticData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HepaticData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.HepaticData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.HepaticData)
    MergeFrom(*source);
  }
}

void HepaticData::MergeFrom(const HepaticData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.HepaticData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::HepaticSystemData::MergeFrom(from._internal_common());
  }
}

void HepaticData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.HepaticData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HepaticData::CopyFrom(const HepaticData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.HepaticData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HepaticData::IsInitialized() const {
  return true;
}

void HepaticData::InternalSwap(HepaticData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HepaticData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NervousData::_Internal {
 public:
  static const ::pulse::cdm::bind::NervousSystemData& common(const NervousData* msg);
};

const ::pulse::cdm::bind::NervousSystemData&
NervousData::_Internal::common(const NervousData* msg) {
  return *msg->common_;
}
void NervousData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
NervousData::NervousData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.NervousData)
}
NervousData::NervousData(const NervousData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::NervousSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&arterialoxygenbaseline_mmhg_, &from.arterialoxygenbaseline_mmhg_,
    static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorsaturationstatus_) -
    reinterpret_cast<char*>(&arterialoxygenbaseline_mmhg_)) + sizeof(baroreceptorsaturationstatus_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.NervousData)
}

void NervousData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorsaturationstatus_) -
      reinterpret_cast<char*>(&common_)) + sizeof(baroreceptorsaturationstatus_));
}

NervousData::~NervousData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.NervousData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NervousData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void NervousData::ArenaDtor(void* object) {
  NervousData* _this = reinterpret_cast< NervousData* >(object);
  (void)_this;
}
void NervousData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NervousData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NervousData& NervousData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NervousData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void NervousData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.NervousData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&arterialoxygenbaseline_mmhg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baroreceptorsaturationstatus_) -
      reinterpret_cast<char*>(&arterialoxygenbaseline_mmhg_)) + sizeof(baroreceptorsaturationstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NervousData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.NervousSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ArterialOxygenBaseline_mmHg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          arterialoxygenbaseline_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ArterialCarbonDioxideBaseline_mmHg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          arterialcarbondioxidebaseline_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool BaroreceptorFeedbackStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          baroreceptorfeedbackstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BaroreceptorSaturationStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          baroreceptorsaturationstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double BaroreceptorActiveTime_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          baroreceptoractivetime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BaroreceptorEffectivenessParameter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          baroreceptoreffectivenessparameter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BaroreceptorMeanArterialPressureBaseline_mmHg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          baroreceptormeanarterialpressurebaseline_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BaroreceptorSaturationTime_s = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          baroreceptorsaturationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LastMeanArterialPressure_mmHg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          lastmeanarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PreviousBloodVolume_mL = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          previousbloodvolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalSympatheticFraction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          totalsympatheticfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NervousData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.NervousData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.NervousSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // double ArterialOxygenBaseline_mmHg = 2;
  if (!(this->arterialoxygenbaseline_mmhg() <= 0 && this->arterialoxygenbaseline_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_arterialoxygenbaseline_mmhg(), target);
  }

  // double ArterialCarbonDioxideBaseline_mmHg = 3;
  if (!(this->arterialcarbondioxidebaseline_mmhg() <= 0 && this->arterialcarbondioxidebaseline_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_arterialcarbondioxidebaseline_mmhg(), target);
  }

  // bool BaroreceptorFeedbackStatus = 4;
  if (this->baroreceptorfeedbackstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_baroreceptorfeedbackstatus(), target);
  }

  // bool BaroreceptorSaturationStatus = 5;
  if (this->baroreceptorsaturationstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_baroreceptorsaturationstatus(), target);
  }

  // double BaroreceptorActiveTime_s = 6;
  if (!(this->baroreceptoractivetime_s() <= 0 && this->baroreceptoractivetime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_baroreceptoractivetime_s(), target);
  }

  // double BaroreceptorEffectivenessParameter = 7;
  if (!(this->baroreceptoreffectivenessparameter() <= 0 && this->baroreceptoreffectivenessparameter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_baroreceptoreffectivenessparameter(), target);
  }

  // double BaroreceptorMeanArterialPressureBaseline_mmHg = 8;
  if (!(this->baroreceptormeanarterialpressurebaseline_mmhg() <= 0 && this->baroreceptormeanarterialpressurebaseline_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_baroreceptormeanarterialpressurebaseline_mmhg(), target);
  }

  // double BaroreceptorSaturationTime_s = 9;
  if (!(this->baroreceptorsaturationtime_s() <= 0 && this->baroreceptorsaturationtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_baroreceptorsaturationtime_s(), target);
  }

  // double LastMeanArterialPressure_mmHg = 10;
  if (!(this->lastmeanarterialpressure_mmhg() <= 0 && this->lastmeanarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lastmeanarterialpressure_mmhg(), target);
  }

  // double PreviousBloodVolume_mL = 11;
  if (!(this->previousbloodvolume_ml() <= 0 && this->previousbloodvolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_previousbloodvolume_ml(), target);
  }

  // double TotalSympatheticFraction = 12;
  if (!(this->totalsympatheticfraction() <= 0 && this->totalsympatheticfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_totalsympatheticfraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.NervousData)
  return target;
}

size_t NervousData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.NervousData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.NervousSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double ArterialOxygenBaseline_mmHg = 2;
  if (!(this->arterialoxygenbaseline_mmhg() <= 0 && this->arterialoxygenbaseline_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double ArterialCarbonDioxideBaseline_mmHg = 3;
  if (!(this->arterialcarbondioxidebaseline_mmhg() <= 0 && this->arterialcarbondioxidebaseline_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double BaroreceptorActiveTime_s = 6;
  if (!(this->baroreceptoractivetime_s() <= 0 && this->baroreceptoractivetime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double BaroreceptorEffectivenessParameter = 7;
  if (!(this->baroreceptoreffectivenessparameter() <= 0 && this->baroreceptoreffectivenessparameter() >= 0)) {
    total_size += 1 + 8;
  }

  // double BaroreceptorMeanArterialPressureBaseline_mmHg = 8;
  if (!(this->baroreceptormeanarterialpressurebaseline_mmhg() <= 0 && this->baroreceptormeanarterialpressurebaseline_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double BaroreceptorSaturationTime_s = 9;
  if (!(this->baroreceptorsaturationtime_s() <= 0 && this->baroreceptorsaturationtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double LastMeanArterialPressure_mmHg = 10;
  if (!(this->lastmeanarterialpressure_mmhg() <= 0 && this->lastmeanarterialpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double PreviousBloodVolume_mL = 11;
  if (!(this->previousbloodvolume_ml() <= 0 && this->previousbloodvolume_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double TotalSympatheticFraction = 12;
  if (!(this->totalsympatheticfraction() <= 0 && this->totalsympatheticfraction() >= 0)) {
    total_size += 1 + 8;
  }

  // bool BaroreceptorFeedbackStatus = 4;
  if (this->baroreceptorfeedbackstatus() != 0) {
    total_size += 1 + 1;
  }

  // bool BaroreceptorSaturationStatus = 5;
  if (this->baroreceptorsaturationstatus() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NervousData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.NervousData)
  GOOGLE_DCHECK_NE(&from, this);
  const NervousData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NervousData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.NervousData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.NervousData)
    MergeFrom(*source);
  }
}

void NervousData::MergeFrom(const NervousData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.NervousData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::NervousSystemData::MergeFrom(from._internal_common());
  }
  if (!(from.arterialoxygenbaseline_mmhg() <= 0 && from.arterialoxygenbaseline_mmhg() >= 0)) {
    _internal_set_arterialoxygenbaseline_mmhg(from._internal_arterialoxygenbaseline_mmhg());
  }
  if (!(from.arterialcarbondioxidebaseline_mmhg() <= 0 && from.arterialcarbondioxidebaseline_mmhg() >= 0)) {
    _internal_set_arterialcarbondioxidebaseline_mmhg(from._internal_arterialcarbondioxidebaseline_mmhg());
  }
  if (!(from.baroreceptoractivetime_s() <= 0 && from.baroreceptoractivetime_s() >= 0)) {
    _internal_set_baroreceptoractivetime_s(from._internal_baroreceptoractivetime_s());
  }
  if (!(from.baroreceptoreffectivenessparameter() <= 0 && from.baroreceptoreffectivenessparameter() >= 0)) {
    _internal_set_baroreceptoreffectivenessparameter(from._internal_baroreceptoreffectivenessparameter());
  }
  if (!(from.baroreceptormeanarterialpressurebaseline_mmhg() <= 0 && from.baroreceptormeanarterialpressurebaseline_mmhg() >= 0)) {
    _internal_set_baroreceptormeanarterialpressurebaseline_mmhg(from._internal_baroreceptormeanarterialpressurebaseline_mmhg());
  }
  if (!(from.baroreceptorsaturationtime_s() <= 0 && from.baroreceptorsaturationtime_s() >= 0)) {
    _internal_set_baroreceptorsaturationtime_s(from._internal_baroreceptorsaturationtime_s());
  }
  if (!(from.lastmeanarterialpressure_mmhg() <= 0 && from.lastmeanarterialpressure_mmhg() >= 0)) {
    _internal_set_lastmeanarterialpressure_mmhg(from._internal_lastmeanarterialpressure_mmhg());
  }
  if (!(from.previousbloodvolume_ml() <= 0 && from.previousbloodvolume_ml() >= 0)) {
    _internal_set_previousbloodvolume_ml(from._internal_previousbloodvolume_ml());
  }
  if (!(from.totalsympatheticfraction() <= 0 && from.totalsympatheticfraction() >= 0)) {
    _internal_set_totalsympatheticfraction(from._internal_totalsympatheticfraction());
  }
  if (from.baroreceptorfeedbackstatus() != 0) {
    _internal_set_baroreceptorfeedbackstatus(from._internal_baroreceptorfeedbackstatus());
  }
  if (from.baroreceptorsaturationstatus() != 0) {
    _internal_set_baroreceptorsaturationstatus(from._internal_baroreceptorsaturationstatus());
  }
}

void NervousData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.NervousData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NervousData::CopyFrom(const NervousData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.NervousData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NervousData::IsInitialized() const {
  return true;
}

void NervousData::InternalSwap(NervousData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NervousData, baroreceptorsaturationstatus_)
      + sizeof(NervousData::baroreceptorsaturationstatus_)
      - PROTOBUF_FIELD_OFFSET(NervousData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NervousData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RenalData::_Internal {
 public:
  static const ::pulse::cdm::bind::RenalSystemData& common(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& urineproductionrate_ml_per_min(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& urineosmolarity_mosm_per_l(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& sodiumconcentration_mg_per_ml(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& sodiumexcretionrate_mg_per_min(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& leftsodiumflow_mg_per_s(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& rightsodiumflow_mg_per_s(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& leftrenalarterialpressure_mmhg(const RenalData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& rightrenalarterialpressure_mmhg(const RenalData* msg);
};

const ::pulse::cdm::bind::RenalSystemData&
RenalData::_Internal::common(const RenalData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::urineproductionrate_ml_per_min(const RenalData* msg) {
  return *msg->urineproductionrate_ml_per_min_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::urineosmolarity_mosm_per_l(const RenalData* msg) {
  return *msg->urineosmolarity_mosm_per_l_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::sodiumconcentration_mg_per_ml(const RenalData* msg) {
  return *msg->sodiumconcentration_mg_per_ml_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::sodiumexcretionrate_mg_per_min(const RenalData* msg) {
  return *msg->sodiumexcretionrate_mg_per_min_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::leftsodiumflow_mg_per_s(const RenalData* msg) {
  return *msg->leftsodiumflow_mg_per_s_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::rightsodiumflow_mg_per_s(const RenalData* msg) {
  return *msg->rightsodiumflow_mg_per_s_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::leftrenalarterialpressure_mmhg(const RenalData* msg) {
  return *msg->leftrenalarterialpressure_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
RenalData::_Internal::rightrenalarterialpressure_mmhg(const RenalData* msg) {
  return *msg->rightrenalarterialpressure_mmhg_;
}
void RenalData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void RenalData::clear_urineproductionrate_ml_per_min() {
  if (GetArena() == nullptr && urineproductionrate_ml_per_min_ != nullptr) {
    delete urineproductionrate_ml_per_min_;
  }
  urineproductionrate_ml_per_min_ = nullptr;
}
void RenalData::clear_urineosmolarity_mosm_per_l() {
  if (GetArena() == nullptr && urineosmolarity_mosm_per_l_ != nullptr) {
    delete urineosmolarity_mosm_per_l_;
  }
  urineosmolarity_mosm_per_l_ = nullptr;
}
void RenalData::clear_sodiumconcentration_mg_per_ml() {
  if (GetArena() == nullptr && sodiumconcentration_mg_per_ml_ != nullptr) {
    delete sodiumconcentration_mg_per_ml_;
  }
  sodiumconcentration_mg_per_ml_ = nullptr;
}
void RenalData::clear_sodiumexcretionrate_mg_per_min() {
  if (GetArena() == nullptr && sodiumexcretionrate_mg_per_min_ != nullptr) {
    delete sodiumexcretionrate_mg_per_min_;
  }
  sodiumexcretionrate_mg_per_min_ = nullptr;
}
void RenalData::clear_leftsodiumflow_mg_per_s() {
  if (GetArena() == nullptr && leftsodiumflow_mg_per_s_ != nullptr) {
    delete leftsodiumflow_mg_per_s_;
  }
  leftsodiumflow_mg_per_s_ = nullptr;
}
void RenalData::clear_rightsodiumflow_mg_per_s() {
  if (GetArena() == nullptr && rightsodiumflow_mg_per_s_ != nullptr) {
    delete rightsodiumflow_mg_per_s_;
  }
  rightsodiumflow_mg_per_s_ = nullptr;
}
void RenalData::clear_leftrenalarterialpressure_mmhg() {
  if (GetArena() == nullptr && leftrenalarterialpressure_mmhg_ != nullptr) {
    delete leftrenalarterialpressure_mmhg_;
  }
  leftrenalarterialpressure_mmhg_ = nullptr;
}
void RenalData::clear_rightrenalarterialpressure_mmhg() {
  if (GetArena() == nullptr && rightrenalarterialpressure_mmhg_ != nullptr) {
    delete rightrenalarterialpressure_mmhg_;
  }
  rightrenalarterialpressure_mmhg_ = nullptr;
}
RenalData::RenalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.RenalData)
}
RenalData::RenalData(const RenalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::RenalSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_urineproductionrate_ml_per_min()) {
    urineproductionrate_ml_per_min_ = new ::pulse::cdm::bind::RunningAverageData(*from.urineproductionrate_ml_per_min_);
  } else {
    urineproductionrate_ml_per_min_ = nullptr;
  }
  if (from._internal_has_urineosmolarity_mosm_per_l()) {
    urineosmolarity_mosm_per_l_ = new ::pulse::cdm::bind::RunningAverageData(*from.urineosmolarity_mosm_per_l_);
  } else {
    urineosmolarity_mosm_per_l_ = nullptr;
  }
  if (from._internal_has_sodiumconcentration_mg_per_ml()) {
    sodiumconcentration_mg_per_ml_ = new ::pulse::cdm::bind::RunningAverageData(*from.sodiumconcentration_mg_per_ml_);
  } else {
    sodiumconcentration_mg_per_ml_ = nullptr;
  }
  if (from._internal_has_sodiumexcretionrate_mg_per_min()) {
    sodiumexcretionrate_mg_per_min_ = new ::pulse::cdm::bind::RunningAverageData(*from.sodiumexcretionrate_mg_per_min_);
  } else {
    sodiumexcretionrate_mg_per_min_ = nullptr;
  }
  if (from._internal_has_leftsodiumflow_mg_per_s()) {
    leftsodiumflow_mg_per_s_ = new ::pulse::cdm::bind::RunningAverageData(*from.leftsodiumflow_mg_per_s_);
  } else {
    leftsodiumflow_mg_per_s_ = nullptr;
  }
  if (from._internal_has_rightsodiumflow_mg_per_s()) {
    rightsodiumflow_mg_per_s_ = new ::pulse::cdm::bind::RunningAverageData(*from.rightsodiumflow_mg_per_s_);
  } else {
    rightsodiumflow_mg_per_s_ = nullptr;
  }
  if (from._internal_has_leftrenalarterialpressure_mmhg()) {
    leftrenalarterialpressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.leftrenalarterialpressure_mmhg_);
  } else {
    leftrenalarterialpressure_mmhg_ = nullptr;
  }
  if (from._internal_has_rightrenalarterialpressure_mmhg()) {
    rightrenalarterialpressure_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.rightrenalarterialpressure_mmhg_);
  } else {
    rightrenalarterialpressure_mmhg_ = nullptr;
  }
  ::memcpy(&leftafferentresistance_mmhg_s_per_ml_, &from.leftafferentresistance_mmhg_s_per_ml_,
    static_cast<size_t>(reinterpret_cast<char*>(&urinating_) -
    reinterpret_cast<char*>(&leftafferentresistance_mmhg_s_per_ml_)) + sizeof(urinating_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.RenalData)
}

void RenalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&urinating_) -
      reinterpret_cast<char*>(&common_)) + sizeof(urinating_));
}

RenalData::~RenalData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.RenalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete urineproductionrate_ml_per_min_;
  if (this != internal_default_instance()) delete urineosmolarity_mosm_per_l_;
  if (this != internal_default_instance()) delete sodiumconcentration_mg_per_ml_;
  if (this != internal_default_instance()) delete sodiumexcretionrate_mg_per_min_;
  if (this != internal_default_instance()) delete leftsodiumflow_mg_per_s_;
  if (this != internal_default_instance()) delete rightsodiumflow_mg_per_s_;
  if (this != internal_default_instance()) delete leftrenalarterialpressure_mmhg_;
  if (this != internal_default_instance()) delete rightrenalarterialpressure_mmhg_;
}

void RenalData::ArenaDtor(void* object) {
  RenalData* _this = reinterpret_cast< RenalData* >(object);
  (void)_this;
}
void RenalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenalData& RenalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenalData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void RenalData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.RenalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && urineproductionrate_ml_per_min_ != nullptr) {
    delete urineproductionrate_ml_per_min_;
  }
  urineproductionrate_ml_per_min_ = nullptr;
  if (GetArena() == nullptr && urineosmolarity_mosm_per_l_ != nullptr) {
    delete urineosmolarity_mosm_per_l_;
  }
  urineosmolarity_mosm_per_l_ = nullptr;
  if (GetArena() == nullptr && sodiumconcentration_mg_per_ml_ != nullptr) {
    delete sodiumconcentration_mg_per_ml_;
  }
  sodiumconcentration_mg_per_ml_ = nullptr;
  if (GetArena() == nullptr && sodiumexcretionrate_mg_per_min_ != nullptr) {
    delete sodiumexcretionrate_mg_per_min_;
  }
  sodiumexcretionrate_mg_per_min_ = nullptr;
  if (GetArena() == nullptr && leftsodiumflow_mg_per_s_ != nullptr) {
    delete leftsodiumflow_mg_per_s_;
  }
  leftsodiumflow_mg_per_s_ = nullptr;
  if (GetArena() == nullptr && rightsodiumflow_mg_per_s_ != nullptr) {
    delete rightsodiumflow_mg_per_s_;
  }
  rightsodiumflow_mg_per_s_ = nullptr;
  if (GetArena() == nullptr && leftrenalarterialpressure_mmhg_ != nullptr) {
    delete leftrenalarterialpressure_mmhg_;
  }
  leftrenalarterialpressure_mmhg_ = nullptr;
  if (GetArena() == nullptr && rightrenalarterialpressure_mmhg_ != nullptr) {
    delete rightrenalarterialpressure_mmhg_;
  }
  rightrenalarterialpressure_mmhg_ = nullptr;
  ::memset(&leftafferentresistance_mmhg_s_per_ml_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&urinating_) -
      reinterpret_cast<char*>(&leftafferentresistance_mmhg_s_per_ml_)) + sizeof(urinating_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.RenalSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Urinating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          urinating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double LeftAfferentResistance_mmHg_s_Per_mL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          leftafferentresistance_mmhg_s_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightAfferentResistance_mmHg_s_Per_mL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rightafferentresistance_mmhg_s_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftSodiumFlowSetPoint_mg_Per_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          leftsodiumflowsetpoint_mg_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightSodiumFlowSetPoint_mg_Per_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          rightsodiumflowsetpoint_mg_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData UrineProductionRate_mL_Per_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineproductionrate_ml_per_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData UrineOsmolarity_mOsm_Per_L = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineosmolarity_mosm_per_l(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData SodiumConcentration_mg_Per_mL = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sodiumconcentration_mg_per_ml(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData SodiumExcretionRate_mg_Per_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sodiumexcretionrate_mg_per_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData LeftSodiumFlow_mg_Per_s = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftsodiumflow_mg_per_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData RightSodiumFlow_mg_Per_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightsodiumflow_mg_per_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData LeftRenalArterialPressure_mmHg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftrenalarterialpressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData RightRenalArterialPressure_mmHg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightrenalarterialpressure_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.RenalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.RenalSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // bool Urinating = 2;
  if (this->urinating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_urinating(), target);
  }

  // double LeftAfferentResistance_mmHg_s_Per_mL = 3;
  if (!(this->leftafferentresistance_mmhg_s_per_ml() <= 0 && this->leftafferentresistance_mmhg_s_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_leftafferentresistance_mmhg_s_per_ml(), target);
  }

  // double RightAfferentResistance_mmHg_s_Per_mL = 4;
  if (!(this->rightafferentresistance_mmhg_s_per_ml() <= 0 && this->rightafferentresistance_mmhg_s_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rightafferentresistance_mmhg_s_per_ml(), target);
  }

  // double LeftSodiumFlowSetPoint_mg_Per_s = 5;
  if (!(this->leftsodiumflowsetpoint_mg_per_s() <= 0 && this->leftsodiumflowsetpoint_mg_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_leftsodiumflowsetpoint_mg_per_s(), target);
  }

  // double RightSodiumFlowSetPoint_mg_Per_s = 6;
  if (!(this->rightsodiumflowsetpoint_mg_per_s() <= 0 && this->rightsodiumflowsetpoint_mg_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_rightsodiumflowsetpoint_mg_per_s(), target);
  }

  // .pulse.cdm.bind.RunningAverageData UrineProductionRate_mL_Per_min = 7;
  if (this->has_urineproductionrate_ml_per_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::urineproductionrate_ml_per_min(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData UrineOsmolarity_mOsm_Per_L = 8;
  if (this->has_urineosmolarity_mosm_per_l()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::urineosmolarity_mosm_per_l(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData SodiumConcentration_mg_Per_mL = 9;
  if (this->has_sodiumconcentration_mg_per_ml()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sodiumconcentration_mg_per_ml(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData SodiumExcretionRate_mg_Per_min = 10;
  if (this->has_sodiumexcretionrate_mg_per_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sodiumexcretionrate_mg_per_min(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData LeftSodiumFlow_mg_Per_s = 11;
  if (this->has_leftsodiumflow_mg_per_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::leftsodiumflow_mg_per_s(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData RightSodiumFlow_mg_Per_s = 12;
  if (this->has_rightsodiumflow_mg_per_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rightsodiumflow_mg_per_s(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData LeftRenalArterialPressure_mmHg = 13;
  if (this->has_leftrenalarterialpressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::leftrenalarterialpressure_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData RightRenalArterialPressure_mmHg = 14;
  if (this->has_rightrenalarterialpressure_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::rightrenalarterialpressure_mmhg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.RenalData)
  return target;
}

size_t RenalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.RenalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.RenalSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.RunningAverageData UrineProductionRate_mL_Per_min = 7;
  if (this->has_urineproductionrate_ml_per_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineproductionrate_ml_per_min_);
  }

  // .pulse.cdm.bind.RunningAverageData UrineOsmolarity_mOsm_Per_L = 8;
  if (this->has_urineosmolarity_mosm_per_l()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineosmolarity_mosm_per_l_);
  }

  // .pulse.cdm.bind.RunningAverageData SodiumConcentration_mg_Per_mL = 9;
  if (this->has_sodiumconcentration_mg_per_ml()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sodiumconcentration_mg_per_ml_);
  }

  // .pulse.cdm.bind.RunningAverageData SodiumExcretionRate_mg_Per_min = 10;
  if (this->has_sodiumexcretionrate_mg_per_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sodiumexcretionrate_mg_per_min_);
  }

  // .pulse.cdm.bind.RunningAverageData LeftSodiumFlow_mg_Per_s = 11;
  if (this->has_leftsodiumflow_mg_per_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftsodiumflow_mg_per_s_);
  }

  // .pulse.cdm.bind.RunningAverageData RightSodiumFlow_mg_Per_s = 12;
  if (this->has_rightsodiumflow_mg_per_s()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightsodiumflow_mg_per_s_);
  }

  // .pulse.cdm.bind.RunningAverageData LeftRenalArterialPressure_mmHg = 13;
  if (this->has_leftrenalarterialpressure_mmhg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftrenalarterialpressure_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData RightRenalArterialPressure_mmHg = 14;
  if (this->has_rightrenalarterialpressure_mmhg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightrenalarterialpressure_mmhg_);
  }

  // double LeftAfferentResistance_mmHg_s_Per_mL = 3;
  if (!(this->leftafferentresistance_mmhg_s_per_ml() <= 0 && this->leftafferentresistance_mmhg_s_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RightAfferentResistance_mmHg_s_Per_mL = 4;
  if (!(this->rightafferentresistance_mmhg_s_per_ml() <= 0 && this->rightafferentresistance_mmhg_s_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double LeftSodiumFlowSetPoint_mg_Per_s = 5;
  if (!(this->leftsodiumflowsetpoint_mg_per_s() <= 0 && this->leftsodiumflowsetpoint_mg_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double RightSodiumFlowSetPoint_mg_Per_s = 6;
  if (!(this->rightsodiumflowsetpoint_mg_per_s() <= 0 && this->rightsodiumflowsetpoint_mg_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // bool Urinating = 2;
  if (this->urinating() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.RenalData)
  GOOGLE_DCHECK_NE(&from, this);
  const RenalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.RenalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.RenalData)
    MergeFrom(*source);
  }
}

void RenalData::MergeFrom(const RenalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.RenalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::RenalSystemData::MergeFrom(from._internal_common());
  }
  if (from.has_urineproductionrate_ml_per_min()) {
    _internal_mutable_urineproductionrate_ml_per_min()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_urineproductionrate_ml_per_min());
  }
  if (from.has_urineosmolarity_mosm_per_l()) {
    _internal_mutable_urineosmolarity_mosm_per_l()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_urineosmolarity_mosm_per_l());
  }
  if (from.has_sodiumconcentration_mg_per_ml()) {
    _internal_mutable_sodiumconcentration_mg_per_ml()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_sodiumconcentration_mg_per_ml());
  }
  if (from.has_sodiumexcretionrate_mg_per_min()) {
    _internal_mutable_sodiumexcretionrate_mg_per_min()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_sodiumexcretionrate_mg_per_min());
  }
  if (from.has_leftsodiumflow_mg_per_s()) {
    _internal_mutable_leftsodiumflow_mg_per_s()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_leftsodiumflow_mg_per_s());
  }
  if (from.has_rightsodiumflow_mg_per_s()) {
    _internal_mutable_rightsodiumflow_mg_per_s()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_rightsodiumflow_mg_per_s());
  }
  if (from.has_leftrenalarterialpressure_mmhg()) {
    _internal_mutable_leftrenalarterialpressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_leftrenalarterialpressure_mmhg());
  }
  if (from.has_rightrenalarterialpressure_mmhg()) {
    _internal_mutable_rightrenalarterialpressure_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_rightrenalarterialpressure_mmhg());
  }
  if (!(from.leftafferentresistance_mmhg_s_per_ml() <= 0 && from.leftafferentresistance_mmhg_s_per_ml() >= 0)) {
    _internal_set_leftafferentresistance_mmhg_s_per_ml(from._internal_leftafferentresistance_mmhg_s_per_ml());
  }
  if (!(from.rightafferentresistance_mmhg_s_per_ml() <= 0 && from.rightafferentresistance_mmhg_s_per_ml() >= 0)) {
    _internal_set_rightafferentresistance_mmhg_s_per_ml(from._internal_rightafferentresistance_mmhg_s_per_ml());
  }
  if (!(from.leftsodiumflowsetpoint_mg_per_s() <= 0 && from.leftsodiumflowsetpoint_mg_per_s() >= 0)) {
    _internal_set_leftsodiumflowsetpoint_mg_per_s(from._internal_leftsodiumflowsetpoint_mg_per_s());
  }
  if (!(from.rightsodiumflowsetpoint_mg_per_s() <= 0 && from.rightsodiumflowsetpoint_mg_per_s() >= 0)) {
    _internal_set_rightsodiumflowsetpoint_mg_per_s(from._internal_rightsodiumflowsetpoint_mg_per_s());
  }
  if (from.urinating() != 0) {
    _internal_set_urinating(from._internal_urinating());
  }
}

void RenalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.RenalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenalData::CopyFrom(const RenalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.RenalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenalData::IsInitialized() const {
  return true;
}

void RenalData::InternalSwap(RenalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenalData, urinating_)
      + sizeof(RenalData::urinating_)
      - PROTOBUF_FIELD_OFFSET(RenalData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RespiratoryData::_Internal {
 public:
  static const ::pulse::cdm::bind::RespiratorySystemData& common(const RespiratoryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& bloodphrunningaverage(const RespiratoryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& meanairwaypressure_cmh2o(const RespiratoryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& arterialo2runningaverage_mmhg(const RespiratoryData* msg);
  static const ::pulse::cdm::bind::RunningAverageData& arterialco2runningaverage_mmhg(const RespiratoryData* msg);
};

const ::pulse::cdm::bind::RespiratorySystemData&
RespiratoryData::_Internal::common(const RespiratoryData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::RunningAverageData&
RespiratoryData::_Internal::bloodphrunningaverage(const RespiratoryData* msg) {
  return *msg->bloodphrunningaverage_;
}
const ::pulse::cdm::bind::RunningAverageData&
RespiratoryData::_Internal::meanairwaypressure_cmh2o(const RespiratoryData* msg) {
  return *msg->meanairwaypressure_cmh2o_;
}
const ::pulse::cdm::bind::RunningAverageData&
RespiratoryData::_Internal::arterialo2runningaverage_mmhg(const RespiratoryData* msg) {
  return *msg->arterialo2runningaverage_mmhg_;
}
const ::pulse::cdm::bind::RunningAverageData&
RespiratoryData::_Internal::arterialco2runningaverage_mmhg(const RespiratoryData* msg) {
  return *msg->arterialco2runningaverage_mmhg_;
}
void RespiratoryData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void RespiratoryData::clear_bloodphrunningaverage() {
  if (GetArena() == nullptr && bloodphrunningaverage_ != nullptr) {
    delete bloodphrunningaverage_;
  }
  bloodphrunningaverage_ = nullptr;
}
void RespiratoryData::clear_meanairwaypressure_cmh2o() {
  if (GetArena() == nullptr && meanairwaypressure_cmh2o_ != nullptr) {
    delete meanairwaypressure_cmh2o_;
  }
  meanairwaypressure_cmh2o_ = nullptr;
}
void RespiratoryData::clear_arterialo2runningaverage_mmhg() {
  if (GetArena() == nullptr && arterialo2runningaverage_mmhg_ != nullptr) {
    delete arterialo2runningaverage_mmhg_;
  }
  arterialo2runningaverage_mmhg_ = nullptr;
}
void RespiratoryData::clear_arterialco2runningaverage_mmhg() {
  if (GetArena() == nullptr && arterialco2runningaverage_mmhg_ != nullptr) {
    delete arterialco2runningaverage_mmhg_;
  }
  arterialco2runningaverage_mmhg_ = nullptr;
}
RespiratoryData::RespiratoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.RespiratoryData)
}
RespiratoryData::RespiratoryData(const RespiratoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::RespiratorySystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_bloodphrunningaverage()) {
    bloodphrunningaverage_ = new ::pulse::cdm::bind::RunningAverageData(*from.bloodphrunningaverage_);
  } else {
    bloodphrunningaverage_ = nullptr;
  }
  if (from._internal_has_meanairwaypressure_cmh2o()) {
    meanairwaypressure_cmh2o_ = new ::pulse::cdm::bind::RunningAverageData(*from.meanairwaypressure_cmh2o_);
  } else {
    meanairwaypressure_cmh2o_ = nullptr;
  }
  if (from._internal_has_arterialo2runningaverage_mmhg()) {
    arterialo2runningaverage_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.arterialo2runningaverage_mmhg_);
  } else {
    arterialo2runningaverage_mmhg_ = nullptr;
  }
  if (from._internal_has_arterialco2runningaverage_mmhg()) {
    arterialco2runningaverage_mmhg_ = new ::pulse::cdm::bind::RunningAverageData(*from.arterialco2runningaverage_mmhg_);
  } else {
    arterialco2runningaverage_mmhg_ = nullptr;
  }
  ::memcpy(&topbreathtotalvolume_l_, &from.topbreathtotalvolume_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&activeconsciousrespirationcommand_) -
    reinterpret_cast<char*>(&topbreathtotalvolume_l_)) + sizeof(activeconsciousrespirationcommand_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.RespiratoryData)
}

void RespiratoryData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activeconsciousrespirationcommand_) -
      reinterpret_cast<char*>(&common_)) + sizeof(activeconsciousrespirationcommand_));
}

RespiratoryData::~RespiratoryData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.RespiratoryData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RespiratoryData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete bloodphrunningaverage_;
  if (this != internal_default_instance()) delete meanairwaypressure_cmh2o_;
  if (this != internal_default_instance()) delete arterialo2runningaverage_mmhg_;
  if (this != internal_default_instance()) delete arterialco2runningaverage_mmhg_;
}

void RespiratoryData::ArenaDtor(void* object) {
  RespiratoryData* _this = reinterpret_cast< RespiratoryData* >(object);
  (void)_this;
}
void RespiratoryData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespiratoryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespiratoryData& RespiratoryData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RespiratoryData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void RespiratoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.RespiratoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && bloodphrunningaverage_ != nullptr) {
    delete bloodphrunningaverage_;
  }
  bloodphrunningaverage_ = nullptr;
  if (GetArena() == nullptr && meanairwaypressure_cmh2o_ != nullptr) {
    delete meanairwaypressure_cmh2o_;
  }
  meanairwaypressure_cmh2o_ = nullptr;
  if (GetArena() == nullptr && arterialo2runningaverage_mmhg_ != nullptr) {
    delete arterialo2runningaverage_mmhg_;
  }
  arterialo2runningaverage_mmhg_ = nullptr;
  if (GetArena() == nullptr && arterialco2runningaverage_mmhg_ != nullptr) {
    delete arterialco2runningaverage_mmhg_;
  }
  arterialco2runningaverage_mmhg_ = nullptr;
  ::memset(&topbreathtotalvolume_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeconsciousrespirationcommand_) -
      reinterpret_cast<char*>(&topbreathtotalvolume_l_)) + sizeof(activeconsciousrespirationcommand_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespiratoryData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.RespiratorySystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BreathingCycle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          breathingcycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NotBreathing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          notbreathing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double TopBreathTotalVolume_L = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          topbreathtotalvolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathAlveoliVolume_L = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          topbreathalveolivolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathPleuralVolume_L = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          topbreathpleuralvolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathAlveoliPressure_cmH2O = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          topbreathalveolipressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathDriverPressure_cmH2O = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          topbreathdriverpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathPleuralPressure_cmH2O = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          topbreathpleuralpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LastCardiacCycleBloodPH = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          lastcardiaccyclebloodph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopCarinaO2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          topcarinao2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TopBreathElapsedTime_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          topbreathelapsedtime_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathElapsedTime_min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          bottombreathelapsedtime_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathTotalVolume_L = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          bottombreathtotalvolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathAlveoliVolume_L = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          bottombreathalveolivolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathPleuralVolume_L = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          bottombreathpleuralvolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathAlveoliPressure_cmH2O = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          bottombreathalveolipressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathDriverPressure_cmH2O = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          bottombreathdriverpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BottomBreathPleuralPressure_cmH2O = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          bottombreathpleuralpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PeakAlveolarPressure_cmH2O = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          peakalveolarpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaximalAlveolarPressure_cmH2O = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          maximalalveolarpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData BloodPHRunningAverage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodphrunningaverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData MeanAirwayPressure_cmH2O = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanairwaypressure_cmh2o(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ArterialO2PartialPressure_mmHg = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          arterialo2partialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ArterialCO2PartialPressure_mmHg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          arterialco2partialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BreathingCycleTime_s = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          breathingcycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DriverPressure_cmH2O = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          driverpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ElapsedBreathingCycleTime_min = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          elapsedbreathingcycletime_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IERatioScaleFactor = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          ieratioscalefactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PeakInspiratoryPressure_cmH2O = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          peakinspiratorypressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PeakExpiratoryPressure_cmH2O = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          peakexpiratorypressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PreviousTargetAlveolarVentilation_L_Per_min = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          previoustargetalveolarventilation_l_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double VentilationFrequency_Per_min = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ventilationfrequency_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double VentilationToTidalVolumeSlope = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ventilationtotidalvolumeslope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData ArterialO2RunningAverage_mmHg = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialo2runningaverage_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.RunningAverageData ArterialCO2RunningAverage_mmHg = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialco2runningaverage_mmhg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ExpiratoryHoldFraction = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          expiratoryholdfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ExpiratoryReleaseFraction = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          expiratoryreleasefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ExpiratoryRiseFraction = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          expiratoryrisefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspiratoryHoldFraction = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          inspiratoryholdfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspiratoryReleaseFraction = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          inspiratoryreleasefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspiratoryRiseFraction = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          inspiratoryrisefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspiratoryToExpiratoryPauseFraction = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          inspiratorytoexpiratorypausefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeftAlveoliDecrease_L = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          leftalveolidecrease_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RightAlveoliDecrease_L = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          rightalveolidecrease_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool ActiveConsciousRespirationCommand = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          activeconsciousrespirationcommand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double RespiratoryComplianceOverride_L_Per_cmH2O = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          respiratorycomplianceoverride_l_per_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RespiratoryResistanceOverride_cmH2O_s_Per_L = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          respiratoryresistanceoverride_cmh2o_s_per_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RespiratoryData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.RespiratoryData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.RespiratorySystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // bool BreathingCycle = 2;
  if (this->breathingcycle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_breathingcycle(), target);
  }

  // bool NotBreathing = 3;
  if (this->notbreathing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_notbreathing(), target);
  }

  // double TopBreathTotalVolume_L = 4;
  if (!(this->topbreathtotalvolume_l() <= 0 && this->topbreathtotalvolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_topbreathtotalvolume_l(), target);
  }

  // double TopBreathAlveoliVolume_L = 5;
  if (!(this->topbreathalveolivolume_l() <= 0 && this->topbreathalveolivolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_topbreathalveolivolume_l(), target);
  }

  // double TopBreathPleuralVolume_L = 6;
  if (!(this->topbreathpleuralvolume_l() <= 0 && this->topbreathpleuralvolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_topbreathpleuralvolume_l(), target);
  }

  // double TopBreathAlveoliPressure_cmH2O = 7;
  if (!(this->topbreathalveolipressure_cmh2o() <= 0 && this->topbreathalveolipressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_topbreathalveolipressure_cmh2o(), target);
  }

  // double TopBreathDriverPressure_cmH2O = 8;
  if (!(this->topbreathdriverpressure_cmh2o() <= 0 && this->topbreathdriverpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_topbreathdriverpressure_cmh2o(), target);
  }

  // double TopBreathPleuralPressure_cmH2O = 9;
  if (!(this->topbreathpleuralpressure_cmh2o() <= 0 && this->topbreathpleuralpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_topbreathpleuralpressure_cmh2o(), target);
  }

  // double LastCardiacCycleBloodPH = 10;
  if (!(this->lastcardiaccyclebloodph() <= 0 && this->lastcardiaccyclebloodph() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lastcardiaccyclebloodph(), target);
  }

  // double TopCarinaO2 = 11;
  if (!(this->topcarinao2() <= 0 && this->topcarinao2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_topcarinao2(), target);
  }

  // double TopBreathElapsedTime_min = 12;
  if (!(this->topbreathelapsedtime_min() <= 0 && this->topbreathelapsedtime_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_topbreathelapsedtime_min(), target);
  }

  // double BottomBreathElapsedTime_min = 13;
  if (!(this->bottombreathelapsedtime_min() <= 0 && this->bottombreathelapsedtime_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_bottombreathelapsedtime_min(), target);
  }

  // double BottomBreathTotalVolume_L = 14;
  if (!(this->bottombreathtotalvolume_l() <= 0 && this->bottombreathtotalvolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_bottombreathtotalvolume_l(), target);
  }

  // double BottomBreathAlveoliVolume_L = 15;
  if (!(this->bottombreathalveolivolume_l() <= 0 && this->bottombreathalveolivolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_bottombreathalveolivolume_l(), target);
  }

  // double BottomBreathPleuralVolume_L = 16;
  if (!(this->bottombreathpleuralvolume_l() <= 0 && this->bottombreathpleuralvolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_bottombreathpleuralvolume_l(), target);
  }

  // double BottomBreathAlveoliPressure_cmH2O = 17;
  if (!(this->bottombreathalveolipressure_cmh2o() <= 0 && this->bottombreathalveolipressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_bottombreathalveolipressure_cmh2o(), target);
  }

  // double BottomBreathDriverPressure_cmH2O = 18;
  if (!(this->bottombreathdriverpressure_cmh2o() <= 0 && this->bottombreathdriverpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_bottombreathdriverpressure_cmh2o(), target);
  }

  // double BottomBreathPleuralPressure_cmH2O = 19;
  if (!(this->bottombreathpleuralpressure_cmh2o() <= 0 && this->bottombreathpleuralpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_bottombreathpleuralpressure_cmh2o(), target);
  }

  // double PeakAlveolarPressure_cmH2O = 20;
  if (!(this->peakalveolarpressure_cmh2o() <= 0 && this->peakalveolarpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_peakalveolarpressure_cmh2o(), target);
  }

  // double MaximalAlveolarPressure_cmH2O = 21;
  if (!(this->maximalalveolarpressure_cmh2o() <= 0 && this->maximalalveolarpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_maximalalveolarpressure_cmh2o(), target);
  }

  // .pulse.cdm.bind.RunningAverageData BloodPHRunningAverage = 22;
  if (this->has_bloodphrunningaverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bloodphrunningaverage(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData MeanAirwayPressure_cmH2O = 23;
  if (this->has_meanairwaypressure_cmh2o()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::meanairwaypressure_cmh2o(this), target, stream);
  }

  // double ArterialO2PartialPressure_mmHg = 24;
  if (!(this->arterialo2partialpressure_mmhg() <= 0 && this->arterialo2partialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_arterialo2partialpressure_mmhg(), target);
  }

  // double ArterialCO2PartialPressure_mmHg = 25;
  if (!(this->arterialco2partialpressure_mmhg() <= 0 && this->arterialco2partialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_arterialco2partialpressure_mmhg(), target);
  }

  // double BreathingCycleTime_s = 26;
  if (!(this->breathingcycletime_s() <= 0 && this->breathingcycletime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_breathingcycletime_s(), target);
  }

  // double DriverPressure_cmH2O = 27;
  if (!(this->driverpressure_cmh2o() <= 0 && this->driverpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_driverpressure_cmh2o(), target);
  }

  // double ElapsedBreathingCycleTime_min = 28;
  if (!(this->elapsedbreathingcycletime_min() <= 0 && this->elapsedbreathingcycletime_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_elapsedbreathingcycletime_min(), target);
  }

  // double IERatioScaleFactor = 29;
  if (!(this->ieratioscalefactor() <= 0 && this->ieratioscalefactor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_ieratioscalefactor(), target);
  }

  // double PeakInspiratoryPressure_cmH2O = 30;
  if (!(this->peakinspiratorypressure_cmh2o() <= 0 && this->peakinspiratorypressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_peakinspiratorypressure_cmh2o(), target);
  }

  // double PeakExpiratoryPressure_cmH2O = 31;
  if (!(this->peakexpiratorypressure_cmh2o() <= 0 && this->peakexpiratorypressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_peakexpiratorypressure_cmh2o(), target);
  }

  // double PreviousTargetAlveolarVentilation_L_Per_min = 32;
  if (!(this->previoustargetalveolarventilation_l_per_min() <= 0 && this->previoustargetalveolarventilation_l_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_previoustargetalveolarventilation_l_per_min(), target);
  }

  // double VentilationFrequency_Per_min = 33;
  if (!(this->ventilationfrequency_per_min() <= 0 && this->ventilationfrequency_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_ventilationfrequency_per_min(), target);
  }

  // double VentilationToTidalVolumeSlope = 34;
  if (!(this->ventilationtotidalvolumeslope() <= 0 && this->ventilationtotidalvolumeslope() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_ventilationtotidalvolumeslope(), target);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialO2RunningAverage_mmHg = 35;
  if (this->has_arterialo2runningaverage_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::arterialo2runningaverage_mmhg(this), target, stream);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialCO2RunningAverage_mmHg = 36;
  if (this->has_arterialco2runningaverage_mmhg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::arterialco2runningaverage_mmhg(this), target, stream);
  }

  // double ExpiratoryHoldFraction = 37;
  if (!(this->expiratoryholdfraction() <= 0 && this->expiratoryholdfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_expiratoryholdfraction(), target);
  }

  // double ExpiratoryReleaseFraction = 38;
  if (!(this->expiratoryreleasefraction() <= 0 && this->expiratoryreleasefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_expiratoryreleasefraction(), target);
  }

  // double ExpiratoryRiseFraction = 39;
  if (!(this->expiratoryrisefraction() <= 0 && this->expiratoryrisefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_expiratoryrisefraction(), target);
  }

  // double InspiratoryHoldFraction = 40;
  if (!(this->inspiratoryholdfraction() <= 0 && this->inspiratoryholdfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_inspiratoryholdfraction(), target);
  }

  // double InspiratoryReleaseFraction = 41;
  if (!(this->inspiratoryreleasefraction() <= 0 && this->inspiratoryreleasefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_inspiratoryreleasefraction(), target);
  }

  // double InspiratoryRiseFraction = 42;
  if (!(this->inspiratoryrisefraction() <= 0 && this->inspiratoryrisefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_inspiratoryrisefraction(), target);
  }

  // double InspiratoryToExpiratoryPauseFraction = 43;
  if (!(this->inspiratorytoexpiratorypausefraction() <= 0 && this->inspiratorytoexpiratorypausefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_inspiratorytoexpiratorypausefraction(), target);
  }

  // double LeftAlveoliDecrease_L = 44;
  if (!(this->leftalveolidecrease_l() <= 0 && this->leftalveolidecrease_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_leftalveolidecrease_l(), target);
  }

  // double RightAlveoliDecrease_L = 45;
  if (!(this->rightalveolidecrease_l() <= 0 && this->rightalveolidecrease_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_rightalveolidecrease_l(), target);
  }

  // bool ActiveConsciousRespirationCommand = 46;
  if (this->activeconsciousrespirationcommand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_activeconsciousrespirationcommand(), target);
  }

  // double RespiratoryComplianceOverride_L_Per_cmH2O = 47;
  if (!(this->respiratorycomplianceoverride_l_per_cmh2o() <= 0 && this->respiratorycomplianceoverride_l_per_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_respiratorycomplianceoverride_l_per_cmh2o(), target);
  }

  // double RespiratoryResistanceOverride_cmH2O_s_Per_L = 48;
  if (!(this->respiratoryresistanceoverride_cmh2o_s_per_l() <= 0 && this->respiratoryresistanceoverride_cmh2o_s_per_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_respiratoryresistanceoverride_cmh2o_s_per_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.RespiratoryData)
  return target;
}

size_t RespiratoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.RespiratoryData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.RespiratorySystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.RunningAverageData BloodPHRunningAverage = 22;
  if (this->has_bloodphrunningaverage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodphrunningaverage_);
  }

  // .pulse.cdm.bind.RunningAverageData MeanAirwayPressure_cmH2O = 23;
  if (this->has_meanairwaypressure_cmh2o()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanairwaypressure_cmh2o_);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialO2RunningAverage_mmHg = 35;
  if (this->has_arterialo2runningaverage_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialo2runningaverage_mmhg_);
  }

  // .pulse.cdm.bind.RunningAverageData ArterialCO2RunningAverage_mmHg = 36;
  if (this->has_arterialco2runningaverage_mmhg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialco2runningaverage_mmhg_);
  }

  // double TopBreathTotalVolume_L = 4;
  if (!(this->topbreathtotalvolume_l() <= 0 && this->topbreathtotalvolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathAlveoliVolume_L = 5;
  if (!(this->topbreathalveolivolume_l() <= 0 && this->topbreathalveolivolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathPleuralVolume_L = 6;
  if (!(this->topbreathpleuralvolume_l() <= 0 && this->topbreathpleuralvolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathAlveoliPressure_cmH2O = 7;
  if (!(this->topbreathalveolipressure_cmh2o() <= 0 && this->topbreathalveolipressure_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathDriverPressure_cmH2O = 8;
  if (!(this->topbreathdriverpressure_cmh2o() <= 0 && this->topbreathdriverpressure_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathPleuralPressure_cmH2O = 9;
  if (!(this->topbreathpleuralpressure_cmh2o() <= 0 && this->topbreathpleuralpressure_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double LastCardiacCycleBloodPH = 10;
  if (!(this->lastcardiaccyclebloodph() <= 0 && this->lastcardiaccyclebloodph() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopCarinaO2 = 11;
  if (!(this->topcarinao2() <= 0 && this->topcarinao2() >= 0)) {
    total_size += 1 + 8;
  }

  // double TopBreathElapsedTime_min = 12;
  if (!(this->topbreathelapsedtime_min() <= 0 && this->topbreathelapsedtime_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double BottomBreathElapsedTime_min = 13;
  if (!(this->bottombreathelapsedtime_min() <= 0 && this->bottombreathelapsedtime_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double BottomBreathTotalVolume_L = 14;
  if (!(this->bottombreathtotalvolume_l() <= 0 && this->bottombreathtotalvolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double BottomBreathAlveoliVolume_L = 15;
  if (!(this->bottombreathalveolivolume_l() <= 0 && this->bottombreathalveolivolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double BottomBreathPleuralVolume_L = 16;
  if (!(this->bottombreathpleuralvolume_l() <= 0 && this->bottombreathpleuralvolume_l() >= 0)) {
    total_size += 2 + 8;
  }

  // double BottomBreathAlveoliPressure_cmH2O = 17;
  if (!(this->bottombreathalveolipressure_cmh2o() <= 0 && this->bottombreathalveolipressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double BottomBreathDriverPressure_cmH2O = 18;
  if (!(this->bottombreathdriverpressure_cmh2o() <= 0 && this->bottombreathdriverpressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double BottomBreathPleuralPressure_cmH2O = 19;
  if (!(this->bottombreathpleuralpressure_cmh2o() <= 0 && this->bottombreathpleuralpressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double PeakAlveolarPressure_cmH2O = 20;
  if (!(this->peakalveolarpressure_cmh2o() <= 0 && this->peakalveolarpressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double MaximalAlveolarPressure_cmH2O = 21;
  if (!(this->maximalalveolarpressure_cmh2o() <= 0 && this->maximalalveolarpressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double ArterialO2PartialPressure_mmHg = 24;
  if (!(this->arterialo2partialpressure_mmhg() <= 0 && this->arterialo2partialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double ArterialCO2PartialPressure_mmHg = 25;
  if (!(this->arterialco2partialpressure_mmhg() <= 0 && this->arterialco2partialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double BreathingCycleTime_s = 26;
  if (!(this->breathingcycletime_s() <= 0 && this->breathingcycletime_s() >= 0)) {
    total_size += 2 + 8;
  }

  // double DriverPressure_cmH2O = 27;
  if (!(this->driverpressure_cmh2o() <= 0 && this->driverpressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double ElapsedBreathingCycleTime_min = 28;
  if (!(this->elapsedbreathingcycletime_min() <= 0 && this->elapsedbreathingcycletime_min() >= 0)) {
    total_size += 2 + 8;
  }

  // double IERatioScaleFactor = 29;
  if (!(this->ieratioscalefactor() <= 0 && this->ieratioscalefactor() >= 0)) {
    total_size += 2 + 8;
  }

  // double PeakInspiratoryPressure_cmH2O = 30;
  if (!(this->peakinspiratorypressure_cmh2o() <= 0 && this->peakinspiratorypressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double PeakExpiratoryPressure_cmH2O = 31;
  if (!(this->peakexpiratorypressure_cmh2o() <= 0 && this->peakexpiratorypressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double PreviousTargetAlveolarVentilation_L_Per_min = 32;
  if (!(this->previoustargetalveolarventilation_l_per_min() <= 0 && this->previoustargetalveolarventilation_l_per_min() >= 0)) {
    total_size += 2 + 8;
  }

  // double VentilationFrequency_Per_min = 33;
  if (!(this->ventilationfrequency_per_min() <= 0 && this->ventilationfrequency_per_min() >= 0)) {
    total_size += 2 + 8;
  }

  // double VentilationToTidalVolumeSlope = 34;
  if (!(this->ventilationtotidalvolumeslope() <= 0 && this->ventilationtotidalvolumeslope() >= 0)) {
    total_size += 2 + 8;
  }

  // double ExpiratoryHoldFraction = 37;
  if (!(this->expiratoryholdfraction() <= 0 && this->expiratoryholdfraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double ExpiratoryReleaseFraction = 38;
  if (!(this->expiratoryreleasefraction() <= 0 && this->expiratoryreleasefraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double ExpiratoryRiseFraction = 39;
  if (!(this->expiratoryrisefraction() <= 0 && this->expiratoryrisefraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double InspiratoryHoldFraction = 40;
  if (!(this->inspiratoryholdfraction() <= 0 && this->inspiratoryholdfraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double InspiratoryReleaseFraction = 41;
  if (!(this->inspiratoryreleasefraction() <= 0 && this->inspiratoryreleasefraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double InspiratoryRiseFraction = 42;
  if (!(this->inspiratoryrisefraction() <= 0 && this->inspiratoryrisefraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double InspiratoryToExpiratoryPauseFraction = 43;
  if (!(this->inspiratorytoexpiratorypausefraction() <= 0 && this->inspiratorytoexpiratorypausefraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double LeftAlveoliDecrease_L = 44;
  if (!(this->leftalveolidecrease_l() <= 0 && this->leftalveolidecrease_l() >= 0)) {
    total_size += 2 + 8;
  }

  // double RightAlveoliDecrease_L = 45;
  if (!(this->rightalveolidecrease_l() <= 0 && this->rightalveolidecrease_l() >= 0)) {
    total_size += 2 + 8;
  }

  // double RespiratoryComplianceOverride_L_Per_cmH2O = 47;
  if (!(this->respiratorycomplianceoverride_l_per_cmh2o() <= 0 && this->respiratorycomplianceoverride_l_per_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double RespiratoryResistanceOverride_cmH2O_s_Per_L = 48;
  if (!(this->respiratoryresistanceoverride_cmh2o_s_per_l() <= 0 && this->respiratoryresistanceoverride_cmh2o_s_per_l() >= 0)) {
    total_size += 2 + 8;
  }

  // bool BreathingCycle = 2;
  if (this->breathingcycle() != 0) {
    total_size += 1 + 1;
  }

  // bool NotBreathing = 3;
  if (this->notbreathing() != 0) {
    total_size += 1 + 1;
  }

  // bool ActiveConsciousRespirationCommand = 46;
  if (this->activeconsciousrespirationcommand() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespiratoryData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.RespiratoryData)
  GOOGLE_DCHECK_NE(&from, this);
  const RespiratoryData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RespiratoryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.RespiratoryData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.RespiratoryData)
    MergeFrom(*source);
  }
}

void RespiratoryData::MergeFrom(const RespiratoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.RespiratoryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::RespiratorySystemData::MergeFrom(from._internal_common());
  }
  if (from.has_bloodphrunningaverage()) {
    _internal_mutable_bloodphrunningaverage()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_bloodphrunningaverage());
  }
  if (from.has_meanairwaypressure_cmh2o()) {
    _internal_mutable_meanairwaypressure_cmh2o()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_meanairwaypressure_cmh2o());
  }
  if (from.has_arterialo2runningaverage_mmhg()) {
    _internal_mutable_arterialo2runningaverage_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_arterialo2runningaverage_mmhg());
  }
  if (from.has_arterialco2runningaverage_mmhg()) {
    _internal_mutable_arterialco2runningaverage_mmhg()->::pulse::cdm::bind::RunningAverageData::MergeFrom(from._internal_arterialco2runningaverage_mmhg());
  }
  if (!(from.topbreathtotalvolume_l() <= 0 && from.topbreathtotalvolume_l() >= 0)) {
    _internal_set_topbreathtotalvolume_l(from._internal_topbreathtotalvolume_l());
  }
  if (!(from.topbreathalveolivolume_l() <= 0 && from.topbreathalveolivolume_l() >= 0)) {
    _internal_set_topbreathalveolivolume_l(from._internal_topbreathalveolivolume_l());
  }
  if (!(from.topbreathpleuralvolume_l() <= 0 && from.topbreathpleuralvolume_l() >= 0)) {
    _internal_set_topbreathpleuralvolume_l(from._internal_topbreathpleuralvolume_l());
  }
  if (!(from.topbreathalveolipressure_cmh2o() <= 0 && from.topbreathalveolipressure_cmh2o() >= 0)) {
    _internal_set_topbreathalveolipressure_cmh2o(from._internal_topbreathalveolipressure_cmh2o());
  }
  if (!(from.topbreathdriverpressure_cmh2o() <= 0 && from.topbreathdriverpressure_cmh2o() >= 0)) {
    _internal_set_topbreathdriverpressure_cmh2o(from._internal_topbreathdriverpressure_cmh2o());
  }
  if (!(from.topbreathpleuralpressure_cmh2o() <= 0 && from.topbreathpleuralpressure_cmh2o() >= 0)) {
    _internal_set_topbreathpleuralpressure_cmh2o(from._internal_topbreathpleuralpressure_cmh2o());
  }
  if (!(from.lastcardiaccyclebloodph() <= 0 && from.lastcardiaccyclebloodph() >= 0)) {
    _internal_set_lastcardiaccyclebloodph(from._internal_lastcardiaccyclebloodph());
  }
  if (!(from.topcarinao2() <= 0 && from.topcarinao2() >= 0)) {
    _internal_set_topcarinao2(from._internal_topcarinao2());
  }
  if (!(from.topbreathelapsedtime_min() <= 0 && from.topbreathelapsedtime_min() >= 0)) {
    _internal_set_topbreathelapsedtime_min(from._internal_topbreathelapsedtime_min());
  }
  if (!(from.bottombreathelapsedtime_min() <= 0 && from.bottombreathelapsedtime_min() >= 0)) {
    _internal_set_bottombreathelapsedtime_min(from._internal_bottombreathelapsedtime_min());
  }
  if (!(from.bottombreathtotalvolume_l() <= 0 && from.bottombreathtotalvolume_l() >= 0)) {
    _internal_set_bottombreathtotalvolume_l(from._internal_bottombreathtotalvolume_l());
  }
  if (!(from.bottombreathalveolivolume_l() <= 0 && from.bottombreathalveolivolume_l() >= 0)) {
    _internal_set_bottombreathalveolivolume_l(from._internal_bottombreathalveolivolume_l());
  }
  if (!(from.bottombreathpleuralvolume_l() <= 0 && from.bottombreathpleuralvolume_l() >= 0)) {
    _internal_set_bottombreathpleuralvolume_l(from._internal_bottombreathpleuralvolume_l());
  }
  if (!(from.bottombreathalveolipressure_cmh2o() <= 0 && from.bottombreathalveolipressure_cmh2o() >= 0)) {
    _internal_set_bottombreathalveolipressure_cmh2o(from._internal_bottombreathalveolipressure_cmh2o());
  }
  if (!(from.bottombreathdriverpressure_cmh2o() <= 0 && from.bottombreathdriverpressure_cmh2o() >= 0)) {
    _internal_set_bottombreathdriverpressure_cmh2o(from._internal_bottombreathdriverpressure_cmh2o());
  }
  if (!(from.bottombreathpleuralpressure_cmh2o() <= 0 && from.bottombreathpleuralpressure_cmh2o() >= 0)) {
    _internal_set_bottombreathpleuralpressure_cmh2o(from._internal_bottombreathpleuralpressure_cmh2o());
  }
  if (!(from.peakalveolarpressure_cmh2o() <= 0 && from.peakalveolarpressure_cmh2o() >= 0)) {
    _internal_set_peakalveolarpressure_cmh2o(from._internal_peakalveolarpressure_cmh2o());
  }
  if (!(from.maximalalveolarpressure_cmh2o() <= 0 && from.maximalalveolarpressure_cmh2o() >= 0)) {
    _internal_set_maximalalveolarpressure_cmh2o(from._internal_maximalalveolarpressure_cmh2o());
  }
  if (!(from.arterialo2partialpressure_mmhg() <= 0 && from.arterialo2partialpressure_mmhg() >= 0)) {
    _internal_set_arterialo2partialpressure_mmhg(from._internal_arterialo2partialpressure_mmhg());
  }
  if (!(from.arterialco2partialpressure_mmhg() <= 0 && from.arterialco2partialpressure_mmhg() >= 0)) {
    _internal_set_arterialco2partialpressure_mmhg(from._internal_arterialco2partialpressure_mmhg());
  }
  if (!(from.breathingcycletime_s() <= 0 && from.breathingcycletime_s() >= 0)) {
    _internal_set_breathingcycletime_s(from._internal_breathingcycletime_s());
  }
  if (!(from.driverpressure_cmh2o() <= 0 && from.driverpressure_cmh2o() >= 0)) {
    _internal_set_driverpressure_cmh2o(from._internal_driverpressure_cmh2o());
  }
  if (!(from.elapsedbreathingcycletime_min() <= 0 && from.elapsedbreathingcycletime_min() >= 0)) {
    _internal_set_elapsedbreathingcycletime_min(from._internal_elapsedbreathingcycletime_min());
  }
  if (!(from.ieratioscalefactor() <= 0 && from.ieratioscalefactor() >= 0)) {
    _internal_set_ieratioscalefactor(from._internal_ieratioscalefactor());
  }
  if (!(from.peakinspiratorypressure_cmh2o() <= 0 && from.peakinspiratorypressure_cmh2o() >= 0)) {
    _internal_set_peakinspiratorypressure_cmh2o(from._internal_peakinspiratorypressure_cmh2o());
  }
  if (!(from.peakexpiratorypressure_cmh2o() <= 0 && from.peakexpiratorypressure_cmh2o() >= 0)) {
    _internal_set_peakexpiratorypressure_cmh2o(from._internal_peakexpiratorypressure_cmh2o());
  }
  if (!(from.previoustargetalveolarventilation_l_per_min() <= 0 && from.previoustargetalveolarventilation_l_per_min() >= 0)) {
    _internal_set_previoustargetalveolarventilation_l_per_min(from._internal_previoustargetalveolarventilation_l_per_min());
  }
  if (!(from.ventilationfrequency_per_min() <= 0 && from.ventilationfrequency_per_min() >= 0)) {
    _internal_set_ventilationfrequency_per_min(from._internal_ventilationfrequency_per_min());
  }
  if (!(from.ventilationtotidalvolumeslope() <= 0 && from.ventilationtotidalvolumeslope() >= 0)) {
    _internal_set_ventilationtotidalvolumeslope(from._internal_ventilationtotidalvolumeslope());
  }
  if (!(from.expiratoryholdfraction() <= 0 && from.expiratoryholdfraction() >= 0)) {
    _internal_set_expiratoryholdfraction(from._internal_expiratoryholdfraction());
  }
  if (!(from.expiratoryreleasefraction() <= 0 && from.expiratoryreleasefraction() >= 0)) {
    _internal_set_expiratoryreleasefraction(from._internal_expiratoryreleasefraction());
  }
  if (!(from.expiratoryrisefraction() <= 0 && from.expiratoryrisefraction() >= 0)) {
    _internal_set_expiratoryrisefraction(from._internal_expiratoryrisefraction());
  }
  if (!(from.inspiratoryholdfraction() <= 0 && from.inspiratoryholdfraction() >= 0)) {
    _internal_set_inspiratoryholdfraction(from._internal_inspiratoryholdfraction());
  }
  if (!(from.inspiratoryreleasefraction() <= 0 && from.inspiratoryreleasefraction() >= 0)) {
    _internal_set_inspiratoryreleasefraction(from._internal_inspiratoryreleasefraction());
  }
  if (!(from.inspiratoryrisefraction() <= 0 && from.inspiratoryrisefraction() >= 0)) {
    _internal_set_inspiratoryrisefraction(from._internal_inspiratoryrisefraction());
  }
  if (!(from.inspiratorytoexpiratorypausefraction() <= 0 && from.inspiratorytoexpiratorypausefraction() >= 0)) {
    _internal_set_inspiratorytoexpiratorypausefraction(from._internal_inspiratorytoexpiratorypausefraction());
  }
  if (!(from.leftalveolidecrease_l() <= 0 && from.leftalveolidecrease_l() >= 0)) {
    _internal_set_leftalveolidecrease_l(from._internal_leftalveolidecrease_l());
  }
  if (!(from.rightalveolidecrease_l() <= 0 && from.rightalveolidecrease_l() >= 0)) {
    _internal_set_rightalveolidecrease_l(from._internal_rightalveolidecrease_l());
  }
  if (!(from.respiratorycomplianceoverride_l_per_cmh2o() <= 0 && from.respiratorycomplianceoverride_l_per_cmh2o() >= 0)) {
    _internal_set_respiratorycomplianceoverride_l_per_cmh2o(from._internal_respiratorycomplianceoverride_l_per_cmh2o());
  }
  if (!(from.respiratoryresistanceoverride_cmh2o_s_per_l() <= 0 && from.respiratoryresistanceoverride_cmh2o_s_per_l() >= 0)) {
    _internal_set_respiratoryresistanceoverride_cmh2o_s_per_l(from._internal_respiratoryresistanceoverride_cmh2o_s_per_l());
  }
  if (from.breathingcycle() != 0) {
    _internal_set_breathingcycle(from._internal_breathingcycle());
  }
  if (from.notbreathing() != 0) {
    _internal_set_notbreathing(from._internal_notbreathing());
  }
  if (from.activeconsciousrespirationcommand() != 0) {
    _internal_set_activeconsciousrespirationcommand(from._internal_activeconsciousrespirationcommand());
  }
}

void RespiratoryData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.RespiratoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespiratoryData::CopyFrom(const RespiratoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.RespiratoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespiratoryData::IsInitialized() const {
  return true;
}

void RespiratoryData::InternalSwap(RespiratoryData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespiratoryData, activeconsciousrespirationcommand_)
      + sizeof(RespiratoryData::activeconsciousrespirationcommand_)
      - PROTOBUF_FIELD_OFFSET(RespiratoryData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespiratoryData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TissueData::_Internal {
 public:
  static const ::pulse::cdm::bind::TissueSystemData& common(const TissueData* msg);
};

const ::pulse::cdm::bind::TissueSystemData&
TissueData::_Internal::common(const TissueData* msg) {
  return *msg->common_;
}
void TissueData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
TissueData::TissueData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.TissueData)
}
TissueData::TissueData(const TissueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::TissueSystemData(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&restingtissueglucose_g_, &from.restingtissueglucose_g_,
    static_cast<size_t>(reinterpret_cast<char*>(&restingfluidmass_kg_) -
    reinterpret_cast<char*>(&restingtissueglucose_g_)) + sizeof(restingfluidmass_kg_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.TissueData)
}

void TissueData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&restingfluidmass_kg_) -
      reinterpret_cast<char*>(&common_)) + sizeof(restingfluidmass_kg_));
}

TissueData::~TissueData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.TissueData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TissueData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void TissueData::ArenaDtor(void* object) {
  TissueData* _this = reinterpret_cast< TissueData* >(object);
  (void)_this;
}
void TissueData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TissueData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TissueData& TissueData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TissueData_pulse_2fcpm_2fbind_2fPulsePhysiology_2eproto.base);
  return *internal_default_instance();
}


void TissueData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.TissueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&restingtissueglucose_g_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restingfluidmass_kg_) -
      reinterpret_cast<char*>(&restingtissueglucose_g_)) + sizeof(restingfluidmass_kg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TissueData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.TissueSystemData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double RestingTissueGlucose_g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          restingtissueglucose_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RestingBloodGlucose_mg_Per_mL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          restingbloodglucose_mg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RestingBloodLipid_mg_Per_mL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          restingbloodlipid_mg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RestingBloodInsulin_mg_Per_mL = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          restingbloodinsulin_mg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RestingFluidMass_kg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          restingfluidmass_kg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TissueData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.TissueData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.TissueSystemData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // double RestingTissueGlucose_g = 2;
  if (!(this->restingtissueglucose_g() <= 0 && this->restingtissueglucose_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_restingtissueglucose_g(), target);
  }

  // double RestingBloodGlucose_mg_Per_mL = 3;
  if (!(this->restingbloodglucose_mg_per_ml() <= 0 && this->restingbloodglucose_mg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_restingbloodglucose_mg_per_ml(), target);
  }

  // double RestingBloodLipid_mg_Per_mL = 4;
  if (!(this->restingbloodlipid_mg_per_ml() <= 0 && this->restingbloodlipid_mg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_restingbloodlipid_mg_per_ml(), target);
  }

  // double RestingBloodInsulin_mg_Per_mL = 5;
  if (!(this->restingbloodinsulin_mg_per_ml() <= 0 && this->restingbloodinsulin_mg_per_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_restingbloodinsulin_mg_per_ml(), target);
  }

  // double RestingFluidMass_kg = 6;
  if (!(this->restingfluidmass_kg() <= 0 && this->restingfluidmass_kg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_restingfluidmass_kg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.TissueData)
  return target;
}

size_t TissueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.TissueData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.TissueSystemData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double RestingTissueGlucose_g = 2;
  if (!(this->restingtissueglucose_g() <= 0 && this->restingtissueglucose_g() >= 0)) {
    total_size += 1 + 8;
  }

  // double RestingBloodGlucose_mg_Per_mL = 3;
  if (!(this->restingbloodglucose_mg_per_ml() <= 0 && this->restingbloodglucose_mg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RestingBloodLipid_mg_Per_mL = 4;
  if (!(this->restingbloodlipid_mg_per_ml() <= 0 && this->restingbloodlipid_mg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RestingBloodInsulin_mg_Per_mL = 5;
  if (!(this->restingbloodinsulin_mg_per_ml() <= 0 && this->restingbloodinsulin_mg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double RestingFluidMass_kg = 6;
  if (!(this->restingfluidmass_kg() <= 0 && this->restingfluidmass_kg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TissueData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.TissueData)
  GOOGLE_DCHECK_NE(&from, this);
  const TissueData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TissueData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.TissueData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.TissueData)
    MergeFrom(*source);
  }
}

void TissueData::MergeFrom(const TissueData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.TissueData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::TissueSystemData::MergeFrom(from._internal_common());
  }
  if (!(from.restingtissueglucose_g() <= 0 && from.restingtissueglucose_g() >= 0)) {
    _internal_set_restingtissueglucose_g(from._internal_restingtissueglucose_g());
  }
  if (!(from.restingbloodglucose_mg_per_ml() <= 0 && from.restingbloodglucose_mg_per_ml() >= 0)) {
    _internal_set_restingbloodglucose_mg_per_ml(from._internal_restingbloodglucose_mg_per_ml());
  }
  if (!(from.restingbloodlipid_mg_per_ml() <= 0 && from.restingbloodlipid_mg_per_ml() >= 0)) {
    _internal_set_restingbloodlipid_mg_per_ml(from._internal_restingbloodlipid_mg_per_ml());
  }
  if (!(from.restingbloodinsulin_mg_per_ml() <= 0 && from.restingbloodinsulin_mg_per_ml() >= 0)) {
    _internal_set_restingbloodinsulin_mg_per_ml(from._internal_restingbloodinsulin_mg_per_ml());
  }
  if (!(from.restingfluidmass_kg() <= 0 && from.restingfluidmass_kg() >= 0)) {
    _internal_set_restingfluidmass_kg(from._internal_restingfluidmass_kg());
  }
}

void TissueData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.TissueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TissueData::CopyFrom(const TissueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.TissueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TissueData::IsInitialized() const {
  return true;
}

void TissueData::InternalSwap(TissueData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TissueData, restingfluidmass_kg_)
      + sizeof(TissueData::restingfluidmass_kg_)
      - PROTOBUF_FIELD_OFFSET(TissueData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TissueData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::BloodChemistryData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::BloodChemistryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::BloodChemistryData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::CardiovascularData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::CardiovascularData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::CardiovascularData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::DrugData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::DrugData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::DrugData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::EndocrineData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::EndocrineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::EndocrineData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::EnergyData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::EnergyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::EnergyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::GastrointestinalData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::GastrointestinalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::GastrointestinalData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::HepaticData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::HepaticData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::HepaticData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::NervousData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::NervousData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::NervousData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::RenalData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::RenalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::RenalData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::RespiratoryData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::RespiratoryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::RespiratoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::TissueData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::TissueData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::TissueData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
