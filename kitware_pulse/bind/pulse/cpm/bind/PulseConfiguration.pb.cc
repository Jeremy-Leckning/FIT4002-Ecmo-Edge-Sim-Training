// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseConfiguration.proto

#include "pulse/cpm/bind/PulseConfiguration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class ConfigurationData_BloodChemistryConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_BloodChemistryConfigurationData> _instance;
} _ConfigurationData_BloodChemistryConfigurationData_default_instance_;
class ConfigurationData_CardiovascularConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_CardiovascularConfigurationData> _instance;
} _ConfigurationData_CardiovascularConfigurationData_default_instance_;
class ConfigurationData_CircuitConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_CircuitConfigurationData> _instance;
} _ConfigurationData_CircuitConfigurationData_default_instance_;
class ConfigurationData_ConstantsConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_ConstantsConfigurationData> _instance;
} _ConfigurationData_ConstantsConfigurationData_default_instance_;
class ConfigurationData_DrugsConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_DrugsConfigurationData> _instance;
} _ConfigurationData_DrugsConfigurationData_default_instance_;
class ConfigurationData_ECGConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_ECGConfigurationData> _instance;
} _ConfigurationData_ECGConfigurationData_default_instance_;
class ConfigurationData_EnergyConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_EnergyConfigurationData> _instance;
} _ConfigurationData_EnergyConfigurationData_default_instance_;
class ConfigurationData_EnvironmentConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_EnvironmentConfigurationData> _instance;
} _ConfigurationData_EnvironmentConfigurationData_default_instance_;
class ConfigurationData_GastrointestinalConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_GastrointestinalConfigurationData> _instance;
} _ConfigurationData_GastrointestinalConfigurationData_default_instance_;
class ConfigurationData_NervousConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_NervousConfigurationData> _instance;
} _ConfigurationData_NervousConfigurationData_default_instance_;
class ConfigurationData_RenalConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_RenalConfigurationData> _instance;
} _ConfigurationData_RenalConfigurationData_default_instance_;
class ConfigurationData_RespiratoryConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_RespiratoryConfigurationData> _instance;
} _ConfigurationData_RespiratoryConfigurationData_default_instance_;
class ConfigurationData_TissueConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData_TissueConfigurationData> _instance;
} _ConfigurationData_TissueConfigurationData_default_instance_;
class ConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData> _instance;
} _ConfigurationData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_TimedStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_DynamicStabilizationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
      &scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_BloodChemistryConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_CardiovascularConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_CircuitConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_ConstantsConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_DrugsConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {}};

static void InitDefaultsscc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_ECGConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_EnergyConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_EnvironmentConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_GastrointestinalConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_NervousConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_RenalConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_RespiratoryConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ConfigurationData_TissueConfigurationData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData, meancorpuscularhemoglobin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData, meancorpuscularvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData, standarddiffusiondistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData, standardoxygendiffusioncoefficient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, leftheartelastancemaximum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, leftheartelastanceminimum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, minimumbloodvolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, rightheartelastancemaximum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, rightheartelastanceminimum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData, standardpulmonarycapillarycoverage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, cardiovascularopenresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultclosedelectricresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultopenelectricresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultclosedflowresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultopenflowresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultclosedheatresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, defaultopenheatresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, machineclosedresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, machineopenresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, respiratoryclosedresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData, respiratoryopenresistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData, oxygenmetabolicconstant_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData, stefanboltzmann_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData, universalgasconstant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData, pdmodel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData, ElectroCardioGramInterpolator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, bodyspecificheat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, carbondioxideproductionfromoxygenconsumptionconstant_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, coretemperaturelow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, coretemperaturehigh_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, deltacoretemperaturelow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, energyperatp_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, sweatheattransfer_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, vaporizationenergy_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData, vaporspecificheat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, airdensity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, airspecificheat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, molarmassofdryair_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, molarmassofwatervapor_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, waterdensity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, calciumabsorptionfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, calciumdigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, carbohydrateabsorptionfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, defaultcarbohydratedigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, defaultfatdigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, defaultproteindigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, fatabsorptionfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, proteintoureafraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, waterdigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, enablecerebrospinalfluid_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, chemoreceptorfeedback_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, baroreceptorfeedback_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, heartelastancedistributedtimedelay_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, heartratedistributedtimedelay_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedheartrateintercept_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedheartratesympatheticslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedheartrateparasympatheticslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedheartelastanceintercept_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedheartelastancesympatheticslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedresistanceintercept_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedresistancesympatheticslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedcomplianceintercept_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, normalizedcomplianceparasympatheticslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, pupildiameterbaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, responseslope_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, systemicresistancedistributedtimedelay_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData, venouscompliancedistributedtimedelay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, enablerenal_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, plasmasodiumconcentrationsetpoint_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, peritubularpotassiumconcentrationsetpoint_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, leftglomerularfilteringsurfaceareabaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, leftglomerularfluidpermeabilitybaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, lefttubularreabsorptionfilteringsurfaceareabaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, lefttubularreabsorptionfluidpermeabilitybaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, maximumafferentresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, minimumafferentresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, rightglomerularfilteringsurfaceareabaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, rightglomerularfluidpermeabilitybaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, righttubularreabsorptionfilteringsurfaceareabaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, righttubularreabsorptionfluidpermeabilitybaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData, targetsodiumdelivery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, centralcontrollerco2pressuresetpoint_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, centralventilatorycontrollergain_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, minimumallowabletidalvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, minimumallowableinspiratoryandexpiratoryperiod_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, peripheralcontrollerco2pressuresetpoint_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, peripheralventilatorycontrollergain_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, pulmonaryventilationratemaximum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, ventilationtidalvolumeintercept_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData, ventilatoryocclusionpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_TissueConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData_TissueConfigurationData, enabletissue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, timestep_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, allowdynamictimestep_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, writepatientbaselinefile_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, bloodchemistryconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, cardiovascularconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, circuitconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, constantsconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, drugsconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, ecgconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, energyconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, environmentconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, gastrointestinalconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, nervousconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, renalconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, respiratoryconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, tissueconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, initialoverrides_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ConfigurationData, StabilizationCriteria_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData)},
  { 9, -1, sizeof(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData)},
  { 20, -1, sizeof(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData)},
  { 36, -1, sizeof(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData)},
  { 44, -1, sizeof(::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData)},
  { 50, -1, sizeof(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData)},
  { 58, -1, sizeof(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData)},
  { 72, -1, sizeof(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData)},
  { 85, -1, sizeof(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData)},
  { 102, -1, sizeof(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData)},
  { 125, -1, sizeof(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData)},
  { 144, -1, sizeof(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData)},
  { 158, -1, sizeof(::pulse::cpm::bind::ConfigurationData_TissueConfigurationData)},
  { 164, -1, sizeof(::pulse::cpm::bind::ConfigurationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_BloodChemistryConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_CardiovascularConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_CircuitConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_ConstantsConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_DrugsConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_ECGConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_EnergyConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_EnvironmentConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_GastrointestinalConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_NervousConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_RenalConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_RespiratoryConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_TissueConfigurationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ConfigurationData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'pulse/cpm/bind/PulseConfiguration.prot"
  "o\022\016pulse.cpm.bind\032\034pulse/cdm/bind/Action"
  "s.proto\032\032pulse/cdm/bind/Enums.proto\032\037pul"
  "se/cdm/bind/Properties.proto\032\033pulse/cdm/"
  "bind/Engine.proto\032 pulse/cdm/bind/Enviro"
  "nment.proto\032%pulse/cdm/bind/PatientNutri"
  "tion.proto\032&pulse/cdm/bind/ElectroCardio"
  "Gram.proto\"\223H\n\021ConfigurationData\0220\n\010Time"
  "Step\030\001 \001(\0132\036.pulse.cdm.bind.ScalarTimeDa"
  "ta\0225\n\024AllowDynamicTimeStep\030\002 \001(\0162\027.pulse"
  ".cdm.bind.eSwitch\022\037\n\025StabilizationFileNa"
  "me\030\003 \001(\tH\000\022D\n\022TimedStabilization\030\004 \001(\0132&"
  ".pulse.cdm.bind.TimedStabilizationDataH\000"
  "\022H\n\024DynamicStabilization\030\005 \001(\0132(.pulse.c"
  "dm.bind.DynamicStabilizationDataH\000\0229\n\030Wr"
  "itePatientBaselineFile\030\006 \001(\0162\027.pulse.cdm"
  ".bind.eSwitch\022f\n\033BloodChemistryConfigura"
  "tion\030\007 \001(\0132A.pulse.cpm.bind.Configuratio"
  "nData.BloodChemistryConfigurationData\022f\n"
  "\033CardiovascularConfiguration\030\010 \001(\0132A.pul"
  "se.cpm.bind.ConfigurationData.Cardiovasc"
  "ularConfigurationData\022X\n\024CircuitConfigur"
  "ation\030\t \001(\0132:.pulse.cpm.bind.Configurati"
  "onData.CircuitConfigurationData\022\\\n\026Const"
  "antsConfiguration\030\n \001(\0132<.pulse.cpm.bind"
  ".ConfigurationData.ConstantsConfiguratio"
  "nData\022T\n\022DrugsConfiguration\030\013 \001(\01328.puls"
  "e.cpm.bind.ConfigurationData.DrugsConfig"
  "urationData\022P\n\020ECGConfiguration\030\014 \001(\01326."
  "pulse.cpm.bind.ConfigurationData.ECGConf"
  "igurationData\022V\n\023EnergyConfiguration\030\r \001"
  "(\01329.pulse.cpm.bind.ConfigurationData.En"
  "ergyConfigurationData\022`\n\030EnvironmentConf"
  "iguration\030\016 \001(\0132>.pulse.cpm.bind.Configu"
  "rationData.EnvironmentConfigurationData\022"
  "j\n\035GastrointestinalConfiguration\030\017 \001(\0132C"
  ".pulse.cpm.bind.ConfigurationData.Gastro"
  "intestinalConfigurationData\022X\n\024NervousCo"
  "nfiguration\030\020 \001(\0132:.pulse.cpm.bind.Confi"
  "gurationData.NervousConfigurationData\022T\n"
  "\022RenalConfiguration\030\021 \001(\01328.pulse.cpm.bi"
  "nd.ConfigurationData.RenalConfigurationD"
  "ata\022`\n\030RespiratoryConfiguration\030\022 \001(\0132>."
  "pulse.cpm.bind.ConfigurationData.Respira"
  "toryConfigurationData\022V\n\023TissueConfigura"
  "tion\030\023 \001(\01329.pulse.cpm.bind.Configuratio"
  "nData.TissueConfigurationData\0227\n\020Initial"
  "Overrides\030\024 \001(\0132\035.pulse.cdm.bind.Overrid"
  "esData\032\316\002\n\037BloodChemistryConfigurationDa"
  "ta\022J\n\031MeanCorpuscularHemoglobin\030\001 \001(\0132\'."
  "pulse.cdm.bind.ScalarMassPerAmountData\022\?"
  "\n\025MeanCorpuscularVolume\030\002 \001(\0132 .pulse.cd"
  "m.bind.ScalarVolumeData\022C\n\031StandardDiffu"
  "sionDistance\030\003 \001(\0132 .pulse.cdm.bind.Scal"
  "arLengthData\022Y\n\"StandardOxygenDiffusionC"
  "oefficient\030\004 \001(\0132-.pulse.cdm.bind.Scalar"
  "AreaPerTimePressureData\032\357\003\n\037Cardiovascul"
  "arConfigurationData\022N\n\031LeftHeartElastanc"
  "eMaximum\030\001 \001(\0132+.pulse.cdm.bind.ScalarPr"
  "essurePerVolumeData\022N\n\031LeftHeartElastanc"
  "eMinimum\030\002 \001(\0132+.pulse.cdm.bind.ScalarPr"
  "essurePerVolumeData\022B\n\032MinimumBloodVolum"
  "eFraction\030\003 \001(\0132\036.pulse.cdm.bind.Scalar0"
  "To1Data\022O\n\032RightHeartElastanceMaximum\030\004 "
  "\001(\0132+.pulse.cdm.bind.ScalarPressurePerVo"
  "lumeData\022O\n\032RightHeartElastanceMinimum\030\005"
  " \001(\0132+.pulse.cdm.bind.ScalarPressurePerV"
  "olumeData\022F\n\"StandardPulmonaryCapillaryC"
  "overage\030\006 \001(\0132\032.pulse.cdm.bind.ScalarDat"
  "a\032\257\007\n\030CircuitConfigurationData\022U\n\034Cardio"
  "vascularOpenResistance\030\001 \001(\0132/.pulse.cdm"
  ".bind.ScalarPressureTimePerVolumeData\022U\n"
  "\037DefaultClosedElectricResistance\030\002 \001(\0132,"
  ".pulse.cdm.bind.ScalarElectricResistance"
  "Data\022S\n\035DefaultOpenElectricResistance\030\003 "
  "\001(\0132,.pulse.cdm.bind.ScalarElectricResis"
  "tanceData\022T\n\033DefaultClosedFlowResistance"
  "\030\004 \001(\0132/.pulse.cdm.bind.ScalarPressureTi"
  "mePerVolumeData\022R\n\031DefaultOpenFlowResist"
  "ance\030\005 \001(\0132/.pulse.cdm.bind.ScalarPressu"
  "reTimePerVolumeData\022M\n\033DefaultClosedHeat"
  "Resistance\030\006 \001(\0132(.pulse.cdm.bind.Scalar"
  "HeatResistanceData\022K\n\031DefaultOpenHeatRes"
  "istance\030\007 \001(\0132(.pulse.cdm.bind.ScalarHea"
  "tResistanceData\022P\n\027MachineClosedResistan"
  "ce\030\010 \001(\0132/.pulse.cdm.bind.ScalarPressure"
  "TimePerVolumeData\022N\n\025MachineOpenResistan"
  "ce\030\t \001(\0132/.pulse.cdm.bind.ScalarPressure"
  "TimePerVolumeData\022T\n\033RespiratoryClosedRe"
  "sistance\030\n \001(\0132/.pulse.cdm.bind.ScalarPr"
  "essureTimePerVolumeData\022R\n\031RespiratoryOp"
  "enResistance\030\013 \001(\0132/.pulse.cdm.bind.Scal"
  "arPressureTimePerVolumeData\032\202\002\n\032Constant"
  "sConfigurationData\022;\n\027OxygenMetabolicCon"
  "stant\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData\022"
  "U\n\017StefanBoltzmann\030\002 \001(\0132<.pulse.cdm.bin"
  "d.ScalarPowerPerAreaTemperatureToTheFour"
  "thData\022P\n\024UniversalGasConstant\030\003 \001(\01322.p"
  "ulse.cdm.bind.ScalarHeatCapacitancePerAm"
  "ountData\032B\n\026DrugsConfigurationData\022(\n\007PD"
  "Model\030\001 \001(\0162\027.pulse.cdm.bind.eSwitch\032\242\001\n"
  "\024ECGConfigurationData\022\036\n\024InterpolatorFil"
  "eName\030\001 \001(\tH\000\022I\n\014Interpolator\030\002 \001(\01321.pu"
  "lse.cdm.bind.ElectroCardioGramWaveformLi"
  "stDataH\000B\037\n\035ElectroCardioGramInterpolato"
  "r\032\247\005\n\027EnergyConfigurationData\022J\n\020BodySpe"
  "cificHeat\030\001 \001(\01320.pulse.cdm.bind.ScalarH"
  "eatCapacitancePerMassData\022X\n4CarbonDioxi"
  "deProductionFromOxygenConsumptionConstan"
  "t\030\002 \001(\0132\032.pulse.cdm.bind.ScalarData\022A\n\022C"
  "oreTemperatureLow\030\003 \001(\0132%.pulse.cdm.bind"
  ".ScalarTemperatureData\022B\n\023CoreTemperatur"
  "eHigh\030\004 \001(\0132%.pulse.cdm.bind.ScalarTempe"
  "ratureData\022F\n\027DeltaCoreTemperatureLow\030\005 "
  "\001(\0132%.pulse.cdm.bind.ScalarTemperatureDa"
  "ta\022\?\n\014EnergyPerATP\030\006 \001(\0132).pulse.cdm.bin"
  "d.ScalarEnergyPerAmountData\022D\n\021SweatHeat"
  "Transfer\030\007 \001(\0132).pulse.cdm.bind.ScalarHe"
  "atConductanceData\022C\n\022VaporizationEnergy\030"
  "\010 \001(\0132\'.pulse.cdm.bind.ScalarEnergyPerMa"
  "ssData\022K\n\021VaporSpecificHeat\030\t \001(\01320.puls"
  "e.cdm.bind.ScalarHeatCapacitancePerMassD"
  "ata\032\346\003\n\034EnvironmentConfigurationData\022H\n\021"
  "InitialConditions\030\001 \001(\0132+.pulse.cdm.bind"
  ".EnvironmentalConditionsDataH\000\022\037\n\025Initia"
  "lConditionsFile\030\002 \001(\tH\000\022;\n\nAirDensity\030\003 "
  "\001(\0132\'.pulse.cdm.bind.ScalarMassPerVolume"
  "Data\022I\n\017AirSpecificHeat\030\004 \001(\01320.pulse.cd"
  "m.bind.ScalarHeatCapacitancePerMassData\022"
  "B\n\021MolarMassOfDryAir\030\005 \001(\0132\'.pulse.cdm.b"
  "ind.ScalarMassPerAmountData\022F\n\025MolarMass"
  "OfWaterVapor\030\006 \001(\0132\'.pulse.cdm.bind.Scal"
  "arMassPerAmountData\022=\n\014WaterDensity\030\007 \001("
  "\0132\'.pulse.cdm.bind.ScalarMassPerVolumeDa"
  "taB\010\n\006Option\032\214\006\n!GastrointestinalConfigu"
  "rationData\022\?\n\026InitialStomachContents\030\001 \001"
  "(\0132\035.pulse.cdm.bind.NutritionDataH\000\022$\n\032I"
  "nitialStomachContentsFile\030\002 \001(\tH\000\022A\n\031Cal"
  "ciumAbsorptionFraction\030\003 \001(\0132\036.pulse.cdm"
  ".bind.Scalar0To1Data\022C\n\024CalciumDigestion"
  "Rate\030\004 \001(\0132%.pulse.cdm.bind.ScalarMassPe"
  "rTimeData\022F\n\036CarbohydrateAbsorptionFract"
  "ion\030\005 \001(\0132\036.pulse.cdm.bind.Scalar0To1Dat"
  "a\022O\n DefaultCarbohydrateDigestionRate\030\006 "
  "\001(\0132%.pulse.cdm.bind.ScalarMassPerTimeDa"
  "ta\022F\n\027DefaultFatDigestionRate\030\007 \001(\0132%.pu"
  "lse.cdm.bind.ScalarMassPerTimeData\022J\n\033De"
  "faultProteinDigestionRate\030\010 \001(\0132%.pulse."
  "cdm.bind.ScalarMassPerTimeData\022=\n\025FatAbs"
  "orptionFraction\030\t \001(\0132\036.pulse.cdm.bind.S"
  "calar0To1Data\022=\n\025ProteinToUreaFraction\030\n"
  " \001(\0132\036.pulse.cdm.bind.Scalar0To1Data\022C\n\022"
  "WaterDigestionRate\030\013 \001(\0132\'.pulse.cdm.bin"
  "d.ScalarVolumePerTimeDataB\010\n\006Option\032\364\t\n\030"
  "NervousConfigurationData\0229\n\030EnableCerebr"
  "ospinalFluid\030\001 \001(\0162\027.pulse.cdm.bind.eSwi"
  "tch\0226\n\025ChemoreceptorFeedback\030\002 \001(\0162\027.pul"
  "se.cdm.bind.eSwitch\0225\n\024BaroreceptorFeedb"
  "ack\030\003 \001(\0162\027.pulse.cdm.bind.eSwitch\022J\n\"He"
  "artElastanceDistributedTimeDelay\030\004 \001(\0132\036"
  ".pulse.cdm.bind.ScalarTimeData\022E\n\035HeartR"
  "ateDistributedTimeDelay\030\005 \001(\0132\036.pulse.cd"
  "m.bind.ScalarTimeData\022@\n\034NormalizedHeart"
  "RateIntercept\030\006 \001(\0132\032.pulse.cdm.bind.Sca"
  "larData\022G\n#NormalizedHeartRateSympatheti"
  "cSlope\030\007 \001(\0132\032.pulse.cdm.bind.ScalarData"
  "\022K\n\'NormalizedHeartRateParasympatheticSl"
  "ope\030\010 \001(\0132\032.pulse.cdm.bind.ScalarData\022E\n"
  "!NormalizedHeartElastanceIntercept\030\t \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\022L\n(Normaliz"
  "edHeartElastanceSympatheticSlope\030\n \001(\0132\032"
  ".pulse.cdm.bind.ScalarData\022A\n\035Normalized"
  "ResistanceIntercept\030\013 \001(\0132\032.pulse.cdm.bi"
  "nd.ScalarData\022H\n$NormalizedResistanceSym"
  "patheticSlope\030\014 \001(\0132\032.pulse.cdm.bind.Sca"
  "larData\022A\n\035NormalizedComplianceIntercept"
  "\030\r \001(\0132\032.pulse.cdm.bind.ScalarData\022L\n(No"
  "rmalizedComplianceParasympatheticSlope\030\016"
  " \001(\0132\032.pulse.cdm.bind.ScalarData\022\?\n\025Pupi"
  "lDiameterBaseline\030\017 \001(\0132 .pulse.cdm.bind"
  ".ScalarLengthData\0221\n\rResponseSlope\030\020 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\022N\n&Systemic"
  "ResistanceDistributedTimeDelay\030\021 \001(\0132\036.p"
  "ulse.cdm.bind.ScalarTimeData\022L\n$VenousCo"
  "mplianceDistributedTimeDelay\030\022 \001(\0132\036.pul"
  "se.cdm.bind.ScalarTimeData\032\363\t\n\026RenalConf"
  "igurationData\022,\n\013EnableRenal\030\001 \001(\0162\027.pul"
  "se.cdm.bind.eSwitch\022R\n!PlasmaSodiumConce"
  "ntrationSetPoint\030\002 \001(\0132\'.pulse.cdm.bind."
  "ScalarMassPerVolumeData\022Z\n)PeritubularPo"
  "tassiumConcentrationSetPoint\030\003 \001(\0132\'.pul"
  "se.cdm.bind.ScalarMassPerVolumeData\022R\n*L"
  "eftGlomerularFilteringSurfaceAreaBaselin"
  "e\030\004 \001(\0132\036.pulse.cdm.bind.ScalarAreaData\022"
  "d\n\'LeftGlomerularFluidPermeabilityBaseli"
  "ne\030\005 \001(\01323.pulse.cdm.bind.ScalarVolumePe"
  "rTimePressureAreaData\022[\n3LeftTubularReab"
  "sorptionFilteringSurfaceAreaBaseline\030\006 \001"
  "(\0132\036.pulse.cdm.bind.ScalarAreaData\022m\n0Le"
  "ftTubularReabsorptionFluidPermeabilityBa"
  "seline\030\007 \001(\01323.pulse.cdm.bind.ScalarVolu"
  "mePerTimePressureAreaData\022R\n\031MaximumAffe"
  "rentResistance\030\010 \001(\0132/.pulse.cdm.bind.Sc"
  "alarPressureTimePerVolumeData\022R\n\031Minimum"
  "AfferentResistance\030\t \001(\0132/.pulse.cdm.bin"
  "d.ScalarPressureTimePerVolumeData\022S\n+Rig"
  "htGlomerularFilteringSurfaceAreaBaseline"
  "\030\n \001(\0132\036.pulse.cdm.bind.ScalarAreaData\022e"
  "\n(RightGlomerularFluidPermeabilityBaseli"
  "ne\030\013 \001(\01323.pulse.cdm.bind.ScalarVolumePe"
  "rTimePressureAreaData\022\\\n4RightTubularRea"
  "bsorptionFilteringSurfaceAreaBaseline\030\014 "
  "\001(\0132\036.pulse.cdm.bind.ScalarAreaData\022n\n1R"
  "ightTubularReabsorptionFluidPermeability"
  "Baseline\030\r \001(\01323.pulse.cdm.bind.ScalarVo"
  "lumePerTimePressureAreaData\022C\n\024TargetSod"
  "iumDelivery\030\016 \001(\0132%.pulse.cdm.bind.Scala"
  "rMassPerTimeData\032\332\005\n\034RespiratoryConfigur"
  "ationData\022P\n$CentralControllerCO2Pressur"
  "eSetPoint\030\001 \001(\0132\".pulse.cdm.bind.ScalarP"
  "ressureData\022D\n CentralVentilatoryControl"
  "lerGain\030\002 \001(\0132\032.pulse.cdm.bind.ScalarDat"
  "a\022E\n\033MinimumAllowableTidalVolume\030\003 \001(\0132 "
  ".pulse.cdm.bind.ScalarVolumeData\022V\n.Mini"
  "mumAllowableInspiratoryAndExpiratoryPeri"
  "od\030\004 \001(\0132\036.pulse.cdm.bind.ScalarTimeData"
  "\022S\n\'PeripheralControllerCO2PressureSetPo"
  "int\030\005 \001(\0132\".pulse.cdm.bind.ScalarPressur"
  "eData\022G\n#PeripheralVentilatoryController"
  "Gain\030\006 \001(\0132\032.pulse.cdm.bind.ScalarData\022P"
  "\n\037PulmonaryVentilationRateMaximum\030\007 \001(\0132"
  "\'.pulse.cdm.bind.ScalarVolumePerTimeData"
  "\022I\n\037VentilationTidalVolumeIntercept\030\010 \001("
  "\0132 .pulse.cdm.bind.ScalarVolumeData\022H\n\034V"
  "entilatoryOcclusionPressure\030\t \001(\0132\".puls"
  "e.cdm.bind.ScalarPressureData\032H\n\027TissueC"
  "onfigurationData\022-\n\014EnableTissue\030\001 \001(\0162\027"
  ".pulse.cdm.bind.eSwitchB\027\n\025Stabilization"
  "CriteriaB/\n\032com.kitware.pulse.cpm.bindH\001"
  "\252\002\016pulse.cpm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_deps[7] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_sccs[14] = {
  &scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
  &scc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto, "pulse/cpm/bind/PulseConfiguration.proto", 9585,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto_deps, 14, 7,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto, 14, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class ConfigurationData_BloodChemistryConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerAmountData& meancorpuscularhemoglobin(const ConfigurationData_BloodChemistryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& meancorpuscularvolume(const ConfigurationData_BloodChemistryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarLengthData& standarddiffusiondistance(const ConfigurationData_BloodChemistryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaPerTimePressureData& standardoxygendiffusioncoefficient(const ConfigurationData_BloodChemistryConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerAmountData&
ConfigurationData_BloodChemistryConfigurationData::_Internal::meancorpuscularhemoglobin(const ConfigurationData_BloodChemistryConfigurationData* msg) {
  return *msg->meancorpuscularhemoglobin_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
ConfigurationData_BloodChemistryConfigurationData::_Internal::meancorpuscularvolume(const ConfigurationData_BloodChemistryConfigurationData* msg) {
  return *msg->meancorpuscularvolume_;
}
const ::pulse::cdm::bind::ScalarLengthData&
ConfigurationData_BloodChemistryConfigurationData::_Internal::standarddiffusiondistance(const ConfigurationData_BloodChemistryConfigurationData* msg) {
  return *msg->standarddiffusiondistance_;
}
const ::pulse::cdm::bind::ScalarAreaPerTimePressureData&
ConfigurationData_BloodChemistryConfigurationData::_Internal::standardoxygendiffusioncoefficient(const ConfigurationData_BloodChemistryConfigurationData* msg) {
  return *msg->standardoxygendiffusioncoefficient_;
}
void ConfigurationData_BloodChemistryConfigurationData::clear_meancorpuscularhemoglobin() {
  if (GetArena() == nullptr && meancorpuscularhemoglobin_ != nullptr) {
    delete meancorpuscularhemoglobin_;
  }
  meancorpuscularhemoglobin_ = nullptr;
}
void ConfigurationData_BloodChemistryConfigurationData::clear_meancorpuscularvolume() {
  if (GetArena() == nullptr && meancorpuscularvolume_ != nullptr) {
    delete meancorpuscularvolume_;
  }
  meancorpuscularvolume_ = nullptr;
}
void ConfigurationData_BloodChemistryConfigurationData::clear_standarddiffusiondistance() {
  if (GetArena() == nullptr && standarddiffusiondistance_ != nullptr) {
    delete standarddiffusiondistance_;
  }
  standarddiffusiondistance_ = nullptr;
}
void ConfigurationData_BloodChemistryConfigurationData::clear_standardoxygendiffusioncoefficient() {
  if (GetArena() == nullptr && standardoxygendiffusioncoefficient_ != nullptr) {
    delete standardoxygendiffusioncoefficient_;
  }
  standardoxygendiffusioncoefficient_ = nullptr;
}
ConfigurationData_BloodChemistryConfigurationData::ConfigurationData_BloodChemistryConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
}
ConfigurationData_BloodChemistryConfigurationData::ConfigurationData_BloodChemistryConfigurationData(const ConfigurationData_BloodChemistryConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meancorpuscularhemoglobin()) {
    meancorpuscularhemoglobin_ = new ::pulse::cdm::bind::ScalarMassPerAmountData(*from.meancorpuscularhemoglobin_);
  } else {
    meancorpuscularhemoglobin_ = nullptr;
  }
  if (from._internal_has_meancorpuscularvolume()) {
    meancorpuscularvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.meancorpuscularvolume_);
  } else {
    meancorpuscularvolume_ = nullptr;
  }
  if (from._internal_has_standarddiffusiondistance()) {
    standarddiffusiondistance_ = new ::pulse::cdm::bind::ScalarLengthData(*from.standarddiffusiondistance_);
  } else {
    standarddiffusiondistance_ = nullptr;
  }
  if (from._internal_has_standardoxygendiffusioncoefficient()) {
    standardoxygendiffusioncoefficient_ = new ::pulse::cdm::bind::ScalarAreaPerTimePressureData(*from.standardoxygendiffusioncoefficient_);
  } else {
    standardoxygendiffusioncoefficient_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
}

void ConfigurationData_BloodChemistryConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&meancorpuscularhemoglobin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&standardoxygendiffusioncoefficient_) -
      reinterpret_cast<char*>(&meancorpuscularhemoglobin_)) + sizeof(standardoxygendiffusioncoefficient_));
}

ConfigurationData_BloodChemistryConfigurationData::~ConfigurationData_BloodChemistryConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_BloodChemistryConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete meancorpuscularhemoglobin_;
  if (this != internal_default_instance()) delete meancorpuscularvolume_;
  if (this != internal_default_instance()) delete standarddiffusiondistance_;
  if (this != internal_default_instance()) delete standardoxygendiffusioncoefficient_;
}

void ConfigurationData_BloodChemistryConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_BloodChemistryConfigurationData* _this = reinterpret_cast< ConfigurationData_BloodChemistryConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_BloodChemistryConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_BloodChemistryConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_BloodChemistryConfigurationData& ConfigurationData_BloodChemistryConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_BloodChemistryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_BloodChemistryConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && meancorpuscularhemoglobin_ != nullptr) {
    delete meancorpuscularhemoglobin_;
  }
  meancorpuscularhemoglobin_ = nullptr;
  if (GetArena() == nullptr && meancorpuscularvolume_ != nullptr) {
    delete meancorpuscularvolume_;
  }
  meancorpuscularvolume_ = nullptr;
  if (GetArena() == nullptr && standarddiffusiondistance_ != nullptr) {
    delete standarddiffusiondistance_;
  }
  standarddiffusiondistance_ = nullptr;
  if (GetArena() == nullptr && standardoxygendiffusioncoefficient_ != nullptr) {
    delete standardoxygendiffusioncoefficient_;
  }
  standardoxygendiffusioncoefficient_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_BloodChemistryConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancorpuscularhemoglobin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancorpuscularvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarLengthData StandardDiffusionDistance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_standarddiffusiondistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_standardoxygendiffusioncoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_BloodChemistryConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 1;
  if (this->has_meancorpuscularhemoglobin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meancorpuscularhemoglobin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 2;
  if (this->has_meancorpuscularvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meancorpuscularvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarLengthData StandardDiffusionDistance = 3;
  if (this->has_standarddiffusiondistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::standarddiffusiondistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient = 4;
  if (this->has_standardoxygendiffusioncoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::standardoxygendiffusioncoefficient(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  return target;
}

size_t ConfigurationData_BloodChemistryConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 1;
  if (this->has_meancorpuscularhemoglobin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancorpuscularhemoglobin_);
  }

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 2;
  if (this->has_meancorpuscularvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancorpuscularvolume_);
  }

  // .pulse.cdm.bind.ScalarLengthData StandardDiffusionDistance = 3;
  if (this->has_standarddiffusiondistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standarddiffusiondistance_);
  }

  // .pulse.cdm.bind.ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient = 4;
  if (this->has_standardoxygendiffusioncoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standardoxygendiffusioncoefficient_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_BloodChemistryConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_BloodChemistryConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_BloodChemistryConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_BloodChemistryConfigurationData::MergeFrom(const ConfigurationData_BloodChemistryConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meancorpuscularhemoglobin()) {
    _internal_mutable_meancorpuscularhemoglobin()->::pulse::cdm::bind::ScalarMassPerAmountData::MergeFrom(from._internal_meancorpuscularhemoglobin());
  }
  if (from.has_meancorpuscularvolume()) {
    _internal_mutable_meancorpuscularvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_meancorpuscularvolume());
  }
  if (from.has_standarddiffusiondistance()) {
    _internal_mutable_standarddiffusiondistance()->::pulse::cdm::bind::ScalarLengthData::MergeFrom(from._internal_standarddiffusiondistance());
  }
  if (from.has_standardoxygendiffusioncoefficient()) {
    _internal_mutable_standardoxygendiffusioncoefficient()->::pulse::cdm::bind::ScalarAreaPerTimePressureData::MergeFrom(from._internal_standardoxygendiffusioncoefficient());
  }
}

void ConfigurationData_BloodChemistryConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_BloodChemistryConfigurationData::CopyFrom(const ConfigurationData_BloodChemistryConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_BloodChemistryConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_BloodChemistryConfigurationData::InternalSwap(ConfigurationData_BloodChemistryConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_BloodChemistryConfigurationData, standardoxygendiffusioncoefficient_)
      + sizeof(ConfigurationData_BloodChemistryConfigurationData::standardoxygendiffusioncoefficient_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_BloodChemistryConfigurationData, meancorpuscularhemoglobin_)>(
          reinterpret_cast<char*>(&meancorpuscularhemoglobin_),
          reinterpret_cast<char*>(&other->meancorpuscularhemoglobin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_BloodChemistryConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_CardiovascularConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressurePerVolumeData& leftheartelastancemaximum(const ConfigurationData_CardiovascularConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressurePerVolumeData& leftheartelastanceminimum(const ConfigurationData_CardiovascularConfigurationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& minimumbloodvolumefraction(const ConfigurationData_CardiovascularConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressurePerVolumeData& rightheartelastancemaximum(const ConfigurationData_CardiovascularConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressurePerVolumeData& rightheartelastanceminimum(const ConfigurationData_CardiovascularConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& standardpulmonarycapillarycoverage(const ConfigurationData_CardiovascularConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarPressurePerVolumeData&
ConfigurationData_CardiovascularConfigurationData::_Internal::leftheartelastancemaximum(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->leftheartelastancemaximum_;
}
const ::pulse::cdm::bind::ScalarPressurePerVolumeData&
ConfigurationData_CardiovascularConfigurationData::_Internal::leftheartelastanceminimum(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->leftheartelastanceminimum_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ConfigurationData_CardiovascularConfigurationData::_Internal::minimumbloodvolumefraction(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->minimumbloodvolumefraction_;
}
const ::pulse::cdm::bind::ScalarPressurePerVolumeData&
ConfigurationData_CardiovascularConfigurationData::_Internal::rightheartelastancemaximum(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->rightheartelastancemaximum_;
}
const ::pulse::cdm::bind::ScalarPressurePerVolumeData&
ConfigurationData_CardiovascularConfigurationData::_Internal::rightheartelastanceminimum(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->rightheartelastanceminimum_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_CardiovascularConfigurationData::_Internal::standardpulmonarycapillarycoverage(const ConfigurationData_CardiovascularConfigurationData* msg) {
  return *msg->standardpulmonarycapillarycoverage_;
}
void ConfigurationData_CardiovascularConfigurationData::clear_leftheartelastancemaximum() {
  if (GetArena() == nullptr && leftheartelastancemaximum_ != nullptr) {
    delete leftheartelastancemaximum_;
  }
  leftheartelastancemaximum_ = nullptr;
}
void ConfigurationData_CardiovascularConfigurationData::clear_leftheartelastanceminimum() {
  if (GetArena() == nullptr && leftheartelastanceminimum_ != nullptr) {
    delete leftheartelastanceminimum_;
  }
  leftheartelastanceminimum_ = nullptr;
}
void ConfigurationData_CardiovascularConfigurationData::clear_minimumbloodvolumefraction() {
  if (GetArena() == nullptr && minimumbloodvolumefraction_ != nullptr) {
    delete minimumbloodvolumefraction_;
  }
  minimumbloodvolumefraction_ = nullptr;
}
void ConfigurationData_CardiovascularConfigurationData::clear_rightheartelastancemaximum() {
  if (GetArena() == nullptr && rightheartelastancemaximum_ != nullptr) {
    delete rightheartelastancemaximum_;
  }
  rightheartelastancemaximum_ = nullptr;
}
void ConfigurationData_CardiovascularConfigurationData::clear_rightheartelastanceminimum() {
  if (GetArena() == nullptr && rightheartelastanceminimum_ != nullptr) {
    delete rightheartelastanceminimum_;
  }
  rightheartelastanceminimum_ = nullptr;
}
void ConfigurationData_CardiovascularConfigurationData::clear_standardpulmonarycapillarycoverage() {
  if (GetArena() == nullptr && standardpulmonarycapillarycoverage_ != nullptr) {
    delete standardpulmonarycapillarycoverage_;
  }
  standardpulmonarycapillarycoverage_ = nullptr;
}
ConfigurationData_CardiovascularConfigurationData::ConfigurationData_CardiovascularConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
}
ConfigurationData_CardiovascularConfigurationData::ConfigurationData_CardiovascularConfigurationData(const ConfigurationData_CardiovascularConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leftheartelastancemaximum()) {
    leftheartelastancemaximum_ = new ::pulse::cdm::bind::ScalarPressurePerVolumeData(*from.leftheartelastancemaximum_);
  } else {
    leftheartelastancemaximum_ = nullptr;
  }
  if (from._internal_has_leftheartelastanceminimum()) {
    leftheartelastanceminimum_ = new ::pulse::cdm::bind::ScalarPressurePerVolumeData(*from.leftheartelastanceminimum_);
  } else {
    leftheartelastanceminimum_ = nullptr;
  }
  if (from._internal_has_minimumbloodvolumefraction()) {
    minimumbloodvolumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.minimumbloodvolumefraction_);
  } else {
    minimumbloodvolumefraction_ = nullptr;
  }
  if (from._internal_has_rightheartelastancemaximum()) {
    rightheartelastancemaximum_ = new ::pulse::cdm::bind::ScalarPressurePerVolumeData(*from.rightheartelastancemaximum_);
  } else {
    rightheartelastancemaximum_ = nullptr;
  }
  if (from._internal_has_rightheartelastanceminimum()) {
    rightheartelastanceminimum_ = new ::pulse::cdm::bind::ScalarPressurePerVolumeData(*from.rightheartelastanceminimum_);
  } else {
    rightheartelastanceminimum_ = nullptr;
  }
  if (from._internal_has_standardpulmonarycapillarycoverage()) {
    standardpulmonarycapillarycoverage_ = new ::pulse::cdm::bind::ScalarData(*from.standardpulmonarycapillarycoverage_);
  } else {
    standardpulmonarycapillarycoverage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
}

void ConfigurationData_CardiovascularConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&leftheartelastancemaximum_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&standardpulmonarycapillarycoverage_) -
      reinterpret_cast<char*>(&leftheartelastancemaximum_)) + sizeof(standardpulmonarycapillarycoverage_));
}

ConfigurationData_CardiovascularConfigurationData::~ConfigurationData_CardiovascularConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_CardiovascularConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leftheartelastancemaximum_;
  if (this != internal_default_instance()) delete leftheartelastanceminimum_;
  if (this != internal_default_instance()) delete minimumbloodvolumefraction_;
  if (this != internal_default_instance()) delete rightheartelastancemaximum_;
  if (this != internal_default_instance()) delete rightheartelastanceminimum_;
  if (this != internal_default_instance()) delete standardpulmonarycapillarycoverage_;
}

void ConfigurationData_CardiovascularConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_CardiovascularConfigurationData* _this = reinterpret_cast< ConfigurationData_CardiovascularConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_CardiovascularConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_CardiovascularConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_CardiovascularConfigurationData& ConfigurationData_CardiovascularConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_CardiovascularConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_CardiovascularConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leftheartelastancemaximum_ != nullptr) {
    delete leftheartelastancemaximum_;
  }
  leftheartelastancemaximum_ = nullptr;
  if (GetArena() == nullptr && leftheartelastanceminimum_ != nullptr) {
    delete leftheartelastanceminimum_;
  }
  leftheartelastanceminimum_ = nullptr;
  if (GetArena() == nullptr && minimumbloodvolumefraction_ != nullptr) {
    delete minimumbloodvolumefraction_;
  }
  minimumbloodvolumefraction_ = nullptr;
  if (GetArena() == nullptr && rightheartelastancemaximum_ != nullptr) {
    delete rightheartelastancemaximum_;
  }
  rightheartelastancemaximum_ = nullptr;
  if (GetArena() == nullptr && rightheartelastanceminimum_ != nullptr) {
    delete rightheartelastanceminimum_;
  }
  rightheartelastanceminimum_ = nullptr;
  if (GetArena() == nullptr && standardpulmonarycapillarycoverage_ != nullptr) {
    delete standardpulmonarycapillarycoverage_;
  }
  standardpulmonarycapillarycoverage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_CardiovascularConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMaximum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftheartelastancemaximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMinimum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftheartelastanceminimum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data MinimumBloodVolumeFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimumbloodvolumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMaximum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightheartelastancemaximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMinimum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightheartelastanceminimum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData StandardPulmonaryCapillaryCoverage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_standardpulmonarycapillarycoverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_CardiovascularConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMaximum = 1;
  if (this->has_leftheartelastancemaximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leftheartelastancemaximum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMinimum = 2;
  if (this->has_leftheartelastanceminimum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leftheartelastanceminimum(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data MinimumBloodVolumeFraction = 3;
  if (this->has_minimumbloodvolumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::minimumbloodvolumefraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMaximum = 4;
  if (this->has_rightheartelastancemaximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rightheartelastancemaximum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMinimum = 5;
  if (this->has_rightheartelastanceminimum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rightheartelastanceminimum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData StandardPulmonaryCapillaryCoverage = 6;
  if (this->has_standardpulmonarycapillarycoverage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::standardpulmonarycapillarycoverage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  return target;
}

size_t ConfigurationData_CardiovascularConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMaximum = 1;
  if (this->has_leftheartelastancemaximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftheartelastancemaximum_);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMinimum = 2;
  if (this->has_leftheartelastanceminimum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftheartelastanceminimum_);
  }

  // .pulse.cdm.bind.Scalar0To1Data MinimumBloodVolumeFraction = 3;
  if (this->has_minimumbloodvolumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimumbloodvolumefraction_);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMaximum = 4;
  if (this->has_rightheartelastancemaximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightheartelastancemaximum_);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMinimum = 5;
  if (this->has_rightheartelastanceminimum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightheartelastanceminimum_);
  }

  // .pulse.cdm.bind.ScalarData StandardPulmonaryCapillaryCoverage = 6;
  if (this->has_standardpulmonarycapillarycoverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *standardpulmonarycapillarycoverage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_CardiovascularConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_CardiovascularConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_CardiovascularConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_CardiovascularConfigurationData::MergeFrom(const ConfigurationData_CardiovascularConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leftheartelastancemaximum()) {
    _internal_mutable_leftheartelastancemaximum()->::pulse::cdm::bind::ScalarPressurePerVolumeData::MergeFrom(from._internal_leftheartelastancemaximum());
  }
  if (from.has_leftheartelastanceminimum()) {
    _internal_mutable_leftheartelastanceminimum()->::pulse::cdm::bind::ScalarPressurePerVolumeData::MergeFrom(from._internal_leftheartelastanceminimum());
  }
  if (from.has_minimumbloodvolumefraction()) {
    _internal_mutable_minimumbloodvolumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_minimumbloodvolumefraction());
  }
  if (from.has_rightheartelastancemaximum()) {
    _internal_mutable_rightheartelastancemaximum()->::pulse::cdm::bind::ScalarPressurePerVolumeData::MergeFrom(from._internal_rightheartelastancemaximum());
  }
  if (from.has_rightheartelastanceminimum()) {
    _internal_mutable_rightheartelastanceminimum()->::pulse::cdm::bind::ScalarPressurePerVolumeData::MergeFrom(from._internal_rightheartelastanceminimum());
  }
  if (from.has_standardpulmonarycapillarycoverage()) {
    _internal_mutable_standardpulmonarycapillarycoverage()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_standardpulmonarycapillarycoverage());
  }
}

void ConfigurationData_CardiovascularConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_CardiovascularConfigurationData::CopyFrom(const ConfigurationData_CardiovascularConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_CardiovascularConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_CardiovascularConfigurationData::InternalSwap(ConfigurationData_CardiovascularConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_CardiovascularConfigurationData, standardpulmonarycapillarycoverage_)
      + sizeof(ConfigurationData_CardiovascularConfigurationData::standardpulmonarycapillarycoverage_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_CardiovascularConfigurationData, leftheartelastancemaximum_)>(
          reinterpret_cast<char*>(&leftheartelastancemaximum_),
          reinterpret_cast<char*>(&other->leftheartelastancemaximum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_CardiovascularConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_CircuitConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& cardiovascularopenresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarElectricResistanceData& defaultclosedelectricresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarElectricResistanceData& defaultopenelectricresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& defaultclosedflowresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& defaultopenflowresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatResistanceData& defaultclosedheatresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatResistanceData& defaultopenheatresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& machineclosedresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& machineopenresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& respiratoryclosedresistance(const ConfigurationData_CircuitConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& respiratoryopenresistance(const ConfigurationData_CircuitConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::cardiovascularopenresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->cardiovascularopenresistance_;
}
const ::pulse::cdm::bind::ScalarElectricResistanceData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultclosedelectricresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultclosedelectricresistance_;
}
const ::pulse::cdm::bind::ScalarElectricResistanceData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultopenelectricresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultopenelectricresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultclosedflowresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultclosedflowresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultopenflowresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultopenflowresistance_;
}
const ::pulse::cdm::bind::ScalarHeatResistanceData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultclosedheatresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultclosedheatresistance_;
}
const ::pulse::cdm::bind::ScalarHeatResistanceData&
ConfigurationData_CircuitConfigurationData::_Internal::defaultopenheatresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->defaultopenheatresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::machineclosedresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->machineclosedresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::machineopenresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->machineopenresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::respiratoryclosedresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->respiratoryclosedresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_CircuitConfigurationData::_Internal::respiratoryopenresistance(const ConfigurationData_CircuitConfigurationData* msg) {
  return *msg->respiratoryopenresistance_;
}
void ConfigurationData_CircuitConfigurationData::clear_cardiovascularopenresistance() {
  if (GetArena() == nullptr && cardiovascularopenresistance_ != nullptr) {
    delete cardiovascularopenresistance_;
  }
  cardiovascularopenresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultclosedelectricresistance() {
  if (GetArena() == nullptr && defaultclosedelectricresistance_ != nullptr) {
    delete defaultclosedelectricresistance_;
  }
  defaultclosedelectricresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultopenelectricresistance() {
  if (GetArena() == nullptr && defaultopenelectricresistance_ != nullptr) {
    delete defaultopenelectricresistance_;
  }
  defaultopenelectricresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultclosedflowresistance() {
  if (GetArena() == nullptr && defaultclosedflowresistance_ != nullptr) {
    delete defaultclosedflowresistance_;
  }
  defaultclosedflowresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultopenflowresistance() {
  if (GetArena() == nullptr && defaultopenflowresistance_ != nullptr) {
    delete defaultopenflowresistance_;
  }
  defaultopenflowresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultclosedheatresistance() {
  if (GetArena() == nullptr && defaultclosedheatresistance_ != nullptr) {
    delete defaultclosedheatresistance_;
  }
  defaultclosedheatresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_defaultopenheatresistance() {
  if (GetArena() == nullptr && defaultopenheatresistance_ != nullptr) {
    delete defaultopenheatresistance_;
  }
  defaultopenheatresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_machineclosedresistance() {
  if (GetArena() == nullptr && machineclosedresistance_ != nullptr) {
    delete machineclosedresistance_;
  }
  machineclosedresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_machineopenresistance() {
  if (GetArena() == nullptr && machineopenresistance_ != nullptr) {
    delete machineopenresistance_;
  }
  machineopenresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_respiratoryclosedresistance() {
  if (GetArena() == nullptr && respiratoryclosedresistance_ != nullptr) {
    delete respiratoryclosedresistance_;
  }
  respiratoryclosedresistance_ = nullptr;
}
void ConfigurationData_CircuitConfigurationData::clear_respiratoryopenresistance() {
  if (GetArena() == nullptr && respiratoryopenresistance_ != nullptr) {
    delete respiratoryopenresistance_;
  }
  respiratoryopenresistance_ = nullptr;
}
ConfigurationData_CircuitConfigurationData::ConfigurationData_CircuitConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
}
ConfigurationData_CircuitConfigurationData::ConfigurationData_CircuitConfigurationData(const ConfigurationData_CircuitConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cardiovascularopenresistance()) {
    cardiovascularopenresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.cardiovascularopenresistance_);
  } else {
    cardiovascularopenresistance_ = nullptr;
  }
  if (from._internal_has_defaultclosedelectricresistance()) {
    defaultclosedelectricresistance_ = new ::pulse::cdm::bind::ScalarElectricResistanceData(*from.defaultclosedelectricresistance_);
  } else {
    defaultclosedelectricresistance_ = nullptr;
  }
  if (from._internal_has_defaultopenelectricresistance()) {
    defaultopenelectricresistance_ = new ::pulse::cdm::bind::ScalarElectricResistanceData(*from.defaultopenelectricresistance_);
  } else {
    defaultopenelectricresistance_ = nullptr;
  }
  if (from._internal_has_defaultclosedflowresistance()) {
    defaultclosedflowresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.defaultclosedflowresistance_);
  } else {
    defaultclosedflowresistance_ = nullptr;
  }
  if (from._internal_has_defaultopenflowresistance()) {
    defaultopenflowresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.defaultopenflowresistance_);
  } else {
    defaultopenflowresistance_ = nullptr;
  }
  if (from._internal_has_defaultclosedheatresistance()) {
    defaultclosedheatresistance_ = new ::pulse::cdm::bind::ScalarHeatResistanceData(*from.defaultclosedheatresistance_);
  } else {
    defaultclosedheatresistance_ = nullptr;
  }
  if (from._internal_has_defaultopenheatresistance()) {
    defaultopenheatresistance_ = new ::pulse::cdm::bind::ScalarHeatResistanceData(*from.defaultopenheatresistance_);
  } else {
    defaultopenheatresistance_ = nullptr;
  }
  if (from._internal_has_machineclosedresistance()) {
    machineclosedresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.machineclosedresistance_);
  } else {
    machineclosedresistance_ = nullptr;
  }
  if (from._internal_has_machineopenresistance()) {
    machineopenresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.machineopenresistance_);
  } else {
    machineopenresistance_ = nullptr;
  }
  if (from._internal_has_respiratoryclosedresistance()) {
    respiratoryclosedresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.respiratoryclosedresistance_);
  } else {
    respiratoryclosedresistance_ = nullptr;
  }
  if (from._internal_has_respiratoryopenresistance()) {
    respiratoryopenresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.respiratoryopenresistance_);
  } else {
    respiratoryopenresistance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
}

void ConfigurationData_CircuitConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cardiovascularopenresistance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&respiratoryopenresistance_) -
      reinterpret_cast<char*>(&cardiovascularopenresistance_)) + sizeof(respiratoryopenresistance_));
}

ConfigurationData_CircuitConfigurationData::~ConfigurationData_CircuitConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_CircuitConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cardiovascularopenresistance_;
  if (this != internal_default_instance()) delete defaultclosedelectricresistance_;
  if (this != internal_default_instance()) delete defaultopenelectricresistance_;
  if (this != internal_default_instance()) delete defaultclosedflowresistance_;
  if (this != internal_default_instance()) delete defaultopenflowresistance_;
  if (this != internal_default_instance()) delete defaultclosedheatresistance_;
  if (this != internal_default_instance()) delete defaultopenheatresistance_;
  if (this != internal_default_instance()) delete machineclosedresistance_;
  if (this != internal_default_instance()) delete machineopenresistance_;
  if (this != internal_default_instance()) delete respiratoryclosedresistance_;
  if (this != internal_default_instance()) delete respiratoryopenresistance_;
}

void ConfigurationData_CircuitConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_CircuitConfigurationData* _this = reinterpret_cast< ConfigurationData_CircuitConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_CircuitConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_CircuitConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_CircuitConfigurationData& ConfigurationData_CircuitConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_CircuitConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_CircuitConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cardiovascularopenresistance_ != nullptr) {
    delete cardiovascularopenresistance_;
  }
  cardiovascularopenresistance_ = nullptr;
  if (GetArena() == nullptr && defaultclosedelectricresistance_ != nullptr) {
    delete defaultclosedelectricresistance_;
  }
  defaultclosedelectricresistance_ = nullptr;
  if (GetArena() == nullptr && defaultopenelectricresistance_ != nullptr) {
    delete defaultopenelectricresistance_;
  }
  defaultopenelectricresistance_ = nullptr;
  if (GetArena() == nullptr && defaultclosedflowresistance_ != nullptr) {
    delete defaultclosedflowresistance_;
  }
  defaultclosedflowresistance_ = nullptr;
  if (GetArena() == nullptr && defaultopenflowresistance_ != nullptr) {
    delete defaultopenflowresistance_;
  }
  defaultopenflowresistance_ = nullptr;
  if (GetArena() == nullptr && defaultclosedheatresistance_ != nullptr) {
    delete defaultclosedheatresistance_;
  }
  defaultclosedheatresistance_ = nullptr;
  if (GetArena() == nullptr && defaultopenheatresistance_ != nullptr) {
    delete defaultopenheatresistance_;
  }
  defaultopenheatresistance_ = nullptr;
  if (GetArena() == nullptr && machineclosedresistance_ != nullptr) {
    delete machineclosedresistance_;
  }
  machineclosedresistance_ = nullptr;
  if (GetArena() == nullptr && machineopenresistance_ != nullptr) {
    delete machineopenresistance_;
  }
  machineopenresistance_ = nullptr;
  if (GetArena() == nullptr && respiratoryclosedresistance_ != nullptr) {
    delete respiratoryclosedresistance_;
  }
  respiratoryclosedresistance_ = nullptr;
  if (GetArena() == nullptr && respiratoryopenresistance_ != nullptr) {
    delete respiratoryopenresistance_;
  }
  respiratoryopenresistance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_CircuitConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData CardiovascularOpenResistance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiovascularopenresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricResistanceData DefaultClosedElectricResistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultclosedelectricresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricResistanceData DefaultOpenElectricResistance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultopenelectricresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultClosedFlowResistance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultclosedflowresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultOpenFlowResistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultopenflowresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatResistanceData DefaultClosedHeatResistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultclosedheatresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatResistanceData DefaultOpenHeatResistance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultopenheatresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineClosedResistance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_machineclosedresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineOpenResistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_machineopenresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryClosedResistance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryclosedresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryOpenResistance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryopenresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_CircuitConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData CardiovascularOpenResistance = 1;
  if (this->has_cardiovascularopenresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cardiovascularopenresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultClosedElectricResistance = 2;
  if (this->has_defaultclosedelectricresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::defaultclosedelectricresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultOpenElectricResistance = 3;
  if (this->has_defaultopenelectricresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::defaultopenelectricresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultClosedFlowResistance = 4;
  if (this->has_defaultclosedflowresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::defaultclosedflowresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultOpenFlowResistance = 5;
  if (this->has_defaultopenflowresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::defaultopenflowresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultClosedHeatResistance = 6;
  if (this->has_defaultclosedheatresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::defaultclosedheatresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultOpenHeatResistance = 7;
  if (this->has_defaultopenheatresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::defaultopenheatresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineClosedResistance = 8;
  if (this->has_machineclosedresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::machineclosedresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineOpenResistance = 9;
  if (this->has_machineopenresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::machineopenresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryClosedResistance = 10;
  if (this->has_respiratoryclosedresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::respiratoryclosedresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryOpenResistance = 11;
  if (this->has_respiratoryopenresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::respiratoryopenresistance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  return target;
}

size_t ConfigurationData_CircuitConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData CardiovascularOpenResistance = 1;
  if (this->has_cardiovascularopenresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiovascularopenresistance_);
  }

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultClosedElectricResistance = 2;
  if (this->has_defaultclosedelectricresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultclosedelectricresistance_);
  }

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultOpenElectricResistance = 3;
  if (this->has_defaultopenelectricresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultopenelectricresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultClosedFlowResistance = 4;
  if (this->has_defaultclosedflowresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultclosedflowresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultOpenFlowResistance = 5;
  if (this->has_defaultopenflowresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultopenflowresistance_);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultClosedHeatResistance = 6;
  if (this->has_defaultclosedheatresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultclosedheatresistance_);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultOpenHeatResistance = 7;
  if (this->has_defaultopenheatresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultopenheatresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineClosedResistance = 8;
  if (this->has_machineclosedresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machineclosedresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineOpenResistance = 9;
  if (this->has_machineopenresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machineopenresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryClosedResistance = 10;
  if (this->has_respiratoryclosedresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratoryclosedresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryOpenResistance = 11;
  if (this->has_respiratoryopenresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratoryopenresistance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_CircuitConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_CircuitConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_CircuitConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_CircuitConfigurationData::MergeFrom(const ConfigurationData_CircuitConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cardiovascularopenresistance()) {
    _internal_mutable_cardiovascularopenresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_cardiovascularopenresistance());
  }
  if (from.has_defaultclosedelectricresistance()) {
    _internal_mutable_defaultclosedelectricresistance()->::pulse::cdm::bind::ScalarElectricResistanceData::MergeFrom(from._internal_defaultclosedelectricresistance());
  }
  if (from.has_defaultopenelectricresistance()) {
    _internal_mutable_defaultopenelectricresistance()->::pulse::cdm::bind::ScalarElectricResistanceData::MergeFrom(from._internal_defaultopenelectricresistance());
  }
  if (from.has_defaultclosedflowresistance()) {
    _internal_mutable_defaultclosedflowresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_defaultclosedflowresistance());
  }
  if (from.has_defaultopenflowresistance()) {
    _internal_mutable_defaultopenflowresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_defaultopenflowresistance());
  }
  if (from.has_defaultclosedheatresistance()) {
    _internal_mutable_defaultclosedheatresistance()->::pulse::cdm::bind::ScalarHeatResistanceData::MergeFrom(from._internal_defaultclosedheatresistance());
  }
  if (from.has_defaultopenheatresistance()) {
    _internal_mutable_defaultopenheatresistance()->::pulse::cdm::bind::ScalarHeatResistanceData::MergeFrom(from._internal_defaultopenheatresistance());
  }
  if (from.has_machineclosedresistance()) {
    _internal_mutable_machineclosedresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_machineclosedresistance());
  }
  if (from.has_machineopenresistance()) {
    _internal_mutable_machineopenresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_machineopenresistance());
  }
  if (from.has_respiratoryclosedresistance()) {
    _internal_mutable_respiratoryclosedresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_respiratoryclosedresistance());
  }
  if (from.has_respiratoryopenresistance()) {
    _internal_mutable_respiratoryopenresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_respiratoryopenresistance());
  }
}

void ConfigurationData_CircuitConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_CircuitConfigurationData::CopyFrom(const ConfigurationData_CircuitConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_CircuitConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_CircuitConfigurationData::InternalSwap(ConfigurationData_CircuitConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_CircuitConfigurationData, respiratoryopenresistance_)
      + sizeof(ConfigurationData_CircuitConfigurationData::respiratoryopenresistance_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_CircuitConfigurationData, cardiovascularopenresistance_)>(
          reinterpret_cast<char*>(&cardiovascularopenresistance_),
          reinterpret_cast<char*>(&other->cardiovascularopenresistance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_CircuitConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_ConstantsConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& oxygenmetabolicconstant(const ConfigurationData_ConstantsConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData& stefanboltzmann(const ConfigurationData_ConstantsConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData& universalgasconstant(const ConfigurationData_ConstantsConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ConfigurationData_ConstantsConfigurationData::_Internal::oxygenmetabolicconstant(const ConfigurationData_ConstantsConfigurationData* msg) {
  return *msg->oxygenmetabolicconstant_;
}
const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData&
ConfigurationData_ConstantsConfigurationData::_Internal::stefanboltzmann(const ConfigurationData_ConstantsConfigurationData* msg) {
  return *msg->stefanboltzmann_;
}
const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData&
ConfigurationData_ConstantsConfigurationData::_Internal::universalgasconstant(const ConfigurationData_ConstantsConfigurationData* msg) {
  return *msg->universalgasconstant_;
}
void ConfigurationData_ConstantsConfigurationData::clear_oxygenmetabolicconstant() {
  if (GetArena() == nullptr && oxygenmetabolicconstant_ != nullptr) {
    delete oxygenmetabolicconstant_;
  }
  oxygenmetabolicconstant_ = nullptr;
}
void ConfigurationData_ConstantsConfigurationData::clear_stefanboltzmann() {
  if (GetArena() == nullptr && stefanboltzmann_ != nullptr) {
    delete stefanboltzmann_;
  }
  stefanboltzmann_ = nullptr;
}
void ConfigurationData_ConstantsConfigurationData::clear_universalgasconstant() {
  if (GetArena() == nullptr && universalgasconstant_ != nullptr) {
    delete universalgasconstant_;
  }
  universalgasconstant_ = nullptr;
}
ConfigurationData_ConstantsConfigurationData::ConfigurationData_ConstantsConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
}
ConfigurationData_ConstantsConfigurationData::ConfigurationData_ConstantsConfigurationData(const ConfigurationData_ConstantsConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oxygenmetabolicconstant()) {
    oxygenmetabolicconstant_ = new ::pulse::cdm::bind::ScalarData(*from.oxygenmetabolicconstant_);
  } else {
    oxygenmetabolicconstant_ = nullptr;
  }
  if (from._internal_has_stefanboltzmann()) {
    stefanboltzmann_ = new ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData(*from.stefanboltzmann_);
  } else {
    stefanboltzmann_ = nullptr;
  }
  if (from._internal_has_universalgasconstant()) {
    universalgasconstant_ = new ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData(*from.universalgasconstant_);
  } else {
    universalgasconstant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
}

void ConfigurationData_ConstantsConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&oxygenmetabolicconstant_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&universalgasconstant_) -
      reinterpret_cast<char*>(&oxygenmetabolicconstant_)) + sizeof(universalgasconstant_));
}

ConfigurationData_ConstantsConfigurationData::~ConfigurationData_ConstantsConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_ConstantsConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete oxygenmetabolicconstant_;
  if (this != internal_default_instance()) delete stefanboltzmann_;
  if (this != internal_default_instance()) delete universalgasconstant_;
}

void ConfigurationData_ConstantsConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_ConstantsConfigurationData* _this = reinterpret_cast< ConfigurationData_ConstantsConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_ConstantsConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_ConstantsConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_ConstantsConfigurationData& ConfigurationData_ConstantsConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_ConstantsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_ConstantsConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && oxygenmetabolicconstant_ != nullptr) {
    delete oxygenmetabolicconstant_;
  }
  oxygenmetabolicconstant_ = nullptr;
  if (GetArena() == nullptr && stefanboltzmann_ != nullptr) {
    delete stefanboltzmann_;
  }
  stefanboltzmann_ = nullptr;
  if (GetArena() == nullptr && universalgasconstant_ != nullptr) {
    delete universalgasconstant_;
  }
  universalgasconstant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_ConstantsConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData OxygenMetabolicConstant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenmetabolicconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stefanboltzmann(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatCapacitancePerAmountData UniversalGasConstant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_universalgasconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_ConstantsConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData OxygenMetabolicConstant = 1;
  if (this->has_oxygenmetabolicconstant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oxygenmetabolicconstant(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann = 2;
  if (this->has_stefanboltzmann()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stefanboltzmann(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerAmountData UniversalGasConstant = 3;
  if (this->has_universalgasconstant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::universalgasconstant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  return target;
}

size_t ConfigurationData_ConstantsConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData OxygenMetabolicConstant = 1;
  if (this->has_oxygenmetabolicconstant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenmetabolicconstant_);
  }

  // .pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann = 2;
  if (this->has_stefanboltzmann()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stefanboltzmann_);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerAmountData UniversalGasConstant = 3;
  if (this->has_universalgasconstant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *universalgasconstant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_ConstantsConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_ConstantsConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_ConstantsConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_ConstantsConfigurationData::MergeFrom(const ConfigurationData_ConstantsConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_oxygenmetabolicconstant()) {
    _internal_mutable_oxygenmetabolicconstant()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_oxygenmetabolicconstant());
  }
  if (from.has_stefanboltzmann()) {
    _internal_mutable_stefanboltzmann()->::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData::MergeFrom(from._internal_stefanboltzmann());
  }
  if (from.has_universalgasconstant()) {
    _internal_mutable_universalgasconstant()->::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData::MergeFrom(from._internal_universalgasconstant());
  }
}

void ConfigurationData_ConstantsConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_ConstantsConfigurationData::CopyFrom(const ConfigurationData_ConstantsConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_ConstantsConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_ConstantsConfigurationData::InternalSwap(ConfigurationData_ConstantsConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_ConstantsConfigurationData, universalgasconstant_)
      + sizeof(ConfigurationData_ConstantsConfigurationData::universalgasconstant_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_ConstantsConfigurationData, oxygenmetabolicconstant_)>(
          reinterpret_cast<char*>(&oxygenmetabolicconstant_),
          reinterpret_cast<char*>(&other->oxygenmetabolicconstant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_ConstantsConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_DrugsConfigurationData::_Internal {
 public:
};

ConfigurationData_DrugsConfigurationData::ConfigurationData_DrugsConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
}
ConfigurationData_DrugsConfigurationData::ConfigurationData_DrugsConfigurationData(const ConfigurationData_DrugsConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pdmodel_ = from.pdmodel_;
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
}

void ConfigurationData_DrugsConfigurationData::SharedCtor() {
  pdmodel_ = 0;
}

ConfigurationData_DrugsConfigurationData::~ConfigurationData_DrugsConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_DrugsConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfigurationData_DrugsConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_DrugsConfigurationData* _this = reinterpret_cast< ConfigurationData_DrugsConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_DrugsConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_DrugsConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_DrugsConfigurationData& ConfigurationData_DrugsConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_DrugsConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_DrugsConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pdmodel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_DrugsConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch PDModel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pdmodel(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_DrugsConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch PDModel = 1;
  if (this->pdmodel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pdmodel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  return target;
}

size_t ConfigurationData_DrugsConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch PDModel = 1;
  if (this->pdmodel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pdmodel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_DrugsConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_DrugsConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_DrugsConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_DrugsConfigurationData::MergeFrom(const ConfigurationData_DrugsConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pdmodel() != 0) {
    _internal_set_pdmodel(from._internal_pdmodel());
  }
}

void ConfigurationData_DrugsConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_DrugsConfigurationData::CopyFrom(const ConfigurationData_DrugsConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_DrugsConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_DrugsConfigurationData::InternalSwap(ConfigurationData_DrugsConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pdmodel_, other->pdmodel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_DrugsConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_ECGConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& interpolator(const ConfigurationData_ECGConfigurationData* msg);
};

const ::pulse::cdm::bind::ElectroCardioGramWaveformListData&
ConfigurationData_ECGConfigurationData::_Internal::interpolator(const ConfigurationData_ECGConfigurationData* msg) {
  return *msg->ElectroCardioGramInterpolator_.interpolator_;
}
void ConfigurationData_ECGConfigurationData::set_allocated_interpolator(::pulse::cdm::bind::ElectroCardioGramWaveformListData* interpolator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ElectroCardioGramInterpolator();
  if (interpolator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interpolator)->GetArena();
    if (message_arena != submessage_arena) {
      interpolator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interpolator, submessage_arena);
    }
    set_has_interpolator();
    ElectroCardioGramInterpolator_.interpolator_ = interpolator;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
}
void ConfigurationData_ECGConfigurationData::clear_interpolator() {
  if (_internal_has_interpolator()) {
    if (GetArena() == nullptr) {
      delete ElectroCardioGramInterpolator_.interpolator_;
    }
    clear_has_ElectroCardioGramInterpolator();
  }
}
ConfigurationData_ECGConfigurationData::ConfigurationData_ECGConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
}
ConfigurationData_ECGConfigurationData::ConfigurationData_ECGConfigurationData(const ConfigurationData_ECGConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ElectroCardioGramInterpolator();
  switch (from.ElectroCardioGramInterpolator_case()) {
    case kInterpolatorFileName: {
      _internal_set_interpolatorfilename(from._internal_interpolatorfilename());
      break;
    }
    case kInterpolator: {
      _internal_mutable_interpolator()->::pulse::cdm::bind::ElectroCardioGramWaveformListData::MergeFrom(from._internal_interpolator());
      break;
    }
    case ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
}

void ConfigurationData_ECGConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  clear_has_ElectroCardioGramInterpolator();
}

ConfigurationData_ECGConfigurationData::~ConfigurationData_ECGConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_ECGConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ElectroCardioGramInterpolator()) {
    clear_ElectroCardioGramInterpolator();
  }
}

void ConfigurationData_ECGConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_ECGConfigurationData* _this = reinterpret_cast< ConfigurationData_ECGConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_ECGConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_ECGConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_ECGConfigurationData& ConfigurationData_ECGConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_ECGConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_ECGConfigurationData::clear_ElectroCardioGramInterpolator() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  switch (ElectroCardioGramInterpolator_case()) {
    case kInterpolatorFileName: {
      ElectroCardioGramInterpolator_.interpolatorfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kInterpolator: {
      if (GetArena() == nullptr) {
        delete ElectroCardioGramInterpolator_.interpolator_;
      }
      break;
    }
    case ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET;
}


void ConfigurationData_ECGConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ElectroCardioGramInterpolator();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_ECGConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InterpolatorFileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interpolatorfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ElectroCardioGramWaveformListData Interpolator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_interpolator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_ECGConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InterpolatorFileName = 1;
  if (_internal_has_interpolatorfilename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interpolatorfilename().data(), static_cast<int>(this->_internal_interpolatorfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interpolatorfilename(), target);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Interpolator = 2;
  if (_internal_has_interpolator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::interpolator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  return target;
}

size_t ConfigurationData_ECGConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ElectroCardioGramInterpolator_case()) {
    // string InterpolatorFileName = 1;
    case kInterpolatorFileName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interpolatorfilename());
      break;
    }
    // .pulse.cdm.bind.ElectroCardioGramWaveformListData Interpolator = 2;
    case kInterpolator: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ElectroCardioGramInterpolator_.interpolator_);
      break;
    }
    case ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_ECGConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_ECGConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_ECGConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_ECGConfigurationData::MergeFrom(const ConfigurationData_ECGConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ElectroCardioGramInterpolator_case()) {
    case kInterpolatorFileName: {
      _internal_set_interpolatorfilename(from._internal_interpolatorfilename());
      break;
    }
    case kInterpolator: {
      _internal_mutable_interpolator()->::pulse::cdm::bind::ElectroCardioGramWaveformListData::MergeFrom(from._internal_interpolator());
      break;
    }
    case ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET: {
      break;
    }
  }
}

void ConfigurationData_ECGConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_ECGConfigurationData::CopyFrom(const ConfigurationData_ECGConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_ECGConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_ECGConfigurationData::InternalSwap(ConfigurationData_ECGConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ElectroCardioGramInterpolator_, other->ElectroCardioGramInterpolator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_ECGConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_EnergyConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& bodyspecificheat(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& carbondioxideproductionfromoxygenconsumptionconstant(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& coretemperaturelow(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& coretemperaturehigh(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& deltacoretemperaturelow(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyPerAmountData& energyperatp(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatConductanceData& sweatheattransfer(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyPerMassData& vaporizationenergy(const ConfigurationData_EnergyConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& vaporspecificheat(const ConfigurationData_EnergyConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&
ConfigurationData_EnergyConfigurationData::_Internal::bodyspecificheat(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->bodyspecificheat_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_EnergyConfigurationData::_Internal::carbondioxideproductionfromoxygenconsumptionconstant(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->carbondioxideproductionfromoxygenconsumptionconstant_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
ConfigurationData_EnergyConfigurationData::_Internal::coretemperaturelow(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->coretemperaturelow_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
ConfigurationData_EnergyConfigurationData::_Internal::coretemperaturehigh(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->coretemperaturehigh_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
ConfigurationData_EnergyConfigurationData::_Internal::deltacoretemperaturelow(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->deltacoretemperaturelow_;
}
const ::pulse::cdm::bind::ScalarEnergyPerAmountData&
ConfigurationData_EnergyConfigurationData::_Internal::energyperatp(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->energyperatp_;
}
const ::pulse::cdm::bind::ScalarHeatConductanceData&
ConfigurationData_EnergyConfigurationData::_Internal::sweatheattransfer(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->sweatheattransfer_;
}
const ::pulse::cdm::bind::ScalarEnergyPerMassData&
ConfigurationData_EnergyConfigurationData::_Internal::vaporizationenergy(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->vaporizationenergy_;
}
const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&
ConfigurationData_EnergyConfigurationData::_Internal::vaporspecificheat(const ConfigurationData_EnergyConfigurationData* msg) {
  return *msg->vaporspecificheat_;
}
void ConfigurationData_EnergyConfigurationData::clear_bodyspecificheat() {
  if (GetArena() == nullptr && bodyspecificheat_ != nullptr) {
    delete bodyspecificheat_;
  }
  bodyspecificheat_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_carbondioxideproductionfromoxygenconsumptionconstant() {
  if (GetArena() == nullptr && carbondioxideproductionfromoxygenconsumptionconstant_ != nullptr) {
    delete carbondioxideproductionfromoxygenconsumptionconstant_;
  }
  carbondioxideproductionfromoxygenconsumptionconstant_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_coretemperaturelow() {
  if (GetArena() == nullptr && coretemperaturelow_ != nullptr) {
    delete coretemperaturelow_;
  }
  coretemperaturelow_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_coretemperaturehigh() {
  if (GetArena() == nullptr && coretemperaturehigh_ != nullptr) {
    delete coretemperaturehigh_;
  }
  coretemperaturehigh_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_deltacoretemperaturelow() {
  if (GetArena() == nullptr && deltacoretemperaturelow_ != nullptr) {
    delete deltacoretemperaturelow_;
  }
  deltacoretemperaturelow_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_energyperatp() {
  if (GetArena() == nullptr && energyperatp_ != nullptr) {
    delete energyperatp_;
  }
  energyperatp_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_sweatheattransfer() {
  if (GetArena() == nullptr && sweatheattransfer_ != nullptr) {
    delete sweatheattransfer_;
  }
  sweatheattransfer_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_vaporizationenergy() {
  if (GetArena() == nullptr && vaporizationenergy_ != nullptr) {
    delete vaporizationenergy_;
  }
  vaporizationenergy_ = nullptr;
}
void ConfigurationData_EnergyConfigurationData::clear_vaporspecificheat() {
  if (GetArena() == nullptr && vaporspecificheat_ != nullptr) {
    delete vaporspecificheat_;
  }
  vaporspecificheat_ = nullptr;
}
ConfigurationData_EnergyConfigurationData::ConfigurationData_EnergyConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
}
ConfigurationData_EnergyConfigurationData::ConfigurationData_EnergyConfigurationData(const ConfigurationData_EnergyConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bodyspecificheat()) {
    bodyspecificheat_ = new ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData(*from.bodyspecificheat_);
  } else {
    bodyspecificheat_ = nullptr;
  }
  if (from._internal_has_carbondioxideproductionfromoxygenconsumptionconstant()) {
    carbondioxideproductionfromoxygenconsumptionconstant_ = new ::pulse::cdm::bind::ScalarData(*from.carbondioxideproductionfromoxygenconsumptionconstant_);
  } else {
    carbondioxideproductionfromoxygenconsumptionconstant_ = nullptr;
  }
  if (from._internal_has_coretemperaturelow()) {
    coretemperaturelow_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.coretemperaturelow_);
  } else {
    coretemperaturelow_ = nullptr;
  }
  if (from._internal_has_coretemperaturehigh()) {
    coretemperaturehigh_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.coretemperaturehigh_);
  } else {
    coretemperaturehigh_ = nullptr;
  }
  if (from._internal_has_deltacoretemperaturelow()) {
    deltacoretemperaturelow_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.deltacoretemperaturelow_);
  } else {
    deltacoretemperaturelow_ = nullptr;
  }
  if (from._internal_has_energyperatp()) {
    energyperatp_ = new ::pulse::cdm::bind::ScalarEnergyPerAmountData(*from.energyperatp_);
  } else {
    energyperatp_ = nullptr;
  }
  if (from._internal_has_sweatheattransfer()) {
    sweatheattransfer_ = new ::pulse::cdm::bind::ScalarHeatConductanceData(*from.sweatheattransfer_);
  } else {
    sweatheattransfer_ = nullptr;
  }
  if (from._internal_has_vaporizationenergy()) {
    vaporizationenergy_ = new ::pulse::cdm::bind::ScalarEnergyPerMassData(*from.vaporizationenergy_);
  } else {
    vaporizationenergy_ = nullptr;
  }
  if (from._internal_has_vaporspecificheat()) {
    vaporspecificheat_ = new ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData(*from.vaporspecificheat_);
  } else {
    vaporspecificheat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
}

void ConfigurationData_EnergyConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bodyspecificheat_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vaporspecificheat_) -
      reinterpret_cast<char*>(&bodyspecificheat_)) + sizeof(vaporspecificheat_));
}

ConfigurationData_EnergyConfigurationData::~ConfigurationData_EnergyConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_EnergyConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bodyspecificheat_;
  if (this != internal_default_instance()) delete carbondioxideproductionfromoxygenconsumptionconstant_;
  if (this != internal_default_instance()) delete coretemperaturelow_;
  if (this != internal_default_instance()) delete coretemperaturehigh_;
  if (this != internal_default_instance()) delete deltacoretemperaturelow_;
  if (this != internal_default_instance()) delete energyperatp_;
  if (this != internal_default_instance()) delete sweatheattransfer_;
  if (this != internal_default_instance()) delete vaporizationenergy_;
  if (this != internal_default_instance()) delete vaporspecificheat_;
}

void ConfigurationData_EnergyConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_EnergyConfigurationData* _this = reinterpret_cast< ConfigurationData_EnergyConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_EnergyConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_EnergyConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_EnergyConfigurationData& ConfigurationData_EnergyConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_EnergyConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_EnergyConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bodyspecificheat_ != nullptr) {
    delete bodyspecificheat_;
  }
  bodyspecificheat_ = nullptr;
  if (GetArena() == nullptr && carbondioxideproductionfromoxygenconsumptionconstant_ != nullptr) {
    delete carbondioxideproductionfromoxygenconsumptionconstant_;
  }
  carbondioxideproductionfromoxygenconsumptionconstant_ = nullptr;
  if (GetArena() == nullptr && coretemperaturelow_ != nullptr) {
    delete coretemperaturelow_;
  }
  coretemperaturelow_ = nullptr;
  if (GetArena() == nullptr && coretemperaturehigh_ != nullptr) {
    delete coretemperaturehigh_;
  }
  coretemperaturehigh_ = nullptr;
  if (GetArena() == nullptr && deltacoretemperaturelow_ != nullptr) {
    delete deltacoretemperaturelow_;
  }
  deltacoretemperaturelow_ = nullptr;
  if (GetArena() == nullptr && energyperatp_ != nullptr) {
    delete energyperatp_;
  }
  energyperatp_ = nullptr;
  if (GetArena() == nullptr && sweatheattransfer_ != nullptr) {
    delete sweatheattransfer_;
  }
  sweatheattransfer_ = nullptr;
  if (GetArena() == nullptr && vaporizationenergy_ != nullptr) {
    delete vaporizationenergy_;
  }
  vaporizationenergy_ = nullptr;
  if (GetArena() == nullptr && vaporspecificheat_ != nullptr) {
    delete vaporspecificheat_;
  }
  vaporspecificheat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_EnergyConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BodySpecificHeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyspecificheat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData CarbonDioxideProductionFromOxygenConsumptionConstant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbondioxideproductionfromoxygenconsumptionconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureLow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coretemperaturelow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureHigh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coretemperaturehigh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData DeltaCoreTemperatureLow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deltacoretemperaturelow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyPerAmountData EnergyPerATP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_energyperatp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatConductanceData SweatHeatTransfer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweatheattransfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyPerMassData VaporizationEnergy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vaporizationenergy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData VaporSpecificHeat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vaporspecificheat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_EnergyConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BodySpecificHeat = 1;
  if (this->has_bodyspecificheat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bodyspecificheat(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData CarbonDioxideProductionFromOxygenConsumptionConstant = 2;
  if (this->has_carbondioxideproductionfromoxygenconsumptionconstant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::carbondioxideproductionfromoxygenconsumptionconstant(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureLow = 3;
  if (this->has_coretemperaturelow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coretemperaturelow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureHigh = 4;
  if (this->has_coretemperaturehigh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coretemperaturehigh(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData DeltaCoreTemperatureLow = 5;
  if (this->has_deltacoretemperaturelow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::deltacoretemperaturelow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyPerAmountData EnergyPerATP = 6;
  if (this->has_energyperatp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::energyperatp(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatConductanceData SweatHeatTransfer = 7;
  if (this->has_sweatheattransfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sweatheattransfer(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyPerMassData VaporizationEnergy = 8;
  if (this->has_vaporizationenergy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vaporizationenergy(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData VaporSpecificHeat = 9;
  if (this->has_vaporspecificheat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::vaporspecificheat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  return target;
}

size_t ConfigurationData_EnergyConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BodySpecificHeat = 1;
  if (this->has_bodyspecificheat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bodyspecificheat_);
  }

  // .pulse.cdm.bind.ScalarData CarbonDioxideProductionFromOxygenConsumptionConstant = 2;
  if (this->has_carbondioxideproductionfromoxygenconsumptionconstant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbondioxideproductionfromoxygenconsumptionconstant_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureLow = 3;
  if (this->has_coretemperaturelow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coretemperaturelow_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureHigh = 4;
  if (this->has_coretemperaturehigh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coretemperaturehigh_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData DeltaCoreTemperatureLow = 5;
  if (this->has_deltacoretemperaturelow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deltacoretemperaturelow_);
  }

  // .pulse.cdm.bind.ScalarEnergyPerAmountData EnergyPerATP = 6;
  if (this->has_energyperatp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energyperatp_);
  }

  // .pulse.cdm.bind.ScalarHeatConductanceData SweatHeatTransfer = 7;
  if (this->has_sweatheattransfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweatheattransfer_);
  }

  // .pulse.cdm.bind.ScalarEnergyPerMassData VaporizationEnergy = 8;
  if (this->has_vaporizationenergy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vaporizationenergy_);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData VaporSpecificHeat = 9;
  if (this->has_vaporspecificheat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vaporspecificheat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_EnergyConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_EnergyConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_EnergyConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_EnergyConfigurationData::MergeFrom(const ConfigurationData_EnergyConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bodyspecificheat()) {
    _internal_mutable_bodyspecificheat()->::pulse::cdm::bind::ScalarHeatCapacitancePerMassData::MergeFrom(from._internal_bodyspecificheat());
  }
  if (from.has_carbondioxideproductionfromoxygenconsumptionconstant()) {
    _internal_mutable_carbondioxideproductionfromoxygenconsumptionconstant()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_carbondioxideproductionfromoxygenconsumptionconstant());
  }
  if (from.has_coretemperaturelow()) {
    _internal_mutable_coretemperaturelow()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_coretemperaturelow());
  }
  if (from.has_coretemperaturehigh()) {
    _internal_mutable_coretemperaturehigh()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_coretemperaturehigh());
  }
  if (from.has_deltacoretemperaturelow()) {
    _internal_mutable_deltacoretemperaturelow()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_deltacoretemperaturelow());
  }
  if (from.has_energyperatp()) {
    _internal_mutable_energyperatp()->::pulse::cdm::bind::ScalarEnergyPerAmountData::MergeFrom(from._internal_energyperatp());
  }
  if (from.has_sweatheattransfer()) {
    _internal_mutable_sweatheattransfer()->::pulse::cdm::bind::ScalarHeatConductanceData::MergeFrom(from._internal_sweatheattransfer());
  }
  if (from.has_vaporizationenergy()) {
    _internal_mutable_vaporizationenergy()->::pulse::cdm::bind::ScalarEnergyPerMassData::MergeFrom(from._internal_vaporizationenergy());
  }
  if (from.has_vaporspecificheat()) {
    _internal_mutable_vaporspecificheat()->::pulse::cdm::bind::ScalarHeatCapacitancePerMassData::MergeFrom(from._internal_vaporspecificheat());
  }
}

void ConfigurationData_EnergyConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_EnergyConfigurationData::CopyFrom(const ConfigurationData_EnergyConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_EnergyConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_EnergyConfigurationData::InternalSwap(ConfigurationData_EnergyConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_EnergyConfigurationData, vaporspecificheat_)
      + sizeof(ConfigurationData_EnergyConfigurationData::vaporspecificheat_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_EnergyConfigurationData, bodyspecificheat_)>(
          reinterpret_cast<char*>(&bodyspecificheat_),
          reinterpret_cast<char*>(&other->bodyspecificheat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_EnergyConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_EnvironmentConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentalConditionsData& initialconditions(const ConfigurationData_EnvironmentConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& airdensity(const ConfigurationData_EnvironmentConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& airspecificheat(const ConfigurationData_EnvironmentConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmassofdryair(const ConfigurationData_EnvironmentConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmassofwatervapor(const ConfigurationData_EnvironmentConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& waterdensity(const ConfigurationData_EnvironmentConfigurationData* msg);
};

const ::pulse::cdm::bind::EnvironmentalConditionsData&
ConfigurationData_EnvironmentConfigurationData::_Internal::initialconditions(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->Option_.initialconditions_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ConfigurationData_EnvironmentConfigurationData::_Internal::airdensity(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->airdensity_;
}
const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&
ConfigurationData_EnvironmentConfigurationData::_Internal::airspecificheat(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->airspecificheat_;
}
const ::pulse::cdm::bind::ScalarMassPerAmountData&
ConfigurationData_EnvironmentConfigurationData::_Internal::molarmassofdryair(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->molarmassofdryair_;
}
const ::pulse::cdm::bind::ScalarMassPerAmountData&
ConfigurationData_EnvironmentConfigurationData::_Internal::molarmassofwatervapor(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->molarmassofwatervapor_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ConfigurationData_EnvironmentConfigurationData::_Internal::waterdensity(const ConfigurationData_EnvironmentConfigurationData* msg) {
  return *msg->waterdensity_;
}
void ConfigurationData_EnvironmentConfigurationData::set_allocated_initialconditions(::pulse::cdm::bind::EnvironmentalConditionsData* initialconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (initialconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialconditions)->GetArena();
    if (message_arena != submessage_arena) {
      initialconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialconditions, submessage_arena);
    }
    set_has_initialconditions();
    Option_.initialconditions_ = initialconditions;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
}
void ConfigurationData_EnvironmentConfigurationData::clear_initialconditions() {
  if (_internal_has_initialconditions()) {
    if (GetArena() == nullptr) {
      delete Option_.initialconditions_;
    }
    clear_has_Option();
  }
}
void ConfigurationData_EnvironmentConfigurationData::clear_airdensity() {
  if (GetArena() == nullptr && airdensity_ != nullptr) {
    delete airdensity_;
  }
  airdensity_ = nullptr;
}
void ConfigurationData_EnvironmentConfigurationData::clear_airspecificheat() {
  if (GetArena() == nullptr && airspecificheat_ != nullptr) {
    delete airspecificheat_;
  }
  airspecificheat_ = nullptr;
}
void ConfigurationData_EnvironmentConfigurationData::clear_molarmassofdryair() {
  if (GetArena() == nullptr && molarmassofdryair_ != nullptr) {
    delete molarmassofdryair_;
  }
  molarmassofdryair_ = nullptr;
}
void ConfigurationData_EnvironmentConfigurationData::clear_molarmassofwatervapor() {
  if (GetArena() == nullptr && molarmassofwatervapor_ != nullptr) {
    delete molarmassofwatervapor_;
  }
  molarmassofwatervapor_ = nullptr;
}
void ConfigurationData_EnvironmentConfigurationData::clear_waterdensity() {
  if (GetArena() == nullptr && waterdensity_ != nullptr) {
    delete waterdensity_;
  }
  waterdensity_ = nullptr;
}
ConfigurationData_EnvironmentConfigurationData::ConfigurationData_EnvironmentConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
}
ConfigurationData_EnvironmentConfigurationData::ConfigurationData_EnvironmentConfigurationData(const ConfigurationData_EnvironmentConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_airdensity()) {
    airdensity_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.airdensity_);
  } else {
    airdensity_ = nullptr;
  }
  if (from._internal_has_airspecificheat()) {
    airspecificheat_ = new ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData(*from.airspecificheat_);
  } else {
    airspecificheat_ = nullptr;
  }
  if (from._internal_has_molarmassofdryair()) {
    molarmassofdryair_ = new ::pulse::cdm::bind::ScalarMassPerAmountData(*from.molarmassofdryair_);
  } else {
    molarmassofdryair_ = nullptr;
  }
  if (from._internal_has_molarmassofwatervapor()) {
    molarmassofwatervapor_ = new ::pulse::cdm::bind::ScalarMassPerAmountData(*from.molarmassofwatervapor_);
  } else {
    molarmassofwatervapor_ = nullptr;
  }
  if (from._internal_has_waterdensity()) {
    waterdensity_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.waterdensity_);
  } else {
    waterdensity_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kInitialConditions: {
      _internal_mutable_initialconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_initialconditions());
      break;
    }
    case kInitialConditionsFile: {
      _internal_set_initialconditionsfile(from._internal_initialconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
}

void ConfigurationData_EnvironmentConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&airdensity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&waterdensity_) -
      reinterpret_cast<char*>(&airdensity_)) + sizeof(waterdensity_));
  clear_has_Option();
}

ConfigurationData_EnvironmentConfigurationData::~ConfigurationData_EnvironmentConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_EnvironmentConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete airdensity_;
  if (this != internal_default_instance()) delete airspecificheat_;
  if (this != internal_default_instance()) delete molarmassofdryair_;
  if (this != internal_default_instance()) delete molarmassofwatervapor_;
  if (this != internal_default_instance()) delete waterdensity_;
  if (has_Option()) {
    clear_Option();
  }
}

void ConfigurationData_EnvironmentConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_EnvironmentConfigurationData* _this = reinterpret_cast< ConfigurationData_EnvironmentConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_EnvironmentConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_EnvironmentConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_EnvironmentConfigurationData& ConfigurationData_EnvironmentConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_EnvironmentConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_EnvironmentConfigurationData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  switch (Option_case()) {
    case kInitialConditions: {
      if (GetArena() == nullptr) {
        delete Option_.initialconditions_;
      }
      break;
    }
    case kInitialConditionsFile: {
      Option_.initialconditionsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void ConfigurationData_EnvironmentConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && airdensity_ != nullptr) {
    delete airdensity_;
  }
  airdensity_ = nullptr;
  if (GetArena() == nullptr && airspecificheat_ != nullptr) {
    delete airspecificheat_;
  }
  airspecificheat_ = nullptr;
  if (GetArena() == nullptr && molarmassofdryair_ != nullptr) {
    delete molarmassofdryair_;
  }
  molarmassofdryair_ = nullptr;
  if (GetArena() == nullptr && molarmassofwatervapor_ != nullptr) {
    delete molarmassofwatervapor_;
  }
  molarmassofwatervapor_ = nullptr;
  if (GetArena() == nullptr && waterdensity_ != nullptr) {
    delete waterdensity_;
  }
  waterdensity_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_EnvironmentConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentalConditionsData InitialConditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InitialConditionsFile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_initialconditionsfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_airdensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData AirSpecificHeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_airspecificheat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfDryAir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_molarmassofdryair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfWaterVapor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_molarmassofwatervapor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData WaterDensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_waterdensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_EnvironmentConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentalConditionsData InitialConditions = 1;
  if (_internal_has_initialconditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initialconditions(this), target, stream);
  }

  // string InitialConditionsFile = 2;
  if (_internal_has_initialconditionsfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initialconditionsfile().data(), static_cast<int>(this->_internal_initialconditionsfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_initialconditionsfile(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 3;
  if (this->has_airdensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::airdensity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData AirSpecificHeat = 4;
  if (this->has_airspecificheat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::airspecificheat(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfDryAir = 5;
  if (this->has_molarmassofdryair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::molarmassofdryair(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfWaterVapor = 6;
  if (this->has_molarmassofwatervapor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::molarmassofwatervapor(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData WaterDensity = 7;
  if (this->has_waterdensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::waterdensity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  return target;
}

size_t ConfigurationData_EnvironmentConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 3;
  if (this->has_airdensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airdensity_);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData AirSpecificHeat = 4;
  if (this->has_airspecificheat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airspecificheat_);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfDryAir = 5;
  if (this->has_molarmassofdryair()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *molarmassofdryair_);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfWaterVapor = 6;
  if (this->has_molarmassofwatervapor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *molarmassofwatervapor_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData WaterDensity = 7;
  if (this->has_waterdensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waterdensity_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.EnvironmentalConditionsData InitialConditions = 1;
    case kInitialConditions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.initialconditions_);
      break;
    }
    // string InitialConditionsFile = 2;
    case kInitialConditionsFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initialconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_EnvironmentConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_EnvironmentConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_EnvironmentConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_EnvironmentConfigurationData::MergeFrom(const ConfigurationData_EnvironmentConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_airdensity()) {
    _internal_mutable_airdensity()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_airdensity());
  }
  if (from.has_airspecificheat()) {
    _internal_mutable_airspecificheat()->::pulse::cdm::bind::ScalarHeatCapacitancePerMassData::MergeFrom(from._internal_airspecificheat());
  }
  if (from.has_molarmassofdryair()) {
    _internal_mutable_molarmassofdryair()->::pulse::cdm::bind::ScalarMassPerAmountData::MergeFrom(from._internal_molarmassofdryair());
  }
  if (from.has_molarmassofwatervapor()) {
    _internal_mutable_molarmassofwatervapor()->::pulse::cdm::bind::ScalarMassPerAmountData::MergeFrom(from._internal_molarmassofwatervapor());
  }
  if (from.has_waterdensity()) {
    _internal_mutable_waterdensity()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_waterdensity());
  }
  switch (from.Option_case()) {
    case kInitialConditions: {
      _internal_mutable_initialconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_initialconditions());
      break;
    }
    case kInitialConditionsFile: {
      _internal_set_initialconditionsfile(from._internal_initialconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void ConfigurationData_EnvironmentConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_EnvironmentConfigurationData::CopyFrom(const ConfigurationData_EnvironmentConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_EnvironmentConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_EnvironmentConfigurationData::InternalSwap(ConfigurationData_EnvironmentConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_EnvironmentConfigurationData, waterdensity_)
      + sizeof(ConfigurationData_EnvironmentConfigurationData::waterdensity_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_EnvironmentConfigurationData, airdensity_)>(
          reinterpret_cast<char*>(&airdensity_),
          reinterpret_cast<char*>(&other->airdensity_));
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_EnvironmentConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_GastrointestinalConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::NutritionData& initialstomachcontents(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& calciumabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& calciumdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& carbohydrateabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultcarbohydratedigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultfatdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultproteindigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fatabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& proteintoureafraction(const ConfigurationData_GastrointestinalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& waterdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg);
};

const ::pulse::cdm::bind::NutritionData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::initialstomachcontents(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->Option_.initialstomachcontents_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ConfigurationData_GastrointestinalConfigurationData::_Internal::calciumabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->calciumabsorptionfraction_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::calciumdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->calciumdigestionrate_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ConfigurationData_GastrointestinalConfigurationData::_Internal::carbohydrateabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->carbohydrateabsorptionfraction_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::defaultcarbohydratedigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->defaultcarbohydratedigestionrate_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::defaultfatdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->defaultfatdigestionrate_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::defaultproteindigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->defaultproteindigestionrate_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ConfigurationData_GastrointestinalConfigurationData::_Internal::fatabsorptionfraction(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->fatabsorptionfraction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ConfigurationData_GastrointestinalConfigurationData::_Internal::proteintoureafraction(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->proteintoureafraction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
ConfigurationData_GastrointestinalConfigurationData::_Internal::waterdigestionrate(const ConfigurationData_GastrointestinalConfigurationData* msg) {
  return *msg->waterdigestionrate_;
}
void ConfigurationData_GastrointestinalConfigurationData::set_allocated_initialstomachcontents(::pulse::cdm::bind::NutritionData* initialstomachcontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (initialstomachcontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialstomachcontents)->GetArena();
    if (message_arena != submessage_arena) {
      initialstomachcontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialstomachcontents, submessage_arena);
    }
    set_has_initialstomachcontents();
    Option_.initialstomachcontents_ = initialstomachcontents;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
}
void ConfigurationData_GastrointestinalConfigurationData::clear_initialstomachcontents() {
  if (_internal_has_initialstomachcontents()) {
    if (GetArena() == nullptr) {
      delete Option_.initialstomachcontents_;
    }
    clear_has_Option();
  }
}
void ConfigurationData_GastrointestinalConfigurationData::clear_calciumabsorptionfraction() {
  if (GetArena() == nullptr && calciumabsorptionfraction_ != nullptr) {
    delete calciumabsorptionfraction_;
  }
  calciumabsorptionfraction_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_calciumdigestionrate() {
  if (GetArena() == nullptr && calciumdigestionrate_ != nullptr) {
    delete calciumdigestionrate_;
  }
  calciumdigestionrate_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_carbohydrateabsorptionfraction() {
  if (GetArena() == nullptr && carbohydrateabsorptionfraction_ != nullptr) {
    delete carbohydrateabsorptionfraction_;
  }
  carbohydrateabsorptionfraction_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_defaultcarbohydratedigestionrate() {
  if (GetArena() == nullptr && defaultcarbohydratedigestionrate_ != nullptr) {
    delete defaultcarbohydratedigestionrate_;
  }
  defaultcarbohydratedigestionrate_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_defaultfatdigestionrate() {
  if (GetArena() == nullptr && defaultfatdigestionrate_ != nullptr) {
    delete defaultfatdigestionrate_;
  }
  defaultfatdigestionrate_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_defaultproteindigestionrate() {
  if (GetArena() == nullptr && defaultproteindigestionrate_ != nullptr) {
    delete defaultproteindigestionrate_;
  }
  defaultproteindigestionrate_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_fatabsorptionfraction() {
  if (GetArena() == nullptr && fatabsorptionfraction_ != nullptr) {
    delete fatabsorptionfraction_;
  }
  fatabsorptionfraction_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_proteintoureafraction() {
  if (GetArena() == nullptr && proteintoureafraction_ != nullptr) {
    delete proteintoureafraction_;
  }
  proteintoureafraction_ = nullptr;
}
void ConfigurationData_GastrointestinalConfigurationData::clear_waterdigestionrate() {
  if (GetArena() == nullptr && waterdigestionrate_ != nullptr) {
    delete waterdigestionrate_;
  }
  waterdigestionrate_ = nullptr;
}
ConfigurationData_GastrointestinalConfigurationData::ConfigurationData_GastrointestinalConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
}
ConfigurationData_GastrointestinalConfigurationData::ConfigurationData_GastrointestinalConfigurationData(const ConfigurationData_GastrointestinalConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_calciumabsorptionfraction()) {
    calciumabsorptionfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.calciumabsorptionfraction_);
  } else {
    calciumabsorptionfraction_ = nullptr;
  }
  if (from._internal_has_calciumdigestionrate()) {
    calciumdigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.calciumdigestionrate_);
  } else {
    calciumdigestionrate_ = nullptr;
  }
  if (from._internal_has_carbohydrateabsorptionfraction()) {
    carbohydrateabsorptionfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.carbohydrateabsorptionfraction_);
  } else {
    carbohydrateabsorptionfraction_ = nullptr;
  }
  if (from._internal_has_defaultcarbohydratedigestionrate()) {
    defaultcarbohydratedigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.defaultcarbohydratedigestionrate_);
  } else {
    defaultcarbohydratedigestionrate_ = nullptr;
  }
  if (from._internal_has_defaultfatdigestionrate()) {
    defaultfatdigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.defaultfatdigestionrate_);
  } else {
    defaultfatdigestionrate_ = nullptr;
  }
  if (from._internal_has_defaultproteindigestionrate()) {
    defaultproteindigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.defaultproteindigestionrate_);
  } else {
    defaultproteindigestionrate_ = nullptr;
  }
  if (from._internal_has_fatabsorptionfraction()) {
    fatabsorptionfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fatabsorptionfraction_);
  } else {
    fatabsorptionfraction_ = nullptr;
  }
  if (from._internal_has_proteintoureafraction()) {
    proteintoureafraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.proteintoureafraction_);
  } else {
    proteintoureafraction_ = nullptr;
  }
  if (from._internal_has_waterdigestionrate()) {
    waterdigestionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.waterdigestionrate_);
  } else {
    waterdigestionrate_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kInitialStomachContents: {
      _internal_mutable_initialstomachcontents()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_initialstomachcontents());
      break;
    }
    case kInitialStomachContentsFile: {
      _internal_set_initialstomachcontentsfile(from._internal_initialstomachcontentsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
}

void ConfigurationData_GastrointestinalConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&calciumabsorptionfraction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&waterdigestionrate_) -
      reinterpret_cast<char*>(&calciumabsorptionfraction_)) + sizeof(waterdigestionrate_));
  clear_has_Option();
}

ConfigurationData_GastrointestinalConfigurationData::~ConfigurationData_GastrointestinalConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_GastrointestinalConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete calciumabsorptionfraction_;
  if (this != internal_default_instance()) delete calciumdigestionrate_;
  if (this != internal_default_instance()) delete carbohydrateabsorptionfraction_;
  if (this != internal_default_instance()) delete defaultcarbohydratedigestionrate_;
  if (this != internal_default_instance()) delete defaultfatdigestionrate_;
  if (this != internal_default_instance()) delete defaultproteindigestionrate_;
  if (this != internal_default_instance()) delete fatabsorptionfraction_;
  if (this != internal_default_instance()) delete proteintoureafraction_;
  if (this != internal_default_instance()) delete waterdigestionrate_;
  if (has_Option()) {
    clear_Option();
  }
}

void ConfigurationData_GastrointestinalConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_GastrointestinalConfigurationData* _this = reinterpret_cast< ConfigurationData_GastrointestinalConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_GastrointestinalConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_GastrointestinalConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_GastrointestinalConfigurationData& ConfigurationData_GastrointestinalConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_GastrointestinalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_GastrointestinalConfigurationData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  switch (Option_case()) {
    case kInitialStomachContents: {
      if (GetArena() == nullptr) {
        delete Option_.initialstomachcontents_;
      }
      break;
    }
    case kInitialStomachContentsFile: {
      Option_.initialstomachcontentsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void ConfigurationData_GastrointestinalConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && calciumabsorptionfraction_ != nullptr) {
    delete calciumabsorptionfraction_;
  }
  calciumabsorptionfraction_ = nullptr;
  if (GetArena() == nullptr && calciumdigestionrate_ != nullptr) {
    delete calciumdigestionrate_;
  }
  calciumdigestionrate_ = nullptr;
  if (GetArena() == nullptr && carbohydrateabsorptionfraction_ != nullptr) {
    delete carbohydrateabsorptionfraction_;
  }
  carbohydrateabsorptionfraction_ = nullptr;
  if (GetArena() == nullptr && defaultcarbohydratedigestionrate_ != nullptr) {
    delete defaultcarbohydratedigestionrate_;
  }
  defaultcarbohydratedigestionrate_ = nullptr;
  if (GetArena() == nullptr && defaultfatdigestionrate_ != nullptr) {
    delete defaultfatdigestionrate_;
  }
  defaultfatdigestionrate_ = nullptr;
  if (GetArena() == nullptr && defaultproteindigestionrate_ != nullptr) {
    delete defaultproteindigestionrate_;
  }
  defaultproteindigestionrate_ = nullptr;
  if (GetArena() == nullptr && fatabsorptionfraction_ != nullptr) {
    delete fatabsorptionfraction_;
  }
  fatabsorptionfraction_ = nullptr;
  if (GetArena() == nullptr && proteintoureafraction_ != nullptr) {
    delete proteintoureafraction_;
  }
  proteintoureafraction_ = nullptr;
  if (GetArena() == nullptr && waterdigestionrate_ != nullptr) {
    delete waterdigestionrate_;
  }
  waterdigestionrate_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_GastrointestinalConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.NutritionData InitialStomachContents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialstomachcontents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InitialStomachContentsFile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_initialstomachcontentsfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data CalciumAbsorptionFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_calciumabsorptionfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData CalciumDigestionRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_calciumdigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data CarbohydrateAbsorptionFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbohydrateabsorptionfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData DefaultCarbohydrateDigestionRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultcarbohydratedigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData DefaultFatDigestionRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultfatdigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData DefaultProteinDigestionRate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultproteindigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FatAbsorptionFraction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_fatabsorptionfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ProteinToUreaFraction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_proteintoureafraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData WaterDigestionRate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_waterdigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_GastrointestinalConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.NutritionData InitialStomachContents = 1;
  if (_internal_has_initialstomachcontents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initialstomachcontents(this), target, stream);
  }

  // string InitialStomachContentsFile = 2;
  if (_internal_has_initialstomachcontentsfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initialstomachcontentsfile().data(), static_cast<int>(this->_internal_initialstomachcontentsfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_initialstomachcontentsfile(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data CalciumAbsorptionFraction = 3;
  if (this->has_calciumabsorptionfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::calciumabsorptionfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData CalciumDigestionRate = 4;
  if (this->has_calciumdigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::calciumdigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbohydrateAbsorptionFraction = 5;
  if (this->has_carbohydrateabsorptionfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::carbohydrateabsorptionfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultCarbohydrateDigestionRate = 6;
  if (this->has_defaultcarbohydratedigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::defaultcarbohydratedigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultFatDigestionRate = 7;
  if (this->has_defaultfatdigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::defaultfatdigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultProteinDigestionRate = 8;
  if (this->has_defaultproteindigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::defaultproteindigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FatAbsorptionFraction = 9;
  if (this->has_fatabsorptionfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::fatabsorptionfraction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ProteinToUreaFraction = 10;
  if (this->has_proteintoureafraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::proteintoureafraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterDigestionRate = 11;
  if (this->has_waterdigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::waterdigestionrate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  return target;
}

size_t ConfigurationData_GastrointestinalConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data CalciumAbsorptionFraction = 3;
  if (this->has_calciumabsorptionfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calciumabsorptionfraction_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData CalciumDigestionRate = 4;
  if (this->has_calciumdigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calciumdigestionrate_);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbohydrateAbsorptionFraction = 5;
  if (this->has_carbohydrateabsorptionfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbohydrateabsorptionfraction_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultCarbohydrateDigestionRate = 6;
  if (this->has_defaultcarbohydratedigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultcarbohydratedigestionrate_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultFatDigestionRate = 7;
  if (this->has_defaultfatdigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultfatdigestionrate_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultProteinDigestionRate = 8;
  if (this->has_defaultproteindigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaultproteindigestionrate_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FatAbsorptionFraction = 9;
  if (this->has_fatabsorptionfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fatabsorptionfraction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data ProteinToUreaFraction = 10;
  if (this->has_proteintoureafraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proteintoureafraction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterDigestionRate = 11;
  if (this->has_waterdigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waterdigestionrate_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.NutritionData InitialStomachContents = 1;
    case kInitialStomachContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.initialstomachcontents_);
      break;
    }
    // string InitialStomachContentsFile = 2;
    case kInitialStomachContentsFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initialstomachcontentsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_GastrointestinalConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_GastrointestinalConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_GastrointestinalConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_GastrointestinalConfigurationData::MergeFrom(const ConfigurationData_GastrointestinalConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calciumabsorptionfraction()) {
    _internal_mutable_calciumabsorptionfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_calciumabsorptionfraction());
  }
  if (from.has_calciumdigestionrate()) {
    _internal_mutable_calciumdigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_calciumdigestionrate());
  }
  if (from.has_carbohydrateabsorptionfraction()) {
    _internal_mutable_carbohydrateabsorptionfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_carbohydrateabsorptionfraction());
  }
  if (from.has_defaultcarbohydratedigestionrate()) {
    _internal_mutable_defaultcarbohydratedigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_defaultcarbohydratedigestionrate());
  }
  if (from.has_defaultfatdigestionrate()) {
    _internal_mutable_defaultfatdigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_defaultfatdigestionrate());
  }
  if (from.has_defaultproteindigestionrate()) {
    _internal_mutable_defaultproteindigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_defaultproteindigestionrate());
  }
  if (from.has_fatabsorptionfraction()) {
    _internal_mutable_fatabsorptionfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fatabsorptionfraction());
  }
  if (from.has_proteintoureafraction()) {
    _internal_mutable_proteintoureafraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_proteintoureafraction());
  }
  if (from.has_waterdigestionrate()) {
    _internal_mutable_waterdigestionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_waterdigestionrate());
  }
  switch (from.Option_case()) {
    case kInitialStomachContents: {
      _internal_mutable_initialstomachcontents()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_initialstomachcontents());
      break;
    }
    case kInitialStomachContentsFile: {
      _internal_set_initialstomachcontentsfile(from._internal_initialstomachcontentsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void ConfigurationData_GastrointestinalConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_GastrointestinalConfigurationData::CopyFrom(const ConfigurationData_GastrointestinalConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_GastrointestinalConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_GastrointestinalConfigurationData::InternalSwap(ConfigurationData_GastrointestinalConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_GastrointestinalConfigurationData, waterdigestionrate_)
      + sizeof(ConfigurationData_GastrointestinalConfigurationData::waterdigestionrate_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_GastrointestinalConfigurationData, calciumabsorptionfraction_)>(
          reinterpret_cast<char*>(&calciumabsorptionfraction_),
          reinterpret_cast<char*>(&other->calciumabsorptionfraction_));
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_GastrointestinalConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_NervousConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& heartelastancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& heartratedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedheartrateintercept(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedheartratesympatheticslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedheartrateparasympatheticslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedheartelastanceintercept(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedheartelastancesympatheticslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedresistanceintercept(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedresistancesympatheticslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedcomplianceintercept(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& normalizedcomplianceparasympatheticslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarLengthData& pupildiameterbaseline(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& responseslope(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& systemicresistancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& venouscompliancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData_NervousConfigurationData::_Internal::heartelastancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->heartelastancedistributedtimedelay_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData_NervousConfigurationData::_Internal::heartratedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->heartratedistributedtimedelay_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedheartrateintercept(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedheartrateintercept_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedheartratesympatheticslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedheartratesympatheticslope_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedheartrateparasympatheticslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedheartrateparasympatheticslope_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedheartelastanceintercept(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedheartelastanceintercept_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedheartelastancesympatheticslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedheartelastancesympatheticslope_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedresistanceintercept(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedresistanceintercept_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedresistancesympatheticslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedresistancesympatheticslope_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedcomplianceintercept(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedcomplianceintercept_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::normalizedcomplianceparasympatheticslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->normalizedcomplianceparasympatheticslope_;
}
const ::pulse::cdm::bind::ScalarLengthData&
ConfigurationData_NervousConfigurationData::_Internal::pupildiameterbaseline(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->pupildiameterbaseline_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_NervousConfigurationData::_Internal::responseslope(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->responseslope_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData_NervousConfigurationData::_Internal::systemicresistancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->systemicresistancedistributedtimedelay_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData_NervousConfigurationData::_Internal::venouscompliancedistributedtimedelay(const ConfigurationData_NervousConfigurationData* msg) {
  return *msg->venouscompliancedistributedtimedelay_;
}
void ConfigurationData_NervousConfigurationData::clear_heartelastancedistributedtimedelay() {
  if (GetArena() == nullptr && heartelastancedistributedtimedelay_ != nullptr) {
    delete heartelastancedistributedtimedelay_;
  }
  heartelastancedistributedtimedelay_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_heartratedistributedtimedelay() {
  if (GetArena() == nullptr && heartratedistributedtimedelay_ != nullptr) {
    delete heartratedistributedtimedelay_;
  }
  heartratedistributedtimedelay_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedheartrateintercept() {
  if (GetArena() == nullptr && normalizedheartrateintercept_ != nullptr) {
    delete normalizedheartrateintercept_;
  }
  normalizedheartrateintercept_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedheartratesympatheticslope() {
  if (GetArena() == nullptr && normalizedheartratesympatheticslope_ != nullptr) {
    delete normalizedheartratesympatheticslope_;
  }
  normalizedheartratesympatheticslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedheartrateparasympatheticslope() {
  if (GetArena() == nullptr && normalizedheartrateparasympatheticslope_ != nullptr) {
    delete normalizedheartrateparasympatheticslope_;
  }
  normalizedheartrateparasympatheticslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedheartelastanceintercept() {
  if (GetArena() == nullptr && normalizedheartelastanceintercept_ != nullptr) {
    delete normalizedheartelastanceintercept_;
  }
  normalizedheartelastanceintercept_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedheartelastancesympatheticslope() {
  if (GetArena() == nullptr && normalizedheartelastancesympatheticslope_ != nullptr) {
    delete normalizedheartelastancesympatheticslope_;
  }
  normalizedheartelastancesympatheticslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedresistanceintercept() {
  if (GetArena() == nullptr && normalizedresistanceintercept_ != nullptr) {
    delete normalizedresistanceintercept_;
  }
  normalizedresistanceintercept_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedresistancesympatheticslope() {
  if (GetArena() == nullptr && normalizedresistancesympatheticslope_ != nullptr) {
    delete normalizedresistancesympatheticslope_;
  }
  normalizedresistancesympatheticslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedcomplianceintercept() {
  if (GetArena() == nullptr && normalizedcomplianceintercept_ != nullptr) {
    delete normalizedcomplianceintercept_;
  }
  normalizedcomplianceintercept_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_normalizedcomplianceparasympatheticslope() {
  if (GetArena() == nullptr && normalizedcomplianceparasympatheticslope_ != nullptr) {
    delete normalizedcomplianceparasympatheticslope_;
  }
  normalizedcomplianceparasympatheticslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_pupildiameterbaseline() {
  if (GetArena() == nullptr && pupildiameterbaseline_ != nullptr) {
    delete pupildiameterbaseline_;
  }
  pupildiameterbaseline_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_responseslope() {
  if (GetArena() == nullptr && responseslope_ != nullptr) {
    delete responseslope_;
  }
  responseslope_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_systemicresistancedistributedtimedelay() {
  if (GetArena() == nullptr && systemicresistancedistributedtimedelay_ != nullptr) {
    delete systemicresistancedistributedtimedelay_;
  }
  systemicresistancedistributedtimedelay_ = nullptr;
}
void ConfigurationData_NervousConfigurationData::clear_venouscompliancedistributedtimedelay() {
  if (GetArena() == nullptr && venouscompliancedistributedtimedelay_ != nullptr) {
    delete venouscompliancedistributedtimedelay_;
  }
  venouscompliancedistributedtimedelay_ = nullptr;
}
ConfigurationData_NervousConfigurationData::ConfigurationData_NervousConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
}
ConfigurationData_NervousConfigurationData::ConfigurationData_NervousConfigurationData(const ConfigurationData_NervousConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_heartelastancedistributedtimedelay()) {
    heartelastancedistributedtimedelay_ = new ::pulse::cdm::bind::ScalarTimeData(*from.heartelastancedistributedtimedelay_);
  } else {
    heartelastancedistributedtimedelay_ = nullptr;
  }
  if (from._internal_has_heartratedistributedtimedelay()) {
    heartratedistributedtimedelay_ = new ::pulse::cdm::bind::ScalarTimeData(*from.heartratedistributedtimedelay_);
  } else {
    heartratedistributedtimedelay_ = nullptr;
  }
  if (from._internal_has_normalizedheartrateintercept()) {
    normalizedheartrateintercept_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedheartrateintercept_);
  } else {
    normalizedheartrateintercept_ = nullptr;
  }
  if (from._internal_has_normalizedheartratesympatheticslope()) {
    normalizedheartratesympatheticslope_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedheartratesympatheticslope_);
  } else {
    normalizedheartratesympatheticslope_ = nullptr;
  }
  if (from._internal_has_normalizedheartrateparasympatheticslope()) {
    normalizedheartrateparasympatheticslope_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedheartrateparasympatheticslope_);
  } else {
    normalizedheartrateparasympatheticslope_ = nullptr;
  }
  if (from._internal_has_normalizedheartelastanceintercept()) {
    normalizedheartelastanceintercept_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedheartelastanceintercept_);
  } else {
    normalizedheartelastanceintercept_ = nullptr;
  }
  if (from._internal_has_normalizedheartelastancesympatheticslope()) {
    normalizedheartelastancesympatheticslope_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedheartelastancesympatheticslope_);
  } else {
    normalizedheartelastancesympatheticslope_ = nullptr;
  }
  if (from._internal_has_normalizedresistanceintercept()) {
    normalizedresistanceintercept_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedresistanceintercept_);
  } else {
    normalizedresistanceintercept_ = nullptr;
  }
  if (from._internal_has_normalizedresistancesympatheticslope()) {
    normalizedresistancesympatheticslope_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedresistancesympatheticslope_);
  } else {
    normalizedresistancesympatheticslope_ = nullptr;
  }
  if (from._internal_has_normalizedcomplianceintercept()) {
    normalizedcomplianceintercept_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedcomplianceintercept_);
  } else {
    normalizedcomplianceintercept_ = nullptr;
  }
  if (from._internal_has_normalizedcomplianceparasympatheticslope()) {
    normalizedcomplianceparasympatheticslope_ = new ::pulse::cdm::bind::ScalarData(*from.normalizedcomplianceparasympatheticslope_);
  } else {
    normalizedcomplianceparasympatheticslope_ = nullptr;
  }
  if (from._internal_has_pupildiameterbaseline()) {
    pupildiameterbaseline_ = new ::pulse::cdm::bind::ScalarLengthData(*from.pupildiameterbaseline_);
  } else {
    pupildiameterbaseline_ = nullptr;
  }
  if (from._internal_has_responseslope()) {
    responseslope_ = new ::pulse::cdm::bind::ScalarData(*from.responseslope_);
  } else {
    responseslope_ = nullptr;
  }
  if (from._internal_has_systemicresistancedistributedtimedelay()) {
    systemicresistancedistributedtimedelay_ = new ::pulse::cdm::bind::ScalarTimeData(*from.systemicresistancedistributedtimedelay_);
  } else {
    systemicresistancedistributedtimedelay_ = nullptr;
  }
  if (from._internal_has_venouscompliancedistributedtimedelay()) {
    venouscompliancedistributedtimedelay_ = new ::pulse::cdm::bind::ScalarTimeData(*from.venouscompliancedistributedtimedelay_);
  } else {
    venouscompliancedistributedtimedelay_ = nullptr;
  }
  ::memcpy(&enablecerebrospinalfluid_, &from.enablecerebrospinalfluid_,
    static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorfeedback_) -
    reinterpret_cast<char*>(&enablecerebrospinalfluid_)) + sizeof(baroreceptorfeedback_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
}

void ConfigurationData_NervousConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heartelastancedistributedtimedelay_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorfeedback_) -
      reinterpret_cast<char*>(&heartelastancedistributedtimedelay_)) + sizeof(baroreceptorfeedback_));
}

ConfigurationData_NervousConfigurationData::~ConfigurationData_NervousConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_NervousConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete heartelastancedistributedtimedelay_;
  if (this != internal_default_instance()) delete heartratedistributedtimedelay_;
  if (this != internal_default_instance()) delete normalizedheartrateintercept_;
  if (this != internal_default_instance()) delete normalizedheartratesympatheticslope_;
  if (this != internal_default_instance()) delete normalizedheartrateparasympatheticslope_;
  if (this != internal_default_instance()) delete normalizedheartelastanceintercept_;
  if (this != internal_default_instance()) delete normalizedheartelastancesympatheticslope_;
  if (this != internal_default_instance()) delete normalizedresistanceintercept_;
  if (this != internal_default_instance()) delete normalizedresistancesympatheticslope_;
  if (this != internal_default_instance()) delete normalizedcomplianceintercept_;
  if (this != internal_default_instance()) delete normalizedcomplianceparasympatheticslope_;
  if (this != internal_default_instance()) delete pupildiameterbaseline_;
  if (this != internal_default_instance()) delete responseslope_;
  if (this != internal_default_instance()) delete systemicresistancedistributedtimedelay_;
  if (this != internal_default_instance()) delete venouscompliancedistributedtimedelay_;
}

void ConfigurationData_NervousConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_NervousConfigurationData* _this = reinterpret_cast< ConfigurationData_NervousConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_NervousConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_NervousConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_NervousConfigurationData& ConfigurationData_NervousConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_NervousConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_NervousConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && heartelastancedistributedtimedelay_ != nullptr) {
    delete heartelastancedistributedtimedelay_;
  }
  heartelastancedistributedtimedelay_ = nullptr;
  if (GetArena() == nullptr && heartratedistributedtimedelay_ != nullptr) {
    delete heartratedistributedtimedelay_;
  }
  heartratedistributedtimedelay_ = nullptr;
  if (GetArena() == nullptr && normalizedheartrateintercept_ != nullptr) {
    delete normalizedheartrateintercept_;
  }
  normalizedheartrateintercept_ = nullptr;
  if (GetArena() == nullptr && normalizedheartratesympatheticslope_ != nullptr) {
    delete normalizedheartratesympatheticslope_;
  }
  normalizedheartratesympatheticslope_ = nullptr;
  if (GetArena() == nullptr && normalizedheartrateparasympatheticslope_ != nullptr) {
    delete normalizedheartrateparasympatheticslope_;
  }
  normalizedheartrateparasympatheticslope_ = nullptr;
  if (GetArena() == nullptr && normalizedheartelastanceintercept_ != nullptr) {
    delete normalizedheartelastanceintercept_;
  }
  normalizedheartelastanceintercept_ = nullptr;
  if (GetArena() == nullptr && normalizedheartelastancesympatheticslope_ != nullptr) {
    delete normalizedheartelastancesympatheticslope_;
  }
  normalizedheartelastancesympatheticslope_ = nullptr;
  if (GetArena() == nullptr && normalizedresistanceintercept_ != nullptr) {
    delete normalizedresistanceintercept_;
  }
  normalizedresistanceintercept_ = nullptr;
  if (GetArena() == nullptr && normalizedresistancesympatheticslope_ != nullptr) {
    delete normalizedresistancesympatheticslope_;
  }
  normalizedresistancesympatheticslope_ = nullptr;
  if (GetArena() == nullptr && normalizedcomplianceintercept_ != nullptr) {
    delete normalizedcomplianceintercept_;
  }
  normalizedcomplianceintercept_ = nullptr;
  if (GetArena() == nullptr && normalizedcomplianceparasympatheticslope_ != nullptr) {
    delete normalizedcomplianceparasympatheticslope_;
  }
  normalizedcomplianceparasympatheticslope_ = nullptr;
  if (GetArena() == nullptr && pupildiameterbaseline_ != nullptr) {
    delete pupildiameterbaseline_;
  }
  pupildiameterbaseline_ = nullptr;
  if (GetArena() == nullptr && responseslope_ != nullptr) {
    delete responseslope_;
  }
  responseslope_ = nullptr;
  if (GetArena() == nullptr && systemicresistancedistributedtimedelay_ != nullptr) {
    delete systemicresistancedistributedtimedelay_;
  }
  systemicresistancedistributedtimedelay_ = nullptr;
  if (GetArena() == nullptr && venouscompliancedistributedtimedelay_ != nullptr) {
    delete venouscompliancedistributedtimedelay_;
  }
  venouscompliancedistributedtimedelay_ = nullptr;
  ::memset(&enablecerebrospinalfluid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baroreceptorfeedback_) -
      reinterpret_cast<char*>(&enablecerebrospinalfluid_)) + sizeof(baroreceptorfeedback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_NervousConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch EnableCerebrospinalFluid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enablecerebrospinalfluid(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chemoreceptorfeedback(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_baroreceptorfeedback(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData HeartElastanceDistributedTimeDelay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartelastancedistributedtimedelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData HeartRateDistributedTimeDelay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartratedistributedtimedelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedHeartRateIntercept = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedheartrateintercept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedHeartRateSympatheticSlope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedheartratesympatheticslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedHeartRateParasympatheticSlope = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedheartrateparasympatheticslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceIntercept = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedheartelastanceintercept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceSympatheticSlope = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedheartelastancesympatheticslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedResistanceIntercept = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedresistanceintercept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedResistanceSympatheticSlope = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedresistancesympatheticslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedComplianceIntercept = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedcomplianceintercept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData NormalizedComplianceParasympatheticSlope = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalizedcomplianceparasympatheticslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarLengthData PupilDiameterBaseline = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pupildiameterbaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData ResponseSlope = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_responseslope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData SystemicResistanceDistributedTimeDelay = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemicresistancedistributedtimedelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData VenousComplianceDistributedTimeDelay = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_venouscompliancedistributedtimedelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_NervousConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch EnableCerebrospinalFluid = 1;
  if (this->enablecerebrospinalfluid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_enablecerebrospinalfluid(), target);
  }

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 2;
  if (this->chemoreceptorfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_chemoreceptorfeedback(), target);
  }

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 3;
  if (this->baroreceptorfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_baroreceptorfeedback(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData HeartElastanceDistributedTimeDelay = 4;
  if (this->has_heartelastancedistributedtimedelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heartelastancedistributedtimedelay(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData HeartRateDistributedTimeDelay = 5;
  if (this->has_heartratedistributedtimedelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heartratedistributedtimedelay(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateIntercept = 6;
  if (this->has_normalizedheartrateintercept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::normalizedheartrateintercept(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateSympatheticSlope = 7;
  if (this->has_normalizedheartratesympatheticslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::normalizedheartratesympatheticslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateParasympatheticSlope = 8;
  if (this->has_normalizedheartrateparasympatheticslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::normalizedheartrateparasympatheticslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceIntercept = 9;
  if (this->has_normalizedheartelastanceintercept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::normalizedheartelastanceintercept(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceSympatheticSlope = 10;
  if (this->has_normalizedheartelastancesympatheticslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::normalizedheartelastancesympatheticslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedResistanceIntercept = 11;
  if (this->has_normalizedresistanceintercept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::normalizedresistanceintercept(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedResistanceSympatheticSlope = 12;
  if (this->has_normalizedresistancesympatheticslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::normalizedresistancesympatheticslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedComplianceIntercept = 13;
  if (this->has_normalizedcomplianceintercept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::normalizedcomplianceintercept(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData NormalizedComplianceParasympatheticSlope = 14;
  if (this->has_normalizedcomplianceparasympatheticslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::normalizedcomplianceparasympatheticslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarLengthData PupilDiameterBaseline = 15;
  if (this->has_pupildiameterbaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::pupildiameterbaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData ResponseSlope = 16;
  if (this->has_responseslope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::responseslope(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData SystemicResistanceDistributedTimeDelay = 17;
  if (this->has_systemicresistancedistributedtimedelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::systemicresistancedistributedtimedelay(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData VenousComplianceDistributedTimeDelay = 18;
  if (this->has_venouscompliancedistributedtimedelay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::venouscompliancedistributedtimedelay(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  return target;
}

size_t ConfigurationData_NervousConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData HeartElastanceDistributedTimeDelay = 4;
  if (this->has_heartelastancedistributedtimedelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartelastancedistributedtimedelay_);
  }

  // .pulse.cdm.bind.ScalarTimeData HeartRateDistributedTimeDelay = 5;
  if (this->has_heartratedistributedtimedelay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartratedistributedtimedelay_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateIntercept = 6;
  if (this->has_normalizedheartrateintercept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedheartrateintercept_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateSympatheticSlope = 7;
  if (this->has_normalizedheartratesympatheticslope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedheartratesympatheticslope_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateParasympatheticSlope = 8;
  if (this->has_normalizedheartrateparasympatheticslope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedheartrateparasympatheticslope_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceIntercept = 9;
  if (this->has_normalizedheartelastanceintercept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedheartelastanceintercept_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceSympatheticSlope = 10;
  if (this->has_normalizedheartelastancesympatheticslope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedheartelastancesympatheticslope_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedResistanceIntercept = 11;
  if (this->has_normalizedresistanceintercept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedresistanceintercept_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedResistanceSympatheticSlope = 12;
  if (this->has_normalizedresistancesympatheticslope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedresistancesympatheticslope_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedComplianceIntercept = 13;
  if (this->has_normalizedcomplianceintercept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedcomplianceintercept_);
  }

  // .pulse.cdm.bind.ScalarData NormalizedComplianceParasympatheticSlope = 14;
  if (this->has_normalizedcomplianceparasympatheticslope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normalizedcomplianceparasympatheticslope_);
  }

  // .pulse.cdm.bind.ScalarLengthData PupilDiameterBaseline = 15;
  if (this->has_pupildiameterbaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pupildiameterbaseline_);
  }

  // .pulse.cdm.bind.ScalarData ResponseSlope = 16;
  if (this->has_responseslope()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responseslope_);
  }

  // .pulse.cdm.bind.ScalarTimeData SystemicResistanceDistributedTimeDelay = 17;
  if (this->has_systemicresistancedistributedtimedelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemicresistancedistributedtimedelay_);
  }

  // .pulse.cdm.bind.ScalarTimeData VenousComplianceDistributedTimeDelay = 18;
  if (this->has_venouscompliancedistributedtimedelay()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *venouscompliancedistributedtimedelay_);
  }

  // .pulse.cdm.bind.eSwitch EnableCerebrospinalFluid = 1;
  if (this->enablecerebrospinalfluid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enablecerebrospinalfluid());
  }

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 2;
  if (this->chemoreceptorfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chemoreceptorfeedback());
  }

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 3;
  if (this->baroreceptorfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_baroreceptorfeedback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_NervousConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_NervousConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_NervousConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_NervousConfigurationData::MergeFrom(const ConfigurationData_NervousConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heartelastancedistributedtimedelay()) {
    _internal_mutable_heartelastancedistributedtimedelay()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_heartelastancedistributedtimedelay());
  }
  if (from.has_heartratedistributedtimedelay()) {
    _internal_mutable_heartratedistributedtimedelay()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_heartratedistributedtimedelay());
  }
  if (from.has_normalizedheartrateintercept()) {
    _internal_mutable_normalizedheartrateintercept()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedheartrateintercept());
  }
  if (from.has_normalizedheartratesympatheticslope()) {
    _internal_mutable_normalizedheartratesympatheticslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedheartratesympatheticslope());
  }
  if (from.has_normalizedheartrateparasympatheticslope()) {
    _internal_mutable_normalizedheartrateparasympatheticslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedheartrateparasympatheticslope());
  }
  if (from.has_normalizedheartelastanceintercept()) {
    _internal_mutable_normalizedheartelastanceintercept()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedheartelastanceintercept());
  }
  if (from.has_normalizedheartelastancesympatheticslope()) {
    _internal_mutable_normalizedheartelastancesympatheticslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedheartelastancesympatheticslope());
  }
  if (from.has_normalizedresistanceintercept()) {
    _internal_mutable_normalizedresistanceintercept()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedresistanceintercept());
  }
  if (from.has_normalizedresistancesympatheticslope()) {
    _internal_mutable_normalizedresistancesympatheticslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedresistancesympatheticslope());
  }
  if (from.has_normalizedcomplianceintercept()) {
    _internal_mutable_normalizedcomplianceintercept()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedcomplianceintercept());
  }
  if (from.has_normalizedcomplianceparasympatheticslope()) {
    _internal_mutable_normalizedcomplianceparasympatheticslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_normalizedcomplianceparasympatheticslope());
  }
  if (from.has_pupildiameterbaseline()) {
    _internal_mutable_pupildiameterbaseline()->::pulse::cdm::bind::ScalarLengthData::MergeFrom(from._internal_pupildiameterbaseline());
  }
  if (from.has_responseslope()) {
    _internal_mutable_responseslope()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_responseslope());
  }
  if (from.has_systemicresistancedistributedtimedelay()) {
    _internal_mutable_systemicresistancedistributedtimedelay()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_systemicresistancedistributedtimedelay());
  }
  if (from.has_venouscompliancedistributedtimedelay()) {
    _internal_mutable_venouscompliancedistributedtimedelay()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_venouscompliancedistributedtimedelay());
  }
  if (from.enablecerebrospinalfluid() != 0) {
    _internal_set_enablecerebrospinalfluid(from._internal_enablecerebrospinalfluid());
  }
  if (from.chemoreceptorfeedback() != 0) {
    _internal_set_chemoreceptorfeedback(from._internal_chemoreceptorfeedback());
  }
  if (from.baroreceptorfeedback() != 0) {
    _internal_set_baroreceptorfeedback(from._internal_baroreceptorfeedback());
  }
}

void ConfigurationData_NervousConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_NervousConfigurationData::CopyFrom(const ConfigurationData_NervousConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_NervousConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_NervousConfigurationData::InternalSwap(ConfigurationData_NervousConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_NervousConfigurationData, baroreceptorfeedback_)
      + sizeof(ConfigurationData_NervousConfigurationData::baroreceptorfeedback_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_NervousConfigurationData, heartelastancedistributedtimedelay_)>(
          reinterpret_cast<char*>(&heartelastancedistributedtimedelay_),
          reinterpret_cast<char*>(&other->heartelastancedistributedtimedelay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_NervousConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_RenalConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& plasmasodiumconcentrationsetpoint(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& peritubularpotassiumconcentrationsetpoint(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& leftglomerularfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& leftglomerularfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& lefttubularreabsorptionfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& lefttubularreabsorptionfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& maximumafferentresistance(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& minimumafferentresistance(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& rightglomerularfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& rightglomerularfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& righttubularreabsorptionfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& righttubularreabsorptionfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& targetsodiumdelivery(const ConfigurationData_RenalConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ConfigurationData_RenalConfigurationData::_Internal::plasmasodiumconcentrationsetpoint(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->plasmasodiumconcentrationsetpoint_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ConfigurationData_RenalConfigurationData::_Internal::peritubularpotassiumconcentrationsetpoint(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->peritubularpotassiumconcentrationsetpoint_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ConfigurationData_RenalConfigurationData::_Internal::leftglomerularfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->leftglomerularfilteringsurfaceareabaseline_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
ConfigurationData_RenalConfigurationData::_Internal::leftglomerularfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->leftglomerularfluidpermeabilitybaseline_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ConfigurationData_RenalConfigurationData::_Internal::lefttubularreabsorptionfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->lefttubularreabsorptionfilteringsurfaceareabaseline_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
ConfigurationData_RenalConfigurationData::_Internal::lefttubularreabsorptionfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->lefttubularreabsorptionfluidpermeabilitybaseline_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_RenalConfigurationData::_Internal::maximumafferentresistance(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->maximumafferentresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
ConfigurationData_RenalConfigurationData::_Internal::minimumafferentresistance(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->minimumafferentresistance_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ConfigurationData_RenalConfigurationData::_Internal::rightglomerularfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->rightglomerularfilteringsurfaceareabaseline_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
ConfigurationData_RenalConfigurationData::_Internal::rightglomerularfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->rightglomerularfluidpermeabilitybaseline_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ConfigurationData_RenalConfigurationData::_Internal::righttubularreabsorptionfilteringsurfaceareabaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->righttubularreabsorptionfilteringsurfaceareabaseline_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
ConfigurationData_RenalConfigurationData::_Internal::righttubularreabsorptionfluidpermeabilitybaseline(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->righttubularreabsorptionfluidpermeabilitybaseline_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
ConfigurationData_RenalConfigurationData::_Internal::targetsodiumdelivery(const ConfigurationData_RenalConfigurationData* msg) {
  return *msg->targetsodiumdelivery_;
}
void ConfigurationData_RenalConfigurationData::clear_plasmasodiumconcentrationsetpoint() {
  if (GetArena() == nullptr && plasmasodiumconcentrationsetpoint_ != nullptr) {
    delete plasmasodiumconcentrationsetpoint_;
  }
  plasmasodiumconcentrationsetpoint_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_peritubularpotassiumconcentrationsetpoint() {
  if (GetArena() == nullptr && peritubularpotassiumconcentrationsetpoint_ != nullptr) {
    delete peritubularpotassiumconcentrationsetpoint_;
  }
  peritubularpotassiumconcentrationsetpoint_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_leftglomerularfilteringsurfaceareabaseline() {
  if (GetArena() == nullptr && leftglomerularfilteringsurfaceareabaseline_ != nullptr) {
    delete leftglomerularfilteringsurfaceareabaseline_;
  }
  leftglomerularfilteringsurfaceareabaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_leftglomerularfluidpermeabilitybaseline() {
  if (GetArena() == nullptr && leftglomerularfluidpermeabilitybaseline_ != nullptr) {
    delete leftglomerularfluidpermeabilitybaseline_;
  }
  leftglomerularfluidpermeabilitybaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_lefttubularreabsorptionfilteringsurfaceareabaseline() {
  if (GetArena() == nullptr && lefttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr) {
    delete lefttubularreabsorptionfilteringsurfaceareabaseline_;
  }
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_lefttubularreabsorptionfluidpermeabilitybaseline() {
  if (GetArena() == nullptr && lefttubularreabsorptionfluidpermeabilitybaseline_ != nullptr) {
    delete lefttubularreabsorptionfluidpermeabilitybaseline_;
  }
  lefttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_maximumafferentresistance() {
  if (GetArena() == nullptr && maximumafferentresistance_ != nullptr) {
    delete maximumafferentresistance_;
  }
  maximumafferentresistance_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_minimumafferentresistance() {
  if (GetArena() == nullptr && minimumafferentresistance_ != nullptr) {
    delete minimumafferentresistance_;
  }
  minimumafferentresistance_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_rightglomerularfilteringsurfaceareabaseline() {
  if (GetArena() == nullptr && rightglomerularfilteringsurfaceareabaseline_ != nullptr) {
    delete rightglomerularfilteringsurfaceareabaseline_;
  }
  rightglomerularfilteringsurfaceareabaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_rightglomerularfluidpermeabilitybaseline() {
  if (GetArena() == nullptr && rightglomerularfluidpermeabilitybaseline_ != nullptr) {
    delete rightglomerularfluidpermeabilitybaseline_;
  }
  rightglomerularfluidpermeabilitybaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_righttubularreabsorptionfilteringsurfaceareabaseline() {
  if (GetArena() == nullptr && righttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr) {
    delete righttubularreabsorptionfilteringsurfaceareabaseline_;
  }
  righttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_righttubularreabsorptionfluidpermeabilitybaseline() {
  if (GetArena() == nullptr && righttubularreabsorptionfluidpermeabilitybaseline_ != nullptr) {
    delete righttubularreabsorptionfluidpermeabilitybaseline_;
  }
  righttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
}
void ConfigurationData_RenalConfigurationData::clear_targetsodiumdelivery() {
  if (GetArena() == nullptr && targetsodiumdelivery_ != nullptr) {
    delete targetsodiumdelivery_;
  }
  targetsodiumdelivery_ = nullptr;
}
ConfigurationData_RenalConfigurationData::ConfigurationData_RenalConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
}
ConfigurationData_RenalConfigurationData::ConfigurationData_RenalConfigurationData(const ConfigurationData_RenalConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plasmasodiumconcentrationsetpoint()) {
    plasmasodiumconcentrationsetpoint_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.plasmasodiumconcentrationsetpoint_);
  } else {
    plasmasodiumconcentrationsetpoint_ = nullptr;
  }
  if (from._internal_has_peritubularpotassiumconcentrationsetpoint()) {
    peritubularpotassiumconcentrationsetpoint_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.peritubularpotassiumconcentrationsetpoint_);
  } else {
    peritubularpotassiumconcentrationsetpoint_ = nullptr;
  }
  if (from._internal_has_leftglomerularfilteringsurfaceareabaseline()) {
    leftglomerularfilteringsurfaceareabaseline_ = new ::pulse::cdm::bind::ScalarAreaData(*from.leftglomerularfilteringsurfaceareabaseline_);
  } else {
    leftglomerularfilteringsurfaceareabaseline_ = nullptr;
  }
  if (from._internal_has_leftglomerularfluidpermeabilitybaseline()) {
    leftglomerularfluidpermeabilitybaseline_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.leftglomerularfluidpermeabilitybaseline_);
  } else {
    leftglomerularfluidpermeabilitybaseline_ = nullptr;
  }
  if (from._internal_has_lefttubularreabsorptionfilteringsurfaceareabaseline()) {
    lefttubularreabsorptionfilteringsurfaceareabaseline_ = new ::pulse::cdm::bind::ScalarAreaData(*from.lefttubularreabsorptionfilteringsurfaceareabaseline_);
  } else {
    lefttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  }
  if (from._internal_has_lefttubularreabsorptionfluidpermeabilitybaseline()) {
    lefttubularreabsorptionfluidpermeabilitybaseline_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.lefttubularreabsorptionfluidpermeabilitybaseline_);
  } else {
    lefttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  }
  if (from._internal_has_maximumafferentresistance()) {
    maximumafferentresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.maximumafferentresistance_);
  } else {
    maximumafferentresistance_ = nullptr;
  }
  if (from._internal_has_minimumafferentresistance()) {
    minimumafferentresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.minimumafferentresistance_);
  } else {
    minimumafferentresistance_ = nullptr;
  }
  if (from._internal_has_rightglomerularfilteringsurfaceareabaseline()) {
    rightglomerularfilteringsurfaceareabaseline_ = new ::pulse::cdm::bind::ScalarAreaData(*from.rightglomerularfilteringsurfaceareabaseline_);
  } else {
    rightglomerularfilteringsurfaceareabaseline_ = nullptr;
  }
  if (from._internal_has_rightglomerularfluidpermeabilitybaseline()) {
    rightglomerularfluidpermeabilitybaseline_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.rightglomerularfluidpermeabilitybaseline_);
  } else {
    rightglomerularfluidpermeabilitybaseline_ = nullptr;
  }
  if (from._internal_has_righttubularreabsorptionfilteringsurfaceareabaseline()) {
    righttubularreabsorptionfilteringsurfaceareabaseline_ = new ::pulse::cdm::bind::ScalarAreaData(*from.righttubularreabsorptionfilteringsurfaceareabaseline_);
  } else {
    righttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  }
  if (from._internal_has_righttubularreabsorptionfluidpermeabilitybaseline()) {
    righttubularreabsorptionfluidpermeabilitybaseline_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.righttubularreabsorptionfluidpermeabilitybaseline_);
  } else {
    righttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  }
  if (from._internal_has_targetsodiumdelivery()) {
    targetsodiumdelivery_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.targetsodiumdelivery_);
  } else {
    targetsodiumdelivery_ = nullptr;
  }
  enablerenal_ = from.enablerenal_;
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
}

void ConfigurationData_RenalConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&plasmasodiumconcentrationsetpoint_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enablerenal_) -
      reinterpret_cast<char*>(&plasmasodiumconcentrationsetpoint_)) + sizeof(enablerenal_));
}

ConfigurationData_RenalConfigurationData::~ConfigurationData_RenalConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_RenalConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plasmasodiumconcentrationsetpoint_;
  if (this != internal_default_instance()) delete peritubularpotassiumconcentrationsetpoint_;
  if (this != internal_default_instance()) delete leftglomerularfilteringsurfaceareabaseline_;
  if (this != internal_default_instance()) delete leftglomerularfluidpermeabilitybaseline_;
  if (this != internal_default_instance()) delete lefttubularreabsorptionfilteringsurfaceareabaseline_;
  if (this != internal_default_instance()) delete lefttubularreabsorptionfluidpermeabilitybaseline_;
  if (this != internal_default_instance()) delete maximumafferentresistance_;
  if (this != internal_default_instance()) delete minimumafferentresistance_;
  if (this != internal_default_instance()) delete rightglomerularfilteringsurfaceareabaseline_;
  if (this != internal_default_instance()) delete rightglomerularfluidpermeabilitybaseline_;
  if (this != internal_default_instance()) delete righttubularreabsorptionfilteringsurfaceareabaseline_;
  if (this != internal_default_instance()) delete righttubularreabsorptionfluidpermeabilitybaseline_;
  if (this != internal_default_instance()) delete targetsodiumdelivery_;
}

void ConfigurationData_RenalConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_RenalConfigurationData* _this = reinterpret_cast< ConfigurationData_RenalConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_RenalConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_RenalConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_RenalConfigurationData& ConfigurationData_RenalConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_RenalConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_RenalConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && plasmasodiumconcentrationsetpoint_ != nullptr) {
    delete plasmasodiumconcentrationsetpoint_;
  }
  plasmasodiumconcentrationsetpoint_ = nullptr;
  if (GetArena() == nullptr && peritubularpotassiumconcentrationsetpoint_ != nullptr) {
    delete peritubularpotassiumconcentrationsetpoint_;
  }
  peritubularpotassiumconcentrationsetpoint_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfilteringsurfaceareabaseline_ != nullptr) {
    delete leftglomerularfilteringsurfaceareabaseline_;
  }
  leftglomerularfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfluidpermeabilitybaseline_ != nullptr) {
    delete leftglomerularfluidpermeabilitybaseline_;
  }
  leftglomerularfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() == nullptr && lefttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr) {
    delete lefttubularreabsorptionfilteringsurfaceareabaseline_;
  }
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() == nullptr && lefttubularreabsorptionfluidpermeabilitybaseline_ != nullptr) {
    delete lefttubularreabsorptionfluidpermeabilitybaseline_;
  }
  lefttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() == nullptr && maximumafferentresistance_ != nullptr) {
    delete maximumafferentresistance_;
  }
  maximumafferentresistance_ = nullptr;
  if (GetArena() == nullptr && minimumafferentresistance_ != nullptr) {
    delete minimumafferentresistance_;
  }
  minimumafferentresistance_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfilteringsurfaceareabaseline_ != nullptr) {
    delete rightglomerularfilteringsurfaceareabaseline_;
  }
  rightglomerularfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfluidpermeabilitybaseline_ != nullptr) {
    delete rightglomerularfluidpermeabilitybaseline_;
  }
  rightglomerularfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() == nullptr && righttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr) {
    delete righttubularreabsorptionfilteringsurfaceareabaseline_;
  }
  righttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() == nullptr && righttubularreabsorptionfluidpermeabilitybaseline_ != nullptr) {
    delete righttubularreabsorptionfluidpermeabilitybaseline_;
  }
  righttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() == nullptr && targetsodiumdelivery_ != nullptr) {
    delete targetsodiumdelivery_;
  }
  targetsodiumdelivery_ = nullptr;
  enablerenal_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_RenalConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch EnableRenal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enablerenal(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plasmasodiumconcentrationsetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData PeritubularPotassiumConcentrationSetPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peritubularpotassiumconcentrationsetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfilteringsurfaceareabaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeabilityBaseline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfluidpermeabilitybaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularreabsorptionfilteringsurfaceareabaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeabilityBaseline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularreabsorptionfluidpermeabilitybaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MaximumAfferentResistance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumafferentresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MinimumAfferentResistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimumafferentresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfilteringsurfaceareabaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeabilityBaseline = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfluidpermeabilitybaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularreabsorptionfilteringsurfaceareabaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeabilityBaseline = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularreabsorptionfluidpermeabilitybaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData TargetSodiumDelivery = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetsodiumdelivery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_RenalConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch EnableRenal = 1;
  if (this->enablerenal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_enablerenal(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint = 2;
  if (this->has_plasmasodiumconcentrationsetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plasmasodiumconcentrationsetpoint(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData PeritubularPotassiumConcentrationSetPoint = 3;
  if (this->has_peritubularpotassiumconcentrationsetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peritubularpotassiumconcentrationsetpoint(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline = 4;
  if (this->has_leftglomerularfilteringsurfaceareabaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leftglomerularfilteringsurfaceareabaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeabilityBaseline = 5;
  if (this->has_leftglomerularfluidpermeabilitybaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::leftglomerularfluidpermeabilitybaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline = 6;
  if (this->has_lefttubularreabsorptionfilteringsurfaceareabaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::lefttubularreabsorptionfilteringsurfaceareabaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeabilityBaseline = 7;
  if (this->has_lefttubularreabsorptionfluidpermeabilitybaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lefttubularreabsorptionfluidpermeabilitybaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MaximumAfferentResistance = 8;
  if (this->has_maximumafferentresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::maximumafferentresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MinimumAfferentResistance = 9;
  if (this->has_minimumafferentresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::minimumafferentresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline = 10;
  if (this->has_rightglomerularfilteringsurfaceareabaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rightglomerularfilteringsurfaceareabaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeabilityBaseline = 11;
  if (this->has_rightglomerularfluidpermeabilitybaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::rightglomerularfluidpermeabilitybaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline = 12;
  if (this->has_righttubularreabsorptionfilteringsurfaceareabaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::righttubularreabsorptionfilteringsurfaceareabaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeabilityBaseline = 13;
  if (this->has_righttubularreabsorptionfluidpermeabilitybaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::righttubularreabsorptionfluidpermeabilitybaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData TargetSodiumDelivery = 14;
  if (this->has_targetsodiumdelivery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::targetsodiumdelivery(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  return target;
}

size_t ConfigurationData_RenalConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint = 2;
  if (this->has_plasmasodiumconcentrationsetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plasmasodiumconcentrationsetpoint_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData PeritubularPotassiumConcentrationSetPoint = 3;
  if (this->has_peritubularpotassiumconcentrationsetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peritubularpotassiumconcentrationsetpoint_);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline = 4;
  if (this->has_leftglomerularfilteringsurfaceareabaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfilteringsurfaceareabaseline_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeabilityBaseline = 5;
  if (this->has_leftglomerularfluidpermeabilitybaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfluidpermeabilitybaseline_);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline = 6;
  if (this->has_lefttubularreabsorptionfilteringsurfaceareabaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularreabsorptionfilteringsurfaceareabaseline_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeabilityBaseline = 7;
  if (this->has_lefttubularreabsorptionfluidpermeabilitybaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularreabsorptionfluidpermeabilitybaseline_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MaximumAfferentResistance = 8;
  if (this->has_maximumafferentresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumafferentresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MinimumAfferentResistance = 9;
  if (this->has_minimumafferentresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimumafferentresistance_);
  }

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline = 10;
  if (this->has_rightglomerularfilteringsurfaceareabaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfilteringsurfaceareabaseline_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeabilityBaseline = 11;
  if (this->has_rightglomerularfluidpermeabilitybaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfluidpermeabilitybaseline_);
  }

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline = 12;
  if (this->has_righttubularreabsorptionfilteringsurfaceareabaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularreabsorptionfilteringsurfaceareabaseline_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeabilityBaseline = 13;
  if (this->has_righttubularreabsorptionfluidpermeabilitybaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularreabsorptionfluidpermeabilitybaseline_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData TargetSodiumDelivery = 14;
  if (this->has_targetsodiumdelivery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetsodiumdelivery_);
  }

  // .pulse.cdm.bind.eSwitch EnableRenal = 1;
  if (this->enablerenal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enablerenal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_RenalConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_RenalConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_RenalConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_RenalConfigurationData::MergeFrom(const ConfigurationData_RenalConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_plasmasodiumconcentrationsetpoint()) {
    _internal_mutable_plasmasodiumconcentrationsetpoint()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_plasmasodiumconcentrationsetpoint());
  }
  if (from.has_peritubularpotassiumconcentrationsetpoint()) {
    _internal_mutable_peritubularpotassiumconcentrationsetpoint()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_peritubularpotassiumconcentrationsetpoint());
  }
  if (from.has_leftglomerularfilteringsurfaceareabaseline()) {
    _internal_mutable_leftglomerularfilteringsurfaceareabaseline()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_leftglomerularfilteringsurfaceareabaseline());
  }
  if (from.has_leftglomerularfluidpermeabilitybaseline()) {
    _internal_mutable_leftglomerularfluidpermeabilitybaseline()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_leftglomerularfluidpermeabilitybaseline());
  }
  if (from.has_lefttubularreabsorptionfilteringsurfaceareabaseline()) {
    _internal_mutable_lefttubularreabsorptionfilteringsurfaceareabaseline()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_lefttubularreabsorptionfilteringsurfaceareabaseline());
  }
  if (from.has_lefttubularreabsorptionfluidpermeabilitybaseline()) {
    _internal_mutable_lefttubularreabsorptionfluidpermeabilitybaseline()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_lefttubularreabsorptionfluidpermeabilitybaseline());
  }
  if (from.has_maximumafferentresistance()) {
    _internal_mutable_maximumafferentresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_maximumafferentresistance());
  }
  if (from.has_minimumafferentresistance()) {
    _internal_mutable_minimumafferentresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_minimumafferentresistance());
  }
  if (from.has_rightglomerularfilteringsurfaceareabaseline()) {
    _internal_mutable_rightglomerularfilteringsurfaceareabaseline()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_rightglomerularfilteringsurfaceareabaseline());
  }
  if (from.has_rightglomerularfluidpermeabilitybaseline()) {
    _internal_mutable_rightglomerularfluidpermeabilitybaseline()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_rightglomerularfluidpermeabilitybaseline());
  }
  if (from.has_righttubularreabsorptionfilteringsurfaceareabaseline()) {
    _internal_mutable_righttubularreabsorptionfilteringsurfaceareabaseline()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_righttubularreabsorptionfilteringsurfaceareabaseline());
  }
  if (from.has_righttubularreabsorptionfluidpermeabilitybaseline()) {
    _internal_mutable_righttubularreabsorptionfluidpermeabilitybaseline()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_righttubularreabsorptionfluidpermeabilitybaseline());
  }
  if (from.has_targetsodiumdelivery()) {
    _internal_mutable_targetsodiumdelivery()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_targetsodiumdelivery());
  }
  if (from.enablerenal() != 0) {
    _internal_set_enablerenal(from._internal_enablerenal());
  }
}

void ConfigurationData_RenalConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_RenalConfigurationData::CopyFrom(const ConfigurationData_RenalConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_RenalConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_RenalConfigurationData::InternalSwap(ConfigurationData_RenalConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_RenalConfigurationData, enablerenal_)
      + sizeof(ConfigurationData_RenalConfigurationData::enablerenal_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_RenalConfigurationData, plasmasodiumconcentrationsetpoint_)>(
          reinterpret_cast<char*>(&plasmasodiumconcentrationsetpoint_),
          reinterpret_cast<char*>(&other->plasmasodiumconcentrationsetpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_RenalConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_RespiratoryConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressureData& centralcontrollerco2pressuresetpoint(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& centralventilatorycontrollergain(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& minimumallowabletidalvolume(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& minimumallowableinspiratoryandexpiratoryperiod(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& peripheralcontrollerco2pressuresetpoint(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarData& peripheralventilatorycontrollergain(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonaryventilationratemaximum(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& ventilationtidalvolumeintercept(const ConfigurationData_RespiratoryConfigurationData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& ventilatoryocclusionpressure(const ConfigurationData_RespiratoryConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarPressureData&
ConfigurationData_RespiratoryConfigurationData::_Internal::centralcontrollerco2pressuresetpoint(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->centralcontrollerco2pressuresetpoint_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_RespiratoryConfigurationData::_Internal::centralventilatorycontrollergain(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->centralventilatorycontrollergain_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
ConfigurationData_RespiratoryConfigurationData::_Internal::minimumallowabletidalvolume(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->minimumallowabletidalvolume_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData_RespiratoryConfigurationData::_Internal::minimumallowableinspiratoryandexpiratoryperiod(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->minimumallowableinspiratoryandexpiratoryperiod_;
}
const ::pulse::cdm::bind::ScalarPressureData&
ConfigurationData_RespiratoryConfigurationData::_Internal::peripheralcontrollerco2pressuresetpoint(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->peripheralcontrollerco2pressuresetpoint_;
}
const ::pulse::cdm::bind::ScalarData&
ConfigurationData_RespiratoryConfigurationData::_Internal::peripheralventilatorycontrollergain(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->peripheralventilatorycontrollergain_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
ConfigurationData_RespiratoryConfigurationData::_Internal::pulmonaryventilationratemaximum(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->pulmonaryventilationratemaximum_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
ConfigurationData_RespiratoryConfigurationData::_Internal::ventilationtidalvolumeintercept(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->ventilationtidalvolumeintercept_;
}
const ::pulse::cdm::bind::ScalarPressureData&
ConfigurationData_RespiratoryConfigurationData::_Internal::ventilatoryocclusionpressure(const ConfigurationData_RespiratoryConfigurationData* msg) {
  return *msg->ventilatoryocclusionpressure_;
}
void ConfigurationData_RespiratoryConfigurationData::clear_centralcontrollerco2pressuresetpoint() {
  if (GetArena() == nullptr && centralcontrollerco2pressuresetpoint_ != nullptr) {
    delete centralcontrollerco2pressuresetpoint_;
  }
  centralcontrollerco2pressuresetpoint_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_centralventilatorycontrollergain() {
  if (GetArena() == nullptr && centralventilatorycontrollergain_ != nullptr) {
    delete centralventilatorycontrollergain_;
  }
  centralventilatorycontrollergain_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_minimumallowabletidalvolume() {
  if (GetArena() == nullptr && minimumallowabletidalvolume_ != nullptr) {
    delete minimumallowabletidalvolume_;
  }
  minimumallowabletidalvolume_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_minimumallowableinspiratoryandexpiratoryperiod() {
  if (GetArena() == nullptr && minimumallowableinspiratoryandexpiratoryperiod_ != nullptr) {
    delete minimumallowableinspiratoryandexpiratoryperiod_;
  }
  minimumallowableinspiratoryandexpiratoryperiod_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_peripheralcontrollerco2pressuresetpoint() {
  if (GetArena() == nullptr && peripheralcontrollerco2pressuresetpoint_ != nullptr) {
    delete peripheralcontrollerco2pressuresetpoint_;
  }
  peripheralcontrollerco2pressuresetpoint_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_peripheralventilatorycontrollergain() {
  if (GetArena() == nullptr && peripheralventilatorycontrollergain_ != nullptr) {
    delete peripheralventilatorycontrollergain_;
  }
  peripheralventilatorycontrollergain_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_pulmonaryventilationratemaximum() {
  if (GetArena() == nullptr && pulmonaryventilationratemaximum_ != nullptr) {
    delete pulmonaryventilationratemaximum_;
  }
  pulmonaryventilationratemaximum_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_ventilationtidalvolumeintercept() {
  if (GetArena() == nullptr && ventilationtidalvolumeintercept_ != nullptr) {
    delete ventilationtidalvolumeintercept_;
  }
  ventilationtidalvolumeintercept_ = nullptr;
}
void ConfigurationData_RespiratoryConfigurationData::clear_ventilatoryocclusionpressure() {
  if (GetArena() == nullptr && ventilatoryocclusionpressure_ != nullptr) {
    delete ventilatoryocclusionpressure_;
  }
  ventilatoryocclusionpressure_ = nullptr;
}
ConfigurationData_RespiratoryConfigurationData::ConfigurationData_RespiratoryConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
}
ConfigurationData_RespiratoryConfigurationData::ConfigurationData_RespiratoryConfigurationData(const ConfigurationData_RespiratoryConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_centralcontrollerco2pressuresetpoint()) {
    centralcontrollerco2pressuresetpoint_ = new ::pulse::cdm::bind::ScalarPressureData(*from.centralcontrollerco2pressuresetpoint_);
  } else {
    centralcontrollerco2pressuresetpoint_ = nullptr;
  }
  if (from._internal_has_centralventilatorycontrollergain()) {
    centralventilatorycontrollergain_ = new ::pulse::cdm::bind::ScalarData(*from.centralventilatorycontrollergain_);
  } else {
    centralventilatorycontrollergain_ = nullptr;
  }
  if (from._internal_has_minimumallowabletidalvolume()) {
    minimumallowabletidalvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.minimumallowabletidalvolume_);
  } else {
    minimumallowabletidalvolume_ = nullptr;
  }
  if (from._internal_has_minimumallowableinspiratoryandexpiratoryperiod()) {
    minimumallowableinspiratoryandexpiratoryperiod_ = new ::pulse::cdm::bind::ScalarTimeData(*from.minimumallowableinspiratoryandexpiratoryperiod_);
  } else {
    minimumallowableinspiratoryandexpiratoryperiod_ = nullptr;
  }
  if (from._internal_has_peripheralcontrollerco2pressuresetpoint()) {
    peripheralcontrollerco2pressuresetpoint_ = new ::pulse::cdm::bind::ScalarPressureData(*from.peripheralcontrollerco2pressuresetpoint_);
  } else {
    peripheralcontrollerco2pressuresetpoint_ = nullptr;
  }
  if (from._internal_has_peripheralventilatorycontrollergain()) {
    peripheralventilatorycontrollergain_ = new ::pulse::cdm::bind::ScalarData(*from.peripheralventilatorycontrollergain_);
  } else {
    peripheralventilatorycontrollergain_ = nullptr;
  }
  if (from._internal_has_pulmonaryventilationratemaximum()) {
    pulmonaryventilationratemaximum_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.pulmonaryventilationratemaximum_);
  } else {
    pulmonaryventilationratemaximum_ = nullptr;
  }
  if (from._internal_has_ventilationtidalvolumeintercept()) {
    ventilationtidalvolumeintercept_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.ventilationtidalvolumeintercept_);
  } else {
    ventilationtidalvolumeintercept_ = nullptr;
  }
  if (from._internal_has_ventilatoryocclusionpressure()) {
    ventilatoryocclusionpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.ventilatoryocclusionpressure_);
  } else {
    ventilatoryocclusionpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
}

void ConfigurationData_RespiratoryConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&centralcontrollerco2pressuresetpoint_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ventilatoryocclusionpressure_) -
      reinterpret_cast<char*>(&centralcontrollerco2pressuresetpoint_)) + sizeof(ventilatoryocclusionpressure_));
}

ConfigurationData_RespiratoryConfigurationData::~ConfigurationData_RespiratoryConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_RespiratoryConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete centralcontrollerco2pressuresetpoint_;
  if (this != internal_default_instance()) delete centralventilatorycontrollergain_;
  if (this != internal_default_instance()) delete minimumallowabletidalvolume_;
  if (this != internal_default_instance()) delete minimumallowableinspiratoryandexpiratoryperiod_;
  if (this != internal_default_instance()) delete peripheralcontrollerco2pressuresetpoint_;
  if (this != internal_default_instance()) delete peripheralventilatorycontrollergain_;
  if (this != internal_default_instance()) delete pulmonaryventilationratemaximum_;
  if (this != internal_default_instance()) delete ventilationtidalvolumeintercept_;
  if (this != internal_default_instance()) delete ventilatoryocclusionpressure_;
}

void ConfigurationData_RespiratoryConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_RespiratoryConfigurationData* _this = reinterpret_cast< ConfigurationData_RespiratoryConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_RespiratoryConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_RespiratoryConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_RespiratoryConfigurationData& ConfigurationData_RespiratoryConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_RespiratoryConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_RespiratoryConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && centralcontrollerco2pressuresetpoint_ != nullptr) {
    delete centralcontrollerco2pressuresetpoint_;
  }
  centralcontrollerco2pressuresetpoint_ = nullptr;
  if (GetArena() == nullptr && centralventilatorycontrollergain_ != nullptr) {
    delete centralventilatorycontrollergain_;
  }
  centralventilatorycontrollergain_ = nullptr;
  if (GetArena() == nullptr && minimumallowabletidalvolume_ != nullptr) {
    delete minimumallowabletidalvolume_;
  }
  minimumallowabletidalvolume_ = nullptr;
  if (GetArena() == nullptr && minimumallowableinspiratoryandexpiratoryperiod_ != nullptr) {
    delete minimumallowableinspiratoryandexpiratoryperiod_;
  }
  minimumallowableinspiratoryandexpiratoryperiod_ = nullptr;
  if (GetArena() == nullptr && peripheralcontrollerco2pressuresetpoint_ != nullptr) {
    delete peripheralcontrollerco2pressuresetpoint_;
  }
  peripheralcontrollerco2pressuresetpoint_ = nullptr;
  if (GetArena() == nullptr && peripheralventilatorycontrollergain_ != nullptr) {
    delete peripheralventilatorycontrollergain_;
  }
  peripheralventilatorycontrollergain_ = nullptr;
  if (GetArena() == nullptr && pulmonaryventilationratemaximum_ != nullptr) {
    delete pulmonaryventilationratemaximum_;
  }
  pulmonaryventilationratemaximum_ = nullptr;
  if (GetArena() == nullptr && ventilationtidalvolumeintercept_ != nullptr) {
    delete ventilationtidalvolumeintercept_;
  }
  ventilationtidalvolumeintercept_ = nullptr;
  if (GetArena() == nullptr && ventilatoryocclusionpressure_ != nullptr) {
    delete ventilatoryocclusionpressure_;
  }
  ventilatoryocclusionpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_RespiratoryConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPressureData CentralControllerCO2PressureSetPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_centralcontrollerco2pressuresetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData CentralVentilatoryControllerGain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_centralventilatorycontrollergain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData MinimumAllowableTidalVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimumallowabletidalvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData MinimumAllowableInspiratoryAndExpiratoryPeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimumallowableinspiratoryandexpiratoryperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PeripheralControllerCO2PressureSetPoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_peripheralcontrollerco2pressuresetpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData PeripheralVentilatoryControllerGain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_peripheralventilatorycontrollergain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryVentilationRateMaximum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryventilationratemaximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData VentilationTidalVolumeIntercept = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ventilationtidalvolumeintercept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData VentilatoryOcclusionPressure = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ventilatoryocclusionpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_RespiratoryConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData CentralControllerCO2PressureSetPoint = 1;
  if (this->has_centralcontrollerco2pressuresetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::centralcontrollerco2pressuresetpoint(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData CentralVentilatoryControllerGain = 2;
  if (this->has_centralventilatorycontrollergain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::centralventilatorycontrollergain(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData MinimumAllowableTidalVolume = 3;
  if (this->has_minimumallowabletidalvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::minimumallowabletidalvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData MinimumAllowableInspiratoryAndExpiratoryPeriod = 4;
  if (this->has_minimumallowableinspiratoryandexpiratoryperiod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::minimumallowableinspiratoryandexpiratoryperiod(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PeripheralControllerCO2PressureSetPoint = 5;
  if (this->has_peripheralcontrollerco2pressuresetpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::peripheralcontrollerco2pressuresetpoint(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData PeripheralVentilatoryControllerGain = 6;
  if (this->has_peripheralventilatorycontrollergain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::peripheralventilatorycontrollergain(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryVentilationRateMaximum = 7;
  if (this->has_pulmonaryventilationratemaximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pulmonaryventilationratemaximum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData VentilationTidalVolumeIntercept = 8;
  if (this->has_ventilationtidalvolumeintercept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ventilationtidalvolumeintercept(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData VentilatoryOcclusionPressure = 9;
  if (this->has_ventilatoryocclusionpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ventilatoryocclusionpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  return target;
}

size_t ConfigurationData_RespiratoryConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData CentralControllerCO2PressureSetPoint = 1;
  if (this->has_centralcontrollerco2pressuresetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centralcontrollerco2pressuresetpoint_);
  }

  // .pulse.cdm.bind.ScalarData CentralVentilatoryControllerGain = 2;
  if (this->has_centralventilatorycontrollergain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centralventilatorycontrollergain_);
  }

  // .pulse.cdm.bind.ScalarVolumeData MinimumAllowableTidalVolume = 3;
  if (this->has_minimumallowabletidalvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimumallowabletidalvolume_);
  }

  // .pulse.cdm.bind.ScalarTimeData MinimumAllowableInspiratoryAndExpiratoryPeriod = 4;
  if (this->has_minimumallowableinspiratoryandexpiratoryperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimumallowableinspiratoryandexpiratoryperiod_);
  }

  // .pulse.cdm.bind.ScalarPressureData PeripheralControllerCO2PressureSetPoint = 5;
  if (this->has_peripheralcontrollerco2pressuresetpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peripheralcontrollerco2pressuresetpoint_);
  }

  // .pulse.cdm.bind.ScalarData PeripheralVentilatoryControllerGain = 6;
  if (this->has_peripheralventilatorycontrollergain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peripheralventilatorycontrollergain_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryVentilationRateMaximum = 7;
  if (this->has_pulmonaryventilationratemaximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryventilationratemaximum_);
  }

  // .pulse.cdm.bind.ScalarVolumeData VentilationTidalVolumeIntercept = 8;
  if (this->has_ventilationtidalvolumeintercept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ventilationtidalvolumeintercept_);
  }

  // .pulse.cdm.bind.ScalarPressureData VentilatoryOcclusionPressure = 9;
  if (this->has_ventilatoryocclusionpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ventilatoryocclusionpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_RespiratoryConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_RespiratoryConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_RespiratoryConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_RespiratoryConfigurationData::MergeFrom(const ConfigurationData_RespiratoryConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_centralcontrollerco2pressuresetpoint()) {
    _internal_mutable_centralcontrollerco2pressuresetpoint()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_centralcontrollerco2pressuresetpoint());
  }
  if (from.has_centralventilatorycontrollergain()) {
    _internal_mutable_centralventilatorycontrollergain()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_centralventilatorycontrollergain());
  }
  if (from.has_minimumallowabletidalvolume()) {
    _internal_mutable_minimumallowabletidalvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_minimumallowabletidalvolume());
  }
  if (from.has_minimumallowableinspiratoryandexpiratoryperiod()) {
    _internal_mutable_minimumallowableinspiratoryandexpiratoryperiod()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_minimumallowableinspiratoryandexpiratoryperiod());
  }
  if (from.has_peripheralcontrollerco2pressuresetpoint()) {
    _internal_mutable_peripheralcontrollerco2pressuresetpoint()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_peripheralcontrollerco2pressuresetpoint());
  }
  if (from.has_peripheralventilatorycontrollergain()) {
    _internal_mutable_peripheralventilatorycontrollergain()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_peripheralventilatorycontrollergain());
  }
  if (from.has_pulmonaryventilationratemaximum()) {
    _internal_mutable_pulmonaryventilationratemaximum()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_pulmonaryventilationratemaximum());
  }
  if (from.has_ventilationtidalvolumeintercept()) {
    _internal_mutable_ventilationtidalvolumeintercept()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_ventilationtidalvolumeintercept());
  }
  if (from.has_ventilatoryocclusionpressure()) {
    _internal_mutable_ventilatoryocclusionpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_ventilatoryocclusionpressure());
  }
}

void ConfigurationData_RespiratoryConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_RespiratoryConfigurationData::CopyFrom(const ConfigurationData_RespiratoryConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_RespiratoryConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_RespiratoryConfigurationData::InternalSwap(ConfigurationData_RespiratoryConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData_RespiratoryConfigurationData, ventilatoryocclusionpressure_)
      + sizeof(ConfigurationData_RespiratoryConfigurationData::ventilatoryocclusionpressure_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData_RespiratoryConfigurationData, centralcontrollerco2pressuresetpoint_)>(
          reinterpret_cast<char*>(&centralcontrollerco2pressuresetpoint_),
          reinterpret_cast<char*>(&other->centralcontrollerco2pressuresetpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_RespiratoryConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData_TissueConfigurationData::_Internal {
 public:
};

ConfigurationData_TissueConfigurationData::ConfigurationData_TissueConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
}
ConfigurationData_TissueConfigurationData::ConfigurationData_TissueConfigurationData(const ConfigurationData_TissueConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabletissue_ = from.enabletissue_;
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
}

void ConfigurationData_TissueConfigurationData::SharedCtor() {
  enabletissue_ = 0;
}

ConfigurationData_TissueConfigurationData::~ConfigurationData_TissueConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData_TissueConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConfigurationData_TissueConfigurationData::ArenaDtor(void* object) {
  ConfigurationData_TissueConfigurationData* _this = reinterpret_cast< ConfigurationData_TissueConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData_TissueConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData_TissueConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData_TissueConfigurationData& ConfigurationData_TissueConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_TissueConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData_TissueConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabletissue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData_TissueConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch EnableTissue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enabletissue(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData_TissueConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch EnableTissue = 1;
  if (this->enabletissue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_enabletissue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  return target;
}

size_t ConfigurationData_TissueConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch EnableTissue = 1;
  if (this->enabletissue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enabletissue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData_TissueConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData_TissueConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData_TissueConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData_TissueConfigurationData::MergeFrom(const ConfigurationData_TissueConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabletissue() != 0) {
    _internal_set_enabletissue(from._internal_enabletissue());
  }
}

void ConfigurationData_TissueConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData_TissueConfigurationData::CopyFrom(const ConfigurationData_TissueConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData_TissueConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData_TissueConfigurationData::InternalSwap(ConfigurationData_TissueConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(enabletissue_, other->enabletissue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData_TissueConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& timestep(const ConfigurationData* msg);
  static const ::pulse::cdm::bind::TimedStabilizationData& timedstabilization(const ConfigurationData* msg);
  static const ::pulse::cdm::bind::DynamicStabilizationData& dynamicstabilization(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData& bloodchemistryconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData& cardiovascularconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData& circuitconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData& constantsconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData& drugsconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData& ecgconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData& energyconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData& environmentconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData& gastrointestinalconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData& nervousconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData& renalconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData& respiratoryconfiguration(const ConfigurationData* msg);
  static const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData& tissueconfiguration(const ConfigurationData* msg);
  static const ::pulse::cdm::bind::OverridesData& initialoverrides(const ConfigurationData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
ConfigurationData::_Internal::timestep(const ConfigurationData* msg) {
  return *msg->timestep_;
}
const ::pulse::cdm::bind::TimedStabilizationData&
ConfigurationData::_Internal::timedstabilization(const ConfigurationData* msg) {
  return *msg->StabilizationCriteria_.timedstabilization_;
}
const ::pulse::cdm::bind::DynamicStabilizationData&
ConfigurationData::_Internal::dynamicstabilization(const ConfigurationData* msg) {
  return *msg->StabilizationCriteria_.dynamicstabilization_;
}
const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData&
ConfigurationData::_Internal::bloodchemistryconfiguration(const ConfigurationData* msg) {
  return *msg->bloodchemistryconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData&
ConfigurationData::_Internal::cardiovascularconfiguration(const ConfigurationData* msg) {
  return *msg->cardiovascularconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData&
ConfigurationData::_Internal::circuitconfiguration(const ConfigurationData* msg) {
  return *msg->circuitconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData&
ConfigurationData::_Internal::constantsconfiguration(const ConfigurationData* msg) {
  return *msg->constantsconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData&
ConfigurationData::_Internal::drugsconfiguration(const ConfigurationData* msg) {
  return *msg->drugsconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData&
ConfigurationData::_Internal::ecgconfiguration(const ConfigurationData* msg) {
  return *msg->ecgconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData&
ConfigurationData::_Internal::energyconfiguration(const ConfigurationData* msg) {
  return *msg->energyconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData&
ConfigurationData::_Internal::environmentconfiguration(const ConfigurationData* msg) {
  return *msg->environmentconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData&
ConfigurationData::_Internal::gastrointestinalconfiguration(const ConfigurationData* msg) {
  return *msg->gastrointestinalconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData&
ConfigurationData::_Internal::nervousconfiguration(const ConfigurationData* msg) {
  return *msg->nervousconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData&
ConfigurationData::_Internal::renalconfiguration(const ConfigurationData* msg) {
  return *msg->renalconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData&
ConfigurationData::_Internal::respiratoryconfiguration(const ConfigurationData* msg) {
  return *msg->respiratoryconfiguration_;
}
const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData&
ConfigurationData::_Internal::tissueconfiguration(const ConfigurationData* msg) {
  return *msg->tissueconfiguration_;
}
const ::pulse::cdm::bind::OverridesData&
ConfigurationData::_Internal::initialoverrides(const ConfigurationData* msg) {
  return *msg->initialoverrides_;
}
void ConfigurationData::clear_timestep() {
  if (GetArena() == nullptr && timestep_ != nullptr) {
    delete timestep_;
  }
  timestep_ = nullptr;
}
void ConfigurationData::set_allocated_timedstabilization(::pulse::cdm::bind::TimedStabilizationData* timedstabilization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_StabilizationCriteria();
  if (timedstabilization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timedstabilization)->GetArena();
    if (message_arena != submessage_arena) {
      timedstabilization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timedstabilization, submessage_arena);
    }
    set_has_timedstabilization();
    StabilizationCriteria_.timedstabilization_ = timedstabilization;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.TimedStabilization)
}
void ConfigurationData::clear_timedstabilization() {
  if (_internal_has_timedstabilization()) {
    if (GetArena() == nullptr) {
      delete StabilizationCriteria_.timedstabilization_;
    }
    clear_has_StabilizationCriteria();
  }
}
void ConfigurationData::set_allocated_dynamicstabilization(::pulse::cdm::bind::DynamicStabilizationData* dynamicstabilization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_StabilizationCriteria();
  if (dynamicstabilization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamicstabilization)->GetArena();
    if (message_arena != submessage_arena) {
      dynamicstabilization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamicstabilization, submessage_arena);
    }
    set_has_dynamicstabilization();
    StabilizationCriteria_.dynamicstabilization_ = dynamicstabilization;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
}
void ConfigurationData::clear_dynamicstabilization() {
  if (_internal_has_dynamicstabilization()) {
    if (GetArena() == nullptr) {
      delete StabilizationCriteria_.dynamicstabilization_;
    }
    clear_has_StabilizationCriteria();
  }
}
void ConfigurationData::clear_initialoverrides() {
  if (GetArena() == nullptr && initialoverrides_ != nullptr) {
    delete initialoverrides_;
  }
  initialoverrides_ = nullptr;
}
ConfigurationData::ConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ConfigurationData)
}
ConfigurationData::ConfigurationData(const ConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestep()) {
    timestep_ = new ::pulse::cdm::bind::ScalarTimeData(*from.timestep_);
  } else {
    timestep_ = nullptr;
  }
  if (from._internal_has_bloodchemistryconfiguration()) {
    bloodchemistryconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData(*from.bloodchemistryconfiguration_);
  } else {
    bloodchemistryconfiguration_ = nullptr;
  }
  if (from._internal_has_cardiovascularconfiguration()) {
    cardiovascularconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData(*from.cardiovascularconfiguration_);
  } else {
    cardiovascularconfiguration_ = nullptr;
  }
  if (from._internal_has_circuitconfiguration()) {
    circuitconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData(*from.circuitconfiguration_);
  } else {
    circuitconfiguration_ = nullptr;
  }
  if (from._internal_has_constantsconfiguration()) {
    constantsconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData(*from.constantsconfiguration_);
  } else {
    constantsconfiguration_ = nullptr;
  }
  if (from._internal_has_drugsconfiguration()) {
    drugsconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData(*from.drugsconfiguration_);
  } else {
    drugsconfiguration_ = nullptr;
  }
  if (from._internal_has_ecgconfiguration()) {
    ecgconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData(*from.ecgconfiguration_);
  } else {
    ecgconfiguration_ = nullptr;
  }
  if (from._internal_has_energyconfiguration()) {
    energyconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData(*from.energyconfiguration_);
  } else {
    energyconfiguration_ = nullptr;
  }
  if (from._internal_has_environmentconfiguration()) {
    environmentconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData(*from.environmentconfiguration_);
  } else {
    environmentconfiguration_ = nullptr;
  }
  if (from._internal_has_gastrointestinalconfiguration()) {
    gastrointestinalconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData(*from.gastrointestinalconfiguration_);
  } else {
    gastrointestinalconfiguration_ = nullptr;
  }
  if (from._internal_has_nervousconfiguration()) {
    nervousconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData(*from.nervousconfiguration_);
  } else {
    nervousconfiguration_ = nullptr;
  }
  if (from._internal_has_renalconfiguration()) {
    renalconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData(*from.renalconfiguration_);
  } else {
    renalconfiguration_ = nullptr;
  }
  if (from._internal_has_respiratoryconfiguration()) {
    respiratoryconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData(*from.respiratoryconfiguration_);
  } else {
    respiratoryconfiguration_ = nullptr;
  }
  if (from._internal_has_tissueconfiguration()) {
    tissueconfiguration_ = new ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData(*from.tissueconfiguration_);
  } else {
    tissueconfiguration_ = nullptr;
  }
  if (from._internal_has_initialoverrides()) {
    initialoverrides_ = new ::pulse::cdm::bind::OverridesData(*from.initialoverrides_);
  } else {
    initialoverrides_ = nullptr;
  }
  ::memcpy(&allowdynamictimestep_, &from.allowdynamictimestep_,
    static_cast<size_t>(reinterpret_cast<char*>(&writepatientbaselinefile_) -
    reinterpret_cast<char*>(&allowdynamictimestep_)) + sizeof(writepatientbaselinefile_));
  clear_has_StabilizationCriteria();
  switch (from.StabilizationCriteria_case()) {
    case kStabilizationFileName: {
      _internal_set_stabilizationfilename(from._internal_stabilizationfilename());
      break;
    }
    case kTimedStabilization: {
      _internal_mutable_timedstabilization()->::pulse::cdm::bind::TimedStabilizationData::MergeFrom(from._internal_timedstabilization());
      break;
    }
    case kDynamicStabilization: {
      _internal_mutable_dynamicstabilization()->::pulse::cdm::bind::DynamicStabilizationData::MergeFrom(from._internal_dynamicstabilization());
      break;
    }
    case STABILIZATIONCRITERIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ConfigurationData)
}

void ConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestep_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&writepatientbaselinefile_) -
      reinterpret_cast<char*>(&timestep_)) + sizeof(writepatientbaselinefile_));
  clear_has_StabilizationCriteria();
}

ConfigurationData::~ConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestep_;
  if (this != internal_default_instance()) delete bloodchemistryconfiguration_;
  if (this != internal_default_instance()) delete cardiovascularconfiguration_;
  if (this != internal_default_instance()) delete circuitconfiguration_;
  if (this != internal_default_instance()) delete constantsconfiguration_;
  if (this != internal_default_instance()) delete drugsconfiguration_;
  if (this != internal_default_instance()) delete ecgconfiguration_;
  if (this != internal_default_instance()) delete energyconfiguration_;
  if (this != internal_default_instance()) delete environmentconfiguration_;
  if (this != internal_default_instance()) delete gastrointestinalconfiguration_;
  if (this != internal_default_instance()) delete nervousconfiguration_;
  if (this != internal_default_instance()) delete renalconfiguration_;
  if (this != internal_default_instance()) delete respiratoryconfiguration_;
  if (this != internal_default_instance()) delete tissueconfiguration_;
  if (this != internal_default_instance()) delete initialoverrides_;
  if (has_StabilizationCriteria()) {
    clear_StabilizationCriteria();
  }
}

void ConfigurationData::ArenaDtor(void* object) {
  ConfigurationData* _this = reinterpret_cast< ConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData& ConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData::clear_StabilizationCriteria() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cpm.bind.ConfigurationData)
  switch (StabilizationCriteria_case()) {
    case kStabilizationFileName: {
      StabilizationCriteria_.stabilizationfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kTimedStabilization: {
      if (GetArena() == nullptr) {
        delete StabilizationCriteria_.timedstabilization_;
      }
      break;
    }
    case kDynamicStabilization: {
      if (GetArena() == nullptr) {
        delete StabilizationCriteria_.dynamicstabilization_;
      }
      break;
    }
    case STABILIZATIONCRITERIA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STABILIZATIONCRITERIA_NOT_SET;
}


void ConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestep_ != nullptr) {
    delete timestep_;
  }
  timestep_ = nullptr;
  if (GetArena() == nullptr && bloodchemistryconfiguration_ != nullptr) {
    delete bloodchemistryconfiguration_;
  }
  bloodchemistryconfiguration_ = nullptr;
  if (GetArena() == nullptr && cardiovascularconfiguration_ != nullptr) {
    delete cardiovascularconfiguration_;
  }
  cardiovascularconfiguration_ = nullptr;
  if (GetArena() == nullptr && circuitconfiguration_ != nullptr) {
    delete circuitconfiguration_;
  }
  circuitconfiguration_ = nullptr;
  if (GetArena() == nullptr && constantsconfiguration_ != nullptr) {
    delete constantsconfiguration_;
  }
  constantsconfiguration_ = nullptr;
  if (GetArena() == nullptr && drugsconfiguration_ != nullptr) {
    delete drugsconfiguration_;
  }
  drugsconfiguration_ = nullptr;
  if (GetArena() == nullptr && ecgconfiguration_ != nullptr) {
    delete ecgconfiguration_;
  }
  ecgconfiguration_ = nullptr;
  if (GetArena() == nullptr && energyconfiguration_ != nullptr) {
    delete energyconfiguration_;
  }
  energyconfiguration_ = nullptr;
  if (GetArena() == nullptr && environmentconfiguration_ != nullptr) {
    delete environmentconfiguration_;
  }
  environmentconfiguration_ = nullptr;
  if (GetArena() == nullptr && gastrointestinalconfiguration_ != nullptr) {
    delete gastrointestinalconfiguration_;
  }
  gastrointestinalconfiguration_ = nullptr;
  if (GetArena() == nullptr && nervousconfiguration_ != nullptr) {
    delete nervousconfiguration_;
  }
  nervousconfiguration_ = nullptr;
  if (GetArena() == nullptr && renalconfiguration_ != nullptr) {
    delete renalconfiguration_;
  }
  renalconfiguration_ = nullptr;
  if (GetArena() == nullptr && respiratoryconfiguration_ != nullptr) {
    delete respiratoryconfiguration_;
  }
  respiratoryconfiguration_ = nullptr;
  if (GetArena() == nullptr && tissueconfiguration_ != nullptr) {
    delete tissueconfiguration_;
  }
  tissueconfiguration_ = nullptr;
  if (GetArena() == nullptr && initialoverrides_ != nullptr) {
    delete initialoverrides_;
  }
  initialoverrides_ = nullptr;
  ::memset(&allowdynamictimestep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writepatientbaselinefile_) -
      reinterpret_cast<char*>(&allowdynamictimestep_)) + sizeof(writepatientbaselinefile_));
  clear_StabilizationCriteria();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarTimeData TimeStep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch AllowDynamicTimeStep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_allowdynamictimestep(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // string StabilizationFileName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_stabilizationfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cpm.bind.ConfigurationData.StabilizationFileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.TimedStabilizationData TimedStabilization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timedstabilization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DynamicStabilizationData DynamicStabilization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamicstabilization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch WritePatientBaselineFile = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_writepatientbaselinefile(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData BloodChemistryConfiguration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodchemistryconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData CardiovascularConfiguration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiovascularconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.CircuitConfigurationData CircuitConfiguration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_circuitconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData ConstantsConfiguration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_constantsconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.DrugsConfigurationData DrugsConfiguration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_drugsconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.ECGConfigurationData ECGConfiguration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecgconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.EnergyConfigurationData EnergyConfiguration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_energyconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData EnvironmentConfiguration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData GastrointestinalConfiguration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gastrointestinalconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.NervousConfigurationData NervousConfiguration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_nervousconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.RenalConfigurationData RenalConfiguration = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData RespiratoryConfiguration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData.TissueConfigurationData TissueConfiguration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissueconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.OverridesData InitialOverrides = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialoverrides(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData TimeStep = 1;
  if (this->has_timestep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestep(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch AllowDynamicTimeStep = 2;
  if (this->allowdynamictimestep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_allowdynamictimestep(), target);
  }

  // string StabilizationFileName = 3;
  if (_internal_has_stabilizationfilename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stabilizationfilename().data(), static_cast<int>(this->_internal_stabilizationfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cpm.bind.ConfigurationData.StabilizationFileName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stabilizationfilename(), target);
  }

  // .pulse.cdm.bind.TimedStabilizationData TimedStabilization = 4;
  if (_internal_has_timedstabilization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timedstabilization(this), target, stream);
  }

  // .pulse.cdm.bind.DynamicStabilizationData DynamicStabilization = 5;
  if (_internal_has_dynamicstabilization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dynamicstabilization(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch WritePatientBaselineFile = 6;
  if (this->writepatientbaselinefile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_writepatientbaselinefile(), target);
  }

  // .pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData BloodChemistryConfiguration = 7;
  if (this->has_bloodchemistryconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bloodchemistryconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData CardiovascularConfiguration = 8;
  if (this->has_cardiovascularconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cardiovascularconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.CircuitConfigurationData CircuitConfiguration = 9;
  if (this->has_circuitconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::circuitconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData ConstantsConfiguration = 10;
  if (this->has_constantsconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::constantsconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.DrugsConfigurationData DrugsConfiguration = 11;
  if (this->has_drugsconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::drugsconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.ECGConfigurationData ECGConfiguration = 12;
  if (this->has_ecgconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::ecgconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.EnergyConfigurationData EnergyConfiguration = 13;
  if (this->has_energyconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::energyconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData EnvironmentConfiguration = 14;
  if (this->has_environmentconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::environmentconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData GastrointestinalConfiguration = 15;
  if (this->has_gastrointestinalconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::gastrointestinalconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.NervousConfigurationData NervousConfiguration = 16;
  if (this->has_nervousconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::nervousconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.RenalConfigurationData RenalConfiguration = 17;
  if (this->has_renalconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::renalconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData RespiratoryConfiguration = 18;
  if (this->has_respiratoryconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::respiratoryconfiguration(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData.TissueConfigurationData TissueConfiguration = 19;
  if (this->has_tissueconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::tissueconfiguration(this), target, stream);
  }

  // .pulse.cdm.bind.OverridesData InitialOverrides = 20;
  if (this->has_initialoverrides()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::initialoverrides(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ConfigurationData)
  return target;
}

size_t ConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTimeData TimeStep = 1;
  if (this->has_timestep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestep_);
  }

  // .pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData BloodChemistryConfiguration = 7;
  if (this->has_bloodchemistryconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodchemistryconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData CardiovascularConfiguration = 8;
  if (this->has_cardiovascularconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiovascularconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.CircuitConfigurationData CircuitConfiguration = 9;
  if (this->has_circuitconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *circuitconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData ConstantsConfiguration = 10;
  if (this->has_constantsconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *constantsconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.DrugsConfigurationData DrugsConfiguration = 11;
  if (this->has_drugsconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drugsconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.ECGConfigurationData ECGConfiguration = 12;
  if (this->has_ecgconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ecgconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.EnergyConfigurationData EnergyConfiguration = 13;
  if (this->has_energyconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energyconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData EnvironmentConfiguration = 14;
  if (this->has_environmentconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmentconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData GastrointestinalConfiguration = 15;
  if (this->has_gastrointestinalconfiguration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gastrointestinalconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.NervousConfigurationData NervousConfiguration = 16;
  if (this->has_nervousconfiguration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nervousconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.RenalConfigurationData RenalConfiguration = 17;
  if (this->has_renalconfiguration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData RespiratoryConfiguration = 18;
  if (this->has_respiratoryconfiguration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratoryconfiguration_);
  }

  // .pulse.cpm.bind.ConfigurationData.TissueConfigurationData TissueConfiguration = 19;
  if (this->has_tissueconfiguration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissueconfiguration_);
  }

  // .pulse.cdm.bind.OverridesData InitialOverrides = 20;
  if (this->has_initialoverrides()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initialoverrides_);
  }

  // .pulse.cdm.bind.eSwitch AllowDynamicTimeStep = 2;
  if (this->allowdynamictimestep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_allowdynamictimestep());
  }

  // .pulse.cdm.bind.eSwitch WritePatientBaselineFile = 6;
  if (this->writepatientbaselinefile() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_writepatientbaselinefile());
  }

  switch (StabilizationCriteria_case()) {
    // string StabilizationFileName = 3;
    case kStabilizationFileName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stabilizationfilename());
      break;
    }
    // .pulse.cdm.bind.TimedStabilizationData TimedStabilization = 4;
    case kTimedStabilization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *StabilizationCriteria_.timedstabilization_);
      break;
    }
    // .pulse.cdm.bind.DynamicStabilizationData DynamicStabilization = 5;
    case kDynamicStabilization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *StabilizationCriteria_.dynamicstabilization_);
      break;
    }
    case STABILIZATIONCRITERIA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData::MergeFrom(const ConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestep()) {
    _internal_mutable_timestep()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_timestep());
  }
  if (from.has_bloodchemistryconfiguration()) {
    _internal_mutable_bloodchemistryconfiguration()->::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData::MergeFrom(from._internal_bloodchemistryconfiguration());
  }
  if (from.has_cardiovascularconfiguration()) {
    _internal_mutable_cardiovascularconfiguration()->::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData::MergeFrom(from._internal_cardiovascularconfiguration());
  }
  if (from.has_circuitconfiguration()) {
    _internal_mutable_circuitconfiguration()->::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData::MergeFrom(from._internal_circuitconfiguration());
  }
  if (from.has_constantsconfiguration()) {
    _internal_mutable_constantsconfiguration()->::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData::MergeFrom(from._internal_constantsconfiguration());
  }
  if (from.has_drugsconfiguration()) {
    _internal_mutable_drugsconfiguration()->::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData::MergeFrom(from._internal_drugsconfiguration());
  }
  if (from.has_ecgconfiguration()) {
    _internal_mutable_ecgconfiguration()->::pulse::cpm::bind::ConfigurationData_ECGConfigurationData::MergeFrom(from._internal_ecgconfiguration());
  }
  if (from.has_energyconfiguration()) {
    _internal_mutable_energyconfiguration()->::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData::MergeFrom(from._internal_energyconfiguration());
  }
  if (from.has_environmentconfiguration()) {
    _internal_mutable_environmentconfiguration()->::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData::MergeFrom(from._internal_environmentconfiguration());
  }
  if (from.has_gastrointestinalconfiguration()) {
    _internal_mutable_gastrointestinalconfiguration()->::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData::MergeFrom(from._internal_gastrointestinalconfiguration());
  }
  if (from.has_nervousconfiguration()) {
    _internal_mutable_nervousconfiguration()->::pulse::cpm::bind::ConfigurationData_NervousConfigurationData::MergeFrom(from._internal_nervousconfiguration());
  }
  if (from.has_renalconfiguration()) {
    _internal_mutable_renalconfiguration()->::pulse::cpm::bind::ConfigurationData_RenalConfigurationData::MergeFrom(from._internal_renalconfiguration());
  }
  if (from.has_respiratoryconfiguration()) {
    _internal_mutable_respiratoryconfiguration()->::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData::MergeFrom(from._internal_respiratoryconfiguration());
  }
  if (from.has_tissueconfiguration()) {
    _internal_mutable_tissueconfiguration()->::pulse::cpm::bind::ConfigurationData_TissueConfigurationData::MergeFrom(from._internal_tissueconfiguration());
  }
  if (from.has_initialoverrides()) {
    _internal_mutable_initialoverrides()->::pulse::cdm::bind::OverridesData::MergeFrom(from._internal_initialoverrides());
  }
  if (from.allowdynamictimestep() != 0) {
    _internal_set_allowdynamictimestep(from._internal_allowdynamictimestep());
  }
  if (from.writepatientbaselinefile() != 0) {
    _internal_set_writepatientbaselinefile(from._internal_writepatientbaselinefile());
  }
  switch (from.StabilizationCriteria_case()) {
    case kStabilizationFileName: {
      _internal_set_stabilizationfilename(from._internal_stabilizationfilename());
      break;
    }
    case kTimedStabilization: {
      _internal_mutable_timedstabilization()->::pulse::cdm::bind::TimedStabilizationData::MergeFrom(from._internal_timedstabilization());
      break;
    }
    case kDynamicStabilization: {
      _internal_mutable_dynamicstabilization()->::pulse::cdm::bind::DynamicStabilizationData::MergeFrom(from._internal_dynamicstabilization());
      break;
    }
    case STABILIZATIONCRITERIA_NOT_SET: {
      break;
    }
  }
}

void ConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData::CopyFrom(const ConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData::InternalSwap(ConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData, writepatientbaselinefile_)
      + sizeof(ConfigurationData::writepatientbaselinefile_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData, timestep_)>(
          reinterpret_cast<char*>(&timestep_),
          reinterpret_cast<char*>(&other->timestep_));
  swap(StabilizationCriteria_, other->StabilizationCriteria_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ConfigurationData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ConfigurationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
