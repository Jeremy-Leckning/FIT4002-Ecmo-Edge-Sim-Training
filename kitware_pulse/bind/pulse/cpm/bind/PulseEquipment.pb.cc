// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseEquipment.proto

#include "pulse/cpm/bind/PulseEquipment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fInhaler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InhalerData_pulse_2fcdm_2fbind_2fInhaler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class AnesthesiaMachineDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnesthesiaMachineData> _instance;
} _AnesthesiaMachineData_default_instance_;
class ElectroCardioGramDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectroCardioGramData> _instance;
} _ElectroCardioGramData_default_instance_;
class InhalerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InhalerData> _instance;
} _InhalerData_default_instance_;
class MechanicalVentilatorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MechanicalVentilatorData> _instance;
} _MechanicalVentilatorData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_AnesthesiaMachineData_default_instance_;
    new (ptr) ::pulse::cpm::bind::AnesthesiaMachineData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_AnesthesiaMachineData_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.base,}};

static void InitDefaultsscc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ElectroCardioGramData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ElectroCardioGramData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,
      &scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,}};

static void InitDefaultsscc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_InhalerData_default_instance_;
    new (ptr) ::pulse::cpm::bind::InhalerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_InhalerData_pulse_2fcdm_2fbind_2fInhaler_2eproto.base,}};

static void InitDefaultsscc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_MechanicalVentilatorData_default_instance_;
    new (ptr) ::pulse::cpm::bind::MechanicalVentilatorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto}, {
      &scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, inhaling_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, currentbreathingcycletime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, inspirationtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, oxygeninletvolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::AnesthesiaMachineData, totalbreathingcycletime_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ElectroCardioGramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ElectroCardioGramData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ElectroCardioGramData, heartrythmtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ElectroCardioGramData, heartrythmperiod_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ElectroCardioGramData, waveforms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::InhalerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::InhalerData, common_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, currentbreathstate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, currentinspiratoryvolume_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, currentperiodtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, driverpressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::MechanicalVentilatorData, driverflow_l_per_s_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::AnesthesiaMachineData)},
  { 11, -1, sizeof(::pulse::cpm::bind::ElectroCardioGramData)},
  { 20, -1, sizeof(::pulse::cpm::bind::InhalerData)},
  { 26, -1, sizeof(::pulse::cpm::bind::MechanicalVentilatorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_AnesthesiaMachineData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ElectroCardioGramData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_InhalerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_MechanicalVentilatorData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#pulse/cpm/bind/PulseEquipment.proto\022\016p"
  "ulse.cpm.bind\032&pulse/cdm/bind/Anesthesia"
  "Machine.proto\032&pulse/cdm/bind/ElectroCar"
  "dioGram.proto\032\034pulse/cdm/bind/Inhaler.pr"
  "oto\032)pulse/cdm/bind/MechanicalVentilator"
  ".proto\032\037pulse/cdm/bind/Physiology.proto\""
  "\346\001\n\025AnesthesiaMachineData\0225\n\006Common\030\001 \001("
  "\0132%.pulse.cdm.bind.AnesthesiaMachineData"
  "\022\020\n\010Inhaling\030\002 \001(\010\022#\n\033CurrentBreathingCy"
  "cleTime_s\030\003 \001(\001\022\031\n\021InspirationTime_s\030\004 \001"
  "(\001\022!\n\031OxygenInletVolumeFraction\030\005 \001(\001\022!\n"
  "\031TotalBreathingCycleTime_s\030\006 \001(\001\"\312\001\n\025Ele"
  "ctroCardioGramData\0225\n\006Common\030\001 \001(\0132%.pul"
  "se.cdm.bind.ElectroCardioGramData\022\030\n\020Hea"
  "rtRythmTime_s\030\002 \001(\001\022\032\n\022HeartRythmPeriod_"
  "s\030\003 \001(\001\022D\n\tWaveforms\030\004 \001(\01321.pulse.cdm.b"
  "ind.ElectroCardioGramWaveformListData\":\n"
  "\013InhalerData\022+\n\006Common\030\001 \001(\0132\033.pulse.cdm"
  ".bind.InhalerData\"\211\002\n\030MechanicalVentilat"
  "orData\0228\n\006Common\030\001 \001(\0132(.pulse.cdm.bind."
  "MechanicalVentilatorData\0228\n\022CurrentBreat"
  "hState\030\002 \001(\0162\034.pulse.cdm.bind.eBreathSta"
  "te\022\"\n\032CurrentInspiratoryVolume_L\030\003 \001(\001\022\033"
  "\n\023CurrentPeriodTime_s\030\004 \001(\001\022\034\n\024DriverPre"
  "ssure_cmH2O\030\005 \001(\001\022\032\n\022DriverFlow_L_Per_s\030"
  "\006 \001(\001B/\n\032com.kitware.pulse.cpm.bindH\001\252\002\016"
  "pulse.cpm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_deps[5] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fInhaler_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_sccs[4] = {
  &scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
  &scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
  &scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
  &scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto, "pulse/cpm/bind/PulseEquipment.proto", 1062,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto, 4, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class AnesthesiaMachineData::_Internal {
 public:
  static const ::pulse::cdm::bind::AnesthesiaMachineData& common(const AnesthesiaMachineData* msg);
};

const ::pulse::cdm::bind::AnesthesiaMachineData&
AnesthesiaMachineData::_Internal::common(const AnesthesiaMachineData* msg) {
  return *msg->common_;
}
void AnesthesiaMachineData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
AnesthesiaMachineData::AnesthesiaMachineData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.AnesthesiaMachineData)
}
AnesthesiaMachineData::AnesthesiaMachineData(const AnesthesiaMachineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::AnesthesiaMachineData(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&currentbreathingcycletime_s_, &from.currentbreathingcycletime_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&inhaling_) -
    reinterpret_cast<char*>(&currentbreathingcycletime_s_)) + sizeof(inhaling_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.AnesthesiaMachineData)
}

void AnesthesiaMachineData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inhaling_) -
      reinterpret_cast<char*>(&common_)) + sizeof(inhaling_));
}

AnesthesiaMachineData::~AnesthesiaMachineData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.AnesthesiaMachineData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnesthesiaMachineData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void AnesthesiaMachineData::ArenaDtor(void* object) {
  AnesthesiaMachineData* _this = reinterpret_cast< AnesthesiaMachineData* >(object);
  (void)_this;
}
void AnesthesiaMachineData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnesthesiaMachineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnesthesiaMachineData& AnesthesiaMachineData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnesthesiaMachineData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void AnesthesiaMachineData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&currentbreathingcycletime_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inhaling_) -
      reinterpret_cast<char*>(&currentbreathingcycletime_s_)) + sizeof(inhaling_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnesthesiaMachineData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Inhaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inhaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double CurrentBreathingCycleTime_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          currentbreathingcycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double InspirationTime_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          inspirationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OxygenInletVolumeFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          oxygeninletvolumefraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalBreathingCycleTime_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          totalbreathingcycletime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnesthesiaMachineData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.AnesthesiaMachineData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // bool Inhaling = 2;
  if (this->inhaling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_inhaling(), target);
  }

  // double CurrentBreathingCycleTime_s = 3;
  if (!(this->currentbreathingcycletime_s() <= 0 && this->currentbreathingcycletime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_currentbreathingcycletime_s(), target);
  }

  // double InspirationTime_s = 4;
  if (!(this->inspirationtime_s() <= 0 && this->inspirationtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_inspirationtime_s(), target);
  }

  // double OxygenInletVolumeFraction = 5;
  if (!(this->oxygeninletvolumefraction() <= 0 && this->oxygeninletvolumefraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_oxygeninletvolumefraction(), target);
  }

  // double TotalBreathingCycleTime_s = 6;
  if (!(this->totalbreathingcycletime_s() <= 0 && this->totalbreathingcycletime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_totalbreathingcycletime_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.AnesthesiaMachineData)
  return target;
}

size_t AnesthesiaMachineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.AnesthesiaMachineData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.AnesthesiaMachineData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double CurrentBreathingCycleTime_s = 3;
  if (!(this->currentbreathingcycletime_s() <= 0 && this->currentbreathingcycletime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double InspirationTime_s = 4;
  if (!(this->inspirationtime_s() <= 0 && this->inspirationtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double OxygenInletVolumeFraction = 5;
  if (!(this->oxygeninletvolumefraction() <= 0 && this->oxygeninletvolumefraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double TotalBreathingCycleTime_s = 6;
  if (!(this->totalbreathingcycletime_s() <= 0 && this->totalbreathingcycletime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // bool Inhaling = 2;
  if (this->inhaling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnesthesiaMachineData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnesthesiaMachineData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnesthesiaMachineData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.AnesthesiaMachineData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.AnesthesiaMachineData)
    MergeFrom(*source);
  }
}

void AnesthesiaMachineData::MergeFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.AnesthesiaMachineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::AnesthesiaMachineData::MergeFrom(from._internal_common());
  }
  if (!(from.currentbreathingcycletime_s() <= 0 && from.currentbreathingcycletime_s() >= 0)) {
    _internal_set_currentbreathingcycletime_s(from._internal_currentbreathingcycletime_s());
  }
  if (!(from.inspirationtime_s() <= 0 && from.inspirationtime_s() >= 0)) {
    _internal_set_inspirationtime_s(from._internal_inspirationtime_s());
  }
  if (!(from.oxygeninletvolumefraction() <= 0 && from.oxygeninletvolumefraction() >= 0)) {
    _internal_set_oxygeninletvolumefraction(from._internal_oxygeninletvolumefraction());
  }
  if (!(from.totalbreathingcycletime_s() <= 0 && from.totalbreathingcycletime_s() >= 0)) {
    _internal_set_totalbreathingcycletime_s(from._internal_totalbreathingcycletime_s());
  }
  if (from.inhaling() != 0) {
    _internal_set_inhaling(from._internal_inhaling());
  }
}

void AnesthesiaMachineData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnesthesiaMachineData::CopyFrom(const AnesthesiaMachineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.AnesthesiaMachineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnesthesiaMachineData::IsInitialized() const {
  return true;
}

void AnesthesiaMachineData::InternalSwap(AnesthesiaMachineData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnesthesiaMachineData, inhaling_)
      + sizeof(AnesthesiaMachineData::inhaling_)
      - PROTOBUF_FIELD_OFFSET(AnesthesiaMachineData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnesthesiaMachineData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectroCardioGramData::_Internal {
 public:
  static const ::pulse::cdm::bind::ElectroCardioGramData& common(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& waveforms(const ElectroCardioGramData* msg);
};

const ::pulse::cdm::bind::ElectroCardioGramData&
ElectroCardioGramData::_Internal::common(const ElectroCardioGramData* msg) {
  return *msg->common_;
}
const ::pulse::cdm::bind::ElectroCardioGramWaveformListData&
ElectroCardioGramData::_Internal::waveforms(const ElectroCardioGramData* msg) {
  return *msg->waveforms_;
}
void ElectroCardioGramData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
void ElectroCardioGramData::clear_waveforms() {
  if (GetArena() == nullptr && waveforms_ != nullptr) {
    delete waveforms_;
  }
  waveforms_ = nullptr;
}
ElectroCardioGramData::ElectroCardioGramData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ElectroCardioGramData)
}
ElectroCardioGramData::ElectroCardioGramData(const ElectroCardioGramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::ElectroCardioGramData(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_waveforms()) {
    waveforms_ = new ::pulse::cdm::bind::ElectroCardioGramWaveformListData(*from.waveforms_);
  } else {
    waveforms_ = nullptr;
  }
  ::memcpy(&heartrythmtime_s_, &from.heartrythmtime_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartrythmperiod_s_) -
    reinterpret_cast<char*>(&heartrythmtime_s_)) + sizeof(heartrythmperiod_s_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ElectroCardioGramData)
}

void ElectroCardioGramData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heartrythmperiod_s_) -
      reinterpret_cast<char*>(&common_)) + sizeof(heartrythmperiod_s_));
}

ElectroCardioGramData::~ElectroCardioGramData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ElectroCardioGramData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectroCardioGramData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete waveforms_;
}

void ElectroCardioGramData::ArenaDtor(void* object) {
  ElectroCardioGramData* _this = reinterpret_cast< ElectroCardioGramData* >(object);
  (void)_this;
}
void ElectroCardioGramData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectroCardioGramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectroCardioGramData& ElectroCardioGramData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectroCardioGramData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void ElectroCardioGramData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && waveforms_ != nullptr) {
    delete waveforms_;
  }
  waveforms_ = nullptr;
  ::memset(&heartrythmtime_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartrythmperiod_s_) -
      reinterpret_cast<char*>(&heartrythmtime_s_)) + sizeof(heartrythmperiod_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectroCardioGramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double HeartRythmTime_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          heartrythmtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HeartRythmPeriod_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          heartrythmperiod_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_waveforms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectroCardioGramData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // double HeartRythmTime_s = 2;
  if (!(this->heartrythmtime_s() <= 0 && this->heartrythmtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_heartrythmtime_s(), target);
  }

  // double HeartRythmPeriod_s = 3;
  if (!(this->heartrythmperiod_s() <= 0 && this->heartrythmperiod_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heartrythmperiod_s(), target);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
  if (this->has_waveforms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::waveforms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ElectroCardioGramData)
  return target;
}

size_t ElectroCardioGramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ElectroCardioGramData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ElectroCardioGramData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Waveforms = 4;
  if (this->has_waveforms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waveforms_);
  }

  // double HeartRythmTime_s = 2;
  if (!(this->heartrythmtime_s() <= 0 && this->heartrythmtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double HeartRythmPeriod_s = 3;
  if (!(this->heartrythmperiod_s() <= 0 && this->heartrythmperiod_s() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectroCardioGramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectroCardioGramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectroCardioGramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ElectroCardioGramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ElectroCardioGramData)
    MergeFrom(*source);
  }
}

void ElectroCardioGramData::MergeFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::ElectroCardioGramData::MergeFrom(from._internal_common());
  }
  if (from.has_waveforms()) {
    _internal_mutable_waveforms()->::pulse::cdm::bind::ElectroCardioGramWaveformListData::MergeFrom(from._internal_waveforms());
  }
  if (!(from.heartrythmtime_s() <= 0 && from.heartrythmtime_s() >= 0)) {
    _internal_set_heartrythmtime_s(from._internal_heartrythmtime_s());
  }
  if (!(from.heartrythmperiod_s() <= 0 && from.heartrythmperiod_s() >= 0)) {
    _internal_set_heartrythmperiod_s(from._internal_heartrythmperiod_s());
  }
}

void ElectroCardioGramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectroCardioGramData::CopyFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectroCardioGramData::IsInitialized() const {
  return true;
}

void ElectroCardioGramData::InternalSwap(ElectroCardioGramData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectroCardioGramData, heartrythmperiod_s_)
      + sizeof(ElectroCardioGramData::heartrythmperiod_s_)
      - PROTOBUF_FIELD_OFFSET(ElectroCardioGramData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectroCardioGramData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InhalerData::_Internal {
 public:
  static const ::pulse::cdm::bind::InhalerData& common(const InhalerData* msg);
};

const ::pulse::cdm::bind::InhalerData&
InhalerData::_Internal::common(const InhalerData* msg) {
  return *msg->common_;
}
void InhalerData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
InhalerData::InhalerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.InhalerData)
}
InhalerData::InhalerData(const InhalerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::InhalerData(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.InhalerData)
}

void InhalerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  common_ = nullptr;
}

InhalerData::~InhalerData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.InhalerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InhalerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void InhalerData::ArenaDtor(void* object) {
  InhalerData* _this = reinterpret_cast< InhalerData* >(object);
  (void)_this;
}
void InhalerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InhalerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InhalerData& InhalerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InhalerData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void InhalerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.InhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InhalerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.InhalerData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InhalerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.InhalerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.InhalerData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.InhalerData)
  return target;
}

size_t InhalerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.InhalerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.InhalerData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InhalerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.InhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  const InhalerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InhalerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.InhalerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.InhalerData)
    MergeFrom(*source);
  }
}

void InhalerData::MergeFrom(const InhalerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.InhalerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::InhalerData::MergeFrom(from._internal_common());
  }
}

void InhalerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.InhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InhalerData::CopyFrom(const InhalerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.InhalerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InhalerData::IsInitialized() const {
  return true;
}

void InhalerData::InternalSwap(InhalerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InhalerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MechanicalVentilatorData::_Internal {
 public:
  static const ::pulse::cdm::bind::MechanicalVentilatorData& common(const MechanicalVentilatorData* msg);
};

const ::pulse::cdm::bind::MechanicalVentilatorData&
MechanicalVentilatorData::_Internal::common(const MechanicalVentilatorData* msg) {
  return *msg->common_;
}
void MechanicalVentilatorData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
MechanicalVentilatorData::MechanicalVentilatorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.MechanicalVentilatorData)
}
MechanicalVentilatorData::MechanicalVentilatorData(const MechanicalVentilatorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::MechanicalVentilatorData(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&currentinspiratoryvolume_l_, &from.currentinspiratoryvolume_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentbreathstate_) -
    reinterpret_cast<char*>(&currentinspiratoryvolume_l_)) + sizeof(currentbreathstate_));
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.MechanicalVentilatorData)
}

void MechanicalVentilatorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&currentbreathstate_) -
      reinterpret_cast<char*>(&common_)) + sizeof(currentbreathstate_));
}

MechanicalVentilatorData::~MechanicalVentilatorData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.MechanicalVentilatorData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MechanicalVentilatorData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void MechanicalVentilatorData::ArenaDtor(void* object) {
  MechanicalVentilatorData* _this = reinterpret_cast< MechanicalVentilatorData* >(object);
  (void)_this;
}
void MechanicalVentilatorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MechanicalVentilatorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MechanicalVentilatorData& MechanicalVentilatorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MechanicalVentilatorData_pulse_2fcpm_2fbind_2fPulseEquipment_2eproto.base);
  return *internal_default_instance();
}


void MechanicalVentilatorData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.MechanicalVentilatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&currentinspiratoryvolume_l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentbreathstate_) -
      reinterpret_cast<char*>(&currentinspiratoryvolume_l_)) + sizeof(currentbreathstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MechanicalVentilatorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.MechanicalVentilatorData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eBreathState CurrentBreathState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currentbreathstate(static_cast<::pulse::cdm::bind::eBreathState>(val));
        } else goto handle_unusual;
        continue;
      // double CurrentInspiratoryVolume_L = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          currentinspiratoryvolume_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CurrentPeriodTime_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          currentperiodtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DriverPressure_cmH2O = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          driverpressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DriverFlow_L_Per_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          driverflow_l_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MechanicalVentilatorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.MechanicalVentilatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.MechanicalVentilatorData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .pulse.cdm.bind.eBreathState CurrentBreathState = 2;
  if (this->currentbreathstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_currentbreathstate(), target);
  }

  // double CurrentInspiratoryVolume_L = 3;
  if (!(this->currentinspiratoryvolume_l() <= 0 && this->currentinspiratoryvolume_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_currentinspiratoryvolume_l(), target);
  }

  // double CurrentPeriodTime_s = 4;
  if (!(this->currentperiodtime_s() <= 0 && this->currentperiodtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_currentperiodtime_s(), target);
  }

  // double DriverPressure_cmH2O = 5;
  if (!(this->driverpressure_cmh2o() <= 0 && this->driverpressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_driverpressure_cmh2o(), target);
  }

  // double DriverFlow_L_Per_s = 6;
  if (!(this->driverflow_l_per_s() <= 0 && this->driverflow_l_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_driverflow_l_per_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.MechanicalVentilatorData)
  return target;
}

size_t MechanicalVentilatorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.MechanicalVentilatorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.MechanicalVentilatorData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double CurrentInspiratoryVolume_L = 3;
  if (!(this->currentinspiratoryvolume_l() <= 0 && this->currentinspiratoryvolume_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double CurrentPeriodTime_s = 4;
  if (!(this->currentperiodtime_s() <= 0 && this->currentperiodtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double DriverPressure_cmH2O = 5;
  if (!(this->driverpressure_cmh2o() <= 0 && this->driverpressure_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double DriverFlow_L_Per_s = 6;
  if (!(this->driverflow_l_per_s() <= 0 && this->driverflow_l_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // .pulse.cdm.bind.eBreathState CurrentBreathState = 2;
  if (this->currentbreathstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currentbreathstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalVentilatorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.MechanicalVentilatorData)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalVentilatorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MechanicalVentilatorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.MechanicalVentilatorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.MechanicalVentilatorData)
    MergeFrom(*source);
  }
}

void MechanicalVentilatorData::MergeFrom(const MechanicalVentilatorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.MechanicalVentilatorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::MechanicalVentilatorData::MergeFrom(from._internal_common());
  }
  if (!(from.currentinspiratoryvolume_l() <= 0 && from.currentinspiratoryvolume_l() >= 0)) {
    _internal_set_currentinspiratoryvolume_l(from._internal_currentinspiratoryvolume_l());
  }
  if (!(from.currentperiodtime_s() <= 0 && from.currentperiodtime_s() >= 0)) {
    _internal_set_currentperiodtime_s(from._internal_currentperiodtime_s());
  }
  if (!(from.driverpressure_cmh2o() <= 0 && from.driverpressure_cmh2o() >= 0)) {
    _internal_set_driverpressure_cmh2o(from._internal_driverpressure_cmh2o());
  }
  if (!(from.driverflow_l_per_s() <= 0 && from.driverflow_l_per_s() >= 0)) {
    _internal_set_driverflow_l_per_s(from._internal_driverflow_l_per_s());
  }
  if (from.currentbreathstate() != 0) {
    _internal_set_currentbreathstate(from._internal_currentbreathstate());
  }
}

void MechanicalVentilatorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.MechanicalVentilatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalVentilatorData::CopyFrom(const MechanicalVentilatorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.MechanicalVentilatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalVentilatorData::IsInitialized() const {
  return true;
}

void MechanicalVentilatorData::InternalSwap(MechanicalVentilatorData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MechanicalVentilatorData, currentbreathstate_)
      + sizeof(MechanicalVentilatorData::currentbreathstate_)
      - PROTOBUF_FIELD_OFFSET(MechanicalVentilatorData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MechanicalVentilatorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::AnesthesiaMachineData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::AnesthesiaMachineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::AnesthesiaMachineData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ElectroCardioGramData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ElectroCardioGramData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ElectroCardioGramData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::InhalerData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::InhalerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::InhalerData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::MechanicalVentilatorData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::MechanicalVentilatorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::MechanicalVentilatorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
