// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseEnvironment.proto

#include "pulse/cpm/bind/PulseEnvironment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class EnvironmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentData> _instance;
} _EnvironmentData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_EnvironmentData_default_instance_;
    new (ptr) ::pulse::cpm::bind::EnvironmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto}, {
      &scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnvironmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnvironmentData, common_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::EnvironmentData, patientequivalentdiameter_m_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::EnvironmentData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_EnvironmentData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%pulse/cpm/bind/PulseEnvironment.proto\022"
  "\016pulse.cpm.bind\032 pulse/cdm/bind/Environm"
  "ent.proto\"g\n\017EnvironmentData\022/\n\006Common\030\001"
  " \001(\0132\037.pulse.cdm.bind.EnvironmentData\022#\n"
  "\033PatientEquivalentDiameter_m\030\002 \001(\001B/\n\032co"
  "m.kitware.pulse.cpm.bindH\001\252\002\016pulse.cpm.b"
  "indb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_sccs[1] = {
  &scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto, "pulse/cpm/bind/PulseEnvironment.proto", 251,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto, 1, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class EnvironmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentData& common(const EnvironmentData* msg);
};

const ::pulse::cdm::bind::EnvironmentData&
EnvironmentData::_Internal::common(const EnvironmentData* msg) {
  return *msg->common_;
}
void EnvironmentData::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
EnvironmentData::EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.EnvironmentData)
}
EnvironmentData::EnvironmentData(const EnvironmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::pulse::cdm::bind::EnvironmentData(*from.common_);
  } else {
    common_ = nullptr;
  }
  patientequivalentdiameter_m_ = from.patientequivalentdiameter_m_;
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.EnvironmentData)
}

void EnvironmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&common_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&patientequivalentdiameter_m_) -
      reinterpret_cast<char*>(&common_)) + sizeof(patientequivalentdiameter_m_));
}

EnvironmentData::~EnvironmentData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.EnvironmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvironmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
}

void EnvironmentData::ArenaDtor(void* object) {
  EnvironmentData* _this = reinterpret_cast< EnvironmentData* >(object);
  (void)_this;
}
void EnvironmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentData& EnvironmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentData_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.EnvironmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  patientequivalentdiameter_m_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentData Common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double PatientEquivalentDiameter_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          patientequivalentdiameter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.EnvironmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentData Common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // double PatientEquivalentDiameter_m = 2;
  if (!(this->patientequivalentdiameter_m() <= 0 && this->patientequivalentdiameter_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_patientequivalentdiameter_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.EnvironmentData)
  return target;
}

size_t EnvironmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.EnvironmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentData Common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double PatientEquivalentDiameter_m = 2;
  if (!(this->patientequivalentdiameter_m() <= 0 && this->patientequivalentdiameter_m() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.EnvironmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.EnvironmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.EnvironmentData)
    MergeFrom(*source);
  }
}

void EnvironmentData::MergeFrom(const EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.EnvironmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::pulse::cdm::bind::EnvironmentData::MergeFrom(from._internal_common());
  }
  if (!(from.patientequivalentdiameter_m() <= 0 && from.patientequivalentdiameter_m() >= 0)) {
    _internal_set_patientequivalentdiameter_m(from._internal_patientequivalentdiameter_m());
  }
}

void EnvironmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.EnvironmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentData::CopyFrom(const EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.EnvironmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentData::IsInitialized() const {
  return true;
}

void EnvironmentData::InternalSwap(EnvironmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentData, patientequivalentdiameter_m_)
      + sizeof(EnvironmentData::patientequivalentdiameter_m_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentData, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::EnvironmentData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::EnvironmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::EnvironmentData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
