// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/BlackBox.proto

#include "pulse/cdm/bind/BlackBox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class BlackBoxPropertyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxPropertyData> _instance;
} _BlackBoxPropertyData_default_instance_;
class BlackBoxVolumePerTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxVolumePerTimeData> _instance;
} _BlackBoxVolumePerTimeData_default_instance_;
class BlackBoxPressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxPressureData> _instance;
} _BlackBoxPressureData_default_instance_;
class BlackBoxVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxVolumeData> _instance;
} _BlackBoxVolumeData_default_instance_;
class BlackBoxMassPerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxMassPerVolumeData> _instance;
} _BlackBoxMassPerVolumeData_default_instance_;
class BlackBoxElectricCurrentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxElectricCurrentData> _instance;
} _BlackBoxElectricCurrentData_default_instance_;
class BlackBoxElectricPotentialDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxElectricPotentialData> _instance;
} _BlackBoxElectricPotentialData_default_instance_;
class BlackBoxElectricChargeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxElectricChargeData> _instance;
} _BlackBoxElectricChargeData_default_instance_;
class BlackBoxPowerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxPowerData> _instance;
} _BlackBoxPowerData_default_instance_;
class BlackBoxTemperatureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxTemperatureData> _instance;
} _BlackBoxTemperatureData_default_instance_;
class BlackBoxEnergyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxEnergyData> _instance;
} _BlackBoxEnergyData_default_instance_;
class BlackBoxSubstanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxSubstanceData> _instance;
} _BlackBoxSubstanceData_default_instance_;
class GasBlackBoxSubstanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasBlackBoxSubstanceData> _instance;
} _GasBlackBoxSubstanceData_default_instance_;
class LiquidBlackBoxSubstanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidBlackBoxSubstanceData> _instance;
} _LiquidBlackBoxSubstanceData_default_instance_;
class BlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxData> _instance;
} _BlackBoxData_default_instance_;
class FluidBlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FluidBlackBoxData> _instance;
} _FluidBlackBoxData_default_instance_;
class ElectricBlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectricBlackBoxData> _instance;
} _ElectricBlackBoxData_default_instance_;
class ThermalBlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalBlackBoxData> _instance;
} _ThermalBlackBoxData_default_instance_;
class GasBlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasBlackBoxData> _instance;
} _GasBlackBoxData_default_instance_;
class LiquidBlackBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidBlackBoxData> _instance;
} _LiquidBlackBoxData_default_instance_;
class BlackBoxesDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlackBoxesData> _instance;
} _BlackBoxesData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {}};

static void InitDefaultsscc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxElectricChargeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxElectricChargeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxElectricCurrentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxElectricCurrentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxElectricPotentialData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxElectricPotentialData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxEnergyData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxEnergyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxMassPerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxMassPerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxPowerData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxPowerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxPressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxPressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxPropertyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {}};

static void InitDefaultsscc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxSubstanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxSubstanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {}};

static void InitDefaultsscc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxTemperatureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxTemperatureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxVolumePerTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxVolumePerTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BlackBoxesData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BlackBoxesData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectricBlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectricBlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FluidBlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FluidBlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasBlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasBlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasBlackBoxSubstanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasBlackBoxSubstanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidBlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidBlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidBlackBoxSubstanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidBlackBoxSubstanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static void InitDefaultsscc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ThermalBlackBoxData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ThermalBlackBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto}, {
      &scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
      &scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fBlackBox_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fBlackBox_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fBlackBox_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPropertyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPropertyData, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumePerTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumePerTimeData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumePerTimeData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPressureData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPressureData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumeData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxVolumeData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxMassPerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxMassPerVolumeData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxMassPerVolumeData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricCurrentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricCurrentData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricCurrentData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricPotentialData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricPotentialData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricPotentialData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricChargeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricChargeData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxElectricChargeData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPowerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPowerData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxPowerData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxTemperatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxTemperatureData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxTemperatureData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxEnergyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxEnergyData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxEnergyData, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxSubstanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxSubstanceData, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxSubstanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxSubstanceData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxSubstanceData, partialpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxSubstanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxSubstanceData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxSubstanceData, concentration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxData, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, sourceflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, targetflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, sourcepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, targetpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, pressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidBlackBoxData, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, sourcecurrent_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, targetcurrent_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, sourcevoltage_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, targetvoltage_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, voltage_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricBlackBoxData, charge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, sourceheattransferrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, targetheattransferrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, sourcetemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, targettemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, temperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalBlackBoxData, heat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasBlackBoxData, substancequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxData, base_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidBlackBoxData, substancequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxesData, gasbox_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BlackBoxesData, liquidbox_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::BlackBoxPropertyData)},
  { 6, -1, sizeof(::pulse::cdm::bind::BlackBoxVolumePerTimeData)},
  { 13, -1, sizeof(::pulse::cdm::bind::BlackBoxPressureData)},
  { 20, -1, sizeof(::pulse::cdm::bind::BlackBoxVolumeData)},
  { 27, -1, sizeof(::pulse::cdm::bind::BlackBoxMassPerVolumeData)},
  { 34, -1, sizeof(::pulse::cdm::bind::BlackBoxElectricCurrentData)},
  { 41, -1, sizeof(::pulse::cdm::bind::BlackBoxElectricPotentialData)},
  { 48, -1, sizeof(::pulse::cdm::bind::BlackBoxElectricChargeData)},
  { 55, -1, sizeof(::pulse::cdm::bind::BlackBoxPowerData)},
  { 62, -1, sizeof(::pulse::cdm::bind::BlackBoxTemperatureData)},
  { 69, -1, sizeof(::pulse::cdm::bind::BlackBoxEnergyData)},
  { 76, -1, sizeof(::pulse::cdm::bind::BlackBoxSubstanceData)},
  { 82, -1, sizeof(::pulse::cdm::bind::GasBlackBoxSubstanceData)},
  { 89, -1, sizeof(::pulse::cdm::bind::LiquidBlackBoxSubstanceData)},
  { 96, -1, sizeof(::pulse::cdm::bind::BlackBoxData)},
  { 102, -1, sizeof(::pulse::cdm::bind::FluidBlackBoxData)},
  { 114, -1, sizeof(::pulse::cdm::bind::ElectricBlackBoxData)},
  { 126, -1, sizeof(::pulse::cdm::bind::ThermalBlackBoxData)},
  { 138, -1, sizeof(::pulse::cdm::bind::GasBlackBoxData)},
  { 145, -1, sizeof(::pulse::cdm::bind::LiquidBlackBoxData)},
  { 152, -1, sizeof(::pulse::cdm::bind::BlackBoxesData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxVolumePerTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxPressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxMassPerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxElectricCurrentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxElectricPotentialData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxElectricChargeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxPowerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxTemperatureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxEnergyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxSubstanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasBlackBoxSubstanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidBlackBoxSubstanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FluidBlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectricBlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ThermalBlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasBlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidBlackBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BlackBoxesData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fBlackBox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035pulse/cdm/bind/BlackBox.proto\022\016pulse.c"
  "dm.bind\032\037pulse/cdm/bind/Properties.proto"
  "\"~\n\024BlackBoxPropertyData\0228\n\004Type\030\001 \001(\0162*"
  ".pulse.cdm.bind.BlackBoxPropertyData.eTy"
  "pe\",\n\005eType\022\010\n\004None\020\000\022\013\n\007Imposed\020\001\022\014\n\010Pr"
  "ovided\020\002\"\212\001\n\031BlackBoxVolumePerTimeData\0222"
  "\n\004Base\030\001 \001(\0132$.pulse.cdm.bind.BlackBoxPr"
  "opertyData\0229\n\010Property\030\002 \001(\0132\'.pulse.cdm"
  ".bind.ScalarVolumePerTimeData\"\200\001\n\024BlackB"
  "oxPressureData\0222\n\004Base\030\001 \001(\0132$.pulse.cdm"
  ".bind.BlackBoxPropertyData\0224\n\010Property\030\002"
  " \001(\0132\".pulse.cdm.bind.ScalarPressureData"
  "\"|\n\022BlackBoxVolumeData\0222\n\004Base\030\001 \001(\0132$.p"
  "ulse.cdm.bind.BlackBoxPropertyData\0222\n\010Pr"
  "operty\030\002 \001(\0132 .pulse.cdm.bind.ScalarVolu"
  "meData\"\212\001\n\031BlackBoxMassPerVolumeData\0222\n\004"
  "Base\030\001 \001(\0132$.pulse.cdm.bind.BlackBoxProp"
  "ertyData\0229\n\010Property\030\002 \001(\0132\'.pulse.cdm.b"
  "ind.ScalarMassPerVolumeData\"\216\001\n\033BlackBox"
  "ElectricCurrentData\0222\n\004Base\030\001 \001(\0132$.puls"
  "e.cdm.bind.BlackBoxPropertyData\022;\n\010Prope"
  "rty\030\002 \001(\0132).pulse.cdm.bind.ScalarElectri"
  "cCurrentData\"\222\001\n\035BlackBoxElectricPotenti"
  "alData\0222\n\004Base\030\001 \001(\0132$.pulse.cdm.bind.Bl"
  "ackBoxPropertyData\022=\n\010Property\030\002 \001(\0132+.p"
  "ulse.cdm.bind.ScalarElectricPotentialDat"
  "a\"\214\001\n\032BlackBoxElectricChargeData\0222\n\004Base"
  "\030\001 \001(\0132$.pulse.cdm.bind.BlackBoxProperty"
  "Data\022:\n\010Property\030\002 \001(\0132(.pulse.cdm.bind."
  "ScalarElectricChargeData\"z\n\021BlackBoxPowe"
  "rData\0222\n\004Base\030\001 \001(\0132$.pulse.cdm.bind.Bla"
  "ckBoxPropertyData\0221\n\010Property\030\002 \001(\0132\037.pu"
  "lse.cdm.bind.ScalarPowerData\"\206\001\n\027BlackBo"
  "xTemperatureData\0222\n\004Base\030\001 \001(\0132$.pulse.c"
  "dm.bind.BlackBoxPropertyData\0227\n\010Property"
  "\030\002 \001(\0132%.pulse.cdm.bind.ScalarTemperatur"
  "eData\"|\n\022BlackBoxEnergyData\0222\n\004Base\030\001 \001("
  "\0132$.pulse.cdm.bind.BlackBoxPropertyData\022"
  "2\n\010Property\030\002 \001(\0132 .pulse.cdm.bind.Scala"
  "rEnergyData\"%\n\025BlackBoxSubstanceData\022\014\n\004"
  "Name\030\001 \001(\t\"\216\001\n\030GasBlackBoxSubstanceData\022"
  "3\n\004Base\030\001 \001(\0132%.pulse.cdm.bind.BlackBoxS"
  "ubstanceData\022=\n\017PartialPressure\030\002 \001(\0132$."
  "pulse.cdm.bind.BlackBoxPressureData\"\224\001\n\033"
  "LiquidBlackBoxSubstanceData\0223\n\004Base\030\001 \001("
  "\0132%.pulse.cdm.bind.BlackBoxSubstanceData"
  "\022@\n\rConcentration\030\002 \001(\0132).pulse.cdm.bind"
  ".BlackBoxMassPerVolumeData\"\034\n\014BlackBoxDa"
  "ta\022\014\n\004Name\030\001 \001(\t\"\245\003\n\021FluidBlackBoxData\022*"
  "\n\004Base\030\001 \001(\0132\034.pulse.cdm.bind.BlackBoxDa"
  "ta\022=\n\nSourceFlow\030\002 \001(\0132).pulse.cdm.bind."
  "BlackBoxVolumePerTimeData\022=\n\nTargetFlow\030"
  "\003 \001(\0132).pulse.cdm.bind.BlackBoxVolumePer"
  "TimeData\022<\n\016SourcePressure\030\004 \001(\0132$.pulse"
  ".cdm.bind.BlackBoxPressureData\022<\n\016Target"
  "Pressure\030\005 \001(\0132$.pulse.cdm.bind.BlackBox"
  "PressureData\0226\n\010Pressure\030\006 \001(\0132$.pulse.c"
  "dm.bind.BlackBoxPressureData\0222\n\006Volume\030\007"
  " \001(\0132\".pulse.cdm.bind.BlackBoxVolumeData"
  "\"\322\003\n\024ElectricBlackBoxData\022*\n\004Base\030\001 \001(\0132"
  "\034.pulse.cdm.bind.BlackBoxData\022B\n\rSourceC"
  "urrent\030\002 \001(\0132+.pulse.cdm.bind.BlackBoxEl"
  "ectricCurrentData\022B\n\rTargetCurrent\030\003 \001(\013"
  "2+.pulse.cdm.bind.BlackBoxElectricCurren"
  "tData\022D\n\rSourceVoltage\030\004 \001(\0132-.pulse.cdm"
  ".bind.BlackBoxElectricPotentialData\022D\n\rT"
  "argetVoltage\030\005 \001(\0132-.pulse.cdm.bind.Blac"
  "kBoxElectricPotentialData\022>\n\007Voltage\030\006 \001"
  "(\0132-.pulse.cdm.bind.BlackBoxElectricPote"
  "ntialData\022:\n\006Charge\030\007 \001(\0132*.pulse.cdm.bi"
  "nd.BlackBoxElectricChargeData\"\277\003\n\023Therma"
  "lBlackBoxData\022*\n\004Base\030\001 \001(\0132\034.pulse.cdm."
  "bind.BlackBoxData\022A\n\026SourceHeatTransferR"
  "ate\030\002 \001(\0132!.pulse.cdm.bind.BlackBoxPower"
  "Data\022A\n\026TargetHeatTransferRate\030\003 \001(\0132!.p"
  "ulse.cdm.bind.BlackBoxPowerData\022B\n\021Sourc"
  "eTemperature\030\004 \001(\0132\'.pulse.cdm.bind.Blac"
  "kBoxTemperatureData\022B\n\021TargetTemperature"
  "\030\005 \001(\0132\'.pulse.cdm.bind.BlackBoxTemperat"
  "ureData\022<\n\013Temperature\030\006 \001(\0132\'.pulse.cdm"
  ".bind.BlackBoxTemperatureData\0220\n\004Heat\030\007 "
  "\001(\0132\".pulse.cdm.bind.BlackBoxEnergyData\""
  "\207\001\n\017GasBlackBoxData\022/\n\004Base\030\001 \001(\0132!.puls"
  "e.cdm.bind.FluidBlackBoxData\022C\n\021Substanc"
  "eQuantity\030\002 \003(\0132(.pulse.cdm.bind.GasBlac"
  "kBoxSubstanceData\"\215\001\n\022LiquidBlackBoxData"
  "\022/\n\004Base\030\001 \001(\0132!.pulse.cdm.bind.FluidBla"
  "ckBoxData\022F\n\021SubstanceQuantity\030\002 \003(\0132+.p"
  "ulse.cdm.bind.LiquidBlackBoxSubstanceDat"
  "a\"x\n\016BlackBoxesData\022/\n\006GasBox\030\001 \003(\0132\037.pu"
  "lse.cdm.bind.GasBlackBoxData\0225\n\tLiquidBo"
  "x\030\002 \003(\0132\".pulse.cdm.bind.LiquidBlackBoxD"
  "ataB/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pu"
  "lse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_sccs[21] = {
  &scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
  &scc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fBlackBox_2eproto, "pulse/cdm/bind/BlackBox.proto", 3740,
  &descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fBlackBox_2eproto, 21, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fBlackBox_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fBlackBox_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fBlackBox_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlackBoxPropertyData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fBlackBox_2eproto[0];
}
bool BlackBoxPropertyData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData::None;
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData::Imposed;
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData::Provided;
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData::eType_MIN;
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData::eType_MAX;
constexpr int BlackBoxPropertyData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class BlackBoxPropertyData::_Internal {
 public:
};

BlackBoxPropertyData::BlackBoxPropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxPropertyData)
}
BlackBoxPropertyData::BlackBoxPropertyData(const BlackBoxPropertyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxPropertyData)
}

void BlackBoxPropertyData::SharedCtor() {
  type_ = 0;
}

BlackBoxPropertyData::~BlackBoxPropertyData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxPropertyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxPropertyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlackBoxPropertyData::ArenaDtor(void* object) {
  BlackBoxPropertyData* _this = reinterpret_cast< BlackBoxPropertyData* >(object);
  (void)_this;
}
void BlackBoxPropertyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxPropertyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxPropertyData& BlackBoxPropertyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxPropertyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxPropertyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxPropertyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxPropertyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData.eType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::BlackBoxPropertyData_eType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxPropertyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxPropertyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData.eType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxPropertyData)
  return target;
}

size_t BlackBoxPropertyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxPropertyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData.eType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxPropertyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxPropertyData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxPropertyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxPropertyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxPropertyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxPropertyData)
    MergeFrom(*source);
  }
}

void BlackBoxPropertyData::MergeFrom(const BlackBoxPropertyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxPropertyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void BlackBoxPropertyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxPropertyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxPropertyData::CopyFrom(const BlackBoxPropertyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxPropertyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxPropertyData::IsInitialized() const {
  return true;
}

void BlackBoxPropertyData::InternalSwap(BlackBoxPropertyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxPropertyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxVolumePerTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxVolumePerTimeData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& property(const BlackBoxVolumePerTimeData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxVolumePerTimeData::_Internal::base(const BlackBoxVolumePerTimeData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
BlackBoxVolumePerTimeData::_Internal::property(const BlackBoxVolumePerTimeData* msg) {
  return *msg->property_;
}
void BlackBoxVolumePerTimeData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxVolumePerTimeData::BlackBoxVolumePerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxVolumePerTimeData)
}
BlackBoxVolumePerTimeData::BlackBoxVolumePerTimeData(const BlackBoxVolumePerTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxVolumePerTimeData)
}

void BlackBoxVolumePerTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxVolumePerTimeData::~BlackBoxVolumePerTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxVolumePerTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxVolumePerTimeData::ArenaDtor(void* object) {
  BlackBoxVolumePerTimeData* _this = reinterpret_cast< BlackBoxVolumePerTimeData* >(object);
  (void)_this;
}
void BlackBoxVolumePerTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxVolumePerTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxVolumePerTimeData& BlackBoxVolumePerTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxVolumePerTimeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxVolumePerTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxVolumePerTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxVolumePerTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  return target;
}

size_t BlackBoxVolumePerTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxVolumePerTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxVolumePerTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxVolumePerTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxVolumePerTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxVolumePerTimeData)
    MergeFrom(*source);
  }
}

void BlackBoxVolumePerTimeData::MergeFrom(const BlackBoxVolumePerTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_property());
  }
}

void BlackBoxVolumePerTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxVolumePerTimeData::CopyFrom(const BlackBoxVolumePerTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxVolumePerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxVolumePerTimeData::IsInitialized() const {
  return true;
}

void BlackBoxVolumePerTimeData::InternalSwap(BlackBoxVolumePerTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxVolumePerTimeData, property_)
      + sizeof(BlackBoxVolumePerTimeData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxVolumePerTimeData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxVolumePerTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxPressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxPressureData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& property(const BlackBoxPressureData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxPressureData::_Internal::base(const BlackBoxPressureData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BlackBoxPressureData::_Internal::property(const BlackBoxPressureData* msg) {
  return *msg->property_;
}
void BlackBoxPressureData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxPressureData::BlackBoxPressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxPressureData)
}
BlackBoxPressureData::BlackBoxPressureData(const BlackBoxPressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarPressureData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxPressureData)
}

void BlackBoxPressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxPressureData::~BlackBoxPressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxPressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxPressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxPressureData::ArenaDtor(void* object) {
  BlackBoxPressureData* _this = reinterpret_cast< BlackBoxPressureData* >(object);
  (void)_this;
}
void BlackBoxPressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxPressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxPressureData& BlackBoxPressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxPressureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxPressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxPressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxPressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxPressureData)
  return target;
}

size_t BlackBoxPressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxPressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarPressureData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxPressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxPressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxPressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxPressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxPressureData)
    MergeFrom(*source);
  }
}

void BlackBoxPressureData::MergeFrom(const BlackBoxPressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_property());
  }
}

void BlackBoxPressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxPressureData::CopyFrom(const BlackBoxPressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxPressureData::IsInitialized() const {
  return true;
}

void BlackBoxPressureData::InternalSwap(BlackBoxPressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxPressureData, property_)
      + sizeof(BlackBoxPressureData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxPressureData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxPressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxVolumeData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& property(const BlackBoxVolumeData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxVolumeData::_Internal::base(const BlackBoxVolumeData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
BlackBoxVolumeData::_Internal::property(const BlackBoxVolumeData* msg) {
  return *msg->property_;
}
void BlackBoxVolumeData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxVolumeData::BlackBoxVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxVolumeData)
}
BlackBoxVolumeData::BlackBoxVolumeData(const BlackBoxVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxVolumeData)
}

void BlackBoxVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxVolumeData::~BlackBoxVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxVolumeData::ArenaDtor(void* object) {
  BlackBoxVolumeData* _this = reinterpret_cast< BlackBoxVolumeData* >(object);
  (void)_this;
}
void BlackBoxVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxVolumeData& BlackBoxVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxVolumeData)
  return target;
}

size_t BlackBoxVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxVolumeData)
    MergeFrom(*source);
  }
}

void BlackBoxVolumeData::MergeFrom(const BlackBoxVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_property());
  }
}

void BlackBoxVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxVolumeData::CopyFrom(const BlackBoxVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxVolumeData::IsInitialized() const {
  return true;
}

void BlackBoxVolumeData::InternalSwap(BlackBoxVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxVolumeData, property_)
      + sizeof(BlackBoxVolumeData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxVolumeData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxMassPerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxMassPerVolumeData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& property(const BlackBoxMassPerVolumeData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxMassPerVolumeData::_Internal::base(const BlackBoxMassPerVolumeData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
BlackBoxMassPerVolumeData::_Internal::property(const BlackBoxMassPerVolumeData* msg) {
  return *msg->property_;
}
void BlackBoxMassPerVolumeData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxMassPerVolumeData::BlackBoxMassPerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxMassPerVolumeData)
}
BlackBoxMassPerVolumeData::BlackBoxMassPerVolumeData(const BlackBoxMassPerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxMassPerVolumeData)
}

void BlackBoxMassPerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxMassPerVolumeData::~BlackBoxMassPerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxMassPerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxMassPerVolumeData::ArenaDtor(void* object) {
  BlackBoxMassPerVolumeData* _this = reinterpret_cast< BlackBoxMassPerVolumeData* >(object);
  (void)_this;
}
void BlackBoxMassPerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxMassPerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxMassPerVolumeData& BlackBoxMassPerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxMassPerVolumeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxMassPerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxMassPerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxMassPerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  return target;
}

size_t BlackBoxMassPerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxMassPerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxMassPerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxMassPerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxMassPerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxMassPerVolumeData)
    MergeFrom(*source);
  }
}

void BlackBoxMassPerVolumeData::MergeFrom(const BlackBoxMassPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_property());
  }
}

void BlackBoxMassPerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxMassPerVolumeData::CopyFrom(const BlackBoxMassPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxMassPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxMassPerVolumeData::IsInitialized() const {
  return true;
}

void BlackBoxMassPerVolumeData::InternalSwap(BlackBoxMassPerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxMassPerVolumeData, property_)
      + sizeof(BlackBoxMassPerVolumeData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxMassPerVolumeData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxMassPerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxElectricCurrentData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxElectricCurrentData* msg);
  static const ::pulse::cdm::bind::ScalarElectricCurrentData& property(const BlackBoxElectricCurrentData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxElectricCurrentData::_Internal::base(const BlackBoxElectricCurrentData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarElectricCurrentData&
BlackBoxElectricCurrentData::_Internal::property(const BlackBoxElectricCurrentData* msg) {
  return *msg->property_;
}
void BlackBoxElectricCurrentData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxElectricCurrentData::BlackBoxElectricCurrentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxElectricCurrentData)
}
BlackBoxElectricCurrentData::BlackBoxElectricCurrentData(const BlackBoxElectricCurrentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarElectricCurrentData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxElectricCurrentData)
}

void BlackBoxElectricCurrentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxElectricCurrentData::~BlackBoxElectricCurrentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxElectricCurrentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxElectricCurrentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxElectricCurrentData::ArenaDtor(void* object) {
  BlackBoxElectricCurrentData* _this = reinterpret_cast< BlackBoxElectricCurrentData* >(object);
  (void)_this;
}
void BlackBoxElectricCurrentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxElectricCurrentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxElectricCurrentData& BlackBoxElectricCurrentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxElectricCurrentData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxElectricCurrentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxElectricCurrentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricCurrentData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxElectricCurrentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxElectricCurrentData)
  return target;
}

size_t BlackBoxElectricCurrentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxElectricCurrentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxElectricCurrentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxElectricCurrentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxElectricCurrentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxElectricCurrentData)
    MergeFrom(*source);
  }
}

void BlackBoxElectricCurrentData::MergeFrom(const BlackBoxElectricCurrentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarElectricCurrentData::MergeFrom(from._internal_property());
  }
}

void BlackBoxElectricCurrentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxElectricCurrentData::CopyFrom(const BlackBoxElectricCurrentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxElectricCurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxElectricCurrentData::IsInitialized() const {
  return true;
}

void BlackBoxElectricCurrentData::InternalSwap(BlackBoxElectricCurrentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxElectricCurrentData, property_)
      + sizeof(BlackBoxElectricCurrentData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxElectricCurrentData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxElectricCurrentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxElectricPotentialData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxElectricPotentialData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& property(const BlackBoxElectricPotentialData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxElectricPotentialData::_Internal::base(const BlackBoxElectricPotentialData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
BlackBoxElectricPotentialData::_Internal::property(const BlackBoxElectricPotentialData* msg) {
  return *msg->property_;
}
void BlackBoxElectricPotentialData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxElectricPotentialData::BlackBoxElectricPotentialData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxElectricPotentialData)
}
BlackBoxElectricPotentialData::BlackBoxElectricPotentialData(const BlackBoxElectricPotentialData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxElectricPotentialData)
}

void BlackBoxElectricPotentialData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxElectricPotentialData::~BlackBoxElectricPotentialData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxElectricPotentialData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxElectricPotentialData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxElectricPotentialData::ArenaDtor(void* object) {
  BlackBoxElectricPotentialData* _this = reinterpret_cast< BlackBoxElectricPotentialData* >(object);
  (void)_this;
}
void BlackBoxElectricPotentialData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxElectricPotentialData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxElectricPotentialData& BlackBoxElectricPotentialData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxElectricPotentialData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxElectricPotentialData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxElectricPotentialData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxElectricPotentialData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxElectricPotentialData)
  return target;
}

size_t BlackBoxElectricPotentialData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxElectricPotentialData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxElectricPotentialData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxElectricPotentialData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxElectricPotentialData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxElectricPotentialData)
    MergeFrom(*source);
  }
}

void BlackBoxElectricPotentialData::MergeFrom(const BlackBoxElectricPotentialData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_property());
  }
}

void BlackBoxElectricPotentialData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxElectricPotentialData::CopyFrom(const BlackBoxElectricPotentialData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxElectricPotentialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxElectricPotentialData::IsInitialized() const {
  return true;
}

void BlackBoxElectricPotentialData::InternalSwap(BlackBoxElectricPotentialData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxElectricPotentialData, property_)
      + sizeof(BlackBoxElectricPotentialData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxElectricPotentialData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxElectricPotentialData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxElectricChargeData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxElectricChargeData* msg);
  static const ::pulse::cdm::bind::ScalarElectricChargeData& property(const BlackBoxElectricChargeData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxElectricChargeData::_Internal::base(const BlackBoxElectricChargeData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarElectricChargeData&
BlackBoxElectricChargeData::_Internal::property(const BlackBoxElectricChargeData* msg) {
  return *msg->property_;
}
void BlackBoxElectricChargeData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxElectricChargeData::BlackBoxElectricChargeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxElectricChargeData)
}
BlackBoxElectricChargeData::BlackBoxElectricChargeData(const BlackBoxElectricChargeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarElectricChargeData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxElectricChargeData)
}

void BlackBoxElectricChargeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxElectricChargeData::~BlackBoxElectricChargeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxElectricChargeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxElectricChargeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxElectricChargeData::ArenaDtor(void* object) {
  BlackBoxElectricChargeData* _this = reinterpret_cast< BlackBoxElectricChargeData* >(object);
  (void)_this;
}
void BlackBoxElectricChargeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxElectricChargeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxElectricChargeData& BlackBoxElectricChargeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxElectricChargeData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxElectricChargeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxElectricChargeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricChargeData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxElectricChargeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricChargeData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxElectricChargeData)
  return target;
}

size_t BlackBoxElectricChargeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarElectricChargeData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxElectricChargeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxElectricChargeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxElectricChargeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxElectricChargeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxElectricChargeData)
    MergeFrom(*source);
  }
}

void BlackBoxElectricChargeData::MergeFrom(const BlackBoxElectricChargeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarElectricChargeData::MergeFrom(from._internal_property());
  }
}

void BlackBoxElectricChargeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxElectricChargeData::CopyFrom(const BlackBoxElectricChargeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxElectricChargeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxElectricChargeData::IsInitialized() const {
  return true;
}

void BlackBoxElectricChargeData::InternalSwap(BlackBoxElectricChargeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxElectricChargeData, property_)
      + sizeof(BlackBoxElectricChargeData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxElectricChargeData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxElectricChargeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxPowerData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxPowerData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& property(const BlackBoxPowerData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxPowerData::_Internal::base(const BlackBoxPowerData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarPowerData&
BlackBoxPowerData::_Internal::property(const BlackBoxPowerData* msg) {
  return *msg->property_;
}
void BlackBoxPowerData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxPowerData::BlackBoxPowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxPowerData)
}
BlackBoxPowerData::BlackBoxPowerData(const BlackBoxPowerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarPowerData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxPowerData)
}

void BlackBoxPowerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxPowerData::~BlackBoxPowerData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxPowerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxPowerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxPowerData::ArenaDtor(void* object) {
  BlackBoxPowerData* _this = reinterpret_cast< BlackBoxPowerData* >(object);
  (void)_this;
}
void BlackBoxPowerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxPowerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxPowerData& BlackBoxPowerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxPowerData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxPowerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxPowerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxPowerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxPowerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxPowerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxPowerData)
  return target;
}

size_t BlackBoxPowerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxPowerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarPowerData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxPowerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxPowerData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxPowerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxPowerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxPowerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxPowerData)
    MergeFrom(*source);
  }
}

void BlackBoxPowerData::MergeFrom(const BlackBoxPowerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxPowerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_property());
  }
}

void BlackBoxPowerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxPowerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxPowerData::CopyFrom(const BlackBoxPowerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxPowerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxPowerData::IsInitialized() const {
  return true;
}

void BlackBoxPowerData::InternalSwap(BlackBoxPowerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxPowerData, property_)
      + sizeof(BlackBoxPowerData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxPowerData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxPowerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxTemperatureData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxTemperatureData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& property(const BlackBoxTemperatureData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxTemperatureData::_Internal::base(const BlackBoxTemperatureData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
BlackBoxTemperatureData::_Internal::property(const BlackBoxTemperatureData* msg) {
  return *msg->property_;
}
void BlackBoxTemperatureData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxTemperatureData::BlackBoxTemperatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxTemperatureData)
}
BlackBoxTemperatureData::BlackBoxTemperatureData(const BlackBoxTemperatureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxTemperatureData)
}

void BlackBoxTemperatureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxTemperatureData::~BlackBoxTemperatureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxTemperatureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxTemperatureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxTemperatureData::ArenaDtor(void* object) {
  BlackBoxTemperatureData* _this = reinterpret_cast< BlackBoxTemperatureData* >(object);
  (void)_this;
}
void BlackBoxTemperatureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxTemperatureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxTemperatureData& BlackBoxTemperatureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxTemperatureData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxTemperatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxTemperatureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxTemperatureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxTemperatureData)
  return target;
}

size_t BlackBoxTemperatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxTemperatureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxTemperatureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxTemperatureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxTemperatureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxTemperatureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxTemperatureData)
    MergeFrom(*source);
  }
}

void BlackBoxTemperatureData::MergeFrom(const BlackBoxTemperatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_property());
  }
}

void BlackBoxTemperatureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxTemperatureData::CopyFrom(const BlackBoxTemperatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxTemperatureData::IsInitialized() const {
  return true;
}

void BlackBoxTemperatureData::InternalSwap(BlackBoxTemperatureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxTemperatureData, property_)
      + sizeof(BlackBoxTemperatureData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxTemperatureData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxTemperatureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxEnergyData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxPropertyData& base(const BlackBoxEnergyData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& property(const BlackBoxEnergyData* msg);
};

const ::pulse::cdm::bind::BlackBoxPropertyData&
BlackBoxEnergyData::_Internal::base(const BlackBoxEnergyData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
BlackBoxEnergyData::_Internal::property(const BlackBoxEnergyData* msg) {
  return *msg->property_;
}
void BlackBoxEnergyData::clear_property() {
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
BlackBoxEnergyData::BlackBoxEnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxEnergyData)
}
BlackBoxEnergyData::BlackBoxEnergyData(const BlackBoxEnergyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxPropertyData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxEnergyData)
}

void BlackBoxEnergyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&base_)) + sizeof(property_));
}

BlackBoxEnergyData::~BlackBoxEnergyData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxEnergyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxEnergyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete property_;
}

void BlackBoxEnergyData::ArenaDtor(void* object) {
  BlackBoxEnergyData* _this = reinterpret_cast< BlackBoxEnergyData* >(object);
  (void)_this;
}
void BlackBoxEnergyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxEnergyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxEnergyData& BlackBoxEnergyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxEnergyData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxEnergyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxEnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxEnergyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData Property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxEnergyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxEnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData Property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxEnergyData)
  return target;
}

size_t BlackBoxEnergyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxEnergyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.ScalarEnergyData Property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxEnergyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxEnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxEnergyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxEnergyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxEnergyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxEnergyData)
    MergeFrom(*source);
  }
}

void BlackBoxEnergyData::MergeFrom(const BlackBoxEnergyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxEnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxPropertyData::MergeFrom(from._internal_base());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_property());
  }
}

void BlackBoxEnergyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxEnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxEnergyData::CopyFrom(const BlackBoxEnergyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxEnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxEnergyData::IsInitialized() const {
  return true;
}

void BlackBoxEnergyData::InternalSwap(BlackBoxEnergyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlackBoxEnergyData, property_)
      + sizeof(BlackBoxEnergyData::property_)
      - PROTOBUF_FIELD_OFFSET(BlackBoxEnergyData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxEnergyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxSubstanceData::_Internal {
 public:
};

BlackBoxSubstanceData::BlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxSubstanceData)
}
BlackBoxSubstanceData::BlackBoxSubstanceData(const BlackBoxSubstanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxSubstanceData)
}

void BlackBoxSubstanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlackBoxSubstanceData::~BlackBoxSubstanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxSubstanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxSubstanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlackBoxSubstanceData::ArenaDtor(void* object) {
  BlackBoxSubstanceData* _this = reinterpret_cast< BlackBoxSubstanceData* >(object);
  (void)_this;
}
void BlackBoxSubstanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxSubstanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxSubstanceData& BlackBoxSubstanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxSubstanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxSubstanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.BlackBoxSubstanceData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxSubstanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.BlackBoxSubstanceData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxSubstanceData)
  return target;
}

size_t BlackBoxSubstanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxSubstanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxSubstanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxSubstanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxSubstanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxSubstanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxSubstanceData)
    MergeFrom(*source);
  }
}

void BlackBoxSubstanceData::MergeFrom(const BlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void BlackBoxSubstanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxSubstanceData::CopyFrom(const BlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxSubstanceData::IsInitialized() const {
  return true;
}

void BlackBoxSubstanceData::InternalSwap(BlackBoxSubstanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxSubstanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasBlackBoxSubstanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxSubstanceData& base(const GasBlackBoxSubstanceData* msg);
  static const ::pulse::cdm::bind::BlackBoxPressureData& partialpressure(const GasBlackBoxSubstanceData* msg);
};

const ::pulse::cdm::bind::BlackBoxSubstanceData&
GasBlackBoxSubstanceData::_Internal::base(const GasBlackBoxSubstanceData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::BlackBoxPressureData&
GasBlackBoxSubstanceData::_Internal::partialpressure(const GasBlackBoxSubstanceData* msg) {
  return *msg->partialpressure_;
}
GasBlackBoxSubstanceData::GasBlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasBlackBoxSubstanceData)
}
GasBlackBoxSubstanceData::GasBlackBoxSubstanceData(const GasBlackBoxSubstanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxSubstanceData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_partialpressure()) {
    partialpressure_ = new ::pulse::cdm::bind::BlackBoxPressureData(*from.partialpressure_);
  } else {
    partialpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasBlackBoxSubstanceData)
}

void GasBlackBoxSubstanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&partialpressure_) -
      reinterpret_cast<char*>(&base_)) + sizeof(partialpressure_));
}

GasBlackBoxSubstanceData::~GasBlackBoxSubstanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasBlackBoxSubstanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasBlackBoxSubstanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete partialpressure_;
}

void GasBlackBoxSubstanceData::ArenaDtor(void* object) {
  GasBlackBoxSubstanceData* _this = reinterpret_cast< GasBlackBoxSubstanceData* >(object);
  (void)_this;
}
void GasBlackBoxSubstanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasBlackBoxSubstanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasBlackBoxSubstanceData& GasBlackBoxSubstanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void GasBlackBoxSubstanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasBlackBoxSubstanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPressureData PartialPressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasBlackBoxSubstanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPressureData PartialPressure = 2;
  if (this->has_partialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partialpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasBlackBoxSubstanceData)
  return target;
}

size_t GasBlackBoxSubstanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.BlackBoxPressureData PartialPressure = 2;
  if (this->has_partialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partialpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasBlackBoxSubstanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasBlackBoxSubstanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasBlackBoxSubstanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasBlackBoxSubstanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasBlackBoxSubstanceData)
    MergeFrom(*source);
  }
}

void GasBlackBoxSubstanceData::MergeFrom(const GasBlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxSubstanceData::MergeFrom(from._internal_base());
  }
  if (from.has_partialpressure()) {
    _internal_mutable_partialpressure()->::pulse::cdm::bind::BlackBoxPressureData::MergeFrom(from._internal_partialpressure());
  }
}

void GasBlackBoxSubstanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasBlackBoxSubstanceData::CopyFrom(const GasBlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasBlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasBlackBoxSubstanceData::IsInitialized() const {
  return true;
}

void GasBlackBoxSubstanceData::InternalSwap(GasBlackBoxSubstanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GasBlackBoxSubstanceData, partialpressure_)
      + sizeof(GasBlackBoxSubstanceData::partialpressure_)
      - PROTOBUF_FIELD_OFFSET(GasBlackBoxSubstanceData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GasBlackBoxSubstanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidBlackBoxSubstanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxSubstanceData& base(const LiquidBlackBoxSubstanceData* msg);
  static const ::pulse::cdm::bind::BlackBoxMassPerVolumeData& concentration(const LiquidBlackBoxSubstanceData* msg);
};

const ::pulse::cdm::bind::BlackBoxSubstanceData&
LiquidBlackBoxSubstanceData::_Internal::base(const LiquidBlackBoxSubstanceData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::BlackBoxMassPerVolumeData&
LiquidBlackBoxSubstanceData::_Internal::concentration(const LiquidBlackBoxSubstanceData* msg) {
  return *msg->concentration_;
}
LiquidBlackBoxSubstanceData::LiquidBlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
}
LiquidBlackBoxSubstanceData::LiquidBlackBoxSubstanceData(const LiquidBlackBoxSubstanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxSubstanceData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_concentration()) {
    concentration_ = new ::pulse::cdm::bind::BlackBoxMassPerVolumeData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
}

void LiquidBlackBoxSubstanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&concentration_) -
      reinterpret_cast<char*>(&base_)) + sizeof(concentration_));
}

LiquidBlackBoxSubstanceData::~LiquidBlackBoxSubstanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidBlackBoxSubstanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete concentration_;
}

void LiquidBlackBoxSubstanceData::ArenaDtor(void* object) {
  LiquidBlackBoxSubstanceData* _this = reinterpret_cast< LiquidBlackBoxSubstanceData* >(object);
  (void)_this;
}
void LiquidBlackBoxSubstanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidBlackBoxSubstanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidBlackBoxSubstanceData& LiquidBlackBoxSubstanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidBlackBoxSubstanceData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void LiquidBlackBoxSubstanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidBlackBoxSubstanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxMassPerVolumeData Concentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidBlackBoxSubstanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concentration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  return target;
}

size_t LiquidBlackBoxSubstanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.BlackBoxMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidBlackBoxSubstanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidBlackBoxSubstanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidBlackBoxSubstanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
    MergeFrom(*source);
  }
}

void LiquidBlackBoxSubstanceData::MergeFrom(const LiquidBlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxSubstanceData::MergeFrom(from._internal_base());
  }
  if (from.has_concentration()) {
    _internal_mutable_concentration()->::pulse::cdm::bind::BlackBoxMassPerVolumeData::MergeFrom(from._internal_concentration());
  }
}

void LiquidBlackBoxSubstanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidBlackBoxSubstanceData::CopyFrom(const LiquidBlackBoxSubstanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidBlackBoxSubstanceData::IsInitialized() const {
  return true;
}

void LiquidBlackBoxSubstanceData::InternalSwap(LiquidBlackBoxSubstanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidBlackBoxSubstanceData, concentration_)
      + sizeof(LiquidBlackBoxSubstanceData::concentration_)
      - PROTOBUF_FIELD_OFFSET(LiquidBlackBoxSubstanceData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidBlackBoxSubstanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxData::_Internal {
 public:
};

BlackBoxData::BlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxData)
}
BlackBoxData::BlackBoxData(const BlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxData)
}

void BlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlackBoxData::~BlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlackBoxData::ArenaDtor(void* object) {
  BlackBoxData* _this = reinterpret_cast< BlackBoxData* >(object);
  (void)_this;
}
void BlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxData& BlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.BlackBoxData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.BlackBoxData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxData)
  return target;
}

size_t BlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxData)
    MergeFrom(*source);
  }
}

void BlackBoxData::MergeFrom(const BlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void BlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxData::CopyFrom(const BlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxData::IsInitialized() const {
  return true;
}

void BlackBoxData::InternalSwap(BlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FluidBlackBoxData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxData& base(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& sourceflow(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& targetflow(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxPressureData& sourcepressure(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxPressureData& targetpressure(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxPressureData& pressure(const FluidBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxVolumeData& volume(const FluidBlackBoxData* msg);
};

const ::pulse::cdm::bind::BlackBoxData&
FluidBlackBoxData::_Internal::base(const FluidBlackBoxData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::BlackBoxVolumePerTimeData&
FluidBlackBoxData::_Internal::sourceflow(const FluidBlackBoxData* msg) {
  return *msg->sourceflow_;
}
const ::pulse::cdm::bind::BlackBoxVolumePerTimeData&
FluidBlackBoxData::_Internal::targetflow(const FluidBlackBoxData* msg) {
  return *msg->targetflow_;
}
const ::pulse::cdm::bind::BlackBoxPressureData&
FluidBlackBoxData::_Internal::sourcepressure(const FluidBlackBoxData* msg) {
  return *msg->sourcepressure_;
}
const ::pulse::cdm::bind::BlackBoxPressureData&
FluidBlackBoxData::_Internal::targetpressure(const FluidBlackBoxData* msg) {
  return *msg->targetpressure_;
}
const ::pulse::cdm::bind::BlackBoxPressureData&
FluidBlackBoxData::_Internal::pressure(const FluidBlackBoxData* msg) {
  return *msg->pressure_;
}
const ::pulse::cdm::bind::BlackBoxVolumeData&
FluidBlackBoxData::_Internal::volume(const FluidBlackBoxData* msg) {
  return *msg->volume_;
}
FluidBlackBoxData::FluidBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FluidBlackBoxData)
}
FluidBlackBoxData::FluidBlackBoxData(const FluidBlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_sourceflow()) {
    sourceflow_ = new ::pulse::cdm::bind::BlackBoxVolumePerTimeData(*from.sourceflow_);
  } else {
    sourceflow_ = nullptr;
  }
  if (from._internal_has_targetflow()) {
    targetflow_ = new ::pulse::cdm::bind::BlackBoxVolumePerTimeData(*from.targetflow_);
  } else {
    targetflow_ = nullptr;
  }
  if (from._internal_has_sourcepressure()) {
    sourcepressure_ = new ::pulse::cdm::bind::BlackBoxPressureData(*from.sourcepressure_);
  } else {
    sourcepressure_ = nullptr;
  }
  if (from._internal_has_targetpressure()) {
    targetpressure_ = new ::pulse::cdm::bind::BlackBoxPressureData(*from.targetpressure_);
  } else {
    targetpressure_ = nullptr;
  }
  if (from._internal_has_pressure()) {
    pressure_ = new ::pulse::cdm::bind::BlackBoxPressureData(*from.pressure_);
  } else {
    pressure_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::pulse::cdm::bind::BlackBoxVolumeData(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FluidBlackBoxData)
}

void FluidBlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&base_)) + sizeof(volume_));
}

FluidBlackBoxData::~FluidBlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FluidBlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FluidBlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete sourceflow_;
  if (this != internal_default_instance()) delete targetflow_;
  if (this != internal_default_instance()) delete sourcepressure_;
  if (this != internal_default_instance()) delete targetpressure_;
  if (this != internal_default_instance()) delete pressure_;
  if (this != internal_default_instance()) delete volume_;
}

void FluidBlackBoxData::ArenaDtor(void* object) {
  FluidBlackBoxData* _this = reinterpret_cast< FluidBlackBoxData* >(object);
  (void)_this;
}
void FluidBlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluidBlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FluidBlackBoxData& FluidBlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FluidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void FluidBlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FluidBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && sourceflow_ != nullptr) {
    delete sourceflow_;
  }
  sourceflow_ = nullptr;
  if (GetArena() == nullptr && targetflow_ != nullptr) {
    delete targetflow_;
  }
  targetflow_ = nullptr;
  if (GetArena() == nullptr && sourcepressure_ != nullptr) {
    delete sourcepressure_;
  }
  sourcepressure_ = nullptr;
  if (GetArena() == nullptr && targetpressure_ != nullptr) {
    delete targetpressure_;
  }
  targetpressure_ = nullptr;
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluidBlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxVolumePerTimeData SourceFlow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourceflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxVolumePerTimeData TargetFlow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPressureData SourcePressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourcepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPressureData TargetPressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPressureData Pressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxVolumeData Volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FluidBlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FluidBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData SourceFlow = 2;
  if (this->has_sourceflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sourceflow(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData TargetFlow = 3;
  if (this->has_targetflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::targetflow(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPressureData SourcePressure = 4;
  if (this->has_sourcepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sourcepressure(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPressureData TargetPressure = 5;
  if (this->has_targetpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::targetpressure(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPressureData Pressure = 6;
  if (this->has_pressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pressure(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxVolumeData Volume = 7;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FluidBlackBoxData)
  return target;
}

size_t FluidBlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FluidBlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData SourceFlow = 2;
  if (this->has_sourceflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourceflow_);
  }

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData TargetFlow = 3;
  if (this->has_targetflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetflow_);
  }

  // .pulse.cdm.bind.BlackBoxPressureData SourcePressure = 4;
  if (this->has_sourcepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourcepressure_);
  }

  // .pulse.cdm.bind.BlackBoxPressureData TargetPressure = 5;
  if (this->has_targetpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetpressure_);
  }

  // .pulse.cdm.bind.BlackBoxPressureData Pressure = 6;
  if (this->has_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pressure_);
  }

  // .pulse.cdm.bind.BlackBoxVolumeData Volume = 7;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FluidBlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FluidBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const FluidBlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FluidBlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FluidBlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FluidBlackBoxData)
    MergeFrom(*source);
  }
}

void FluidBlackBoxData::MergeFrom(const FluidBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FluidBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxData::MergeFrom(from._internal_base());
  }
  if (from.has_sourceflow()) {
    _internal_mutable_sourceflow()->::pulse::cdm::bind::BlackBoxVolumePerTimeData::MergeFrom(from._internal_sourceflow());
  }
  if (from.has_targetflow()) {
    _internal_mutable_targetflow()->::pulse::cdm::bind::BlackBoxVolumePerTimeData::MergeFrom(from._internal_targetflow());
  }
  if (from.has_sourcepressure()) {
    _internal_mutable_sourcepressure()->::pulse::cdm::bind::BlackBoxPressureData::MergeFrom(from._internal_sourcepressure());
  }
  if (from.has_targetpressure()) {
    _internal_mutable_targetpressure()->::pulse::cdm::bind::BlackBoxPressureData::MergeFrom(from._internal_targetpressure());
  }
  if (from.has_pressure()) {
    _internal_mutable_pressure()->::pulse::cdm::bind::BlackBoxPressureData::MergeFrom(from._internal_pressure());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::pulse::cdm::bind::BlackBoxVolumeData::MergeFrom(from._internal_volume());
  }
}

void FluidBlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FluidBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidBlackBoxData::CopyFrom(const FluidBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FluidBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidBlackBoxData::IsInitialized() const {
  return true;
}

void FluidBlackBoxData::InternalSwap(FluidBlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FluidBlackBoxData, volume_)
      + sizeof(FluidBlackBoxData::volume_)
      - PROTOBUF_FIELD_OFFSET(FluidBlackBoxData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FluidBlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectricBlackBoxData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxData& base(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricCurrentData& sourcecurrent(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricCurrentData& targetcurrent(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricPotentialData& sourcevoltage(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricPotentialData& targetvoltage(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricPotentialData& voltage(const ElectricBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxElectricChargeData& charge(const ElectricBlackBoxData* msg);
};

const ::pulse::cdm::bind::BlackBoxData&
ElectricBlackBoxData::_Internal::base(const ElectricBlackBoxData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::BlackBoxElectricCurrentData&
ElectricBlackBoxData::_Internal::sourcecurrent(const ElectricBlackBoxData* msg) {
  return *msg->sourcecurrent_;
}
const ::pulse::cdm::bind::BlackBoxElectricCurrentData&
ElectricBlackBoxData::_Internal::targetcurrent(const ElectricBlackBoxData* msg) {
  return *msg->targetcurrent_;
}
const ::pulse::cdm::bind::BlackBoxElectricPotentialData&
ElectricBlackBoxData::_Internal::sourcevoltage(const ElectricBlackBoxData* msg) {
  return *msg->sourcevoltage_;
}
const ::pulse::cdm::bind::BlackBoxElectricPotentialData&
ElectricBlackBoxData::_Internal::targetvoltage(const ElectricBlackBoxData* msg) {
  return *msg->targetvoltage_;
}
const ::pulse::cdm::bind::BlackBoxElectricPotentialData&
ElectricBlackBoxData::_Internal::voltage(const ElectricBlackBoxData* msg) {
  return *msg->voltage_;
}
const ::pulse::cdm::bind::BlackBoxElectricChargeData&
ElectricBlackBoxData::_Internal::charge(const ElectricBlackBoxData* msg) {
  return *msg->charge_;
}
ElectricBlackBoxData::ElectricBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectricBlackBoxData)
}
ElectricBlackBoxData::ElectricBlackBoxData(const ElectricBlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_sourcecurrent()) {
    sourcecurrent_ = new ::pulse::cdm::bind::BlackBoxElectricCurrentData(*from.sourcecurrent_);
  } else {
    sourcecurrent_ = nullptr;
  }
  if (from._internal_has_targetcurrent()) {
    targetcurrent_ = new ::pulse::cdm::bind::BlackBoxElectricCurrentData(*from.targetcurrent_);
  } else {
    targetcurrent_ = nullptr;
  }
  if (from._internal_has_sourcevoltage()) {
    sourcevoltage_ = new ::pulse::cdm::bind::BlackBoxElectricPotentialData(*from.sourcevoltage_);
  } else {
    sourcevoltage_ = nullptr;
  }
  if (from._internal_has_targetvoltage()) {
    targetvoltage_ = new ::pulse::cdm::bind::BlackBoxElectricPotentialData(*from.targetvoltage_);
  } else {
    targetvoltage_ = nullptr;
  }
  if (from._internal_has_voltage()) {
    voltage_ = new ::pulse::cdm::bind::BlackBoxElectricPotentialData(*from.voltage_);
  } else {
    voltage_ = nullptr;
  }
  if (from._internal_has_charge()) {
    charge_ = new ::pulse::cdm::bind::BlackBoxElectricChargeData(*from.charge_);
  } else {
    charge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectricBlackBoxData)
}

void ElectricBlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&charge_) -
      reinterpret_cast<char*>(&base_)) + sizeof(charge_));
}

ElectricBlackBoxData::~ElectricBlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectricBlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectricBlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete sourcecurrent_;
  if (this != internal_default_instance()) delete targetcurrent_;
  if (this != internal_default_instance()) delete sourcevoltage_;
  if (this != internal_default_instance()) delete targetvoltage_;
  if (this != internal_default_instance()) delete voltage_;
  if (this != internal_default_instance()) delete charge_;
}

void ElectricBlackBoxData::ArenaDtor(void* object) {
  ElectricBlackBoxData* _this = reinterpret_cast< ElectricBlackBoxData* >(object);
  (void)_this;
}
void ElectricBlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectricBlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectricBlackBoxData& ElectricBlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectricBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void ElectricBlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectricBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && sourcecurrent_ != nullptr) {
    delete sourcecurrent_;
  }
  sourcecurrent_ = nullptr;
  if (GetArena() == nullptr && targetcurrent_ != nullptr) {
    delete targetcurrent_;
  }
  targetcurrent_ = nullptr;
  if (GetArena() == nullptr && sourcevoltage_ != nullptr) {
    delete sourcevoltage_;
  }
  sourcevoltage_ = nullptr;
  if (GetArena() == nullptr && targetvoltage_ != nullptr) {
    delete targetvoltage_;
  }
  targetvoltage_ = nullptr;
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
  if (GetArena() == nullptr && charge_ != nullptr) {
    delete charge_;
  }
  charge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectricBlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricCurrentData SourceCurrent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourcecurrent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricCurrentData TargetCurrent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetcurrent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricPotentialData SourceVoltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourcevoltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricPotentialData TargetVoltage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetvoltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricPotentialData Voltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxElectricChargeData Charge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_charge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectricBlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectricBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricCurrentData SourceCurrent = 2;
  if (this->has_sourcecurrent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sourcecurrent(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricCurrentData TargetCurrent = 3;
  if (this->has_targetcurrent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::targetcurrent(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData SourceVoltage = 4;
  if (this->has_sourcevoltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sourcevoltage(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData TargetVoltage = 5;
  if (this->has_targetvoltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::targetvoltage(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData Voltage = 6;
  if (this->has_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::voltage(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxElectricChargeData Charge = 7;
  if (this->has_charge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::charge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectricBlackBoxData)
  return target;
}

size_t ElectricBlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectricBlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.BlackBoxElectricCurrentData SourceCurrent = 2;
  if (this->has_sourcecurrent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourcecurrent_);
  }

  // .pulse.cdm.bind.BlackBoxElectricCurrentData TargetCurrent = 3;
  if (this->has_targetcurrent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetcurrent_);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData SourceVoltage = 4;
  if (this->has_sourcevoltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourcevoltage_);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData TargetVoltage = 5;
  if (this->has_targetvoltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetvoltage_);
  }

  // .pulse.cdm.bind.BlackBoxElectricPotentialData Voltage = 6;
  if (this->has_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltage_);
  }

  // .pulse.cdm.bind.BlackBoxElectricChargeData Charge = 7;
  if (this->has_charge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charge_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectricBlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectricBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectricBlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectricBlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectricBlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectricBlackBoxData)
    MergeFrom(*source);
  }
}

void ElectricBlackBoxData::MergeFrom(const ElectricBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectricBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxData::MergeFrom(from._internal_base());
  }
  if (from.has_sourcecurrent()) {
    _internal_mutable_sourcecurrent()->::pulse::cdm::bind::BlackBoxElectricCurrentData::MergeFrom(from._internal_sourcecurrent());
  }
  if (from.has_targetcurrent()) {
    _internal_mutable_targetcurrent()->::pulse::cdm::bind::BlackBoxElectricCurrentData::MergeFrom(from._internal_targetcurrent());
  }
  if (from.has_sourcevoltage()) {
    _internal_mutable_sourcevoltage()->::pulse::cdm::bind::BlackBoxElectricPotentialData::MergeFrom(from._internal_sourcevoltage());
  }
  if (from.has_targetvoltage()) {
    _internal_mutable_targetvoltage()->::pulse::cdm::bind::BlackBoxElectricPotentialData::MergeFrom(from._internal_targetvoltage());
  }
  if (from.has_voltage()) {
    _internal_mutable_voltage()->::pulse::cdm::bind::BlackBoxElectricPotentialData::MergeFrom(from._internal_voltage());
  }
  if (from.has_charge()) {
    _internal_mutable_charge()->::pulse::cdm::bind::BlackBoxElectricChargeData::MergeFrom(from._internal_charge());
  }
}

void ElectricBlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectricBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectricBlackBoxData::CopyFrom(const ElectricBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectricBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectricBlackBoxData::IsInitialized() const {
  return true;
}

void ElectricBlackBoxData::InternalSwap(ElectricBlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectricBlackBoxData, charge_)
      + sizeof(ElectricBlackBoxData::charge_)
      - PROTOBUF_FIELD_OFFSET(ElectricBlackBoxData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectricBlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThermalBlackBoxData::_Internal {
 public:
  static const ::pulse::cdm::bind::BlackBoxData& base(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxPowerData& sourceheattransferrate(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxPowerData& targetheattransferrate(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxTemperatureData& sourcetemperature(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxTemperatureData& targettemperature(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxTemperatureData& temperature(const ThermalBlackBoxData* msg);
  static const ::pulse::cdm::bind::BlackBoxEnergyData& heat(const ThermalBlackBoxData* msg);
};

const ::pulse::cdm::bind::BlackBoxData&
ThermalBlackBoxData::_Internal::base(const ThermalBlackBoxData* msg) {
  return *msg->base_;
}
const ::pulse::cdm::bind::BlackBoxPowerData&
ThermalBlackBoxData::_Internal::sourceheattransferrate(const ThermalBlackBoxData* msg) {
  return *msg->sourceheattransferrate_;
}
const ::pulse::cdm::bind::BlackBoxPowerData&
ThermalBlackBoxData::_Internal::targetheattransferrate(const ThermalBlackBoxData* msg) {
  return *msg->targetheattransferrate_;
}
const ::pulse::cdm::bind::BlackBoxTemperatureData&
ThermalBlackBoxData::_Internal::sourcetemperature(const ThermalBlackBoxData* msg) {
  return *msg->sourcetemperature_;
}
const ::pulse::cdm::bind::BlackBoxTemperatureData&
ThermalBlackBoxData::_Internal::targettemperature(const ThermalBlackBoxData* msg) {
  return *msg->targettemperature_;
}
const ::pulse::cdm::bind::BlackBoxTemperatureData&
ThermalBlackBoxData::_Internal::temperature(const ThermalBlackBoxData* msg) {
  return *msg->temperature_;
}
const ::pulse::cdm::bind::BlackBoxEnergyData&
ThermalBlackBoxData::_Internal::heat(const ThermalBlackBoxData* msg) {
  return *msg->heat_;
}
ThermalBlackBoxData::ThermalBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ThermalBlackBoxData)
}
ThermalBlackBoxData::ThermalBlackBoxData(const ThermalBlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::BlackBoxData(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from._internal_has_sourceheattransferrate()) {
    sourceheattransferrate_ = new ::pulse::cdm::bind::BlackBoxPowerData(*from.sourceheattransferrate_);
  } else {
    sourceheattransferrate_ = nullptr;
  }
  if (from._internal_has_targetheattransferrate()) {
    targetheattransferrate_ = new ::pulse::cdm::bind::BlackBoxPowerData(*from.targetheattransferrate_);
  } else {
    targetheattransferrate_ = nullptr;
  }
  if (from._internal_has_sourcetemperature()) {
    sourcetemperature_ = new ::pulse::cdm::bind::BlackBoxTemperatureData(*from.sourcetemperature_);
  } else {
    sourcetemperature_ = nullptr;
  }
  if (from._internal_has_targettemperature()) {
    targettemperature_ = new ::pulse::cdm::bind::BlackBoxTemperatureData(*from.targettemperature_);
  } else {
    targettemperature_ = nullptr;
  }
  if (from._internal_has_temperature()) {
    temperature_ = new ::pulse::cdm::bind::BlackBoxTemperatureData(*from.temperature_);
  } else {
    temperature_ = nullptr;
  }
  if (from._internal_has_heat()) {
    heat_ = new ::pulse::cdm::bind::BlackBoxEnergyData(*from.heat_);
  } else {
    heat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ThermalBlackBoxData)
}

void ThermalBlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heat_) -
      reinterpret_cast<char*>(&base_)) + sizeof(heat_));
}

ThermalBlackBoxData::~ThermalBlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ThermalBlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalBlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete sourceheattransferrate_;
  if (this != internal_default_instance()) delete targetheattransferrate_;
  if (this != internal_default_instance()) delete sourcetemperature_;
  if (this != internal_default_instance()) delete targettemperature_;
  if (this != internal_default_instance()) delete temperature_;
  if (this != internal_default_instance()) delete heat_;
}

void ThermalBlackBoxData::ArenaDtor(void* object) {
  ThermalBlackBoxData* _this = reinterpret_cast< ThermalBlackBoxData* >(object);
  (void)_this;
}
void ThermalBlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalBlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalBlackBoxData& ThermalBlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void ThermalBlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ThermalBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArena() == nullptr && sourceheattransferrate_ != nullptr) {
    delete sourceheattransferrate_;
  }
  sourceheattransferrate_ = nullptr;
  if (GetArena() == nullptr && targetheattransferrate_ != nullptr) {
    delete targetheattransferrate_;
  }
  targetheattransferrate_ = nullptr;
  if (GetArena() == nullptr && sourcetemperature_ != nullptr) {
    delete sourcetemperature_;
  }
  sourcetemperature_ = nullptr;
  if (GetArena() == nullptr && targettemperature_ != nullptr) {
    delete targettemperature_;
  }
  targettemperature_ = nullptr;
  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
  if (GetArena() == nullptr && heat_ != nullptr) {
    delete heat_;
  }
  heat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalBlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.BlackBoxData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPowerData SourceHeatTransferRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourceheattransferrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxPowerData TargetHeatTransferRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetheattransferrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxTemperatureData SourceTemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourcetemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxTemperatureData TargetTemperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_targettemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxTemperatureData Temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.BlackBoxEnergyData Heat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_heat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalBlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ThermalBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPowerData SourceHeatTransferRate = 2;
  if (this->has_sourceheattransferrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sourceheattransferrate(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxPowerData TargetHeatTransferRate = 3;
  if (this->has_targetheattransferrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::targetheattransferrate(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData SourceTemperature = 4;
  if (this->has_sourcetemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sourcetemperature(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData TargetTemperature = 5;
  if (this->has_targettemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::targettemperature(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData Temperature = 6;
  if (this->has_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::temperature(this), target, stream);
  }

  // .pulse.cdm.bind.BlackBoxEnergyData Heat = 7;
  if (this->has_heat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::heat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ThermalBlackBoxData)
  return target;
}

size_t ThermalBlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ThermalBlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.BlackBoxData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .pulse.cdm.bind.BlackBoxPowerData SourceHeatTransferRate = 2;
  if (this->has_sourceheattransferrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourceheattransferrate_);
  }

  // .pulse.cdm.bind.BlackBoxPowerData TargetHeatTransferRate = 3;
  if (this->has_targetheattransferrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetheattransferrate_);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData SourceTemperature = 4;
  if (this->has_sourcetemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourcetemperature_);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData TargetTemperature = 5;
  if (this->has_targettemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targettemperature_);
  }

  // .pulse.cdm.bind.BlackBoxTemperatureData Temperature = 6;
  if (this->has_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temperature_);
  }

  // .pulse.cdm.bind.BlackBoxEnergyData Heat = 7;
  if (this->has_heat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalBlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ThermalBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalBlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalBlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ThermalBlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ThermalBlackBoxData)
    MergeFrom(*source);
  }
}

void ThermalBlackBoxData::MergeFrom(const ThermalBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ThermalBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::BlackBoxData::MergeFrom(from._internal_base());
  }
  if (from.has_sourceheattransferrate()) {
    _internal_mutable_sourceheattransferrate()->::pulse::cdm::bind::BlackBoxPowerData::MergeFrom(from._internal_sourceheattransferrate());
  }
  if (from.has_targetheattransferrate()) {
    _internal_mutable_targetheattransferrate()->::pulse::cdm::bind::BlackBoxPowerData::MergeFrom(from._internal_targetheattransferrate());
  }
  if (from.has_sourcetemperature()) {
    _internal_mutable_sourcetemperature()->::pulse::cdm::bind::BlackBoxTemperatureData::MergeFrom(from._internal_sourcetemperature());
  }
  if (from.has_targettemperature()) {
    _internal_mutable_targettemperature()->::pulse::cdm::bind::BlackBoxTemperatureData::MergeFrom(from._internal_targettemperature());
  }
  if (from.has_temperature()) {
    _internal_mutable_temperature()->::pulse::cdm::bind::BlackBoxTemperatureData::MergeFrom(from._internal_temperature());
  }
  if (from.has_heat()) {
    _internal_mutable_heat()->::pulse::cdm::bind::BlackBoxEnergyData::MergeFrom(from._internal_heat());
  }
}

void ThermalBlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ThermalBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalBlackBoxData::CopyFrom(const ThermalBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ThermalBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalBlackBoxData::IsInitialized() const {
  return true;
}

void ThermalBlackBoxData::InternalSwap(ThermalBlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalBlackBoxData, heat_)
      + sizeof(ThermalBlackBoxData::heat_)
      - PROTOBUF_FIELD_OFFSET(ThermalBlackBoxData, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalBlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasBlackBoxData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidBlackBoxData& base(const GasBlackBoxData* msg);
};

const ::pulse::cdm::bind::FluidBlackBoxData&
GasBlackBoxData::_Internal::base(const GasBlackBoxData* msg) {
  return *msg->base_;
}
GasBlackBoxData::GasBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substancequantity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasBlackBoxData)
}
GasBlackBoxData::GasBlackBoxData(const GasBlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      substancequantity_(from.substancequantity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::FluidBlackBoxData(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasBlackBoxData)
}

void GasBlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  base_ = nullptr;
}

GasBlackBoxData::~GasBlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasBlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasBlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void GasBlackBoxData::ArenaDtor(void* object) {
  GasBlackBoxData* _this = reinterpret_cast< GasBlackBoxData* >(object);
  (void)_this;
}
void GasBlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasBlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasBlackBoxData& GasBlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void GasBlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substancequantity_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasBlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.GasBlackBoxSubstanceData SubstanceQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substancequantity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasBlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .pulse.cdm.bind.GasBlackBoxSubstanceData SubstanceQuantity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substancequantity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_substancequantity(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasBlackBoxData)
  return target;
}

size_t GasBlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasBlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.GasBlackBoxSubstanceData SubstanceQuantity = 2;
  total_size += 1UL * this->_internal_substancequantity_size();
  for (const auto& msg : this->substancequantity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasBlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasBlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasBlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasBlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasBlackBoxData)
    MergeFrom(*source);
  }
}

void GasBlackBoxData::MergeFrom(const GasBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substancequantity_.MergeFrom(from.substancequantity_);
  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::FluidBlackBoxData::MergeFrom(from._internal_base());
  }
}

void GasBlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasBlackBoxData::CopyFrom(const GasBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasBlackBoxData::IsInitialized() const {
  return true;
}

void GasBlackBoxData::InternalSwap(GasBlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substancequantity_.InternalSwap(&other->substancequantity_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GasBlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidBlackBoxData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidBlackBoxData& base(const LiquidBlackBoxData* msg);
};

const ::pulse::cdm::bind::FluidBlackBoxData&
LiquidBlackBoxData::_Internal::base(const LiquidBlackBoxData* msg) {
  return *msg->base_;
}
LiquidBlackBoxData::LiquidBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substancequantity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidBlackBoxData)
}
LiquidBlackBoxData::LiquidBlackBoxData(const LiquidBlackBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      substancequantity_(from.substancequantity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::pulse::cdm::bind::FluidBlackBoxData(*from.base_);
  } else {
    base_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidBlackBoxData)
}

void LiquidBlackBoxData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  base_ = nullptr;
}

LiquidBlackBoxData::~LiquidBlackBoxData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidBlackBoxData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidBlackBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void LiquidBlackBoxData::ArenaDtor(void* object) {
  LiquidBlackBoxData* _this = reinterpret_cast< LiquidBlackBoxData* >(object);
  (void)_this;
}
void LiquidBlackBoxData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidBlackBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidBlackBoxData& LiquidBlackBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidBlackBoxData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void LiquidBlackBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substancequantity_.Clear();
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidBlackBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidBlackBoxSubstanceData SubstanceQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substancequantity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidBlackBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidBlackBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  if (this->has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // repeated .pulse.cdm.bind.LiquidBlackBoxSubstanceData SubstanceQuantity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substancequantity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_substancequantity(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidBlackBoxData)
  return target;
}

size_t LiquidBlackBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidBlackBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.LiquidBlackBoxSubstanceData SubstanceQuantity = 2;
  total_size += 1UL * this->_internal_substancequantity_size();
  for (const auto& msg : this->substancequantity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidBlackBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidBlackBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidBlackBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidBlackBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidBlackBoxData)
    MergeFrom(*source);
  }
}

void LiquidBlackBoxData::MergeFrom(const LiquidBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidBlackBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substancequantity_.MergeFrom(from.substancequantity_);
  if (from.has_base()) {
    _internal_mutable_base()->::pulse::cdm::bind::FluidBlackBoxData::MergeFrom(from._internal_base());
  }
}

void LiquidBlackBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidBlackBoxData::CopyFrom(const LiquidBlackBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidBlackBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidBlackBoxData::IsInitialized() const {
  return true;
}

void LiquidBlackBoxData::InternalSwap(LiquidBlackBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substancequantity_.InternalSwap(&other->substancequantity_);
  swap(base_, other->base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidBlackBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlackBoxesData::_Internal {
 public:
};

BlackBoxesData::BlackBoxesData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gasbox_(arena),
  liquidbox_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BlackBoxesData)
}
BlackBoxesData::BlackBoxesData(const BlackBoxesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gasbox_(from.gasbox_),
      liquidbox_(from.liquidbox_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BlackBoxesData)
}

void BlackBoxesData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
}

BlackBoxesData::~BlackBoxesData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BlackBoxesData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlackBoxesData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlackBoxesData::ArenaDtor(void* object) {
  BlackBoxesData* _this = reinterpret_cast< BlackBoxesData* >(object);
  (void)_this;
}
void BlackBoxesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlackBoxesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlackBoxesData& BlackBoxesData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlackBoxesData_pulse_2fcdm_2fbind_2fBlackBox_2eproto.base);
  return *internal_default_instance();
}


void BlackBoxesData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BlackBoxesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gasbox_.Clear();
  liquidbox_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlackBoxesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.GasBlackBoxData GasBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gasbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidBlackBoxData LiquidBox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlackBoxesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BlackBoxesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.GasBlackBoxData GasBox = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gasbox_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gasbox(i), target, stream);
  }

  // repeated .pulse.cdm.bind.LiquidBlackBoxData LiquidBox = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidbox_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_liquidbox(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BlackBoxesData)
  return target;
}

size_t BlackBoxesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BlackBoxesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.GasBlackBoxData GasBox = 1;
  total_size += 1UL * this->_internal_gasbox_size();
  for (const auto& msg : this->gasbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.LiquidBlackBoxData LiquidBox = 2;
  total_size += 1UL * this->_internal_liquidbox_size();
  for (const auto& msg : this->liquidbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlackBoxesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BlackBoxesData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlackBoxesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlackBoxesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BlackBoxesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BlackBoxesData)
    MergeFrom(*source);
  }
}

void BlackBoxesData::MergeFrom(const BlackBoxesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BlackBoxesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gasbox_.MergeFrom(from.gasbox_);
  liquidbox_.MergeFrom(from.liquidbox_);
}

void BlackBoxesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BlackBoxesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackBoxesData::CopyFrom(const BlackBoxesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BlackBoxesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackBoxesData::IsInitialized() const {
  return true;
}

void BlackBoxesData::InternalSwap(BlackBoxesData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gasbox_.InternalSwap(&other->gasbox_);
  liquidbox_.InternalSwap(&other->liquidbox_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlackBoxesData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxPropertyData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxPropertyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxPropertyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxVolumePerTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxVolumePerTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxVolumePerTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxPressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxPressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxPressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxMassPerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxMassPerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxMassPerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxElectricCurrentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxElectricCurrentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxElectricCurrentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxElectricPotentialData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxElectricPotentialData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxElectricPotentialData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxElectricChargeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxElectricChargeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxElectricChargeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxPowerData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxPowerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxPowerData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxTemperatureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxTemperatureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxTemperatureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxEnergyData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxEnergyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxEnergyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxSubstanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxSubstanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxSubstanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasBlackBoxSubstanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasBlackBoxSubstanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasBlackBoxSubstanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FluidBlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FluidBlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FluidBlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectricBlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectricBlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectricBlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ThermalBlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ThermalBlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ThermalBlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasBlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasBlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasBlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidBlackBoxData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidBlackBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidBlackBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BlackBoxesData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BlackBoxesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BlackBoxesData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
