// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Substance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Physiology.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class SubstanceAerosolizationData;
class SubstanceAerosolizationDataDefaultTypeInternal;
extern SubstanceAerosolizationDataDefaultTypeInternal _SubstanceAerosolizationData_default_instance_;
class SubstanceClearanceData;
class SubstanceClearanceDataDefaultTypeInternal;
extern SubstanceClearanceDataDefaultTypeInternal _SubstanceClearanceData_default_instance_;
class SubstanceCompoundData;
class SubstanceCompoundDataDefaultTypeInternal;
extern SubstanceCompoundDataDefaultTypeInternal _SubstanceCompoundData_default_instance_;
class SubstanceConcentrationData;
class SubstanceConcentrationDataDefaultTypeInternal;
extern SubstanceConcentrationDataDefaultTypeInternal _SubstanceConcentrationData_default_instance_;
class SubstanceData;
class SubstanceDataDefaultTypeInternal;
extern SubstanceDataDefaultTypeInternal _SubstanceData_default_instance_;
class SubstanceFractionData;
class SubstanceFractionDataDefaultTypeInternal;
extern SubstanceFractionDataDefaultTypeInternal _SubstanceFractionData_default_instance_;
class SubstancePharmacodynamicsData;
class SubstancePharmacodynamicsDataDefaultTypeInternal;
extern SubstancePharmacodynamicsDataDefaultTypeInternal _SubstancePharmacodynamicsData_default_instance_;
class SubstancePharmacokineticsData;
class SubstancePharmacokineticsDataDefaultTypeInternal;
extern SubstancePharmacokineticsDataDefaultTypeInternal _SubstancePharmacokineticsData_default_instance_;
class SubstancePhysicochemicalsData;
class SubstancePhysicochemicalsDataDefaultTypeInternal;
extern SubstancePhysicochemicalsDataDefaultTypeInternal _SubstancePhysicochemicalsData_default_instance_;
class SubstanceRenalClearanceData;
class SubstanceRenalClearanceDataDefaultTypeInternal;
extern SubstanceRenalClearanceDataDefaultTypeInternal _SubstanceRenalClearanceData_default_instance_;
class SubstanceRenalRegulationData;
class SubstanceRenalRegulationDataDefaultTypeInternal;
extern SubstanceRenalRegulationDataDefaultTypeInternal _SubstanceRenalRegulationData_default_instance_;
class SubstanceSystemicClearanceData;
class SubstanceSystemicClearanceDataDefaultTypeInternal;
extern SubstanceSystemicClearanceDataDefaultTypeInternal _SubstanceSystemicClearanceData_default_instance_;
class SubstanceTissuePharmacokineticsData;
class SubstanceTissuePharmacokineticsDataDefaultTypeInternal;
extern SubstanceTissuePharmacokineticsDataDefaultTypeInternal _SubstanceTissuePharmacokineticsData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::SubstanceAerosolizationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceAerosolizationData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceClearanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceClearanceData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceCompoundData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceCompoundData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceConcentrationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceConcentrationData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceFractionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceFractionData>(Arena*);
template<> ::pulse::cdm::bind::SubstancePharmacodynamicsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstancePharmacodynamicsData>(Arena*);
template<> ::pulse::cdm::bind::SubstancePharmacokineticsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstancePharmacokineticsData>(Arena*);
template<> ::pulse::cdm::bind::SubstancePhysicochemicalsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstancePhysicochemicalsData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceRenalClearanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceRenalClearanceData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceRenalRegulationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceRenalRegulationData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceSystemicClearanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceSystemicClearanceData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceTissuePharmacokineticsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum SubstancePhysicochemicalsData_eIonicState : int {
  SubstancePhysicochemicalsData_eIonicState_NullIonicState = 0,
  SubstancePhysicochemicalsData_eIonicState_Acid = 1,
  SubstancePhysicochemicalsData_eIonicState_Base = 2,
  SubstancePhysicochemicalsData_eIonicState_Neutral = 3,
  SubstancePhysicochemicalsData_eIonicState_WeakBase = 4,
  SubstancePhysicochemicalsData_eIonicState_SubstancePhysicochemicalsData_eIonicState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubstancePhysicochemicalsData_eIonicState_SubstancePhysicochemicalsData_eIonicState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubstancePhysicochemicalsData_eIonicState_IsValid(int value);
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData_eIonicState_eIonicState_MIN = SubstancePhysicochemicalsData_eIonicState_NullIonicState;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData_eIonicState_eIonicState_MAX = SubstancePhysicochemicalsData_eIonicState_WeakBase;
constexpr int SubstancePhysicochemicalsData_eIonicState_eIonicState_ARRAYSIZE = SubstancePhysicochemicalsData_eIonicState_eIonicState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstancePhysicochemicalsData_eIonicState_descriptor();
template<typename T>
inline const std::string& SubstancePhysicochemicalsData_eIonicState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubstancePhysicochemicalsData_eIonicState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubstancePhysicochemicalsData_eIonicState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubstancePhysicochemicalsData_eIonicState_descriptor(), enum_t_value);
}
inline bool SubstancePhysicochemicalsData_eIonicState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubstancePhysicochemicalsData_eIonicState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubstancePhysicochemicalsData_eIonicState>(
    SubstancePhysicochemicalsData_eIonicState_descriptor(), name, value);
}
enum SubstancePhysicochemicalsData_eBindingProtein : int {
  SubstancePhysicochemicalsData_eBindingProtein_NullBindingProtein = 0,
  SubstancePhysicochemicalsData_eBindingProtein_AAG = 1,
  SubstancePhysicochemicalsData_eBindingProtein_Albumin = 2,
  SubstancePhysicochemicalsData_eBindingProtein_Lipoprotein = 3,
  SubstancePhysicochemicalsData_eBindingProtein_SubstancePhysicochemicalsData_eBindingProtein_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubstancePhysicochemicalsData_eBindingProtein_SubstancePhysicochemicalsData_eBindingProtein_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubstancePhysicochemicalsData_eBindingProtein_IsValid(int value);
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_MIN = SubstancePhysicochemicalsData_eBindingProtein_NullBindingProtein;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_MAX = SubstancePhysicochemicalsData_eBindingProtein_Lipoprotein;
constexpr int SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_ARRAYSIZE = SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstancePhysicochemicalsData_eBindingProtein_descriptor();
template<typename T>
inline const std::string& SubstancePhysicochemicalsData_eBindingProtein_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubstancePhysicochemicalsData_eBindingProtein>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubstancePhysicochemicalsData_eBindingProtein_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubstancePhysicochemicalsData_eBindingProtein_descriptor(), enum_t_value);
}
inline bool SubstancePhysicochemicalsData_eBindingProtein_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubstancePhysicochemicalsData_eBindingProtein* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubstancePhysicochemicalsData_eBindingProtein>(
    SubstancePhysicochemicalsData_eBindingProtein_descriptor(), name, value);
}
enum SubstanceData_eState : int {
  SubstanceData_eState_NullState = 0,
  SubstanceData_eState_Solid = 1,
  SubstanceData_eState_Liquid = 2,
  SubstanceData_eState_Gas = 3,
  SubstanceData_eState_Molecular = 4,
  SubstanceData_eState_SubstanceData_eState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubstanceData_eState_SubstanceData_eState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubstanceData_eState_IsValid(int value);
constexpr SubstanceData_eState SubstanceData_eState_eState_MIN = SubstanceData_eState_NullState;
constexpr SubstanceData_eState SubstanceData_eState_eState_MAX = SubstanceData_eState_Molecular;
constexpr int SubstanceData_eState_eState_ARRAYSIZE = SubstanceData_eState_eState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstanceData_eState_descriptor();
template<typename T>
inline const std::string& SubstanceData_eState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubstanceData_eState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubstanceData_eState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubstanceData_eState_descriptor(), enum_t_value);
}
inline bool SubstanceData_eState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubstanceData_eState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubstanceData_eState>(
    SubstanceData_eState_descriptor(), name, value);
}
// ===================================================================

class SubstanceAerosolizationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceAerosolizationData) */ {
 public:
  inline SubstanceAerosolizationData() : SubstanceAerosolizationData(nullptr) {}
  virtual ~SubstanceAerosolizationData();

  SubstanceAerosolizationData(const SubstanceAerosolizationData& from);
  SubstanceAerosolizationData(SubstanceAerosolizationData&& from) noexcept
    : SubstanceAerosolizationData() {
    *this = ::std::move(from);
  }

  inline SubstanceAerosolizationData& operator=(const SubstanceAerosolizationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceAerosolizationData& operator=(SubstanceAerosolizationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceAerosolizationData& default_instance();

  static inline const SubstanceAerosolizationData* internal_default_instance() {
    return reinterpret_cast<const SubstanceAerosolizationData*>(
               &_SubstanceAerosolizationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubstanceAerosolizationData& a, SubstanceAerosolizationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceAerosolizationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceAerosolizationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceAerosolizationData* New() const final {
    return CreateMaybeMessage<SubstanceAerosolizationData>(nullptr);
  }

  SubstanceAerosolizationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceAerosolizationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceAerosolizationData& from);
  void MergeFrom(const SubstanceAerosolizationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceAerosolizationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceAerosolizationData";
  }
  protected:
  explicit SubstanceAerosolizationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBronchioleModifierFieldNumber = 1,
    kInflammationCoefficientFieldNumber = 2,
    kParticulateSizeDistributionFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarNegative1To1Data BronchioleModifier = 1;
  bool has_bronchiolemodifier() const;
  private:
  bool _internal_has_bronchiolemodifier() const;
  public:
  void clear_bronchiolemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchiolemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_bronchiolemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_bronchiolemodifier();
  void set_allocated_bronchiolemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* bronchiolemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_bronchiolemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_bronchiolemodifier();
  public:
  void unsafe_arena_set_allocated_bronchiolemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* bronchiolemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_bronchiolemodifier();

  // .pulse.cdm.bind.Scalar0To1Data InflammationCoefficient = 2;
  bool has_inflammationcoefficient() const;
  private:
  bool _internal_has_inflammationcoefficient() const;
  public:
  void clear_inflammationcoefficient();
  const ::pulse::cdm::bind::Scalar0To1Data& inflammationcoefficient() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_inflammationcoefficient();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_inflammationcoefficient();
  void set_allocated_inflammationcoefficient(::pulse::cdm::bind::Scalar0To1Data* inflammationcoefficient);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_inflammationcoefficient() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_inflammationcoefficient();
  public:
  void unsafe_arena_set_allocated_inflammationcoefficient(
      ::pulse::cdm::bind::Scalar0To1Data* inflammationcoefficient);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_inflammationcoefficient();

  // .pulse.cdm.bind.HistogramFractionVsLengthData ParticulateSizeDistribution = 3;
  bool has_particulatesizedistribution() const;
  private:
  bool _internal_has_particulatesizedistribution() const;
  public:
  void clear_particulatesizedistribution();
  const ::pulse::cdm::bind::HistogramFractionVsLengthData& particulatesizedistribution() const;
  ::pulse::cdm::bind::HistogramFractionVsLengthData* release_particulatesizedistribution();
  ::pulse::cdm::bind::HistogramFractionVsLengthData* mutable_particulatesizedistribution();
  void set_allocated_particulatesizedistribution(::pulse::cdm::bind::HistogramFractionVsLengthData* particulatesizedistribution);
  private:
  const ::pulse::cdm::bind::HistogramFractionVsLengthData& _internal_particulatesizedistribution() const;
  ::pulse::cdm::bind::HistogramFractionVsLengthData* _internal_mutable_particulatesizedistribution();
  public:
  void unsafe_arena_set_allocated_particulatesizedistribution(
      ::pulse::cdm::bind::HistogramFractionVsLengthData* particulatesizedistribution);
  ::pulse::cdm::bind::HistogramFractionVsLengthData* unsafe_arena_release_particulatesizedistribution();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceAerosolizationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* bronchiolemodifier_;
  ::pulse::cdm::bind::Scalar0To1Data* inflammationcoefficient_;
  ::pulse::cdm::bind::HistogramFractionVsLengthData* particulatesizedistribution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstancePhysicochemicalsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstancePhysicochemicalsData) */ {
 public:
  inline SubstancePhysicochemicalsData() : SubstancePhysicochemicalsData(nullptr) {}
  virtual ~SubstancePhysicochemicalsData();

  SubstancePhysicochemicalsData(const SubstancePhysicochemicalsData& from);
  SubstancePhysicochemicalsData(SubstancePhysicochemicalsData&& from) noexcept
    : SubstancePhysicochemicalsData() {
    *this = ::std::move(from);
  }

  inline SubstancePhysicochemicalsData& operator=(const SubstancePhysicochemicalsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstancePhysicochemicalsData& operator=(SubstancePhysicochemicalsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstancePhysicochemicalsData& default_instance();

  static inline const SubstancePhysicochemicalsData* internal_default_instance() {
    return reinterpret_cast<const SubstancePhysicochemicalsData*>(
               &_SubstancePhysicochemicalsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubstancePhysicochemicalsData& a, SubstancePhysicochemicalsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstancePhysicochemicalsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstancePhysicochemicalsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstancePhysicochemicalsData* New() const final {
    return CreateMaybeMessage<SubstancePhysicochemicalsData>(nullptr);
  }

  SubstancePhysicochemicalsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstancePhysicochemicalsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstancePhysicochemicalsData& from);
  void MergeFrom(const SubstancePhysicochemicalsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstancePhysicochemicalsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstancePhysicochemicalsData";
  }
  protected:
  explicit SubstancePhysicochemicalsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubstancePhysicochemicalsData_eIonicState eIonicState;
  static constexpr eIonicState NullIonicState =
    SubstancePhysicochemicalsData_eIonicState_NullIonicState;
  static constexpr eIonicState Acid =
    SubstancePhysicochemicalsData_eIonicState_Acid;
  static constexpr eIonicState Base =
    SubstancePhysicochemicalsData_eIonicState_Base;
  static constexpr eIonicState Neutral =
    SubstancePhysicochemicalsData_eIonicState_Neutral;
  static constexpr eIonicState WeakBase =
    SubstancePhysicochemicalsData_eIonicState_WeakBase;
  static inline bool eIonicState_IsValid(int value) {
    return SubstancePhysicochemicalsData_eIonicState_IsValid(value);
  }
  static constexpr eIonicState eIonicState_MIN =
    SubstancePhysicochemicalsData_eIonicState_eIonicState_MIN;
  static constexpr eIonicState eIonicState_MAX =
    SubstancePhysicochemicalsData_eIonicState_eIonicState_MAX;
  static constexpr int eIonicState_ARRAYSIZE =
    SubstancePhysicochemicalsData_eIonicState_eIonicState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eIonicState_descriptor() {
    return SubstancePhysicochemicalsData_eIonicState_descriptor();
  }
  template<typename T>
  static inline const std::string& eIonicState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eIonicState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eIonicState_Name.");
    return SubstancePhysicochemicalsData_eIonicState_Name(enum_t_value);
  }
  static inline bool eIonicState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eIonicState* value) {
    return SubstancePhysicochemicalsData_eIonicState_Parse(name, value);
  }

  typedef SubstancePhysicochemicalsData_eBindingProtein eBindingProtein;
  static constexpr eBindingProtein NullBindingProtein =
    SubstancePhysicochemicalsData_eBindingProtein_NullBindingProtein;
  static constexpr eBindingProtein AAG =
    SubstancePhysicochemicalsData_eBindingProtein_AAG;
  static constexpr eBindingProtein Albumin =
    SubstancePhysicochemicalsData_eBindingProtein_Albumin;
  static constexpr eBindingProtein Lipoprotein =
    SubstancePhysicochemicalsData_eBindingProtein_Lipoprotein;
  static inline bool eBindingProtein_IsValid(int value) {
    return SubstancePhysicochemicalsData_eBindingProtein_IsValid(value);
  }
  static constexpr eBindingProtein eBindingProtein_MIN =
    SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_MIN;
  static constexpr eBindingProtein eBindingProtein_MAX =
    SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_MAX;
  static constexpr int eBindingProtein_ARRAYSIZE =
    SubstancePhysicochemicalsData_eBindingProtein_eBindingProtein_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eBindingProtein_descriptor() {
    return SubstancePhysicochemicalsData_eBindingProtein_descriptor();
  }
  template<typename T>
  static inline const std::string& eBindingProtein_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eBindingProtein>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eBindingProtein_Name.");
    return SubstancePhysicochemicalsData_eBindingProtein_Name(enum_t_value);
  }
  static inline bool eBindingProtein_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eBindingProtein* value) {
    return SubstancePhysicochemicalsData_eBindingProtein_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAcidDissociationConstantFieldNumber = 1,
    kBloodPlasmaRatioFieldNumber = 3,
    kFractionUnboundInPlasmaFieldNumber = 4,
    kLogPFieldNumber = 6,
    kOralAbsorptionRateConstantFieldNumber = 7,
    kBindingProteinFieldNumber = 2,
    kIonicStateFieldNumber = 5,
  };
  // .pulse.cdm.bind.ScalarData AcidDissociationConstant = 1;
  bool has_aciddissociationconstant() const;
  private:
  bool _internal_has_aciddissociationconstant() const;
  public:
  void clear_aciddissociationconstant();
  const ::pulse::cdm::bind::ScalarData& aciddissociationconstant() const;
  ::pulse::cdm::bind::ScalarData* release_aciddissociationconstant();
  ::pulse::cdm::bind::ScalarData* mutable_aciddissociationconstant();
  void set_allocated_aciddissociationconstant(::pulse::cdm::bind::ScalarData* aciddissociationconstant);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_aciddissociationconstant() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_aciddissociationconstant();
  public:
  void unsafe_arena_set_allocated_aciddissociationconstant(
      ::pulse::cdm::bind::ScalarData* aciddissociationconstant);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_aciddissociationconstant();

  // .pulse.cdm.bind.ScalarData BloodPlasmaRatio = 3;
  bool has_bloodplasmaratio() const;
  private:
  bool _internal_has_bloodplasmaratio() const;
  public:
  void clear_bloodplasmaratio();
  const ::pulse::cdm::bind::ScalarData& bloodplasmaratio() const;
  ::pulse::cdm::bind::ScalarData* release_bloodplasmaratio();
  ::pulse::cdm::bind::ScalarData* mutable_bloodplasmaratio();
  void set_allocated_bloodplasmaratio(::pulse::cdm::bind::ScalarData* bloodplasmaratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_bloodplasmaratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_bloodplasmaratio();
  public:
  void unsafe_arena_set_allocated_bloodplasmaratio(
      ::pulse::cdm::bind::ScalarData* bloodplasmaratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_bloodplasmaratio();

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  bool has_fractionunboundinplasma() const;
  private:
  bool _internal_has_fractionunboundinplasma() const;
  public:
  void clear_fractionunboundinplasma();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionunboundinplasma();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionunboundinplasma();
  void set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionunboundinplasma();
  public:
  void unsafe_arena_set_allocated_fractionunboundinplasma(
      ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionunboundinplasma();

  // .pulse.cdm.bind.ScalarData LogP = 6;
  bool has_logp() const;
  private:
  bool _internal_has_logp() const;
  public:
  void clear_logp();
  const ::pulse::cdm::bind::ScalarData& logp() const;
  ::pulse::cdm::bind::ScalarData* release_logp();
  ::pulse::cdm::bind::ScalarData* mutable_logp();
  void set_allocated_logp(::pulse::cdm::bind::ScalarData* logp);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_logp() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_logp();
  public:
  void unsafe_arena_set_allocated_logp(
      ::pulse::cdm::bind::ScalarData* logp);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_logp();

  // .pulse.cdm.bind.ScalarData OralAbsorptionRateConstant = 7;
  bool has_oralabsorptionrateconstant() const;
  private:
  bool _internal_has_oralabsorptionrateconstant() const;
  public:
  void clear_oralabsorptionrateconstant();
  const ::pulse::cdm::bind::ScalarData& oralabsorptionrateconstant() const;
  ::pulse::cdm::bind::ScalarData* release_oralabsorptionrateconstant();
  ::pulse::cdm::bind::ScalarData* mutable_oralabsorptionrateconstant();
  void set_allocated_oralabsorptionrateconstant(::pulse::cdm::bind::ScalarData* oralabsorptionrateconstant);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_oralabsorptionrateconstant() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_oralabsorptionrateconstant();
  public:
  void unsafe_arena_set_allocated_oralabsorptionrateconstant(
      ::pulse::cdm::bind::ScalarData* oralabsorptionrateconstant);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_oralabsorptionrateconstant();

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eBindingProtein BindingProtein = 2;
  void clear_bindingprotein();
  ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein bindingprotein() const;
  void set_bindingprotein(::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein value);
  private:
  ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein _internal_bindingprotein() const;
  void _internal_set_bindingprotein(::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein value);
  public:

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eIonicState IonicState = 5;
  void clear_ionicstate();
  ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState ionicstate() const;
  void set_ionicstate(::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState value);
  private:
  ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState _internal_ionicstate() const;
  void _internal_set_ionicstate(::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstancePhysicochemicalsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarData* aciddissociationconstant_;
  ::pulse::cdm::bind::ScalarData* bloodplasmaratio_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma_;
  ::pulse::cdm::bind::ScalarData* logp_;
  ::pulse::cdm::bind::ScalarData* oralabsorptionrateconstant_;
  int bindingprotein_;
  int ionicstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceTissuePharmacokineticsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceTissuePharmacokineticsData) */ {
 public:
  inline SubstanceTissuePharmacokineticsData() : SubstanceTissuePharmacokineticsData(nullptr) {}
  virtual ~SubstanceTissuePharmacokineticsData();

  SubstanceTissuePharmacokineticsData(const SubstanceTissuePharmacokineticsData& from);
  SubstanceTissuePharmacokineticsData(SubstanceTissuePharmacokineticsData&& from) noexcept
    : SubstanceTissuePharmacokineticsData() {
    *this = ::std::move(from);
  }

  inline SubstanceTissuePharmacokineticsData& operator=(const SubstanceTissuePharmacokineticsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceTissuePharmacokineticsData& operator=(SubstanceTissuePharmacokineticsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceTissuePharmacokineticsData& default_instance();

  static inline const SubstanceTissuePharmacokineticsData* internal_default_instance() {
    return reinterpret_cast<const SubstanceTissuePharmacokineticsData*>(
               &_SubstanceTissuePharmacokineticsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubstanceTissuePharmacokineticsData& a, SubstanceTissuePharmacokineticsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceTissuePharmacokineticsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceTissuePharmacokineticsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceTissuePharmacokineticsData* New() const final {
    return CreateMaybeMessage<SubstanceTissuePharmacokineticsData>(nullptr);
  }

  SubstanceTissuePharmacokineticsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceTissuePharmacokineticsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceTissuePharmacokineticsData& from);
  void MergeFrom(const SubstanceTissuePharmacokineticsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceTissuePharmacokineticsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceTissuePharmacokineticsData";
  }
  protected:
  explicit SubstanceTissuePharmacokineticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPartitionCoefficientFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.ScalarData PartitionCoefficient = 2;
  bool has_partitioncoefficient() const;
  private:
  bool _internal_has_partitioncoefficient() const;
  public:
  void clear_partitioncoefficient();
  const ::pulse::cdm::bind::ScalarData& partitioncoefficient() const;
  ::pulse::cdm::bind::ScalarData* release_partitioncoefficient();
  ::pulse::cdm::bind::ScalarData* mutable_partitioncoefficient();
  void set_allocated_partitioncoefficient(::pulse::cdm::bind::ScalarData* partitioncoefficient);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_partitioncoefficient() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_partitioncoefficient();
  public:
  void unsafe_arena_set_allocated_partitioncoefficient(
      ::pulse::cdm::bind::ScalarData* partitioncoefficient);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_partitioncoefficient();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::ScalarData* partitioncoefficient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstancePharmacokineticsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstancePharmacokineticsData) */ {
 public:
  inline SubstancePharmacokineticsData() : SubstancePharmacokineticsData(nullptr) {}
  virtual ~SubstancePharmacokineticsData();

  SubstancePharmacokineticsData(const SubstancePharmacokineticsData& from);
  SubstancePharmacokineticsData(SubstancePharmacokineticsData&& from) noexcept
    : SubstancePharmacokineticsData() {
    *this = ::std::move(from);
  }

  inline SubstancePharmacokineticsData& operator=(const SubstancePharmacokineticsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstancePharmacokineticsData& operator=(SubstancePharmacokineticsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstancePharmacokineticsData& default_instance();

  static inline const SubstancePharmacokineticsData* internal_default_instance() {
    return reinterpret_cast<const SubstancePharmacokineticsData*>(
               &_SubstancePharmacokineticsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubstancePharmacokineticsData& a, SubstancePharmacokineticsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstancePharmacokineticsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstancePharmacokineticsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstancePharmacokineticsData* New() const final {
    return CreateMaybeMessage<SubstancePharmacokineticsData>(nullptr);
  }

  SubstancePharmacokineticsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstancePharmacokineticsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstancePharmacokineticsData& from);
  void MergeFrom(const SubstancePharmacokineticsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstancePharmacokineticsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstancePharmacokineticsData";
  }
  protected:
  explicit SubstancePharmacokineticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTissueKineticsFieldNumber = 2,
    kPhysicochemicalsFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.SubstanceTissuePharmacokineticsData TissueKinetics = 2;
  int tissuekinetics_size() const;
  private:
  int _internal_tissuekinetics_size() const;
  public:
  void clear_tissuekinetics();
  ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* mutable_tissuekinetics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >*
      mutable_tissuekinetics();
  private:
  const ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData& _internal_tissuekinetics(int index) const;
  ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* _internal_add_tissuekinetics();
  public:
  const ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData& tissuekinetics(int index) const;
  ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* add_tissuekinetics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >&
      tissuekinetics() const;

  // .pulse.cdm.bind.SubstancePhysicochemicalsData Physicochemicals = 1;
  bool has_physicochemicals() const;
  private:
  bool _internal_has_physicochemicals() const;
  public:
  void clear_physicochemicals();
  const ::pulse::cdm::bind::SubstancePhysicochemicalsData& physicochemicals() const;
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* release_physicochemicals();
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* mutable_physicochemicals();
  void set_allocated_physicochemicals(::pulse::cdm::bind::SubstancePhysicochemicalsData* physicochemicals);
  private:
  const ::pulse::cdm::bind::SubstancePhysicochemicalsData& _internal_physicochemicals() const;
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* _internal_mutable_physicochemicals();
  public:
  void unsafe_arena_set_allocated_physicochemicals(
      ::pulse::cdm::bind::SubstancePhysicochemicalsData* physicochemicals);
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* unsafe_arena_release_physicochemicals();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstancePharmacokineticsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData > tissuekinetics_;
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* physicochemicals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstancePharmacodynamicsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstancePharmacodynamicsData) */ {
 public:
  inline SubstancePharmacodynamicsData() : SubstancePharmacodynamicsData(nullptr) {}
  virtual ~SubstancePharmacodynamicsData();

  SubstancePharmacodynamicsData(const SubstancePharmacodynamicsData& from);
  SubstancePharmacodynamicsData(SubstancePharmacodynamicsData&& from) noexcept
    : SubstancePharmacodynamicsData() {
    *this = ::std::move(from);
  }

  inline SubstancePharmacodynamicsData& operator=(const SubstancePharmacodynamicsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstancePharmacodynamicsData& operator=(SubstancePharmacodynamicsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstancePharmacodynamicsData& default_instance();

  static inline const SubstancePharmacodynamicsData* internal_default_instance() {
    return reinterpret_cast<const SubstancePharmacodynamicsData*>(
               &_SubstancePharmacodynamicsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubstancePharmacodynamicsData& a, SubstancePharmacodynamicsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstancePharmacodynamicsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstancePharmacodynamicsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstancePharmacodynamicsData* New() const final {
    return CreateMaybeMessage<SubstancePharmacodynamicsData>(nullptr);
  }

  SubstancePharmacodynamicsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstancePharmacodynamicsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstancePharmacodynamicsData& from);
  void MergeFrom(const SubstancePharmacodynamicsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstancePharmacodynamicsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstancePharmacodynamicsData";
  }
  protected:
  explicit SubstancePharmacodynamicsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBronchodilationFieldNumber = 1,
    kDiastolicPressureModifierFieldNumber = 2,
    kEC50FieldNumber = 3,
    kEMaxShapeParameterFieldNumber = 4,
    kHeartRateModifierFieldNumber = 5,
    kNeuromuscularBlockFieldNumber = 6,
    kPupillaryResponseFieldNumber = 7,
    kRespirationRateModifierFieldNumber = 8,
    kSedationFieldNumber = 9,
    kSystolicPressureModifierFieldNumber = 10,
    kTidalVolumeModifierFieldNumber = 11,
    kTubularPermeabilityModifierFieldNumber = 12,
  };
  // .pulse.cdm.bind.ScalarNegative1To1Data Bronchodilation = 1;
  bool has_bronchodilation() const;
  private:
  bool _internal_has_bronchodilation() const;
  public:
  void clear_bronchodilation();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchodilation() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_bronchodilation();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_bronchodilation();
  void set_allocated_bronchodilation(::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilation);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_bronchodilation() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_bronchodilation();
  public:
  void unsafe_arena_set_allocated_bronchodilation(
      ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilation);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_bronchodilation();

  // .pulse.cdm.bind.ScalarNegative1To1Data DiastolicPressureModifier = 2;
  bool has_diastolicpressuremodifier() const;
  private:
  bool _internal_has_diastolicpressuremodifier() const;
  public:
  void clear_diastolicpressuremodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& diastolicpressuremodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_diastolicpressuremodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_diastolicpressuremodifier();
  void set_allocated_diastolicpressuremodifier(::pulse::cdm::bind::ScalarNegative1To1Data* diastolicpressuremodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_diastolicpressuremodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_diastolicpressuremodifier();
  public:
  void unsafe_arena_set_allocated_diastolicpressuremodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* diastolicpressuremodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_diastolicpressuremodifier();

  // .pulse.cdm.bind.ScalarMassPerVolumeData EC50 = 3;
  bool has_ec50() const;
  private:
  bool _internal_has_ec50() const;
  public:
  void clear_ec50();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& ec50() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_ec50();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_ec50();
  void set_allocated_ec50(::pulse::cdm::bind::ScalarMassPerVolumeData* ec50);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_ec50() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_ec50();
  public:
  void unsafe_arena_set_allocated_ec50(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* ec50);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_ec50();

  // .pulse.cdm.bind.ScalarData EMaxShapeParameter = 4;
  bool has_emaxshapeparameter() const;
  private:
  bool _internal_has_emaxshapeparameter() const;
  public:
  void clear_emaxshapeparameter();
  const ::pulse::cdm::bind::ScalarData& emaxshapeparameter() const;
  ::pulse::cdm::bind::ScalarData* release_emaxshapeparameter();
  ::pulse::cdm::bind::ScalarData* mutable_emaxshapeparameter();
  void set_allocated_emaxshapeparameter(::pulse::cdm::bind::ScalarData* emaxshapeparameter);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_emaxshapeparameter() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_emaxshapeparameter();
  public:
  void unsafe_arena_set_allocated_emaxshapeparameter(
      ::pulse::cdm::bind::ScalarData* emaxshapeparameter);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_emaxshapeparameter();

  // .pulse.cdm.bind.ScalarNegative1To1Data HeartRateModifier = 5;
  bool has_heartratemodifier() const;
  private:
  bool _internal_has_heartratemodifier() const;
  public:
  void clear_heartratemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& heartratemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_heartratemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_heartratemodifier();
  void set_allocated_heartratemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* heartratemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_heartratemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_heartratemodifier();
  public:
  void unsafe_arena_set_allocated_heartratemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* heartratemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_heartratemodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data NeuromuscularBlock = 6;
  bool has_neuromuscularblock() const;
  private:
  bool _internal_has_neuromuscularblock() const;
  public:
  void clear_neuromuscularblock();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& neuromuscularblock() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_neuromuscularblock();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_neuromuscularblock();
  void set_allocated_neuromuscularblock(::pulse::cdm::bind::ScalarNegative1To1Data* neuromuscularblock);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_neuromuscularblock() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_neuromuscularblock();
  public:
  void unsafe_arena_set_allocated_neuromuscularblock(
      ::pulse::cdm::bind::ScalarNegative1To1Data* neuromuscularblock);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_neuromuscularblock();

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 7;
  bool has_pupillaryresponse() const;
  private:
  bool _internal_has_pupillaryresponse() const;
  public:
  void clear_pupillaryresponse();
  const ::pulse::cdm::bind::PupillaryResponseData& pupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* release_pupillaryresponse();
  ::pulse::cdm::bind::PupillaryResponseData* mutable_pupillaryresponse();
  void set_allocated_pupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse);
  private:
  const ::pulse::cdm::bind::PupillaryResponseData& _internal_pupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* _internal_mutable_pupillaryresponse();
  public:
  void unsafe_arena_set_allocated_pupillaryresponse(
      ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse);
  ::pulse::cdm::bind::PupillaryResponseData* unsafe_arena_release_pupillaryresponse();

  // .pulse.cdm.bind.ScalarNegative1To1Data RespirationRateModifier = 8;
  bool has_respirationratemodifier() const;
  private:
  bool _internal_has_respirationratemodifier() const;
  public:
  void clear_respirationratemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& respirationratemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_respirationratemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_respirationratemodifier();
  void set_allocated_respirationratemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* respirationratemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_respirationratemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_respirationratemodifier();
  public:
  void unsafe_arena_set_allocated_respirationratemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* respirationratemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_respirationratemodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data Sedation = 9;
  bool has_sedation() const;
  private:
  bool _internal_has_sedation() const;
  public:
  void clear_sedation();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& sedation() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_sedation();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_sedation();
  void set_allocated_sedation(::pulse::cdm::bind::ScalarNegative1To1Data* sedation);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_sedation() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_sedation();
  public:
  void unsafe_arena_set_allocated_sedation(
      ::pulse::cdm::bind::ScalarNegative1To1Data* sedation);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_sedation();

  // .pulse.cdm.bind.ScalarNegative1To1Data SystolicPressureModifier = 10;
  bool has_systolicpressuremodifier() const;
  private:
  bool _internal_has_systolicpressuremodifier() const;
  public:
  void clear_systolicpressuremodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& systolicpressuremodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_systolicpressuremodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_systolicpressuremodifier();
  void set_allocated_systolicpressuremodifier(::pulse::cdm::bind::ScalarNegative1To1Data* systolicpressuremodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_systolicpressuremodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_systolicpressuremodifier();
  public:
  void unsafe_arena_set_allocated_systolicpressuremodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* systolicpressuremodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_systolicpressuremodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data TidalVolumeModifier = 11;
  bool has_tidalvolumemodifier() const;
  private:
  bool _internal_has_tidalvolumemodifier() const;
  public:
  void clear_tidalvolumemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& tidalvolumemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_tidalvolumemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_tidalvolumemodifier();
  void set_allocated_tidalvolumemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* tidalvolumemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_tidalvolumemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_tidalvolumemodifier();
  public:
  void unsafe_arena_set_allocated_tidalvolumemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* tidalvolumemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_tidalvolumemodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityModifier = 12;
  bool has_tubularpermeabilitymodifier() const;
  private:
  bool _internal_has_tubularpermeabilitymodifier() const;
  public:
  void clear_tubularpermeabilitymodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& tubularpermeabilitymodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_tubularpermeabilitymodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_tubularpermeabilitymodifier();
  void set_allocated_tubularpermeabilitymodifier(::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitymodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_tubularpermeabilitymodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_tubularpermeabilitymodifier();
  public:
  void unsafe_arena_set_allocated_tubularpermeabilitymodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitymodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_tubularpermeabilitymodifier();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstancePharmacodynamicsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilation_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* diastolicpressuremodifier_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* ec50_;
  ::pulse::cdm::bind::ScalarData* emaxshapeparameter_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* heartratemodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* neuromuscularblock_;
  ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* respirationratemodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* sedation_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* systolicpressuremodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* tidalvolumemodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitymodifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceSystemicClearanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceSystemicClearanceData) */ {
 public:
  inline SubstanceSystemicClearanceData() : SubstanceSystemicClearanceData(nullptr) {}
  virtual ~SubstanceSystemicClearanceData();

  SubstanceSystemicClearanceData(const SubstanceSystemicClearanceData& from);
  SubstanceSystemicClearanceData(SubstanceSystemicClearanceData&& from) noexcept
    : SubstanceSystemicClearanceData() {
    *this = ::std::move(from);
  }

  inline SubstanceSystemicClearanceData& operator=(const SubstanceSystemicClearanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceSystemicClearanceData& operator=(SubstanceSystemicClearanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceSystemicClearanceData& default_instance();

  static inline const SubstanceSystemicClearanceData* internal_default_instance() {
    return reinterpret_cast<const SubstanceSystemicClearanceData*>(
               &_SubstanceSystemicClearanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubstanceSystemicClearanceData& a, SubstanceSystemicClearanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceSystemicClearanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceSystemicClearanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceSystemicClearanceData* New() const final {
    return CreateMaybeMessage<SubstanceSystemicClearanceData>(nullptr);
  }

  SubstanceSystemicClearanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceSystemicClearanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceSystemicClearanceData& from);
  void MergeFrom(const SubstanceSystemicClearanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceSystemicClearanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceSystemicClearanceData";
  }
  protected:
  explicit SubstanceSystemicClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionExcretedInFecesFieldNumber = 1,
    kFractionExcretedInUrineFieldNumber = 2,
    kFractionMetabolizedInGutFieldNumber = 3,
    kFractionUnboundInPlasmaFieldNumber = 4,
    kIntrinsicClearanceFieldNumber = 5,
    kRenalClearanceFieldNumber = 6,
    kSystemicClearanceFieldNumber = 7,
  };
  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInFeces = 1;
  bool has_fractionexcretedinfeces() const;
  private:
  bool _internal_has_fractionexcretedinfeces() const;
  public:
  void clear_fractionexcretedinfeces();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionexcretedinfeces() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionexcretedinfeces();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionexcretedinfeces();
  void set_allocated_fractionexcretedinfeces(::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinfeces);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionexcretedinfeces() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionexcretedinfeces();
  public:
  void unsafe_arena_set_allocated_fractionexcretedinfeces(
      ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinfeces);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionexcretedinfeces();

  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInUrine = 2;
  bool has_fractionexcretedinurine() const;
  private:
  bool _internal_has_fractionexcretedinurine() const;
  public:
  void clear_fractionexcretedinurine();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionexcretedinurine() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionexcretedinurine();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionexcretedinurine();
  void set_allocated_fractionexcretedinurine(::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinurine);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionexcretedinurine() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionexcretedinurine();
  public:
  void unsafe_arena_set_allocated_fractionexcretedinurine(
      ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinurine);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionexcretedinurine();

  // .pulse.cdm.bind.Scalar0To1Data FractionMetabolizedInGut = 3;
  bool has_fractionmetabolizedingut() const;
  private:
  bool _internal_has_fractionmetabolizedingut() const;
  public:
  void clear_fractionmetabolizedingut();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionmetabolizedingut() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionmetabolizedingut();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionmetabolizedingut();
  void set_allocated_fractionmetabolizedingut(::pulse::cdm::bind::Scalar0To1Data* fractionmetabolizedingut);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionmetabolizedingut() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionmetabolizedingut();
  public:
  void unsafe_arena_set_allocated_fractionmetabolizedingut(
      ::pulse::cdm::bind::Scalar0To1Data* fractionmetabolizedingut);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionmetabolizedingut();

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  bool has_fractionunboundinplasma() const;
  private:
  bool _internal_has_fractionunboundinplasma() const;
  public:
  void clear_fractionunboundinplasma();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionunboundinplasma();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionunboundinplasma();
  void set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionunboundinplasma();
  public:
  void unsafe_arena_set_allocated_fractionunboundinplasma(
      ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionunboundinplasma();

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData IntrinsicClearance = 5;
  bool has_intrinsicclearance() const;
  private:
  bool _internal_has_intrinsicclearance() const;
  public:
  void clear_intrinsicclearance();
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& intrinsicclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* release_intrinsicclearance();
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* mutable_intrinsicclearance();
  void set_allocated_intrinsicclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* intrinsicclearance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& _internal_intrinsicclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* _internal_mutable_intrinsicclearance();
  public:
  void unsafe_arena_set_allocated_intrinsicclearance(
      ::pulse::cdm::bind::ScalarVolumePerTimeMassData* intrinsicclearance);
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* unsafe_arena_release_intrinsicclearance();

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData RenalClearance = 6;
  bool has_renalclearance() const;
  private:
  bool _internal_has_renalclearance() const;
  public:
  void clear_renalclearance();
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& renalclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* release_renalclearance();
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* mutable_renalclearance();
  void set_allocated_renalclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* renalclearance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& _internal_renalclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* _internal_mutable_renalclearance();
  public:
  void unsafe_arena_set_allocated_renalclearance(
      ::pulse::cdm::bind::ScalarVolumePerTimeMassData* renalclearance);
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* unsafe_arena_release_renalclearance();

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData SystemicClearance = 7;
  bool has_systemicclearance() const;
  private:
  bool _internal_has_systemicclearance() const;
  public:
  void clear_systemicclearance();
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& systemicclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* release_systemicclearance();
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* mutable_systemicclearance();
  void set_allocated_systemicclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* systemicclearance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& _internal_systemicclearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* _internal_mutable_systemicclearance();
  public:
  void unsafe_arena_set_allocated_systemicclearance(
      ::pulse::cdm::bind::ScalarVolumePerTimeMassData* systemicclearance);
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* unsafe_arena_release_systemicclearance();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceSystemicClearanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinfeces_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinurine_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionmetabolizedingut_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma_;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* intrinsicclearance_;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* renalclearance_;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* systemicclearance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceRenalRegulationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceRenalRegulationData) */ {
 public:
  inline SubstanceRenalRegulationData() : SubstanceRenalRegulationData(nullptr) {}
  virtual ~SubstanceRenalRegulationData();

  SubstanceRenalRegulationData(const SubstanceRenalRegulationData& from);
  SubstanceRenalRegulationData(SubstanceRenalRegulationData&& from) noexcept
    : SubstanceRenalRegulationData() {
    *this = ::std::move(from);
  }

  inline SubstanceRenalRegulationData& operator=(const SubstanceRenalRegulationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceRenalRegulationData& operator=(SubstanceRenalRegulationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceRenalRegulationData& default_instance();

  static inline const SubstanceRenalRegulationData* internal_default_instance() {
    return reinterpret_cast<const SubstanceRenalRegulationData*>(
               &_SubstanceRenalRegulationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubstanceRenalRegulationData& a, SubstanceRenalRegulationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceRenalRegulationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceRenalRegulationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceRenalRegulationData* New() const final {
    return CreateMaybeMessage<SubstanceRenalRegulationData>(nullptr);
  }

  SubstanceRenalRegulationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceRenalRegulationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceRenalRegulationData& from);
  void MergeFrom(const SubstanceRenalRegulationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceRenalRegulationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceRenalRegulationData";
  }
  protected:
  explicit SubstanceRenalRegulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionUnboundInPlasmaFieldNumber = 2,
    kReabsorptionRatioFieldNumber = 3,
    kTransportMaximumFieldNumber = 4,
    kChargeInBloodFieldNumber = 1,
  };
  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 2;
  bool has_fractionunboundinplasma() const;
  private:
  bool _internal_has_fractionunboundinplasma() const;
  public:
  void clear_fractionunboundinplasma();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionunboundinplasma();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionunboundinplasma();
  void set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionunboundinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionunboundinplasma();
  public:
  void unsafe_arena_set_allocated_fractionunboundinplasma(
      ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionunboundinplasma();

  // .pulse.cdm.bind.ScalarData ReabsorptionRatio = 3;
  bool has_reabsorptionratio() const;
  private:
  bool _internal_has_reabsorptionratio() const;
  public:
  void clear_reabsorptionratio();
  const ::pulse::cdm::bind::ScalarData& reabsorptionratio() const;
  ::pulse::cdm::bind::ScalarData* release_reabsorptionratio();
  ::pulse::cdm::bind::ScalarData* mutable_reabsorptionratio();
  void set_allocated_reabsorptionratio(::pulse::cdm::bind::ScalarData* reabsorptionratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_reabsorptionratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_reabsorptionratio();
  public:
  void unsafe_arena_set_allocated_reabsorptionratio(
      ::pulse::cdm::bind::ScalarData* reabsorptionratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_reabsorptionratio();

  // .pulse.cdm.bind.ScalarMassPerTimeData TransportMaximum = 4;
  bool has_transportmaximum() const;
  private:
  bool _internal_has_transportmaximum() const;
  public:
  void clear_transportmaximum();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& transportmaximum() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_transportmaximum();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_transportmaximum();
  void set_allocated_transportmaximum(::pulse::cdm::bind::ScalarMassPerTimeData* transportmaximum);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_transportmaximum() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_transportmaximum();
  public:
  void unsafe_arena_set_allocated_transportmaximum(
      ::pulse::cdm::bind::ScalarMassPerTimeData* transportmaximum);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_transportmaximum();

  // .pulse.cdm.bind.eCharge ChargeInBlood = 1;
  void clear_chargeinblood();
  ::pulse::cdm::bind::eCharge chargeinblood() const;
  void set_chargeinblood(::pulse::cdm::bind::eCharge value);
  private:
  ::pulse::cdm::bind::eCharge _internal_chargeinblood() const;
  void _internal_set_chargeinblood(::pulse::cdm::bind::eCharge value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceRenalRegulationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma_;
  ::pulse::cdm::bind::ScalarData* reabsorptionratio_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* transportmaximum_;
  int chargeinblood_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceRenalClearanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceRenalClearanceData) */ {
 public:
  inline SubstanceRenalClearanceData() : SubstanceRenalClearanceData(nullptr) {}
  virtual ~SubstanceRenalClearanceData();

  SubstanceRenalClearanceData(const SubstanceRenalClearanceData& from);
  SubstanceRenalClearanceData(SubstanceRenalClearanceData&& from) noexcept
    : SubstanceRenalClearanceData() {
    *this = ::std::move(from);
  }

  inline SubstanceRenalClearanceData& operator=(const SubstanceRenalClearanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceRenalClearanceData& operator=(SubstanceRenalClearanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceRenalClearanceData& default_instance();

  static inline const SubstanceRenalClearanceData* internal_default_instance() {
    return reinterpret_cast<const SubstanceRenalClearanceData*>(
               &_SubstanceRenalClearanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SubstanceRenalClearanceData& a, SubstanceRenalClearanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceRenalClearanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceRenalClearanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceRenalClearanceData* New() const final {
    return CreateMaybeMessage<SubstanceRenalClearanceData>(nullptr);
  }

  SubstanceRenalClearanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceRenalClearanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceRenalClearanceData& from);
  void MergeFrom(const SubstanceRenalClearanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceRenalClearanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceRenalClearanceData";
  }
  protected:
  explicit SubstanceRenalClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearanceFieldNumber = 1,
    kRegulationFieldNumber = 2,
    kFiltrationRateFieldNumber = 3,
    kReabsorptionRateFieldNumber = 4,
    kExcretionRateFieldNumber = 5,
    kGlomerularFilterabilityFieldNumber = 6,
  };
  // .pulse.cdm.bind.ScalarVolumePerTimeMassData Clearance = 1;
  bool has_clearance() const;
  private:
  bool _internal_has_clearance() const;
  public:
  void clear_clearance();
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& clearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* release_clearance();
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* mutable_clearance();
  void set_allocated_clearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* clearance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& _internal_clearance() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* _internal_mutable_clearance();
  public:
  void unsafe_arena_set_allocated_clearance(
      ::pulse::cdm::bind::ScalarVolumePerTimeMassData* clearance);
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* unsafe_arena_release_clearance();

  // .pulse.cdm.bind.SubstanceRenalRegulationData Regulation = 2;
  bool has_regulation() const;
  private:
  bool _internal_has_regulation() const;
  public:
  void clear_regulation();
  const ::pulse::cdm::bind::SubstanceRenalRegulationData& regulation() const;
  ::pulse::cdm::bind::SubstanceRenalRegulationData* release_regulation();
  ::pulse::cdm::bind::SubstanceRenalRegulationData* mutable_regulation();
  void set_allocated_regulation(::pulse::cdm::bind::SubstanceRenalRegulationData* regulation);
  private:
  const ::pulse::cdm::bind::SubstanceRenalRegulationData& _internal_regulation() const;
  ::pulse::cdm::bind::SubstanceRenalRegulationData* _internal_mutable_regulation();
  public:
  void unsafe_arena_set_allocated_regulation(
      ::pulse::cdm::bind::SubstanceRenalRegulationData* regulation);
  ::pulse::cdm::bind::SubstanceRenalRegulationData* unsafe_arena_release_regulation();

  // .pulse.cdm.bind.ScalarMassPerTimeData FiltrationRate = 3;
  bool has_filtrationrate() const;
  private:
  bool _internal_has_filtrationrate() const;
  public:
  void clear_filtrationrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& filtrationrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_filtrationrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_filtrationrate();
  void set_allocated_filtrationrate(::pulse::cdm::bind::ScalarMassPerTimeData* filtrationrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_filtrationrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_filtrationrate();
  public:
  void unsafe_arena_set_allocated_filtrationrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* filtrationrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_filtrationrate();

  // .pulse.cdm.bind.ScalarMassPerTimeData ReabsorptionRate = 4;
  bool has_reabsorptionrate() const;
  private:
  bool _internal_has_reabsorptionrate() const;
  public:
  void clear_reabsorptionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& reabsorptionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_reabsorptionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_reabsorptionrate();
  void set_allocated_reabsorptionrate(::pulse::cdm::bind::ScalarMassPerTimeData* reabsorptionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_reabsorptionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_reabsorptionrate();
  public:
  void unsafe_arena_set_allocated_reabsorptionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* reabsorptionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_reabsorptionrate();

  // .pulse.cdm.bind.ScalarMassPerTimeData ExcretionRate = 5;
  bool has_excretionrate() const;
  private:
  bool _internal_has_excretionrate() const;
  public:
  void clear_excretionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& excretionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_excretionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_excretionrate();
  void set_allocated_excretionrate(::pulse::cdm::bind::ScalarMassPerTimeData* excretionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_excretionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_excretionrate();
  public:
  void unsafe_arena_set_allocated_excretionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* excretionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_excretionrate();

  // .pulse.cdm.bind.ScalarData GlomerularFilterability = 6;
  bool has_glomerularfilterability() const;
  private:
  bool _internal_has_glomerularfilterability() const;
  public:
  void clear_glomerularfilterability();
  const ::pulse::cdm::bind::ScalarData& glomerularfilterability() const;
  ::pulse::cdm::bind::ScalarData* release_glomerularfilterability();
  ::pulse::cdm::bind::ScalarData* mutable_glomerularfilterability();
  void set_allocated_glomerularfilterability(::pulse::cdm::bind::ScalarData* glomerularfilterability);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_glomerularfilterability() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_glomerularfilterability();
  public:
  void unsafe_arena_set_allocated_glomerularfilterability(
      ::pulse::cdm::bind::ScalarData* glomerularfilterability);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_glomerularfilterability();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceRenalClearanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* clearance_;
  ::pulse::cdm::bind::SubstanceRenalRegulationData* regulation_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* filtrationrate_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* reabsorptionrate_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* excretionrate_;
  ::pulse::cdm::bind::ScalarData* glomerularfilterability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceClearanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceClearanceData) */ {
 public:
  inline SubstanceClearanceData() : SubstanceClearanceData(nullptr) {}
  virtual ~SubstanceClearanceData();

  SubstanceClearanceData(const SubstanceClearanceData& from);
  SubstanceClearanceData(SubstanceClearanceData&& from) noexcept
    : SubstanceClearanceData() {
    *this = ::std::move(from);
  }

  inline SubstanceClearanceData& operator=(const SubstanceClearanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceClearanceData& operator=(SubstanceClearanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceClearanceData& default_instance();

  static inline const SubstanceClearanceData* internal_default_instance() {
    return reinterpret_cast<const SubstanceClearanceData*>(
               &_SubstanceClearanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubstanceClearanceData& a, SubstanceClearanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceClearanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceClearanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceClearanceData* New() const final {
    return CreateMaybeMessage<SubstanceClearanceData>(nullptr);
  }

  SubstanceClearanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceClearanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceClearanceData& from);
  void MergeFrom(const SubstanceClearanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceClearanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceClearanceData";
  }
  protected:
  explicit SubstanceClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemicClearanceFieldNumber = 1,
    kRenalClearanceFieldNumber = 2,
  };
  // .pulse.cdm.bind.SubstanceSystemicClearanceData SystemicClearance = 1;
  bool has_systemicclearance() const;
  private:
  bool _internal_has_systemicclearance() const;
  public:
  void clear_systemicclearance();
  const ::pulse::cdm::bind::SubstanceSystemicClearanceData& systemicclearance() const;
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* release_systemicclearance();
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* mutable_systemicclearance();
  void set_allocated_systemicclearance(::pulse::cdm::bind::SubstanceSystemicClearanceData* systemicclearance);
  private:
  const ::pulse::cdm::bind::SubstanceSystemicClearanceData& _internal_systemicclearance() const;
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* _internal_mutable_systemicclearance();
  public:
  void unsafe_arena_set_allocated_systemicclearance(
      ::pulse::cdm::bind::SubstanceSystemicClearanceData* systemicclearance);
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* unsafe_arena_release_systemicclearance();

  // .pulse.cdm.bind.SubstanceRenalClearanceData RenalClearance = 2;
  bool has_renalclearance() const;
  private:
  bool _internal_has_renalclearance() const;
  public:
  void clear_renalclearance();
  const ::pulse::cdm::bind::SubstanceRenalClearanceData& renalclearance() const;
  ::pulse::cdm::bind::SubstanceRenalClearanceData* release_renalclearance();
  ::pulse::cdm::bind::SubstanceRenalClearanceData* mutable_renalclearance();
  void set_allocated_renalclearance(::pulse::cdm::bind::SubstanceRenalClearanceData* renalclearance);
  private:
  const ::pulse::cdm::bind::SubstanceRenalClearanceData& _internal_renalclearance() const;
  ::pulse::cdm::bind::SubstanceRenalClearanceData* _internal_mutable_renalclearance();
  public:
  void unsafe_arena_set_allocated_renalclearance(
      ::pulse::cdm::bind::SubstanceRenalClearanceData* renalclearance);
  ::pulse::cdm::bind::SubstanceRenalClearanceData* unsafe_arena_release_renalclearance();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceClearanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* systemicclearance_;
  ::pulse::cdm::bind::SubstanceRenalClearanceData* renalclearance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceFractionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceFractionData) */ {
 public:
  inline SubstanceFractionData() : SubstanceFractionData(nullptr) {}
  virtual ~SubstanceFractionData();

  SubstanceFractionData(const SubstanceFractionData& from);
  SubstanceFractionData(SubstanceFractionData&& from) noexcept
    : SubstanceFractionData() {
    *this = ::std::move(from);
  }

  inline SubstanceFractionData& operator=(const SubstanceFractionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceFractionData& operator=(SubstanceFractionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceFractionData& default_instance();

  static inline const SubstanceFractionData* internal_default_instance() {
    return reinterpret_cast<const SubstanceFractionData*>(
               &_SubstanceFractionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubstanceFractionData& a, SubstanceFractionData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceFractionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceFractionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceFractionData* New() const final {
    return CreateMaybeMessage<SubstanceFractionData>(nullptr);
  }

  SubstanceFractionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceFractionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceFractionData& from);
  void MergeFrom(const SubstanceFractionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceFractionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceFractionData";
  }
  protected:
  explicit SubstanceFractionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.Scalar0To1Data Amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::pulse::cdm::bind::Scalar0To1Data& amount() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_amount();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_amount();
  void set_allocated_amount(::pulse::cdm::bind::Scalar0To1Data* amount);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_amount() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::pulse::cdm::bind::Scalar0To1Data* amount);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceFractionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::Scalar0To1Data* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceConcentrationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceConcentrationData) */ {
 public:
  inline SubstanceConcentrationData() : SubstanceConcentrationData(nullptr) {}
  virtual ~SubstanceConcentrationData();

  SubstanceConcentrationData(const SubstanceConcentrationData& from);
  SubstanceConcentrationData(SubstanceConcentrationData&& from) noexcept
    : SubstanceConcentrationData() {
    *this = ::std::move(from);
  }

  inline SubstanceConcentrationData& operator=(const SubstanceConcentrationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceConcentrationData& operator=(SubstanceConcentrationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceConcentrationData& default_instance();

  static inline const SubstanceConcentrationData* internal_default_instance() {
    return reinterpret_cast<const SubstanceConcentrationData*>(
               &_SubstanceConcentrationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubstanceConcentrationData& a, SubstanceConcentrationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceConcentrationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceConcentrationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceConcentrationData* New() const final {
    return CreateMaybeMessage<SubstanceConcentrationData>(nullptr);
  }

  SubstanceConcentrationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceConcentrationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceConcentrationData& from);
  void MergeFrom(const SubstanceConcentrationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceConcentrationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceConcentrationData";
  }
  protected:
  explicit SubstanceConcentrationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConcentrationFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  bool has_concentration() const;
  private:
  bool _internal_has_concentration() const;
  public:
  void clear_concentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_concentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_concentration();
  void set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_concentration();
  public:
  void unsafe_arena_set_allocated_concentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_concentration();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceConcentrationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceData) */ {
 public:
  inline SubstanceData() : SubstanceData(nullptr) {}
  virtual ~SubstanceData();

  SubstanceData(const SubstanceData& from);
  SubstanceData(SubstanceData&& from) noexcept
    : SubstanceData() {
    *this = ::std::move(from);
  }

  inline SubstanceData& operator=(const SubstanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceData& operator=(SubstanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceData& default_instance();

  static inline const SubstanceData* internal_default_instance() {
    return reinterpret_cast<const SubstanceData*>(
               &_SubstanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubstanceData& a, SubstanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceData* New() const final {
    return CreateMaybeMessage<SubstanceData>(nullptr);
  }

  SubstanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceData& from);
  void MergeFrom(const SubstanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceData";
  }
  protected:
  explicit SubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubstanceData_eState eState;
  static constexpr eState NullState =
    SubstanceData_eState_NullState;
  static constexpr eState Solid =
    SubstanceData_eState_Solid;
  static constexpr eState Liquid =
    SubstanceData_eState_Liquid;
  static constexpr eState Gas =
    SubstanceData_eState_Gas;
  static constexpr eState Molecular =
    SubstanceData_eState_Molecular;
  static inline bool eState_IsValid(int value) {
    return SubstanceData_eState_IsValid(value);
  }
  static constexpr eState eState_MIN =
    SubstanceData_eState_eState_MIN;
  static constexpr eState eState_MAX =
    SubstanceData_eState_eState_MAX;
  static constexpr int eState_ARRAYSIZE =
    SubstanceData_eState_eState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eState_descriptor() {
    return SubstanceData_eState_descriptor();
  }
  template<typename T>
  static inline const std::string& eState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eState_Name.");
    return SubstanceData_eState_Name(enum_t_value);
  }
  static inline bool eState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eState* value) {
    return SubstanceData_eState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDensityFieldNumber = 2,
    kMolarMassFieldNumber = 3,
    kMaximumDiffusionFluxFieldNumber = 5,
    kMichaelisCoefficientFieldNumber = 6,
    kAerosolizationFieldNumber = 7,
    kBloodConcentrationFieldNumber = 8,
    kMassInBodyFieldNumber = 9,
    kMassInBloodFieldNumber = 10,
    kMassInTissueFieldNumber = 11,
    kPlasmaConcentrationFieldNumber = 12,
    kSystemicMassClearedFieldNumber = 13,
    kTissueConcentrationFieldNumber = 14,
    kAlveolarTransferFieldNumber = 15,
    kDiffusingCapacityFieldNumber = 16,
    kEndTidalFractionFieldNumber = 17,
    kEndTidalPressureFieldNumber = 18,
    kRelativeDiffusionCoefficientFieldNumber = 19,
    kSolubilityCoefficientFieldNumber = 20,
    kClearanceFieldNumber = 21,
    kPharmacokineticsFieldNumber = 22,
    kPharmacodynamicsFieldNumber = 23,
    kStateFieldNumber = 4,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.ScalarMassPerVolumeData Density = 2;
  bool has_density() const;
  private:
  bool _internal_has_density() const;
  public:
  void clear_density();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& density() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_density();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_density();
  void set_allocated_density(::pulse::cdm::bind::ScalarMassPerVolumeData* density);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_density() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_density();
  public:
  void unsafe_arena_set_allocated_density(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* density);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_density();

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMass = 3;
  bool has_molarmass() const;
  private:
  bool _internal_has_molarmass() const;
  public:
  void clear_molarmass();
  const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmass() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* release_molarmass();
  ::pulse::cdm::bind::ScalarMassPerAmountData* mutable_molarmass();
  void set_allocated_molarmass(::pulse::cdm::bind::ScalarMassPerAmountData* molarmass);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAmountData& _internal_molarmass() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* _internal_mutable_molarmass();
  public:
  void unsafe_arena_set_allocated_molarmass(
      ::pulse::cdm::bind::ScalarMassPerAmountData* molarmass);
  ::pulse::cdm::bind::ScalarMassPerAmountData* unsafe_arena_release_molarmass();

  // .pulse.cdm.bind.ScalarMassPerAreaTimeData MaximumDiffusionFlux = 5;
  bool has_maximumdiffusionflux() const;
  private:
  bool _internal_has_maximumdiffusionflux() const;
  public:
  void clear_maximumdiffusionflux();
  const ::pulse::cdm::bind::ScalarMassPerAreaTimeData& maximumdiffusionflux() const;
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* release_maximumdiffusionflux();
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* mutable_maximumdiffusionflux();
  void set_allocated_maximumdiffusionflux(::pulse::cdm::bind::ScalarMassPerAreaTimeData* maximumdiffusionflux);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAreaTimeData& _internal_maximumdiffusionflux() const;
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* _internal_mutable_maximumdiffusionflux();
  public:
  void unsafe_arena_set_allocated_maximumdiffusionflux(
      ::pulse::cdm::bind::ScalarMassPerAreaTimeData* maximumdiffusionflux);
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* unsafe_arena_release_maximumdiffusionflux();

  // .pulse.cdm.bind.ScalarData MichaelisCoefficient = 6;
  bool has_michaeliscoefficient() const;
  private:
  bool _internal_has_michaeliscoefficient() const;
  public:
  void clear_michaeliscoefficient();
  const ::pulse::cdm::bind::ScalarData& michaeliscoefficient() const;
  ::pulse::cdm::bind::ScalarData* release_michaeliscoefficient();
  ::pulse::cdm::bind::ScalarData* mutable_michaeliscoefficient();
  void set_allocated_michaeliscoefficient(::pulse::cdm::bind::ScalarData* michaeliscoefficient);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_michaeliscoefficient() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_michaeliscoefficient();
  public:
  void unsafe_arena_set_allocated_michaeliscoefficient(
      ::pulse::cdm::bind::ScalarData* michaeliscoefficient);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_michaeliscoefficient();

  // .pulse.cdm.bind.SubstanceAerosolizationData Aerosolization = 7;
  bool has_aerosolization() const;
  private:
  bool _internal_has_aerosolization() const;
  public:
  void clear_aerosolization();
  const ::pulse::cdm::bind::SubstanceAerosolizationData& aerosolization() const;
  ::pulse::cdm::bind::SubstanceAerosolizationData* release_aerosolization();
  ::pulse::cdm::bind::SubstanceAerosolizationData* mutable_aerosolization();
  void set_allocated_aerosolization(::pulse::cdm::bind::SubstanceAerosolizationData* aerosolization);
  private:
  const ::pulse::cdm::bind::SubstanceAerosolizationData& _internal_aerosolization() const;
  ::pulse::cdm::bind::SubstanceAerosolizationData* _internal_mutable_aerosolization();
  public:
  void unsafe_arena_set_allocated_aerosolization(
      ::pulse::cdm::bind::SubstanceAerosolizationData* aerosolization);
  ::pulse::cdm::bind::SubstanceAerosolizationData* unsafe_arena_release_aerosolization();

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodConcentration = 8;
  bool has_bloodconcentration() const;
  private:
  bool _internal_has_bloodconcentration() const;
  public:
  void clear_bloodconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& bloodconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_bloodconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_bloodconcentration();
  void set_allocated_bloodconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* bloodconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_bloodconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_bloodconcentration();
  public:
  void unsafe_arena_set_allocated_bloodconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_bloodconcentration();

  // .pulse.cdm.bind.ScalarMassData MassInBody = 9;
  bool has_massinbody() const;
  private:
  bool _internal_has_massinbody() const;
  public:
  void clear_massinbody();
  const ::pulse::cdm::bind::ScalarMassData& massinbody() const;
  ::pulse::cdm::bind::ScalarMassData* release_massinbody();
  ::pulse::cdm::bind::ScalarMassData* mutable_massinbody();
  void set_allocated_massinbody(::pulse::cdm::bind::ScalarMassData* massinbody);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_massinbody() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_massinbody();
  public:
  void unsafe_arena_set_allocated_massinbody(
      ::pulse::cdm::bind::ScalarMassData* massinbody);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_massinbody();

  // .pulse.cdm.bind.ScalarMassData MassInBlood = 10;
  bool has_massinblood() const;
  private:
  bool _internal_has_massinblood() const;
  public:
  void clear_massinblood();
  const ::pulse::cdm::bind::ScalarMassData& massinblood() const;
  ::pulse::cdm::bind::ScalarMassData* release_massinblood();
  ::pulse::cdm::bind::ScalarMassData* mutable_massinblood();
  void set_allocated_massinblood(::pulse::cdm::bind::ScalarMassData* massinblood);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_massinblood() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_massinblood();
  public:
  void unsafe_arena_set_allocated_massinblood(
      ::pulse::cdm::bind::ScalarMassData* massinblood);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_massinblood();

  // .pulse.cdm.bind.ScalarMassData MassInTissue = 11;
  bool has_massintissue() const;
  private:
  bool _internal_has_massintissue() const;
  public:
  void clear_massintissue();
  const ::pulse::cdm::bind::ScalarMassData& massintissue() const;
  ::pulse::cdm::bind::ScalarMassData* release_massintissue();
  ::pulse::cdm::bind::ScalarMassData* mutable_massintissue();
  void set_allocated_massintissue(::pulse::cdm::bind::ScalarMassData* massintissue);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_massintissue() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_massintissue();
  public:
  void unsafe_arena_set_allocated_massintissue(
      ::pulse::cdm::bind::ScalarMassData* massintissue);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_massintissue();

  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaConcentration = 12;
  bool has_plasmaconcentration() const;
  private:
  bool _internal_has_plasmaconcentration() const;
  public:
  void clear_plasmaconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& plasmaconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_plasmaconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_plasmaconcentration();
  void set_allocated_plasmaconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* plasmaconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_plasmaconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_plasmaconcentration();
  public:
  void unsafe_arena_set_allocated_plasmaconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmaconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_plasmaconcentration();

  // .pulse.cdm.bind.ScalarMassData SystemicMassCleared = 13;
  bool has_systemicmasscleared() const;
  private:
  bool _internal_has_systemicmasscleared() const;
  public:
  void clear_systemicmasscleared();
  const ::pulse::cdm::bind::ScalarMassData& systemicmasscleared() const;
  ::pulse::cdm::bind::ScalarMassData* release_systemicmasscleared();
  ::pulse::cdm::bind::ScalarMassData* mutable_systemicmasscleared();
  void set_allocated_systemicmasscleared(::pulse::cdm::bind::ScalarMassData* systemicmasscleared);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_systemicmasscleared() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_systemicmasscleared();
  public:
  void unsafe_arena_set_allocated_systemicmasscleared(
      ::pulse::cdm::bind::ScalarMassData* systemicmasscleared);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_systemicmasscleared();

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 14;
  bool has_tissueconcentration() const;
  private:
  bool _internal_has_tissueconcentration() const;
  public:
  void clear_tissueconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& tissueconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_tissueconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_tissueconcentration();
  void set_allocated_tissueconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_tissueconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_tissueconcentration();
  public:
  void unsafe_arena_set_allocated_tissueconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_tissueconcentration();

  // .pulse.cdm.bind.ScalarVolumePerTimeData AlveolarTransfer = 15;
  bool has_alveolartransfer() const;
  private:
  bool _internal_has_alveolartransfer() const;
  public:
  void clear_alveolartransfer();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& alveolartransfer() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_alveolartransfer();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_alveolartransfer();
  void set_allocated_alveolartransfer(::pulse::cdm::bind::ScalarVolumePerTimeData* alveolartransfer);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_alveolartransfer() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_alveolartransfer();
  public:
  void unsafe_arena_set_allocated_alveolartransfer(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* alveolartransfer);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_alveolartransfer();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData DiffusingCapacity = 16;
  bool has_diffusingcapacity() const;
  private:
  bool _internal_has_diffusingcapacity() const;
  public:
  void clear_diffusingcapacity();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& diffusingcapacity() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* release_diffusingcapacity();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* mutable_diffusingcapacity();
  void set_allocated_diffusingcapacity(::pulse::cdm::bind::ScalarVolumePerTimePressureData* diffusingcapacity);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& _internal_diffusingcapacity() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* _internal_mutable_diffusingcapacity();
  public:
  void unsafe_arena_set_allocated_diffusingcapacity(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureData* diffusingcapacity);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* unsafe_arena_release_diffusingcapacity();

  // .pulse.cdm.bind.Scalar0To1Data EndTidalFraction = 17;
  bool has_endtidalfraction() const;
  private:
  bool _internal_has_endtidalfraction() const;
  public:
  void clear_endtidalfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& endtidalfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_endtidalfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_endtidalfraction();
  void set_allocated_endtidalfraction(::pulse::cdm::bind::Scalar0To1Data* endtidalfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_endtidalfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_endtidalfraction();
  public:
  void unsafe_arena_set_allocated_endtidalfraction(
      ::pulse::cdm::bind::Scalar0To1Data* endtidalfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_endtidalfraction();

  // .pulse.cdm.bind.ScalarPressureData EndTidalPressure = 18;
  bool has_endtidalpressure() const;
  private:
  bool _internal_has_endtidalpressure() const;
  public:
  void clear_endtidalpressure();
  const ::pulse::cdm::bind::ScalarPressureData& endtidalpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_endtidalpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_endtidalpressure();
  void set_allocated_endtidalpressure(::pulse::cdm::bind::ScalarPressureData* endtidalpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_endtidalpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_endtidalpressure();
  public:
  void unsafe_arena_set_allocated_endtidalpressure(
      ::pulse::cdm::bind::ScalarPressureData* endtidalpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_endtidalpressure();

  // .pulse.cdm.bind.ScalarData RelativeDiffusionCoefficient = 19;
  bool has_relativediffusioncoefficient() const;
  private:
  bool _internal_has_relativediffusioncoefficient() const;
  public:
  void clear_relativediffusioncoefficient();
  const ::pulse::cdm::bind::ScalarData& relativediffusioncoefficient() const;
  ::pulse::cdm::bind::ScalarData* release_relativediffusioncoefficient();
  ::pulse::cdm::bind::ScalarData* mutable_relativediffusioncoefficient();
  void set_allocated_relativediffusioncoefficient(::pulse::cdm::bind::ScalarData* relativediffusioncoefficient);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_relativediffusioncoefficient() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_relativediffusioncoefficient();
  public:
  void unsafe_arena_set_allocated_relativediffusioncoefficient(
      ::pulse::cdm::bind::ScalarData* relativediffusioncoefficient);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_relativediffusioncoefficient();

  // .pulse.cdm.bind.ScalarInversePressureData SolubilityCoefficient = 20;
  bool has_solubilitycoefficient() const;
  private:
  bool _internal_has_solubilitycoefficient() const;
  public:
  void clear_solubilitycoefficient();
  const ::pulse::cdm::bind::ScalarInversePressureData& solubilitycoefficient() const;
  ::pulse::cdm::bind::ScalarInversePressureData* release_solubilitycoefficient();
  ::pulse::cdm::bind::ScalarInversePressureData* mutable_solubilitycoefficient();
  void set_allocated_solubilitycoefficient(::pulse::cdm::bind::ScalarInversePressureData* solubilitycoefficient);
  private:
  const ::pulse::cdm::bind::ScalarInversePressureData& _internal_solubilitycoefficient() const;
  ::pulse::cdm::bind::ScalarInversePressureData* _internal_mutable_solubilitycoefficient();
  public:
  void unsafe_arena_set_allocated_solubilitycoefficient(
      ::pulse::cdm::bind::ScalarInversePressureData* solubilitycoefficient);
  ::pulse::cdm::bind::ScalarInversePressureData* unsafe_arena_release_solubilitycoefficient();

  // .pulse.cdm.bind.SubstanceClearanceData Clearance = 21;
  bool has_clearance() const;
  private:
  bool _internal_has_clearance() const;
  public:
  void clear_clearance();
  const ::pulse::cdm::bind::SubstanceClearanceData& clearance() const;
  ::pulse::cdm::bind::SubstanceClearanceData* release_clearance();
  ::pulse::cdm::bind::SubstanceClearanceData* mutable_clearance();
  void set_allocated_clearance(::pulse::cdm::bind::SubstanceClearanceData* clearance);
  private:
  const ::pulse::cdm::bind::SubstanceClearanceData& _internal_clearance() const;
  ::pulse::cdm::bind::SubstanceClearanceData* _internal_mutable_clearance();
  public:
  void unsafe_arena_set_allocated_clearance(
      ::pulse::cdm::bind::SubstanceClearanceData* clearance);
  ::pulse::cdm::bind::SubstanceClearanceData* unsafe_arena_release_clearance();

  // .pulse.cdm.bind.SubstancePharmacokineticsData Pharmacokinetics = 22;
  bool has_pharmacokinetics() const;
  private:
  bool _internal_has_pharmacokinetics() const;
  public:
  void clear_pharmacokinetics();
  const ::pulse::cdm::bind::SubstancePharmacokineticsData& pharmacokinetics() const;
  ::pulse::cdm::bind::SubstancePharmacokineticsData* release_pharmacokinetics();
  ::pulse::cdm::bind::SubstancePharmacokineticsData* mutable_pharmacokinetics();
  void set_allocated_pharmacokinetics(::pulse::cdm::bind::SubstancePharmacokineticsData* pharmacokinetics);
  private:
  const ::pulse::cdm::bind::SubstancePharmacokineticsData& _internal_pharmacokinetics() const;
  ::pulse::cdm::bind::SubstancePharmacokineticsData* _internal_mutable_pharmacokinetics();
  public:
  void unsafe_arena_set_allocated_pharmacokinetics(
      ::pulse::cdm::bind::SubstancePharmacokineticsData* pharmacokinetics);
  ::pulse::cdm::bind::SubstancePharmacokineticsData* unsafe_arena_release_pharmacokinetics();

  // .pulse.cdm.bind.SubstancePharmacodynamicsData Pharmacodynamics = 23;
  bool has_pharmacodynamics() const;
  private:
  bool _internal_has_pharmacodynamics() const;
  public:
  void clear_pharmacodynamics();
  const ::pulse::cdm::bind::SubstancePharmacodynamicsData& pharmacodynamics() const;
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* release_pharmacodynamics();
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* mutable_pharmacodynamics();
  void set_allocated_pharmacodynamics(::pulse::cdm::bind::SubstancePharmacodynamicsData* pharmacodynamics);
  private:
  const ::pulse::cdm::bind::SubstancePharmacodynamicsData& _internal_pharmacodynamics() const;
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* _internal_mutable_pharmacodynamics();
  public:
  void unsafe_arena_set_allocated_pharmacodynamics(
      ::pulse::cdm::bind::SubstancePharmacodynamicsData* pharmacodynamics);
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* unsafe_arena_release_pharmacodynamics();

  // .pulse.cdm.bind.SubstanceData.eState State = 4;
  void clear_state();
  ::pulse::cdm::bind::SubstanceData_eState state() const;
  void set_state(::pulse::cdm::bind::SubstanceData_eState value);
  private:
  ::pulse::cdm::bind::SubstanceData_eState _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::SubstanceData_eState value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* density_;
  ::pulse::cdm::bind::ScalarMassPerAmountData* molarmass_;
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* maximumdiffusionflux_;
  ::pulse::cdm::bind::ScalarData* michaeliscoefficient_;
  ::pulse::cdm::bind::SubstanceAerosolizationData* aerosolization_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodconcentration_;
  ::pulse::cdm::bind::ScalarMassData* massinbody_;
  ::pulse::cdm::bind::ScalarMassData* massinblood_;
  ::pulse::cdm::bind::ScalarMassData* massintissue_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmaconcentration_;
  ::pulse::cdm::bind::ScalarMassData* systemicmasscleared_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* alveolartransfer_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* diffusingcapacity_;
  ::pulse::cdm::bind::Scalar0To1Data* endtidalfraction_;
  ::pulse::cdm::bind::ScalarPressureData* endtidalpressure_;
  ::pulse::cdm::bind::ScalarData* relativediffusioncoefficient_;
  ::pulse::cdm::bind::ScalarInversePressureData* solubilitycoefficient_;
  ::pulse::cdm::bind::SubstanceClearanceData* clearance_;
  ::pulse::cdm::bind::SubstancePharmacokineticsData* pharmacokinetics_;
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* pharmacodynamics_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// -------------------------------------------------------------------

class SubstanceCompoundData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceCompoundData) */ {
 public:
  inline SubstanceCompoundData() : SubstanceCompoundData(nullptr) {}
  virtual ~SubstanceCompoundData();

  SubstanceCompoundData(const SubstanceCompoundData& from);
  SubstanceCompoundData(SubstanceCompoundData&& from) noexcept
    : SubstanceCompoundData() {
    *this = ::std::move(from);
  }

  inline SubstanceCompoundData& operator=(const SubstanceCompoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceCompoundData& operator=(SubstanceCompoundData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceCompoundData& default_instance();

  static inline const SubstanceCompoundData* internal_default_instance() {
    return reinterpret_cast<const SubstanceCompoundData*>(
               &_SubstanceCompoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubstanceCompoundData& a, SubstanceCompoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceCompoundData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceCompoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceCompoundData* New() const final {
    return CreateMaybeMessage<SubstanceCompoundData>(nullptr);
  }

  SubstanceCompoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceCompoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceCompoundData& from);
  void MergeFrom(const SubstanceCompoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceCompoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceCompoundData";
  }
  protected:
  explicit SubstanceCompoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.SubstanceConcentrationData Component = 2;
  int component_size() const;
  private:
  int _internal_component_size() const;
  public:
  void clear_component();
  ::pulse::cdm::bind::SubstanceConcentrationData* mutable_component(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
      mutable_component();
  private:
  const ::pulse::cdm::bind::SubstanceConcentrationData& _internal_component(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* _internal_add_component();
  public:
  const ::pulse::cdm::bind::SubstanceConcentrationData& component(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* add_component();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
      component() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceCompoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData > component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubstanceAerosolizationData

// .pulse.cdm.bind.ScalarNegative1To1Data BronchioleModifier = 1;
inline bool SubstanceAerosolizationData::_internal_has_bronchiolemodifier() const {
  return this != internal_default_instance() && bronchiolemodifier_ != nullptr;
}
inline bool SubstanceAerosolizationData::has_bronchiolemodifier() const {
  return _internal_has_bronchiolemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstanceAerosolizationData::_internal_bronchiolemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = bronchiolemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstanceAerosolizationData::bronchiolemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceAerosolizationData.BronchioleModifier)
  return _internal_bronchiolemodifier();
}
inline void SubstanceAerosolizationData::unsafe_arena_set_allocated_bronchiolemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* bronchiolemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchiolemodifier_);
  }
  bronchiolemodifier_ = bronchiolemodifier;
  if (bronchiolemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.BronchioleModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstanceAerosolizationData::release_bronchiolemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchiolemodifier_;
  bronchiolemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstanceAerosolizationData::unsafe_arena_release_bronchiolemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceAerosolizationData.BronchioleModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchiolemodifier_;
  bronchiolemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstanceAerosolizationData::_internal_mutable_bronchiolemodifier() {
  
  if (bronchiolemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    bronchiolemodifier_ = p;
  }
  return bronchiolemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstanceAerosolizationData::mutable_bronchiolemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceAerosolizationData.BronchioleModifier)
  return _internal_mutable_bronchiolemodifier();
}
inline void SubstanceAerosolizationData::set_allocated_bronchiolemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* bronchiolemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchiolemodifier_);
  }
  if (bronchiolemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchiolemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      bronchiolemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchiolemodifier, submessage_arena);
    }
    
  } else {
    
  }
  bronchiolemodifier_ = bronchiolemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.BronchioleModifier)
}

// .pulse.cdm.bind.Scalar0To1Data InflammationCoefficient = 2;
inline bool SubstanceAerosolizationData::_internal_has_inflammationcoefficient() const {
  return this != internal_default_instance() && inflammationcoefficient_ != nullptr;
}
inline bool SubstanceAerosolizationData::has_inflammationcoefficient() const {
  return _internal_has_inflammationcoefficient();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceAerosolizationData::_internal_inflammationcoefficient() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = inflammationcoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceAerosolizationData::inflammationcoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceAerosolizationData.InflammationCoefficient)
  return _internal_inflammationcoefficient();
}
inline void SubstanceAerosolizationData::unsafe_arena_set_allocated_inflammationcoefficient(
    ::pulse::cdm::bind::Scalar0To1Data* inflammationcoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflammationcoefficient_);
  }
  inflammationcoefficient_ = inflammationcoefficient;
  if (inflammationcoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.InflammationCoefficient)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceAerosolizationData::release_inflammationcoefficient() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = inflammationcoefficient_;
  inflammationcoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceAerosolizationData::unsafe_arena_release_inflammationcoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceAerosolizationData.InflammationCoefficient)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = inflammationcoefficient_;
  inflammationcoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceAerosolizationData::_internal_mutable_inflammationcoefficient() {
  
  if (inflammationcoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    inflammationcoefficient_ = p;
  }
  return inflammationcoefficient_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceAerosolizationData::mutable_inflammationcoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceAerosolizationData.InflammationCoefficient)
  return _internal_mutable_inflammationcoefficient();
}
inline void SubstanceAerosolizationData::set_allocated_inflammationcoefficient(::pulse::cdm::bind::Scalar0To1Data* inflammationcoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflammationcoefficient_);
  }
  if (inflammationcoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inflammationcoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      inflammationcoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inflammationcoefficient, submessage_arena);
    }
    
  } else {
    
  }
  inflammationcoefficient_ = inflammationcoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.InflammationCoefficient)
}

// .pulse.cdm.bind.HistogramFractionVsLengthData ParticulateSizeDistribution = 3;
inline bool SubstanceAerosolizationData::_internal_has_particulatesizedistribution() const {
  return this != internal_default_instance() && particulatesizedistribution_ != nullptr;
}
inline bool SubstanceAerosolizationData::has_particulatesizedistribution() const {
  return _internal_has_particulatesizedistribution();
}
inline const ::pulse::cdm::bind::HistogramFractionVsLengthData& SubstanceAerosolizationData::_internal_particulatesizedistribution() const {
  const ::pulse::cdm::bind::HistogramFractionVsLengthData* p = particulatesizedistribution_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::HistogramFractionVsLengthData&>(
      ::pulse::cdm::bind::_HistogramFractionVsLengthData_default_instance_);
}
inline const ::pulse::cdm::bind::HistogramFractionVsLengthData& SubstanceAerosolizationData::particulatesizedistribution() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceAerosolizationData.ParticulateSizeDistribution)
  return _internal_particulatesizedistribution();
}
inline void SubstanceAerosolizationData::unsafe_arena_set_allocated_particulatesizedistribution(
    ::pulse::cdm::bind::HistogramFractionVsLengthData* particulatesizedistribution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(particulatesizedistribution_);
  }
  particulatesizedistribution_ = particulatesizedistribution;
  if (particulatesizedistribution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.ParticulateSizeDistribution)
}
inline ::pulse::cdm::bind::HistogramFractionVsLengthData* SubstanceAerosolizationData::release_particulatesizedistribution() {
  
  ::pulse::cdm::bind::HistogramFractionVsLengthData* temp = particulatesizedistribution_;
  particulatesizedistribution_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::HistogramFractionVsLengthData* SubstanceAerosolizationData::unsafe_arena_release_particulatesizedistribution() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceAerosolizationData.ParticulateSizeDistribution)
  
  ::pulse::cdm::bind::HistogramFractionVsLengthData* temp = particulatesizedistribution_;
  particulatesizedistribution_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::HistogramFractionVsLengthData* SubstanceAerosolizationData::_internal_mutable_particulatesizedistribution() {
  
  if (particulatesizedistribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::HistogramFractionVsLengthData>(GetArena());
    particulatesizedistribution_ = p;
  }
  return particulatesizedistribution_;
}
inline ::pulse::cdm::bind::HistogramFractionVsLengthData* SubstanceAerosolizationData::mutable_particulatesizedistribution() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceAerosolizationData.ParticulateSizeDistribution)
  return _internal_mutable_particulatesizedistribution();
}
inline void SubstanceAerosolizationData::set_allocated_particulatesizedistribution(::pulse::cdm::bind::HistogramFractionVsLengthData* particulatesizedistribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(particulatesizedistribution_);
  }
  if (particulatesizedistribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(particulatesizedistribution)->GetArena();
    if (message_arena != submessage_arena) {
      particulatesizedistribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, particulatesizedistribution, submessage_arena);
    }
    
  } else {
    
  }
  particulatesizedistribution_ = particulatesizedistribution;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceAerosolizationData.ParticulateSizeDistribution)
}

// -------------------------------------------------------------------

// SubstancePhysicochemicalsData

// .pulse.cdm.bind.ScalarData AcidDissociationConstant = 1;
inline bool SubstancePhysicochemicalsData::_internal_has_aciddissociationconstant() const {
  return this != internal_default_instance() && aciddissociationconstant_ != nullptr;
}
inline bool SubstancePhysicochemicalsData::has_aciddissociationconstant() const {
  return _internal_has_aciddissociationconstant();
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::_internal_aciddissociationconstant() const {
  const ::pulse::cdm::bind::ScalarData* p = aciddissociationconstant_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::aciddissociationconstant() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.AcidDissociationConstant)
  return _internal_aciddissociationconstant();
}
inline void SubstancePhysicochemicalsData::unsafe_arena_set_allocated_aciddissociationconstant(
    ::pulse::cdm::bind::ScalarData* aciddissociationconstant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aciddissociationconstant_);
  }
  aciddissociationconstant_ = aciddissociationconstant;
  if (aciddissociationconstant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.AcidDissociationConstant)
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::release_aciddissociationconstant() {
  
  ::pulse::cdm::bind::ScalarData* temp = aciddissociationconstant_;
  aciddissociationconstant_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::unsafe_arena_release_aciddissociationconstant() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePhysicochemicalsData.AcidDissociationConstant)
  
  ::pulse::cdm::bind::ScalarData* temp = aciddissociationconstant_;
  aciddissociationconstant_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::_internal_mutable_aciddissociationconstant() {
  
  if (aciddissociationconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    aciddissociationconstant_ = p;
  }
  return aciddissociationconstant_;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::mutable_aciddissociationconstant() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePhysicochemicalsData.AcidDissociationConstant)
  return _internal_mutable_aciddissociationconstant();
}
inline void SubstancePhysicochemicalsData::set_allocated_aciddissociationconstant(::pulse::cdm::bind::ScalarData* aciddissociationconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aciddissociationconstant_);
  }
  if (aciddissociationconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aciddissociationconstant)->GetArena();
    if (message_arena != submessage_arena) {
      aciddissociationconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aciddissociationconstant, submessage_arena);
    }
    
  } else {
    
  }
  aciddissociationconstant_ = aciddissociationconstant;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.AcidDissociationConstant)
}

// .pulse.cdm.bind.SubstancePhysicochemicalsData.eBindingProtein BindingProtein = 2;
inline void SubstancePhysicochemicalsData::clear_bindingprotein() {
  bindingprotein_ = 0;
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::_internal_bindingprotein() const {
  return static_cast< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein >(bindingprotein_);
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::bindingprotein() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.BindingProtein)
  return _internal_bindingprotein();
}
inline void SubstancePhysicochemicalsData::_internal_set_bindingprotein(::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein value) {
  
  bindingprotein_ = value;
}
inline void SubstancePhysicochemicalsData::set_bindingprotein(::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein value) {
  _internal_set_bindingprotein(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstancePhysicochemicalsData.BindingProtein)
}

// .pulse.cdm.bind.ScalarData BloodPlasmaRatio = 3;
inline bool SubstancePhysicochemicalsData::_internal_has_bloodplasmaratio() const {
  return this != internal_default_instance() && bloodplasmaratio_ != nullptr;
}
inline bool SubstancePhysicochemicalsData::has_bloodplasmaratio() const {
  return _internal_has_bloodplasmaratio();
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::_internal_bloodplasmaratio() const {
  const ::pulse::cdm::bind::ScalarData* p = bloodplasmaratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::bloodplasmaratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.BloodPlasmaRatio)
  return _internal_bloodplasmaratio();
}
inline void SubstancePhysicochemicalsData::unsafe_arena_set_allocated_bloodplasmaratio(
    ::pulse::cdm::bind::ScalarData* bloodplasmaratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodplasmaratio_);
  }
  bloodplasmaratio_ = bloodplasmaratio;
  if (bloodplasmaratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.BloodPlasmaRatio)
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::release_bloodplasmaratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = bloodplasmaratio_;
  bloodplasmaratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::unsafe_arena_release_bloodplasmaratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePhysicochemicalsData.BloodPlasmaRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = bloodplasmaratio_;
  bloodplasmaratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::_internal_mutable_bloodplasmaratio() {
  
  if (bloodplasmaratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    bloodplasmaratio_ = p;
  }
  return bloodplasmaratio_;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::mutable_bloodplasmaratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePhysicochemicalsData.BloodPlasmaRatio)
  return _internal_mutable_bloodplasmaratio();
}
inline void SubstancePhysicochemicalsData::set_allocated_bloodplasmaratio(::pulse::cdm::bind::ScalarData* bloodplasmaratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodplasmaratio_);
  }
  if (bloodplasmaratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodplasmaratio)->GetArena();
    if (message_arena != submessage_arena) {
      bloodplasmaratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodplasmaratio, submessage_arena);
    }
    
  } else {
    
  }
  bloodplasmaratio_ = bloodplasmaratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.BloodPlasmaRatio)
}

// .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
inline bool SubstancePhysicochemicalsData::_internal_has_fractionunboundinplasma() const {
  return this != internal_default_instance() && fractionunboundinplasma_ != nullptr;
}
inline bool SubstancePhysicochemicalsData::has_fractionunboundinplasma() const {
  return _internal_has_fractionunboundinplasma();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstancePhysicochemicalsData::_internal_fractionunboundinplasma() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionunboundinplasma_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstancePhysicochemicalsData::fractionunboundinplasma() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.FractionUnboundInPlasma)
  return _internal_fractionunboundinplasma();
}
inline void SubstancePhysicochemicalsData::unsafe_arena_set_allocated_fractionunboundinplasma(
    ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  if (fractionunboundinplasma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.FractionUnboundInPlasma)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstancePhysicochemicalsData::release_fractionunboundinplasma() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstancePhysicochemicalsData::unsafe_arena_release_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePhysicochemicalsData.FractionUnboundInPlasma)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstancePhysicochemicalsData::_internal_mutable_fractionunboundinplasma() {
  
  if (fractionunboundinplasma_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionunboundinplasma_ = p;
  }
  return fractionunboundinplasma_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstancePhysicochemicalsData::mutable_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePhysicochemicalsData.FractionUnboundInPlasma)
  return _internal_mutable_fractionunboundinplasma();
}
inline void SubstancePhysicochemicalsData::set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  if (fractionunboundinplasma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma)->GetArena();
    if (message_arena != submessage_arena) {
      fractionunboundinplasma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionunboundinplasma, submessage_arena);
    }
    
  } else {
    
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.FractionUnboundInPlasma)
}

// .pulse.cdm.bind.SubstancePhysicochemicalsData.eIonicState IonicState = 5;
inline void SubstancePhysicochemicalsData::clear_ionicstate() {
  ionicstate_ = 0;
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::_internal_ionicstate() const {
  return static_cast< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState >(ionicstate_);
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::ionicstate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.IonicState)
  return _internal_ionicstate();
}
inline void SubstancePhysicochemicalsData::_internal_set_ionicstate(::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState value) {
  
  ionicstate_ = value;
}
inline void SubstancePhysicochemicalsData::set_ionicstate(::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState value) {
  _internal_set_ionicstate(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstancePhysicochemicalsData.IonicState)
}

// .pulse.cdm.bind.ScalarData LogP = 6;
inline bool SubstancePhysicochemicalsData::_internal_has_logp() const {
  return this != internal_default_instance() && logp_ != nullptr;
}
inline bool SubstancePhysicochemicalsData::has_logp() const {
  return _internal_has_logp();
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::_internal_logp() const {
  const ::pulse::cdm::bind::ScalarData* p = logp_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::logp() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.LogP)
  return _internal_logp();
}
inline void SubstancePhysicochemicalsData::unsafe_arena_set_allocated_logp(
    ::pulse::cdm::bind::ScalarData* logp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logp_);
  }
  logp_ = logp;
  if (logp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.LogP)
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::release_logp() {
  
  ::pulse::cdm::bind::ScalarData* temp = logp_;
  logp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::unsafe_arena_release_logp() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePhysicochemicalsData.LogP)
  
  ::pulse::cdm::bind::ScalarData* temp = logp_;
  logp_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::_internal_mutable_logp() {
  
  if (logp_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    logp_ = p;
  }
  return logp_;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::mutable_logp() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePhysicochemicalsData.LogP)
  return _internal_mutable_logp();
}
inline void SubstancePhysicochemicalsData::set_allocated_logp(::pulse::cdm::bind::ScalarData* logp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logp_);
  }
  if (logp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logp)->GetArena();
    if (message_arena != submessage_arena) {
      logp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logp, submessage_arena);
    }
    
  } else {
    
  }
  logp_ = logp;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.LogP)
}

// .pulse.cdm.bind.ScalarData OralAbsorptionRateConstant = 7;
inline bool SubstancePhysicochemicalsData::_internal_has_oralabsorptionrateconstant() const {
  return this != internal_default_instance() && oralabsorptionrateconstant_ != nullptr;
}
inline bool SubstancePhysicochemicalsData::has_oralabsorptionrateconstant() const {
  return _internal_has_oralabsorptionrateconstant();
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::_internal_oralabsorptionrateconstant() const {
  const ::pulse::cdm::bind::ScalarData* p = oralabsorptionrateconstant_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePhysicochemicalsData::oralabsorptionrateconstant() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePhysicochemicalsData.OralAbsorptionRateConstant)
  return _internal_oralabsorptionrateconstant();
}
inline void SubstancePhysicochemicalsData::unsafe_arena_set_allocated_oralabsorptionrateconstant(
    ::pulse::cdm::bind::ScalarData* oralabsorptionrateconstant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oralabsorptionrateconstant_);
  }
  oralabsorptionrateconstant_ = oralabsorptionrateconstant;
  if (oralabsorptionrateconstant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.OralAbsorptionRateConstant)
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::release_oralabsorptionrateconstant() {
  
  ::pulse::cdm::bind::ScalarData* temp = oralabsorptionrateconstant_;
  oralabsorptionrateconstant_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::unsafe_arena_release_oralabsorptionrateconstant() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePhysicochemicalsData.OralAbsorptionRateConstant)
  
  ::pulse::cdm::bind::ScalarData* temp = oralabsorptionrateconstant_;
  oralabsorptionrateconstant_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::_internal_mutable_oralabsorptionrateconstant() {
  
  if (oralabsorptionrateconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    oralabsorptionrateconstant_ = p;
  }
  return oralabsorptionrateconstant_;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePhysicochemicalsData::mutable_oralabsorptionrateconstant() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePhysicochemicalsData.OralAbsorptionRateConstant)
  return _internal_mutable_oralabsorptionrateconstant();
}
inline void SubstancePhysicochemicalsData::set_allocated_oralabsorptionrateconstant(::pulse::cdm::bind::ScalarData* oralabsorptionrateconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oralabsorptionrateconstant_);
  }
  if (oralabsorptionrateconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oralabsorptionrateconstant)->GetArena();
    if (message_arena != submessage_arena) {
      oralabsorptionrateconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oralabsorptionrateconstant, submessage_arena);
    }
    
  } else {
    
  }
  oralabsorptionrateconstant_ = oralabsorptionrateconstant;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePhysicochemicalsData.OralAbsorptionRateConstant)
}

// -------------------------------------------------------------------

// SubstanceTissuePharmacokineticsData

// string Name = 1;
inline void SubstanceTissuePharmacokineticsData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubstanceTissuePharmacokineticsData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
  return _internal_name();
}
inline void SubstanceTissuePharmacokineticsData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
}
inline std::string* SubstanceTissuePharmacokineticsData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
  return _internal_mutable_name();
}
inline const std::string& SubstanceTissuePharmacokineticsData::_internal_name() const {
  return name_.Get();
}
inline void SubstanceTissuePharmacokineticsData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceTissuePharmacokineticsData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
}
inline void SubstanceTissuePharmacokineticsData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
}
inline void SubstanceTissuePharmacokineticsData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
}
inline std::string* SubstanceTissuePharmacokineticsData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceTissuePharmacokineticsData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceTissuePharmacokineticsData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name)
}

// .pulse.cdm.bind.ScalarData PartitionCoefficient = 2;
inline bool SubstanceTissuePharmacokineticsData::_internal_has_partitioncoefficient() const {
  return this != internal_default_instance() && partitioncoefficient_ != nullptr;
}
inline bool SubstanceTissuePharmacokineticsData::has_partitioncoefficient() const {
  return _internal_has_partitioncoefficient();
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceTissuePharmacokineticsData::_internal_partitioncoefficient() const {
  const ::pulse::cdm::bind::ScalarData* p = partitioncoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceTissuePharmacokineticsData::partitioncoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.PartitionCoefficient)
  return _internal_partitioncoefficient();
}
inline void SubstanceTissuePharmacokineticsData::unsafe_arena_set_allocated_partitioncoefficient(
    ::pulse::cdm::bind::ScalarData* partitioncoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioncoefficient_);
  }
  partitioncoefficient_ = partitioncoefficient;
  if (partitioncoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.PartitionCoefficient)
}
inline ::pulse::cdm::bind::ScalarData* SubstanceTissuePharmacokineticsData::release_partitioncoefficient() {
  
  ::pulse::cdm::bind::ScalarData* temp = partitioncoefficient_;
  partitioncoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceTissuePharmacokineticsData::unsafe_arena_release_partitioncoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.PartitionCoefficient)
  
  ::pulse::cdm::bind::ScalarData* temp = partitioncoefficient_;
  partitioncoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceTissuePharmacokineticsData::_internal_mutable_partitioncoefficient() {
  
  if (partitioncoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    partitioncoefficient_ = p;
  }
  return partitioncoefficient_;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceTissuePharmacokineticsData::mutable_partitioncoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.PartitionCoefficient)
  return _internal_mutable_partitioncoefficient();
}
inline void SubstanceTissuePharmacokineticsData::set_allocated_partitioncoefficient(::pulse::cdm::bind::ScalarData* partitioncoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioncoefficient_);
  }
  if (partitioncoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partitioncoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      partitioncoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partitioncoefficient, submessage_arena);
    }
    
  } else {
    
  }
  partitioncoefficient_ = partitioncoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceTissuePharmacokineticsData.PartitionCoefficient)
}

// -------------------------------------------------------------------

// SubstancePharmacokineticsData

// .pulse.cdm.bind.SubstancePhysicochemicalsData Physicochemicals = 1;
inline bool SubstancePharmacokineticsData::_internal_has_physicochemicals() const {
  return this != internal_default_instance() && physicochemicals_ != nullptr;
}
inline bool SubstancePharmacokineticsData::has_physicochemicals() const {
  return _internal_has_physicochemicals();
}
inline void SubstancePharmacokineticsData::clear_physicochemicals() {
  if (GetArena() == nullptr && physicochemicals_ != nullptr) {
    delete physicochemicals_;
  }
  physicochemicals_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstancePhysicochemicalsData& SubstancePharmacokineticsData::_internal_physicochemicals() const {
  const ::pulse::cdm::bind::SubstancePhysicochemicalsData* p = physicochemicals_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstancePhysicochemicalsData&>(
      ::pulse::cdm::bind::_SubstancePhysicochemicalsData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstancePhysicochemicalsData& SubstancePharmacokineticsData::physicochemicals() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacokineticsData.Physicochemicals)
  return _internal_physicochemicals();
}
inline void SubstancePharmacokineticsData::unsafe_arena_set_allocated_physicochemicals(
    ::pulse::cdm::bind::SubstancePhysicochemicalsData* physicochemicals) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physicochemicals_);
  }
  physicochemicals_ = physicochemicals;
  if (physicochemicals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacokineticsData.Physicochemicals)
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData* SubstancePharmacokineticsData::release_physicochemicals() {
  
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* temp = physicochemicals_;
  physicochemicals_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData* SubstancePharmacokineticsData::unsafe_arena_release_physicochemicals() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacokineticsData.Physicochemicals)
  
  ::pulse::cdm::bind::SubstancePhysicochemicalsData* temp = physicochemicals_;
  physicochemicals_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData* SubstancePharmacokineticsData::_internal_mutable_physicochemicals() {
  
  if (physicochemicals_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstancePhysicochemicalsData>(GetArena());
    physicochemicals_ = p;
  }
  return physicochemicals_;
}
inline ::pulse::cdm::bind::SubstancePhysicochemicalsData* SubstancePharmacokineticsData::mutable_physicochemicals() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacokineticsData.Physicochemicals)
  return _internal_mutable_physicochemicals();
}
inline void SubstancePharmacokineticsData::set_allocated_physicochemicals(::pulse::cdm::bind::SubstancePhysicochemicalsData* physicochemicals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete physicochemicals_;
  }
  if (physicochemicals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(physicochemicals);
    if (message_arena != submessage_arena) {
      physicochemicals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physicochemicals, submessage_arena);
    }
    
  } else {
    
  }
  physicochemicals_ = physicochemicals;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacokineticsData.Physicochemicals)
}

// repeated .pulse.cdm.bind.SubstanceTissuePharmacokineticsData TissueKinetics = 2;
inline int SubstancePharmacokineticsData::_internal_tissuekinetics_size() const {
  return tissuekinetics_.size();
}
inline int SubstancePharmacokineticsData::tissuekinetics_size() const {
  return _internal_tissuekinetics_size();
}
inline void SubstancePharmacokineticsData::clear_tissuekinetics() {
  tissuekinetics_.Clear();
}
inline ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* SubstancePharmacokineticsData::mutable_tissuekinetics(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacokineticsData.TissueKinetics)
  return tissuekinetics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >*
SubstancePharmacokineticsData::mutable_tissuekinetics() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.SubstancePharmacokineticsData.TissueKinetics)
  return &tissuekinetics_;
}
inline const ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData& SubstancePharmacokineticsData::_internal_tissuekinetics(int index) const {
  return tissuekinetics_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData& SubstancePharmacokineticsData::tissuekinetics(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacokineticsData.TissueKinetics)
  return _internal_tissuekinetics(index);
}
inline ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* SubstancePharmacokineticsData::_internal_add_tissuekinetics() {
  return tissuekinetics_.Add();
}
inline ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* SubstancePharmacokineticsData::add_tissuekinetics() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.SubstancePharmacokineticsData.TissueKinetics)
  return _internal_add_tissuekinetics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >&
SubstancePharmacokineticsData::tissuekinetics() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.SubstancePharmacokineticsData.TissueKinetics)
  return tissuekinetics_;
}

// -------------------------------------------------------------------

// SubstancePharmacodynamicsData

// .pulse.cdm.bind.ScalarNegative1To1Data Bronchodilation = 1;
inline bool SubstancePharmacodynamicsData::_internal_has_bronchodilation() const {
  return this != internal_default_instance() && bronchodilation_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_bronchodilation() const {
  return _internal_has_bronchodilation();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_bronchodilation() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = bronchodilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::bronchodilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.Bronchodilation)
  return _internal_bronchodilation();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_bronchodilation(
    ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilation_);
  }
  bronchodilation_ = bronchodilation;
  if (bronchodilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.Bronchodilation)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_bronchodilation() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchodilation_;
  bronchodilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_bronchodilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.Bronchodilation)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchodilation_;
  bronchodilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_bronchodilation() {
  
  if (bronchodilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    bronchodilation_ = p;
  }
  return bronchodilation_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_bronchodilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.Bronchodilation)
  return _internal_mutable_bronchodilation();
}
inline void SubstancePharmacodynamicsData::set_allocated_bronchodilation(::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilation_);
  }
  if (bronchodilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilation)->GetArena();
    if (message_arena != submessage_arena) {
      bronchodilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchodilation, submessage_arena);
    }
    
  } else {
    
  }
  bronchodilation_ = bronchodilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.Bronchodilation)
}

// .pulse.cdm.bind.ScalarNegative1To1Data DiastolicPressureModifier = 2;
inline bool SubstancePharmacodynamicsData::_internal_has_diastolicpressuremodifier() const {
  return this != internal_default_instance() && diastolicpressuremodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_diastolicpressuremodifier() const {
  return _internal_has_diastolicpressuremodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_diastolicpressuremodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = diastolicpressuremodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::diastolicpressuremodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.DiastolicPressureModifier)
  return _internal_diastolicpressuremodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_diastolicpressuremodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* diastolicpressuremodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicpressuremodifier_);
  }
  diastolicpressuremodifier_ = diastolicpressuremodifier;
  if (diastolicpressuremodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.DiastolicPressureModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_diastolicpressuremodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = diastolicpressuremodifier_;
  diastolicpressuremodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_diastolicpressuremodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.DiastolicPressureModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = diastolicpressuremodifier_;
  diastolicpressuremodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_diastolicpressuremodifier() {
  
  if (diastolicpressuremodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    diastolicpressuremodifier_ = p;
  }
  return diastolicpressuremodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_diastolicpressuremodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.DiastolicPressureModifier)
  return _internal_mutable_diastolicpressuremodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_diastolicpressuremodifier(::pulse::cdm::bind::ScalarNegative1To1Data* diastolicpressuremodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicpressuremodifier_);
  }
  if (diastolicpressuremodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicpressuremodifier)->GetArena();
    if (message_arena != submessage_arena) {
      diastolicpressuremodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diastolicpressuremodifier, submessage_arena);
    }
    
  } else {
    
  }
  diastolicpressuremodifier_ = diastolicpressuremodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.DiastolicPressureModifier)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData EC50 = 3;
inline bool SubstancePharmacodynamicsData::_internal_has_ec50() const {
  return this != internal_default_instance() && ec50_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_ec50() const {
  return _internal_has_ec50();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstancePharmacodynamicsData::_internal_ec50() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = ec50_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstancePharmacodynamicsData::ec50() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.EC50)
  return _internal_ec50();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_ec50(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* ec50) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ec50_);
  }
  ec50_ = ec50;
  if (ec50) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.EC50)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstancePharmacodynamicsData::release_ec50() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = ec50_;
  ec50_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstancePharmacodynamicsData::unsafe_arena_release_ec50() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.EC50)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = ec50_;
  ec50_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstancePharmacodynamicsData::_internal_mutable_ec50() {
  
  if (ec50_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    ec50_ = p;
  }
  return ec50_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstancePharmacodynamicsData::mutable_ec50() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.EC50)
  return _internal_mutable_ec50();
}
inline void SubstancePharmacodynamicsData::set_allocated_ec50(::pulse::cdm::bind::ScalarMassPerVolumeData* ec50) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ec50_);
  }
  if (ec50) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ec50)->GetArena();
    if (message_arena != submessage_arena) {
      ec50 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ec50, submessage_arena);
    }
    
  } else {
    
  }
  ec50_ = ec50;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.EC50)
}

// .pulse.cdm.bind.ScalarData EMaxShapeParameter = 4;
inline bool SubstancePharmacodynamicsData::_internal_has_emaxshapeparameter() const {
  return this != internal_default_instance() && emaxshapeparameter_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_emaxshapeparameter() const {
  return _internal_has_emaxshapeparameter();
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePharmacodynamicsData::_internal_emaxshapeparameter() const {
  const ::pulse::cdm::bind::ScalarData* p = emaxshapeparameter_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstancePharmacodynamicsData::emaxshapeparameter() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.EMaxShapeParameter)
  return _internal_emaxshapeparameter();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_emaxshapeparameter(
    ::pulse::cdm::bind::ScalarData* emaxshapeparameter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emaxshapeparameter_);
  }
  emaxshapeparameter_ = emaxshapeparameter;
  if (emaxshapeparameter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.EMaxShapeParameter)
}
inline ::pulse::cdm::bind::ScalarData* SubstancePharmacodynamicsData::release_emaxshapeparameter() {
  
  ::pulse::cdm::bind::ScalarData* temp = emaxshapeparameter_;
  emaxshapeparameter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePharmacodynamicsData::unsafe_arena_release_emaxshapeparameter() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.EMaxShapeParameter)
  
  ::pulse::cdm::bind::ScalarData* temp = emaxshapeparameter_;
  emaxshapeparameter_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePharmacodynamicsData::_internal_mutable_emaxshapeparameter() {
  
  if (emaxshapeparameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    emaxshapeparameter_ = p;
  }
  return emaxshapeparameter_;
}
inline ::pulse::cdm::bind::ScalarData* SubstancePharmacodynamicsData::mutable_emaxshapeparameter() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.EMaxShapeParameter)
  return _internal_mutable_emaxshapeparameter();
}
inline void SubstancePharmacodynamicsData::set_allocated_emaxshapeparameter(::pulse::cdm::bind::ScalarData* emaxshapeparameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emaxshapeparameter_);
  }
  if (emaxshapeparameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emaxshapeparameter)->GetArena();
    if (message_arena != submessage_arena) {
      emaxshapeparameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emaxshapeparameter, submessage_arena);
    }
    
  } else {
    
  }
  emaxshapeparameter_ = emaxshapeparameter;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.EMaxShapeParameter)
}

// .pulse.cdm.bind.ScalarNegative1To1Data HeartRateModifier = 5;
inline bool SubstancePharmacodynamicsData::_internal_has_heartratemodifier() const {
  return this != internal_default_instance() && heartratemodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_heartratemodifier() const {
  return _internal_has_heartratemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_heartratemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = heartratemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::heartratemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.HeartRateModifier)
  return _internal_heartratemodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_heartratemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* heartratemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratemodifier_);
  }
  heartratemodifier_ = heartratemodifier;
  if (heartratemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.HeartRateModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_heartratemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = heartratemodifier_;
  heartratemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_heartratemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.HeartRateModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = heartratemodifier_;
  heartratemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_heartratemodifier() {
  
  if (heartratemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    heartratemodifier_ = p;
  }
  return heartratemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_heartratemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.HeartRateModifier)
  return _internal_mutable_heartratemodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_heartratemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* heartratemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratemodifier_);
  }
  if (heartratemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      heartratemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartratemodifier, submessage_arena);
    }
    
  } else {
    
  }
  heartratemodifier_ = heartratemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.HeartRateModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data NeuromuscularBlock = 6;
inline bool SubstancePharmacodynamicsData::_internal_has_neuromuscularblock() const {
  return this != internal_default_instance() && neuromuscularblock_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_neuromuscularblock() const {
  return _internal_has_neuromuscularblock();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_neuromuscularblock() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = neuromuscularblock_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::neuromuscularblock() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.NeuromuscularBlock)
  return _internal_neuromuscularblock();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_neuromuscularblock(
    ::pulse::cdm::bind::ScalarNegative1To1Data* neuromuscularblock) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblock_);
  }
  neuromuscularblock_ = neuromuscularblock;
  if (neuromuscularblock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.NeuromuscularBlock)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_neuromuscularblock() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = neuromuscularblock_;
  neuromuscularblock_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_neuromuscularblock() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.NeuromuscularBlock)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = neuromuscularblock_;
  neuromuscularblock_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_neuromuscularblock() {
  
  if (neuromuscularblock_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    neuromuscularblock_ = p;
  }
  return neuromuscularblock_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_neuromuscularblock() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.NeuromuscularBlock)
  return _internal_mutable_neuromuscularblock();
}
inline void SubstancePharmacodynamicsData::set_allocated_neuromuscularblock(::pulse::cdm::bind::ScalarNegative1To1Data* neuromuscularblock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblock_);
  }
  if (neuromuscularblock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblock)->GetArena();
    if (message_arena != submessage_arena) {
      neuromuscularblock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neuromuscularblock, submessage_arena);
    }
    
  } else {
    
  }
  neuromuscularblock_ = neuromuscularblock;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.NeuromuscularBlock)
}

// .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 7;
inline bool SubstancePharmacodynamicsData::_internal_has_pupillaryresponse() const {
  return this != internal_default_instance() && pupillaryresponse_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_pupillaryresponse() const {
  return _internal_has_pupillaryresponse();
}
inline const ::pulse::cdm::bind::PupillaryResponseData& SubstancePharmacodynamicsData::_internal_pupillaryresponse() const {
  const ::pulse::cdm::bind::PupillaryResponseData* p = pupillaryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PupillaryResponseData&>(
      ::pulse::cdm::bind::_PupillaryResponseData_default_instance_);
}
inline const ::pulse::cdm::bind::PupillaryResponseData& SubstancePharmacodynamicsData::pupillaryresponse() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.PupillaryResponse)
  return _internal_pupillaryresponse();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_pupillaryresponse(
    ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupillaryresponse_);
  }
  pupillaryresponse_ = pupillaryresponse;
  if (pupillaryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.PupillaryResponse)
}
inline ::pulse::cdm::bind::PupillaryResponseData* SubstancePharmacodynamicsData::release_pupillaryresponse() {
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = pupillaryresponse_;
  pupillaryresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* SubstancePharmacodynamicsData::unsafe_arena_release_pupillaryresponse() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.PupillaryResponse)
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = pupillaryresponse_;
  pupillaryresponse_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* SubstancePharmacodynamicsData::_internal_mutable_pupillaryresponse() {
  
  if (pupillaryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PupillaryResponseData>(GetArena());
    pupillaryresponse_ = p;
  }
  return pupillaryresponse_;
}
inline ::pulse::cdm::bind::PupillaryResponseData* SubstancePharmacodynamicsData::mutable_pupillaryresponse() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.PupillaryResponse)
  return _internal_mutable_pupillaryresponse();
}
inline void SubstancePharmacodynamicsData::set_allocated_pupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupillaryresponse_);
  }
  if (pupillaryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupillaryresponse)->GetArena();
    if (message_arena != submessage_arena) {
      pupillaryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pupillaryresponse, submessage_arena);
    }
    
  } else {
    
  }
  pupillaryresponse_ = pupillaryresponse;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.PupillaryResponse)
}

// .pulse.cdm.bind.ScalarNegative1To1Data RespirationRateModifier = 8;
inline bool SubstancePharmacodynamicsData::_internal_has_respirationratemodifier() const {
  return this != internal_default_instance() && respirationratemodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_respirationratemodifier() const {
  return _internal_has_respirationratemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_respirationratemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = respirationratemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::respirationratemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.RespirationRateModifier)
  return _internal_respirationratemodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_respirationratemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* respirationratemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratemodifier_);
  }
  respirationratemodifier_ = respirationratemodifier;
  if (respirationratemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.RespirationRateModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_respirationratemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = respirationratemodifier_;
  respirationratemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_respirationratemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.RespirationRateModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = respirationratemodifier_;
  respirationratemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_respirationratemodifier() {
  
  if (respirationratemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    respirationratemodifier_ = p;
  }
  return respirationratemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_respirationratemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.RespirationRateModifier)
  return _internal_mutable_respirationratemodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_respirationratemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* respirationratemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratemodifier_);
  }
  if (respirationratemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      respirationratemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationratemodifier, submessage_arena);
    }
    
  } else {
    
  }
  respirationratemodifier_ = respirationratemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.RespirationRateModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data Sedation = 9;
inline bool SubstancePharmacodynamicsData::_internal_has_sedation() const {
  return this != internal_default_instance() && sedation_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_sedation() const {
  return _internal_has_sedation();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_sedation() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = sedation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::sedation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.Sedation)
  return _internal_sedation();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_sedation(
    ::pulse::cdm::bind::ScalarNegative1To1Data* sedation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedation_);
  }
  sedation_ = sedation;
  if (sedation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.Sedation)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_sedation() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = sedation_;
  sedation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_sedation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.Sedation)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = sedation_;
  sedation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_sedation() {
  
  if (sedation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    sedation_ = p;
  }
  return sedation_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_sedation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.Sedation)
  return _internal_mutable_sedation();
}
inline void SubstancePharmacodynamicsData::set_allocated_sedation(::pulse::cdm::bind::ScalarNegative1To1Data* sedation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedation_);
  }
  if (sedation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedation)->GetArena();
    if (message_arena != submessage_arena) {
      sedation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sedation, submessage_arena);
    }
    
  } else {
    
  }
  sedation_ = sedation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.Sedation)
}

// .pulse.cdm.bind.ScalarNegative1To1Data SystolicPressureModifier = 10;
inline bool SubstancePharmacodynamicsData::_internal_has_systolicpressuremodifier() const {
  return this != internal_default_instance() && systolicpressuremodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_systolicpressuremodifier() const {
  return _internal_has_systolicpressuremodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_systolicpressuremodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = systolicpressuremodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::systolicpressuremodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.SystolicPressureModifier)
  return _internal_systolicpressuremodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_systolicpressuremodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* systolicpressuremodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicpressuremodifier_);
  }
  systolicpressuremodifier_ = systolicpressuremodifier;
  if (systolicpressuremodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.SystolicPressureModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_systolicpressuremodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = systolicpressuremodifier_;
  systolicpressuremodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_systolicpressuremodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.SystolicPressureModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = systolicpressuremodifier_;
  systolicpressuremodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_systolicpressuremodifier() {
  
  if (systolicpressuremodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    systolicpressuremodifier_ = p;
  }
  return systolicpressuremodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_systolicpressuremodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.SystolicPressureModifier)
  return _internal_mutable_systolicpressuremodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_systolicpressuremodifier(::pulse::cdm::bind::ScalarNegative1To1Data* systolicpressuremodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicpressuremodifier_);
  }
  if (systolicpressuremodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicpressuremodifier)->GetArena();
    if (message_arena != submessage_arena) {
      systolicpressuremodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systolicpressuremodifier, submessage_arena);
    }
    
  } else {
    
  }
  systolicpressuremodifier_ = systolicpressuremodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.SystolicPressureModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data TidalVolumeModifier = 11;
inline bool SubstancePharmacodynamicsData::_internal_has_tidalvolumemodifier() const {
  return this != internal_default_instance() && tidalvolumemodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_tidalvolumemodifier() const {
  return _internal_has_tidalvolumemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_tidalvolumemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = tidalvolumemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::tidalvolumemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.TidalVolumeModifier)
  return _internal_tidalvolumemodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_tidalvolumemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* tidalvolumemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumemodifier_);
  }
  tidalvolumemodifier_ = tidalvolumemodifier;
  if (tidalvolumemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.TidalVolumeModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_tidalvolumemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tidalvolumemodifier_;
  tidalvolumemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_tidalvolumemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.TidalVolumeModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tidalvolumemodifier_;
  tidalvolumemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_tidalvolumemodifier() {
  
  if (tidalvolumemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    tidalvolumemodifier_ = p;
  }
  return tidalvolumemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_tidalvolumemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.TidalVolumeModifier)
  return _internal_mutable_tidalvolumemodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_tidalvolumemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* tidalvolumemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumemodifier_);
  }
  if (tidalvolumemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      tidalvolumemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tidalvolumemodifier, submessage_arena);
    }
    
  } else {
    
  }
  tidalvolumemodifier_ = tidalvolumemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.TidalVolumeModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityModifier = 12;
inline bool SubstancePharmacodynamicsData::_internal_has_tubularpermeabilitymodifier() const {
  return this != internal_default_instance() && tubularpermeabilitymodifier_ != nullptr;
}
inline bool SubstancePharmacodynamicsData::has_tubularpermeabilitymodifier() const {
  return _internal_has_tubularpermeabilitymodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::_internal_tubularpermeabilitymodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = tubularpermeabilitymodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& SubstancePharmacodynamicsData::tubularpermeabilitymodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstancePharmacodynamicsData.TubularPermeabilityModifier)
  return _internal_tubularpermeabilitymodifier();
}
inline void SubstancePharmacodynamicsData::unsafe_arena_set_allocated_tubularpermeabilitymodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitymodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitymodifier_);
  }
  tubularpermeabilitymodifier_ = tubularpermeabilitymodifier;
  if (tubularpermeabilitymodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.TubularPermeabilityModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::release_tubularpermeabilitymodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tubularpermeabilitymodifier_;
  tubularpermeabilitymodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::unsafe_arena_release_tubularpermeabilitymodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstancePharmacodynamicsData.TubularPermeabilityModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tubularpermeabilitymodifier_;
  tubularpermeabilitymodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::_internal_mutable_tubularpermeabilitymodifier() {
  
  if (tubularpermeabilitymodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    tubularpermeabilitymodifier_ = p;
  }
  return tubularpermeabilitymodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* SubstancePharmacodynamicsData::mutable_tubularpermeabilitymodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstancePharmacodynamicsData.TubularPermeabilityModifier)
  return _internal_mutable_tubularpermeabilitymodifier();
}
inline void SubstancePharmacodynamicsData::set_allocated_tubularpermeabilitymodifier(::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitymodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitymodifier_);
  }
  if (tubularpermeabilitymodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitymodifier)->GetArena();
    if (message_arena != submessage_arena) {
      tubularpermeabilitymodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tubularpermeabilitymodifier, submessage_arena);
    }
    
  } else {
    
  }
  tubularpermeabilitymodifier_ = tubularpermeabilitymodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstancePharmacodynamicsData.TubularPermeabilityModifier)
}

// -------------------------------------------------------------------

// SubstanceSystemicClearanceData

// .pulse.cdm.bind.Scalar0To1Data FractionExcretedInFeces = 1;
inline bool SubstanceSystemicClearanceData::_internal_has_fractionexcretedinfeces() const {
  return this != internal_default_instance() && fractionexcretedinfeces_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_fractionexcretedinfeces() const {
  return _internal_has_fractionexcretedinfeces();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::_internal_fractionexcretedinfeces() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionexcretedinfeces_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::fractionexcretedinfeces() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInFeces)
  return _internal_fractionexcretedinfeces();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_fractionexcretedinfeces(
    ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinfeces) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinfeces_);
  }
  fractionexcretedinfeces_ = fractionexcretedinfeces;
  if (fractionexcretedinfeces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInFeces)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::release_fractionexcretedinfeces() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionexcretedinfeces_;
  fractionexcretedinfeces_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::unsafe_arena_release_fractionexcretedinfeces() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInFeces)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionexcretedinfeces_;
  fractionexcretedinfeces_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::_internal_mutable_fractionexcretedinfeces() {
  
  if (fractionexcretedinfeces_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionexcretedinfeces_ = p;
  }
  return fractionexcretedinfeces_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::mutable_fractionexcretedinfeces() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInFeces)
  return _internal_mutable_fractionexcretedinfeces();
}
inline void SubstanceSystemicClearanceData::set_allocated_fractionexcretedinfeces(::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinfeces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinfeces_);
  }
  if (fractionexcretedinfeces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinfeces)->GetArena();
    if (message_arena != submessage_arena) {
      fractionexcretedinfeces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionexcretedinfeces, submessage_arena);
    }
    
  } else {
    
  }
  fractionexcretedinfeces_ = fractionexcretedinfeces;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInFeces)
}

// .pulse.cdm.bind.Scalar0To1Data FractionExcretedInUrine = 2;
inline bool SubstanceSystemicClearanceData::_internal_has_fractionexcretedinurine() const {
  return this != internal_default_instance() && fractionexcretedinurine_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_fractionexcretedinurine() const {
  return _internal_has_fractionexcretedinurine();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::_internal_fractionexcretedinurine() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionexcretedinurine_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::fractionexcretedinurine() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInUrine)
  return _internal_fractionexcretedinurine();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_fractionexcretedinurine(
    ::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinurine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinurine_);
  }
  fractionexcretedinurine_ = fractionexcretedinurine;
  if (fractionexcretedinurine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInUrine)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::release_fractionexcretedinurine() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionexcretedinurine_;
  fractionexcretedinurine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::unsafe_arena_release_fractionexcretedinurine() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInUrine)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionexcretedinurine_;
  fractionexcretedinurine_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::_internal_mutable_fractionexcretedinurine() {
  
  if (fractionexcretedinurine_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionexcretedinurine_ = p;
  }
  return fractionexcretedinurine_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::mutable_fractionexcretedinurine() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInUrine)
  return _internal_mutable_fractionexcretedinurine();
}
inline void SubstanceSystemicClearanceData::set_allocated_fractionexcretedinurine(::pulse::cdm::bind::Scalar0To1Data* fractionexcretedinurine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinurine_);
  }
  if (fractionexcretedinurine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionexcretedinurine)->GetArena();
    if (message_arena != submessage_arena) {
      fractionexcretedinurine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionexcretedinurine, submessage_arena);
    }
    
  } else {
    
  }
  fractionexcretedinurine_ = fractionexcretedinurine;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionExcretedInUrine)
}

// .pulse.cdm.bind.Scalar0To1Data FractionMetabolizedInGut = 3;
inline bool SubstanceSystemicClearanceData::_internal_has_fractionmetabolizedingut() const {
  return this != internal_default_instance() && fractionmetabolizedingut_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_fractionmetabolizedingut() const {
  return _internal_has_fractionmetabolizedingut();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::_internal_fractionmetabolizedingut() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionmetabolizedingut_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::fractionmetabolizedingut() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionMetabolizedInGut)
  return _internal_fractionmetabolizedingut();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_fractionmetabolizedingut(
    ::pulse::cdm::bind::Scalar0To1Data* fractionmetabolizedingut) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionmetabolizedingut_);
  }
  fractionmetabolizedingut_ = fractionmetabolizedingut;
  if (fractionmetabolizedingut) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionMetabolizedInGut)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::release_fractionmetabolizedingut() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionmetabolizedingut_;
  fractionmetabolizedingut_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::unsafe_arena_release_fractionmetabolizedingut() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionMetabolizedInGut)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionmetabolizedingut_;
  fractionmetabolizedingut_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::_internal_mutable_fractionmetabolizedingut() {
  
  if (fractionmetabolizedingut_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionmetabolizedingut_ = p;
  }
  return fractionmetabolizedingut_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::mutable_fractionmetabolizedingut() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionMetabolizedInGut)
  return _internal_mutable_fractionmetabolizedingut();
}
inline void SubstanceSystemicClearanceData::set_allocated_fractionmetabolizedingut(::pulse::cdm::bind::Scalar0To1Data* fractionmetabolizedingut) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionmetabolizedingut_);
  }
  if (fractionmetabolizedingut) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionmetabolizedingut)->GetArena();
    if (message_arena != submessage_arena) {
      fractionmetabolizedingut = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionmetabolizedingut, submessage_arena);
    }
    
  } else {
    
  }
  fractionmetabolizedingut_ = fractionmetabolizedingut;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionMetabolizedInGut)
}

// .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
inline bool SubstanceSystemicClearanceData::_internal_has_fractionunboundinplasma() const {
  return this != internal_default_instance() && fractionunboundinplasma_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_fractionunboundinplasma() const {
  return _internal_has_fractionunboundinplasma();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::_internal_fractionunboundinplasma() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionunboundinplasma_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceSystemicClearanceData::fractionunboundinplasma() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionUnboundInPlasma)
  return _internal_fractionunboundinplasma();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_fractionunboundinplasma(
    ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  if (fractionunboundinplasma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionUnboundInPlasma)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::release_fractionunboundinplasma() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::unsafe_arena_release_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionUnboundInPlasma)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::_internal_mutable_fractionunboundinplasma() {
  
  if (fractionunboundinplasma_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionunboundinplasma_ = p;
  }
  return fractionunboundinplasma_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceSystemicClearanceData::mutable_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionUnboundInPlasma)
  return _internal_mutable_fractionunboundinplasma();
}
inline void SubstanceSystemicClearanceData::set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  if (fractionunboundinplasma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma)->GetArena();
    if (message_arena != submessage_arena) {
      fractionunboundinplasma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionunboundinplasma, submessage_arena);
    }
    
  } else {
    
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.FractionUnboundInPlasma)
}

// .pulse.cdm.bind.ScalarVolumePerTimeMassData IntrinsicClearance = 5;
inline bool SubstanceSystemicClearanceData::_internal_has_intrinsicclearance() const {
  return this != internal_default_instance() && intrinsicclearance_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_intrinsicclearance() const {
  return _internal_has_intrinsicclearance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::_internal_intrinsicclearance() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData* p = intrinsicclearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::intrinsicclearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.IntrinsicClearance)
  return _internal_intrinsicclearance();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_intrinsicclearance(
    ::pulse::cdm::bind::ScalarVolumePerTimeMassData* intrinsicclearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsicclearance_);
  }
  intrinsicclearance_ = intrinsicclearance;
  if (intrinsicclearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.IntrinsicClearance)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::release_intrinsicclearance() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = intrinsicclearance_;
  intrinsicclearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::unsafe_arena_release_intrinsicclearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.IntrinsicClearance)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = intrinsicclearance_;
  intrinsicclearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::_internal_mutable_intrinsicclearance() {
  
  if (intrinsicclearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeMassData>(GetArena());
    intrinsicclearance_ = p;
  }
  return intrinsicclearance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::mutable_intrinsicclearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.IntrinsicClearance)
  return _internal_mutable_intrinsicclearance();
}
inline void SubstanceSystemicClearanceData::set_allocated_intrinsicclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* intrinsicclearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsicclearance_);
  }
  if (intrinsicclearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsicclearance)->GetArena();
    if (message_arena != submessage_arena) {
      intrinsicclearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsicclearance, submessage_arena);
    }
    
  } else {
    
  }
  intrinsicclearance_ = intrinsicclearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.IntrinsicClearance)
}

// .pulse.cdm.bind.ScalarVolumePerTimeMassData RenalClearance = 6;
inline bool SubstanceSystemicClearanceData::_internal_has_renalclearance() const {
  return this != internal_default_instance() && renalclearance_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_renalclearance() const {
  return _internal_has_renalclearance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::_internal_renalclearance() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData* p = renalclearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::renalclearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.RenalClearance)
  return _internal_renalclearance();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_renalclearance(
    ::pulse::cdm::bind::ScalarVolumePerTimeMassData* renalclearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalclearance_);
  }
  renalclearance_ = renalclearance;
  if (renalclearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.RenalClearance)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::release_renalclearance() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = renalclearance_;
  renalclearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::unsafe_arena_release_renalclearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.RenalClearance)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = renalclearance_;
  renalclearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::_internal_mutable_renalclearance() {
  
  if (renalclearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeMassData>(GetArena());
    renalclearance_ = p;
  }
  return renalclearance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::mutable_renalclearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.RenalClearance)
  return _internal_mutable_renalclearance();
}
inline void SubstanceSystemicClearanceData::set_allocated_renalclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* renalclearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalclearance_);
  }
  if (renalclearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalclearance)->GetArena();
    if (message_arena != submessage_arena) {
      renalclearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalclearance, submessage_arena);
    }
    
  } else {
    
  }
  renalclearance_ = renalclearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.RenalClearance)
}

// .pulse.cdm.bind.ScalarVolumePerTimeMassData SystemicClearance = 7;
inline bool SubstanceSystemicClearanceData::_internal_has_systemicclearance() const {
  return this != internal_default_instance() && systemicclearance_ != nullptr;
}
inline bool SubstanceSystemicClearanceData::has_systemicclearance() const {
  return _internal_has_systemicclearance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::_internal_systemicclearance() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData* p = systemicclearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceSystemicClearanceData::systemicclearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceSystemicClearanceData.SystemicClearance)
  return _internal_systemicclearance();
}
inline void SubstanceSystemicClearanceData::unsafe_arena_set_allocated_systemicclearance(
    ::pulse::cdm::bind::ScalarVolumePerTimeMassData* systemicclearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicclearance_);
  }
  systemicclearance_ = systemicclearance;
  if (systemicclearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.SystemicClearance)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::release_systemicclearance() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = systemicclearance_;
  systemicclearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::unsafe_arena_release_systemicclearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceSystemicClearanceData.SystemicClearance)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = systemicclearance_;
  systemicclearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::_internal_mutable_systemicclearance() {
  
  if (systemicclearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeMassData>(GetArena());
    systemicclearance_ = p;
  }
  return systemicclearance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceSystemicClearanceData::mutable_systemicclearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceSystemicClearanceData.SystemicClearance)
  return _internal_mutable_systemicclearance();
}
inline void SubstanceSystemicClearanceData::set_allocated_systemicclearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* systemicclearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicclearance_);
  }
  if (systemicclearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicclearance)->GetArena();
    if (message_arena != submessage_arena) {
      systemicclearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemicclearance, submessage_arena);
    }
    
  } else {
    
  }
  systemicclearance_ = systemicclearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceSystemicClearanceData.SystemicClearance)
}

// -------------------------------------------------------------------

// SubstanceRenalRegulationData

// .pulse.cdm.bind.eCharge ChargeInBlood = 1;
inline void SubstanceRenalRegulationData::clear_chargeinblood() {
  chargeinblood_ = 0;
}
inline ::pulse::cdm::bind::eCharge SubstanceRenalRegulationData::_internal_chargeinblood() const {
  return static_cast< ::pulse::cdm::bind::eCharge >(chargeinblood_);
}
inline ::pulse::cdm::bind::eCharge SubstanceRenalRegulationData::chargeinblood() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalRegulationData.ChargeInBlood)
  return _internal_chargeinblood();
}
inline void SubstanceRenalRegulationData::_internal_set_chargeinblood(::pulse::cdm::bind::eCharge value) {
  
  chargeinblood_ = value;
}
inline void SubstanceRenalRegulationData::set_chargeinblood(::pulse::cdm::bind::eCharge value) {
  _internal_set_chargeinblood(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceRenalRegulationData.ChargeInBlood)
}

// .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 2;
inline bool SubstanceRenalRegulationData::_internal_has_fractionunboundinplasma() const {
  return this != internal_default_instance() && fractionunboundinplasma_ != nullptr;
}
inline bool SubstanceRenalRegulationData::has_fractionunboundinplasma() const {
  return _internal_has_fractionunboundinplasma();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceRenalRegulationData::_internal_fractionunboundinplasma() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionunboundinplasma_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceRenalRegulationData::fractionunboundinplasma() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalRegulationData.FractionUnboundInPlasma)
  return _internal_fractionunboundinplasma();
}
inline void SubstanceRenalRegulationData::unsafe_arena_set_allocated_fractionunboundinplasma(
    ::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  if (fractionunboundinplasma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.FractionUnboundInPlasma)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceRenalRegulationData::release_fractionunboundinplasma() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceRenalRegulationData::unsafe_arena_release_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalRegulationData.FractionUnboundInPlasma)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionunboundinplasma_;
  fractionunboundinplasma_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceRenalRegulationData::_internal_mutable_fractionunboundinplasma() {
  
  if (fractionunboundinplasma_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionunboundinplasma_ = p;
  }
  return fractionunboundinplasma_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceRenalRegulationData::mutable_fractionunboundinplasma() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalRegulationData.FractionUnboundInPlasma)
  return _internal_mutable_fractionunboundinplasma();
}
inline void SubstanceRenalRegulationData::set_allocated_fractionunboundinplasma(::pulse::cdm::bind::Scalar0To1Data* fractionunboundinplasma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma_);
  }
  if (fractionunboundinplasma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionunboundinplasma)->GetArena();
    if (message_arena != submessage_arena) {
      fractionunboundinplasma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionunboundinplasma, submessage_arena);
    }
    
  } else {
    
  }
  fractionunboundinplasma_ = fractionunboundinplasma;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.FractionUnboundInPlasma)
}

// .pulse.cdm.bind.ScalarData ReabsorptionRatio = 3;
inline bool SubstanceRenalRegulationData::_internal_has_reabsorptionratio() const {
  return this != internal_default_instance() && reabsorptionratio_ != nullptr;
}
inline bool SubstanceRenalRegulationData::has_reabsorptionratio() const {
  return _internal_has_reabsorptionratio();
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceRenalRegulationData::_internal_reabsorptionratio() const {
  const ::pulse::cdm::bind::ScalarData* p = reabsorptionratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceRenalRegulationData::reabsorptionratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalRegulationData.ReabsorptionRatio)
  return _internal_reabsorptionratio();
}
inline void SubstanceRenalRegulationData::unsafe_arena_set_allocated_reabsorptionratio(
    ::pulse::cdm::bind::ScalarData* reabsorptionratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionratio_);
  }
  reabsorptionratio_ = reabsorptionratio;
  if (reabsorptionratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.ReabsorptionRatio)
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalRegulationData::release_reabsorptionratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = reabsorptionratio_;
  reabsorptionratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalRegulationData::unsafe_arena_release_reabsorptionratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalRegulationData.ReabsorptionRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = reabsorptionratio_;
  reabsorptionratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalRegulationData::_internal_mutable_reabsorptionratio() {
  
  if (reabsorptionratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    reabsorptionratio_ = p;
  }
  return reabsorptionratio_;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalRegulationData::mutable_reabsorptionratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalRegulationData.ReabsorptionRatio)
  return _internal_mutable_reabsorptionratio();
}
inline void SubstanceRenalRegulationData::set_allocated_reabsorptionratio(::pulse::cdm::bind::ScalarData* reabsorptionratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionratio_);
  }
  if (reabsorptionratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionratio)->GetArena();
    if (message_arena != submessage_arena) {
      reabsorptionratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reabsorptionratio, submessage_arena);
    }
    
  } else {
    
  }
  reabsorptionratio_ = reabsorptionratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.ReabsorptionRatio)
}

// .pulse.cdm.bind.ScalarMassPerTimeData TransportMaximum = 4;
inline bool SubstanceRenalRegulationData::_internal_has_transportmaximum() const {
  return this != internal_default_instance() && transportmaximum_ != nullptr;
}
inline bool SubstanceRenalRegulationData::has_transportmaximum() const {
  return _internal_has_transportmaximum();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalRegulationData::_internal_transportmaximum() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = transportmaximum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalRegulationData::transportmaximum() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalRegulationData.TransportMaximum)
  return _internal_transportmaximum();
}
inline void SubstanceRenalRegulationData::unsafe_arena_set_allocated_transportmaximum(
    ::pulse::cdm::bind::ScalarMassPerTimeData* transportmaximum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportmaximum_);
  }
  transportmaximum_ = transportmaximum;
  if (transportmaximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.TransportMaximum)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalRegulationData::release_transportmaximum() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = transportmaximum_;
  transportmaximum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalRegulationData::unsafe_arena_release_transportmaximum() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalRegulationData.TransportMaximum)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = transportmaximum_;
  transportmaximum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalRegulationData::_internal_mutable_transportmaximum() {
  
  if (transportmaximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    transportmaximum_ = p;
  }
  return transportmaximum_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalRegulationData::mutable_transportmaximum() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalRegulationData.TransportMaximum)
  return _internal_mutable_transportmaximum();
}
inline void SubstanceRenalRegulationData::set_allocated_transportmaximum(::pulse::cdm::bind::ScalarMassPerTimeData* transportmaximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportmaximum_);
  }
  if (transportmaximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportmaximum)->GetArena();
    if (message_arena != submessage_arena) {
      transportmaximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportmaximum, submessage_arena);
    }
    
  } else {
    
  }
  transportmaximum_ = transportmaximum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalRegulationData.TransportMaximum)
}

// -------------------------------------------------------------------

// SubstanceRenalClearanceData

// .pulse.cdm.bind.ScalarVolumePerTimeMassData Clearance = 1;
inline bool SubstanceRenalClearanceData::_internal_has_clearance() const {
  return this != internal_default_instance() && clearance_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_clearance() const {
  return _internal_has_clearance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceRenalClearanceData::_internal_clearance() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeMassData* p = clearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& SubstanceRenalClearanceData::clearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.Clearance)
  return _internal_clearance();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_clearance(
    ::pulse::cdm::bind::ScalarVolumePerTimeMassData* clearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  clearance_ = clearance;
  if (clearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.Clearance)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceRenalClearanceData::release_clearance() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = clearance_;
  clearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceRenalClearanceData::unsafe_arena_release_clearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.Clearance)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeMassData* temp = clearance_;
  clearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceRenalClearanceData::_internal_mutable_clearance() {
  
  if (clearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeMassData>(GetArena());
    clearance_ = p;
  }
  return clearance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeMassData* SubstanceRenalClearanceData::mutable_clearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.Clearance)
  return _internal_mutable_clearance();
}
inline void SubstanceRenalClearanceData::set_allocated_clearance(::pulse::cdm::bind::ScalarVolumePerTimeMassData* clearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  if (clearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance)->GetArena();
    if (message_arena != submessage_arena) {
      clearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearance, submessage_arena);
    }
    
  } else {
    
  }
  clearance_ = clearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.Clearance)
}

// .pulse.cdm.bind.SubstanceRenalRegulationData Regulation = 2;
inline bool SubstanceRenalClearanceData::_internal_has_regulation() const {
  return this != internal_default_instance() && regulation_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_regulation() const {
  return _internal_has_regulation();
}
inline void SubstanceRenalClearanceData::clear_regulation() {
  if (GetArena() == nullptr && regulation_ != nullptr) {
    delete regulation_;
  }
  regulation_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceRenalRegulationData& SubstanceRenalClearanceData::_internal_regulation() const {
  const ::pulse::cdm::bind::SubstanceRenalRegulationData* p = regulation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceRenalRegulationData&>(
      ::pulse::cdm::bind::_SubstanceRenalRegulationData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceRenalRegulationData& SubstanceRenalClearanceData::regulation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.Regulation)
  return _internal_regulation();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_regulation(
    ::pulse::cdm::bind::SubstanceRenalRegulationData* regulation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regulation_);
  }
  regulation_ = regulation;
  if (regulation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.Regulation)
}
inline ::pulse::cdm::bind::SubstanceRenalRegulationData* SubstanceRenalClearanceData::release_regulation() {
  
  ::pulse::cdm::bind::SubstanceRenalRegulationData* temp = regulation_;
  regulation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceRenalRegulationData* SubstanceRenalClearanceData::unsafe_arena_release_regulation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.Regulation)
  
  ::pulse::cdm::bind::SubstanceRenalRegulationData* temp = regulation_;
  regulation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceRenalRegulationData* SubstanceRenalClearanceData::_internal_mutable_regulation() {
  
  if (regulation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceRenalRegulationData>(GetArena());
    regulation_ = p;
  }
  return regulation_;
}
inline ::pulse::cdm::bind::SubstanceRenalRegulationData* SubstanceRenalClearanceData::mutable_regulation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.Regulation)
  return _internal_mutable_regulation();
}
inline void SubstanceRenalClearanceData::set_allocated_regulation(::pulse::cdm::bind::SubstanceRenalRegulationData* regulation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regulation_;
  }
  if (regulation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regulation);
    if (message_arena != submessage_arena) {
      regulation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regulation, submessage_arena);
    }
    
  } else {
    
  }
  regulation_ = regulation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.Regulation)
}

// .pulse.cdm.bind.ScalarMassPerTimeData FiltrationRate = 3;
inline bool SubstanceRenalClearanceData::_internal_has_filtrationrate() const {
  return this != internal_default_instance() && filtrationrate_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_filtrationrate() const {
  return _internal_has_filtrationrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::_internal_filtrationrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = filtrationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::filtrationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.FiltrationRate)
  return _internal_filtrationrate();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_filtrationrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* filtrationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationrate_);
  }
  filtrationrate_ = filtrationrate;
  if (filtrationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.FiltrationRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::release_filtrationrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = filtrationrate_;
  filtrationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::unsafe_arena_release_filtrationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.FiltrationRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = filtrationrate_;
  filtrationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::_internal_mutable_filtrationrate() {
  
  if (filtrationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    filtrationrate_ = p;
  }
  return filtrationrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::mutable_filtrationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.FiltrationRate)
  return _internal_mutable_filtrationrate();
}
inline void SubstanceRenalClearanceData::set_allocated_filtrationrate(::pulse::cdm::bind::ScalarMassPerTimeData* filtrationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationrate_);
  }
  if (filtrationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationrate)->GetArena();
    if (message_arena != submessage_arena) {
      filtrationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filtrationrate, submessage_arena);
    }
    
  } else {
    
  }
  filtrationrate_ = filtrationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.FiltrationRate)
}

// .pulse.cdm.bind.ScalarMassPerTimeData ReabsorptionRate = 4;
inline bool SubstanceRenalClearanceData::_internal_has_reabsorptionrate() const {
  return this != internal_default_instance() && reabsorptionrate_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_reabsorptionrate() const {
  return _internal_has_reabsorptionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::_internal_reabsorptionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = reabsorptionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::reabsorptionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.ReabsorptionRate)
  return _internal_reabsorptionrate();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_reabsorptionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* reabsorptionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionrate_);
  }
  reabsorptionrate_ = reabsorptionrate;
  if (reabsorptionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.ReabsorptionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::release_reabsorptionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = reabsorptionrate_;
  reabsorptionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::unsafe_arena_release_reabsorptionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.ReabsorptionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = reabsorptionrate_;
  reabsorptionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::_internal_mutable_reabsorptionrate() {
  
  if (reabsorptionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    reabsorptionrate_ = p;
  }
  return reabsorptionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::mutable_reabsorptionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.ReabsorptionRate)
  return _internal_mutable_reabsorptionrate();
}
inline void SubstanceRenalClearanceData::set_allocated_reabsorptionrate(::pulse::cdm::bind::ScalarMassPerTimeData* reabsorptionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionrate_);
  }
  if (reabsorptionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reabsorptionrate)->GetArena();
    if (message_arena != submessage_arena) {
      reabsorptionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reabsorptionrate, submessage_arena);
    }
    
  } else {
    
  }
  reabsorptionrate_ = reabsorptionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.ReabsorptionRate)
}

// .pulse.cdm.bind.ScalarMassPerTimeData ExcretionRate = 5;
inline bool SubstanceRenalClearanceData::_internal_has_excretionrate() const {
  return this != internal_default_instance() && excretionrate_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_excretionrate() const {
  return _internal_has_excretionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::_internal_excretionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = excretionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& SubstanceRenalClearanceData::excretionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.ExcretionRate)
  return _internal_excretionrate();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_excretionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* excretionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excretionrate_);
  }
  excretionrate_ = excretionrate;
  if (excretionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.ExcretionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::release_excretionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = excretionrate_;
  excretionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::unsafe_arena_release_excretionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.ExcretionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = excretionrate_;
  excretionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::_internal_mutable_excretionrate() {
  
  if (excretionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    excretionrate_ = p;
  }
  return excretionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* SubstanceRenalClearanceData::mutable_excretionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.ExcretionRate)
  return _internal_mutable_excretionrate();
}
inline void SubstanceRenalClearanceData::set_allocated_excretionrate(::pulse::cdm::bind::ScalarMassPerTimeData* excretionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(excretionrate_);
  }
  if (excretionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excretionrate)->GetArena();
    if (message_arena != submessage_arena) {
      excretionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excretionrate, submessage_arena);
    }
    
  } else {
    
  }
  excretionrate_ = excretionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.ExcretionRate)
}

// .pulse.cdm.bind.ScalarData GlomerularFilterability = 6;
inline bool SubstanceRenalClearanceData::_internal_has_glomerularfilterability() const {
  return this != internal_default_instance() && glomerularfilterability_ != nullptr;
}
inline bool SubstanceRenalClearanceData::has_glomerularfilterability() const {
  return _internal_has_glomerularfilterability();
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceRenalClearanceData::_internal_glomerularfilterability() const {
  const ::pulse::cdm::bind::ScalarData* p = glomerularfilterability_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceRenalClearanceData::glomerularfilterability() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceRenalClearanceData.GlomerularFilterability)
  return _internal_glomerularfilterability();
}
inline void SubstanceRenalClearanceData::unsafe_arena_set_allocated_glomerularfilterability(
    ::pulse::cdm::bind::ScalarData* glomerularfilterability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfilterability_);
  }
  glomerularfilterability_ = glomerularfilterability;
  if (glomerularfilterability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.GlomerularFilterability)
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalClearanceData::release_glomerularfilterability() {
  
  ::pulse::cdm::bind::ScalarData* temp = glomerularfilterability_;
  glomerularfilterability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalClearanceData::unsafe_arena_release_glomerularfilterability() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceRenalClearanceData.GlomerularFilterability)
  
  ::pulse::cdm::bind::ScalarData* temp = glomerularfilterability_;
  glomerularfilterability_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalClearanceData::_internal_mutable_glomerularfilterability() {
  
  if (glomerularfilterability_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    glomerularfilterability_ = p;
  }
  return glomerularfilterability_;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceRenalClearanceData::mutable_glomerularfilterability() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceRenalClearanceData.GlomerularFilterability)
  return _internal_mutable_glomerularfilterability();
}
inline void SubstanceRenalClearanceData::set_allocated_glomerularfilterability(::pulse::cdm::bind::ScalarData* glomerularfilterability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfilterability_);
  }
  if (glomerularfilterability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfilterability)->GetArena();
    if (message_arena != submessage_arena) {
      glomerularfilterability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glomerularfilterability, submessage_arena);
    }
    
  } else {
    
  }
  glomerularfilterability_ = glomerularfilterability;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceRenalClearanceData.GlomerularFilterability)
}

// -------------------------------------------------------------------

// SubstanceClearanceData

// .pulse.cdm.bind.SubstanceSystemicClearanceData SystemicClearance = 1;
inline bool SubstanceClearanceData::_internal_has_systemicclearance() const {
  return this != internal_default_instance() && systemicclearance_ != nullptr;
}
inline bool SubstanceClearanceData::has_systemicclearance() const {
  return _internal_has_systemicclearance();
}
inline void SubstanceClearanceData::clear_systemicclearance() {
  if (GetArena() == nullptr && systemicclearance_ != nullptr) {
    delete systemicclearance_;
  }
  systemicclearance_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceSystemicClearanceData& SubstanceClearanceData::_internal_systemicclearance() const {
  const ::pulse::cdm::bind::SubstanceSystemicClearanceData* p = systemicclearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceSystemicClearanceData&>(
      ::pulse::cdm::bind::_SubstanceSystemicClearanceData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceSystemicClearanceData& SubstanceClearanceData::systemicclearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceClearanceData.SystemicClearance)
  return _internal_systemicclearance();
}
inline void SubstanceClearanceData::unsafe_arena_set_allocated_systemicclearance(
    ::pulse::cdm::bind::SubstanceSystemicClearanceData* systemicclearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicclearance_);
  }
  systemicclearance_ = systemicclearance;
  if (systemicclearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceClearanceData.SystemicClearance)
}
inline ::pulse::cdm::bind::SubstanceSystemicClearanceData* SubstanceClearanceData::release_systemicclearance() {
  
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* temp = systemicclearance_;
  systemicclearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceSystemicClearanceData* SubstanceClearanceData::unsafe_arena_release_systemicclearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceClearanceData.SystemicClearance)
  
  ::pulse::cdm::bind::SubstanceSystemicClearanceData* temp = systemicclearance_;
  systemicclearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceSystemicClearanceData* SubstanceClearanceData::_internal_mutable_systemicclearance() {
  
  if (systemicclearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceSystemicClearanceData>(GetArena());
    systemicclearance_ = p;
  }
  return systemicclearance_;
}
inline ::pulse::cdm::bind::SubstanceSystemicClearanceData* SubstanceClearanceData::mutable_systemicclearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceClearanceData.SystemicClearance)
  return _internal_mutable_systemicclearance();
}
inline void SubstanceClearanceData::set_allocated_systemicclearance(::pulse::cdm::bind::SubstanceSystemicClearanceData* systemicclearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete systemicclearance_;
  }
  if (systemicclearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(systemicclearance);
    if (message_arena != submessage_arena) {
      systemicclearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemicclearance, submessage_arena);
    }
    
  } else {
    
  }
  systemicclearance_ = systemicclearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceClearanceData.SystemicClearance)
}

// .pulse.cdm.bind.SubstanceRenalClearanceData RenalClearance = 2;
inline bool SubstanceClearanceData::_internal_has_renalclearance() const {
  return this != internal_default_instance() && renalclearance_ != nullptr;
}
inline bool SubstanceClearanceData::has_renalclearance() const {
  return _internal_has_renalclearance();
}
inline void SubstanceClearanceData::clear_renalclearance() {
  if (GetArena() == nullptr && renalclearance_ != nullptr) {
    delete renalclearance_;
  }
  renalclearance_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceRenalClearanceData& SubstanceClearanceData::_internal_renalclearance() const {
  const ::pulse::cdm::bind::SubstanceRenalClearanceData* p = renalclearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceRenalClearanceData&>(
      ::pulse::cdm::bind::_SubstanceRenalClearanceData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceRenalClearanceData& SubstanceClearanceData::renalclearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceClearanceData.RenalClearance)
  return _internal_renalclearance();
}
inline void SubstanceClearanceData::unsafe_arena_set_allocated_renalclearance(
    ::pulse::cdm::bind::SubstanceRenalClearanceData* renalclearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalclearance_);
  }
  renalclearance_ = renalclearance;
  if (renalclearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceClearanceData.RenalClearance)
}
inline ::pulse::cdm::bind::SubstanceRenalClearanceData* SubstanceClearanceData::release_renalclearance() {
  
  ::pulse::cdm::bind::SubstanceRenalClearanceData* temp = renalclearance_;
  renalclearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceRenalClearanceData* SubstanceClearanceData::unsafe_arena_release_renalclearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceClearanceData.RenalClearance)
  
  ::pulse::cdm::bind::SubstanceRenalClearanceData* temp = renalclearance_;
  renalclearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceRenalClearanceData* SubstanceClearanceData::_internal_mutable_renalclearance() {
  
  if (renalclearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceRenalClearanceData>(GetArena());
    renalclearance_ = p;
  }
  return renalclearance_;
}
inline ::pulse::cdm::bind::SubstanceRenalClearanceData* SubstanceClearanceData::mutable_renalclearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceClearanceData.RenalClearance)
  return _internal_mutable_renalclearance();
}
inline void SubstanceClearanceData::set_allocated_renalclearance(::pulse::cdm::bind::SubstanceRenalClearanceData* renalclearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete renalclearance_;
  }
  if (renalclearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(renalclearance);
    if (message_arena != submessage_arena) {
      renalclearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalclearance, submessage_arena);
    }
    
  } else {
    
  }
  renalclearance_ = renalclearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceClearanceData.RenalClearance)
}

// -------------------------------------------------------------------

// SubstanceFractionData

// string Name = 1;
inline void SubstanceFractionData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubstanceFractionData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceFractionData.Name)
  return _internal_name();
}
inline void SubstanceFractionData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceFractionData.Name)
}
inline std::string* SubstanceFractionData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceFractionData.Name)
  return _internal_mutable_name();
}
inline const std::string& SubstanceFractionData::_internal_name() const {
  return name_.Get();
}
inline void SubstanceFractionData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceFractionData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceFractionData.Name)
}
inline void SubstanceFractionData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceFractionData.Name)
}
inline void SubstanceFractionData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceFractionData.Name)
}
inline std::string* SubstanceFractionData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceFractionData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceFractionData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceFractionData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceFractionData.Name)
}

// .pulse.cdm.bind.Scalar0To1Data Amount = 2;
inline bool SubstanceFractionData::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool SubstanceFractionData::has_amount() const {
  return _internal_has_amount();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceFractionData::_internal_amount() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceFractionData::amount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceFractionData.Amount)
  return _internal_amount();
}
inline void SubstanceFractionData::unsafe_arena_set_allocated_amount(
    ::pulse::cdm::bind::Scalar0To1Data* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceFractionData.Amount)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceFractionData::release_amount() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceFractionData::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceFractionData.Amount)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceFractionData::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceFractionData::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceFractionData.Amount)
  return _internal_mutable_amount();
}
inline void SubstanceFractionData::set_allocated_amount(::pulse::cdm::bind::Scalar0To1Data* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount)->GetArena();
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceFractionData.Amount)
}

// -------------------------------------------------------------------

// SubstanceConcentrationData

// string Name = 1;
inline void SubstanceConcentrationData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubstanceConcentrationData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceConcentrationData.Name)
  return _internal_name();
}
inline void SubstanceConcentrationData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceConcentrationData.Name)
}
inline std::string* SubstanceConcentrationData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceConcentrationData.Name)
  return _internal_mutable_name();
}
inline const std::string& SubstanceConcentrationData::_internal_name() const {
  return name_.Get();
}
inline void SubstanceConcentrationData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceConcentrationData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceConcentrationData.Name)
}
inline void SubstanceConcentrationData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceConcentrationData.Name)
}
inline void SubstanceConcentrationData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceConcentrationData.Name)
}
inline std::string* SubstanceConcentrationData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceConcentrationData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceConcentrationData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceConcentrationData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceConcentrationData.Name)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
inline bool SubstanceConcentrationData::_internal_has_concentration() const {
  return this != internal_default_instance() && concentration_ != nullptr;
}
inline bool SubstanceConcentrationData::has_concentration() const {
  return _internal_has_concentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceConcentrationData::_internal_concentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = concentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceConcentrationData::concentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceConcentrationData.Concentration)
  return _internal_concentration();
}
inline void SubstanceConcentrationData::unsafe_arena_set_allocated_concentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  concentration_ = concentration;
  if (concentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceConcentrationData.Concentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceConcentrationData::release_concentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceConcentrationData::unsafe_arena_release_concentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceConcentrationData.Concentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceConcentrationData::_internal_mutable_concentration() {
  
  if (concentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    concentration_ = p;
  }
  return concentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceConcentrationData::mutable_concentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceConcentrationData.Concentration)
  return _internal_mutable_concentration();
}
inline void SubstanceConcentrationData::set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  if (concentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration)->GetArena();
    if (message_arena != submessage_arena) {
      concentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concentration, submessage_arena);
    }
    
  } else {
    
  }
  concentration_ = concentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceConcentrationData.Concentration)
}

// -------------------------------------------------------------------

// SubstanceData

// string Name = 1;
inline void SubstanceData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubstanceData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Name)
  return _internal_name();
}
inline void SubstanceData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceData.Name)
}
inline std::string* SubstanceData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Name)
  return _internal_mutable_name();
}
inline const std::string& SubstanceData::_internal_name() const {
  return name_.Get();
}
inline void SubstanceData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceData.Name)
}
inline void SubstanceData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceData.Name)
}
inline void SubstanceData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceData.Name)
}
inline std::string* SubstanceData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Name)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Density = 2;
inline bool SubstanceData::_internal_has_density() const {
  return this != internal_default_instance() && density_ != nullptr;
}
inline bool SubstanceData::has_density() const {
  return _internal_has_density();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::_internal_density() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = density_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::density() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Density)
  return _internal_density();
}
inline void SubstanceData::unsafe_arena_set_allocated_density(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* density) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(density_);
  }
  density_ = density;
  if (density) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.Density)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::release_density() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = density_;
  density_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::unsafe_arena_release_density() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Density)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = density_;
  density_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::_internal_mutable_density() {
  
  if (density_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    density_ = p;
  }
  return density_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::mutable_density() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Density)
  return _internal_mutable_density();
}
inline void SubstanceData::set_allocated_density(::pulse::cdm::bind::ScalarMassPerVolumeData* density) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(density_);
  }
  if (density) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(density)->GetArena();
    if (message_arena != submessage_arena) {
      density = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, density, submessage_arena);
    }
    
  } else {
    
  }
  density_ = density;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Density)
}

// .pulse.cdm.bind.ScalarMassPerAmountData MolarMass = 3;
inline bool SubstanceData::_internal_has_molarmass() const {
  return this != internal_default_instance() && molarmass_ != nullptr;
}
inline bool SubstanceData::has_molarmass() const {
  return _internal_has_molarmass();
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& SubstanceData::_internal_molarmass() const {
  const ::pulse::cdm::bind::ScalarMassPerAmountData* p = molarmass_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAmountData&>(
      ::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& SubstanceData::molarmass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MolarMass)
  return _internal_molarmass();
}
inline void SubstanceData::unsafe_arena_set_allocated_molarmass(
    ::pulse::cdm::bind::ScalarMassPerAmountData* molarmass) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmass_);
  }
  molarmass_ = molarmass;
  if (molarmass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MolarMass)
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* SubstanceData::release_molarmass() {
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmass_;
  molarmass_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* SubstanceData::unsafe_arena_release_molarmass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MolarMass)
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmass_;
  molarmass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* SubstanceData::_internal_mutable_molarmass() {
  
  if (molarmass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(GetArena());
    molarmass_ = p;
  }
  return molarmass_;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* SubstanceData::mutable_molarmass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MolarMass)
  return _internal_mutable_molarmass();
}
inline void SubstanceData::set_allocated_molarmass(::pulse::cdm::bind::ScalarMassPerAmountData* molarmass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmass_);
  }
  if (molarmass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmass)->GetArena();
    if (message_arena != submessage_arena) {
      molarmass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, molarmass, submessage_arena);
    }
    
  } else {
    
  }
  molarmass_ = molarmass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MolarMass)
}

// .pulse.cdm.bind.SubstanceData.eState State = 4;
inline void SubstanceData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::SubstanceData_eState SubstanceData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::SubstanceData_eState >(state_);
}
inline ::pulse::cdm::bind::SubstanceData_eState SubstanceData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.State)
  return _internal_state();
}
inline void SubstanceData::_internal_set_state(::pulse::cdm::bind::SubstanceData_eState value) {
  
  state_ = value;
}
inline void SubstanceData::set_state(::pulse::cdm::bind::SubstanceData_eState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceData.State)
}

// .pulse.cdm.bind.ScalarMassPerAreaTimeData MaximumDiffusionFlux = 5;
inline bool SubstanceData::_internal_has_maximumdiffusionflux() const {
  return this != internal_default_instance() && maximumdiffusionflux_ != nullptr;
}
inline bool SubstanceData::has_maximumdiffusionflux() const {
  return _internal_has_maximumdiffusionflux();
}
inline const ::pulse::cdm::bind::ScalarMassPerAreaTimeData& SubstanceData::_internal_maximumdiffusionflux() const {
  const ::pulse::cdm::bind::ScalarMassPerAreaTimeData* p = maximumdiffusionflux_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAreaTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerAreaTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAreaTimeData& SubstanceData::maximumdiffusionflux() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MaximumDiffusionFlux)
  return _internal_maximumdiffusionflux();
}
inline void SubstanceData::unsafe_arena_set_allocated_maximumdiffusionflux(
    ::pulse::cdm::bind::ScalarMassPerAreaTimeData* maximumdiffusionflux) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumdiffusionflux_);
  }
  maximumdiffusionflux_ = maximumdiffusionflux;
  if (maximumdiffusionflux) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MaximumDiffusionFlux)
}
inline ::pulse::cdm::bind::ScalarMassPerAreaTimeData* SubstanceData::release_maximumdiffusionflux() {
  
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* temp = maximumdiffusionflux_;
  maximumdiffusionflux_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAreaTimeData* SubstanceData::unsafe_arena_release_maximumdiffusionflux() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MaximumDiffusionFlux)
  
  ::pulse::cdm::bind::ScalarMassPerAreaTimeData* temp = maximumdiffusionflux_;
  maximumdiffusionflux_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAreaTimeData* SubstanceData::_internal_mutable_maximumdiffusionflux() {
  
  if (maximumdiffusionflux_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAreaTimeData>(GetArena());
    maximumdiffusionflux_ = p;
  }
  return maximumdiffusionflux_;
}
inline ::pulse::cdm::bind::ScalarMassPerAreaTimeData* SubstanceData::mutable_maximumdiffusionflux() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MaximumDiffusionFlux)
  return _internal_mutable_maximumdiffusionflux();
}
inline void SubstanceData::set_allocated_maximumdiffusionflux(::pulse::cdm::bind::ScalarMassPerAreaTimeData* maximumdiffusionflux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumdiffusionflux_);
  }
  if (maximumdiffusionflux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumdiffusionflux)->GetArena();
    if (message_arena != submessage_arena) {
      maximumdiffusionflux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximumdiffusionflux, submessage_arena);
    }
    
  } else {
    
  }
  maximumdiffusionflux_ = maximumdiffusionflux;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MaximumDiffusionFlux)
}

// .pulse.cdm.bind.ScalarData MichaelisCoefficient = 6;
inline bool SubstanceData::_internal_has_michaeliscoefficient() const {
  return this != internal_default_instance() && michaeliscoefficient_ != nullptr;
}
inline bool SubstanceData::has_michaeliscoefficient() const {
  return _internal_has_michaeliscoefficient();
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceData::_internal_michaeliscoefficient() const {
  const ::pulse::cdm::bind::ScalarData* p = michaeliscoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceData::michaeliscoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MichaelisCoefficient)
  return _internal_michaeliscoefficient();
}
inline void SubstanceData::unsafe_arena_set_allocated_michaeliscoefficient(
    ::pulse::cdm::bind::ScalarData* michaeliscoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(michaeliscoefficient_);
  }
  michaeliscoefficient_ = michaeliscoefficient;
  if (michaeliscoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MichaelisCoefficient)
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::release_michaeliscoefficient() {
  
  ::pulse::cdm::bind::ScalarData* temp = michaeliscoefficient_;
  michaeliscoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::unsafe_arena_release_michaeliscoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MichaelisCoefficient)
  
  ::pulse::cdm::bind::ScalarData* temp = michaeliscoefficient_;
  michaeliscoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::_internal_mutable_michaeliscoefficient() {
  
  if (michaeliscoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    michaeliscoefficient_ = p;
  }
  return michaeliscoefficient_;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::mutable_michaeliscoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MichaelisCoefficient)
  return _internal_mutable_michaeliscoefficient();
}
inline void SubstanceData::set_allocated_michaeliscoefficient(::pulse::cdm::bind::ScalarData* michaeliscoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(michaeliscoefficient_);
  }
  if (michaeliscoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(michaeliscoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      michaeliscoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, michaeliscoefficient, submessage_arena);
    }
    
  } else {
    
  }
  michaeliscoefficient_ = michaeliscoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MichaelisCoefficient)
}

// .pulse.cdm.bind.SubstanceAerosolizationData Aerosolization = 7;
inline bool SubstanceData::_internal_has_aerosolization() const {
  return this != internal_default_instance() && aerosolization_ != nullptr;
}
inline bool SubstanceData::has_aerosolization() const {
  return _internal_has_aerosolization();
}
inline void SubstanceData::clear_aerosolization() {
  if (GetArena() == nullptr && aerosolization_ != nullptr) {
    delete aerosolization_;
  }
  aerosolization_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceAerosolizationData& SubstanceData::_internal_aerosolization() const {
  const ::pulse::cdm::bind::SubstanceAerosolizationData* p = aerosolization_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceAerosolizationData&>(
      ::pulse::cdm::bind::_SubstanceAerosolizationData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceAerosolizationData& SubstanceData::aerosolization() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Aerosolization)
  return _internal_aerosolization();
}
inline void SubstanceData::unsafe_arena_set_allocated_aerosolization(
    ::pulse::cdm::bind::SubstanceAerosolizationData* aerosolization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aerosolization_);
  }
  aerosolization_ = aerosolization;
  if (aerosolization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.Aerosolization)
}
inline ::pulse::cdm::bind::SubstanceAerosolizationData* SubstanceData::release_aerosolization() {
  
  ::pulse::cdm::bind::SubstanceAerosolizationData* temp = aerosolization_;
  aerosolization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceAerosolizationData* SubstanceData::unsafe_arena_release_aerosolization() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Aerosolization)
  
  ::pulse::cdm::bind::SubstanceAerosolizationData* temp = aerosolization_;
  aerosolization_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceAerosolizationData* SubstanceData::_internal_mutable_aerosolization() {
  
  if (aerosolization_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceAerosolizationData>(GetArena());
    aerosolization_ = p;
  }
  return aerosolization_;
}
inline ::pulse::cdm::bind::SubstanceAerosolizationData* SubstanceData::mutable_aerosolization() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Aerosolization)
  return _internal_mutable_aerosolization();
}
inline void SubstanceData::set_allocated_aerosolization(::pulse::cdm::bind::SubstanceAerosolizationData* aerosolization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aerosolization_;
  }
  if (aerosolization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aerosolization);
    if (message_arena != submessage_arena) {
      aerosolization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aerosolization, submessage_arena);
    }
    
  } else {
    
  }
  aerosolization_ = aerosolization;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Aerosolization)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData BloodConcentration = 8;
inline bool SubstanceData::_internal_has_bloodconcentration() const {
  return this != internal_default_instance() && bloodconcentration_ != nullptr;
}
inline bool SubstanceData::has_bloodconcentration() const {
  return _internal_has_bloodconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::_internal_bloodconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = bloodconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::bloodconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.BloodConcentration)
  return _internal_bloodconcentration();
}
inline void SubstanceData::unsafe_arena_set_allocated_bloodconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodconcentration_);
  }
  bloodconcentration_ = bloodconcentration;
  if (bloodconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.BloodConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::release_bloodconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bloodconcentration_;
  bloodconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::unsafe_arena_release_bloodconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.BloodConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bloodconcentration_;
  bloodconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::_internal_mutable_bloodconcentration() {
  
  if (bloodconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    bloodconcentration_ = p;
  }
  return bloodconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::mutable_bloodconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.BloodConcentration)
  return _internal_mutable_bloodconcentration();
}
inline void SubstanceData::set_allocated_bloodconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* bloodconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodconcentration_);
  }
  if (bloodconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      bloodconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodconcentration, submessage_arena);
    }
    
  } else {
    
  }
  bloodconcentration_ = bloodconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.BloodConcentration)
}

// .pulse.cdm.bind.ScalarMassData MassInBody = 9;
inline bool SubstanceData::_internal_has_massinbody() const {
  return this != internal_default_instance() && massinbody_ != nullptr;
}
inline bool SubstanceData::has_massinbody() const {
  return _internal_has_massinbody();
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::_internal_massinbody() const {
  const ::pulse::cdm::bind::ScalarMassData* p = massinbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::massinbody() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MassInBody)
  return _internal_massinbody();
}
inline void SubstanceData::unsafe_arena_set_allocated_massinbody(
    ::pulse::cdm::bind::ScalarMassData* massinbody) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinbody_);
  }
  massinbody_ = massinbody;
  if (massinbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MassInBody)
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::release_massinbody() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = massinbody_;
  massinbody_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::unsafe_arena_release_massinbody() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MassInBody)
  
  ::pulse::cdm::bind::ScalarMassData* temp = massinbody_;
  massinbody_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::_internal_mutable_massinbody() {
  
  if (massinbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    massinbody_ = p;
  }
  return massinbody_;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::mutable_massinbody() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MassInBody)
  return _internal_mutable_massinbody();
}
inline void SubstanceData::set_allocated_massinbody(::pulse::cdm::bind::ScalarMassData* massinbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinbody_);
  }
  if (massinbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinbody)->GetArena();
    if (message_arena != submessage_arena) {
      massinbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massinbody, submessage_arena);
    }
    
  } else {
    
  }
  massinbody_ = massinbody;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MassInBody)
}

// .pulse.cdm.bind.ScalarMassData MassInBlood = 10;
inline bool SubstanceData::_internal_has_massinblood() const {
  return this != internal_default_instance() && massinblood_ != nullptr;
}
inline bool SubstanceData::has_massinblood() const {
  return _internal_has_massinblood();
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::_internal_massinblood() const {
  const ::pulse::cdm::bind::ScalarMassData* p = massinblood_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::massinblood() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MassInBlood)
  return _internal_massinblood();
}
inline void SubstanceData::unsafe_arena_set_allocated_massinblood(
    ::pulse::cdm::bind::ScalarMassData* massinblood) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinblood_);
  }
  massinblood_ = massinblood;
  if (massinblood) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MassInBlood)
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::release_massinblood() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = massinblood_;
  massinblood_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::unsafe_arena_release_massinblood() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MassInBlood)
  
  ::pulse::cdm::bind::ScalarMassData* temp = massinblood_;
  massinblood_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::_internal_mutable_massinblood() {
  
  if (massinblood_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    massinblood_ = p;
  }
  return massinblood_;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::mutable_massinblood() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MassInBlood)
  return _internal_mutable_massinblood();
}
inline void SubstanceData::set_allocated_massinblood(::pulse::cdm::bind::ScalarMassData* massinblood) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinblood_);
  }
  if (massinblood) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massinblood)->GetArena();
    if (message_arena != submessage_arena) {
      massinblood = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massinblood, submessage_arena);
    }
    
  } else {
    
  }
  massinblood_ = massinblood;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MassInBlood)
}

// .pulse.cdm.bind.ScalarMassData MassInTissue = 11;
inline bool SubstanceData::_internal_has_massintissue() const {
  return this != internal_default_instance() && massintissue_ != nullptr;
}
inline bool SubstanceData::has_massintissue() const {
  return _internal_has_massintissue();
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::_internal_massintissue() const {
  const ::pulse::cdm::bind::ScalarMassData* p = massintissue_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::massintissue() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.MassInTissue)
  return _internal_massintissue();
}
inline void SubstanceData::unsafe_arena_set_allocated_massintissue(
    ::pulse::cdm::bind::ScalarMassData* massintissue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massintissue_);
  }
  massintissue_ = massintissue;
  if (massintissue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.MassInTissue)
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::release_massintissue() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = massintissue_;
  massintissue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::unsafe_arena_release_massintissue() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.MassInTissue)
  
  ::pulse::cdm::bind::ScalarMassData* temp = massintissue_;
  massintissue_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::_internal_mutable_massintissue() {
  
  if (massintissue_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    massintissue_ = p;
  }
  return massintissue_;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::mutable_massintissue() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.MassInTissue)
  return _internal_mutable_massintissue();
}
inline void SubstanceData::set_allocated_massintissue(::pulse::cdm::bind::ScalarMassData* massintissue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(massintissue_);
  }
  if (massintissue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massintissue)->GetArena();
    if (message_arena != submessage_arena) {
      massintissue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massintissue, submessage_arena);
    }
    
  } else {
    
  }
  massintissue_ = massintissue;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.MassInTissue)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaConcentration = 12;
inline bool SubstanceData::_internal_has_plasmaconcentration() const {
  return this != internal_default_instance() && plasmaconcentration_ != nullptr;
}
inline bool SubstanceData::has_plasmaconcentration() const {
  return _internal_has_plasmaconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::_internal_plasmaconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = plasmaconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::plasmaconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.PlasmaConcentration)
  return _internal_plasmaconcentration();
}
inline void SubstanceData::unsafe_arena_set_allocated_plasmaconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmaconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmaconcentration_);
  }
  plasmaconcentration_ = plasmaconcentration;
  if (plasmaconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.PlasmaConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::release_plasmaconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = plasmaconcentration_;
  plasmaconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::unsafe_arena_release_plasmaconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.PlasmaConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = plasmaconcentration_;
  plasmaconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::_internal_mutable_plasmaconcentration() {
  
  if (plasmaconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    plasmaconcentration_ = p;
  }
  return plasmaconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::mutable_plasmaconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.PlasmaConcentration)
  return _internal_mutable_plasmaconcentration();
}
inline void SubstanceData::set_allocated_plasmaconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* plasmaconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmaconcentration_);
  }
  if (plasmaconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmaconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      plasmaconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plasmaconcentration, submessage_arena);
    }
    
  } else {
    
  }
  plasmaconcentration_ = plasmaconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.PlasmaConcentration)
}

// .pulse.cdm.bind.ScalarMassData SystemicMassCleared = 13;
inline bool SubstanceData::_internal_has_systemicmasscleared() const {
  return this != internal_default_instance() && systemicmasscleared_ != nullptr;
}
inline bool SubstanceData::has_systemicmasscleared() const {
  return _internal_has_systemicmasscleared();
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::_internal_systemicmasscleared() const {
  const ::pulse::cdm::bind::ScalarMassData* p = systemicmasscleared_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& SubstanceData::systemicmasscleared() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.SystemicMassCleared)
  return _internal_systemicmasscleared();
}
inline void SubstanceData::unsafe_arena_set_allocated_systemicmasscleared(
    ::pulse::cdm::bind::ScalarMassData* systemicmasscleared) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicmasscleared_);
  }
  systemicmasscleared_ = systemicmasscleared;
  if (systemicmasscleared) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.SystemicMassCleared)
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::release_systemicmasscleared() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = systemicmasscleared_;
  systemicmasscleared_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::unsafe_arena_release_systemicmasscleared() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.SystemicMassCleared)
  
  ::pulse::cdm::bind::ScalarMassData* temp = systemicmasscleared_;
  systemicmasscleared_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::_internal_mutable_systemicmasscleared() {
  
  if (systemicmasscleared_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    systemicmasscleared_ = p;
  }
  return systemicmasscleared_;
}
inline ::pulse::cdm::bind::ScalarMassData* SubstanceData::mutable_systemicmasscleared() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.SystemicMassCleared)
  return _internal_mutable_systemicmasscleared();
}
inline void SubstanceData::set_allocated_systemicmasscleared(::pulse::cdm::bind::ScalarMassData* systemicmasscleared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicmasscleared_);
  }
  if (systemicmasscleared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicmasscleared)->GetArena();
    if (message_arena != submessage_arena) {
      systemicmasscleared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemicmasscleared, submessage_arena);
    }
    
  } else {
    
  }
  systemicmasscleared_ = systemicmasscleared;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.SystemicMassCleared)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 14;
inline bool SubstanceData::_internal_has_tissueconcentration() const {
  return this != internal_default_instance() && tissueconcentration_ != nullptr;
}
inline bool SubstanceData::has_tissueconcentration() const {
  return _internal_has_tissueconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::_internal_tissueconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = tissueconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceData::tissueconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.TissueConcentration)
  return _internal_tissueconcentration();
}
inline void SubstanceData::unsafe_arena_set_allocated_tissueconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration_);
  }
  tissueconcentration_ = tissueconcentration;
  if (tissueconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.TissueConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::release_tissueconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = tissueconcentration_;
  tissueconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::unsafe_arena_release_tissueconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.TissueConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = tissueconcentration_;
  tissueconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::_internal_mutable_tissueconcentration() {
  
  if (tissueconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    tissueconcentration_ = p;
  }
  return tissueconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceData::mutable_tissueconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.TissueConcentration)
  return _internal_mutable_tissueconcentration();
}
inline void SubstanceData::set_allocated_tissueconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration_);
  }
  if (tissueconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      tissueconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissueconcentration, submessage_arena);
    }
    
  } else {
    
  }
  tissueconcentration_ = tissueconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.TissueConcentration)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData AlveolarTransfer = 15;
inline bool SubstanceData::_internal_has_alveolartransfer() const {
  return this != internal_default_instance() && alveolartransfer_ != nullptr;
}
inline bool SubstanceData::has_alveolartransfer() const {
  return _internal_has_alveolartransfer();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceData::_internal_alveolartransfer() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = alveolartransfer_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceData::alveolartransfer() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.AlveolarTransfer)
  return _internal_alveolartransfer();
}
inline void SubstanceData::unsafe_arena_set_allocated_alveolartransfer(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* alveolartransfer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolartransfer_);
  }
  alveolartransfer_ = alveolartransfer;
  if (alveolartransfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.AlveolarTransfer)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceData::release_alveolartransfer() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = alveolartransfer_;
  alveolartransfer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceData::unsafe_arena_release_alveolartransfer() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.AlveolarTransfer)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = alveolartransfer_;
  alveolartransfer_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceData::_internal_mutable_alveolartransfer() {
  
  if (alveolartransfer_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    alveolartransfer_ = p;
  }
  return alveolartransfer_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceData::mutable_alveolartransfer() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.AlveolarTransfer)
  return _internal_mutable_alveolartransfer();
}
inline void SubstanceData::set_allocated_alveolartransfer(::pulse::cdm::bind::ScalarVolumePerTimeData* alveolartransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolartransfer_);
  }
  if (alveolartransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolartransfer)->GetArena();
    if (message_arena != submessage_arena) {
      alveolartransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alveolartransfer, submessage_arena);
    }
    
  } else {
    
  }
  alveolartransfer_ = alveolartransfer;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.AlveolarTransfer)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureData DiffusingCapacity = 16;
inline bool SubstanceData::_internal_has_diffusingcapacity() const {
  return this != internal_default_instance() && diffusingcapacity_ != nullptr;
}
inline bool SubstanceData::has_diffusingcapacity() const {
  return _internal_has_diffusingcapacity();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& SubstanceData::_internal_diffusingcapacity() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData* p = diffusingcapacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& SubstanceData::diffusingcapacity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.DiffusingCapacity)
  return _internal_diffusingcapacity();
}
inline void SubstanceData::unsafe_arena_set_allocated_diffusingcapacity(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureData* diffusingcapacity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusingcapacity_);
  }
  diffusingcapacity_ = diffusingcapacity;
  if (diffusingcapacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.DiffusingCapacity)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* SubstanceData::release_diffusingcapacity() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = diffusingcapacity_;
  diffusingcapacity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* SubstanceData::unsafe_arena_release_diffusingcapacity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.DiffusingCapacity)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = diffusingcapacity_;
  diffusingcapacity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* SubstanceData::_internal_mutable_diffusingcapacity() {
  
  if (diffusingcapacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(GetArena());
    diffusingcapacity_ = p;
  }
  return diffusingcapacity_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* SubstanceData::mutable_diffusingcapacity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.DiffusingCapacity)
  return _internal_mutable_diffusingcapacity();
}
inline void SubstanceData::set_allocated_diffusingcapacity(::pulse::cdm::bind::ScalarVolumePerTimePressureData* diffusingcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusingcapacity_);
  }
  if (diffusingcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diffusingcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      diffusingcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffusingcapacity, submessage_arena);
    }
    
  } else {
    
  }
  diffusingcapacity_ = diffusingcapacity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.DiffusingCapacity)
}

// .pulse.cdm.bind.Scalar0To1Data EndTidalFraction = 17;
inline bool SubstanceData::_internal_has_endtidalfraction() const {
  return this != internal_default_instance() && endtidalfraction_ != nullptr;
}
inline bool SubstanceData::has_endtidalfraction() const {
  return _internal_has_endtidalfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceData::_internal_endtidalfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = endtidalfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& SubstanceData::endtidalfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.EndTidalFraction)
  return _internal_endtidalfraction();
}
inline void SubstanceData::unsafe_arena_set_allocated_endtidalfraction(
    ::pulse::cdm::bind::Scalar0To1Data* endtidalfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalfraction_);
  }
  endtidalfraction_ = endtidalfraction;
  if (endtidalfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.EndTidalFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceData::release_endtidalfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidalfraction_;
  endtidalfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceData::unsafe_arena_release_endtidalfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.EndTidalFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidalfraction_;
  endtidalfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceData::_internal_mutable_endtidalfraction() {
  
  if (endtidalfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    endtidalfraction_ = p;
  }
  return endtidalfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* SubstanceData::mutable_endtidalfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.EndTidalFraction)
  return _internal_mutable_endtidalfraction();
}
inline void SubstanceData::set_allocated_endtidalfraction(::pulse::cdm::bind::Scalar0To1Data* endtidalfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalfraction_);
  }
  if (endtidalfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalfraction)->GetArena();
    if (message_arena != submessage_arena) {
      endtidalfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidalfraction, submessage_arena);
    }
    
  } else {
    
  }
  endtidalfraction_ = endtidalfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.EndTidalFraction)
}

// .pulse.cdm.bind.ScalarPressureData EndTidalPressure = 18;
inline bool SubstanceData::_internal_has_endtidalpressure() const {
  return this != internal_default_instance() && endtidalpressure_ != nullptr;
}
inline bool SubstanceData::has_endtidalpressure() const {
  return _internal_has_endtidalpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& SubstanceData::_internal_endtidalpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = endtidalpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& SubstanceData::endtidalpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.EndTidalPressure)
  return _internal_endtidalpressure();
}
inline void SubstanceData::unsafe_arena_set_allocated_endtidalpressure(
    ::pulse::cdm::bind::ScalarPressureData* endtidalpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalpressure_);
  }
  endtidalpressure_ = endtidalpressure;
  if (endtidalpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.EndTidalPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* SubstanceData::release_endtidalpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidalpressure_;
  endtidalpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* SubstanceData::unsafe_arena_release_endtidalpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.EndTidalPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidalpressure_;
  endtidalpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* SubstanceData::_internal_mutable_endtidalpressure() {
  
  if (endtidalpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    endtidalpressure_ = p;
  }
  return endtidalpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* SubstanceData::mutable_endtidalpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.EndTidalPressure)
  return _internal_mutable_endtidalpressure();
}
inline void SubstanceData::set_allocated_endtidalpressure(::pulse::cdm::bind::ScalarPressureData* endtidalpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalpressure_);
  }
  if (endtidalpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalpressure)->GetArena();
    if (message_arena != submessage_arena) {
      endtidalpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidalpressure, submessage_arena);
    }
    
  } else {
    
  }
  endtidalpressure_ = endtidalpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.EndTidalPressure)
}

// .pulse.cdm.bind.ScalarData RelativeDiffusionCoefficient = 19;
inline bool SubstanceData::_internal_has_relativediffusioncoefficient() const {
  return this != internal_default_instance() && relativediffusioncoefficient_ != nullptr;
}
inline bool SubstanceData::has_relativediffusioncoefficient() const {
  return _internal_has_relativediffusioncoefficient();
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceData::_internal_relativediffusioncoefficient() const {
  const ::pulse::cdm::bind::ScalarData* p = relativediffusioncoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& SubstanceData::relativediffusioncoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.RelativeDiffusionCoefficient)
  return _internal_relativediffusioncoefficient();
}
inline void SubstanceData::unsafe_arena_set_allocated_relativediffusioncoefficient(
    ::pulse::cdm::bind::ScalarData* relativediffusioncoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativediffusioncoefficient_);
  }
  relativediffusioncoefficient_ = relativediffusioncoefficient;
  if (relativediffusioncoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.RelativeDiffusionCoefficient)
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::release_relativediffusioncoefficient() {
  
  ::pulse::cdm::bind::ScalarData* temp = relativediffusioncoefficient_;
  relativediffusioncoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::unsafe_arena_release_relativediffusioncoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.RelativeDiffusionCoefficient)
  
  ::pulse::cdm::bind::ScalarData* temp = relativediffusioncoefficient_;
  relativediffusioncoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::_internal_mutable_relativediffusioncoefficient() {
  
  if (relativediffusioncoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    relativediffusioncoefficient_ = p;
  }
  return relativediffusioncoefficient_;
}
inline ::pulse::cdm::bind::ScalarData* SubstanceData::mutable_relativediffusioncoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.RelativeDiffusionCoefficient)
  return _internal_mutable_relativediffusioncoefficient();
}
inline void SubstanceData::set_allocated_relativediffusioncoefficient(::pulse::cdm::bind::ScalarData* relativediffusioncoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativediffusioncoefficient_);
  }
  if (relativediffusioncoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativediffusioncoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      relativediffusioncoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativediffusioncoefficient, submessage_arena);
    }
    
  } else {
    
  }
  relativediffusioncoefficient_ = relativediffusioncoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.RelativeDiffusionCoefficient)
}

// .pulse.cdm.bind.ScalarInversePressureData SolubilityCoefficient = 20;
inline bool SubstanceData::_internal_has_solubilitycoefficient() const {
  return this != internal_default_instance() && solubilitycoefficient_ != nullptr;
}
inline bool SubstanceData::has_solubilitycoefficient() const {
  return _internal_has_solubilitycoefficient();
}
inline const ::pulse::cdm::bind::ScalarInversePressureData& SubstanceData::_internal_solubilitycoefficient() const {
  const ::pulse::cdm::bind::ScalarInversePressureData* p = solubilitycoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarInversePressureData&>(
      ::pulse::cdm::bind::_ScalarInversePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarInversePressureData& SubstanceData::solubilitycoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.SolubilityCoefficient)
  return _internal_solubilitycoefficient();
}
inline void SubstanceData::unsafe_arena_set_allocated_solubilitycoefficient(
    ::pulse::cdm::bind::ScalarInversePressureData* solubilitycoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solubilitycoefficient_);
  }
  solubilitycoefficient_ = solubilitycoefficient;
  if (solubilitycoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.SolubilityCoefficient)
}
inline ::pulse::cdm::bind::ScalarInversePressureData* SubstanceData::release_solubilitycoefficient() {
  
  ::pulse::cdm::bind::ScalarInversePressureData* temp = solubilitycoefficient_;
  solubilitycoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarInversePressureData* SubstanceData::unsafe_arena_release_solubilitycoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.SolubilityCoefficient)
  
  ::pulse::cdm::bind::ScalarInversePressureData* temp = solubilitycoefficient_;
  solubilitycoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarInversePressureData* SubstanceData::_internal_mutable_solubilitycoefficient() {
  
  if (solubilitycoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarInversePressureData>(GetArena());
    solubilitycoefficient_ = p;
  }
  return solubilitycoefficient_;
}
inline ::pulse::cdm::bind::ScalarInversePressureData* SubstanceData::mutable_solubilitycoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.SolubilityCoefficient)
  return _internal_mutable_solubilitycoefficient();
}
inline void SubstanceData::set_allocated_solubilitycoefficient(::pulse::cdm::bind::ScalarInversePressureData* solubilitycoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(solubilitycoefficient_);
  }
  if (solubilitycoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solubilitycoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      solubilitycoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solubilitycoefficient, submessage_arena);
    }
    
  } else {
    
  }
  solubilitycoefficient_ = solubilitycoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.SolubilityCoefficient)
}

// .pulse.cdm.bind.SubstanceClearanceData Clearance = 21;
inline bool SubstanceData::_internal_has_clearance() const {
  return this != internal_default_instance() && clearance_ != nullptr;
}
inline bool SubstanceData::has_clearance() const {
  return _internal_has_clearance();
}
inline void SubstanceData::clear_clearance() {
  if (GetArena() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceClearanceData& SubstanceData::_internal_clearance() const {
  const ::pulse::cdm::bind::SubstanceClearanceData* p = clearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceClearanceData&>(
      ::pulse::cdm::bind::_SubstanceClearanceData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceClearanceData& SubstanceData::clearance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Clearance)
  return _internal_clearance();
}
inline void SubstanceData::unsafe_arena_set_allocated_clearance(
    ::pulse::cdm::bind::SubstanceClearanceData* clearance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearance_);
  }
  clearance_ = clearance;
  if (clearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.Clearance)
}
inline ::pulse::cdm::bind::SubstanceClearanceData* SubstanceData::release_clearance() {
  
  ::pulse::cdm::bind::SubstanceClearanceData* temp = clearance_;
  clearance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceClearanceData* SubstanceData::unsafe_arena_release_clearance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Clearance)
  
  ::pulse::cdm::bind::SubstanceClearanceData* temp = clearance_;
  clearance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceClearanceData* SubstanceData::_internal_mutable_clearance() {
  
  if (clearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceClearanceData>(GetArena());
    clearance_ = p;
  }
  return clearance_;
}
inline ::pulse::cdm::bind::SubstanceClearanceData* SubstanceData::mutable_clearance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Clearance)
  return _internal_mutable_clearance();
}
inline void SubstanceData::set_allocated_clearance(::pulse::cdm::bind::SubstanceClearanceData* clearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clearance_;
  }
  if (clearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clearance);
    if (message_arena != submessage_arena) {
      clearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearance, submessage_arena);
    }
    
  } else {
    
  }
  clearance_ = clearance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Clearance)
}

// .pulse.cdm.bind.SubstancePharmacokineticsData Pharmacokinetics = 22;
inline bool SubstanceData::_internal_has_pharmacokinetics() const {
  return this != internal_default_instance() && pharmacokinetics_ != nullptr;
}
inline bool SubstanceData::has_pharmacokinetics() const {
  return _internal_has_pharmacokinetics();
}
inline void SubstanceData::clear_pharmacokinetics() {
  if (GetArena() == nullptr && pharmacokinetics_ != nullptr) {
    delete pharmacokinetics_;
  }
  pharmacokinetics_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstancePharmacokineticsData& SubstanceData::_internal_pharmacokinetics() const {
  const ::pulse::cdm::bind::SubstancePharmacokineticsData* p = pharmacokinetics_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstancePharmacokineticsData&>(
      ::pulse::cdm::bind::_SubstancePharmacokineticsData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstancePharmacokineticsData& SubstanceData::pharmacokinetics() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Pharmacokinetics)
  return _internal_pharmacokinetics();
}
inline void SubstanceData::unsafe_arena_set_allocated_pharmacokinetics(
    ::pulse::cdm::bind::SubstancePharmacokineticsData* pharmacokinetics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pharmacokinetics_);
  }
  pharmacokinetics_ = pharmacokinetics;
  if (pharmacokinetics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.Pharmacokinetics)
}
inline ::pulse::cdm::bind::SubstancePharmacokineticsData* SubstanceData::release_pharmacokinetics() {
  
  ::pulse::cdm::bind::SubstancePharmacokineticsData* temp = pharmacokinetics_;
  pharmacokinetics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstancePharmacokineticsData* SubstanceData::unsafe_arena_release_pharmacokinetics() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Pharmacokinetics)
  
  ::pulse::cdm::bind::SubstancePharmacokineticsData* temp = pharmacokinetics_;
  pharmacokinetics_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstancePharmacokineticsData* SubstanceData::_internal_mutable_pharmacokinetics() {
  
  if (pharmacokinetics_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstancePharmacokineticsData>(GetArena());
    pharmacokinetics_ = p;
  }
  return pharmacokinetics_;
}
inline ::pulse::cdm::bind::SubstancePharmacokineticsData* SubstanceData::mutable_pharmacokinetics() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Pharmacokinetics)
  return _internal_mutable_pharmacokinetics();
}
inline void SubstanceData::set_allocated_pharmacokinetics(::pulse::cdm::bind::SubstancePharmacokineticsData* pharmacokinetics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pharmacokinetics_;
  }
  if (pharmacokinetics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pharmacokinetics);
    if (message_arena != submessage_arena) {
      pharmacokinetics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pharmacokinetics, submessage_arena);
    }
    
  } else {
    
  }
  pharmacokinetics_ = pharmacokinetics;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Pharmacokinetics)
}

// .pulse.cdm.bind.SubstancePharmacodynamicsData Pharmacodynamics = 23;
inline bool SubstanceData::_internal_has_pharmacodynamics() const {
  return this != internal_default_instance() && pharmacodynamics_ != nullptr;
}
inline bool SubstanceData::has_pharmacodynamics() const {
  return _internal_has_pharmacodynamics();
}
inline void SubstanceData::clear_pharmacodynamics() {
  if (GetArena() == nullptr && pharmacodynamics_ != nullptr) {
    delete pharmacodynamics_;
  }
  pharmacodynamics_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstancePharmacodynamicsData& SubstanceData::_internal_pharmacodynamics() const {
  const ::pulse::cdm::bind::SubstancePharmacodynamicsData* p = pharmacodynamics_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstancePharmacodynamicsData&>(
      ::pulse::cdm::bind::_SubstancePharmacodynamicsData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstancePharmacodynamicsData& SubstanceData::pharmacodynamics() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceData.Pharmacodynamics)
  return _internal_pharmacodynamics();
}
inline void SubstanceData::unsafe_arena_set_allocated_pharmacodynamics(
    ::pulse::cdm::bind::SubstancePharmacodynamicsData* pharmacodynamics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pharmacodynamics_);
  }
  pharmacodynamics_ = pharmacodynamics;
  if (pharmacodynamics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceData.Pharmacodynamics)
}
inline ::pulse::cdm::bind::SubstancePharmacodynamicsData* SubstanceData::release_pharmacodynamics() {
  
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* temp = pharmacodynamics_;
  pharmacodynamics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstancePharmacodynamicsData* SubstanceData::unsafe_arena_release_pharmacodynamics() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceData.Pharmacodynamics)
  
  ::pulse::cdm::bind::SubstancePharmacodynamicsData* temp = pharmacodynamics_;
  pharmacodynamics_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstancePharmacodynamicsData* SubstanceData::_internal_mutable_pharmacodynamics() {
  
  if (pharmacodynamics_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstancePharmacodynamicsData>(GetArena());
    pharmacodynamics_ = p;
  }
  return pharmacodynamics_;
}
inline ::pulse::cdm::bind::SubstancePharmacodynamicsData* SubstanceData::mutable_pharmacodynamics() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceData.Pharmacodynamics)
  return _internal_mutable_pharmacodynamics();
}
inline void SubstanceData::set_allocated_pharmacodynamics(::pulse::cdm::bind::SubstancePharmacodynamicsData* pharmacodynamics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pharmacodynamics_;
  }
  if (pharmacodynamics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pharmacodynamics);
    if (message_arena != submessage_arena) {
      pharmacodynamics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pharmacodynamics, submessage_arena);
    }
    
  } else {
    
  }
  pharmacodynamics_ = pharmacodynamics;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceData.Pharmacodynamics)
}

// -------------------------------------------------------------------

// SubstanceCompoundData

// string Name = 1;
inline void SubstanceCompoundData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SubstanceCompoundData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundData.Name)
  return _internal_name();
}
inline void SubstanceCompoundData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceCompoundData.Name)
}
inline std::string* SubstanceCompoundData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundData.Name)
  return _internal_mutable_name();
}
inline const std::string& SubstanceCompoundData::_internal_name() const {
  return name_.Get();
}
inline void SubstanceCompoundData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceCompoundData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceCompoundData.Name)
}
inline void SubstanceCompoundData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceCompoundData.Name)
}
inline void SubstanceCompoundData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceCompoundData.Name)
}
inline std::string* SubstanceCompoundData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceCompoundData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceCompoundData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceCompoundData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceCompoundData.Name)
}

// repeated .pulse.cdm.bind.SubstanceConcentrationData Component = 2;
inline int SubstanceCompoundData::_internal_component_size() const {
  return component_.size();
}
inline int SubstanceCompoundData::component_size() const {
  return _internal_component_size();
}
inline void SubstanceCompoundData::clear_component() {
  component_.Clear();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* SubstanceCompoundData::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundData.Component)
  return component_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
SubstanceCompoundData::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.SubstanceCompoundData.Component)
  return &component_;
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& SubstanceCompoundData::_internal_component(int index) const {
  return component_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& SubstanceCompoundData::component(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundData.Component)
  return _internal_component(index);
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* SubstanceCompoundData::_internal_add_component() {
  return component_.Add();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* SubstanceCompoundData::add_component() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.SubstanceCompoundData.Component)
  return _internal_add_component();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
SubstanceCompoundData::component() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.SubstanceCompoundData.Component)
  return component_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState>() {
  return ::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein>() {
  return ::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::SubstanceData_eState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SubstanceData_eState>() {
  return ::pulse::cdm::bind::SubstanceData_eState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstance_2eproto
