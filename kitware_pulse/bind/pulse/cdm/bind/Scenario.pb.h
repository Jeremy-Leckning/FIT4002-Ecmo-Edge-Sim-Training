// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Engine.pb.h"
#include "pulse/cdm/bind/Enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fScenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ScenarioData;
class ScenarioDataDefaultTypeInternal;
extern ScenarioDataDefaultTypeInternal _ScenarioData_default_instance_;
class ScenarioExecData;
class ScenarioExecDataDefaultTypeInternal;
extern ScenarioExecDataDefaultTypeInternal _ScenarioExecData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ScenarioData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScenarioData>(Arena*);
template<> ::pulse::cdm::bind::ScenarioExecData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ScenarioExecData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum eSerializationFormat : int {
  JSON = 0,
  BINARY = 1,
  eSerializationFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eSerializationFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eSerializationFormat_IsValid(int value);
constexpr eSerializationFormat eSerializationFormat_MIN = JSON;
constexpr eSerializationFormat eSerializationFormat_MAX = BINARY;
constexpr int eSerializationFormat_ARRAYSIZE = eSerializationFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eSerializationFormat_descriptor();
template<typename T>
inline const std::string& eSerializationFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eSerializationFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eSerializationFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eSerializationFormat_descriptor(), enum_t_value);
}
inline bool eSerializationFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eSerializationFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eSerializationFormat>(
    eSerializationFormat_descriptor(), name, value);
}
// ===================================================================

class ScenarioData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScenarioData) */ {
 public:
  inline ScenarioData() : ScenarioData(nullptr) {}
  virtual ~ScenarioData();

  ScenarioData(const ScenarioData& from);
  ScenarioData(ScenarioData&& from) noexcept
    : ScenarioData() {
    *this = ::std::move(from);
  }

  inline ScenarioData& operator=(const ScenarioData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioData& operator=(ScenarioData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioData& default_instance();

  enum StartTypeCase {
    kEngineStateFile = 3,
    kPatientConfiguration = 4,
    STARTTYPE_NOT_SET = 0,
  };

  static inline const ScenarioData* internal_default_instance() {
    return reinterpret_cast<const ScenarioData*>(
               &_ScenarioData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScenarioData& a, ScenarioData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioData* New() const final {
    return CreateMaybeMessage<ScenarioData>(nullptr);
  }

  ScenarioData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioData& from);
  void MergeFrom(const ScenarioData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScenarioData";
  }
  protected:
  explicit ScenarioData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyActionFieldNumber = 6,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDataRequestManagerFieldNumber = 5,
    kEngineStateFileFieldNumber = 3,
    kPatientConfigurationFieldNumber = 4,
  };
  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 6;
  int anyaction_size() const;
  private:
  int _internal_anyaction_size() const;
  public:
  void clear_anyaction();
  ::pulse::cdm::bind::AnyActionData* mutable_anyaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
      mutable_anyaction();
  private:
  const ::pulse::cdm::bind::AnyActionData& _internal_anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* _internal_add_anyaction();
  public:
  const ::pulse::cdm::bind::AnyActionData& anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* add_anyaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
      anyaction() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
  bool has_datarequestmanager() const;
  private:
  bool _internal_has_datarequestmanager() const;
  public:
  void clear_datarequestmanager();
  const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* release_datarequestmanager();
  ::pulse::cdm::bind::DataRequestManagerData* mutable_datarequestmanager();
  void set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager);
  private:
  const ::pulse::cdm::bind::DataRequestManagerData& _internal_datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* _internal_mutable_datarequestmanager();
  public:
  void unsafe_arena_set_allocated_datarequestmanager(
      ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager);
  ::pulse::cdm::bind::DataRequestManagerData* unsafe_arena_release_datarequestmanager();

  // string EngineStateFile = 3;
  private:
  bool _internal_has_enginestatefile() const;
  public:
  void clear_enginestatefile();
  const std::string& enginestatefile() const;
  void set_enginestatefile(const std::string& value);
  void set_enginestatefile(std::string&& value);
  void set_enginestatefile(const char* value);
  void set_enginestatefile(const char* value, size_t size);
  std::string* mutable_enginestatefile();
  std::string* release_enginestatefile();
  void set_allocated_enginestatefile(std::string* enginestatefile);
  private:
  const std::string& _internal_enginestatefile() const;
  void _internal_set_enginestatefile(const std::string& value);
  std::string* _internal_mutable_enginestatefile();
  public:

  // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 4;
  bool has_patientconfiguration() const;
  private:
  bool _internal_has_patientconfiguration() const;
  public:
  void clear_patientconfiguration();
  const ::pulse::cdm::bind::PatientConfigurationData& patientconfiguration() const;
  ::pulse::cdm::bind::PatientConfigurationData* release_patientconfiguration();
  ::pulse::cdm::bind::PatientConfigurationData* mutable_patientconfiguration();
  void set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration);
  private:
  const ::pulse::cdm::bind::PatientConfigurationData& _internal_patientconfiguration() const;
  ::pulse::cdm::bind::PatientConfigurationData* _internal_mutable_patientconfiguration();
  public:
  void unsafe_arena_set_allocated_patientconfiguration(
      ::pulse::cdm::bind::PatientConfigurationData* patientconfiguration);
  ::pulse::cdm::bind::PatientConfigurationData* unsafe_arena_release_patientconfiguration();

  void clear_StartType();
  StartTypeCase StartType_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScenarioData)
 private:
  class _Internal;
  void set_has_enginestatefile();
  void set_has_patientconfiguration();

  inline bool has_StartType() const;
  inline void clear_has_StartType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData > anyaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager_;
  union StartTypeUnion {
    StartTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enginestatefile_;
    ::pulse::cdm::bind::PatientConfigurationData* patientconfiguration_;
  } StartType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto;
};
// -------------------------------------------------------------------

class ScenarioExecData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ScenarioExecData) */ {
 public:
  inline ScenarioExecData() : ScenarioExecData(nullptr) {}
  virtual ~ScenarioExecData();

  ScenarioExecData(const ScenarioExecData& from);
  ScenarioExecData(ScenarioExecData&& from) noexcept
    : ScenarioExecData() {
    *this = ::std::move(from);
  }

  inline ScenarioExecData& operator=(const ScenarioExecData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioExecData& operator=(ScenarioExecData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioExecData& default_instance();

  enum EngineConfigurationCase {
    kEngineConfigurationContent = 11,
    kEngineConfigurationFilename = 12,
    ENGINECONFIGURATION_NOT_SET = 0,
  };

  enum ScenarioCase {
    kScenarioContent = 13,
    kScenarioFilename = 14,
    SCENARIO_NOT_SET = 0,
  };

  static inline const ScenarioExecData* internal_default_instance() {
    return reinterpret_cast<const ScenarioExecData*>(
               &_ScenarioExecData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScenarioExecData& a, ScenarioExecData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioExecData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioExecData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioExecData* New() const final {
    return CreateMaybeMessage<ScenarioExecData>(nullptr);
  }

  ScenarioExecData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioExecData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioExecData& from);
  void MergeFrom(const ScenarioExecData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioExecData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ScenarioExecData";
  }
  protected:
  explicit ScenarioExecData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFilenameFieldNumber = 2,
    kDataRequestCSVFilenameFieldNumber = 3,
    kDataRootDirectoryFieldNumber = 4,
    kSerializationDirectoryFieldNumber = 5,
    kAutoSerializeFilenameFieldNumber = 6,
    kLogToConsoleFieldNumber = 1,
    kAutoSerializeAfterActionsFieldNumber = 7,
    kAutoSerializePeriodSFieldNumber = 8,
    kTimeStampSerializedStatesFieldNumber = 9,
    kReloadSerializedStateFieldNumber = 10,
    kContentFormatFieldNumber = 15,
    kEngineConfigurationContentFieldNumber = 11,
    kEngineConfigurationFilenameFieldNumber = 12,
    kScenarioContentFieldNumber = 13,
    kScenarioFilenameFieldNumber = 14,
  };
  // string LogFilename = 2;
  void clear_logfilename();
  const std::string& logfilename() const;
  void set_logfilename(const std::string& value);
  void set_logfilename(std::string&& value);
  void set_logfilename(const char* value);
  void set_logfilename(const char* value, size_t size);
  std::string* mutable_logfilename();
  std::string* release_logfilename();
  void set_allocated_logfilename(std::string* logfilename);
  private:
  const std::string& _internal_logfilename() const;
  void _internal_set_logfilename(const std::string& value);
  std::string* _internal_mutable_logfilename();
  public:

  // string DataRequestCSVFilename = 3;
  void clear_datarequestcsvfilename();
  const std::string& datarequestcsvfilename() const;
  void set_datarequestcsvfilename(const std::string& value);
  void set_datarequestcsvfilename(std::string&& value);
  void set_datarequestcsvfilename(const char* value);
  void set_datarequestcsvfilename(const char* value, size_t size);
  std::string* mutable_datarequestcsvfilename();
  std::string* release_datarequestcsvfilename();
  void set_allocated_datarequestcsvfilename(std::string* datarequestcsvfilename);
  private:
  const std::string& _internal_datarequestcsvfilename() const;
  void _internal_set_datarequestcsvfilename(const std::string& value);
  std::string* _internal_mutable_datarequestcsvfilename();
  public:

  // string DataRootDirectory = 4;
  void clear_datarootdirectory();
  const std::string& datarootdirectory() const;
  void set_datarootdirectory(const std::string& value);
  void set_datarootdirectory(std::string&& value);
  void set_datarootdirectory(const char* value);
  void set_datarootdirectory(const char* value, size_t size);
  std::string* mutable_datarootdirectory();
  std::string* release_datarootdirectory();
  void set_allocated_datarootdirectory(std::string* datarootdirectory);
  private:
  const std::string& _internal_datarootdirectory() const;
  void _internal_set_datarootdirectory(const std::string& value);
  std::string* _internal_mutable_datarootdirectory();
  public:

  // string SerializationDirectory = 5;
  void clear_serializationdirectory();
  const std::string& serializationdirectory() const;
  void set_serializationdirectory(const std::string& value);
  void set_serializationdirectory(std::string&& value);
  void set_serializationdirectory(const char* value);
  void set_serializationdirectory(const char* value, size_t size);
  std::string* mutable_serializationdirectory();
  std::string* release_serializationdirectory();
  void set_allocated_serializationdirectory(std::string* serializationdirectory);
  private:
  const std::string& _internal_serializationdirectory() const;
  void _internal_set_serializationdirectory(const std::string& value);
  std::string* _internal_mutable_serializationdirectory();
  public:

  // string AutoSerializeFilename = 6;
  void clear_autoserializefilename();
  const std::string& autoserializefilename() const;
  void set_autoserializefilename(const std::string& value);
  void set_autoserializefilename(std::string&& value);
  void set_autoserializefilename(const char* value);
  void set_autoserializefilename(const char* value, size_t size);
  std::string* mutable_autoserializefilename();
  std::string* release_autoserializefilename();
  void set_allocated_autoserializefilename(std::string* autoserializefilename);
  private:
  const std::string& _internal_autoserializefilename() const;
  void _internal_set_autoserializefilename(const std::string& value);
  std::string* _internal_mutable_autoserializefilename();
  public:

  // .pulse.cdm.bind.eSwitch LogToConsole = 1;
  void clear_logtoconsole();
  ::pulse::cdm::bind::eSwitch logtoconsole() const;
  void set_logtoconsole(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_logtoconsole() const;
  void _internal_set_logtoconsole(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch AutoSerializeAfterActions = 7;
  void clear_autoserializeafteractions();
  ::pulse::cdm::bind::eSwitch autoserializeafteractions() const;
  void set_autoserializeafteractions(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_autoserializeafteractions() const;
  void _internal_set_autoserializeafteractions(::pulse::cdm::bind::eSwitch value);
  public:

  // double AutoSerializePeriod_s = 8;
  void clear_autoserializeperiod_s();
  double autoserializeperiod_s() const;
  void set_autoserializeperiod_s(double value);
  private:
  double _internal_autoserializeperiod_s() const;
  void _internal_set_autoserializeperiod_s(double value);
  public:

  // .pulse.cdm.bind.eSwitch TimeStampSerializedStates = 9;
  void clear_timestampserializedstates();
  ::pulse::cdm::bind::eSwitch timestampserializedstates() const;
  void set_timestampserializedstates(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_timestampserializedstates() const;
  void _internal_set_timestampserializedstates(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch ReloadSerializedState = 10;
  void clear_reloadserializedstate();
  ::pulse::cdm::bind::eSwitch reloadserializedstate() const;
  void set_reloadserializedstate(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_reloadserializedstate() const;
  void _internal_set_reloadserializedstate(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSerializationFormat ContentFormat = 15;
  void clear_contentformat();
  ::pulse::cdm::bind::eSerializationFormat contentformat() const;
  void set_contentformat(::pulse::cdm::bind::eSerializationFormat value);
  private:
  ::pulse::cdm::bind::eSerializationFormat _internal_contentformat() const;
  void _internal_set_contentformat(::pulse::cdm::bind::eSerializationFormat value);
  public:

  // string EngineConfigurationContent = 11;
  private:
  bool _internal_has_engineconfigurationcontent() const;
  public:
  void clear_engineconfigurationcontent();
  const std::string& engineconfigurationcontent() const;
  void set_engineconfigurationcontent(const std::string& value);
  void set_engineconfigurationcontent(std::string&& value);
  void set_engineconfigurationcontent(const char* value);
  void set_engineconfigurationcontent(const char* value, size_t size);
  std::string* mutable_engineconfigurationcontent();
  std::string* release_engineconfigurationcontent();
  void set_allocated_engineconfigurationcontent(std::string* engineconfigurationcontent);
  private:
  const std::string& _internal_engineconfigurationcontent() const;
  void _internal_set_engineconfigurationcontent(const std::string& value);
  std::string* _internal_mutable_engineconfigurationcontent();
  public:

  // string EngineConfigurationFilename = 12;
  private:
  bool _internal_has_engineconfigurationfilename() const;
  public:
  void clear_engineconfigurationfilename();
  const std::string& engineconfigurationfilename() const;
  void set_engineconfigurationfilename(const std::string& value);
  void set_engineconfigurationfilename(std::string&& value);
  void set_engineconfigurationfilename(const char* value);
  void set_engineconfigurationfilename(const char* value, size_t size);
  std::string* mutable_engineconfigurationfilename();
  std::string* release_engineconfigurationfilename();
  void set_allocated_engineconfigurationfilename(std::string* engineconfigurationfilename);
  private:
  const std::string& _internal_engineconfigurationfilename() const;
  void _internal_set_engineconfigurationfilename(const std::string& value);
  std::string* _internal_mutable_engineconfigurationfilename();
  public:

  // string ScenarioContent = 13;
  private:
  bool _internal_has_scenariocontent() const;
  public:
  void clear_scenariocontent();
  const std::string& scenariocontent() const;
  void set_scenariocontent(const std::string& value);
  void set_scenariocontent(std::string&& value);
  void set_scenariocontent(const char* value);
  void set_scenariocontent(const char* value, size_t size);
  std::string* mutable_scenariocontent();
  std::string* release_scenariocontent();
  void set_allocated_scenariocontent(std::string* scenariocontent);
  private:
  const std::string& _internal_scenariocontent() const;
  void _internal_set_scenariocontent(const std::string& value);
  std::string* _internal_mutable_scenariocontent();
  public:

  // string ScenarioFilename = 14;
  private:
  bool _internal_has_scenariofilename() const;
  public:
  void clear_scenariofilename();
  const std::string& scenariofilename() const;
  void set_scenariofilename(const std::string& value);
  void set_scenariofilename(std::string&& value);
  void set_scenariofilename(const char* value);
  void set_scenariofilename(const char* value, size_t size);
  std::string* mutable_scenariofilename();
  std::string* release_scenariofilename();
  void set_allocated_scenariofilename(std::string* scenariofilename);
  private:
  const std::string& _internal_scenariofilename() const;
  void _internal_set_scenariofilename(const std::string& value);
  std::string* _internal_mutable_scenariofilename();
  public:

  void clear_EngineConfiguration();
  EngineConfigurationCase EngineConfiguration_case() const;
  void clear_Scenario();
  ScenarioCase Scenario_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ScenarioExecData)
 private:
  class _Internal;
  void set_has_engineconfigurationcontent();
  void set_has_engineconfigurationfilename();
  void set_has_scenariocontent();
  void set_has_scenariofilename();

  inline bool has_EngineConfiguration() const;
  inline void clear_has_EngineConfiguration();

  inline bool has_Scenario() const;
  inline void clear_has_Scenario();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datarequestcsvfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datarootdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serializationdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr autoserializefilename_;
  int logtoconsole_;
  int autoserializeafteractions_;
  double autoserializeperiod_s_;
  int timestampserializedstates_;
  int reloadserializedstate_;
  int contentformat_;
  union EngineConfigurationUnion {
    EngineConfigurationUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engineconfigurationcontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engineconfigurationfilename_;
  } EngineConfiguration_;
  union ScenarioUnion {
    ScenarioUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenariocontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenariofilename_;
  } Scenario_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenarioData

// string Name = 1;
inline void ScenarioData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ScenarioData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.Name)
  return _internal_name();
}
inline void ScenarioData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.Name)
}
inline std::string* ScenarioData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.Name)
  return _internal_mutable_name();
}
inline const std::string& ScenarioData::_internal_name() const {
  return name_.Get();
}
inline void ScenarioData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioData.Name)
}
inline void ScenarioData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioData.Name)
}
inline void ScenarioData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioData.Name)
}
inline std::string* ScenarioData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.Name)
}

// string Description = 2;
inline void ScenarioData::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ScenarioData::description() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.Description)
  return _internal_description();
}
inline void ScenarioData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.Description)
}
inline std::string* ScenarioData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.Description)
  return _internal_mutable_description();
}
inline const std::string& ScenarioData::_internal_description() const {
  return description_.Get();
}
inline void ScenarioData::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioData::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioData.Description)
}
inline void ScenarioData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioData.Description)
}
inline void ScenarioData::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioData.Description)
}
inline std::string* ScenarioData::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioData::release_description() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.Description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.Description)
}

// string EngineStateFile = 3;
inline bool ScenarioData::_internal_has_enginestatefile() const {
  return StartType_case() == kEngineStateFile;
}
inline void ScenarioData::set_has_enginestatefile() {
  _oneof_case_[0] = kEngineStateFile;
}
inline void ScenarioData::clear_enginestatefile() {
  if (_internal_has_enginestatefile()) {
    StartType_.enginestatefile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_StartType();
  }
}
inline const std::string& ScenarioData::enginestatefile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.EngineStateFile)
  return _internal_enginestatefile();
}
inline void ScenarioData::set_enginestatefile(const std::string& value) {
  _internal_set_enginestatefile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.EngineStateFile)
}
inline std::string* ScenarioData::mutable_enginestatefile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.EngineStateFile)
  return _internal_mutable_enginestatefile();
}
inline const std::string& ScenarioData::_internal_enginestatefile() const {
  if (_internal_has_enginestatefile()) {
    return StartType_.enginestatefile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScenarioData::_internal_set_enginestatefile(const std::string& value) {
  if (!_internal_has_enginestatefile()) {
    clear_StartType();
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.enginestatefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioData::set_enginestatefile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioData.EngineStateFile)
  if (!_internal_has_enginestatefile()) {
    clear_StartType();
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.enginestatefile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioData.EngineStateFile)
}
inline void ScenarioData::set_enginestatefile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_enginestatefile()) {
    clear_StartType();
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.enginestatefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioData.EngineStateFile)
}
inline void ScenarioData::set_enginestatefile(const char* value,
                             size_t size) {
  if (!_internal_has_enginestatefile()) {
    clear_StartType();
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.enginestatefile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioData.EngineStateFile)
}
inline std::string* ScenarioData::_internal_mutable_enginestatefile() {
  if (!_internal_has_enginestatefile()) {
    clear_StartType();
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return StartType_.enginestatefile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioData::release_enginestatefile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.EngineStateFile)
  if (_internal_has_enginestatefile()) {
    clear_has_StartType();
    return StartType_.enginestatefile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ScenarioData::set_allocated_enginestatefile(std::string* enginestatefile) {
  if (has_StartType()) {
    clear_StartType();
  }
  if (enginestatefile != nullptr) {
    set_has_enginestatefile();
    StartType_.enginestatefile_.UnsafeSetDefault(enginestatefile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(enginestatefile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.EngineStateFile)
}

// .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 4;
inline bool ScenarioData::_internal_has_patientconfiguration() const {
  return StartType_case() == kPatientConfiguration;
}
inline bool ScenarioData::has_patientconfiguration() const {
  return _internal_has_patientconfiguration();
}
inline void ScenarioData::set_has_patientconfiguration() {
  _oneof_case_[0] = kPatientConfiguration;
}
inline ::pulse::cdm::bind::PatientConfigurationData* ScenarioData::release_patientconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.PatientConfiguration)
  if (_internal_has_patientconfiguration()) {
    clear_has_StartType();
      ::pulse::cdm::bind::PatientConfigurationData* temp = StartType_.patientconfiguration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StartType_.patientconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PatientConfigurationData& ScenarioData::_internal_patientconfiguration() const {
  return _internal_has_patientconfiguration()
      ? *StartType_.patientconfiguration_
      : reinterpret_cast< ::pulse::cdm::bind::PatientConfigurationData&>(::pulse::cdm::bind::_PatientConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConfigurationData& ScenarioData::patientconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.PatientConfiguration)
  return _internal_patientconfiguration();
}
inline ::pulse::cdm::bind::PatientConfigurationData* ScenarioData::unsafe_arena_release_patientconfiguration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ScenarioData.PatientConfiguration)
  if (_internal_has_patientconfiguration()) {
    clear_has_StartType();
    ::pulse::cdm::bind::PatientConfigurationData* temp = StartType_.patientconfiguration_;
    StartType_.patientconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioData::unsafe_arena_set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration) {
  clear_StartType();
  if (patientconfiguration) {
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = patientconfiguration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ScenarioData.PatientConfiguration)
}
inline ::pulse::cdm::bind::PatientConfigurationData* ScenarioData::_internal_mutable_patientconfiguration() {
  if (!_internal_has_patientconfiguration()) {
    clear_StartType();
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = CreateMaybeMessage< ::pulse::cdm::bind::PatientConfigurationData >(GetArena());
  }
  return StartType_.patientconfiguration_;
}
inline ::pulse::cdm::bind::PatientConfigurationData* ScenarioData::mutable_patientconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.PatientConfiguration)
  return _internal_mutable_patientconfiguration();
}

// .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
inline bool ScenarioData::_internal_has_datarequestmanager() const {
  return this != internal_default_instance() && datarequestmanager_ != nullptr;
}
inline bool ScenarioData::has_datarequestmanager() const {
  return _internal_has_datarequestmanager();
}
inline const ::pulse::cdm::bind::DataRequestManagerData& ScenarioData::_internal_datarequestmanager() const {
  const ::pulse::cdm::bind::DataRequestManagerData* p = datarequestmanager_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DataRequestManagerData&>(
      ::pulse::cdm::bind::_DataRequestManagerData_default_instance_);
}
inline const ::pulse::cdm::bind::DataRequestManagerData& ScenarioData::datarequestmanager() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.DataRequestManager)
  return _internal_datarequestmanager();
}
inline void ScenarioData::unsafe_arena_set_allocated_datarequestmanager(
    ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequestmanager_);
  }
  datarequestmanager_ = datarequestmanager;
  if (datarequestmanager) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ScenarioData.DataRequestManager)
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::release_datarequestmanager() {
  
  ::pulse::cdm::bind::DataRequestManagerData* temp = datarequestmanager_;
  datarequestmanager_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::unsafe_arena_release_datarequestmanager() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioData.DataRequestManager)
  
  ::pulse::cdm::bind::DataRequestManagerData* temp = datarequestmanager_;
  datarequestmanager_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::_internal_mutable_datarequestmanager() {
  
  if (datarequestmanager_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DataRequestManagerData>(GetArena());
    datarequestmanager_ = p;
  }
  return datarequestmanager_;
}
inline ::pulse::cdm::bind::DataRequestManagerData* ScenarioData::mutable_datarequestmanager() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.DataRequestManager)
  return _internal_mutable_datarequestmanager();
}
inline void ScenarioData::set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequestmanager_);
  }
  if (datarequestmanager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequestmanager)->GetArena();
    if (message_arena != submessage_arena) {
      datarequestmanager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datarequestmanager, submessage_arena);
    }
    
  } else {
    
  }
  datarequestmanager_ = datarequestmanager;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.DataRequestManager)
}

// repeated .pulse.cdm.bind.AnyActionData AnyAction = 6;
inline int ScenarioData::_internal_anyaction_size() const {
  return anyaction_.size();
}
inline int ScenarioData::anyaction_size() const {
  return _internal_anyaction_size();
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::mutable_anyaction(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioData.AnyAction)
  return anyaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
ScenarioData::mutable_anyaction() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ScenarioData.AnyAction)
  return &anyaction_;
}
inline const ::pulse::cdm::bind::AnyActionData& ScenarioData::_internal_anyaction(int index) const {
  return anyaction_.Get(index);
}
inline const ::pulse::cdm::bind::AnyActionData& ScenarioData::anyaction(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioData.AnyAction)
  return _internal_anyaction(index);
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::_internal_add_anyaction() {
  return anyaction_.Add();
}
inline ::pulse::cdm::bind::AnyActionData* ScenarioData::add_anyaction() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ScenarioData.AnyAction)
  return _internal_add_anyaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
ScenarioData::anyaction() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ScenarioData.AnyAction)
  return anyaction_;
}

inline bool ScenarioData::has_StartType() const {
  return StartType_case() != STARTTYPE_NOT_SET;
}
inline void ScenarioData::clear_has_StartType() {
  _oneof_case_[0] = STARTTYPE_NOT_SET;
}
inline ScenarioData::StartTypeCase ScenarioData::StartType_case() const {
  return ScenarioData::StartTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScenarioExecData

// .pulse.cdm.bind.eSwitch LogToConsole = 1;
inline void ScenarioExecData::clear_logtoconsole() {
  logtoconsole_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::_internal_logtoconsole() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(logtoconsole_);
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::logtoconsole() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.LogToConsole)
  return _internal_logtoconsole();
}
inline void ScenarioExecData::_internal_set_logtoconsole(::pulse::cdm::bind::eSwitch value) {
  
  logtoconsole_ = value;
}
inline void ScenarioExecData::set_logtoconsole(::pulse::cdm::bind::eSwitch value) {
  _internal_set_logtoconsole(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.LogToConsole)
}

// string LogFilename = 2;
inline void ScenarioExecData::clear_logfilename() {
  logfilename_.ClearToEmpty();
}
inline const std::string& ScenarioExecData::logfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.LogFilename)
  return _internal_logfilename();
}
inline void ScenarioExecData::set_logfilename(const std::string& value) {
  _internal_set_logfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.LogFilename)
}
inline std::string* ScenarioExecData::mutable_logfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.LogFilename)
  return _internal_mutable_logfilename();
}
inline const std::string& ScenarioExecData::_internal_logfilename() const {
  return logfilename_.Get();
}
inline void ScenarioExecData::_internal_set_logfilename(const std::string& value) {
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_logfilename(std::string&& value) {
  
  logfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.LogFilename)
}
inline void ScenarioExecData::set_logfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.LogFilename)
}
inline void ScenarioExecData::set_logfilename(const char* value,
    size_t size) {
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.LogFilename)
}
inline std::string* ScenarioExecData::_internal_mutable_logfilename() {
  
  return logfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_logfilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.LogFilename)
  return logfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioExecData::set_allocated_logfilename(std::string* logfilename) {
  if (logfilename != nullptr) {
    
  } else {
    
  }
  logfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.LogFilename)
}

// string DataRequestCSVFilename = 3;
inline void ScenarioExecData::clear_datarequestcsvfilename() {
  datarequestcsvfilename_.ClearToEmpty();
}
inline const std::string& ScenarioExecData::datarequestcsvfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
  return _internal_datarequestcsvfilename();
}
inline void ScenarioExecData::set_datarequestcsvfilename(const std::string& value) {
  _internal_set_datarequestcsvfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
}
inline std::string* ScenarioExecData::mutable_datarequestcsvfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
  return _internal_mutable_datarequestcsvfilename();
}
inline const std::string& ScenarioExecData::_internal_datarequestcsvfilename() const {
  return datarequestcsvfilename_.Get();
}
inline void ScenarioExecData::_internal_set_datarequestcsvfilename(const std::string& value) {
  
  datarequestcsvfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_datarequestcsvfilename(std::string&& value) {
  
  datarequestcsvfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
}
inline void ScenarioExecData::set_datarequestcsvfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datarequestcsvfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
}
inline void ScenarioExecData::set_datarequestcsvfilename(const char* value,
    size_t size) {
  
  datarequestcsvfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
}
inline std::string* ScenarioExecData::_internal_mutable_datarequestcsvfilename() {
  
  return datarequestcsvfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_datarequestcsvfilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
  return datarequestcsvfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioExecData::set_allocated_datarequestcsvfilename(std::string* datarequestcsvfilename) {
  if (datarequestcsvfilename != nullptr) {
    
  } else {
    
  }
  datarequestcsvfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datarequestcsvfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename)
}

// string DataRootDirectory = 4;
inline void ScenarioExecData::clear_datarootdirectory() {
  datarootdirectory_.ClearToEmpty();
}
inline const std::string& ScenarioExecData::datarootdirectory() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
  return _internal_datarootdirectory();
}
inline void ScenarioExecData::set_datarootdirectory(const std::string& value) {
  _internal_set_datarootdirectory(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
}
inline std::string* ScenarioExecData::mutable_datarootdirectory() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
  return _internal_mutable_datarootdirectory();
}
inline const std::string& ScenarioExecData::_internal_datarootdirectory() const {
  return datarootdirectory_.Get();
}
inline void ScenarioExecData::_internal_set_datarootdirectory(const std::string& value) {
  
  datarootdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_datarootdirectory(std::string&& value) {
  
  datarootdirectory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
}
inline void ScenarioExecData::set_datarootdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datarootdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
}
inline void ScenarioExecData::set_datarootdirectory(const char* value,
    size_t size) {
  
  datarootdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
}
inline std::string* ScenarioExecData::_internal_mutable_datarootdirectory() {
  
  return datarootdirectory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_datarootdirectory() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
  return datarootdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioExecData::set_allocated_datarootdirectory(std::string* datarootdirectory) {
  if (datarootdirectory != nullptr) {
    
  } else {
    
  }
  datarootdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datarootdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.DataRootDirectory)
}

// string SerializationDirectory = 5;
inline void ScenarioExecData::clear_serializationdirectory() {
  serializationdirectory_.ClearToEmpty();
}
inline const std::string& ScenarioExecData::serializationdirectory() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
  return _internal_serializationdirectory();
}
inline void ScenarioExecData::set_serializationdirectory(const std::string& value) {
  _internal_set_serializationdirectory(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
}
inline std::string* ScenarioExecData::mutable_serializationdirectory() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
  return _internal_mutable_serializationdirectory();
}
inline const std::string& ScenarioExecData::_internal_serializationdirectory() const {
  return serializationdirectory_.Get();
}
inline void ScenarioExecData::_internal_set_serializationdirectory(const std::string& value) {
  
  serializationdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_serializationdirectory(std::string&& value) {
  
  serializationdirectory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
}
inline void ScenarioExecData::set_serializationdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serializationdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
}
inline void ScenarioExecData::set_serializationdirectory(const char* value,
    size_t size) {
  
  serializationdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
}
inline std::string* ScenarioExecData::_internal_mutable_serializationdirectory() {
  
  return serializationdirectory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_serializationdirectory() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
  return serializationdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioExecData::set_allocated_serializationdirectory(std::string* serializationdirectory) {
  if (serializationdirectory != nullptr) {
    
  } else {
    
  }
  serializationdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serializationdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.SerializationDirectory)
}

// string AutoSerializeFilename = 6;
inline void ScenarioExecData::clear_autoserializefilename() {
  autoserializefilename_.ClearToEmpty();
}
inline const std::string& ScenarioExecData::autoserializefilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
  return _internal_autoserializefilename();
}
inline void ScenarioExecData::set_autoserializefilename(const std::string& value) {
  _internal_set_autoserializefilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
}
inline std::string* ScenarioExecData::mutable_autoserializefilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
  return _internal_mutable_autoserializefilename();
}
inline const std::string& ScenarioExecData::_internal_autoserializefilename() const {
  return autoserializefilename_.Get();
}
inline void ScenarioExecData::_internal_set_autoserializefilename(const std::string& value) {
  
  autoserializefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_autoserializefilename(std::string&& value) {
  
  autoserializefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
}
inline void ScenarioExecData::set_autoserializefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  autoserializefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
}
inline void ScenarioExecData::set_autoserializefilename(const char* value,
    size_t size) {
  
  autoserializefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
}
inline std::string* ScenarioExecData::_internal_mutable_autoserializefilename() {
  
  return autoserializefilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_autoserializefilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
  return autoserializefilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScenarioExecData::set_allocated_autoserializefilename(std::string* autoserializefilename) {
  if (autoserializefilename != nullptr) {
    
  } else {
    
  }
  autoserializefilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), autoserializefilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename)
}

// .pulse.cdm.bind.eSwitch AutoSerializeAfterActions = 7;
inline void ScenarioExecData::clear_autoserializeafteractions() {
  autoserializeafteractions_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::_internal_autoserializeafteractions() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(autoserializeafteractions_);
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::autoserializeafteractions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.AutoSerializeAfterActions)
  return _internal_autoserializeafteractions();
}
inline void ScenarioExecData::_internal_set_autoserializeafteractions(::pulse::cdm::bind::eSwitch value) {
  
  autoserializeafteractions_ = value;
}
inline void ScenarioExecData::set_autoserializeafteractions(::pulse::cdm::bind::eSwitch value) {
  _internal_set_autoserializeafteractions(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.AutoSerializeAfterActions)
}

// double AutoSerializePeriod_s = 8;
inline void ScenarioExecData::clear_autoserializeperiod_s() {
  autoserializeperiod_s_ = 0;
}
inline double ScenarioExecData::_internal_autoserializeperiod_s() const {
  return autoserializeperiod_s_;
}
inline double ScenarioExecData::autoserializeperiod_s() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.AutoSerializePeriod_s)
  return _internal_autoserializeperiod_s();
}
inline void ScenarioExecData::_internal_set_autoserializeperiod_s(double value) {
  
  autoserializeperiod_s_ = value;
}
inline void ScenarioExecData::set_autoserializeperiod_s(double value) {
  _internal_set_autoserializeperiod_s(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.AutoSerializePeriod_s)
}

// .pulse.cdm.bind.eSwitch TimeStampSerializedStates = 9;
inline void ScenarioExecData::clear_timestampserializedstates() {
  timestampserializedstates_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::_internal_timestampserializedstates() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(timestampserializedstates_);
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::timestampserializedstates() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.TimeStampSerializedStates)
  return _internal_timestampserializedstates();
}
inline void ScenarioExecData::_internal_set_timestampserializedstates(::pulse::cdm::bind::eSwitch value) {
  
  timestampserializedstates_ = value;
}
inline void ScenarioExecData::set_timestampserializedstates(::pulse::cdm::bind::eSwitch value) {
  _internal_set_timestampserializedstates(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.TimeStampSerializedStates)
}

// .pulse.cdm.bind.eSwitch ReloadSerializedState = 10;
inline void ScenarioExecData::clear_reloadserializedstate() {
  reloadserializedstate_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::_internal_reloadserializedstate() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(reloadserializedstate_);
}
inline ::pulse::cdm::bind::eSwitch ScenarioExecData::reloadserializedstate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.ReloadSerializedState)
  return _internal_reloadserializedstate();
}
inline void ScenarioExecData::_internal_set_reloadserializedstate(::pulse::cdm::bind::eSwitch value) {
  
  reloadserializedstate_ = value;
}
inline void ScenarioExecData::set_reloadserializedstate(::pulse::cdm::bind::eSwitch value) {
  _internal_set_reloadserializedstate(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ReloadSerializedState)
}

// string EngineConfigurationContent = 11;
inline bool ScenarioExecData::_internal_has_engineconfigurationcontent() const {
  return EngineConfiguration_case() == kEngineConfigurationContent;
}
inline void ScenarioExecData::set_has_engineconfigurationcontent() {
  _oneof_case_[0] = kEngineConfigurationContent;
}
inline void ScenarioExecData::clear_engineconfigurationcontent() {
  if (_internal_has_engineconfigurationcontent()) {
    EngineConfiguration_.engineconfigurationcontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_EngineConfiguration();
  }
}
inline const std::string& ScenarioExecData::engineconfigurationcontent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
  return _internal_engineconfigurationcontent();
}
inline void ScenarioExecData::set_engineconfigurationcontent(const std::string& value) {
  _internal_set_engineconfigurationcontent(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
}
inline std::string* ScenarioExecData::mutable_engineconfigurationcontent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
  return _internal_mutable_engineconfigurationcontent();
}
inline const std::string& ScenarioExecData::_internal_engineconfigurationcontent() const {
  if (_internal_has_engineconfigurationcontent()) {
    return EngineConfiguration_.engineconfigurationcontent_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScenarioExecData::_internal_set_engineconfigurationcontent(const std::string& value) {
  if (!_internal_has_engineconfigurationcontent()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationcontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_engineconfigurationcontent(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
  if (!_internal_has_engineconfigurationcontent()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationcontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
}
inline void ScenarioExecData::set_engineconfigurationcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_engineconfigurationcontent()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationcontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
}
inline void ScenarioExecData::set_engineconfigurationcontent(const char* value,
                             size_t size) {
  if (!_internal_has_engineconfigurationcontent()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationcontent_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
}
inline std::string* ScenarioExecData::_internal_mutable_engineconfigurationcontent() {
  if (!_internal_has_engineconfigurationcontent()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return EngineConfiguration_.engineconfigurationcontent_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_engineconfigurationcontent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
  if (_internal_has_engineconfigurationcontent()) {
    clear_has_EngineConfiguration();
    return EngineConfiguration_.engineconfigurationcontent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ScenarioExecData::set_allocated_engineconfigurationcontent(std::string* engineconfigurationcontent) {
  if (has_EngineConfiguration()) {
    clear_EngineConfiguration();
  }
  if (engineconfigurationcontent != nullptr) {
    set_has_engineconfigurationcontent();
    EngineConfiguration_.engineconfigurationcontent_.UnsafeSetDefault(engineconfigurationcontent);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(engineconfigurationcontent);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent)
}

// string EngineConfigurationFilename = 12;
inline bool ScenarioExecData::_internal_has_engineconfigurationfilename() const {
  return EngineConfiguration_case() == kEngineConfigurationFilename;
}
inline void ScenarioExecData::set_has_engineconfigurationfilename() {
  _oneof_case_[0] = kEngineConfigurationFilename;
}
inline void ScenarioExecData::clear_engineconfigurationfilename() {
  if (_internal_has_engineconfigurationfilename()) {
    EngineConfiguration_.engineconfigurationfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_EngineConfiguration();
  }
}
inline const std::string& ScenarioExecData::engineconfigurationfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
  return _internal_engineconfigurationfilename();
}
inline void ScenarioExecData::set_engineconfigurationfilename(const std::string& value) {
  _internal_set_engineconfigurationfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
}
inline std::string* ScenarioExecData::mutable_engineconfigurationfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
  return _internal_mutable_engineconfigurationfilename();
}
inline const std::string& ScenarioExecData::_internal_engineconfigurationfilename() const {
  if (_internal_has_engineconfigurationfilename()) {
    return EngineConfiguration_.engineconfigurationfilename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScenarioExecData::_internal_set_engineconfigurationfilename(const std::string& value) {
  if (!_internal_has_engineconfigurationfilename()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_engineconfigurationfilename(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
  if (!_internal_has_engineconfigurationfilename()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
}
inline void ScenarioExecData::set_engineconfigurationfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_engineconfigurationfilename()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
}
inline void ScenarioExecData::set_engineconfigurationfilename(const char* value,
                             size_t size) {
  if (!_internal_has_engineconfigurationfilename()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  EngineConfiguration_.engineconfigurationfilename_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
}
inline std::string* ScenarioExecData::_internal_mutable_engineconfigurationfilename() {
  if (!_internal_has_engineconfigurationfilename()) {
    clear_EngineConfiguration();
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return EngineConfiguration_.engineconfigurationfilename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_engineconfigurationfilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
  if (_internal_has_engineconfigurationfilename()) {
    clear_has_EngineConfiguration();
    return EngineConfiguration_.engineconfigurationfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ScenarioExecData::set_allocated_engineconfigurationfilename(std::string* engineconfigurationfilename) {
  if (has_EngineConfiguration()) {
    clear_EngineConfiguration();
  }
  if (engineconfigurationfilename != nullptr) {
    set_has_engineconfigurationfilename();
    EngineConfiguration_.engineconfigurationfilename_.UnsafeSetDefault(engineconfigurationfilename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(engineconfigurationfilename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename)
}

// string ScenarioContent = 13;
inline bool ScenarioExecData::_internal_has_scenariocontent() const {
  return Scenario_case() == kScenarioContent;
}
inline void ScenarioExecData::set_has_scenariocontent() {
  _oneof_case_[1] = kScenarioContent;
}
inline void ScenarioExecData::clear_scenariocontent() {
  if (_internal_has_scenariocontent()) {
    Scenario_.scenariocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Scenario();
  }
}
inline const std::string& ScenarioExecData::scenariocontent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
  return _internal_scenariocontent();
}
inline void ScenarioExecData::set_scenariocontent(const std::string& value) {
  _internal_set_scenariocontent(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
}
inline std::string* ScenarioExecData::mutable_scenariocontent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
  return _internal_mutable_scenariocontent();
}
inline const std::string& ScenarioExecData::_internal_scenariocontent() const {
  if (_internal_has_scenariocontent()) {
    return Scenario_.scenariocontent_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScenarioExecData::_internal_set_scenariocontent(const std::string& value) {
  if (!_internal_has_scenariocontent()) {
    clear_Scenario();
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariocontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_scenariocontent(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
  if (!_internal_has_scenariocontent()) {
    clear_Scenario();
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariocontent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
}
inline void ScenarioExecData::set_scenariocontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_scenariocontent()) {
    clear_Scenario();
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariocontent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
}
inline void ScenarioExecData::set_scenariocontent(const char* value,
                             size_t size) {
  if (!_internal_has_scenariocontent()) {
    clear_Scenario();
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariocontent_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
}
inline std::string* ScenarioExecData::_internal_mutable_scenariocontent() {
  if (!_internal_has_scenariocontent()) {
    clear_Scenario();
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Scenario_.scenariocontent_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_scenariocontent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
  if (_internal_has_scenariocontent()) {
    clear_has_Scenario();
    return Scenario_.scenariocontent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ScenarioExecData::set_allocated_scenariocontent(std::string* scenariocontent) {
  if (has_Scenario()) {
    clear_Scenario();
  }
  if (scenariocontent != nullptr) {
    set_has_scenariocontent();
    Scenario_.scenariocontent_.UnsafeSetDefault(scenariocontent);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(scenariocontent);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.ScenarioContent)
}

// string ScenarioFilename = 14;
inline bool ScenarioExecData::_internal_has_scenariofilename() const {
  return Scenario_case() == kScenarioFilename;
}
inline void ScenarioExecData::set_has_scenariofilename() {
  _oneof_case_[1] = kScenarioFilename;
}
inline void ScenarioExecData::clear_scenariofilename() {
  if (_internal_has_scenariofilename()) {
    Scenario_.scenariofilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Scenario();
  }
}
inline const std::string& ScenarioExecData::scenariofilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
  return _internal_scenariofilename();
}
inline void ScenarioExecData::set_scenariofilename(const std::string& value) {
  _internal_set_scenariofilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
}
inline std::string* ScenarioExecData::mutable_scenariofilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
  return _internal_mutable_scenariofilename();
}
inline const std::string& ScenarioExecData::_internal_scenariofilename() const {
  if (_internal_has_scenariofilename()) {
    return Scenario_.scenariofilename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScenarioExecData::_internal_set_scenariofilename(const std::string& value) {
  if (!_internal_has_scenariofilename()) {
    clear_Scenario();
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariofilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScenarioExecData::set_scenariofilename(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
  if (!_internal_has_scenariofilename()) {
    clear_Scenario();
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariofilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
}
inline void ScenarioExecData::set_scenariofilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_scenariofilename()) {
    clear_Scenario();
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariofilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
}
inline void ScenarioExecData::set_scenariofilename(const char* value,
                             size_t size) {
  if (!_internal_has_scenariofilename()) {
    clear_Scenario();
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Scenario_.scenariofilename_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
}
inline std::string* ScenarioExecData::_internal_mutable_scenariofilename() {
  if (!_internal_has_scenariofilename()) {
    clear_Scenario();
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Scenario_.scenariofilename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScenarioExecData::release_scenariofilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
  if (_internal_has_scenariofilename()) {
    clear_has_Scenario();
    return Scenario_.scenariofilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ScenarioExecData::set_allocated_scenariofilename(std::string* scenariofilename) {
  if (has_Scenario()) {
    clear_Scenario();
  }
  if (scenariofilename != nullptr) {
    set_has_scenariofilename();
    Scenario_.scenariofilename_.UnsafeSetDefault(scenariofilename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(scenariofilename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioExecData.ScenarioFilename)
}

// .pulse.cdm.bind.eSerializationFormat ContentFormat = 15;
inline void ScenarioExecData::clear_contentformat() {
  contentformat_ = 0;
}
inline ::pulse::cdm::bind::eSerializationFormat ScenarioExecData::_internal_contentformat() const {
  return static_cast< ::pulse::cdm::bind::eSerializationFormat >(contentformat_);
}
inline ::pulse::cdm::bind::eSerializationFormat ScenarioExecData::contentformat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ScenarioExecData.ContentFormat)
  return _internal_contentformat();
}
inline void ScenarioExecData::_internal_set_contentformat(::pulse::cdm::bind::eSerializationFormat value) {
  
  contentformat_ = value;
}
inline void ScenarioExecData::set_contentformat(::pulse::cdm::bind::eSerializationFormat value) {
  _internal_set_contentformat(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ScenarioExecData.ContentFormat)
}

inline bool ScenarioExecData::has_EngineConfiguration() const {
  return EngineConfiguration_case() != ENGINECONFIGURATION_NOT_SET;
}
inline void ScenarioExecData::clear_has_EngineConfiguration() {
  _oneof_case_[0] = ENGINECONFIGURATION_NOT_SET;
}
inline bool ScenarioExecData::has_Scenario() const {
  return Scenario_case() != SCENARIO_NOT_SET;
}
inline void ScenarioExecData::clear_has_Scenario() {
  _oneof_case_[1] = SCENARIO_NOT_SET;
}
inline ScenarioExecData::EngineConfigurationCase ScenarioExecData::EngineConfiguration_case() const {
  return ScenarioExecData::EngineConfigurationCase(_oneof_case_[0]);
}
inline ScenarioExecData::ScenarioCase ScenarioExecData::Scenario_case() const {
  return ScenarioExecData::ScenarioCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::eSerializationFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::eSerializationFormat>() {
  return ::pulse::cdm::bind::eSerializationFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fScenario_2eproto
