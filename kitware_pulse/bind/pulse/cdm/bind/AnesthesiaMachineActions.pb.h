// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/AnesthesiaMachineActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/AnesthesiaMachine.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnesthesiaMachineActionData;
class AnesthesiaMachineActionDataDefaultTypeInternal;
extern AnesthesiaMachineActionDataDefaultTypeInternal _AnesthesiaMachineActionData_default_instance_;
class AnesthesiaMachineConfigurationData;
class AnesthesiaMachineConfigurationDataDefaultTypeInternal;
extern AnesthesiaMachineConfigurationDataDefaultTypeInternal _AnesthesiaMachineConfigurationData_default_instance_;
class AnesthesiaMachineExpiratoryValveLeakData;
class AnesthesiaMachineExpiratoryValveLeakDataDefaultTypeInternal;
extern AnesthesiaMachineExpiratoryValveLeakDataDefaultTypeInternal _AnesthesiaMachineExpiratoryValveLeakData_default_instance_;
class AnesthesiaMachineExpiratoryValveObstructionData;
class AnesthesiaMachineExpiratoryValveObstructionDataDefaultTypeInternal;
extern AnesthesiaMachineExpiratoryValveObstructionDataDefaultTypeInternal _AnesthesiaMachineExpiratoryValveObstructionData_default_instance_;
class AnesthesiaMachineInspiratoryValveLeakData;
class AnesthesiaMachineInspiratoryValveLeakDataDefaultTypeInternal;
extern AnesthesiaMachineInspiratoryValveLeakDataDefaultTypeInternal _AnesthesiaMachineInspiratoryValveLeakData_default_instance_;
class AnesthesiaMachineInspiratoryValveObstructionData;
class AnesthesiaMachineInspiratoryValveObstructionDataDefaultTypeInternal;
extern AnesthesiaMachineInspiratoryValveObstructionDataDefaultTypeInternal _AnesthesiaMachineInspiratoryValveObstructionData_default_instance_;
class AnesthesiaMachineMaskLeakData;
class AnesthesiaMachineMaskLeakDataDefaultTypeInternal;
extern AnesthesiaMachineMaskLeakDataDefaultTypeInternal _AnesthesiaMachineMaskLeakData_default_instance_;
class AnesthesiaMachineOxygenTankPressureLossData;
class AnesthesiaMachineOxygenTankPressureLossDataDefaultTypeInternal;
extern AnesthesiaMachineOxygenTankPressureLossDataDefaultTypeInternal _AnesthesiaMachineOxygenTankPressureLossData_default_instance_;
class AnesthesiaMachineOxygenWallPortPressureLossData;
class AnesthesiaMachineOxygenWallPortPressureLossDataDefaultTypeInternal;
extern AnesthesiaMachineOxygenWallPortPressureLossDataDefaultTypeInternal _AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_;
class AnesthesiaMachineSodaLimeFailureData;
class AnesthesiaMachineSodaLimeFailureDataDefaultTypeInternal;
extern AnesthesiaMachineSodaLimeFailureDataDefaultTypeInternal _AnesthesiaMachineSodaLimeFailureData_default_instance_;
class AnesthesiaMachineTubeCuffLeakData;
class AnesthesiaMachineTubeCuffLeakDataDefaultTypeInternal;
extern AnesthesiaMachineTubeCuffLeakDataDefaultTypeInternal _AnesthesiaMachineTubeCuffLeakData_default_instance_;
class AnesthesiaMachineVaporizerFailureData;
class AnesthesiaMachineVaporizerFailureDataDefaultTypeInternal;
extern AnesthesiaMachineVaporizerFailureDataDefaultTypeInternal _AnesthesiaMachineVaporizerFailureData_default_instance_;
class AnesthesiaMachineVentilatorPressureLossData;
class AnesthesiaMachineVentilatorPressureLossDataDefaultTypeInternal;
extern AnesthesiaMachineVentilatorPressureLossDataDefaultTypeInternal _AnesthesiaMachineVentilatorPressureLossData_default_instance_;
class AnesthesiaMachineYPieceDisconnectData;
class AnesthesiaMachineYPieceDisconnectDataDefaultTypeInternal;
extern AnesthesiaMachineYPieceDisconnectDataDefaultTypeInternal _AnesthesiaMachineYPieceDisconnectData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnesthesiaMachineActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineConfigurationData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineMaskLeakData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnesthesiaMachineActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineActionData) */ {
 public:
  inline AnesthesiaMachineActionData() : AnesthesiaMachineActionData(nullptr) {}
  virtual ~AnesthesiaMachineActionData();

  AnesthesiaMachineActionData(const AnesthesiaMachineActionData& from);
  AnesthesiaMachineActionData(AnesthesiaMachineActionData&& from) noexcept
    : AnesthesiaMachineActionData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineActionData& operator=(const AnesthesiaMachineActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineActionData& operator=(AnesthesiaMachineActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineActionData& default_instance();

  static inline const AnesthesiaMachineActionData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineActionData*>(
               &_AnesthesiaMachineActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnesthesiaMachineActionData& a, AnesthesiaMachineActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineActionData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineActionData>(nullptr);
  }

  AnesthesiaMachineActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineActionData& from);
  void MergeFrom(const AnesthesiaMachineActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineActionData";
  }
  protected:
  explicit AnesthesiaMachineActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
  bool has_equipmentaction() const;
  private:
  bool _internal_has_equipmentaction() const;
  public:
  void clear_equipmentaction();
  const ::pulse::cdm::bind::EquipmentActionData& equipmentaction() const;
  ::pulse::cdm::bind::EquipmentActionData* release_equipmentaction();
  ::pulse::cdm::bind::EquipmentActionData* mutable_equipmentaction();
  void set_allocated_equipmentaction(::pulse::cdm::bind::EquipmentActionData* equipmentaction);
  private:
  const ::pulse::cdm::bind::EquipmentActionData& _internal_equipmentaction() const;
  ::pulse::cdm::bind::EquipmentActionData* _internal_mutable_equipmentaction();
  public:
  void unsafe_arena_set_allocated_equipmentaction(
      ::pulse::cdm::bind::EquipmentActionData* equipmentaction);
  ::pulse::cdm::bind::EquipmentActionData* unsafe_arena_release_equipmentaction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineActionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EquipmentActionData* equipmentaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineConfigurationData) */ {
 public:
  inline AnesthesiaMachineConfigurationData() : AnesthesiaMachineConfigurationData(nullptr) {}
  virtual ~AnesthesiaMachineConfigurationData();

  AnesthesiaMachineConfigurationData(const AnesthesiaMachineConfigurationData& from);
  AnesthesiaMachineConfigurationData(AnesthesiaMachineConfigurationData&& from) noexcept
    : AnesthesiaMachineConfigurationData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineConfigurationData& operator=(const AnesthesiaMachineConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineConfigurationData& operator=(AnesthesiaMachineConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineConfigurationData& default_instance();

  enum OptionCase {
    kConfiguration = 2,
    kConfigurationFile = 3,
    OPTION_NOT_SET = 0,
  };

  static inline const AnesthesiaMachineConfigurationData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineConfigurationData*>(
               &_AnesthesiaMachineConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnesthesiaMachineConfigurationData& a, AnesthesiaMachineConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineConfigurationData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineConfigurationData>(nullptr);
  }

  AnesthesiaMachineConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineConfigurationData& from);
  void MergeFrom(const AnesthesiaMachineConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineConfigurationData";
  }
  protected:
  explicit AnesthesiaMachineConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kConfigurationFieldNumber = 2,
    kConfigurationFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.AnesthesiaMachineData Configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::pulse::cdm::bind::AnesthesiaMachineData& configuration() const;
  ::pulse::cdm::bind::AnesthesiaMachineData* release_configuration();
  ::pulse::cdm::bind::AnesthesiaMachineData* mutable_configuration();
  void set_allocated_configuration(::pulse::cdm::bind::AnesthesiaMachineData* configuration);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineData& _internal_configuration() const;
  ::pulse::cdm::bind::AnesthesiaMachineData* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::pulse::cdm::bind::AnesthesiaMachineData* configuration);
  ::pulse::cdm::bind::AnesthesiaMachineData* unsafe_arena_release_configuration();

  // string ConfigurationFile = 3;
  private:
  bool _internal_has_configurationfile() const;
  public:
  void clear_configurationfile();
  const std::string& configurationfile() const;
  void set_configurationfile(const std::string& value);
  void set_configurationfile(std::string&& value);
  void set_configurationfile(const char* value);
  void set_configurationfile(const char* value, size_t size);
  std::string* mutable_configurationfile();
  std::string* release_configurationfile();
  void set_allocated_configurationfile(std::string* configurationfile);
  private:
  const std::string& _internal_configurationfile() const;
  void _internal_set_configurationfile(const std::string& value);
  std::string* _internal_mutable_configurationfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineConfigurationData)
 private:
  class _Internal;
  void set_has_configuration();
  void set_has_configurationfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::AnesthesiaMachineData* configuration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineExpiratoryValveLeakData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData) */ {
 public:
  inline AnesthesiaMachineExpiratoryValveLeakData() : AnesthesiaMachineExpiratoryValveLeakData(nullptr) {}
  virtual ~AnesthesiaMachineExpiratoryValveLeakData();

  AnesthesiaMachineExpiratoryValveLeakData(const AnesthesiaMachineExpiratoryValveLeakData& from);
  AnesthesiaMachineExpiratoryValveLeakData(AnesthesiaMachineExpiratoryValveLeakData&& from) noexcept
    : AnesthesiaMachineExpiratoryValveLeakData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineExpiratoryValveLeakData& operator=(const AnesthesiaMachineExpiratoryValveLeakData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineExpiratoryValveLeakData& operator=(AnesthesiaMachineExpiratoryValveLeakData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineExpiratoryValveLeakData& default_instance();

  static inline const AnesthesiaMachineExpiratoryValveLeakData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineExpiratoryValveLeakData*>(
               &_AnesthesiaMachineExpiratoryValveLeakData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnesthesiaMachineExpiratoryValveLeakData& a, AnesthesiaMachineExpiratoryValveLeakData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineExpiratoryValveLeakData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineExpiratoryValveLeakData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineExpiratoryValveLeakData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineExpiratoryValveLeakData>(nullptr);
  }

  AnesthesiaMachineExpiratoryValveLeakData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineExpiratoryValveLeakData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineExpiratoryValveLeakData& from);
  void MergeFrom(const AnesthesiaMachineExpiratoryValveLeakData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineExpiratoryValveLeakData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData";
  }
  protected:
  explicit AnesthesiaMachineExpiratoryValveLeakData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineExpiratoryValveObstructionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData) */ {
 public:
  inline AnesthesiaMachineExpiratoryValveObstructionData() : AnesthesiaMachineExpiratoryValveObstructionData(nullptr) {}
  virtual ~AnesthesiaMachineExpiratoryValveObstructionData();

  AnesthesiaMachineExpiratoryValveObstructionData(const AnesthesiaMachineExpiratoryValveObstructionData& from);
  AnesthesiaMachineExpiratoryValveObstructionData(AnesthesiaMachineExpiratoryValveObstructionData&& from) noexcept
    : AnesthesiaMachineExpiratoryValveObstructionData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineExpiratoryValveObstructionData& operator=(const AnesthesiaMachineExpiratoryValveObstructionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineExpiratoryValveObstructionData& operator=(AnesthesiaMachineExpiratoryValveObstructionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineExpiratoryValveObstructionData& default_instance();

  static inline const AnesthesiaMachineExpiratoryValveObstructionData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineExpiratoryValveObstructionData*>(
               &_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnesthesiaMachineExpiratoryValveObstructionData& a, AnesthesiaMachineExpiratoryValveObstructionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineExpiratoryValveObstructionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineExpiratoryValveObstructionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineExpiratoryValveObstructionData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineExpiratoryValveObstructionData>(nullptr);
  }

  AnesthesiaMachineExpiratoryValveObstructionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineExpiratoryValveObstructionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineExpiratoryValveObstructionData& from);
  void MergeFrom(const AnesthesiaMachineExpiratoryValveObstructionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineExpiratoryValveObstructionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData";
  }
  protected:
  explicit AnesthesiaMachineExpiratoryValveObstructionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineInspiratoryValveLeakData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData) */ {
 public:
  inline AnesthesiaMachineInspiratoryValveLeakData() : AnesthesiaMachineInspiratoryValveLeakData(nullptr) {}
  virtual ~AnesthesiaMachineInspiratoryValveLeakData();

  AnesthesiaMachineInspiratoryValveLeakData(const AnesthesiaMachineInspiratoryValveLeakData& from);
  AnesthesiaMachineInspiratoryValveLeakData(AnesthesiaMachineInspiratoryValveLeakData&& from) noexcept
    : AnesthesiaMachineInspiratoryValveLeakData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineInspiratoryValveLeakData& operator=(const AnesthesiaMachineInspiratoryValveLeakData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineInspiratoryValveLeakData& operator=(AnesthesiaMachineInspiratoryValveLeakData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineInspiratoryValveLeakData& default_instance();

  static inline const AnesthesiaMachineInspiratoryValveLeakData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineInspiratoryValveLeakData*>(
               &_AnesthesiaMachineInspiratoryValveLeakData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnesthesiaMachineInspiratoryValveLeakData& a, AnesthesiaMachineInspiratoryValveLeakData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineInspiratoryValveLeakData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineInspiratoryValveLeakData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineInspiratoryValveLeakData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineInspiratoryValveLeakData>(nullptr);
  }

  AnesthesiaMachineInspiratoryValveLeakData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineInspiratoryValveLeakData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineInspiratoryValveLeakData& from);
  void MergeFrom(const AnesthesiaMachineInspiratoryValveLeakData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineInspiratoryValveLeakData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData";
  }
  protected:
  explicit AnesthesiaMachineInspiratoryValveLeakData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineInspiratoryValveObstructionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData) */ {
 public:
  inline AnesthesiaMachineInspiratoryValveObstructionData() : AnesthesiaMachineInspiratoryValveObstructionData(nullptr) {}
  virtual ~AnesthesiaMachineInspiratoryValveObstructionData();

  AnesthesiaMachineInspiratoryValveObstructionData(const AnesthesiaMachineInspiratoryValveObstructionData& from);
  AnesthesiaMachineInspiratoryValveObstructionData(AnesthesiaMachineInspiratoryValveObstructionData&& from) noexcept
    : AnesthesiaMachineInspiratoryValveObstructionData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineInspiratoryValveObstructionData& operator=(const AnesthesiaMachineInspiratoryValveObstructionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineInspiratoryValveObstructionData& operator=(AnesthesiaMachineInspiratoryValveObstructionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineInspiratoryValveObstructionData& default_instance();

  static inline const AnesthesiaMachineInspiratoryValveObstructionData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineInspiratoryValveObstructionData*>(
               &_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AnesthesiaMachineInspiratoryValveObstructionData& a, AnesthesiaMachineInspiratoryValveObstructionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineInspiratoryValveObstructionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineInspiratoryValveObstructionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineInspiratoryValveObstructionData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineInspiratoryValveObstructionData>(nullptr);
  }

  AnesthesiaMachineInspiratoryValveObstructionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineInspiratoryValveObstructionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineInspiratoryValveObstructionData& from);
  void MergeFrom(const AnesthesiaMachineInspiratoryValveObstructionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineInspiratoryValveObstructionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData";
  }
  protected:
  explicit AnesthesiaMachineInspiratoryValveObstructionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineMaskLeakData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineMaskLeakData) */ {
 public:
  inline AnesthesiaMachineMaskLeakData() : AnesthesiaMachineMaskLeakData(nullptr) {}
  virtual ~AnesthesiaMachineMaskLeakData();

  AnesthesiaMachineMaskLeakData(const AnesthesiaMachineMaskLeakData& from);
  AnesthesiaMachineMaskLeakData(AnesthesiaMachineMaskLeakData&& from) noexcept
    : AnesthesiaMachineMaskLeakData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineMaskLeakData& operator=(const AnesthesiaMachineMaskLeakData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineMaskLeakData& operator=(AnesthesiaMachineMaskLeakData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineMaskLeakData& default_instance();

  static inline const AnesthesiaMachineMaskLeakData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineMaskLeakData*>(
               &_AnesthesiaMachineMaskLeakData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnesthesiaMachineMaskLeakData& a, AnesthesiaMachineMaskLeakData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineMaskLeakData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineMaskLeakData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineMaskLeakData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineMaskLeakData>(nullptr);
  }

  AnesthesiaMachineMaskLeakData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineMaskLeakData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineMaskLeakData& from);
  void MergeFrom(const AnesthesiaMachineMaskLeakData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineMaskLeakData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineMaskLeakData";
  }
  protected:
  explicit AnesthesiaMachineMaskLeakData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineMaskLeakData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineSodaLimeFailureData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData) */ {
 public:
  inline AnesthesiaMachineSodaLimeFailureData() : AnesthesiaMachineSodaLimeFailureData(nullptr) {}
  virtual ~AnesthesiaMachineSodaLimeFailureData();

  AnesthesiaMachineSodaLimeFailureData(const AnesthesiaMachineSodaLimeFailureData& from);
  AnesthesiaMachineSodaLimeFailureData(AnesthesiaMachineSodaLimeFailureData&& from) noexcept
    : AnesthesiaMachineSodaLimeFailureData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineSodaLimeFailureData& operator=(const AnesthesiaMachineSodaLimeFailureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineSodaLimeFailureData& operator=(AnesthesiaMachineSodaLimeFailureData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineSodaLimeFailureData& default_instance();

  static inline const AnesthesiaMachineSodaLimeFailureData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineSodaLimeFailureData*>(
               &_AnesthesiaMachineSodaLimeFailureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AnesthesiaMachineSodaLimeFailureData& a, AnesthesiaMachineSodaLimeFailureData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineSodaLimeFailureData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineSodaLimeFailureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineSodaLimeFailureData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineSodaLimeFailureData>(nullptr);
  }

  AnesthesiaMachineSodaLimeFailureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineSodaLimeFailureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineSodaLimeFailureData& from);
  void MergeFrom(const AnesthesiaMachineSodaLimeFailureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineSodaLimeFailureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData";
  }
  protected:
  explicit AnesthesiaMachineSodaLimeFailureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineTubeCuffLeakData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData) */ {
 public:
  inline AnesthesiaMachineTubeCuffLeakData() : AnesthesiaMachineTubeCuffLeakData(nullptr) {}
  virtual ~AnesthesiaMachineTubeCuffLeakData();

  AnesthesiaMachineTubeCuffLeakData(const AnesthesiaMachineTubeCuffLeakData& from);
  AnesthesiaMachineTubeCuffLeakData(AnesthesiaMachineTubeCuffLeakData&& from) noexcept
    : AnesthesiaMachineTubeCuffLeakData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineTubeCuffLeakData& operator=(const AnesthesiaMachineTubeCuffLeakData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineTubeCuffLeakData& operator=(AnesthesiaMachineTubeCuffLeakData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineTubeCuffLeakData& default_instance();

  static inline const AnesthesiaMachineTubeCuffLeakData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineTubeCuffLeakData*>(
               &_AnesthesiaMachineTubeCuffLeakData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnesthesiaMachineTubeCuffLeakData& a, AnesthesiaMachineTubeCuffLeakData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineTubeCuffLeakData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineTubeCuffLeakData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineTubeCuffLeakData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineTubeCuffLeakData>(nullptr);
  }

  AnesthesiaMachineTubeCuffLeakData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineTubeCuffLeakData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineTubeCuffLeakData& from);
  void MergeFrom(const AnesthesiaMachineTubeCuffLeakData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineTubeCuffLeakData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData";
  }
  protected:
  explicit AnesthesiaMachineTubeCuffLeakData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineVaporizerFailureData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData) */ {
 public:
  inline AnesthesiaMachineVaporizerFailureData() : AnesthesiaMachineVaporizerFailureData(nullptr) {}
  virtual ~AnesthesiaMachineVaporizerFailureData();

  AnesthesiaMachineVaporizerFailureData(const AnesthesiaMachineVaporizerFailureData& from);
  AnesthesiaMachineVaporizerFailureData(AnesthesiaMachineVaporizerFailureData&& from) noexcept
    : AnesthesiaMachineVaporizerFailureData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineVaporizerFailureData& operator=(const AnesthesiaMachineVaporizerFailureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineVaporizerFailureData& operator=(AnesthesiaMachineVaporizerFailureData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineVaporizerFailureData& default_instance();

  static inline const AnesthesiaMachineVaporizerFailureData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineVaporizerFailureData*>(
               &_AnesthesiaMachineVaporizerFailureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AnesthesiaMachineVaporizerFailureData& a, AnesthesiaMachineVaporizerFailureData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineVaporizerFailureData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineVaporizerFailureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineVaporizerFailureData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineVaporizerFailureData>(nullptr);
  }

  AnesthesiaMachineVaporizerFailureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineVaporizerFailureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineVaporizerFailureData& from);
  void MergeFrom(const AnesthesiaMachineVaporizerFailureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineVaporizerFailureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData";
  }
  protected:
  explicit AnesthesiaMachineVaporizerFailureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineVentilatorPressureLossData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData) */ {
 public:
  inline AnesthesiaMachineVentilatorPressureLossData() : AnesthesiaMachineVentilatorPressureLossData(nullptr) {}
  virtual ~AnesthesiaMachineVentilatorPressureLossData();

  AnesthesiaMachineVentilatorPressureLossData(const AnesthesiaMachineVentilatorPressureLossData& from);
  AnesthesiaMachineVentilatorPressureLossData(AnesthesiaMachineVentilatorPressureLossData&& from) noexcept
    : AnesthesiaMachineVentilatorPressureLossData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineVentilatorPressureLossData& operator=(const AnesthesiaMachineVentilatorPressureLossData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineVentilatorPressureLossData& operator=(AnesthesiaMachineVentilatorPressureLossData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineVentilatorPressureLossData& default_instance();

  static inline const AnesthesiaMachineVentilatorPressureLossData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineVentilatorPressureLossData*>(
               &_AnesthesiaMachineVentilatorPressureLossData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AnesthesiaMachineVentilatorPressureLossData& a, AnesthesiaMachineVentilatorPressureLossData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineVentilatorPressureLossData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineVentilatorPressureLossData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineVentilatorPressureLossData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineVentilatorPressureLossData>(nullptr);
  }

  AnesthesiaMachineVentilatorPressureLossData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineVentilatorPressureLossData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineVentilatorPressureLossData& from);
  void MergeFrom(const AnesthesiaMachineVentilatorPressureLossData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineVentilatorPressureLossData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData";
  }
  protected:
  explicit AnesthesiaMachineVentilatorPressureLossData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineYPieceDisconnectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData) */ {
 public:
  inline AnesthesiaMachineYPieceDisconnectData() : AnesthesiaMachineYPieceDisconnectData(nullptr) {}
  virtual ~AnesthesiaMachineYPieceDisconnectData();

  AnesthesiaMachineYPieceDisconnectData(const AnesthesiaMachineYPieceDisconnectData& from);
  AnesthesiaMachineYPieceDisconnectData(AnesthesiaMachineYPieceDisconnectData&& from) noexcept
    : AnesthesiaMachineYPieceDisconnectData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineYPieceDisconnectData& operator=(const AnesthesiaMachineYPieceDisconnectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineYPieceDisconnectData& operator=(AnesthesiaMachineYPieceDisconnectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineYPieceDisconnectData& default_instance();

  static inline const AnesthesiaMachineYPieceDisconnectData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineYPieceDisconnectData*>(
               &_AnesthesiaMachineYPieceDisconnectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AnesthesiaMachineYPieceDisconnectData& a, AnesthesiaMachineYPieceDisconnectData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineYPieceDisconnectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineYPieceDisconnectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineYPieceDisconnectData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineYPieceDisconnectData>(nullptr);
  }

  AnesthesiaMachineYPieceDisconnectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineYPieceDisconnectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineYPieceDisconnectData& from);
  void MergeFrom(const AnesthesiaMachineYPieceDisconnectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineYPieceDisconnectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData";
  }
  protected:
  explicit AnesthesiaMachineYPieceDisconnectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineOxygenWallPortPressureLossData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData) */ {
 public:
  inline AnesthesiaMachineOxygenWallPortPressureLossData() : AnesthesiaMachineOxygenWallPortPressureLossData(nullptr) {}
  virtual ~AnesthesiaMachineOxygenWallPortPressureLossData();

  AnesthesiaMachineOxygenWallPortPressureLossData(const AnesthesiaMachineOxygenWallPortPressureLossData& from);
  AnesthesiaMachineOxygenWallPortPressureLossData(AnesthesiaMachineOxygenWallPortPressureLossData&& from) noexcept
    : AnesthesiaMachineOxygenWallPortPressureLossData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineOxygenWallPortPressureLossData& operator=(const AnesthesiaMachineOxygenWallPortPressureLossData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineOxygenWallPortPressureLossData& operator=(AnesthesiaMachineOxygenWallPortPressureLossData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineOxygenWallPortPressureLossData& default_instance();

  static inline const AnesthesiaMachineOxygenWallPortPressureLossData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineOxygenWallPortPressureLossData*>(
               &_AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AnesthesiaMachineOxygenWallPortPressureLossData& a, AnesthesiaMachineOxygenWallPortPressureLossData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineOxygenWallPortPressureLossData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineOxygenWallPortPressureLossData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineOxygenWallPortPressureLossData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenWallPortPressureLossData>(nullptr);
  }

  AnesthesiaMachineOxygenWallPortPressureLossData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenWallPortPressureLossData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineOxygenWallPortPressureLossData& from);
  void MergeFrom(const AnesthesiaMachineOxygenWallPortPressureLossData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineOxygenWallPortPressureLossData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData";
  }
  protected:
  explicit AnesthesiaMachineOxygenWallPortPressureLossData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineOxygenTankPressureLossData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData) */ {
 public:
  inline AnesthesiaMachineOxygenTankPressureLossData() : AnesthesiaMachineOxygenTankPressureLossData(nullptr) {}
  virtual ~AnesthesiaMachineOxygenTankPressureLossData();

  AnesthesiaMachineOxygenTankPressureLossData(const AnesthesiaMachineOxygenTankPressureLossData& from);
  AnesthesiaMachineOxygenTankPressureLossData(AnesthesiaMachineOxygenTankPressureLossData&& from) noexcept
    : AnesthesiaMachineOxygenTankPressureLossData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineOxygenTankPressureLossData& operator=(const AnesthesiaMachineOxygenTankPressureLossData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineOxygenTankPressureLossData& operator=(AnesthesiaMachineOxygenTankPressureLossData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineOxygenTankPressureLossData& default_instance();

  static inline const AnesthesiaMachineOxygenTankPressureLossData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineOxygenTankPressureLossData*>(
               &_AnesthesiaMachineOxygenTankPressureLossData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AnesthesiaMachineOxygenTankPressureLossData& a, AnesthesiaMachineOxygenTankPressureLossData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineOxygenTankPressureLossData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineOxygenTankPressureLossData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineOxygenTankPressureLossData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenTankPressureLossData>(nullptr);
  }

  AnesthesiaMachineOxygenTankPressureLossData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenTankPressureLossData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineOxygenTankPressureLossData& from);
  void MergeFrom(const AnesthesiaMachineOxygenTankPressureLossData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineOxygenTankPressureLossData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData";
  }
  protected:
  explicit AnesthesiaMachineOxygenTankPressureLossData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineActionFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
  bool has_anesthesiamachineaction() const;
  private:
  bool _internal_has_anesthesiamachineaction() const;
  public:
  void clear_anesthesiamachineaction();
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* release_anesthesiamachineaction();
  ::pulse::cdm::bind::AnesthesiaMachineActionData* mutable_anesthesiamachineaction();
  void set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineActionData& _internal_anesthesiamachineaction() const;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* _internal_mutable_anesthesiamachineaction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineaction(
      ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction);
  ::pulse::cdm::bind::AnesthesiaMachineActionData* unsafe_arena_release_anesthesiamachineaction();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnesthesiaMachineActionData

// .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
inline bool AnesthesiaMachineActionData::_internal_has_equipmentaction() const {
  return this != internal_default_instance() && equipmentaction_ != nullptr;
}
inline bool AnesthesiaMachineActionData::has_equipmentaction() const {
  return _internal_has_equipmentaction();
}
inline const ::pulse::cdm::bind::EquipmentActionData& AnesthesiaMachineActionData::_internal_equipmentaction() const {
  const ::pulse::cdm::bind::EquipmentActionData* p = equipmentaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EquipmentActionData&>(
      ::pulse::cdm::bind::_EquipmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::EquipmentActionData& AnesthesiaMachineActionData::equipmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineActionData.EquipmentAction)
  return _internal_equipmentaction();
}
inline void AnesthesiaMachineActionData::unsafe_arena_set_allocated_equipmentaction(
    ::pulse::cdm::bind::EquipmentActionData* equipmentaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction_);
  }
  equipmentaction_ = equipmentaction;
  if (equipmentaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineActionData.EquipmentAction)
}
inline ::pulse::cdm::bind::EquipmentActionData* AnesthesiaMachineActionData::release_equipmentaction() {
  
  ::pulse::cdm::bind::EquipmentActionData* temp = equipmentaction_;
  equipmentaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EquipmentActionData* AnesthesiaMachineActionData::unsafe_arena_release_equipmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineActionData.EquipmentAction)
  
  ::pulse::cdm::bind::EquipmentActionData* temp = equipmentaction_;
  equipmentaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EquipmentActionData* AnesthesiaMachineActionData::_internal_mutable_equipmentaction() {
  
  if (equipmentaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EquipmentActionData>(GetArena());
    equipmentaction_ = p;
  }
  return equipmentaction_;
}
inline ::pulse::cdm::bind::EquipmentActionData* AnesthesiaMachineActionData::mutable_equipmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineActionData.EquipmentAction)
  return _internal_mutable_equipmentaction();
}
inline void AnesthesiaMachineActionData::set_allocated_equipmentaction(::pulse::cdm::bind::EquipmentActionData* equipmentaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction_);
  }
  if (equipmentaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction)->GetArena();
    if (message_arena != submessage_arena) {
      equipmentaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipmentaction, submessage_arena);
    }
    
  } else {
    
  }
  equipmentaction_ = equipmentaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineActionData.EquipmentAction)
}

// -------------------------------------------------------------------

// AnesthesiaMachineConfigurationData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineConfigurationData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineConfigurationData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineConfigurationData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineConfigurationData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineConfigurationData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineConfigurationData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineConfigurationData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineConfigurationData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineConfigurationData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineConfigurationData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineConfigurationData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineConfigurationData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineConfigurationData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineConfigurationData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineConfigurationData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineConfigurationData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.AnesthesiaMachineData Configuration = 2;
inline bool AnesthesiaMachineConfigurationData::_internal_has_configuration() const {
  return Option_case() == kConfiguration;
}
inline bool AnesthesiaMachineConfigurationData::has_configuration() const {
  return _internal_has_configuration();
}
inline void AnesthesiaMachineConfigurationData::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineConfigurationData::release_configuration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
  if (_internal_has_configuration()) {
    clear_has_Option();
      ::pulse::cdm::bind::AnesthesiaMachineData* temp = Option_.configuration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineData& AnesthesiaMachineConfigurationData::_internal_configuration() const {
  return _internal_has_configuration()
      ? *Option_.configuration_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineData&>(::pulse::cdm::bind::_AnesthesiaMachineData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineData& AnesthesiaMachineConfigurationData::configuration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
  return _internal_configuration();
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineConfigurationData::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
  if (_internal_has_configuration()) {
    clear_has_Option();
    ::pulse::cdm::bind::AnesthesiaMachineData* temp = Option_.configuration_;
    Option_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnesthesiaMachineConfigurationData::unsafe_arena_set_allocated_configuration(::pulse::cdm::bind::AnesthesiaMachineData* configuration) {
  clear_Option();
  if (configuration) {
    set_has_configuration();
    Option_.configuration_ = configuration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineConfigurationData::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_Option();
    set_has_configuration();
    Option_.configuration_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineData >(GetArena());
  }
  return Option_.configuration_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData* AnesthesiaMachineConfigurationData::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineConfigurationData.Configuration)
  return _internal_mutable_configuration();
}

// string ConfigurationFile = 3;
inline bool AnesthesiaMachineConfigurationData::_internal_has_configurationfile() const {
  return Option_case() == kConfigurationFile;
}
inline void AnesthesiaMachineConfigurationData::set_has_configurationfile() {
  _oneof_case_[0] = kConfigurationFile;
}
inline void AnesthesiaMachineConfigurationData::clear_configurationfile() {
  if (_internal_has_configurationfile()) {
    Option_.configurationfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& AnesthesiaMachineConfigurationData::configurationfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
  return _internal_configurationfile();
}
inline void AnesthesiaMachineConfigurationData::set_configurationfile(const std::string& value) {
  _internal_set_configurationfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
}
inline std::string* AnesthesiaMachineConfigurationData::mutable_configurationfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
  return _internal_mutable_configurationfile();
}
inline const std::string& AnesthesiaMachineConfigurationData::_internal_configurationfile() const {
  if (_internal_has_configurationfile()) {
    return Option_.configurationfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AnesthesiaMachineConfigurationData::_internal_set_configurationfile(const std::string& value) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnesthesiaMachineConfigurationData::set_configurationfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
}
inline void AnesthesiaMachineConfigurationData::set_configurationfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
}
inline void AnesthesiaMachineConfigurationData::set_configurationfile(const char* value,
                             size_t size) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
}
inline std::string* AnesthesiaMachineConfigurationData::_internal_mutable_configurationfile() {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.configurationfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnesthesiaMachineConfigurationData::release_configurationfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
  if (_internal_has_configurationfile()) {
    clear_has_Option();
    return Option_.configurationfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AnesthesiaMachineConfigurationData::set_allocated_configurationfile(std::string* configurationfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (configurationfile != nullptr) {
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(configurationfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(configurationfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineConfigurationData.ConfigurationFile)
}

inline bool AnesthesiaMachineConfigurationData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void AnesthesiaMachineConfigurationData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline AnesthesiaMachineConfigurationData::OptionCase AnesthesiaMachineConfigurationData::Option_case() const {
  return AnesthesiaMachineConfigurationData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AnesthesiaMachineExpiratoryValveLeakData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineExpiratoryValveLeakData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineExpiratoryValveLeakData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveLeakData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineExpiratoryValveLeakData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineExpiratoryValveLeakData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveLeakData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveLeakData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveLeakData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveLeakData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveLeakData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveLeakData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineExpiratoryValveLeakData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineExpiratoryValveLeakData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineExpiratoryValveLeakData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineExpiratoryValveLeakData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineExpiratoryValveLeakData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveLeakData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveLeakData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveLeakData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveLeakData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineExpiratoryValveLeakData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineExpiratoryValveObstructionData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineExpiratoryValveObstructionData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineExpiratoryValveObstructionData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveObstructionData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineExpiratoryValveObstructionData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineExpiratoryValveObstructionData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveObstructionData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveObstructionData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveObstructionData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveObstructionData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineExpiratoryValveObstructionData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineExpiratoryValveObstructionData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineExpiratoryValveObstructionData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineExpiratoryValveObstructionData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineExpiratoryValveObstructionData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineExpiratoryValveObstructionData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineExpiratoryValveObstructionData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveObstructionData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveObstructionData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveObstructionData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineExpiratoryValveObstructionData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineExpiratoryValveObstructionData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineInspiratoryValveLeakData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineInspiratoryValveLeakData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineInspiratoryValveLeakData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveLeakData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineInspiratoryValveLeakData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineInspiratoryValveLeakData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveLeakData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveLeakData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveLeakData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveLeakData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveLeakData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveLeakData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineInspiratoryValveLeakData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineInspiratoryValveLeakData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineInspiratoryValveLeakData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineInspiratoryValveLeakData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineInspiratoryValveLeakData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveLeakData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveLeakData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveLeakData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveLeakData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineInspiratoryValveLeakData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineInspiratoryValveObstructionData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineInspiratoryValveObstructionData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineInspiratoryValveObstructionData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveObstructionData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineInspiratoryValveObstructionData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineInspiratoryValveObstructionData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveObstructionData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveObstructionData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveObstructionData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveObstructionData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineInspiratoryValveObstructionData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineInspiratoryValveObstructionData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineInspiratoryValveObstructionData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineInspiratoryValveObstructionData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineInspiratoryValveObstructionData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineInspiratoryValveObstructionData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineInspiratoryValveObstructionData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveObstructionData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveObstructionData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveObstructionData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineInspiratoryValveObstructionData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineInspiratoryValveObstructionData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineMaskLeakData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineMaskLeakData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineMaskLeakData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineMaskLeakData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineMaskLeakData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineMaskLeakData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineMaskLeakData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineMaskLeakData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineMaskLeakData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineMaskLeakData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineMaskLeakData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineMaskLeakData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineMaskLeakData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineMaskLeakData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineMaskLeakData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineMaskLeakData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineMaskLeakData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineMaskLeakData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineMaskLeakData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineMaskLeakData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineMaskLeakData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineMaskLeakData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineMaskLeakData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineSodaLimeFailureData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineSodaLimeFailureData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineSodaLimeFailureData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineSodaLimeFailureData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineSodaLimeFailureData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineSodaLimeFailureData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineSodaLimeFailureData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineSodaLimeFailureData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineSodaLimeFailureData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineSodaLimeFailureData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineSodaLimeFailureData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineSodaLimeFailureData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineSodaLimeFailureData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineSodaLimeFailureData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineSodaLimeFailureData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineSodaLimeFailureData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineSodaLimeFailureData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineSodaLimeFailureData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineSodaLimeFailureData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineSodaLimeFailureData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineSodaLimeFailureData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineSodaLimeFailureData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineTubeCuffLeakData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineTubeCuffLeakData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineTubeCuffLeakData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineTubeCuffLeakData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineTubeCuffLeakData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineTubeCuffLeakData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineTubeCuffLeakData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineTubeCuffLeakData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineTubeCuffLeakData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineTubeCuffLeakData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineTubeCuffLeakData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineTubeCuffLeakData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineTubeCuffLeakData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineTubeCuffLeakData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineTubeCuffLeakData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineTubeCuffLeakData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineTubeCuffLeakData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineTubeCuffLeakData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineTubeCuffLeakData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineTubeCuffLeakData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineTubeCuffLeakData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineTubeCuffLeakData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineVaporizerFailureData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineVaporizerFailureData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineVaporizerFailureData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineVaporizerFailureData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineVaporizerFailureData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineVaporizerFailureData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineVaporizerFailureData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVaporizerFailureData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVaporizerFailureData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVaporizerFailureData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVaporizerFailureData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineVaporizerFailureData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineVaporizerFailureData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineVaporizerFailureData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineVaporizerFailureData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineVaporizerFailureData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineVaporizerFailureData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVaporizerFailureData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVaporizerFailureData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVaporizerFailureData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVaporizerFailureData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineVaporizerFailureData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineVentilatorPressureLossData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineVentilatorPressureLossData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineVentilatorPressureLossData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineVentilatorPressureLossData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineVentilatorPressureLossData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineVentilatorPressureLossData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineVentilatorPressureLossData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVentilatorPressureLossData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVentilatorPressureLossData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVentilatorPressureLossData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineVentilatorPressureLossData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineVentilatorPressureLossData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineVentilatorPressureLossData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineVentilatorPressureLossData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineVentilatorPressureLossData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineVentilatorPressureLossData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineVentilatorPressureLossData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVentilatorPressureLossData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVentilatorPressureLossData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVentilatorPressureLossData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineVentilatorPressureLossData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineVentilatorPressureLossData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineYPieceDisconnectData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineYPieceDisconnectData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineYPieceDisconnectData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineYPieceDisconnectData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineYPieceDisconnectData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineYPieceDisconnectData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineYPieceDisconnectData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineYPieceDisconnectData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineYPieceDisconnectData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineYPieceDisconnectData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineYPieceDisconnectData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineYPieceDisconnectData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AnesthesiaMachineYPieceDisconnectData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AnesthesiaMachineYPieceDisconnectData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineYPieceDisconnectData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineYPieceDisconnectData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.Severity)
  return _internal_severity();
}
inline void AnesthesiaMachineYPieceDisconnectData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineYPieceDisconnectData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineYPieceDisconnectData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineYPieceDisconnectData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineYPieceDisconnectData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.Severity)
  return _internal_mutable_severity();
}
inline void AnesthesiaMachineYPieceDisconnectData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData.Severity)
}

// -------------------------------------------------------------------

// AnesthesiaMachineOxygenWallPortPressureLossData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineOxygenWallPortPressureLossData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineOxygenWallPortPressureLossData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenWallPortPressureLossData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineOxygenWallPortPressureLossData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineOxygenWallPortPressureLossData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenWallPortPressureLossData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenWallPortPressureLossData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenWallPortPressureLossData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenWallPortPressureLossData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenWallPortPressureLossData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenWallPortPressureLossData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void AnesthesiaMachineOxygenWallPortPressureLossData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineOxygenWallPortPressureLossData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineOxygenWallPortPressureLossData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.State)
  return _internal_state();
}
inline void AnesthesiaMachineOxygenWallPortPressureLossData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void AnesthesiaMachineOxygenWallPortPressureLossData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData.State)
}

// -------------------------------------------------------------------

// AnesthesiaMachineOxygenTankPressureLossData

// .pulse.cdm.bind.AnesthesiaMachineActionData AnesthesiaMachineAction = 1;
inline bool AnesthesiaMachineOxygenTankPressureLossData::_internal_has_anesthesiamachineaction() const {
  return this != internal_default_instance() && anesthesiamachineaction_ != nullptr;
}
inline bool AnesthesiaMachineOxygenTankPressureLossData::has_anesthesiamachineaction() const {
  return _internal_has_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenTankPressureLossData::clear_anesthesiamachineaction() {
  if (GetArena() == nullptr && anesthesiamachineaction_ != nullptr) {
    delete anesthesiamachineaction_;
  }
  anesthesiamachineaction_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineOxygenTankPressureLossData::_internal_anesthesiamachineaction() const {
  const ::pulse::cdm::bind::AnesthesiaMachineActionData* p = anesthesiamachineaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineActionData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineActionData& AnesthesiaMachineOxygenTankPressureLossData::anesthesiamachineaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.AnesthesiaMachineAction)
  return _internal_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenTankPressureLossData::unsafe_arena_set_allocated_anesthesiamachineaction(
    ::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anesthesiamachineaction_);
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  if (anesthesiamachineaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.AnesthesiaMachineAction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenTankPressureLossData::release_anesthesiamachineaction() {
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenTankPressureLossData::unsafe_arena_release_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.AnesthesiaMachineAction)
  
  ::pulse::cdm::bind::AnesthesiaMachineActionData* temp = anesthesiamachineaction_;
  anesthesiamachineaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenTankPressureLossData::_internal_mutable_anesthesiamachineaction() {
  
  if (anesthesiamachineaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineActionData>(GetArena());
    anesthesiamachineaction_ = p;
  }
  return anesthesiamachineaction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineActionData* AnesthesiaMachineOxygenTankPressureLossData::mutable_anesthesiamachineaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.AnesthesiaMachineAction)
  return _internal_mutable_anesthesiamachineaction();
}
inline void AnesthesiaMachineOxygenTankPressureLossData::set_allocated_anesthesiamachineaction(::pulse::cdm::bind::AnesthesiaMachineActionData* anesthesiamachineaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete anesthesiamachineaction_;
  }
  if (anesthesiamachineaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(anesthesiamachineaction);
    if (message_arena != submessage_arena) {
      anesthesiamachineaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anesthesiamachineaction, submessage_arena);
    }
    
  } else {
    
  }
  anesthesiamachineaction_ = anesthesiamachineaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.AnesthesiaMachineAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void AnesthesiaMachineOxygenTankPressureLossData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineOxygenTankPressureLossData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineOxygenTankPressureLossData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.State)
  return _internal_state();
}
inline void AnesthesiaMachineOxygenTankPressureLossData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void AnesthesiaMachineOxygenTankPressureLossData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData.State)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachineActions_2eproto
