// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Properties.proto

#include "pulse/cdm/bind/Properties.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class RunningAverageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunningAverageData> _instance;
} _RunningAverageData_default_instance_;
class ScalarPropertyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPropertyData> _instance;
} _ScalarPropertyData_default_instance_;
class ScalarDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarData> _instance;
} _ScalarData_default_instance_;
class Scalar0To1DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scalar0To1Data> _instance;
} _Scalar0To1Data_default_instance_;
class ScalarNegative1To1DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarNegative1To1Data> _instance;
} _ScalarNegative1To1Data_default_instance_;
class ScalarAmountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAmountData> _instance;
} _ScalarAmountData_default_instance_;
class ScalarAmountPerMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAmountPerMassData> _instance;
} _ScalarAmountPerMassData_default_instance_;
class ScalarAmountPerTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAmountPerTimeData> _instance;
} _ScalarAmountPerTimeData_default_instance_;
class ScalarAmountPerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAmountPerVolumeData> _instance;
} _ScalarAmountPerVolumeData_default_instance_;
class ScalarAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAreaData> _instance;
} _ScalarAreaData_default_instance_;
class ScalarAreaPerTimePressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarAreaPerTimePressureData> _instance;
} _ScalarAreaPerTimePressureData_default_instance_;
class ScalarElectricCapacitanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricCapacitanceData> _instance;
} _ScalarElectricCapacitanceData_default_instance_;
class ScalarElectricChargeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricChargeData> _instance;
} _ScalarElectricChargeData_default_instance_;
class ScalarElectricCurrentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricCurrentData> _instance;
} _ScalarElectricCurrentData_default_instance_;
class ScalarElectricPotentialDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricPotentialData> _instance;
} _ScalarElectricPotentialData_default_instance_;
class ScalarElectricInductanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricInductanceData> _instance;
} _ScalarElectricInductanceData_default_instance_;
class ScalarElectricResistanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarElectricResistanceData> _instance;
} _ScalarElectricResistanceData_default_instance_;
class ScalarEnergyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarEnergyData> _instance;
} _ScalarEnergyData_default_instance_;
class ScalarEnergyPerAmountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarEnergyPerAmountData> _instance;
} _ScalarEnergyPerAmountData_default_instance_;
class ScalarEnergyPerMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarEnergyPerMassData> _instance;
} _ScalarEnergyPerMassData_default_instance_;
class ScalarForceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarForceData> _instance;
} _ScalarForceData_default_instance_;
class ScalarFrequencyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarFrequencyData> _instance;
} _ScalarFrequencyData_default_instance_;
class ScalarHeatCapacitanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatCapacitanceData> _instance;
} _ScalarHeatCapacitanceData_default_instance_;
class ScalarHeatCapacitancePerAmountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatCapacitancePerAmountData> _instance;
} _ScalarHeatCapacitancePerAmountData_default_instance_;
class ScalarHeatCapacitancePerMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatCapacitancePerMassData> _instance;
} _ScalarHeatCapacitancePerMassData_default_instance_;
class ScalarHeatConductanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatConductanceData> _instance;
} _ScalarHeatConductanceData_default_instance_;
class ScalarHeatConductancePerAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatConductancePerAreaData> _instance;
} _ScalarHeatConductancePerAreaData_default_instance_;
class ScalarHeatInductanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatInductanceData> _instance;
} _ScalarHeatInductanceData_default_instance_;
class ScalarHeatResistanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatResistanceData> _instance;
} _ScalarHeatResistanceData_default_instance_;
class ScalarHeatResistanceAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarHeatResistanceAreaData> _instance;
} _ScalarHeatResistanceAreaData_default_instance_;
class ScalarInversePressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarInversePressureData> _instance;
} _ScalarInversePressureData_default_instance_;
class ScalarInverseVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarInverseVolumeData> _instance;
} _ScalarInverseVolumeData_default_instance_;
class ScalarLengthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarLengthData> _instance;
} _ScalarLengthData_default_instance_;
class ScalarLengthPerTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarLengthPerTimeData> _instance;
} _ScalarLengthPerTimeData_default_instance_;
class ScalarLengthPerTimePressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarLengthPerTimePressureData> _instance;
} _ScalarLengthPerTimePressureData_default_instance_;
class ScalarMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassData> _instance;
} _ScalarMassData_default_instance_;
class ScalarMassPerAmountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassPerAmountData> _instance;
} _ScalarMassPerAmountData_default_instance_;
class ScalarMassPerAreaTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassPerAreaTimeData> _instance;
} _ScalarMassPerAreaTimeData_default_instance_;
class ScalarMassPerMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassPerMassData> _instance;
} _ScalarMassPerMassData_default_instance_;
class ScalarMassPerTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassPerTimeData> _instance;
} _ScalarMassPerTimeData_default_instance_;
class ScalarMassPerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarMassPerVolumeData> _instance;
} _ScalarMassPerVolumeData_default_instance_;
class ScalarOsmolalityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarOsmolalityData> _instance;
} _ScalarOsmolalityData_default_instance_;
class ScalarOsmolarityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarOsmolarityData> _instance;
} _ScalarOsmolarityData_default_instance_;
class ScalarPowerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPowerData> _instance;
} _ScalarPowerData_default_instance_;
class ScalarPowerPerAreaTemperatureToTheFourthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPowerPerAreaTemperatureToTheFourthData> _instance;
} _ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_;
class ScalarPressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressureData> _instance;
} _ScalarPressureData_default_instance_;
class ScalarPressurePerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressurePerVolumeData> _instance;
} _ScalarPressurePerVolumeData_default_instance_;
class ScalarPressureTimePerVolumeAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressureTimePerVolumeAreaData> _instance;
} _ScalarPressureTimePerVolumeAreaData_default_instance_;
class ScalarPressureTimePerAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressureTimePerAreaData> _instance;
} _ScalarPressureTimePerAreaData_default_instance_;
class ScalarPressureTimePerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressureTimePerVolumeData> _instance;
} _ScalarPressureTimePerVolumeData_default_instance_;
class ScalarPressureTimeSquaredPerVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarPressureTimeSquaredPerVolumeData> _instance;
} _ScalarPressureTimeSquaredPerVolumeData_default_instance_;
class ScalarTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarTimeData> _instance;
} _ScalarTimeData_default_instance_;
class ScalarTemperatureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarTemperatureData> _instance;
} _ScalarTemperatureData_default_instance_;
class ScalarVolumeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumeData> _instance;
} _ScalarVolumeData_default_instance_;
class ScalarVolumePerTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerTimeData> _instance;
} _ScalarVolumePerTimeData_default_instance_;
class ScalarVolumePerPressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerPressureData> _instance;
} _ScalarVolumePerPressureData_default_instance_;
class ScalarVolumePerTimeAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerTimeAreaData> _instance;
} _ScalarVolumePerTimeAreaData_default_instance_;
class ScalarVolumePerTimeMassDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerTimeMassData> _instance;
} _ScalarVolumePerTimeMassData_default_instance_;
class ScalarVolumePerTimePressureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerTimePressureData> _instance;
} _ScalarVolumePerTimePressureData_default_instance_;
class ScalarVolumePerTimePressureAreaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScalarVolumePerTimePressureAreaData> _instance;
} _ScalarVolumePerTimePressureAreaData_default_instance_;
class DoubleArrayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleArrayData> _instance;
} _DoubleArrayData_default_instance_;
class IntegerArrayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerArrayData> _instance;
} _IntegerArrayData_default_instance_;
class ArrayDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayData> _instance;
} _ArrayData_default_instance_;
class ArrayTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayTimeData> _instance;
} _ArrayTimeData_default_instance_;
class FunctionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionData> _instance;
} _FunctionData_default_instance_;
class FunctionVolumeVsTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionVolumeVsTimeData> _instance;
} _FunctionVolumeVsTimeData_default_instance_;
class FunctionElectricPotentialVsTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionElectricPotentialVsTimeData> _instance;
} _FunctionElectricPotentialVsTimeData_default_instance_;
class HistogramDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramData> _instance;
} _HistogramData_default_instance_;
class HistogramFractionVsLengthDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramFractionVsLengthData> _instance;
} _HistogramFractionVsLengthData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ArrayData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ArrayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ArrayTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ArrayTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DoubleArrayData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DoubleArrayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {}};

static void InitDefaultsscc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FunctionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FunctionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FunctionElectricPotentialVsTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FunctionVolumeVsTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FunctionVolumeVsTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_HistogramData_default_instance_;
    new (ptr) ::pulse::cdm::bind::HistogramData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_HistogramFractionVsLengthData_default_instance_;
    new (ptr) ::pulse::cdm::bind::HistogramFractionVsLengthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_IntegerArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_IntegerArrayData_default_instance_;
    new (ptr) ::pulse::cdm::bind::IntegerArrayData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntegerArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {}};

static void InitDefaultsscc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_RunningAverageData_default_instance_;
    new (ptr) ::pulse::cdm::bind::RunningAverageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {}};

static void InitDefaultsscc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_Scalar0To1Data_default_instance_;
    new (ptr) ::pulse::cdm::bind::Scalar0To1Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAmountData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAmountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAmountPerMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAmountPerMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAmountPerTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAmountPerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarAreaPerTimePressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarAreaPerTimePressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {}};

static void InitDefaultsscc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricCapacitanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricCapacitanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricChargeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricChargeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricCurrentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricInductanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricInductanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricPotentialData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarElectricResistanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarElectricResistanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarEnergyData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarEnergyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarEnergyPerAmountData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarEnergyPerAmountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarEnergyPerMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarEnergyPerMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarForceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarForceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarFrequencyData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarFrequencyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatCapacitanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatCapacitanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatCapacitancePerAmountData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatConductanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatConductanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatConductancePerAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatConductancePerAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatInductanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatInductanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatResistanceAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatResistanceAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarHeatResistanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarHeatResistanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarInversePressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarInversePressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarInverseVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarInverseVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarLengthData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarLengthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarLengthPerTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarLengthPerTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarLengthPerTimePressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarLengthPerTimePressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassPerAmountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassPerAreaTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassPerAreaTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassPerMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassPerMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassPerTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarMassPerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarNegative1To1Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarOsmolalityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarOsmolalityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarOsmolarityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarOsmolarityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPowerData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPowerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressurePerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressureTimePerAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressureTimePerAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressureTimePerVolumeAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressureTimePerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPressureTimeSquaredPerVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarPropertyData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarPropertyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {}};

static void InitDefaultsscc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarTemperatureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarTemperatureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerPressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerPressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerTimeAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerTimeAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerTimeMassData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScalarVolumePerTimePressureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fProperties_2eproto[69];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fProperties_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fProperties_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RunningAverageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RunningAverageData, sum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RunningAverageData, numsamples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPropertyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPropertyData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPropertyData, value_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPropertyData, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarData, value_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarData, unit_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarData, readonly_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::Scalar0To1Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::Scalar0To1Data, scalar0to1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarNegative1To1Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarNegative1To1Data, scalarnegative1to1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountData, scalaramount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerMassData, scalaramountpermass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerTimeData, scalaramountpertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAmountPerVolumeData, scalaramountpervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAreaData, scalararea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAreaPerTimePressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarAreaPerTimePressureData, scalarareapertimepressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricCapacitanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricCapacitanceData, scalarelectriccapacitance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricChargeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricChargeData, scalarelectriccharge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricCurrentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricCurrentData, scalarelectriccurrent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricPotentialData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricPotentialData, scalarelectricpotential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricInductanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricInductanceData, scalarelectricinductance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricResistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarElectricResistanceData, scalarelectricresistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyData, scalarenergy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyPerAmountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyPerAmountData, scalarenergyperamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyPerMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarEnergyPerMassData, scalarenergypermass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarForceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarForceData, scalarforce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarFrequencyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarFrequencyData, scalarfrequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitanceData, scalarheatcapacitance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData, scalarheatcapacitanceperamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData, scalarheatcapacitancepermass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatConductanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatConductanceData, scalarheatconductance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatConductancePerAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatConductancePerAreaData, scalarheatconductanceperarea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatInductanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatInductanceData, scalarheatinductance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatResistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatResistanceData, scalarheatresistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatResistanceAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarHeatResistanceAreaData, scalarheatresistancearea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarInversePressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarInversePressureData, scalarinversepressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarInverseVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarInverseVolumeData, scalarinversevolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthData, scalarlength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthPerTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthPerTimeData, scalarlengthpertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthPerTimePressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarLengthPerTimePressureData, scalarlengthpertimepressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassData, scalarmass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerAmountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerAmountData, scalarmassperamount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerAreaTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerAreaTimeData, scalarmassperareatime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerMassData, scalarmasspermass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerTimeData, scalarmasspertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarMassPerVolumeData, scalarmasspervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarOsmolalityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarOsmolalityData, scalarosmolality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarOsmolarityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarOsmolarityData, scalarosmolarity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPowerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPowerData, scalarpower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData, scalarpowerperareatemperaturetothefourth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureData, scalarpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressurePerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressurePerVolumeData, scalarpressurepervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData, scalarpressuretimepervolumearea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerAreaData, scalarpressuretimeperarea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimePerVolumeData, scalarpressuretimepervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData, scalarpressuretimesquaredpervolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarTimeData, scalartime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarTemperatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarTemperatureData, scalartemperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumeData, scalarvolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeData, scalarvolumepertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerPressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerPressureData, scalarvolumeperpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeAreaData, scalarvolumepertimearea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeMassData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimeMassData, scalarvolumepertimemass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimePressureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimePressureData, scalarvolumepertimepressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData, scalarvolumepertimepressurearea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DoubleArrayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DoubleArrayData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::IntegerArrayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::IntegerArrayData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ArrayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ArrayData, value_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ArrayData, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ArrayTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ArrayTimeData, arraytime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionData, dependent_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionData, independent_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionData, dependentunit_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionData, independentunit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionVolumeVsTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionVolumeVsTimeData, functionvolumevstime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionElectricPotentialVsTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FunctionElectricPotentialVsTimeData, functionelectricpotentialvstime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HistogramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HistogramData, histogram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HistogramFractionVsLengthData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HistogramFractionVsLengthData, histogramfractionvslength_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::RunningAverageData)},
  { 7, -1, sizeof(::pulse::cdm::bind::ScalarPropertyData)},
  { 15, -1, sizeof(::pulse::cdm::bind::ScalarData)},
  { 23, -1, sizeof(::pulse::cdm::bind::Scalar0To1Data)},
  { 29, -1, sizeof(::pulse::cdm::bind::ScalarNegative1To1Data)},
  { 35, -1, sizeof(::pulse::cdm::bind::ScalarAmountData)},
  { 41, -1, sizeof(::pulse::cdm::bind::ScalarAmountPerMassData)},
  { 47, -1, sizeof(::pulse::cdm::bind::ScalarAmountPerTimeData)},
  { 53, -1, sizeof(::pulse::cdm::bind::ScalarAmountPerVolumeData)},
  { 59, -1, sizeof(::pulse::cdm::bind::ScalarAreaData)},
  { 65, -1, sizeof(::pulse::cdm::bind::ScalarAreaPerTimePressureData)},
  { 71, -1, sizeof(::pulse::cdm::bind::ScalarElectricCapacitanceData)},
  { 77, -1, sizeof(::pulse::cdm::bind::ScalarElectricChargeData)},
  { 83, -1, sizeof(::pulse::cdm::bind::ScalarElectricCurrentData)},
  { 89, -1, sizeof(::pulse::cdm::bind::ScalarElectricPotentialData)},
  { 95, -1, sizeof(::pulse::cdm::bind::ScalarElectricInductanceData)},
  { 101, -1, sizeof(::pulse::cdm::bind::ScalarElectricResistanceData)},
  { 107, -1, sizeof(::pulse::cdm::bind::ScalarEnergyData)},
  { 113, -1, sizeof(::pulse::cdm::bind::ScalarEnergyPerAmountData)},
  { 119, -1, sizeof(::pulse::cdm::bind::ScalarEnergyPerMassData)},
  { 125, -1, sizeof(::pulse::cdm::bind::ScalarForceData)},
  { 131, -1, sizeof(::pulse::cdm::bind::ScalarFrequencyData)},
  { 137, -1, sizeof(::pulse::cdm::bind::ScalarHeatCapacitanceData)},
  { 143, -1, sizeof(::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData)},
  { 149, -1, sizeof(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData)},
  { 155, -1, sizeof(::pulse::cdm::bind::ScalarHeatConductanceData)},
  { 161, -1, sizeof(::pulse::cdm::bind::ScalarHeatConductancePerAreaData)},
  { 167, -1, sizeof(::pulse::cdm::bind::ScalarHeatInductanceData)},
  { 173, -1, sizeof(::pulse::cdm::bind::ScalarHeatResistanceData)},
  { 179, -1, sizeof(::pulse::cdm::bind::ScalarHeatResistanceAreaData)},
  { 185, -1, sizeof(::pulse::cdm::bind::ScalarInversePressureData)},
  { 191, -1, sizeof(::pulse::cdm::bind::ScalarInverseVolumeData)},
  { 197, -1, sizeof(::pulse::cdm::bind::ScalarLengthData)},
  { 203, -1, sizeof(::pulse::cdm::bind::ScalarLengthPerTimeData)},
  { 209, -1, sizeof(::pulse::cdm::bind::ScalarLengthPerTimePressureData)},
  { 215, -1, sizeof(::pulse::cdm::bind::ScalarMassData)},
  { 221, -1, sizeof(::pulse::cdm::bind::ScalarMassPerAmountData)},
  { 227, -1, sizeof(::pulse::cdm::bind::ScalarMassPerAreaTimeData)},
  { 233, -1, sizeof(::pulse::cdm::bind::ScalarMassPerMassData)},
  { 239, -1, sizeof(::pulse::cdm::bind::ScalarMassPerTimeData)},
  { 245, -1, sizeof(::pulse::cdm::bind::ScalarMassPerVolumeData)},
  { 251, -1, sizeof(::pulse::cdm::bind::ScalarOsmolalityData)},
  { 257, -1, sizeof(::pulse::cdm::bind::ScalarOsmolarityData)},
  { 263, -1, sizeof(::pulse::cdm::bind::ScalarPowerData)},
  { 269, -1, sizeof(::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData)},
  { 275, -1, sizeof(::pulse::cdm::bind::ScalarPressureData)},
  { 281, -1, sizeof(::pulse::cdm::bind::ScalarPressurePerVolumeData)},
  { 287, -1, sizeof(::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData)},
  { 293, -1, sizeof(::pulse::cdm::bind::ScalarPressureTimePerAreaData)},
  { 299, -1, sizeof(::pulse::cdm::bind::ScalarPressureTimePerVolumeData)},
  { 305, -1, sizeof(::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData)},
  { 311, -1, sizeof(::pulse::cdm::bind::ScalarTimeData)},
  { 317, -1, sizeof(::pulse::cdm::bind::ScalarTemperatureData)},
  { 323, -1, sizeof(::pulse::cdm::bind::ScalarVolumeData)},
  { 329, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerTimeData)},
  { 335, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerPressureData)},
  { 341, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerTimeAreaData)},
  { 347, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerTimeMassData)},
  { 353, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerTimePressureData)},
  { 359, -1, sizeof(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData)},
  { 365, -1, sizeof(::pulse::cdm::bind::DoubleArrayData)},
  { 371, -1, sizeof(::pulse::cdm::bind::IntegerArrayData)},
  { 377, -1, sizeof(::pulse::cdm::bind::ArrayData)},
  { 384, -1, sizeof(::pulse::cdm::bind::ArrayTimeData)},
  { 390, -1, sizeof(::pulse::cdm::bind::FunctionData)},
  { 399, -1, sizeof(::pulse::cdm::bind::FunctionVolumeVsTimeData)},
  { 405, -1, sizeof(::pulse::cdm::bind::FunctionElectricPotentialVsTimeData)},
  { 411, -1, sizeof(::pulse::cdm::bind::HistogramData)},
  { 417, -1, sizeof(::pulse::cdm::bind::HistogramFractionVsLengthData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_RunningAverageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPropertyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_Scalar0To1Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAmountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAmountPerMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarAreaPerTimePressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricCapacitanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricChargeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricInductanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarElectricResistanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarEnergyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarEnergyPerAmountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarEnergyPerMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarForceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarFrequencyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatCapacitanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatCapacitancePerAmountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatConductanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatConductancePerAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatInductanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatResistanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarHeatResistanceAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarInversePressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarInverseVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarLengthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarLengthPerTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarLengthPerTimePressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassPerAreaTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassPerMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarOsmolalityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarOsmolarityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPowerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressureTimePerVolumeAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressureTimePerAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarPressureTimeSquaredPerVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarTemperatureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerPressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerTimeAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerTimeMassData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DoubleArrayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_IntegerArrayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ArrayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ArrayTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FunctionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FunctionVolumeVsTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FunctionElectricPotentialVsTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_HistogramData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_HistogramFractionVsLengthData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fProperties_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037pulse/cdm/bind/Properties.proto\022\016pulse"
  ".cdm.bind\"5\n\022RunningAverageData\022\013\n\003Sum\030\001"
  " \001(\001\022\022\n\nNumSamples\030\002 \001(\r\"\?\n\022ScalarProper"
  "tyData\022\014\n\004Name\030\001 \001(\t\022\r\n\005Value\030\002 \001(\001\022\014\n\004U"
  "nit\030\003 \001(\t\";\n\nScalarData\022\r\n\005Value\030\001 \001(\001\022\014"
  "\n\004Unit\030\002 \001(\t\022\020\n\010ReadOnly\030\003 \001(\010\"@\n\016Scalar"
  "0To1Data\022.\n\nScalar0To1\030\001 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\"P\n\026ScalarNegative1To1Da"
  "ta\0226\n\022ScalarNegative1To1\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"D\n\020ScalarAmountData\0220"
  "\n\014ScalarAmount\030\001 \001(\0132\032.pulse.cdm.bind.Sc"
  "alarData\"R\n\027ScalarAmountPerMassData\0227\n\023S"
  "calarAmountPerMass\030\001 \001(\0132\032.pulse.cdm.bin"
  "d.ScalarData\"R\n\027ScalarAmountPerTimeData\022"
  "7\n\023ScalarAmountPerTime\030\001 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\"V\n\031ScalarAmountPerVolum"
  "eData\0229\n\025ScalarAmountPerVolume\030\001 \001(\0132\032.p"
  "ulse.cdm.bind.ScalarData\"@\n\016ScalarAreaDa"
  "ta\022.\n\nScalarArea\030\001 \001(\0132\032.pulse.cdm.bind."
  "ScalarData\"^\n\035ScalarAreaPerTimePressureD"
  "ata\022=\n\031ScalarAreaPerTimePressure\030\001 \001(\0132\032"
  ".pulse.cdm.bind.ScalarData\"^\n\035ScalarElec"
  "tricCapacitanceData\022=\n\031ScalarElectricCap"
  "acitance\030\001 \001(\0132\032.pulse.cdm.bind.ScalarDa"
  "ta\"T\n\030ScalarElectricChargeData\0228\n\024Scalar"
  "ElectricCharge\030\001 \001(\0132\032.pulse.cdm.bind.Sc"
  "alarData\"V\n\031ScalarElectricCurrentData\0229\n"
  "\025ScalarElectricCurrent\030\001 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\"Z\n\033ScalarElectricPotent"
  "ialData\022;\n\027ScalarElectricPotential\030\001 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\"\\\n\034ScalarEl"
  "ectricInductanceData\022<\n\030ScalarElectricIn"
  "ductance\030\001 \001(\0132\032.pulse.cdm.bind.ScalarDa"
  "ta\"\\\n\034ScalarElectricResistanceData\022<\n\030Sc"
  "alarElectricResistance\030\001 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\"D\n\020ScalarEnergyData\0220\n\014"
  "ScalarEnergy\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"V\n\031ScalarEnergyPerAmountData\0229\n\025S"
  "calarEnergyPerAmount\030\001 \001(\0132\032.pulse.cdm.b"
  "ind.ScalarData\"R\n\027ScalarEnergyPerMassDat"
  "a\0227\n\023ScalarEnergyPerMass\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"B\n\017ScalarForceData\022/\n"
  "\013ScalarForce\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"J\n\023ScalarFrequencyData\0223\n\017ScalarF"
  "requency\030\001 \001(\0132\032.pulse.cdm.bind.ScalarDa"
  "ta\"V\n\031ScalarHeatCapacitanceData\0229\n\025Scala"
  "rHeatCapacitance\030\001 \001(\0132\032.pulse.cdm.bind."
  "ScalarData\"h\n\"ScalarHeatCapacitancePerAm"
  "ountData\022B\n\036ScalarHeatCapacitancePerAmou"
  "nt\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData\"d\n "
  "ScalarHeatCapacitancePerMassData\022@\n\034Scal"
  "arHeatCapacitancePerMass\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"V\n\031ScalarHeatConducta"
  "nceData\0229\n\025ScalarHeatConductance\030\001 \001(\0132\032"
  ".pulse.cdm.bind.ScalarData\"d\n ScalarHeat"
  "ConductancePerAreaData\022@\n\034ScalarHeatCond"
  "uctancePerArea\030\001 \001(\0132\032.pulse.cdm.bind.Sc"
  "alarData\"T\n\030ScalarHeatInductanceData\0228\n\024"
  "ScalarHeatInductance\030\001 \001(\0132\032.pulse.cdm.b"
  "ind.ScalarData\"T\n\030ScalarHeatResistanceDa"
  "ta\0228\n\024ScalarHeatResistance\030\001 \001(\0132\032.pulse"
  ".cdm.bind.ScalarData\"\\\n\034ScalarHeatResist"
  "anceAreaData\022<\n\030ScalarHeatResistanceArea"
  "\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData\"V\n\031Sc"
  "alarInversePressureData\0229\n\025ScalarInverse"
  "Pressure\030\001 \001(\0132\032.pulse.cdm.bind.ScalarDa"
  "ta\"R\n\027ScalarInverseVolumeData\0227\n\023ScalarI"
  "nverseVolume\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"D\n\020ScalarLengthData\0220\n\014ScalarLeng"
  "th\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData\"R\n\027"
  "ScalarLengthPerTimeData\0227\n\023ScalarLengthP"
  "erTime\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData"
  "\"b\n\037ScalarLengthPerTimePressureData\022\?\n\033S"
  "calarLengthPerTimePressure\030\001 \001(\0132\032.pulse"
  ".cdm.bind.ScalarData\"@\n\016ScalarMassData\022."
  "\n\nScalarMass\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"R\n\027ScalarMassPerAmountData\0227\n\023Sca"
  "larMassPerAmount\030\001 \001(\0132\032.pulse.cdm.bind."
  "ScalarData\"V\n\031ScalarMassPerAreaTimeData\022"
  "9\n\025ScalarMassPerAreaTime\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"N\n\025ScalarMassPerMassD"
  "ata\0225\n\021ScalarMassPerMass\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"N\n\025ScalarMassPerTimeD"
  "ata\0225\n\021ScalarMassPerTime\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"R\n\027ScalarMassPerVolum"
  "eData\0227\n\023ScalarMassPerVolume\030\001 \001(\0132\032.pul"
  "se.cdm.bind.ScalarData\"L\n\024ScalarOsmolali"
  "tyData\0224\n\020ScalarOsmolality\030\001 \001(\0132\032.pulse"
  ".cdm.bind.ScalarData\"L\n\024ScalarOsmolarity"
  "Data\0224\n\020ScalarOsmolarity\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"B\n\017ScalarPowerData\022/\n"
  "\013ScalarPower\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"|\n,ScalarPowerPerAreaTemperatureT"
  "oTheFourthData\022L\n(ScalarPowerPerAreaTemp"
  "eratureToTheFourth\030\001 \001(\0132\032.pulse.cdm.bin"
  "d.ScalarData\"H\n\022ScalarPressureData\0222\n\016Sc"
  "alarPressure\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"Z\n\033ScalarPressurePerVolumeData\022;\n"
  "\027ScalarPressurePerVolume\030\001 \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\"j\n#ScalarPressureTime"
  "PerVolumeAreaData\022C\n\037ScalarPressureTimeP"
  "erVolumeArea\030\001 \001(\0132\032.pulse.cdm.bind.Scal"
  "arData\"^\n\035ScalarPressureTimePerAreaData\022"
  "=\n\031ScalarPressureTimePerArea\030\001 \001(\0132\032.pul"
  "se.cdm.bind.ScalarData\"b\n\037ScalarPressure"
  "TimePerVolumeData\022\?\n\033ScalarPressureTimeP"
  "erVolume\030\001 \001(\0132\032.pulse.cdm.bind.ScalarDa"
  "ta\"p\n&ScalarPressureTimeSquaredPerVolume"
  "Data\022F\n\"ScalarPressureTimeSquaredPerVolu"
  "me\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData\"@\n\016"
  "ScalarTimeData\022.\n\nScalarTime\030\001 \001(\0132\032.pul"
  "se.cdm.bind.ScalarData\"N\n\025ScalarTemperat"
  "ureData\0225\n\021ScalarTemperature\030\001 \001(\0132\032.pul"
  "se.cdm.bind.ScalarData\"D\n\020ScalarVolumeDa"
  "ta\0220\n\014ScalarVolume\030\001 \001(\0132\032.pulse.cdm.bin"
  "d.ScalarData\"R\n\027ScalarVolumePerTimeData\022"
  "7\n\023ScalarVolumePerTime\030\001 \001(\0132\032.pulse.cdm"
  ".bind.ScalarData\"Z\n\033ScalarVolumePerPress"
  "ureData\022;\n\027ScalarVolumePerPressure\030\001 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\"Z\n\033ScalarVo"
  "lumePerTimeAreaData\022;\n\027ScalarVolumePerTi"
  "meArea\030\001 \001(\0132\032.pulse.cdm.bind.ScalarData"
  "\"Z\n\033ScalarVolumePerTimeMassData\022;\n\027Scala"
  "rVolumePerTimeMass\030\001 \001(\0132\032.pulse.cdm.bin"
  "d.ScalarData\"b\n\037ScalarVolumePerTimePress"
  "ureData\022\?\n\033ScalarVolumePerTimePressure\030\001"
  " \001(\0132\032.pulse.cdm.bind.ScalarData\"j\n#Scal"
  "arVolumePerTimePressureAreaData\022C\n\037Scala"
  "rVolumePerTimePressureArea\030\001 \001(\0132\032.pulse"
  ".cdm.bind.ScalarData\"$\n\017DoubleArrayData\022"
  "\021\n\005Value\030\001 \003(\001B\002\020\001\"%\n\020IntegerArrayData\022\021"
  "\n\005Value\030\001 \003(\005B\002\020\001\"I\n\tArrayData\022.\n\005Value\030"
  "\001 \001(\0132\037.pulse.cdm.bind.DoubleArrayData\022\014"
  "\n\004Unit\030\002 \001(\t\"=\n\rArrayTimeData\022,\n\tArrayTi"
  "me\030\001 \001(\0132\031.pulse.cdm.bind.ArrayData\"\250\001\n\014"
  "FunctionData\0222\n\tDependent\030\001 \001(\0132\037.pulse."
  "cdm.bind.DoubleArrayData\0224\n\013Independent\030"
  "\002 \001(\0132\037.pulse.cdm.bind.DoubleArrayData\022\025"
  "\n\rDependentUnit\030\003 \001(\t\022\027\n\017IndependentUnit"
  "\030\004 \001(\t\"V\n\030FunctionVolumeVsTimeData\022:\n\024Fu"
  "nctionVolumeVsTime\030\001 \001(\0132\034.pulse.cdm.bin"
  "d.FunctionData\"l\n#FunctionElectricPotent"
  "ialVsTimeData\022E\n\037FunctionElectricPotenti"
  "alVsTime\030\001 \001(\0132\034.pulse.cdm.bind.Function"
  "Data\"@\n\rHistogramData\022/\n\tHistogram\030\001 \001(\013"
  "2\034.pulse.cdm.bind.FunctionData\"a\n\035Histog"
  "ramFractionVsLengthData\022@\n\031HistogramFrac"
  "tionVsLength\030\001 \001(\0132\035.pulse.cdm.bind.Hist"
  "ogramDataB/\n\032com.kitware.pulse.cdm.bindH"
  "\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_sccs[69] = {
  &scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_IntegerArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
  &scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fProperties_2eproto, "pulse/cdm/bind/Properties.proto", 5986,
  &descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto_deps, 69, 0,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fProperties_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fProperties_2eproto, 69, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fProperties_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fProperties_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fProperties_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class RunningAverageData::_Internal {
 public:
};

RunningAverageData::RunningAverageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.RunningAverageData)
}
RunningAverageData::RunningAverageData(const RunningAverageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sum_, &from.sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&numsamples_) -
    reinterpret_cast<char*>(&sum_)) + sizeof(numsamples_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.RunningAverageData)
}

void RunningAverageData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&numsamples_) -
      reinterpret_cast<char*>(&sum_)) + sizeof(numsamples_));
}

RunningAverageData::~RunningAverageData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.RunningAverageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RunningAverageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RunningAverageData::ArenaDtor(void* object) {
  RunningAverageData* _this = reinterpret_cast< RunningAverageData* >(object);
  (void)_this;
}
void RunningAverageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunningAverageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunningAverageData& RunningAverageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunningAverageData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void RunningAverageData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.RunningAverageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numsamples_) -
      reinterpret_cast<char*>(&sum_)) + sizeof(numsamples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunningAverageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Sum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 NumSamples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numsamples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunningAverageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.RunningAverageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Sum = 1;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sum(), target);
  }

  // uint32 NumSamples = 2;
  if (this->numsamples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numsamples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.RunningAverageData)
  return target;
}

size_t RunningAverageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.RunningAverageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Sum = 1;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 NumSamples = 2;
  if (this->numsamples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numsamples());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunningAverageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.RunningAverageData)
  GOOGLE_DCHECK_NE(&from, this);
  const RunningAverageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunningAverageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.RunningAverageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.RunningAverageData)
    MergeFrom(*source);
  }
}

void RunningAverageData::MergeFrom(const RunningAverageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.RunningAverageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.numsamples() != 0) {
    _internal_set_numsamples(from._internal_numsamples());
  }
}

void RunningAverageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.RunningAverageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunningAverageData::CopyFrom(const RunningAverageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.RunningAverageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningAverageData::IsInitialized() const {
  return true;
}

void RunningAverageData::InternalSwap(RunningAverageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunningAverageData, numsamples_)
      + sizeof(RunningAverageData::numsamples_)
      - PROTOBUF_FIELD_OFFSET(RunningAverageData, sum_)>(
          reinterpret_cast<char*>(&sum_),
          reinterpret_cast<char*>(&other->sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunningAverageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPropertyData::_Internal {
 public:
};

ScalarPropertyData::ScalarPropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPropertyData)
}
ScalarPropertyData::ScalarPropertyData(const ScalarPropertyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPropertyData)
}

void ScalarPropertyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

ScalarPropertyData::~ScalarPropertyData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPropertyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPropertyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScalarPropertyData::ArenaDtor(void* object) {
  ScalarPropertyData* _this = reinterpret_cast< ScalarPropertyData* >(object);
  (void)_this;
}
void ScalarPropertyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPropertyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPropertyData& ScalarPropertyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPropertyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPropertyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  unit_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPropertyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScalarPropertyData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string Unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScalarPropertyData.Unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPropertyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPropertyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScalarPropertyData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double Value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // string Unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScalarPropertyData.Unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPropertyData)
  return target;
}

size_t ScalarPropertyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPropertyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // double Value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPropertyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPropertyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPropertyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPropertyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPropertyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPropertyData)
    MergeFrom(*source);
  }
}

void ScalarPropertyData::MergeFrom(const ScalarPropertyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPropertyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void ScalarPropertyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPropertyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPropertyData::CopyFrom(const ScalarPropertyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPropertyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPropertyData::IsInitialized() const {
  return true;
}

void ScalarPropertyData::InternalSwap(ScalarPropertyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPropertyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarData::_Internal {
 public:
};

ScalarData::ScalarData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarData)
}
ScalarData::ScalarData(const ScalarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
    reinterpret_cast<char*>(&value_)) + sizeof(readonly_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarData)
}

void ScalarData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&readonly_) -
      reinterpret_cast<char*>(&value_)) + sizeof(readonly_));
}

ScalarData::~ScalarData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScalarData::ArenaDtor(void* object) {
  ScalarData* _this = reinterpret_cast< ScalarData* >(object);
  (void)_this;
}
void ScalarData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarData& ScalarData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readonly_) -
      reinterpret_cast<char*>(&value_)) + sizeof(readonly_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string Unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScalarData.Unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ReadOnly = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          readonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // string Unit = 2;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScalarData.Unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit(), target);
  }

  // bool ReadOnly = 3;
  if (this->readonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_readonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarData)
  return target;
}

size_t ScalarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Unit = 2;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // double Value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // bool ReadOnly = 3;
  if (this->readonly() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarData)
    MergeFrom(*source);
  }
}

void ScalarData::MergeFrom(const ScalarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from.readonly() != 0) {
    _internal_set_readonly(from._internal_readonly());
  }
}

void ScalarData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarData::CopyFrom(const ScalarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarData::IsInitialized() const {
  return true;
}

void ScalarData::InternalSwap(ScalarData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarData, readonly_)
      + sizeof(ScalarData::readonly_)
      - PROTOBUF_FIELD_OFFSET(ScalarData, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Scalar0To1Data::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalar0to1(const Scalar0To1Data* msg);
};

const ::pulse::cdm::bind::ScalarData&
Scalar0To1Data::_Internal::scalar0to1(const Scalar0To1Data* msg) {
  return *msg->scalar0to1_;
}
Scalar0To1Data::Scalar0To1Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.Scalar0To1Data)
}
Scalar0To1Data::Scalar0To1Data(const Scalar0To1Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalar0to1()) {
    scalar0to1_ = new ::pulse::cdm::bind::ScalarData(*from.scalar0to1_);
  } else {
    scalar0to1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.Scalar0To1Data)
}

void Scalar0To1Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalar0to1_ = nullptr;
}

Scalar0To1Data::~Scalar0To1Data() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.Scalar0To1Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Scalar0To1Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalar0to1_;
}

void Scalar0To1Data::ArenaDtor(void* object) {
  Scalar0To1Data* _this = reinterpret_cast< Scalar0To1Data* >(object);
  (void)_this;
}
void Scalar0To1Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar0To1Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scalar0To1Data& Scalar0To1Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void Scalar0To1Data::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.Scalar0To1Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalar0to1_ != nullptr) {
    delete scalar0to1_;
  }
  scalar0to1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scalar0To1Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData Scalar0To1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar0to1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scalar0To1Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.Scalar0To1Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData Scalar0To1 = 1;
  if (this->has_scalar0to1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalar0to1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.Scalar0To1Data)
  return target;
}

size_t Scalar0To1Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.Scalar0To1Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData Scalar0To1 = 1;
  if (this->has_scalar0to1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalar0to1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scalar0To1Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.Scalar0To1Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar0To1Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scalar0To1Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.Scalar0To1Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.Scalar0To1Data)
    MergeFrom(*source);
  }
}

void Scalar0To1Data::MergeFrom(const Scalar0To1Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.Scalar0To1Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalar0to1()) {
    _internal_mutable_scalar0to1()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalar0to1());
  }
}

void Scalar0To1Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.Scalar0To1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar0To1Data::CopyFrom(const Scalar0To1Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.Scalar0To1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar0To1Data::IsInitialized() const {
  return true;
}

void Scalar0To1Data::InternalSwap(Scalar0To1Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalar0to1_, other->scalar0to1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar0To1Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarNegative1To1Data::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarnegative1to1(const ScalarNegative1To1Data* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarNegative1To1Data::_Internal::scalarnegative1to1(const ScalarNegative1To1Data* msg) {
  return *msg->scalarnegative1to1_;
}
ScalarNegative1To1Data::ScalarNegative1To1Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarNegative1To1Data)
}
ScalarNegative1To1Data::ScalarNegative1To1Data(const ScalarNegative1To1Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarnegative1to1()) {
    scalarnegative1to1_ = new ::pulse::cdm::bind::ScalarData(*from.scalarnegative1to1_);
  } else {
    scalarnegative1to1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarNegative1To1Data)
}

void ScalarNegative1To1Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarnegative1to1_ = nullptr;
}

ScalarNegative1To1Data::~ScalarNegative1To1Data() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarNegative1To1Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarNegative1To1Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarnegative1to1_;
}

void ScalarNegative1To1Data::ArenaDtor(void* object) {
  ScalarNegative1To1Data* _this = reinterpret_cast< ScalarNegative1To1Data* >(object);
  (void)_this;
}
void ScalarNegative1To1Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarNegative1To1Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarNegative1To1Data& ScalarNegative1To1Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarNegative1To1Data::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarNegative1To1Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarnegative1to1_ != nullptr) {
    delete scalarnegative1to1_;
  }
  scalarnegative1to1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarNegative1To1Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarNegative1To1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarnegative1to1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarNegative1To1Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarNegative1To1Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarNegative1To1 = 1;
  if (this->has_scalarnegative1to1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarnegative1to1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarNegative1To1Data)
  return target;
}

size_t ScalarNegative1To1Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarNegative1To1Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarNegative1To1 = 1;
  if (this->has_scalarnegative1to1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarnegative1to1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarNegative1To1Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarNegative1To1Data)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarNegative1To1Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarNegative1To1Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarNegative1To1Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarNegative1To1Data)
    MergeFrom(*source);
  }
}

void ScalarNegative1To1Data::MergeFrom(const ScalarNegative1To1Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarNegative1To1Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarnegative1to1()) {
    _internal_mutable_scalarnegative1to1()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarnegative1to1());
  }
}

void ScalarNegative1To1Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarNegative1To1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarNegative1To1Data::CopyFrom(const ScalarNegative1To1Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarNegative1To1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarNegative1To1Data::IsInitialized() const {
  return true;
}

void ScalarNegative1To1Data::InternalSwap(ScalarNegative1To1Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarnegative1to1_, other->scalarnegative1to1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarNegative1To1Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAmountData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalaramount(const ScalarAmountData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAmountData::_Internal::scalaramount(const ScalarAmountData* msg) {
  return *msg->scalaramount_;
}
ScalarAmountData::ScalarAmountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAmountData)
}
ScalarAmountData::ScalarAmountData(const ScalarAmountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalaramount()) {
    scalaramount_ = new ::pulse::cdm::bind::ScalarData(*from.scalaramount_);
  } else {
    scalaramount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAmountData)
}

void ScalarAmountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalaramount_ = nullptr;
}

ScalarAmountData::~ScalarAmountData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAmountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAmountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalaramount_;
}

void ScalarAmountData::ArenaDtor(void* object) {
  ScalarAmountData* _this = reinterpret_cast< ScalarAmountData* >(object);
  (void)_this;
}
void ScalarAmountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAmountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAmountData& ScalarAmountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAmountData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalaramount_ != nullptr) {
    delete scalaramount_;
  }
  scalaramount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAmountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalaramount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAmountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmount = 1;
  if (this->has_scalaramount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalaramount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAmountData)
  return target;
}

size_t ScalarAmountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAmountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmount = 1;
  if (this->has_scalaramount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalaramount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAmountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAmountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAmountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAmountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAmountData)
    MergeFrom(*source);
  }
}

void ScalarAmountData::MergeFrom(const ScalarAmountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalaramount()) {
    _internal_mutable_scalaramount()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalaramount());
  }
}

void ScalarAmountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAmountData::CopyFrom(const ScalarAmountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAmountData::IsInitialized() const {
  return true;
}

void ScalarAmountData::InternalSwap(ScalarAmountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalaramount_, other->scalaramount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAmountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAmountPerMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalaramountpermass(const ScalarAmountPerMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAmountPerMassData::_Internal::scalaramountpermass(const ScalarAmountPerMassData* msg) {
  return *msg->scalaramountpermass_;
}
ScalarAmountPerMassData::ScalarAmountPerMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAmountPerMassData)
}
ScalarAmountPerMassData::ScalarAmountPerMassData(const ScalarAmountPerMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalaramountpermass()) {
    scalaramountpermass_ = new ::pulse::cdm::bind::ScalarData(*from.scalaramountpermass_);
  } else {
    scalaramountpermass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAmountPerMassData)
}

void ScalarAmountPerMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalaramountpermass_ = nullptr;
}

ScalarAmountPerMassData::~ScalarAmountPerMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAmountPerMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAmountPerMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalaramountpermass_;
}

void ScalarAmountPerMassData::ArenaDtor(void* object) {
  ScalarAmountPerMassData* _this = reinterpret_cast< ScalarAmountPerMassData* >(object);
  (void)_this;
}
void ScalarAmountPerMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAmountPerMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAmountPerMassData& ScalarAmountPerMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAmountPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAmountPerMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAmountPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalaramountpermass_ != nullptr) {
    delete scalaramountpermass_;
  }
  scalaramountpermass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAmountPerMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarAmountPerMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalaramountpermass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAmountPerMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAmountPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerMass = 1;
  if (this->has_scalaramountpermass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalaramountpermass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAmountPerMassData)
  return target;
}

size_t ScalarAmountPerMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAmountPerMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerMass = 1;
  if (this->has_scalaramountpermass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalaramountpermass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAmountPerMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAmountPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAmountPerMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAmountPerMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAmountPerMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAmountPerMassData)
    MergeFrom(*source);
  }
}

void ScalarAmountPerMassData::MergeFrom(const ScalarAmountPerMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAmountPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalaramountpermass()) {
    _internal_mutable_scalaramountpermass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalaramountpermass());
  }
}

void ScalarAmountPerMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAmountPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAmountPerMassData::CopyFrom(const ScalarAmountPerMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAmountPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAmountPerMassData::IsInitialized() const {
  return true;
}

void ScalarAmountPerMassData::InternalSwap(ScalarAmountPerMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalaramountpermass_, other->scalaramountpermass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAmountPerMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAmountPerTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalaramountpertime(const ScalarAmountPerTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAmountPerTimeData::_Internal::scalaramountpertime(const ScalarAmountPerTimeData* msg) {
  return *msg->scalaramountpertime_;
}
ScalarAmountPerTimeData::ScalarAmountPerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAmountPerTimeData)
}
ScalarAmountPerTimeData::ScalarAmountPerTimeData(const ScalarAmountPerTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalaramountpertime()) {
    scalaramountpertime_ = new ::pulse::cdm::bind::ScalarData(*from.scalaramountpertime_);
  } else {
    scalaramountpertime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAmountPerTimeData)
}

void ScalarAmountPerTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalaramountpertime_ = nullptr;
}

ScalarAmountPerTimeData::~ScalarAmountPerTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAmountPerTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAmountPerTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalaramountpertime_;
}

void ScalarAmountPerTimeData::ArenaDtor(void* object) {
  ScalarAmountPerTimeData* _this = reinterpret_cast< ScalarAmountPerTimeData* >(object);
  (void)_this;
}
void ScalarAmountPerTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAmountPerTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAmountPerTimeData& ScalarAmountPerTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAmountPerTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalaramountpertime_ != nullptr) {
    delete scalaramountpertime_;
  }
  scalaramountpertime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAmountPerTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarAmountPerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalaramountpertime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAmountPerTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerTime = 1;
  if (this->has_scalaramountpertime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalaramountpertime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAmountPerTimeData)
  return target;
}

size_t ScalarAmountPerTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerTime = 1;
  if (this->has_scalaramountpertime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalaramountpertime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAmountPerTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAmountPerTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAmountPerTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAmountPerTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAmountPerTimeData)
    MergeFrom(*source);
  }
}

void ScalarAmountPerTimeData::MergeFrom(const ScalarAmountPerTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalaramountpertime()) {
    _internal_mutable_scalaramountpertime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalaramountpertime());
  }
}

void ScalarAmountPerTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAmountPerTimeData::CopyFrom(const ScalarAmountPerTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAmountPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAmountPerTimeData::IsInitialized() const {
  return true;
}

void ScalarAmountPerTimeData::InternalSwap(ScalarAmountPerTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalaramountpertime_, other->scalaramountpertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAmountPerTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAmountPerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalaramountpervolume(const ScalarAmountPerVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAmountPerVolumeData::_Internal::scalaramountpervolume(const ScalarAmountPerVolumeData* msg) {
  return *msg->scalaramountpervolume_;
}
ScalarAmountPerVolumeData::ScalarAmountPerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAmountPerVolumeData)
}
ScalarAmountPerVolumeData::ScalarAmountPerVolumeData(const ScalarAmountPerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalaramountpervolume()) {
    scalaramountpervolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalaramountpervolume_);
  } else {
    scalaramountpervolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAmountPerVolumeData)
}

void ScalarAmountPerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalaramountpervolume_ = nullptr;
}

ScalarAmountPerVolumeData::~ScalarAmountPerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAmountPerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAmountPerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalaramountpervolume_;
}

void ScalarAmountPerVolumeData::ArenaDtor(void* object) {
  ScalarAmountPerVolumeData* _this = reinterpret_cast< ScalarAmountPerVolumeData* >(object);
  (void)_this;
}
void ScalarAmountPerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAmountPerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAmountPerVolumeData& ScalarAmountPerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAmountPerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalaramountpervolume_ != nullptr) {
    delete scalaramountpervolume_;
  }
  scalaramountpervolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAmountPerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarAmountPerVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalaramountpervolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAmountPerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerVolume = 1;
  if (this->has_scalaramountpervolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalaramountpervolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAmountPerVolumeData)
  return target;
}

size_t ScalarAmountPerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAmountPerVolume = 1;
  if (this->has_scalaramountpervolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalaramountpervolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAmountPerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAmountPerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAmountPerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAmountPerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAmountPerVolumeData)
    MergeFrom(*source);
  }
}

void ScalarAmountPerVolumeData::MergeFrom(const ScalarAmountPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalaramountpervolume()) {
    _internal_mutable_scalaramountpervolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalaramountpervolume());
  }
}

void ScalarAmountPerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAmountPerVolumeData::CopyFrom(const ScalarAmountPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAmountPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAmountPerVolumeData::IsInitialized() const {
  return true;
}

void ScalarAmountPerVolumeData::InternalSwap(ScalarAmountPerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalaramountpervolume_, other->scalaramountpervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAmountPerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalararea(const ScalarAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAreaData::_Internal::scalararea(const ScalarAreaData* msg) {
  return *msg->scalararea_;
}
ScalarAreaData::ScalarAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAreaData)
}
ScalarAreaData::ScalarAreaData(const ScalarAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalararea()) {
    scalararea_ = new ::pulse::cdm::bind::ScalarData(*from.scalararea_);
  } else {
    scalararea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAreaData)
}

void ScalarAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalararea_ = nullptr;
}

ScalarAreaData::~ScalarAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalararea_;
}

void ScalarAreaData::ArenaDtor(void* object) {
  ScalarAreaData* _this = reinterpret_cast< ScalarAreaData* >(object);
  (void)_this;
}
void ScalarAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAreaData& ScalarAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalararea_ != nullptr) {
    delete scalararea_;
  }
  scalararea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalararea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarArea = 1;
  if (this->has_scalararea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalararea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAreaData)
  return target;
}

size_t ScalarAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarArea = 1;
  if (this->has_scalararea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalararea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAreaData)
    MergeFrom(*source);
  }
}

void ScalarAreaData::MergeFrom(const ScalarAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalararea()) {
    _internal_mutable_scalararea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalararea());
  }
}

void ScalarAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAreaData::CopyFrom(const ScalarAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAreaData::IsInitialized() const {
  return true;
}

void ScalarAreaData::InternalSwap(ScalarAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalararea_, other->scalararea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarAreaPerTimePressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarareapertimepressure(const ScalarAreaPerTimePressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarAreaPerTimePressureData::_Internal::scalarareapertimepressure(const ScalarAreaPerTimePressureData* msg) {
  return *msg->scalarareapertimepressure_;
}
ScalarAreaPerTimePressureData::ScalarAreaPerTimePressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarAreaPerTimePressureData)
}
ScalarAreaPerTimePressureData::ScalarAreaPerTimePressureData(const ScalarAreaPerTimePressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarareapertimepressure()) {
    scalarareapertimepressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarareapertimepressure_);
  } else {
    scalarareapertimepressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarAreaPerTimePressureData)
}

void ScalarAreaPerTimePressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarareapertimepressure_ = nullptr;
}

ScalarAreaPerTimePressureData::~ScalarAreaPerTimePressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarAreaPerTimePressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarareapertimepressure_;
}

void ScalarAreaPerTimePressureData::ArenaDtor(void* object) {
  ScalarAreaPerTimePressureData* _this = reinterpret_cast< ScalarAreaPerTimePressureData* >(object);
  (void)_this;
}
void ScalarAreaPerTimePressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarAreaPerTimePressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarAreaPerTimePressureData& ScalarAreaPerTimePressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarAreaPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarAreaPerTimePressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarareapertimepressure_ != nullptr) {
    delete scalarareapertimepressure_;
  }
  scalarareapertimepressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarAreaPerTimePressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarAreaPerTimePressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarareapertimepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarAreaPerTimePressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAreaPerTimePressure = 1;
  if (this->has_scalarareapertimepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarareapertimepressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  return target;
}

size_t ScalarAreaPerTimePressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarAreaPerTimePressure = 1;
  if (this->has_scalarareapertimepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarareapertimepressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarAreaPerTimePressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarAreaPerTimePressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarAreaPerTimePressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarAreaPerTimePressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarAreaPerTimePressureData)
    MergeFrom(*source);
  }
}

void ScalarAreaPerTimePressureData::MergeFrom(const ScalarAreaPerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarareapertimepressure()) {
    _internal_mutable_scalarareapertimepressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarareapertimepressure());
  }
}

void ScalarAreaPerTimePressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarAreaPerTimePressureData::CopyFrom(const ScalarAreaPerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarAreaPerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarAreaPerTimePressureData::IsInitialized() const {
  return true;
}

void ScalarAreaPerTimePressureData::InternalSwap(ScalarAreaPerTimePressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarareapertimepressure_, other->scalarareapertimepressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarAreaPerTimePressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricCapacitanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectriccapacitance(const ScalarElectricCapacitanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricCapacitanceData::_Internal::scalarelectriccapacitance(const ScalarElectricCapacitanceData* msg) {
  return *msg->scalarelectriccapacitance_;
}
ScalarElectricCapacitanceData::ScalarElectricCapacitanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricCapacitanceData)
}
ScalarElectricCapacitanceData::ScalarElectricCapacitanceData(const ScalarElectricCapacitanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectriccapacitance()) {
    scalarelectriccapacitance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectriccapacitance_);
  } else {
    scalarelectriccapacitance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricCapacitanceData)
}

void ScalarElectricCapacitanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectriccapacitance_ = nullptr;
}

ScalarElectricCapacitanceData::~ScalarElectricCapacitanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricCapacitanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricCapacitanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectriccapacitance_;
}

void ScalarElectricCapacitanceData::ArenaDtor(void* object) {
  ScalarElectricCapacitanceData* _this = reinterpret_cast< ScalarElectricCapacitanceData* >(object);
  (void)_this;
}
void ScalarElectricCapacitanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricCapacitanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricCapacitanceData& ScalarElectricCapacitanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricCapacitanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectriccapacitance_ != nullptr) {
    delete scalarelectriccapacitance_;
  }
  scalarelectriccapacitance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricCapacitanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricCapacitance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectriccapacitance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricCapacitanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCapacitance = 1;
  if (this->has_scalarelectriccapacitance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectriccapacitance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricCapacitanceData)
  return target;
}

size_t ScalarElectricCapacitanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCapacitance = 1;
  if (this->has_scalarelectriccapacitance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectriccapacitance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricCapacitanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricCapacitanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricCapacitanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricCapacitanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricCapacitanceData)
    MergeFrom(*source);
  }
}

void ScalarElectricCapacitanceData::MergeFrom(const ScalarElectricCapacitanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectriccapacitance()) {
    _internal_mutable_scalarelectriccapacitance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectriccapacitance());
  }
}

void ScalarElectricCapacitanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricCapacitanceData::CopyFrom(const ScalarElectricCapacitanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricCapacitanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricCapacitanceData::IsInitialized() const {
  return true;
}

void ScalarElectricCapacitanceData::InternalSwap(ScalarElectricCapacitanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectriccapacitance_, other->scalarelectriccapacitance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricCapacitanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricChargeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectriccharge(const ScalarElectricChargeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricChargeData::_Internal::scalarelectriccharge(const ScalarElectricChargeData* msg) {
  return *msg->scalarelectriccharge_;
}
ScalarElectricChargeData::ScalarElectricChargeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricChargeData)
}
ScalarElectricChargeData::ScalarElectricChargeData(const ScalarElectricChargeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectriccharge()) {
    scalarelectriccharge_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectriccharge_);
  } else {
    scalarelectriccharge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricChargeData)
}

void ScalarElectricChargeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectriccharge_ = nullptr;
}

ScalarElectricChargeData::~ScalarElectricChargeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricChargeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricChargeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectriccharge_;
}

void ScalarElectricChargeData::ArenaDtor(void* object) {
  ScalarElectricChargeData* _this = reinterpret_cast< ScalarElectricChargeData* >(object);
  (void)_this;
}
void ScalarElectricChargeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricChargeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricChargeData& ScalarElectricChargeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricChargeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricChargeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectriccharge_ != nullptr) {
    delete scalarelectriccharge_;
  }
  scalarelectriccharge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricChargeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricCharge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectriccharge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricChargeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricChargeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCharge = 1;
  if (this->has_scalarelectriccharge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectriccharge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricChargeData)
  return target;
}

size_t ScalarElectricChargeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricChargeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCharge = 1;
  if (this->has_scalarelectriccharge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectriccharge_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricChargeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricChargeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricChargeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricChargeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricChargeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricChargeData)
    MergeFrom(*source);
  }
}

void ScalarElectricChargeData::MergeFrom(const ScalarElectricChargeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricChargeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectriccharge()) {
    _internal_mutable_scalarelectriccharge()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectriccharge());
  }
}

void ScalarElectricChargeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricChargeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricChargeData::CopyFrom(const ScalarElectricChargeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricChargeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricChargeData::IsInitialized() const {
  return true;
}

void ScalarElectricChargeData::InternalSwap(ScalarElectricChargeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectriccharge_, other->scalarelectriccharge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricChargeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricCurrentData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectriccurrent(const ScalarElectricCurrentData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricCurrentData::_Internal::scalarelectriccurrent(const ScalarElectricCurrentData* msg) {
  return *msg->scalarelectriccurrent_;
}
ScalarElectricCurrentData::ScalarElectricCurrentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricCurrentData)
}
ScalarElectricCurrentData::ScalarElectricCurrentData(const ScalarElectricCurrentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectriccurrent()) {
    scalarelectriccurrent_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectriccurrent_);
  } else {
    scalarelectriccurrent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricCurrentData)
}

void ScalarElectricCurrentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectriccurrent_ = nullptr;
}

ScalarElectricCurrentData::~ScalarElectricCurrentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricCurrentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricCurrentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectriccurrent_;
}

void ScalarElectricCurrentData::ArenaDtor(void* object) {
  ScalarElectricCurrentData* _this = reinterpret_cast< ScalarElectricCurrentData* >(object);
  (void)_this;
}
void ScalarElectricCurrentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricCurrentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricCurrentData& ScalarElectricCurrentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricCurrentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricCurrentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectriccurrent_ != nullptr) {
    delete scalarelectriccurrent_;
  }
  scalarelectriccurrent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricCurrentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricCurrent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectriccurrent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricCurrentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricCurrentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCurrent = 1;
  if (this->has_scalarelectriccurrent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectriccurrent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricCurrentData)
  return target;
}

size_t ScalarElectricCurrentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricCurrentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricCurrent = 1;
  if (this->has_scalarelectriccurrent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectriccurrent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricCurrentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricCurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricCurrentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricCurrentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricCurrentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricCurrentData)
    MergeFrom(*source);
  }
}

void ScalarElectricCurrentData::MergeFrom(const ScalarElectricCurrentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricCurrentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectriccurrent()) {
    _internal_mutable_scalarelectriccurrent()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectriccurrent());
  }
}

void ScalarElectricCurrentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricCurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricCurrentData::CopyFrom(const ScalarElectricCurrentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricCurrentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricCurrentData::IsInitialized() const {
  return true;
}

void ScalarElectricCurrentData::InternalSwap(ScalarElectricCurrentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectriccurrent_, other->scalarelectriccurrent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricCurrentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricPotentialData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectricpotential(const ScalarElectricPotentialData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricPotentialData::_Internal::scalarelectricpotential(const ScalarElectricPotentialData* msg) {
  return *msg->scalarelectricpotential_;
}
ScalarElectricPotentialData::ScalarElectricPotentialData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricPotentialData)
}
ScalarElectricPotentialData::ScalarElectricPotentialData(const ScalarElectricPotentialData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectricpotential()) {
    scalarelectricpotential_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectricpotential_);
  } else {
    scalarelectricpotential_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricPotentialData)
}

void ScalarElectricPotentialData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectricpotential_ = nullptr;
}

ScalarElectricPotentialData::~ScalarElectricPotentialData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricPotentialData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricPotentialData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectricpotential_;
}

void ScalarElectricPotentialData::ArenaDtor(void* object) {
  ScalarElectricPotentialData* _this = reinterpret_cast< ScalarElectricPotentialData* >(object);
  (void)_this;
}
void ScalarElectricPotentialData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricPotentialData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricPotentialData& ScalarElectricPotentialData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricPotentialData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricPotentialData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectricpotential_ != nullptr) {
    delete scalarelectricpotential_;
  }
  scalarelectricpotential_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricPotentialData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricPotential = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricPotentialData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricPotentialData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricPotential = 1;
  if (this->has_scalarelectricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectricpotential(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricPotentialData)
  return target;
}

size_t ScalarElectricPotentialData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricPotentialData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricPotential = 1;
  if (this->has_scalarelectricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectricpotential_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricPotentialData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricPotentialData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricPotentialData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricPotentialData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricPotentialData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricPotentialData)
    MergeFrom(*source);
  }
}

void ScalarElectricPotentialData::MergeFrom(const ScalarElectricPotentialData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricPotentialData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectricpotential()) {
    _internal_mutable_scalarelectricpotential()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectricpotential());
  }
}

void ScalarElectricPotentialData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricPotentialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricPotentialData::CopyFrom(const ScalarElectricPotentialData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricPotentialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricPotentialData::IsInitialized() const {
  return true;
}

void ScalarElectricPotentialData::InternalSwap(ScalarElectricPotentialData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectricpotential_, other->scalarelectricpotential_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricPotentialData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricInductanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectricinductance(const ScalarElectricInductanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricInductanceData::_Internal::scalarelectricinductance(const ScalarElectricInductanceData* msg) {
  return *msg->scalarelectricinductance_;
}
ScalarElectricInductanceData::ScalarElectricInductanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricInductanceData)
}
ScalarElectricInductanceData::ScalarElectricInductanceData(const ScalarElectricInductanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectricinductance()) {
    scalarelectricinductance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectricinductance_);
  } else {
    scalarelectricinductance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricInductanceData)
}

void ScalarElectricInductanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectricinductance_ = nullptr;
}

ScalarElectricInductanceData::~ScalarElectricInductanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricInductanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricInductanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectricinductance_;
}

void ScalarElectricInductanceData::ArenaDtor(void* object) {
  ScalarElectricInductanceData* _this = reinterpret_cast< ScalarElectricInductanceData* >(object);
  (void)_this;
}
void ScalarElectricInductanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricInductanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricInductanceData& ScalarElectricInductanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricInductanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricInductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectricinductance_ != nullptr) {
    delete scalarelectricinductance_;
  }
  scalarelectricinductance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricInductanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricInductance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectricinductance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricInductanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricInductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricInductance = 1;
  if (this->has_scalarelectricinductance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectricinductance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricInductanceData)
  return target;
}

size_t ScalarElectricInductanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricInductanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricInductance = 1;
  if (this->has_scalarelectricinductance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectricinductance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricInductanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricInductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricInductanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricInductanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricInductanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricInductanceData)
    MergeFrom(*source);
  }
}

void ScalarElectricInductanceData::MergeFrom(const ScalarElectricInductanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricInductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectricinductance()) {
    _internal_mutable_scalarelectricinductance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectricinductance());
  }
}

void ScalarElectricInductanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricInductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricInductanceData::CopyFrom(const ScalarElectricInductanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricInductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricInductanceData::IsInitialized() const {
  return true;
}

void ScalarElectricInductanceData::InternalSwap(ScalarElectricInductanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectricinductance_, other->scalarelectricinductance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricInductanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarElectricResistanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarelectricresistance(const ScalarElectricResistanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarElectricResistanceData::_Internal::scalarelectricresistance(const ScalarElectricResistanceData* msg) {
  return *msg->scalarelectricresistance_;
}
ScalarElectricResistanceData::ScalarElectricResistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarElectricResistanceData)
}
ScalarElectricResistanceData::ScalarElectricResistanceData(const ScalarElectricResistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarelectricresistance()) {
    scalarelectricresistance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarelectricresistance_);
  } else {
    scalarelectricresistance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarElectricResistanceData)
}

void ScalarElectricResistanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarelectricresistance_ = nullptr;
}

ScalarElectricResistanceData::~ScalarElectricResistanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarElectricResistanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarElectricResistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarelectricresistance_;
}

void ScalarElectricResistanceData::ArenaDtor(void* object) {
  ScalarElectricResistanceData* _this = reinterpret_cast< ScalarElectricResistanceData* >(object);
  (void)_this;
}
void ScalarElectricResistanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarElectricResistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarElectricResistanceData& ScalarElectricResistanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarElectricResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarElectricResistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarElectricResistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarelectricresistance_ != nullptr) {
    delete scalarelectricresistance_;
  }
  scalarelectricresistance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarElectricResistanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarElectricResistance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarelectricresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarElectricResistanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarElectricResistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricResistance = 1;
  if (this->has_scalarelectricresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarelectricresistance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarElectricResistanceData)
  return target;
}

size_t ScalarElectricResistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarElectricResistanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarElectricResistance = 1;
  if (this->has_scalarelectricresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarelectricresistance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarElectricResistanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarElectricResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarElectricResistanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarElectricResistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarElectricResistanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarElectricResistanceData)
    MergeFrom(*source);
  }
}

void ScalarElectricResistanceData::MergeFrom(const ScalarElectricResistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarElectricResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarelectricresistance()) {
    _internal_mutable_scalarelectricresistance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarelectricresistance());
  }
}

void ScalarElectricResistanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarElectricResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarElectricResistanceData::CopyFrom(const ScalarElectricResistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarElectricResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarElectricResistanceData::IsInitialized() const {
  return true;
}

void ScalarElectricResistanceData::InternalSwap(ScalarElectricResistanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarelectricresistance_, other->scalarelectricresistance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarElectricResistanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarEnergyData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarenergy(const ScalarEnergyData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarEnergyData::_Internal::scalarenergy(const ScalarEnergyData* msg) {
  return *msg->scalarenergy_;
}
ScalarEnergyData::ScalarEnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarEnergyData)
}
ScalarEnergyData::ScalarEnergyData(const ScalarEnergyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarenergy()) {
    scalarenergy_ = new ::pulse::cdm::bind::ScalarData(*from.scalarenergy_);
  } else {
    scalarenergy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarEnergyData)
}

void ScalarEnergyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarenergy_ = nullptr;
}

ScalarEnergyData::~ScalarEnergyData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarEnergyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarEnergyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarenergy_;
}

void ScalarEnergyData::ArenaDtor(void* object) {
  ScalarEnergyData* _this = reinterpret_cast< ScalarEnergyData* >(object);
  (void)_this;
}
void ScalarEnergyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarEnergyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarEnergyData& ScalarEnergyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarEnergyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarEnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarenergy_ != nullptr) {
    delete scalarenergy_;
  }
  scalarenergy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarEnergyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarenergy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarEnergyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarEnergyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergy = 1;
  if (this->has_scalarenergy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarenergy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarEnergyData)
  return target;
}

size_t ScalarEnergyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarEnergyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergy = 1;
  if (this->has_scalarenergy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarenergy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarEnergyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarEnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarEnergyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarEnergyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarEnergyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarEnergyData)
    MergeFrom(*source);
  }
}

void ScalarEnergyData::MergeFrom(const ScalarEnergyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarEnergyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarenergy()) {
    _internal_mutable_scalarenergy()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarenergy());
  }
}

void ScalarEnergyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarEnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnergyData::CopyFrom(const ScalarEnergyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarEnergyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnergyData::IsInitialized() const {
  return true;
}

void ScalarEnergyData::InternalSwap(ScalarEnergyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarenergy_, other->scalarenergy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarEnergyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarEnergyPerAmountData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarenergyperamount(const ScalarEnergyPerAmountData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarEnergyPerAmountData::_Internal::scalarenergyperamount(const ScalarEnergyPerAmountData* msg) {
  return *msg->scalarenergyperamount_;
}
ScalarEnergyPerAmountData::ScalarEnergyPerAmountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarEnergyPerAmountData)
}
ScalarEnergyPerAmountData::ScalarEnergyPerAmountData(const ScalarEnergyPerAmountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarenergyperamount()) {
    scalarenergyperamount_ = new ::pulse::cdm::bind::ScalarData(*from.scalarenergyperamount_);
  } else {
    scalarenergyperamount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarEnergyPerAmountData)
}

void ScalarEnergyPerAmountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarenergyperamount_ = nullptr;
}

ScalarEnergyPerAmountData::~ScalarEnergyPerAmountData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarEnergyPerAmountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarEnergyPerAmountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarenergyperamount_;
}

void ScalarEnergyPerAmountData::ArenaDtor(void* object) {
  ScalarEnergyPerAmountData* _this = reinterpret_cast< ScalarEnergyPerAmountData* >(object);
  (void)_this;
}
void ScalarEnergyPerAmountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarEnergyPerAmountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarEnergyPerAmountData& ScalarEnergyPerAmountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarEnergyPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarEnergyPerAmountData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarenergyperamount_ != nullptr) {
    delete scalarenergyperamount_;
  }
  scalarenergyperamount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarEnergyPerAmountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarEnergyPerAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarenergyperamount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarEnergyPerAmountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergyPerAmount = 1;
  if (this->has_scalarenergyperamount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarenergyperamount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarEnergyPerAmountData)
  return target;
}

size_t ScalarEnergyPerAmountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergyPerAmount = 1;
  if (this->has_scalarenergyperamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarenergyperamount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarEnergyPerAmountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarEnergyPerAmountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarEnergyPerAmountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarEnergyPerAmountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarEnergyPerAmountData)
    MergeFrom(*source);
  }
}

void ScalarEnergyPerAmountData::MergeFrom(const ScalarEnergyPerAmountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarenergyperamount()) {
    _internal_mutable_scalarenergyperamount()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarenergyperamount());
  }
}

void ScalarEnergyPerAmountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnergyPerAmountData::CopyFrom(const ScalarEnergyPerAmountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarEnergyPerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnergyPerAmountData::IsInitialized() const {
  return true;
}

void ScalarEnergyPerAmountData::InternalSwap(ScalarEnergyPerAmountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarenergyperamount_, other->scalarenergyperamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarEnergyPerAmountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarEnergyPerMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarenergypermass(const ScalarEnergyPerMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarEnergyPerMassData::_Internal::scalarenergypermass(const ScalarEnergyPerMassData* msg) {
  return *msg->scalarenergypermass_;
}
ScalarEnergyPerMassData::ScalarEnergyPerMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarEnergyPerMassData)
}
ScalarEnergyPerMassData::ScalarEnergyPerMassData(const ScalarEnergyPerMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarenergypermass()) {
    scalarenergypermass_ = new ::pulse::cdm::bind::ScalarData(*from.scalarenergypermass_);
  } else {
    scalarenergypermass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarEnergyPerMassData)
}

void ScalarEnergyPerMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarenergypermass_ = nullptr;
}

ScalarEnergyPerMassData::~ScalarEnergyPerMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarEnergyPerMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarEnergyPerMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarenergypermass_;
}

void ScalarEnergyPerMassData::ArenaDtor(void* object) {
  ScalarEnergyPerMassData* _this = reinterpret_cast< ScalarEnergyPerMassData* >(object);
  (void)_this;
}
void ScalarEnergyPerMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarEnergyPerMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarEnergyPerMassData& ScalarEnergyPerMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarEnergyPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarEnergyPerMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarenergypermass_ != nullptr) {
    delete scalarenergypermass_;
  }
  scalarenergypermass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarEnergyPerMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarEnergyPerMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarenergypermass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarEnergyPerMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergyPerMass = 1;
  if (this->has_scalarenergypermass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarenergypermass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarEnergyPerMassData)
  return target;
}

size_t ScalarEnergyPerMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarEnergyPerMass = 1;
  if (this->has_scalarenergypermass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarenergypermass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarEnergyPerMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarEnergyPerMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarEnergyPerMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarEnergyPerMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarEnergyPerMassData)
    MergeFrom(*source);
  }
}

void ScalarEnergyPerMassData::MergeFrom(const ScalarEnergyPerMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarenergypermass()) {
    _internal_mutable_scalarenergypermass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarenergypermass());
  }
}

void ScalarEnergyPerMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnergyPerMassData::CopyFrom(const ScalarEnergyPerMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarEnergyPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnergyPerMassData::IsInitialized() const {
  return true;
}

void ScalarEnergyPerMassData::InternalSwap(ScalarEnergyPerMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarenergypermass_, other->scalarenergypermass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarEnergyPerMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarForceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarforce(const ScalarForceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarForceData::_Internal::scalarforce(const ScalarForceData* msg) {
  return *msg->scalarforce_;
}
ScalarForceData::ScalarForceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarForceData)
}
ScalarForceData::ScalarForceData(const ScalarForceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarforce()) {
    scalarforce_ = new ::pulse::cdm::bind::ScalarData(*from.scalarforce_);
  } else {
    scalarforce_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarForceData)
}

void ScalarForceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarforce_ = nullptr;
}

ScalarForceData::~ScalarForceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarForceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarForceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarforce_;
}

void ScalarForceData::ArenaDtor(void* object) {
  ScalarForceData* _this = reinterpret_cast< ScalarForceData* >(object);
  (void)_this;
}
void ScalarForceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarForceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarForceData& ScalarForceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarForceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarForceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarForceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarforce_ != nullptr) {
    delete scalarforce_;
  }
  scalarforce_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarForceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarForce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarforce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarForceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarForceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarForce = 1;
  if (this->has_scalarforce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarforce(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarForceData)
  return target;
}

size_t ScalarForceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarForceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarForce = 1;
  if (this->has_scalarforce()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarforce_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarForceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarForceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarForceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarForceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarForceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarForceData)
    MergeFrom(*source);
  }
}

void ScalarForceData::MergeFrom(const ScalarForceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarForceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarforce()) {
    _internal_mutable_scalarforce()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarforce());
  }
}

void ScalarForceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarForceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarForceData::CopyFrom(const ScalarForceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarForceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarForceData::IsInitialized() const {
  return true;
}

void ScalarForceData::InternalSwap(ScalarForceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarforce_, other->scalarforce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarForceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarFrequencyData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarfrequency(const ScalarFrequencyData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarFrequencyData::_Internal::scalarfrequency(const ScalarFrequencyData* msg) {
  return *msg->scalarfrequency_;
}
ScalarFrequencyData::ScalarFrequencyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarFrequencyData)
}
ScalarFrequencyData::ScalarFrequencyData(const ScalarFrequencyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarfrequency()) {
    scalarfrequency_ = new ::pulse::cdm::bind::ScalarData(*from.scalarfrequency_);
  } else {
    scalarfrequency_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarFrequencyData)
}

void ScalarFrequencyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarfrequency_ = nullptr;
}

ScalarFrequencyData::~ScalarFrequencyData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarFrequencyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarFrequencyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarfrequency_;
}

void ScalarFrequencyData::ArenaDtor(void* object) {
  ScalarFrequencyData* _this = reinterpret_cast< ScalarFrequencyData* >(object);
  (void)_this;
}
void ScalarFrequencyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarFrequencyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarFrequencyData& ScalarFrequencyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarFrequencyData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarFrequencyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarfrequency_ != nullptr) {
    delete scalarfrequency_;
  }
  scalarfrequency_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarFrequencyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarFrequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarfrequency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarFrequencyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarFrequencyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarFrequency = 1;
  if (this->has_scalarfrequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarfrequency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarFrequencyData)
  return target;
}

size_t ScalarFrequencyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarFrequencyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarFrequency = 1;
  if (this->has_scalarfrequency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarfrequency_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarFrequencyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarFrequencyData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarFrequencyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarFrequencyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarFrequencyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarFrequencyData)
    MergeFrom(*source);
  }
}

void ScalarFrequencyData::MergeFrom(const ScalarFrequencyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarFrequencyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarfrequency()) {
    _internal_mutable_scalarfrequency()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarfrequency());
  }
}

void ScalarFrequencyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarFrequencyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarFrequencyData::CopyFrom(const ScalarFrequencyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarFrequencyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarFrequencyData::IsInitialized() const {
  return true;
}

void ScalarFrequencyData::InternalSwap(ScalarFrequencyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarfrequency_, other->scalarfrequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarFrequencyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatCapacitanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatcapacitance(const ScalarHeatCapacitanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatCapacitanceData::_Internal::scalarheatcapacitance(const ScalarHeatCapacitanceData* msg) {
  return *msg->scalarheatcapacitance_;
}
ScalarHeatCapacitanceData::ScalarHeatCapacitanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatCapacitanceData)
}
ScalarHeatCapacitanceData::ScalarHeatCapacitanceData(const ScalarHeatCapacitanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatcapacitance()) {
    scalarheatcapacitance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatcapacitance_);
  } else {
    scalarheatcapacitance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatCapacitanceData)
}

void ScalarHeatCapacitanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatcapacitance_ = nullptr;
}

ScalarHeatCapacitanceData::~ScalarHeatCapacitanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatCapacitanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatCapacitanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatcapacitance_;
}

void ScalarHeatCapacitanceData::ArenaDtor(void* object) {
  ScalarHeatCapacitanceData* _this = reinterpret_cast< ScalarHeatCapacitanceData* >(object);
  (void)_this;
}
void ScalarHeatCapacitanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatCapacitanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatCapacitanceData& ScalarHeatCapacitanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatCapacitanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatCapacitanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatcapacitance_ != nullptr) {
    delete scalarheatcapacitance_;
  }
  scalarheatcapacitance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatCapacitanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatCapacitance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatcapacitance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatCapacitanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitance = 1;
  if (this->has_scalarheatcapacitance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatcapacitance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatCapacitanceData)
  return target;
}

size_t ScalarHeatCapacitanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitance = 1;
  if (this->has_scalarheatcapacitance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatcapacitance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatCapacitanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatCapacitanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatCapacitanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatCapacitanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatCapacitanceData)
    MergeFrom(*source);
  }
}

void ScalarHeatCapacitanceData::MergeFrom(const ScalarHeatCapacitanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatcapacitance()) {
    _internal_mutable_scalarheatcapacitance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatcapacitance());
  }
}

void ScalarHeatCapacitanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatCapacitanceData::CopyFrom(const ScalarHeatCapacitanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatCapacitanceData::IsInitialized() const {
  return true;
}

void ScalarHeatCapacitanceData::InternalSwap(ScalarHeatCapacitanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatcapacitance_, other->scalarheatcapacitance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatCapacitanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatCapacitancePerAmountData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatcapacitanceperamount(const ScalarHeatCapacitancePerAmountData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatCapacitancePerAmountData::_Internal::scalarheatcapacitanceperamount(const ScalarHeatCapacitancePerAmountData* msg) {
  return *msg->scalarheatcapacitanceperamount_;
}
ScalarHeatCapacitancePerAmountData::ScalarHeatCapacitancePerAmountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
}
ScalarHeatCapacitancePerAmountData::ScalarHeatCapacitancePerAmountData(const ScalarHeatCapacitancePerAmountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatcapacitanceperamount()) {
    scalarheatcapacitanceperamount_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatcapacitanceperamount_);
  } else {
    scalarheatcapacitanceperamount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
}

void ScalarHeatCapacitancePerAmountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatcapacitanceperamount_ = nullptr;
}

ScalarHeatCapacitancePerAmountData::~ScalarHeatCapacitancePerAmountData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatCapacitancePerAmountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatcapacitanceperamount_;
}

void ScalarHeatCapacitancePerAmountData::ArenaDtor(void* object) {
  ScalarHeatCapacitancePerAmountData* _this = reinterpret_cast< ScalarHeatCapacitancePerAmountData* >(object);
  (void)_this;
}
void ScalarHeatCapacitancePerAmountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatCapacitancePerAmountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatCapacitancePerAmountData& ScalarHeatCapacitancePerAmountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatCapacitancePerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatCapacitancePerAmountData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatcapacitanceperamount_ != nullptr) {
    delete scalarheatcapacitanceperamount_;
  }
  scalarheatcapacitanceperamount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatCapacitancePerAmountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatcapacitanceperamount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatCapacitancePerAmountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerAmount = 1;
  if (this->has_scalarheatcapacitanceperamount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatcapacitanceperamount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  return target;
}

size_t ScalarHeatCapacitancePerAmountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerAmount = 1;
  if (this->has_scalarheatcapacitanceperamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatcapacitanceperamount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatCapacitancePerAmountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatCapacitancePerAmountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatCapacitancePerAmountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
    MergeFrom(*source);
  }
}

void ScalarHeatCapacitancePerAmountData::MergeFrom(const ScalarHeatCapacitancePerAmountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatcapacitanceperamount()) {
    _internal_mutable_scalarheatcapacitanceperamount()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatcapacitanceperamount());
  }
}

void ScalarHeatCapacitancePerAmountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatCapacitancePerAmountData::CopyFrom(const ScalarHeatCapacitancePerAmountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatCapacitancePerAmountData::IsInitialized() const {
  return true;
}

void ScalarHeatCapacitancePerAmountData::InternalSwap(ScalarHeatCapacitancePerAmountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatcapacitanceperamount_, other->scalarheatcapacitanceperamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatCapacitancePerAmountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatCapacitancePerMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatcapacitancepermass(const ScalarHeatCapacitancePerMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatCapacitancePerMassData::_Internal::scalarheatcapacitancepermass(const ScalarHeatCapacitancePerMassData* msg) {
  return *msg->scalarheatcapacitancepermass_;
}
ScalarHeatCapacitancePerMassData::ScalarHeatCapacitancePerMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
}
ScalarHeatCapacitancePerMassData::ScalarHeatCapacitancePerMassData(const ScalarHeatCapacitancePerMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatcapacitancepermass()) {
    scalarheatcapacitancepermass_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatcapacitancepermass_);
  } else {
    scalarheatcapacitancepermass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
}

void ScalarHeatCapacitancePerMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatcapacitancepermass_ = nullptr;
}

ScalarHeatCapacitancePerMassData::~ScalarHeatCapacitancePerMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatCapacitancePerMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatcapacitancepermass_;
}

void ScalarHeatCapacitancePerMassData::ArenaDtor(void* object) {
  ScalarHeatCapacitancePerMassData* _this = reinterpret_cast< ScalarHeatCapacitancePerMassData* >(object);
  (void)_this;
}
void ScalarHeatCapacitancePerMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatCapacitancePerMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatCapacitancePerMassData& ScalarHeatCapacitancePerMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatCapacitancePerMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatcapacitancepermass_ != nullptr) {
    delete scalarheatcapacitancepermass_;
  }
  scalarheatcapacitancepermass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatCapacitancePerMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatcapacitancepermass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatCapacitancePerMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerMass = 1;
  if (this->has_scalarheatcapacitancepermass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatcapacitancepermass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  return target;
}

size_t ScalarHeatCapacitancePerMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatCapacitancePerMass = 1;
  if (this->has_scalarheatcapacitancepermass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatcapacitancepermass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatCapacitancePerMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatCapacitancePerMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatCapacitancePerMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
    MergeFrom(*source);
  }
}

void ScalarHeatCapacitancePerMassData::MergeFrom(const ScalarHeatCapacitancePerMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatcapacitancepermass()) {
    _internal_mutable_scalarheatcapacitancepermass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatcapacitancepermass());
  }
}

void ScalarHeatCapacitancePerMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatCapacitancePerMassData::CopyFrom(const ScalarHeatCapacitancePerMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatCapacitancePerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatCapacitancePerMassData::IsInitialized() const {
  return true;
}

void ScalarHeatCapacitancePerMassData::InternalSwap(ScalarHeatCapacitancePerMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatcapacitancepermass_, other->scalarheatcapacitancepermass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatCapacitancePerMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatConductanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatconductance(const ScalarHeatConductanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatConductanceData::_Internal::scalarheatconductance(const ScalarHeatConductanceData* msg) {
  return *msg->scalarheatconductance_;
}
ScalarHeatConductanceData::ScalarHeatConductanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatConductanceData)
}
ScalarHeatConductanceData::ScalarHeatConductanceData(const ScalarHeatConductanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatconductance()) {
    scalarheatconductance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatconductance_);
  } else {
    scalarheatconductance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatConductanceData)
}

void ScalarHeatConductanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatconductance_ = nullptr;
}

ScalarHeatConductanceData::~ScalarHeatConductanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatConductanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatConductanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatconductance_;
}

void ScalarHeatConductanceData::ArenaDtor(void* object) {
  ScalarHeatConductanceData* _this = reinterpret_cast< ScalarHeatConductanceData* >(object);
  (void)_this;
}
void ScalarHeatConductanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatConductanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatConductanceData& ScalarHeatConductanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatConductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatConductanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatConductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatconductance_ != nullptr) {
    delete scalarheatconductance_;
  }
  scalarheatconductance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatConductanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatConductance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatconductance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatConductanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatConductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatConductance = 1;
  if (this->has_scalarheatconductance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatconductance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatConductanceData)
  return target;
}

size_t ScalarHeatConductanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatConductanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatConductance = 1;
  if (this->has_scalarheatconductance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatconductance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatConductanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatConductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatConductanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatConductanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatConductanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatConductanceData)
    MergeFrom(*source);
  }
}

void ScalarHeatConductanceData::MergeFrom(const ScalarHeatConductanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatConductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatconductance()) {
    _internal_mutable_scalarheatconductance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatconductance());
  }
}

void ScalarHeatConductanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatConductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatConductanceData::CopyFrom(const ScalarHeatConductanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatConductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatConductanceData::IsInitialized() const {
  return true;
}

void ScalarHeatConductanceData::InternalSwap(ScalarHeatConductanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatconductance_, other->scalarheatconductance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatConductanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatConductancePerAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatconductanceperarea(const ScalarHeatConductancePerAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatConductancePerAreaData::_Internal::scalarheatconductanceperarea(const ScalarHeatConductancePerAreaData* msg) {
  return *msg->scalarheatconductanceperarea_;
}
ScalarHeatConductancePerAreaData::ScalarHeatConductancePerAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
}
ScalarHeatConductancePerAreaData::ScalarHeatConductancePerAreaData(const ScalarHeatConductancePerAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatconductanceperarea()) {
    scalarheatconductanceperarea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatconductanceperarea_);
  } else {
    scalarheatconductanceperarea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
}

void ScalarHeatConductancePerAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatconductanceperarea_ = nullptr;
}

ScalarHeatConductancePerAreaData::~ScalarHeatConductancePerAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatConductancePerAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatconductanceperarea_;
}

void ScalarHeatConductancePerAreaData::ArenaDtor(void* object) {
  ScalarHeatConductancePerAreaData* _this = reinterpret_cast< ScalarHeatConductancePerAreaData* >(object);
  (void)_this;
}
void ScalarHeatConductancePerAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatConductancePerAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatConductancePerAreaData& ScalarHeatConductancePerAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatConductancePerAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatconductanceperarea_ != nullptr) {
    delete scalarheatconductanceperarea_;
  }
  scalarheatconductanceperarea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatConductancePerAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatConductancePerArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatconductanceperarea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatConductancePerAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatConductancePerArea = 1;
  if (this->has_scalarheatconductanceperarea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatconductanceperarea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  return target;
}

size_t ScalarHeatConductancePerAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatConductancePerArea = 1;
  if (this->has_scalarheatconductanceperarea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatconductanceperarea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatConductancePerAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatConductancePerAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatConductancePerAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
    MergeFrom(*source);
  }
}

void ScalarHeatConductancePerAreaData::MergeFrom(const ScalarHeatConductancePerAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatconductanceperarea()) {
    _internal_mutable_scalarheatconductanceperarea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatconductanceperarea());
  }
}

void ScalarHeatConductancePerAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatConductancePerAreaData::CopyFrom(const ScalarHeatConductancePerAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatConductancePerAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatConductancePerAreaData::IsInitialized() const {
  return true;
}

void ScalarHeatConductancePerAreaData::InternalSwap(ScalarHeatConductancePerAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatconductanceperarea_, other->scalarheatconductanceperarea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatConductancePerAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatInductanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatinductance(const ScalarHeatInductanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatInductanceData::_Internal::scalarheatinductance(const ScalarHeatInductanceData* msg) {
  return *msg->scalarheatinductance_;
}
ScalarHeatInductanceData::ScalarHeatInductanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatInductanceData)
}
ScalarHeatInductanceData::ScalarHeatInductanceData(const ScalarHeatInductanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatinductance()) {
    scalarheatinductance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatinductance_);
  } else {
    scalarheatinductance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatInductanceData)
}

void ScalarHeatInductanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatinductance_ = nullptr;
}

ScalarHeatInductanceData::~ScalarHeatInductanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatInductanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatInductanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatinductance_;
}

void ScalarHeatInductanceData::ArenaDtor(void* object) {
  ScalarHeatInductanceData* _this = reinterpret_cast< ScalarHeatInductanceData* >(object);
  (void)_this;
}
void ScalarHeatInductanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatInductanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatInductanceData& ScalarHeatInductanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatInductanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatInductanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatInductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatinductance_ != nullptr) {
    delete scalarheatinductance_;
  }
  scalarheatinductance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatInductanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatInductance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatinductance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatInductanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatInductanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatInductance = 1;
  if (this->has_scalarheatinductance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatinductance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatInductanceData)
  return target;
}

size_t ScalarHeatInductanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatInductanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatInductance = 1;
  if (this->has_scalarheatinductance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatinductance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatInductanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatInductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatInductanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatInductanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatInductanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatInductanceData)
    MergeFrom(*source);
  }
}

void ScalarHeatInductanceData::MergeFrom(const ScalarHeatInductanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatInductanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatinductance()) {
    _internal_mutable_scalarheatinductance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatinductance());
  }
}

void ScalarHeatInductanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatInductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatInductanceData::CopyFrom(const ScalarHeatInductanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatInductanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatInductanceData::IsInitialized() const {
  return true;
}

void ScalarHeatInductanceData::InternalSwap(ScalarHeatInductanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatinductance_, other->scalarheatinductance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatInductanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatResistanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatresistance(const ScalarHeatResistanceData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatResistanceData::_Internal::scalarheatresistance(const ScalarHeatResistanceData* msg) {
  return *msg->scalarheatresistance_;
}
ScalarHeatResistanceData::ScalarHeatResistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatResistanceData)
}
ScalarHeatResistanceData::ScalarHeatResistanceData(const ScalarHeatResistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatresistance()) {
    scalarheatresistance_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatresistance_);
  } else {
    scalarheatresistance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatResistanceData)
}

void ScalarHeatResistanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatresistance_ = nullptr;
}

ScalarHeatResistanceData::~ScalarHeatResistanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatResistanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatResistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatresistance_;
}

void ScalarHeatResistanceData::ArenaDtor(void* object) {
  ScalarHeatResistanceData* _this = reinterpret_cast< ScalarHeatResistanceData* >(object);
  (void)_this;
}
void ScalarHeatResistanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatResistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatResistanceData& ScalarHeatResistanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatResistanceData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatResistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatResistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatresistance_ != nullptr) {
    delete scalarheatresistance_;
  }
  scalarheatresistance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatResistanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatResistance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatResistanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatResistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatResistance = 1;
  if (this->has_scalarheatresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatresistance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatResistanceData)
  return target;
}

size_t ScalarHeatResistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatResistanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatResistance = 1;
  if (this->has_scalarheatresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatresistance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatResistanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatResistanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatResistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatResistanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatResistanceData)
    MergeFrom(*source);
  }
}

void ScalarHeatResistanceData::MergeFrom(const ScalarHeatResistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatResistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatresistance()) {
    _internal_mutable_scalarheatresistance()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatresistance());
  }
}

void ScalarHeatResistanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatResistanceData::CopyFrom(const ScalarHeatResistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatResistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatResistanceData::IsInitialized() const {
  return true;
}

void ScalarHeatResistanceData::InternalSwap(ScalarHeatResistanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatresistance_, other->scalarheatresistance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatResistanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarHeatResistanceAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarheatresistancearea(const ScalarHeatResistanceAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarHeatResistanceAreaData::_Internal::scalarheatresistancearea(const ScalarHeatResistanceAreaData* msg) {
  return *msg->scalarheatresistancearea_;
}
ScalarHeatResistanceAreaData::ScalarHeatResistanceAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarHeatResistanceAreaData)
}
ScalarHeatResistanceAreaData::ScalarHeatResistanceAreaData(const ScalarHeatResistanceAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarheatresistancearea()) {
    scalarheatresistancearea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarheatresistancearea_);
  } else {
    scalarheatresistancearea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarHeatResistanceAreaData)
}

void ScalarHeatResistanceAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarheatresistancearea_ = nullptr;
}

ScalarHeatResistanceAreaData::~ScalarHeatResistanceAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarHeatResistanceAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarheatresistancearea_;
}

void ScalarHeatResistanceAreaData::ArenaDtor(void* object) {
  ScalarHeatResistanceAreaData* _this = reinterpret_cast< ScalarHeatResistanceAreaData* >(object);
  (void)_this;
}
void ScalarHeatResistanceAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarHeatResistanceAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarHeatResistanceAreaData& ScalarHeatResistanceAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarHeatResistanceAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarheatresistancearea_ != nullptr) {
    delete scalarheatresistancearea_;
  }
  scalarheatresistancearea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarHeatResistanceAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarHeatResistanceArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarheatresistancearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarHeatResistanceAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatResistanceArea = 1;
  if (this->has_scalarheatresistancearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarheatresistancearea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  return target;
}

size_t ScalarHeatResistanceAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarHeatResistanceArea = 1;
  if (this->has_scalarheatresistancearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarheatresistancearea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarHeatResistanceAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarHeatResistanceAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarHeatResistanceAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarHeatResistanceAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarHeatResistanceAreaData)
    MergeFrom(*source);
  }
}

void ScalarHeatResistanceAreaData::MergeFrom(const ScalarHeatResistanceAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarheatresistancearea()) {
    _internal_mutable_scalarheatresistancearea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarheatresistancearea());
  }
}

void ScalarHeatResistanceAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarHeatResistanceAreaData::CopyFrom(const ScalarHeatResistanceAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarHeatResistanceAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarHeatResistanceAreaData::IsInitialized() const {
  return true;
}

void ScalarHeatResistanceAreaData::InternalSwap(ScalarHeatResistanceAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarheatresistancearea_, other->scalarheatresistancearea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarHeatResistanceAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarInversePressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarinversepressure(const ScalarInversePressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarInversePressureData::_Internal::scalarinversepressure(const ScalarInversePressureData* msg) {
  return *msg->scalarinversepressure_;
}
ScalarInversePressureData::ScalarInversePressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarInversePressureData)
}
ScalarInversePressureData::ScalarInversePressureData(const ScalarInversePressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarinversepressure()) {
    scalarinversepressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarinversepressure_);
  } else {
    scalarinversepressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarInversePressureData)
}

void ScalarInversePressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarinversepressure_ = nullptr;
}

ScalarInversePressureData::~ScalarInversePressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarInversePressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarInversePressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarinversepressure_;
}

void ScalarInversePressureData::ArenaDtor(void* object) {
  ScalarInversePressureData* _this = reinterpret_cast< ScalarInversePressureData* >(object);
  (void)_this;
}
void ScalarInversePressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarInversePressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarInversePressureData& ScalarInversePressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarInversePressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarInversePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarinversepressure_ != nullptr) {
    delete scalarinversepressure_;
  }
  scalarinversepressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarInversePressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarInversePressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarinversepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarInversePressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarInversePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarInversePressure = 1;
  if (this->has_scalarinversepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarinversepressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarInversePressureData)
  return target;
}

size_t ScalarInversePressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarInversePressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarInversePressure = 1;
  if (this->has_scalarinversepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarinversepressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarInversePressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarInversePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarInversePressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarInversePressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarInversePressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarInversePressureData)
    MergeFrom(*source);
  }
}

void ScalarInversePressureData::MergeFrom(const ScalarInversePressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarInversePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarinversepressure()) {
    _internal_mutable_scalarinversepressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarinversepressure());
  }
}

void ScalarInversePressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarInversePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarInversePressureData::CopyFrom(const ScalarInversePressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarInversePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarInversePressureData::IsInitialized() const {
  return true;
}

void ScalarInversePressureData::InternalSwap(ScalarInversePressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarinversepressure_, other->scalarinversepressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarInversePressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarInverseVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarinversevolume(const ScalarInverseVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarInverseVolumeData::_Internal::scalarinversevolume(const ScalarInverseVolumeData* msg) {
  return *msg->scalarinversevolume_;
}
ScalarInverseVolumeData::ScalarInverseVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarInverseVolumeData)
}
ScalarInverseVolumeData::ScalarInverseVolumeData(const ScalarInverseVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarinversevolume()) {
    scalarinversevolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarinversevolume_);
  } else {
    scalarinversevolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarInverseVolumeData)
}

void ScalarInverseVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarinversevolume_ = nullptr;
}

ScalarInverseVolumeData::~ScalarInverseVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarInverseVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarInverseVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarinversevolume_;
}

void ScalarInverseVolumeData::ArenaDtor(void* object) {
  ScalarInverseVolumeData* _this = reinterpret_cast< ScalarInverseVolumeData* >(object);
  (void)_this;
}
void ScalarInverseVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarInverseVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarInverseVolumeData& ScalarInverseVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarInverseVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarInverseVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarInverseVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarinversevolume_ != nullptr) {
    delete scalarinversevolume_;
  }
  scalarinversevolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarInverseVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarInverseVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarinversevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarInverseVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarInverseVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarInverseVolume = 1;
  if (this->has_scalarinversevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarinversevolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarInverseVolumeData)
  return target;
}

size_t ScalarInverseVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarInverseVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarInverseVolume = 1;
  if (this->has_scalarinversevolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarinversevolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarInverseVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarInverseVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarInverseVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarInverseVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarInverseVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarInverseVolumeData)
    MergeFrom(*source);
  }
}

void ScalarInverseVolumeData::MergeFrom(const ScalarInverseVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarInverseVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarinversevolume()) {
    _internal_mutable_scalarinversevolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarinversevolume());
  }
}

void ScalarInverseVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarInverseVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarInverseVolumeData::CopyFrom(const ScalarInverseVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarInverseVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarInverseVolumeData::IsInitialized() const {
  return true;
}

void ScalarInverseVolumeData::InternalSwap(ScalarInverseVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarinversevolume_, other->scalarinversevolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarInverseVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarLengthData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarlength(const ScalarLengthData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarLengthData::_Internal::scalarlength(const ScalarLengthData* msg) {
  return *msg->scalarlength_;
}
ScalarLengthData::ScalarLengthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarLengthData)
}
ScalarLengthData::ScalarLengthData(const ScalarLengthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarlength()) {
    scalarlength_ = new ::pulse::cdm::bind::ScalarData(*from.scalarlength_);
  } else {
    scalarlength_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarLengthData)
}

void ScalarLengthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarlength_ = nullptr;
}

ScalarLengthData::~ScalarLengthData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarLengthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarLengthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarlength_;
}

void ScalarLengthData::ArenaDtor(void* object) {
  ScalarLengthData* _this = reinterpret_cast< ScalarLengthData* >(object);
  (void)_this;
}
void ScalarLengthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarLengthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarLengthData& ScalarLengthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarLengthData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarLengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarlength_ != nullptr) {
    delete scalarlength_;
  }
  scalarlength_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarLengthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarlength(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarLengthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarLengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLength = 1;
  if (this->has_scalarlength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarlength(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarLengthData)
  return target;
}

size_t ScalarLengthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarLengthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLength = 1;
  if (this->has_scalarlength()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarlength_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarLengthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarLengthData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarLengthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarLengthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarLengthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarLengthData)
    MergeFrom(*source);
  }
}

void ScalarLengthData::MergeFrom(const ScalarLengthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarLengthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarlength()) {
    _internal_mutable_scalarlength()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarlength());
  }
}

void ScalarLengthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarLengthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarLengthData::CopyFrom(const ScalarLengthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarLengthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarLengthData::IsInitialized() const {
  return true;
}

void ScalarLengthData::InternalSwap(ScalarLengthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarlength_, other->scalarlength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarLengthData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarLengthPerTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarlengthpertime(const ScalarLengthPerTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarLengthPerTimeData::_Internal::scalarlengthpertime(const ScalarLengthPerTimeData* msg) {
  return *msg->scalarlengthpertime_;
}
ScalarLengthPerTimeData::ScalarLengthPerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarLengthPerTimeData)
}
ScalarLengthPerTimeData::ScalarLengthPerTimeData(const ScalarLengthPerTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarlengthpertime()) {
    scalarlengthpertime_ = new ::pulse::cdm::bind::ScalarData(*from.scalarlengthpertime_);
  } else {
    scalarlengthpertime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarLengthPerTimeData)
}

void ScalarLengthPerTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarlengthpertime_ = nullptr;
}

ScalarLengthPerTimeData::~ScalarLengthPerTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarLengthPerTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarLengthPerTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarlengthpertime_;
}

void ScalarLengthPerTimeData::ArenaDtor(void* object) {
  ScalarLengthPerTimeData* _this = reinterpret_cast< ScalarLengthPerTimeData* >(object);
  (void)_this;
}
void ScalarLengthPerTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarLengthPerTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarLengthPerTimeData& ScalarLengthPerTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarLengthPerTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarlengthpertime_ != nullptr) {
    delete scalarlengthpertime_;
  }
  scalarlengthpertime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarLengthPerTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarLengthPerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarlengthpertime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarLengthPerTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLengthPerTime = 1;
  if (this->has_scalarlengthpertime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarlengthpertime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarLengthPerTimeData)
  return target;
}

size_t ScalarLengthPerTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLengthPerTime = 1;
  if (this->has_scalarlengthpertime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarlengthpertime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarLengthPerTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarLengthPerTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarLengthPerTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarLengthPerTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarLengthPerTimeData)
    MergeFrom(*source);
  }
}

void ScalarLengthPerTimeData::MergeFrom(const ScalarLengthPerTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarlengthpertime()) {
    _internal_mutable_scalarlengthpertime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarlengthpertime());
  }
}

void ScalarLengthPerTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarLengthPerTimeData::CopyFrom(const ScalarLengthPerTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarLengthPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarLengthPerTimeData::IsInitialized() const {
  return true;
}

void ScalarLengthPerTimeData::InternalSwap(ScalarLengthPerTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarlengthpertime_, other->scalarlengthpertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarLengthPerTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarLengthPerTimePressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarlengthpertimepressure(const ScalarLengthPerTimePressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarLengthPerTimePressureData::_Internal::scalarlengthpertimepressure(const ScalarLengthPerTimePressureData* msg) {
  return *msg->scalarlengthpertimepressure_;
}
ScalarLengthPerTimePressureData::ScalarLengthPerTimePressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarLengthPerTimePressureData)
}
ScalarLengthPerTimePressureData::ScalarLengthPerTimePressureData(const ScalarLengthPerTimePressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarlengthpertimepressure()) {
    scalarlengthpertimepressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarlengthpertimepressure_);
  } else {
    scalarlengthpertimepressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarLengthPerTimePressureData)
}

void ScalarLengthPerTimePressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarlengthpertimepressure_ = nullptr;
}

ScalarLengthPerTimePressureData::~ScalarLengthPerTimePressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarLengthPerTimePressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarlengthpertimepressure_;
}

void ScalarLengthPerTimePressureData::ArenaDtor(void* object) {
  ScalarLengthPerTimePressureData* _this = reinterpret_cast< ScalarLengthPerTimePressureData* >(object);
  (void)_this;
}
void ScalarLengthPerTimePressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarLengthPerTimePressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarLengthPerTimePressureData& ScalarLengthPerTimePressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarLengthPerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarLengthPerTimePressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarlengthpertimepressure_ != nullptr) {
    delete scalarlengthpertimepressure_;
  }
  scalarlengthpertimepressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarLengthPerTimePressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarLengthPerTimePressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarlengthpertimepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarLengthPerTimePressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLengthPerTimePressure = 1;
  if (this->has_scalarlengthpertimepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarlengthpertimepressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  return target;
}

size_t ScalarLengthPerTimePressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarLengthPerTimePressure = 1;
  if (this->has_scalarlengthpertimepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarlengthpertimepressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarLengthPerTimePressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarLengthPerTimePressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarLengthPerTimePressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarLengthPerTimePressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarLengthPerTimePressureData)
    MergeFrom(*source);
  }
}

void ScalarLengthPerTimePressureData::MergeFrom(const ScalarLengthPerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarlengthpertimepressure()) {
    _internal_mutable_scalarlengthpertimepressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarlengthpertimepressure());
  }
}

void ScalarLengthPerTimePressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarLengthPerTimePressureData::CopyFrom(const ScalarLengthPerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarLengthPerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarLengthPerTimePressureData::IsInitialized() const {
  return true;
}

void ScalarLengthPerTimePressureData::InternalSwap(ScalarLengthPerTimePressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarlengthpertimepressure_, other->scalarlengthpertimepressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarLengthPerTimePressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmass(const ScalarMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassData::_Internal::scalarmass(const ScalarMassData* msg) {
  return *msg->scalarmass_;
}
ScalarMassData::ScalarMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassData)
}
ScalarMassData::ScalarMassData(const ScalarMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmass()) {
    scalarmass_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmass_);
  } else {
    scalarmass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassData)
}

void ScalarMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmass_ = nullptr;
}

ScalarMassData::~ScalarMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmass_;
}

void ScalarMassData::ArenaDtor(void* object) {
  ScalarMassData* _this = reinterpret_cast< ScalarMassData* >(object);
  (void)_this;
}
void ScalarMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassData& ScalarMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmass_ != nullptr) {
    delete scalarmass_;
  }
  scalarmass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMass = 1;
  if (this->has_scalarmass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassData)
  return target;
}

size_t ScalarMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMass = 1;
  if (this->has_scalarmass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassData)
    MergeFrom(*source);
  }
}

void ScalarMassData::MergeFrom(const ScalarMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmass()) {
    _internal_mutable_scalarmass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmass());
  }
}

void ScalarMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassData::CopyFrom(const ScalarMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassData::IsInitialized() const {
  return true;
}

void ScalarMassData::InternalSwap(ScalarMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmass_, other->scalarmass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassPerAmountData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmassperamount(const ScalarMassPerAmountData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassPerAmountData::_Internal::scalarmassperamount(const ScalarMassPerAmountData* msg) {
  return *msg->scalarmassperamount_;
}
ScalarMassPerAmountData::ScalarMassPerAmountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassPerAmountData)
}
ScalarMassPerAmountData::ScalarMassPerAmountData(const ScalarMassPerAmountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmassperamount()) {
    scalarmassperamount_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmassperamount_);
  } else {
    scalarmassperamount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassPerAmountData)
}

void ScalarMassPerAmountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmassperamount_ = nullptr;
}

ScalarMassPerAmountData::~ScalarMassPerAmountData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassPerAmountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassPerAmountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmassperamount_;
}

void ScalarMassPerAmountData::ArenaDtor(void* object) {
  ScalarMassPerAmountData* _this = reinterpret_cast< ScalarMassPerAmountData* >(object);
  (void)_this;
}
void ScalarMassPerAmountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassPerAmountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassPerAmountData& ScalarMassPerAmountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassPerAmountData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassPerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmassperamount_ != nullptr) {
    delete scalarmassperamount_;
  }
  scalarmassperamount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassPerAmountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMassPerAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmassperamount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassPerAmountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassPerAmountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerAmount = 1;
  if (this->has_scalarmassperamount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmassperamount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassPerAmountData)
  return target;
}

size_t ScalarMassPerAmountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassPerAmountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerAmount = 1;
  if (this->has_scalarmassperamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmassperamount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassPerAmountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassPerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassPerAmountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassPerAmountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassPerAmountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassPerAmountData)
    MergeFrom(*source);
  }
}

void ScalarMassPerAmountData::MergeFrom(const ScalarMassPerAmountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassPerAmountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmassperamount()) {
    _internal_mutable_scalarmassperamount()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmassperamount());
  }
}

void ScalarMassPerAmountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassPerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassPerAmountData::CopyFrom(const ScalarMassPerAmountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassPerAmountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassPerAmountData::IsInitialized() const {
  return true;
}

void ScalarMassPerAmountData::InternalSwap(ScalarMassPerAmountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmassperamount_, other->scalarmassperamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassPerAmountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassPerAreaTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmassperareatime(const ScalarMassPerAreaTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassPerAreaTimeData::_Internal::scalarmassperareatime(const ScalarMassPerAreaTimeData* msg) {
  return *msg->scalarmassperareatime_;
}
ScalarMassPerAreaTimeData::ScalarMassPerAreaTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassPerAreaTimeData)
}
ScalarMassPerAreaTimeData::ScalarMassPerAreaTimeData(const ScalarMassPerAreaTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmassperareatime()) {
    scalarmassperareatime_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmassperareatime_);
  } else {
    scalarmassperareatime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassPerAreaTimeData)
}

void ScalarMassPerAreaTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmassperareatime_ = nullptr;
}

ScalarMassPerAreaTimeData::~ScalarMassPerAreaTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassPerAreaTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmassperareatime_;
}

void ScalarMassPerAreaTimeData::ArenaDtor(void* object) {
  ScalarMassPerAreaTimeData* _this = reinterpret_cast< ScalarMassPerAreaTimeData* >(object);
  (void)_this;
}
void ScalarMassPerAreaTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassPerAreaTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassPerAreaTimeData& ScalarMassPerAreaTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassPerAreaTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmassperareatime_ != nullptr) {
    delete scalarmassperareatime_;
  }
  scalarmassperareatime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassPerAreaTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMassPerAreaTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmassperareatime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassPerAreaTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerAreaTime = 1;
  if (this->has_scalarmassperareatime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmassperareatime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  return target;
}

size_t ScalarMassPerAreaTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerAreaTime = 1;
  if (this->has_scalarmassperareatime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmassperareatime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassPerAreaTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassPerAreaTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassPerAreaTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassPerAreaTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassPerAreaTimeData)
    MergeFrom(*source);
  }
}

void ScalarMassPerAreaTimeData::MergeFrom(const ScalarMassPerAreaTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmassperareatime()) {
    _internal_mutable_scalarmassperareatime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmassperareatime());
  }
}

void ScalarMassPerAreaTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassPerAreaTimeData::CopyFrom(const ScalarMassPerAreaTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassPerAreaTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassPerAreaTimeData::IsInitialized() const {
  return true;
}

void ScalarMassPerAreaTimeData::InternalSwap(ScalarMassPerAreaTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmassperareatime_, other->scalarmassperareatime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassPerAreaTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassPerMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmasspermass(const ScalarMassPerMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassPerMassData::_Internal::scalarmasspermass(const ScalarMassPerMassData* msg) {
  return *msg->scalarmasspermass_;
}
ScalarMassPerMassData::ScalarMassPerMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassPerMassData)
}
ScalarMassPerMassData::ScalarMassPerMassData(const ScalarMassPerMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmasspermass()) {
    scalarmasspermass_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmasspermass_);
  } else {
    scalarmasspermass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassPerMassData)
}

void ScalarMassPerMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmasspermass_ = nullptr;
}

ScalarMassPerMassData::~ScalarMassPerMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassPerMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassPerMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmasspermass_;
}

void ScalarMassPerMassData::ArenaDtor(void* object) {
  ScalarMassPerMassData* _this = reinterpret_cast< ScalarMassPerMassData* >(object);
  (void)_this;
}
void ScalarMassPerMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassPerMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassPerMassData& ScalarMassPerMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassPerMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmasspermass_ != nullptr) {
    delete scalarmasspermass_;
  }
  scalarmasspermass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassPerMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMassPerMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmasspermass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassPerMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassPerMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerMass = 1;
  if (this->has_scalarmasspermass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmasspermass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassPerMassData)
  return target;
}

size_t ScalarMassPerMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassPerMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerMass = 1;
  if (this->has_scalarmasspermass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmasspermass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassPerMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassPerMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassPerMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassPerMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassPerMassData)
    MergeFrom(*source);
  }
}

void ScalarMassPerMassData::MergeFrom(const ScalarMassPerMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassPerMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmasspermass()) {
    _internal_mutable_scalarmasspermass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmasspermass());
  }
}

void ScalarMassPerMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassPerMassData::CopyFrom(const ScalarMassPerMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassPerMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassPerMassData::IsInitialized() const {
  return true;
}

void ScalarMassPerMassData::InternalSwap(ScalarMassPerMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmasspermass_, other->scalarmasspermass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassPerMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassPerTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmasspertime(const ScalarMassPerTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassPerTimeData::_Internal::scalarmasspertime(const ScalarMassPerTimeData* msg) {
  return *msg->scalarmasspertime_;
}
ScalarMassPerTimeData::ScalarMassPerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassPerTimeData)
}
ScalarMassPerTimeData::ScalarMassPerTimeData(const ScalarMassPerTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmasspertime()) {
    scalarmasspertime_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmasspertime_);
  } else {
    scalarmasspertime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassPerTimeData)
}

void ScalarMassPerTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmasspertime_ = nullptr;
}

ScalarMassPerTimeData::~ScalarMassPerTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassPerTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassPerTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmasspertime_;
}

void ScalarMassPerTimeData::ArenaDtor(void* object) {
  ScalarMassPerTimeData* _this = reinterpret_cast< ScalarMassPerTimeData* >(object);
  (void)_this;
}
void ScalarMassPerTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassPerTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassPerTimeData& ScalarMassPerTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassPerTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmasspertime_ != nullptr) {
    delete scalarmasspertime_;
  }
  scalarmasspertime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassPerTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMassPerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmasspertime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassPerTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassPerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerTime = 1;
  if (this->has_scalarmasspertime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmasspertime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassPerTimeData)
  return target;
}

size_t ScalarMassPerTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassPerTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerTime = 1;
  if (this->has_scalarmasspertime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmasspertime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassPerTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassPerTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassPerTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassPerTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassPerTimeData)
    MergeFrom(*source);
  }
}

void ScalarMassPerTimeData::MergeFrom(const ScalarMassPerTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassPerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmasspertime()) {
    _internal_mutable_scalarmasspertime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmasspertime());
  }
}

void ScalarMassPerTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassPerTimeData::CopyFrom(const ScalarMassPerTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassPerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassPerTimeData::IsInitialized() const {
  return true;
}

void ScalarMassPerTimeData::InternalSwap(ScalarMassPerTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmasspertime_, other->scalarmasspertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassPerTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarMassPerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarmasspervolume(const ScalarMassPerVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarMassPerVolumeData::_Internal::scalarmasspervolume(const ScalarMassPerVolumeData* msg) {
  return *msg->scalarmasspervolume_;
}
ScalarMassPerVolumeData::ScalarMassPerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarMassPerVolumeData)
}
ScalarMassPerVolumeData::ScalarMassPerVolumeData(const ScalarMassPerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarmasspervolume()) {
    scalarmasspervolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarmasspervolume_);
  } else {
    scalarmasspervolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarMassPerVolumeData)
}

void ScalarMassPerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarmasspervolume_ = nullptr;
}

ScalarMassPerVolumeData::~ScalarMassPerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarMassPerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarMassPerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarmasspervolume_;
}

void ScalarMassPerVolumeData::ArenaDtor(void* object) {
  ScalarMassPerVolumeData* _this = reinterpret_cast< ScalarMassPerVolumeData* >(object);
  (void)_this;
}
void ScalarMassPerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarMassPerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarMassPerVolumeData& ScalarMassPerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarMassPerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarmasspervolume_ != nullptr) {
    delete scalarmasspervolume_;
  }
  scalarmasspervolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarMassPerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarMassPerVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarmasspervolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarMassPerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerVolume = 1;
  if (this->has_scalarmasspervolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarmasspervolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarMassPerVolumeData)
  return target;
}

size_t ScalarMassPerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarMassPerVolume = 1;
  if (this->has_scalarmasspervolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarmasspervolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarMassPerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarMassPerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarMassPerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarMassPerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarMassPerVolumeData)
    MergeFrom(*source);
  }
}

void ScalarMassPerVolumeData::MergeFrom(const ScalarMassPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarmasspervolume()) {
    _internal_mutable_scalarmasspervolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarmasspervolume());
  }
}

void ScalarMassPerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarMassPerVolumeData::CopyFrom(const ScalarMassPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarMassPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarMassPerVolumeData::IsInitialized() const {
  return true;
}

void ScalarMassPerVolumeData::InternalSwap(ScalarMassPerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarmasspervolume_, other->scalarmasspervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarMassPerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarOsmolalityData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarosmolality(const ScalarOsmolalityData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarOsmolalityData::_Internal::scalarosmolality(const ScalarOsmolalityData* msg) {
  return *msg->scalarosmolality_;
}
ScalarOsmolalityData::ScalarOsmolalityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarOsmolalityData)
}
ScalarOsmolalityData::ScalarOsmolalityData(const ScalarOsmolalityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarosmolality()) {
    scalarosmolality_ = new ::pulse::cdm::bind::ScalarData(*from.scalarosmolality_);
  } else {
    scalarosmolality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarOsmolalityData)
}

void ScalarOsmolalityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarosmolality_ = nullptr;
}

ScalarOsmolalityData::~ScalarOsmolalityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarOsmolalityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarOsmolalityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarosmolality_;
}

void ScalarOsmolalityData::ArenaDtor(void* object) {
  ScalarOsmolalityData* _this = reinterpret_cast< ScalarOsmolalityData* >(object);
  (void)_this;
}
void ScalarOsmolalityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarOsmolalityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarOsmolalityData& ScalarOsmolalityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarOsmolalityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarOsmolalityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarosmolality_ != nullptr) {
    delete scalarosmolality_;
  }
  scalarosmolality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarOsmolalityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarOsmolality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarosmolality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarOsmolalityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarOsmolalityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarOsmolality = 1;
  if (this->has_scalarosmolality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarosmolality(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarOsmolalityData)
  return target;
}

size_t ScalarOsmolalityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarOsmolalityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarOsmolality = 1;
  if (this->has_scalarosmolality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarosmolality_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarOsmolalityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarOsmolalityData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarOsmolalityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarOsmolalityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarOsmolalityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarOsmolalityData)
    MergeFrom(*source);
  }
}

void ScalarOsmolalityData::MergeFrom(const ScalarOsmolalityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarOsmolalityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarosmolality()) {
    _internal_mutable_scalarosmolality()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarosmolality());
  }
}

void ScalarOsmolalityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarOsmolalityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarOsmolalityData::CopyFrom(const ScalarOsmolalityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarOsmolalityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarOsmolalityData::IsInitialized() const {
  return true;
}

void ScalarOsmolalityData::InternalSwap(ScalarOsmolalityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarosmolality_, other->scalarosmolality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarOsmolalityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarOsmolarityData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarosmolarity(const ScalarOsmolarityData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarOsmolarityData::_Internal::scalarosmolarity(const ScalarOsmolarityData* msg) {
  return *msg->scalarosmolarity_;
}
ScalarOsmolarityData::ScalarOsmolarityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarOsmolarityData)
}
ScalarOsmolarityData::ScalarOsmolarityData(const ScalarOsmolarityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarosmolarity()) {
    scalarosmolarity_ = new ::pulse::cdm::bind::ScalarData(*from.scalarosmolarity_);
  } else {
    scalarosmolarity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarOsmolarityData)
}

void ScalarOsmolarityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarosmolarity_ = nullptr;
}

ScalarOsmolarityData::~ScalarOsmolarityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarOsmolarityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarOsmolarityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarosmolarity_;
}

void ScalarOsmolarityData::ArenaDtor(void* object) {
  ScalarOsmolarityData* _this = reinterpret_cast< ScalarOsmolarityData* >(object);
  (void)_this;
}
void ScalarOsmolarityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarOsmolarityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarOsmolarityData& ScalarOsmolarityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarOsmolarityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarOsmolarityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarosmolarity_ != nullptr) {
    delete scalarosmolarity_;
  }
  scalarosmolarity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarOsmolarityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarOsmolarity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarosmolarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarOsmolarityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarOsmolarityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarOsmolarity = 1;
  if (this->has_scalarosmolarity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarosmolarity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarOsmolarityData)
  return target;
}

size_t ScalarOsmolarityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarOsmolarityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarOsmolarity = 1;
  if (this->has_scalarosmolarity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarosmolarity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarOsmolarityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarOsmolarityData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarOsmolarityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarOsmolarityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarOsmolarityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarOsmolarityData)
    MergeFrom(*source);
  }
}

void ScalarOsmolarityData::MergeFrom(const ScalarOsmolarityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarOsmolarityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarosmolarity()) {
    _internal_mutable_scalarosmolarity()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarosmolarity());
  }
}

void ScalarOsmolarityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarOsmolarityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarOsmolarityData::CopyFrom(const ScalarOsmolarityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarOsmolarityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarOsmolarityData::IsInitialized() const {
  return true;
}

void ScalarOsmolarityData::InternalSwap(ScalarOsmolarityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarosmolarity_, other->scalarosmolarity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarOsmolarityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPowerData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpower(const ScalarPowerData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPowerData::_Internal::scalarpower(const ScalarPowerData* msg) {
  return *msg->scalarpower_;
}
ScalarPowerData::ScalarPowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPowerData)
}
ScalarPowerData::ScalarPowerData(const ScalarPowerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpower()) {
    scalarpower_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpower_);
  } else {
    scalarpower_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPowerData)
}

void ScalarPowerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpower_ = nullptr;
}

ScalarPowerData::~ScalarPowerData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPowerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPowerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpower_;
}

void ScalarPowerData::ArenaDtor(void* object) {
  ScalarPowerData* _this = reinterpret_cast< ScalarPowerData* >(object);
  (void)_this;
}
void ScalarPowerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPowerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPowerData& ScalarPowerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPowerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPowerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpower_ != nullptr) {
    delete scalarpower_;
  }
  scalarpower_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPowerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpower(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPowerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPowerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPower = 1;
  if (this->has_scalarpower()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpower(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPowerData)
  return target;
}

size_t ScalarPowerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPowerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPower = 1;
  if (this->has_scalarpower()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpower_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPowerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPowerData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPowerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPowerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPowerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPowerData)
    MergeFrom(*source);
  }
}

void ScalarPowerData::MergeFrom(const ScalarPowerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPowerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpower()) {
    _internal_mutable_scalarpower()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpower());
  }
}

void ScalarPowerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPowerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPowerData::CopyFrom(const ScalarPowerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPowerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPowerData::IsInitialized() const {
  return true;
}

void ScalarPowerData::InternalSwap(ScalarPowerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpower_, other->scalarpower_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPowerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPowerPerAreaTemperatureToTheFourthData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpowerperareatemperaturetothefourth(const ScalarPowerPerAreaTemperatureToTheFourthData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPowerPerAreaTemperatureToTheFourthData::_Internal::scalarpowerperareatemperaturetothefourth(const ScalarPowerPerAreaTemperatureToTheFourthData* msg) {
  return *msg->scalarpowerperareatemperaturetothefourth_;
}
ScalarPowerPerAreaTemperatureToTheFourthData::ScalarPowerPerAreaTemperatureToTheFourthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
}
ScalarPowerPerAreaTemperatureToTheFourthData::ScalarPowerPerAreaTemperatureToTheFourthData(const ScalarPowerPerAreaTemperatureToTheFourthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpowerperareatemperaturetothefourth()) {
    scalarpowerperareatemperaturetothefourth_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpowerperareatemperaturetothefourth_);
  } else {
    scalarpowerperareatemperaturetothefourth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
}

void ScalarPowerPerAreaTemperatureToTheFourthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpowerperareatemperaturetothefourth_ = nullptr;
}

ScalarPowerPerAreaTemperatureToTheFourthData::~ScalarPowerPerAreaTemperatureToTheFourthData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPowerPerAreaTemperatureToTheFourthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpowerperareatemperaturetothefourth_;
}

void ScalarPowerPerAreaTemperatureToTheFourthData::ArenaDtor(void* object) {
  ScalarPowerPerAreaTemperatureToTheFourthData* _this = reinterpret_cast< ScalarPowerPerAreaTemperatureToTheFourthData* >(object);
  (void)_this;
}
void ScalarPowerPerAreaTemperatureToTheFourthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPowerPerAreaTemperatureToTheFourthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPowerPerAreaTemperatureToTheFourthData& ScalarPowerPerAreaTemperatureToTheFourthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPowerPerAreaTemperatureToTheFourthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPowerPerAreaTemperatureToTheFourthData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpowerperareatemperaturetothefourth_ != nullptr) {
    delete scalarpowerperareatemperaturetothefourth_;
  }
  scalarpowerperareatemperaturetothefourth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPowerPerAreaTemperatureToTheFourthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPowerPerAreaTemperatureToTheFourth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpowerperareatemperaturetothefourth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPowerPerAreaTemperatureToTheFourthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPowerPerAreaTemperatureToTheFourth = 1;
  if (this->has_scalarpowerperareatemperaturetothefourth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpowerperareatemperaturetothefourth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  return target;
}

size_t ScalarPowerPerAreaTemperatureToTheFourthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPowerPerAreaTemperatureToTheFourth = 1;
  if (this->has_scalarpowerperareatemperaturetothefourth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpowerperareatemperaturetothefourth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPowerPerAreaTemperatureToTheFourthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPowerPerAreaTemperatureToTheFourthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPowerPerAreaTemperatureToTheFourthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
    MergeFrom(*source);
  }
}

void ScalarPowerPerAreaTemperatureToTheFourthData::MergeFrom(const ScalarPowerPerAreaTemperatureToTheFourthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpowerperareatemperaturetothefourth()) {
    _internal_mutable_scalarpowerperareatemperaturetothefourth()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpowerperareatemperaturetothefourth());
  }
}

void ScalarPowerPerAreaTemperatureToTheFourthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPowerPerAreaTemperatureToTheFourthData::CopyFrom(const ScalarPowerPerAreaTemperatureToTheFourthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPowerPerAreaTemperatureToTheFourthData::IsInitialized() const {
  return true;
}

void ScalarPowerPerAreaTemperatureToTheFourthData::InternalSwap(ScalarPowerPerAreaTemperatureToTheFourthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpowerperareatemperaturetothefourth_, other->scalarpowerperareatemperaturetothefourth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPowerPerAreaTemperatureToTheFourthData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressure(const ScalarPressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressureData::_Internal::scalarpressure(const ScalarPressureData* msg) {
  return *msg->scalarpressure_;
}
ScalarPressureData::ScalarPressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressureData)
}
ScalarPressureData::ScalarPressureData(const ScalarPressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressure()) {
    scalarpressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressure_);
  } else {
    scalarpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressureData)
}

void ScalarPressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressure_ = nullptr;
}

ScalarPressureData::~ScalarPressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressure_;
}

void ScalarPressureData::ArenaDtor(void* object) {
  ScalarPressureData* _this = reinterpret_cast< ScalarPressureData* >(object);
  (void)_this;
}
void ScalarPressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressureData& ScalarPressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressure_ != nullptr) {
    delete scalarpressure_;
  }
  scalarpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressure = 1;
  if (this->has_scalarpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressureData)
  return target;
}

size_t ScalarPressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressure = 1;
  if (this->has_scalarpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressureData)
    MergeFrom(*source);
  }
}

void ScalarPressureData::MergeFrom(const ScalarPressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressure()) {
    _internal_mutable_scalarpressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressure());
  }
}

void ScalarPressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressureData::CopyFrom(const ScalarPressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressureData::IsInitialized() const {
  return true;
}

void ScalarPressureData::InternalSwap(ScalarPressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressure_, other->scalarpressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressurePerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressurepervolume(const ScalarPressurePerVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressurePerVolumeData::_Internal::scalarpressurepervolume(const ScalarPressurePerVolumeData* msg) {
  return *msg->scalarpressurepervolume_;
}
ScalarPressurePerVolumeData::ScalarPressurePerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressurePerVolumeData)
}
ScalarPressurePerVolumeData::ScalarPressurePerVolumeData(const ScalarPressurePerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressurepervolume()) {
    scalarpressurepervolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressurepervolume_);
  } else {
    scalarpressurepervolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressurePerVolumeData)
}

void ScalarPressurePerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressurepervolume_ = nullptr;
}

ScalarPressurePerVolumeData::~ScalarPressurePerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressurePerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressurePerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressurepervolume_;
}

void ScalarPressurePerVolumeData::ArenaDtor(void* object) {
  ScalarPressurePerVolumeData* _this = reinterpret_cast< ScalarPressurePerVolumeData* >(object);
  (void)_this;
}
void ScalarPressurePerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressurePerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressurePerVolumeData& ScalarPressurePerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressurePerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressurepervolume_ != nullptr) {
    delete scalarpressurepervolume_;
  }
  scalarpressurepervolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressurePerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressurePerVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressurepervolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressurePerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressurePerVolume = 1;
  if (this->has_scalarpressurepervolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressurepervolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressurePerVolumeData)
  return target;
}

size_t ScalarPressurePerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressurePerVolume = 1;
  if (this->has_scalarpressurepervolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressurepervolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressurePerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressurePerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressurePerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressurePerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressurePerVolumeData)
    MergeFrom(*source);
  }
}

void ScalarPressurePerVolumeData::MergeFrom(const ScalarPressurePerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressurepervolume()) {
    _internal_mutable_scalarpressurepervolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressurepervolume());
  }
}

void ScalarPressurePerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressurePerVolumeData::CopyFrom(const ScalarPressurePerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressurePerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressurePerVolumeData::IsInitialized() const {
  return true;
}

void ScalarPressurePerVolumeData::InternalSwap(ScalarPressurePerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressurepervolume_, other->scalarpressurepervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressurePerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressureTimePerVolumeAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressuretimepervolumearea(const ScalarPressureTimePerVolumeAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressureTimePerVolumeAreaData::_Internal::scalarpressuretimepervolumearea(const ScalarPressureTimePerVolumeAreaData* msg) {
  return *msg->scalarpressuretimepervolumearea_;
}
ScalarPressureTimePerVolumeAreaData::ScalarPressureTimePerVolumeAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
}
ScalarPressureTimePerVolumeAreaData::ScalarPressureTimePerVolumeAreaData(const ScalarPressureTimePerVolumeAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressuretimepervolumearea()) {
    scalarpressuretimepervolumearea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressuretimepervolumearea_);
  } else {
    scalarpressuretimepervolumearea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
}

void ScalarPressureTimePerVolumeAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressuretimepervolumearea_ = nullptr;
}

ScalarPressureTimePerVolumeAreaData::~ScalarPressureTimePerVolumeAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressureTimePerVolumeAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressuretimepervolumearea_;
}

void ScalarPressureTimePerVolumeAreaData::ArenaDtor(void* object) {
  ScalarPressureTimePerVolumeAreaData* _this = reinterpret_cast< ScalarPressureTimePerVolumeAreaData* >(object);
  (void)_this;
}
void ScalarPressureTimePerVolumeAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressureTimePerVolumeAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressureTimePerVolumeAreaData& ScalarPressureTimePerVolumeAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressureTimePerVolumeAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressuretimepervolumearea_ != nullptr) {
    delete scalarpressuretimepervolumearea_;
  }
  scalarpressuretimepervolumearea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressureTimePerVolumeAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolumeArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressuretimepervolumearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressureTimePerVolumeAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolumeArea = 1;
  if (this->has_scalarpressuretimepervolumearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressuretimepervolumearea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  return target;
}

size_t ScalarPressureTimePerVolumeAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolumeArea = 1;
  if (this->has_scalarpressuretimepervolumearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressuretimepervolumearea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressureTimePerVolumeAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressureTimePerVolumeAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressureTimePerVolumeAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
    MergeFrom(*source);
  }
}

void ScalarPressureTimePerVolumeAreaData::MergeFrom(const ScalarPressureTimePerVolumeAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressuretimepervolumearea()) {
    _internal_mutable_scalarpressuretimepervolumearea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressuretimepervolumearea());
  }
}

void ScalarPressureTimePerVolumeAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressureTimePerVolumeAreaData::CopyFrom(const ScalarPressureTimePerVolumeAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressureTimePerVolumeAreaData::IsInitialized() const {
  return true;
}

void ScalarPressureTimePerVolumeAreaData::InternalSwap(ScalarPressureTimePerVolumeAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressuretimepervolumearea_, other->scalarpressuretimepervolumearea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressureTimePerVolumeAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressureTimePerAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressuretimeperarea(const ScalarPressureTimePerAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressureTimePerAreaData::_Internal::scalarpressuretimeperarea(const ScalarPressureTimePerAreaData* msg) {
  return *msg->scalarpressuretimeperarea_;
}
ScalarPressureTimePerAreaData::ScalarPressureTimePerAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressureTimePerAreaData)
}
ScalarPressureTimePerAreaData::ScalarPressureTimePerAreaData(const ScalarPressureTimePerAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressuretimeperarea()) {
    scalarpressuretimeperarea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressuretimeperarea_);
  } else {
    scalarpressuretimeperarea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressureTimePerAreaData)
}

void ScalarPressureTimePerAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressuretimeperarea_ = nullptr;
}

ScalarPressureTimePerAreaData::~ScalarPressureTimePerAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressureTimePerAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressuretimeperarea_;
}

void ScalarPressureTimePerAreaData::ArenaDtor(void* object) {
  ScalarPressureTimePerAreaData* _this = reinterpret_cast< ScalarPressureTimePerAreaData* >(object);
  (void)_this;
}
void ScalarPressureTimePerAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressureTimePerAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressureTimePerAreaData& ScalarPressureTimePerAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressureTimePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressureTimePerAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressuretimeperarea_ != nullptr) {
    delete scalarpressuretimeperarea_;
  }
  scalarpressuretimeperarea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressureTimePerAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressureTimePerArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressuretimeperarea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressureTimePerAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerArea = 1;
  if (this->has_scalarpressuretimeperarea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressuretimeperarea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  return target;
}

size_t ScalarPressureTimePerAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerArea = 1;
  if (this->has_scalarpressuretimeperarea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressuretimeperarea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressureTimePerAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressureTimePerAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressureTimePerAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressureTimePerAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressureTimePerAreaData)
    MergeFrom(*source);
  }
}

void ScalarPressureTimePerAreaData::MergeFrom(const ScalarPressureTimePerAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressuretimeperarea()) {
    _internal_mutable_scalarpressuretimeperarea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressuretimeperarea());
  }
}

void ScalarPressureTimePerAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressureTimePerAreaData::CopyFrom(const ScalarPressureTimePerAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressureTimePerAreaData::IsInitialized() const {
  return true;
}

void ScalarPressureTimePerAreaData::InternalSwap(ScalarPressureTimePerAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressuretimeperarea_, other->scalarpressuretimeperarea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressureTimePerAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressureTimePerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressuretimepervolume(const ScalarPressureTimePerVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressureTimePerVolumeData::_Internal::scalarpressuretimepervolume(const ScalarPressureTimePerVolumeData* msg) {
  return *msg->scalarpressuretimepervolume_;
}
ScalarPressureTimePerVolumeData::ScalarPressureTimePerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
}
ScalarPressureTimePerVolumeData::ScalarPressureTimePerVolumeData(const ScalarPressureTimePerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressuretimepervolume()) {
    scalarpressuretimepervolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressuretimepervolume_);
  } else {
    scalarpressuretimepervolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
}

void ScalarPressureTimePerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressuretimepervolume_ = nullptr;
}

ScalarPressureTimePerVolumeData::~ScalarPressureTimePerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressureTimePerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressuretimepervolume_;
}

void ScalarPressureTimePerVolumeData::ArenaDtor(void* object) {
  ScalarPressureTimePerVolumeData* _this = reinterpret_cast< ScalarPressureTimePerVolumeData* >(object);
  (void)_this;
}
void ScalarPressureTimePerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressureTimePerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressureTimePerVolumeData& ScalarPressureTimePerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressureTimePerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressuretimepervolume_ != nullptr) {
    delete scalarpressuretimepervolume_;
  }
  scalarpressuretimepervolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressureTimePerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressuretimepervolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressureTimePerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolume = 1;
  if (this->has_scalarpressuretimepervolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressuretimepervolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  return target;
}

size_t ScalarPressureTimePerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimePerVolume = 1;
  if (this->has_scalarpressuretimepervolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressuretimepervolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressureTimePerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressureTimePerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressureTimePerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
    MergeFrom(*source);
  }
}

void ScalarPressureTimePerVolumeData::MergeFrom(const ScalarPressureTimePerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressuretimepervolume()) {
    _internal_mutable_scalarpressuretimepervolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressuretimepervolume());
  }
}

void ScalarPressureTimePerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressureTimePerVolumeData::CopyFrom(const ScalarPressureTimePerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressureTimePerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressureTimePerVolumeData::IsInitialized() const {
  return true;
}

void ScalarPressureTimePerVolumeData::InternalSwap(ScalarPressureTimePerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressuretimepervolume_, other->scalarpressuretimepervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressureTimePerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarPressureTimeSquaredPerVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarpressuretimesquaredpervolume(const ScalarPressureTimeSquaredPerVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarPressureTimeSquaredPerVolumeData::_Internal::scalarpressuretimesquaredpervolume(const ScalarPressureTimeSquaredPerVolumeData* msg) {
  return *msg->scalarpressuretimesquaredpervolume_;
}
ScalarPressureTimeSquaredPerVolumeData::ScalarPressureTimeSquaredPerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
}
ScalarPressureTimeSquaredPerVolumeData::ScalarPressureTimeSquaredPerVolumeData(const ScalarPressureTimeSquaredPerVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarpressuretimesquaredpervolume()) {
    scalarpressuretimesquaredpervolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarpressuretimesquaredpervolume_);
  } else {
    scalarpressuretimesquaredpervolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
}

void ScalarPressureTimeSquaredPerVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarpressuretimesquaredpervolume_ = nullptr;
}

ScalarPressureTimeSquaredPerVolumeData::~ScalarPressureTimeSquaredPerVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarPressureTimeSquaredPerVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarpressuretimesquaredpervolume_;
}

void ScalarPressureTimeSquaredPerVolumeData::ArenaDtor(void* object) {
  ScalarPressureTimeSquaredPerVolumeData* _this = reinterpret_cast< ScalarPressureTimeSquaredPerVolumeData* >(object);
  (void)_this;
}
void ScalarPressureTimeSquaredPerVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPressureTimeSquaredPerVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarPressureTimeSquaredPerVolumeData& ScalarPressureTimeSquaredPerVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarPressureTimeSquaredPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarPressureTimeSquaredPerVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarpressuretimesquaredpervolume_ != nullptr) {
    delete scalarpressuretimesquaredpervolume_;
  }
  scalarpressuretimesquaredpervolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPressureTimeSquaredPerVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarPressureTimeSquaredPerVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarpressuretimesquaredpervolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarPressureTimeSquaredPerVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimeSquaredPerVolume = 1;
  if (this->has_scalarpressuretimesquaredpervolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarpressuretimesquaredpervolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  return target;
}

size_t ScalarPressureTimeSquaredPerVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarPressureTimeSquaredPerVolume = 1;
  if (this->has_scalarpressuretimesquaredpervolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarpressuretimesquaredpervolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarPressureTimeSquaredPerVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarPressureTimeSquaredPerVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarPressureTimeSquaredPerVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
    MergeFrom(*source);
  }
}

void ScalarPressureTimeSquaredPerVolumeData::MergeFrom(const ScalarPressureTimeSquaredPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarpressuretimesquaredpervolume()) {
    _internal_mutable_scalarpressuretimesquaredpervolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarpressuretimesquaredpervolume());
  }
}

void ScalarPressureTimeSquaredPerVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPressureTimeSquaredPerVolumeData::CopyFrom(const ScalarPressureTimeSquaredPerVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarPressureTimeSquaredPerVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPressureTimeSquaredPerVolumeData::IsInitialized() const {
  return true;
}

void ScalarPressureTimeSquaredPerVolumeData::InternalSwap(ScalarPressureTimeSquaredPerVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarpressuretimesquaredpervolume_, other->scalarpressuretimesquaredpervolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPressureTimeSquaredPerVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalartime(const ScalarTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarTimeData::_Internal::scalartime(const ScalarTimeData* msg) {
  return *msg->scalartime_;
}
ScalarTimeData::ScalarTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarTimeData)
}
ScalarTimeData::ScalarTimeData(const ScalarTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalartime()) {
    scalartime_ = new ::pulse::cdm::bind::ScalarData(*from.scalartime_);
  } else {
    scalartime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarTimeData)
}

void ScalarTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalartime_ = nullptr;
}

ScalarTimeData::~ScalarTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalartime_;
}

void ScalarTimeData::ArenaDtor(void* object) {
  ScalarTimeData* _this = reinterpret_cast< ScalarTimeData* >(object);
  (void)_this;
}
void ScalarTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarTimeData& ScalarTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalartime_ != nullptr) {
    delete scalartime_;
  }
  scalartime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalartime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarTime = 1;
  if (this->has_scalartime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalartime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarTimeData)
  return target;
}

size_t ScalarTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarTime = 1;
  if (this->has_scalartime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalartime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarTimeData)
    MergeFrom(*source);
  }
}

void ScalarTimeData::MergeFrom(const ScalarTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalartime()) {
    _internal_mutable_scalartime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalartime());
  }
}

void ScalarTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarTimeData::CopyFrom(const ScalarTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarTimeData::IsInitialized() const {
  return true;
}

void ScalarTimeData::InternalSwap(ScalarTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalartime_, other->scalartime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarTemperatureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalartemperature(const ScalarTemperatureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarTemperatureData::_Internal::scalartemperature(const ScalarTemperatureData* msg) {
  return *msg->scalartemperature_;
}
ScalarTemperatureData::ScalarTemperatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarTemperatureData)
}
ScalarTemperatureData::ScalarTemperatureData(const ScalarTemperatureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalartemperature()) {
    scalartemperature_ = new ::pulse::cdm::bind::ScalarData(*from.scalartemperature_);
  } else {
    scalartemperature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarTemperatureData)
}

void ScalarTemperatureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalartemperature_ = nullptr;
}

ScalarTemperatureData::~ScalarTemperatureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarTemperatureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarTemperatureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalartemperature_;
}

void ScalarTemperatureData::ArenaDtor(void* object) {
  ScalarTemperatureData* _this = reinterpret_cast< ScalarTemperatureData* >(object);
  (void)_this;
}
void ScalarTemperatureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarTemperatureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarTemperatureData& ScalarTemperatureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarTemperatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalartemperature_ != nullptr) {
    delete scalartemperature_;
  }
  scalartemperature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarTemperatureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarTemperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalartemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarTemperatureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarTemperature = 1;
  if (this->has_scalartemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalartemperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarTemperatureData)
  return target;
}

size_t ScalarTemperatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarTemperatureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarTemperature = 1;
  if (this->has_scalartemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalartemperature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarTemperatureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarTemperatureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarTemperatureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarTemperatureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarTemperatureData)
    MergeFrom(*source);
  }
}

void ScalarTemperatureData::MergeFrom(const ScalarTemperatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalartemperature()) {
    _internal_mutable_scalartemperature()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalartemperature());
  }
}

void ScalarTemperatureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarTemperatureData::CopyFrom(const ScalarTemperatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarTemperatureData::IsInitialized() const {
  return true;
}

void ScalarTemperatureData::InternalSwap(ScalarTemperatureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalartemperature_, other->scalartemperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarTemperatureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolume(const ScalarVolumeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumeData::_Internal::scalarvolume(const ScalarVolumeData* msg) {
  return *msg->scalarvolume_;
}
ScalarVolumeData::ScalarVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumeData)
}
ScalarVolumeData::ScalarVolumeData(const ScalarVolumeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolume()) {
    scalarvolume_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolume_);
  } else {
    scalarvolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumeData)
}

void ScalarVolumeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolume_ = nullptr;
}

ScalarVolumeData::~ScalarVolumeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolume_;
}

void ScalarVolumeData::ArenaDtor(void* object) {
  ScalarVolumeData* _this = reinterpret_cast< ScalarVolumeData* >(object);
  (void)_this;
}
void ScalarVolumeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumeData& ScalarVolumeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolume_ != nullptr) {
    delete scalarvolume_;
  }
  scalarvolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolume = 1;
  if (this->has_scalarvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumeData)
  return target;
}

size_t ScalarVolumeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolume = 1;
  if (this->has_scalarvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumeData)
    MergeFrom(*source);
  }
}

void ScalarVolumeData::MergeFrom(const ScalarVolumeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolume()) {
    _internal_mutable_scalarvolume()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolume());
  }
}

void ScalarVolumeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumeData::CopyFrom(const ScalarVolumeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumeData::IsInitialized() const {
  return true;
}

void ScalarVolumeData::InternalSwap(ScalarVolumeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolume_, other->scalarvolume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumepertime(const ScalarVolumePerTimeData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerTimeData::_Internal::scalarvolumepertime(const ScalarVolumePerTimeData* msg) {
  return *msg->scalarvolumepertime_;
}
ScalarVolumePerTimeData::ScalarVolumePerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerTimeData)
}
ScalarVolumePerTimeData::ScalarVolumePerTimeData(const ScalarVolumePerTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumepertime()) {
    scalarvolumepertime_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumepertime_);
  } else {
    scalarvolumepertime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerTimeData)
}

void ScalarVolumePerTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumepertime_ = nullptr;
}

ScalarVolumePerTimeData::~ScalarVolumePerTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumepertime_;
}

void ScalarVolumePerTimeData::ArenaDtor(void* object) {
  ScalarVolumePerTimeData* _this = reinterpret_cast< ScalarVolumePerTimeData* >(object);
  (void)_this;
}
void ScalarVolumePerTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerTimeData& ScalarVolumePerTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumepertime_ != nullptr) {
    delete scalarvolumepertime_;
  }
  scalarvolumepertime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumepertime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTime = 1;
  if (this->has_scalarvolumepertime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumepertime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerTimeData)
  return target;
}

size_t ScalarVolumePerTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTime = 1;
  if (this->has_scalarvolumepertime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumepertime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerTimeData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerTimeData::MergeFrom(const ScalarVolumePerTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumepertime()) {
    _internal_mutable_scalarvolumepertime()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumepertime());
  }
}

void ScalarVolumePerTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerTimeData::CopyFrom(const ScalarVolumePerTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerTimeData::IsInitialized() const {
  return true;
}

void ScalarVolumePerTimeData::InternalSwap(ScalarVolumePerTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumepertime_, other->scalarvolumepertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerPressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumeperpressure(const ScalarVolumePerPressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerPressureData::_Internal::scalarvolumeperpressure(const ScalarVolumePerPressureData* msg) {
  return *msg->scalarvolumeperpressure_;
}
ScalarVolumePerPressureData::ScalarVolumePerPressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerPressureData)
}
ScalarVolumePerPressureData::ScalarVolumePerPressureData(const ScalarVolumePerPressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumeperpressure()) {
    scalarvolumeperpressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumeperpressure_);
  } else {
    scalarvolumeperpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerPressureData)
}

void ScalarVolumePerPressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumeperpressure_ = nullptr;
}

ScalarVolumePerPressureData::~ScalarVolumePerPressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerPressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerPressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumeperpressure_;
}

void ScalarVolumePerPressureData::ArenaDtor(void* object) {
  ScalarVolumePerPressureData* _this = reinterpret_cast< ScalarVolumePerPressureData* >(object);
  (void)_this;
}
void ScalarVolumePerPressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerPressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerPressureData& ScalarVolumePerPressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerPressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumeperpressure_ != nullptr) {
    delete scalarvolumeperpressure_;
  }
  scalarvolumeperpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerPressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerPressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumeperpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerPressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerPressure = 1;
  if (this->has_scalarvolumeperpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumeperpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerPressureData)
  return target;
}

size_t ScalarVolumePerPressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerPressure = 1;
  if (this->has_scalarvolumeperpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumeperpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerPressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerPressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerPressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerPressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerPressureData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerPressureData::MergeFrom(const ScalarVolumePerPressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumeperpressure()) {
    _internal_mutable_scalarvolumeperpressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumeperpressure());
  }
}

void ScalarVolumePerPressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerPressureData::CopyFrom(const ScalarVolumePerPressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerPressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerPressureData::IsInitialized() const {
  return true;
}

void ScalarVolumePerPressureData::InternalSwap(ScalarVolumePerPressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumeperpressure_, other->scalarvolumeperpressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerPressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerTimeAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumepertimearea(const ScalarVolumePerTimeAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerTimeAreaData::_Internal::scalarvolumepertimearea(const ScalarVolumePerTimeAreaData* msg) {
  return *msg->scalarvolumepertimearea_;
}
ScalarVolumePerTimeAreaData::ScalarVolumePerTimeAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
}
ScalarVolumePerTimeAreaData::ScalarVolumePerTimeAreaData(const ScalarVolumePerTimeAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumepertimearea()) {
    scalarvolumepertimearea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumepertimearea_);
  } else {
    scalarvolumepertimearea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
}

void ScalarVolumePerTimeAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumepertimearea_ = nullptr;
}

ScalarVolumePerTimeAreaData::~ScalarVolumePerTimeAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerTimeAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumepertimearea_;
}

void ScalarVolumePerTimeAreaData::ArenaDtor(void* object) {
  ScalarVolumePerTimeAreaData* _this = reinterpret_cast< ScalarVolumePerTimeAreaData* >(object);
  (void)_this;
}
void ScalarVolumePerTimeAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerTimeAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerTimeAreaData& ScalarVolumePerTimeAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerTimeAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumepertimearea_ != nullptr) {
    delete scalarvolumepertimearea_;
  }
  scalarvolumepertimearea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerTimeAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumepertimearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerTimeAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeArea = 1;
  if (this->has_scalarvolumepertimearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumepertimearea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  return target;
}

size_t ScalarVolumePerTimeAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeArea = 1;
  if (this->has_scalarvolumepertimearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumepertimearea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerTimeAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerTimeAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerTimeAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerTimeAreaData::MergeFrom(const ScalarVolumePerTimeAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumepertimearea()) {
    _internal_mutable_scalarvolumepertimearea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumepertimearea());
  }
}

void ScalarVolumePerTimeAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerTimeAreaData::CopyFrom(const ScalarVolumePerTimeAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerTimeAreaData::IsInitialized() const {
  return true;
}

void ScalarVolumePerTimeAreaData::InternalSwap(ScalarVolumePerTimeAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumepertimearea_, other->scalarvolumepertimearea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerTimeAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerTimeMassData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumepertimemass(const ScalarVolumePerTimeMassData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerTimeMassData::_Internal::scalarvolumepertimemass(const ScalarVolumePerTimeMassData* msg) {
  return *msg->scalarvolumepertimemass_;
}
ScalarVolumePerTimeMassData::ScalarVolumePerTimeMassData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerTimeMassData)
}
ScalarVolumePerTimeMassData::ScalarVolumePerTimeMassData(const ScalarVolumePerTimeMassData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumepertimemass()) {
    scalarvolumepertimemass_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumepertimemass_);
  } else {
    scalarvolumepertimemass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerTimeMassData)
}

void ScalarVolumePerTimeMassData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumepertimemass_ = nullptr;
}

ScalarVolumePerTimeMassData::~ScalarVolumePerTimeMassData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerTimeMassData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumepertimemass_;
}

void ScalarVolumePerTimeMassData::ArenaDtor(void* object) {
  ScalarVolumePerTimeMassData* _this = reinterpret_cast< ScalarVolumePerTimeMassData* >(object);
  (void)_this;
}
void ScalarVolumePerTimeMassData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerTimeMassData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerTimeMassData& ScalarVolumePerTimeMassData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerTimeMassData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumepertimemass_ != nullptr) {
    delete scalarvolumepertimemass_;
  }
  scalarvolumepertimemass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerTimeMassData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeMass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumepertimemass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerTimeMassData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeMass = 1;
  if (this->has_scalarvolumepertimemass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumepertimemass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  return target;
}

size_t ScalarVolumePerTimeMassData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimeMass = 1;
  if (this->has_scalarvolumepertimemass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumepertimemass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerTimeMassData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerTimeMassData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerTimeMassData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerTimeMassData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerTimeMassData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerTimeMassData::MergeFrom(const ScalarVolumePerTimeMassData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumepertimemass()) {
    _internal_mutable_scalarvolumepertimemass()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumepertimemass());
  }
}

void ScalarVolumePerTimeMassData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerTimeMassData::CopyFrom(const ScalarVolumePerTimeMassData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimeMassData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerTimeMassData::IsInitialized() const {
  return true;
}

void ScalarVolumePerTimeMassData::InternalSwap(ScalarVolumePerTimeMassData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumepertimemass_, other->scalarvolumepertimemass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerTimeMassData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerTimePressureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumepertimepressure(const ScalarVolumePerTimePressureData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerTimePressureData::_Internal::scalarvolumepertimepressure(const ScalarVolumePerTimePressureData* msg) {
  return *msg->scalarvolumepertimepressure_;
}
ScalarVolumePerTimePressureData::ScalarVolumePerTimePressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerTimePressureData)
}
ScalarVolumePerTimePressureData::ScalarVolumePerTimePressureData(const ScalarVolumePerTimePressureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumepertimepressure()) {
    scalarvolumepertimepressure_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumepertimepressure_);
  } else {
    scalarvolumepertimepressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerTimePressureData)
}

void ScalarVolumePerTimePressureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumepertimepressure_ = nullptr;
}

ScalarVolumePerTimePressureData::~ScalarVolumePerTimePressureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerTimePressureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumepertimepressure_;
}

void ScalarVolumePerTimePressureData::ArenaDtor(void* object) {
  ScalarVolumePerTimePressureData* _this = reinterpret_cast< ScalarVolumePerTimePressureData* >(object);
  (void)_this;
}
void ScalarVolumePerTimePressureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerTimePressureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerTimePressureData& ScalarVolumePerTimePressureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerTimePressureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumepertimepressure_ != nullptr) {
    delete scalarvolumepertimepressure_;
  }
  scalarvolumepertimepressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerTimePressureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumepertimepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerTimePressureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressure = 1;
  if (this->has_scalarvolumepertimepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumepertimepressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  return target;
}

size_t ScalarVolumePerTimePressureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressure = 1;
  if (this->has_scalarvolumepertimepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumepertimepressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerTimePressureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerTimePressureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerTimePressureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerTimePressureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerTimePressureData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerTimePressureData::MergeFrom(const ScalarVolumePerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumepertimepressure()) {
    _internal_mutable_scalarvolumepertimepressure()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumepertimepressure());
  }
}

void ScalarVolumePerTimePressureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerTimePressureData::CopyFrom(const ScalarVolumePerTimePressureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerTimePressureData::IsInitialized() const {
  return true;
}

void ScalarVolumePerTimePressureData::InternalSwap(ScalarVolumePerTimePressureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumepertimepressure_, other->scalarvolumepertimepressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerTimePressureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScalarVolumePerTimePressureAreaData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& scalarvolumepertimepressurearea(const ScalarVolumePerTimePressureAreaData* msg);
};

const ::pulse::cdm::bind::ScalarData&
ScalarVolumePerTimePressureAreaData::_Internal::scalarvolumepertimepressurearea(const ScalarVolumePerTimePressureAreaData* msg) {
  return *msg->scalarvolumepertimepressurearea_;
}
ScalarVolumePerTimePressureAreaData::ScalarVolumePerTimePressureAreaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
}
ScalarVolumePerTimePressureAreaData::ScalarVolumePerTimePressureAreaData(const ScalarVolumePerTimePressureAreaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalarvolumepertimepressurearea()) {
    scalarvolumepertimepressurearea_ = new ::pulse::cdm::bind::ScalarData(*from.scalarvolumepertimepressurearea_);
  } else {
    scalarvolumepertimepressurearea_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
}

void ScalarVolumePerTimePressureAreaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  scalarvolumepertimepressurearea_ = nullptr;
}

ScalarVolumePerTimePressureAreaData::~ScalarVolumePerTimePressureAreaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarVolumePerTimePressureAreaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalarvolumepertimepressurearea_;
}

void ScalarVolumePerTimePressureAreaData::ArenaDtor(void* object) {
  ScalarVolumePerTimePressureAreaData* _this = reinterpret_cast< ScalarVolumePerTimePressureAreaData* >(object);
  (void)_this;
}
void ScalarVolumePerTimePressureAreaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarVolumePerTimePressureAreaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScalarVolumePerTimePressureAreaData& ScalarVolumePerTimePressureAreaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ScalarVolumePerTimePressureAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scalarvolumepertimepressurearea_ != nullptr) {
    delete scalarvolumepertimepressurearea_;
  }
  scalarvolumepertimepressurearea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarVolumePerTimePressureAreaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressureArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalarvolumepertimepressurearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarVolumePerTimePressureAreaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressureArea = 1;
  if (this->has_scalarvolumepertimepressurearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalarvolumepertimepressurearea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  return target;
}

size_t ScalarVolumePerTimePressureAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ScalarVolumePerTimePressureArea = 1;
  if (this->has_scalarvolumepertimepressurearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalarvolumepertimepressurearea_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarVolumePerTimePressureAreaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarVolumePerTimePressureAreaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarVolumePerTimePressureAreaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
    MergeFrom(*source);
  }
}

void ScalarVolumePerTimePressureAreaData::MergeFrom(const ScalarVolumePerTimePressureAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scalarvolumepertimepressurearea()) {
    _internal_mutable_scalarvolumepertimepressurearea()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_scalarvolumepertimepressurearea());
  }
}

void ScalarVolumePerTimePressureAreaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarVolumePerTimePressureAreaData::CopyFrom(const ScalarVolumePerTimePressureAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScalarVolumePerTimePressureAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarVolumePerTimePressureAreaData::IsInitialized() const {
  return true;
}

void ScalarVolumePerTimePressureAreaData::InternalSwap(ScalarVolumePerTimePressureAreaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scalarvolumepertimepressurearea_, other->scalarvolumepertimepressurearea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarVolumePerTimePressureAreaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleArrayData::_Internal {
 public:
};

DoubleArrayData::DoubleArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.DoubleArrayData)
}
DoubleArrayData::DoubleArrayData(const DoubleArrayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DoubleArrayData)
}

void DoubleArrayData::SharedCtor() {
}

DoubleArrayData::~DoubleArrayData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DoubleArrayData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleArrayData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleArrayData::ArenaDtor(void* object) {
  DoubleArrayData* _this = reinterpret_cast< DoubleArrayData* >(object);
  (void)_this;
}
void DoubleArrayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleArrayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleArrayData& DoubleArrayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void DoubleArrayData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DoubleArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleArrayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double Value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleArrayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DoubleArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double Value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DoubleArrayData)
  return target;
}

size_t DoubleArrayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DoubleArrayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleArrayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DoubleArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleArrayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleArrayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DoubleArrayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DoubleArrayData)
    MergeFrom(*source);
  }
}

void DoubleArrayData::MergeFrom(const DoubleArrayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DoubleArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void DoubleArrayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DoubleArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArrayData::CopyFrom(const DoubleArrayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DoubleArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArrayData::IsInitialized() const {
  return true;
}

void DoubleArrayData::InternalSwap(DoubleArrayData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleArrayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerArrayData::_Internal {
 public:
};

IntegerArrayData::IntegerArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.IntegerArrayData)
}
IntegerArrayData::IntegerArrayData(const IntegerArrayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.IntegerArrayData)
}

void IntegerArrayData::SharedCtor() {
}

IntegerArrayData::~IntegerArrayData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.IntegerArrayData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerArrayData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerArrayData::ArenaDtor(void* object) {
  IntegerArrayData* _this = reinterpret_cast< IntegerArrayData* >(object);
  (void)_this;
}
void IntegerArrayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerArrayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerArrayData& IntegerArrayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void IntegerArrayData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.IntegerArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerArrayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 Value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerArrayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.IntegerArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.IntegerArrayData)
  return target;
}

size_t IntegerArrayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.IntegerArrayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerArrayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.IntegerArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerArrayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerArrayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.IntegerArrayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.IntegerArrayData)
    MergeFrom(*source);
  }
}

void IntegerArrayData::MergeFrom(const IntegerArrayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.IntegerArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void IntegerArrayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.IntegerArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerArrayData::CopyFrom(const IntegerArrayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.IntegerArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerArrayData::IsInitialized() const {
  return true;
}

void IntegerArrayData::InternalSwap(IntegerArrayData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerArrayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayData::_Internal {
 public:
  static const ::pulse::cdm::bind::DoubleArrayData& value(const ArrayData* msg);
};

const ::pulse::cdm::bind::DoubleArrayData&
ArrayData::_Internal::value(const ArrayData* msg) {
  return *msg->value_;
}
ArrayData::ArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ArrayData)
}
ArrayData::ArrayData(const ArrayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::pulse::cdm::bind::DoubleArrayData(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ArrayData)
}

void ArrayData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

ArrayData::~ArrayData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ArrayData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void ArrayData::ArenaDtor(void* object) {
  ArrayData* _this = reinterpret_cast< ArrayData* >(object);
  (void)_this;
}
void ArrayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayData& ArrayData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ArrayData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.ClearToEmpty();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DoubleArrayData Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ArrayData.Unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ArrayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DoubleArrayData Value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // string Unit = 2;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ArrayData.Unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ArrayData)
  return target;
}

size_t ArrayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ArrayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Unit = 2;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // .pulse.cdm.bind.DoubleArrayData Value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ArrayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ArrayData)
    MergeFrom(*source);
  }
}

void ArrayData::MergeFrom(const ArrayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::pulse::cdm::bind::DoubleArrayData::MergeFrom(from._internal_value());
  }
}

void ArrayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayData::CopyFrom(const ArrayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayData::IsInitialized() const {
  return true;
}

void ArrayData::InternalSwap(ArrayData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ArrayData& arraytime(const ArrayTimeData* msg);
};

const ::pulse::cdm::bind::ArrayData&
ArrayTimeData::_Internal::arraytime(const ArrayTimeData* msg) {
  return *msg->arraytime_;
}
ArrayTimeData::ArrayTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ArrayTimeData)
}
ArrayTimeData::ArrayTimeData(const ArrayTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arraytime()) {
    arraytime_ = new ::pulse::cdm::bind::ArrayData(*from.arraytime_);
  } else {
    arraytime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ArrayTimeData)
}

void ArrayTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  arraytime_ = nullptr;
}

ArrayTimeData::~ArrayTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ArrayTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete arraytime_;
}

void ArrayTimeData::ArenaDtor(void* object) {
  ArrayTimeData* _this = reinterpret_cast< ArrayTimeData* >(object);
  (void)_this;
}
void ArrayTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayTimeData& ArrayTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void ArrayTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ArrayTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && arraytime_ != nullptr) {
    delete arraytime_;
  }
  arraytime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ArrayData ArrayTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arraytime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ArrayTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ArrayData ArrayTime = 1;
  if (this->has_arraytime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::arraytime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ArrayTimeData)
  return target;
}

size_t ArrayTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ArrayTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ArrayData ArrayTime = 1;
  if (this->has_arraytime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arraytime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ArrayTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ArrayTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ArrayTimeData)
    MergeFrom(*source);
  }
}

void ArrayTimeData::MergeFrom(const ArrayTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ArrayTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arraytime()) {
    _internal_mutable_arraytime()->::pulse::cdm::bind::ArrayData::MergeFrom(from._internal_arraytime());
  }
}

void ArrayTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ArrayTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayTimeData::CopyFrom(const ArrayTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ArrayTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayTimeData::IsInitialized() const {
  return true;
}

void ArrayTimeData::InternalSwap(ArrayTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(arraytime_, other->arraytime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FunctionData::_Internal {
 public:
  static const ::pulse::cdm::bind::DoubleArrayData& dependent(const FunctionData* msg);
  static const ::pulse::cdm::bind::DoubleArrayData& independent(const FunctionData* msg);
};

const ::pulse::cdm::bind::DoubleArrayData&
FunctionData::_Internal::dependent(const FunctionData* msg) {
  return *msg->dependent_;
}
const ::pulse::cdm::bind::DoubleArrayData&
FunctionData::_Internal::independent(const FunctionData* msg) {
  return *msg->independent_;
}
FunctionData::FunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FunctionData)
}
FunctionData::FunctionData(const FunctionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dependentunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dependentunit().empty()) {
    dependentunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dependentunit(), 
      GetArena());
  }
  independentunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_independentunit().empty()) {
    independentunit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_independentunit(), 
      GetArena());
  }
  if (from._internal_has_dependent()) {
    dependent_ = new ::pulse::cdm::bind::DoubleArrayData(*from.dependent_);
  } else {
    dependent_ = nullptr;
  }
  if (from._internal_has_independent()) {
    independent_ = new ::pulse::cdm::bind::DoubleArrayData(*from.independent_);
  } else {
    independent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FunctionData)
}

void FunctionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  dependentunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  independentunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dependent_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&independent_) -
      reinterpret_cast<char*>(&dependent_)) + sizeof(independent_));
}

FunctionData::~FunctionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FunctionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dependentunit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  independentunit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dependent_;
  if (this != internal_default_instance()) delete independent_;
}

void FunctionData::ArenaDtor(void* object) {
  FunctionData* _this = reinterpret_cast< FunctionData* >(object);
  (void)_this;
}
void FunctionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionData& FunctionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void FunctionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FunctionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependentunit_.ClearToEmpty();
  independentunit_.ClearToEmpty();
  if (GetArena() == nullptr && dependent_ != nullptr) {
    delete dependent_;
  }
  dependent_ = nullptr;
  if (GetArena() == nullptr && independent_ != nullptr) {
    delete independent_;
  }
  independent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.DoubleArrayData Dependent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DoubleArrayData Independent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_independent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DependentUnit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dependentunit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.FunctionData.DependentUnit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IndependentUnit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_independentunit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.FunctionData.IndependentUnit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FunctionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.DoubleArrayData Dependent = 1;
  if (this->has_dependent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dependent(this), target, stream);
  }

  // .pulse.cdm.bind.DoubleArrayData Independent = 2;
  if (this->has_independent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::independent(this), target, stream);
  }

  // string DependentUnit = 3;
  if (this->dependentunit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dependentunit().data(), static_cast<int>(this->_internal_dependentunit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.FunctionData.DependentUnit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dependentunit(), target);
  }

  // string IndependentUnit = 4;
  if (this->independentunit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_independentunit().data(), static_cast<int>(this->_internal_independentunit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.FunctionData.IndependentUnit");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_independentunit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FunctionData)
  return target;
}

size_t FunctionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FunctionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DependentUnit = 3;
  if (this->dependentunit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dependentunit());
  }

  // string IndependentUnit = 4;
  if (this->independentunit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_independentunit());
  }

  // .pulse.cdm.bind.DoubleArrayData Dependent = 1;
  if (this->has_dependent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependent_);
  }

  // .pulse.cdm.bind.DoubleArrayData Independent = 2;
  if (this->has_independent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *independent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FunctionData)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FunctionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FunctionData)
    MergeFrom(*source);
  }
}

void FunctionData::MergeFrom(const FunctionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FunctionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dependentunit().size() > 0) {
    _internal_set_dependentunit(from._internal_dependentunit());
  }
  if (from.independentunit().size() > 0) {
    _internal_set_independentunit(from._internal_independentunit());
  }
  if (from.has_dependent()) {
    _internal_mutable_dependent()->::pulse::cdm::bind::DoubleArrayData::MergeFrom(from._internal_dependent());
  }
  if (from.has_independent()) {
    _internal_mutable_independent()->::pulse::cdm::bind::DoubleArrayData::MergeFrom(from._internal_independent());
  }
}

void FunctionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionData::CopyFrom(const FunctionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionData::IsInitialized() const {
  return true;
}

void FunctionData::InternalSwap(FunctionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dependentunit_.Swap(&other->dependentunit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  independentunit_.Swap(&other->independentunit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionData, independent_)
      + sizeof(FunctionData::independent_)
      - PROTOBUF_FIELD_OFFSET(FunctionData, dependent_)>(
          reinterpret_cast<char*>(&dependent_),
          reinterpret_cast<char*>(&other->dependent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FunctionVolumeVsTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::FunctionData& functionvolumevstime(const FunctionVolumeVsTimeData* msg);
};

const ::pulse::cdm::bind::FunctionData&
FunctionVolumeVsTimeData::_Internal::functionvolumevstime(const FunctionVolumeVsTimeData* msg) {
  return *msg->functionvolumevstime_;
}
FunctionVolumeVsTimeData::FunctionVolumeVsTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FunctionVolumeVsTimeData)
}
FunctionVolumeVsTimeData::FunctionVolumeVsTimeData(const FunctionVolumeVsTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_functionvolumevstime()) {
    functionvolumevstime_ = new ::pulse::cdm::bind::FunctionData(*from.functionvolumevstime_);
  } else {
    functionvolumevstime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FunctionVolumeVsTimeData)
}

void FunctionVolumeVsTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  functionvolumevstime_ = nullptr;
}

FunctionVolumeVsTimeData::~FunctionVolumeVsTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FunctionVolumeVsTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionVolumeVsTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete functionvolumevstime_;
}

void FunctionVolumeVsTimeData::ArenaDtor(void* object) {
  FunctionVolumeVsTimeData* _this = reinterpret_cast< FunctionVolumeVsTimeData* >(object);
  (void)_this;
}
void FunctionVolumeVsTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionVolumeVsTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionVolumeVsTimeData& FunctionVolumeVsTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void FunctionVolumeVsTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && functionvolumevstime_ != nullptr) {
    delete functionvolumevstime_;
  }
  functionvolumevstime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionVolumeVsTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FunctionData FunctionVolumeVsTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionvolumevstime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionVolumeVsTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData FunctionVolumeVsTime = 1;
  if (this->has_functionvolumevstime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::functionvolumevstime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FunctionVolumeVsTimeData)
  return target;
}

size_t FunctionVolumeVsTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData FunctionVolumeVsTime = 1;
  if (this->has_functionvolumevstime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *functionvolumevstime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionVolumeVsTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionVolumeVsTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionVolumeVsTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FunctionVolumeVsTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FunctionVolumeVsTimeData)
    MergeFrom(*source);
  }
}

void FunctionVolumeVsTimeData::MergeFrom(const FunctionVolumeVsTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_functionvolumevstime()) {
    _internal_mutable_functionvolumevstime()->::pulse::cdm::bind::FunctionData::MergeFrom(from._internal_functionvolumevstime());
  }
}

void FunctionVolumeVsTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionVolumeVsTimeData::CopyFrom(const FunctionVolumeVsTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FunctionVolumeVsTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionVolumeVsTimeData::IsInitialized() const {
  return true;
}

void FunctionVolumeVsTimeData::InternalSwap(FunctionVolumeVsTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(functionvolumevstime_, other->functionvolumevstime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionVolumeVsTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FunctionElectricPotentialVsTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::FunctionData& functionelectricpotentialvstime(const FunctionElectricPotentialVsTimeData* msg);
};

const ::pulse::cdm::bind::FunctionData&
FunctionElectricPotentialVsTimeData::_Internal::functionelectricpotentialvstime(const FunctionElectricPotentialVsTimeData* msg) {
  return *msg->functionelectricpotentialvstime_;
}
FunctionElectricPotentialVsTimeData::FunctionElectricPotentialVsTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
}
FunctionElectricPotentialVsTimeData::FunctionElectricPotentialVsTimeData(const FunctionElectricPotentialVsTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_functionelectricpotentialvstime()) {
    functionelectricpotentialvstime_ = new ::pulse::cdm::bind::FunctionData(*from.functionelectricpotentialvstime_);
  } else {
    functionelectricpotentialvstime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
}

void FunctionElectricPotentialVsTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  functionelectricpotentialvstime_ = nullptr;
}

FunctionElectricPotentialVsTimeData::~FunctionElectricPotentialVsTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctionElectricPotentialVsTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete functionelectricpotentialvstime_;
}

void FunctionElectricPotentialVsTimeData::ArenaDtor(void* object) {
  FunctionElectricPotentialVsTimeData* _this = reinterpret_cast< FunctionElectricPotentialVsTimeData* >(object);
  (void)_this;
}
void FunctionElectricPotentialVsTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionElectricPotentialVsTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionElectricPotentialVsTimeData& FunctionElectricPotentialVsTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void FunctionElectricPotentialVsTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && functionelectricpotentialvstime_ != nullptr) {
    delete functionelectricpotentialvstime_;
  }
  functionelectricpotentialvstime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionElectricPotentialVsTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FunctionData FunctionElectricPotentialVsTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionelectricpotentialvstime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionElectricPotentialVsTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData FunctionElectricPotentialVsTime = 1;
  if (this->has_functionelectricpotentialvstime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::functionelectricpotentialvstime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  return target;
}

size_t FunctionElectricPotentialVsTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData FunctionElectricPotentialVsTime = 1;
  if (this->has_functionelectricpotentialvstime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *functionelectricpotentialvstime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionElectricPotentialVsTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionElectricPotentialVsTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionElectricPotentialVsTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
    MergeFrom(*source);
  }
}

void FunctionElectricPotentialVsTimeData::MergeFrom(const FunctionElectricPotentialVsTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_functionelectricpotentialvstime()) {
    _internal_mutable_functionelectricpotentialvstime()->::pulse::cdm::bind::FunctionData::MergeFrom(from._internal_functionelectricpotentialvstime());
  }
}

void FunctionElectricPotentialVsTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionElectricPotentialVsTimeData::CopyFrom(const FunctionElectricPotentialVsTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FunctionElectricPotentialVsTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionElectricPotentialVsTimeData::IsInitialized() const {
  return true;
}

void FunctionElectricPotentialVsTimeData::InternalSwap(FunctionElectricPotentialVsTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(functionelectricpotentialvstime_, other->functionelectricpotentialvstime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionElectricPotentialVsTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistogramData::_Internal {
 public:
  static const ::pulse::cdm::bind::FunctionData& histogram(const HistogramData* msg);
};

const ::pulse::cdm::bind::FunctionData&
HistogramData::_Internal::histogram(const HistogramData* msg) {
  return *msg->histogram_;
}
HistogramData::HistogramData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.HistogramData)
}
HistogramData::HistogramData(const HistogramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_histogram()) {
    histogram_ = new ::pulse::cdm::bind::FunctionData(*from.histogram_);
  } else {
    histogram_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.HistogramData)
}

void HistogramData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  histogram_ = nullptr;
}

HistogramData::~HistogramData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.HistogramData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete histogram_;
}

void HistogramData::ArenaDtor(void* object) {
  HistogramData* _this = reinterpret_cast< HistogramData* >(object);
  (void)_this;
}
void HistogramData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramData& HistogramData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistogramData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void HistogramData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.HistogramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && histogram_ != nullptr) {
    delete histogram_;
  }
  histogram_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FunctionData Histogram = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.HistogramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData Histogram = 1;
  if (this->has_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::histogram(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.HistogramData)
  return target;
}

size_t HistogramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.HistogramData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FunctionData Histogram = 1;
  if (this->has_histogram()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *histogram_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.HistogramData)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.HistogramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.HistogramData)
    MergeFrom(*source);
  }
}

void HistogramData::MergeFrom(const HistogramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.HistogramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_histogram()) {
    _internal_mutable_histogram()->::pulse::cdm::bind::FunctionData::MergeFrom(from._internal_histogram());
  }
}

void HistogramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.HistogramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramData::CopyFrom(const HistogramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.HistogramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramData::IsInitialized() const {
  return true;
}

void HistogramData::InternalSwap(HistogramData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(histogram_, other->histogram_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistogramFractionVsLengthData::_Internal {
 public:
  static const ::pulse::cdm::bind::HistogramData& histogramfractionvslength(const HistogramFractionVsLengthData* msg);
};

const ::pulse::cdm::bind::HistogramData&
HistogramFractionVsLengthData::_Internal::histogramfractionvslength(const HistogramFractionVsLengthData* msg) {
  return *msg->histogramfractionvslength_;
}
HistogramFractionVsLengthData::HistogramFractionVsLengthData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.HistogramFractionVsLengthData)
}
HistogramFractionVsLengthData::HistogramFractionVsLengthData(const HistogramFractionVsLengthData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_histogramfractionvslength()) {
    histogramfractionvslength_ = new ::pulse::cdm::bind::HistogramData(*from.histogramfractionvslength_);
  } else {
    histogramfractionvslength_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.HistogramFractionVsLengthData)
}

void HistogramFractionVsLengthData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  histogramfractionvslength_ = nullptr;
}

HistogramFractionVsLengthData::~HistogramFractionVsLengthData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.HistogramFractionVsLengthData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramFractionVsLengthData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete histogramfractionvslength_;
}

void HistogramFractionVsLengthData::ArenaDtor(void* object) {
  HistogramFractionVsLengthData* _this = reinterpret_cast< HistogramFractionVsLengthData* >(object);
  (void)_this;
}
void HistogramFractionVsLengthData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramFractionVsLengthData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramFractionVsLengthData& HistogramFractionVsLengthData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base);
  return *internal_default_instance();
}


void HistogramFractionVsLengthData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && histogramfractionvslength_ != nullptr) {
    delete histogramfractionvslength_;
  }
  histogramfractionvslength_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramFractionVsLengthData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.HistogramData HistogramFractionVsLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogramfractionvslength(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramFractionVsLengthData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.HistogramData HistogramFractionVsLength = 1;
  if (this->has_histogramfractionvslength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::histogramfractionvslength(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.HistogramFractionVsLengthData)
  return target;
}

size_t HistogramFractionVsLengthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.HistogramData HistogramFractionVsLength = 1;
  if (this->has_histogramfractionvslength()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *histogramfractionvslength_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramFractionVsLengthData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramFractionVsLengthData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramFractionVsLengthData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.HistogramFractionVsLengthData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.HistogramFractionVsLengthData)
    MergeFrom(*source);
  }
}

void HistogramFractionVsLengthData::MergeFrom(const HistogramFractionVsLengthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_histogramfractionvslength()) {
    _internal_mutable_histogramfractionvslength()->::pulse::cdm::bind::HistogramData::MergeFrom(from._internal_histogramfractionvslength());
  }
}

void HistogramFractionVsLengthData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramFractionVsLengthData::CopyFrom(const HistogramFractionVsLengthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.HistogramFractionVsLengthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramFractionVsLengthData::IsInitialized() const {
  return true;
}

void HistogramFractionVsLengthData::InternalSwap(HistogramFractionVsLengthData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(histogramfractionvslength_, other->histogramfractionvslength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramFractionVsLengthData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::RunningAverageData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::RunningAverageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::RunningAverageData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPropertyData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPropertyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPropertyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::Scalar0To1Data* Arena::CreateMaybeMessage< ::pulse::cdm::bind::Scalar0To1Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::Scalar0To1Data >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarNegative1To1Data* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarNegative1To1Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarNegative1To1Data >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAmountData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAmountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAmountData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAmountPerMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAmountPerMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAmountPerMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAmountPerTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAmountPerTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAmountPerTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAmountPerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAmountPerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAmountPerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarAreaPerTimePressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarAreaPerTimePressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarAreaPerTimePressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricCapacitanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricCapacitanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricCapacitanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricChargeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricChargeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricChargeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricCurrentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricCurrentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricCurrentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricPotentialData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricPotentialData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricPotentialData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricInductanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricInductanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricInductanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarElectricResistanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarElectricResistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarElectricResistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarEnergyData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarEnergyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarEnergyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarEnergyPerAmountData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarEnergyPerAmountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarEnergyPerAmountData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarEnergyPerMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarEnergyPerMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarEnergyPerMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarForceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarForceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarForceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarFrequencyData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarFrequencyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarFrequencyData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatCapacitanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatCapacitanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatCapacitanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatConductanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatConductanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatConductanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatConductancePerAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatConductancePerAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatInductanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatInductanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatInductanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatResistanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatResistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatResistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarHeatResistanceAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarHeatResistanceAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarHeatResistanceAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarInversePressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarInversePressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarInversePressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarInverseVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarInverseVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarInverseVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarLengthData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarLengthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarLengthData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarLengthPerTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarLengthPerTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarLengthPerTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarLengthPerTimePressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarLengthPerTimePressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarLengthPerTimePressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassPerAmountData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassPerAmountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassPerAmountData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassPerAreaTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassPerAreaTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassPerAreaTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassPerMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassPerMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassPerMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassPerTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassPerTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassPerTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarMassPerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarMassPerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarMassPerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarOsmolalityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarOsmolalityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarOsmolalityData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarOsmolarityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarOsmolarityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarOsmolarityData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPowerData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPowerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPowerData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressurePerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressurePerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressurePerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressureTimePerAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressureTimePerAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressureTimePerAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressureTimePerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressureTimePerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarPressureTimeSquaredPerVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarTemperatureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarTemperatureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarTemperatureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerPressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerPressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerPressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerTimeAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerTimeAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerTimeMassData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerTimeMassData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerTimeMassData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerTimePressureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerTimePressureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerTimePressureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DoubleArrayData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DoubleArrayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::DoubleArrayData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::IntegerArrayData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::IntegerArrayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::IntegerArrayData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ArrayData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ArrayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ArrayData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ArrayTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ArrayTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ArrayTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FunctionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FunctionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FunctionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FunctionVolumeVsTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FunctionVolumeVsTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FunctionVolumeVsTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::HistogramData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::HistogramData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::HistogramData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::HistogramFractionVsLengthData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::HistogramFractionVsLengthData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::HistogramFractionVsLengthData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
