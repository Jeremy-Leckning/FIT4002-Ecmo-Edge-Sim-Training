// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/TestReport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fTestReport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fTestReport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fTestReport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class TestCaseData;
class TestCaseDataDefaultTypeInternal;
extern TestCaseDataDefaultTypeInternal _TestCaseData_default_instance_;
class TestErrorStatisticsData;
class TestErrorStatisticsDataDefaultTypeInternal;
extern TestErrorStatisticsDataDefaultTypeInternal _TestErrorStatisticsData_default_instance_;
class TestReportData;
class TestReportDataDefaultTypeInternal;
extern TestReportDataDefaultTypeInternal _TestReportData_default_instance_;
class TestSuiteData;
class TestSuiteDataDefaultTypeInternal;
extern TestSuiteDataDefaultTypeInternal _TestSuiteData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::TestCaseData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TestCaseData>(Arena*);
template<> ::pulse::cdm::bind::TestErrorStatisticsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TestErrorStatisticsData>(Arena*);
template<> ::pulse::cdm::bind::TestReportData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TestReportData>(Arena*);
template<> ::pulse::cdm::bind::TestSuiteData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TestSuiteData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class TestErrorStatisticsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TestErrorStatisticsData) */ {
 public:
  inline TestErrorStatisticsData() : TestErrorStatisticsData(nullptr) {}
  virtual ~TestErrorStatisticsData();

  TestErrorStatisticsData(const TestErrorStatisticsData& from);
  TestErrorStatisticsData(TestErrorStatisticsData&& from) noexcept
    : TestErrorStatisticsData() {
    *this = ::std::move(from);
  }

  inline TestErrorStatisticsData& operator=(const TestErrorStatisticsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestErrorStatisticsData& operator=(TestErrorStatisticsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestErrorStatisticsData& default_instance();

  static inline const TestErrorStatisticsData* internal_default_instance() {
    return reinterpret_cast<const TestErrorStatisticsData*>(
               &_TestErrorStatisticsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestErrorStatisticsData& a, TestErrorStatisticsData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestErrorStatisticsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestErrorStatisticsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestErrorStatisticsData* New() const final {
    return CreateMaybeMessage<TestErrorStatisticsData>(nullptr);
  }

  TestErrorStatisticsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestErrorStatisticsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestErrorStatisticsData& from);
  void MergeFrom(const TestErrorStatisticsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestErrorStatisticsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TestErrorStatisticsData";
  }
  protected:
  explicit TestErrorStatisticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDifferencesFieldNumber = 11,
    kPropertyNameFieldNumber = 1,
    kComputedPropertyIDFieldNumber = 4,
    kExpectedPropertyIDFieldNumber = 5,
    kPercentToleranceVsNumErrorsFieldNumber = 10,
    kPercentToleranceFieldNumber = 2,
    kMinimumErrorFieldNumber = 6,
    kMaximumErrorFieldNumber = 7,
    kAverageErrorFieldNumber = 8,
    kStandardDeviationFieldNumber = 9,
    kNumberOfErrorsFieldNumber = 3,
  };
  // repeated string Differences = 11;
  int differences_size() const;
  private:
  int _internal_differences_size() const;
  public:
  void clear_differences();
  const std::string& differences(int index) const;
  std::string* mutable_differences(int index);
  void set_differences(int index, const std::string& value);
  void set_differences(int index, std::string&& value);
  void set_differences(int index, const char* value);
  void set_differences(int index, const char* value, size_t size);
  std::string* add_differences();
  void add_differences(const std::string& value);
  void add_differences(std::string&& value);
  void add_differences(const char* value);
  void add_differences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& differences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_differences();
  private:
  const std::string& _internal_differences(int index) const;
  std::string* _internal_add_differences();
  public:

  // string PropertyName = 1;
  void clear_propertyname();
  const std::string& propertyname() const;
  void set_propertyname(const std::string& value);
  void set_propertyname(std::string&& value);
  void set_propertyname(const char* value);
  void set_propertyname(const char* value, size_t size);
  std::string* mutable_propertyname();
  std::string* release_propertyname();
  void set_allocated_propertyname(std::string* propertyname);
  private:
  const std::string& _internal_propertyname() const;
  void _internal_set_propertyname(const std::string& value);
  std::string* _internal_mutable_propertyname();
  public:

  // string ComputedPropertyID = 4;
  void clear_computedpropertyid();
  const std::string& computedpropertyid() const;
  void set_computedpropertyid(const std::string& value);
  void set_computedpropertyid(std::string&& value);
  void set_computedpropertyid(const char* value);
  void set_computedpropertyid(const char* value, size_t size);
  std::string* mutable_computedpropertyid();
  std::string* release_computedpropertyid();
  void set_allocated_computedpropertyid(std::string* computedpropertyid);
  private:
  const std::string& _internal_computedpropertyid() const;
  void _internal_set_computedpropertyid(const std::string& value);
  std::string* _internal_mutable_computedpropertyid();
  public:

  // string ExpectedPropertyID = 5;
  void clear_expectedpropertyid();
  const std::string& expectedpropertyid() const;
  void set_expectedpropertyid(const std::string& value);
  void set_expectedpropertyid(std::string&& value);
  void set_expectedpropertyid(const char* value);
  void set_expectedpropertyid(const char* value, size_t size);
  std::string* mutable_expectedpropertyid();
  std::string* release_expectedpropertyid();
  void set_allocated_expectedpropertyid(std::string* expectedpropertyid);
  private:
  const std::string& _internal_expectedpropertyid() const;
  void _internal_set_expectedpropertyid(const std::string& value);
  std::string* _internal_mutable_expectedpropertyid();
  public:

  // .pulse.cdm.bind.FunctionData PercentToleranceVsNumErrors = 10;
  bool has_percenttolerancevsnumerrors() const;
  private:
  bool _internal_has_percenttolerancevsnumerrors() const;
  public:
  void clear_percenttolerancevsnumerrors();
  const ::pulse::cdm::bind::FunctionData& percenttolerancevsnumerrors() const;
  ::pulse::cdm::bind::FunctionData* release_percenttolerancevsnumerrors();
  ::pulse::cdm::bind::FunctionData* mutable_percenttolerancevsnumerrors();
  void set_allocated_percenttolerancevsnumerrors(::pulse::cdm::bind::FunctionData* percenttolerancevsnumerrors);
  private:
  const ::pulse::cdm::bind::FunctionData& _internal_percenttolerancevsnumerrors() const;
  ::pulse::cdm::bind::FunctionData* _internal_mutable_percenttolerancevsnumerrors();
  public:
  void unsafe_arena_set_allocated_percenttolerancevsnumerrors(
      ::pulse::cdm::bind::FunctionData* percenttolerancevsnumerrors);
  ::pulse::cdm::bind::FunctionData* unsafe_arena_release_percenttolerancevsnumerrors();

  // double PercentTolerance = 2;
  void clear_percenttolerance();
  double percenttolerance() const;
  void set_percenttolerance(double value);
  private:
  double _internal_percenttolerance() const;
  void _internal_set_percenttolerance(double value);
  public:

  // double MinimumError = 6;
  void clear_minimumerror();
  double minimumerror() const;
  void set_minimumerror(double value);
  private:
  double _internal_minimumerror() const;
  void _internal_set_minimumerror(double value);
  public:

  // double MaximumError = 7;
  void clear_maximumerror();
  double maximumerror() const;
  void set_maximumerror(double value);
  private:
  double _internal_maximumerror() const;
  void _internal_set_maximumerror(double value);
  public:

  // double AverageError = 8;
  void clear_averageerror();
  double averageerror() const;
  void set_averageerror(double value);
  private:
  double _internal_averageerror() const;
  void _internal_set_averageerror(double value);
  public:

  // double StandardDeviation = 9;
  void clear_standarddeviation();
  double standarddeviation() const;
  void set_standarddeviation(double value);
  private:
  double _internal_standarddeviation() const;
  void _internal_set_standarddeviation(double value);
  public:

  // uint32 NumberOfErrors = 3;
  void clear_numberoferrors();
  ::PROTOBUF_NAMESPACE_ID::uint32 numberoferrors() const;
  void set_numberoferrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numberoferrors() const;
  void _internal_set_numberoferrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TestErrorStatisticsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> differences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propertyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computedpropertyid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expectedpropertyid_;
  ::pulse::cdm::bind::FunctionData* percenttolerancevsnumerrors_;
  double percenttolerance_;
  double minimumerror_;
  double maximumerror_;
  double averageerror_;
  double standarddeviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numberoferrors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto;
};
// -------------------------------------------------------------------

class TestCaseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TestCaseData) */ {
 public:
  inline TestCaseData() : TestCaseData(nullptr) {}
  virtual ~TestCaseData();

  TestCaseData(const TestCaseData& from);
  TestCaseData(TestCaseData&& from) noexcept
    : TestCaseData() {
    *this = ::std::move(from);
  }

  inline TestCaseData& operator=(const TestCaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCaseData& operator=(TestCaseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCaseData& default_instance();

  static inline const TestCaseData* internal_default_instance() {
    return reinterpret_cast<const TestCaseData*>(
               &_TestCaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestCaseData& a, TestCaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCaseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestCaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCaseData* New() const final {
    return CreateMaybeMessage<TestCaseData>(nullptr);
  }

  TestCaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCaseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCaseData& from);
  void MergeFrom(const TestCaseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCaseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TestCaseData";
  }
  protected:
  explicit TestCaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureFieldNumber = 3,
    kErrorStatsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // repeated string Failure = 3;
  int failure_size() const;
  private:
  int _internal_failure_size() const;
  public:
  void clear_failure();
  const std::string& failure(int index) const;
  std::string* mutable_failure(int index);
  void set_failure(int index, const std::string& value);
  void set_failure(int index, std::string&& value);
  void set_failure(int index, const char* value);
  void set_failure(int index, const char* value, size_t size);
  std::string* add_failure();
  void add_failure(const std::string& value);
  void add_failure(std::string&& value);
  void add_failure(const char* value);
  void add_failure(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failure() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failure();
  private:
  const std::string& _internal_failure(int index) const;
  std::string* _internal_add_failure();
  public:

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 4;
  int errorstats_size() const;
  private:
  int _internal_errorstats_size() const;
  public:
  void clear_errorstats();
  ::pulse::cdm::bind::TestErrorStatisticsData* mutable_errorstats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >*
      mutable_errorstats();
  private:
  const ::pulse::cdm::bind::TestErrorStatisticsData& _internal_errorstats(int index) const;
  ::pulse::cdm::bind::TestErrorStatisticsData* _internal_add_errorstats();
  public:
  const ::pulse::cdm::bind::TestErrorStatisticsData& errorstats(int index) const;
  ::pulse::cdm::bind::TestErrorStatisticsData* add_errorstats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >&
      errorstats() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::pulse::cdm::bind::ScalarTimeData& duration() const;
  ::pulse::cdm::bind::ScalarTimeData* release_duration();
  ::pulse::cdm::bind::ScalarTimeData* mutable_duration();
  void set_allocated_duration(::pulse::cdm::bind::ScalarTimeData* duration);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_duration() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::pulse::cdm::bind::ScalarTimeData* duration);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_duration();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TestCaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failure_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData > errorstats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::pulse::cdm::bind::ScalarTimeData* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto;
};
// -------------------------------------------------------------------

class TestSuiteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TestSuiteData) */ {
 public:
  inline TestSuiteData() : TestSuiteData(nullptr) {}
  virtual ~TestSuiteData();

  TestSuiteData(const TestSuiteData& from);
  TestSuiteData(TestSuiteData&& from) noexcept
    : TestSuiteData() {
    *this = ::std::move(from);
  }

  inline TestSuiteData& operator=(const TestSuiteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestSuiteData& operator=(TestSuiteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestSuiteData& default_instance();

  static inline const TestSuiteData* internal_default_instance() {
    return reinterpret_cast<const TestSuiteData*>(
               &_TestSuiteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestSuiteData& a, TestSuiteData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestSuiteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestSuiteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestSuiteData* New() const final {
    return CreateMaybeMessage<TestSuiteData>(nullptr);
  }

  TestSuiteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestSuiteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestSuiteData& from);
  void MergeFrom(const TestSuiteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestSuiteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TestSuiteData";
  }
  protected:
  explicit TestSuiteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequirementFieldNumber = 5,
    kErrorStatsFieldNumber = 6,
    kTestCaseFieldNumber = 7,
    kNameFieldNumber = 1,
    kPerformedFieldNumber = 2,
    kErrorsFieldNumber = 3,
    kTestsFieldNumber = 4,
  };
  // repeated string Requirement = 5;
  int requirement_size() const;
  private:
  int _internal_requirement_size() const;
  public:
  void clear_requirement();
  const std::string& requirement(int index) const;
  std::string* mutable_requirement(int index);
  void set_requirement(int index, const std::string& value);
  void set_requirement(int index, std::string&& value);
  void set_requirement(int index, const char* value);
  void set_requirement(int index, const char* value, size_t size);
  std::string* add_requirement();
  void add_requirement(const std::string& value);
  void add_requirement(std::string&& value);
  void add_requirement(const char* value);
  void add_requirement(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requirement() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requirement();
  private:
  const std::string& _internal_requirement(int index) const;
  std::string* _internal_add_requirement();
  public:

  // repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 6;
  int errorstats_size() const;
  private:
  int _internal_errorstats_size() const;
  public:
  void clear_errorstats();
  ::pulse::cdm::bind::TestErrorStatisticsData* mutable_errorstats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >*
      mutable_errorstats();
  private:
  const ::pulse::cdm::bind::TestErrorStatisticsData& _internal_errorstats(int index) const;
  ::pulse::cdm::bind::TestErrorStatisticsData* _internal_add_errorstats();
  public:
  const ::pulse::cdm::bind::TestErrorStatisticsData& errorstats(int index) const;
  ::pulse::cdm::bind::TestErrorStatisticsData* add_errorstats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >&
      errorstats() const;

  // repeated .pulse.cdm.bind.TestCaseData TestCase = 7;
  int testcase_size() const;
  private:
  int _internal_testcase_size() const;
  public:
  void clear_testcase();
  ::pulse::cdm::bind::TestCaseData* mutable_testcase(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestCaseData >*
      mutable_testcase();
  private:
  const ::pulse::cdm::bind::TestCaseData& _internal_testcase(int index) const;
  ::pulse::cdm::bind::TestCaseData* _internal_add_testcase();
  public:
  const ::pulse::cdm::bind::TestCaseData& testcase(int index) const;
  ::pulse::cdm::bind::TestCaseData* add_testcase();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestCaseData >&
      testcase() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool Performed = 2;
  void clear_performed();
  bool performed() const;
  void set_performed(bool value);
  private:
  bool _internal_performed() const;
  void _internal_set_performed(bool value);
  public:

  // uint32 Errors = 3;
  void clear_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 errors() const;
  void set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errors() const;
  void _internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Tests = 4;
  void clear_tests();
  ::PROTOBUF_NAMESPACE_ID::uint32 tests() const;
  void set_tests(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tests() const;
  void _internal_set_tests(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TestSuiteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requirement_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData > errorstats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestCaseData > testcase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool performed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto;
};
// -------------------------------------------------------------------

class TestReportData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TestReportData) */ {
 public:
  inline TestReportData() : TestReportData(nullptr) {}
  virtual ~TestReportData();

  TestReportData(const TestReportData& from);
  TestReportData(TestReportData&& from) noexcept
    : TestReportData() {
    *this = ::std::move(from);
  }

  inline TestReportData& operator=(const TestReportData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestReportData& operator=(TestReportData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestReportData& default_instance();

  static inline const TestReportData* internal_default_instance() {
    return reinterpret_cast<const TestReportData*>(
               &_TestReportData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestReportData& a, TestReportData& b) {
    a.Swap(&b);
  }
  inline void Swap(TestReportData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestReportData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestReportData* New() const final {
    return CreateMaybeMessage<TestReportData>(nullptr);
  }

  TestReportData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestReportData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestReportData& from);
  void MergeFrom(const TestReportData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReportData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TestReportData";
  }
  protected:
  explicit TestReportData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fTestReport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestSuiteFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.TestSuiteData TestSuite = 1;
  int testsuite_size() const;
  private:
  int _internal_testsuite_size() const;
  public:
  void clear_testsuite();
  ::pulse::cdm::bind::TestSuiteData* mutable_testsuite(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestSuiteData >*
      mutable_testsuite();
  private:
  const ::pulse::cdm::bind::TestSuiteData& _internal_testsuite(int index) const;
  ::pulse::cdm::bind::TestSuiteData* _internal_add_testsuite();
  public:
  const ::pulse::cdm::bind::TestSuiteData& testsuite(int index) const;
  ::pulse::cdm::bind::TestSuiteData* add_testsuite();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestSuiteData >&
      testsuite() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TestReportData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestSuiteData > testsuite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fTestReport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestErrorStatisticsData

// string PropertyName = 1;
inline void TestErrorStatisticsData::clear_propertyname() {
  propertyname_.ClearToEmpty();
}
inline const std::string& TestErrorStatisticsData::propertyname() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
  return _internal_propertyname();
}
inline void TestErrorStatisticsData::set_propertyname(const std::string& value) {
  _internal_set_propertyname(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
}
inline std::string* TestErrorStatisticsData::mutable_propertyname() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
  return _internal_mutable_propertyname();
}
inline const std::string& TestErrorStatisticsData::_internal_propertyname() const {
  return propertyname_.Get();
}
inline void TestErrorStatisticsData::_internal_set_propertyname(const std::string& value) {
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestErrorStatisticsData::set_propertyname(std::string&& value) {
  
  propertyname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
}
inline void TestErrorStatisticsData::set_propertyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
}
inline void TestErrorStatisticsData::set_propertyname(const char* value,
    size_t size) {
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
}
inline std::string* TestErrorStatisticsData::_internal_mutable_propertyname() {
  
  return propertyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestErrorStatisticsData::release_propertyname() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
  return propertyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestErrorStatisticsData::set_allocated_propertyname(std::string* propertyname) {
  if (propertyname != nullptr) {
    
  } else {
    
  }
  propertyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propertyname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestErrorStatisticsData.PropertyName)
}

// double PercentTolerance = 2;
inline void TestErrorStatisticsData::clear_percenttolerance() {
  percenttolerance_ = 0;
}
inline double TestErrorStatisticsData::_internal_percenttolerance() const {
  return percenttolerance_;
}
inline double TestErrorStatisticsData::percenttolerance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.PercentTolerance)
  return _internal_percenttolerance();
}
inline void TestErrorStatisticsData::_internal_set_percenttolerance(double value) {
  
  percenttolerance_ = value;
}
inline void TestErrorStatisticsData::set_percenttolerance(double value) {
  _internal_set_percenttolerance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.PercentTolerance)
}

// uint32 NumberOfErrors = 3;
inline void TestErrorStatisticsData::clear_numberoferrors() {
  numberoferrors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestErrorStatisticsData::_internal_numberoferrors() const {
  return numberoferrors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestErrorStatisticsData::numberoferrors() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.NumberOfErrors)
  return _internal_numberoferrors();
}
inline void TestErrorStatisticsData::_internal_set_numberoferrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numberoferrors_ = value;
}
inline void TestErrorStatisticsData::set_numberoferrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numberoferrors(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.NumberOfErrors)
}

// string ComputedPropertyID = 4;
inline void TestErrorStatisticsData::clear_computedpropertyid() {
  computedpropertyid_.ClearToEmpty();
}
inline const std::string& TestErrorStatisticsData::computedpropertyid() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
  return _internal_computedpropertyid();
}
inline void TestErrorStatisticsData::set_computedpropertyid(const std::string& value) {
  _internal_set_computedpropertyid(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
}
inline std::string* TestErrorStatisticsData::mutable_computedpropertyid() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
  return _internal_mutable_computedpropertyid();
}
inline const std::string& TestErrorStatisticsData::_internal_computedpropertyid() const {
  return computedpropertyid_.Get();
}
inline void TestErrorStatisticsData::_internal_set_computedpropertyid(const std::string& value) {
  
  computedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestErrorStatisticsData::set_computedpropertyid(std::string&& value) {
  
  computedpropertyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
}
inline void TestErrorStatisticsData::set_computedpropertyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  computedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
}
inline void TestErrorStatisticsData::set_computedpropertyid(const char* value,
    size_t size) {
  
  computedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
}
inline std::string* TestErrorStatisticsData::_internal_mutable_computedpropertyid() {
  
  return computedpropertyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestErrorStatisticsData::release_computedpropertyid() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
  return computedpropertyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestErrorStatisticsData::set_allocated_computedpropertyid(std::string* computedpropertyid) {
  if (computedpropertyid != nullptr) {
    
  } else {
    
  }
  computedpropertyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), computedpropertyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestErrorStatisticsData.ComputedPropertyID)
}

// string ExpectedPropertyID = 5;
inline void TestErrorStatisticsData::clear_expectedpropertyid() {
  expectedpropertyid_.ClearToEmpty();
}
inline const std::string& TestErrorStatisticsData::expectedpropertyid() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
  return _internal_expectedpropertyid();
}
inline void TestErrorStatisticsData::set_expectedpropertyid(const std::string& value) {
  _internal_set_expectedpropertyid(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
}
inline std::string* TestErrorStatisticsData::mutable_expectedpropertyid() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
  return _internal_mutable_expectedpropertyid();
}
inline const std::string& TestErrorStatisticsData::_internal_expectedpropertyid() const {
  return expectedpropertyid_.Get();
}
inline void TestErrorStatisticsData::_internal_set_expectedpropertyid(const std::string& value) {
  
  expectedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestErrorStatisticsData::set_expectedpropertyid(std::string&& value) {
  
  expectedpropertyid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
}
inline void TestErrorStatisticsData::set_expectedpropertyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expectedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
}
inline void TestErrorStatisticsData::set_expectedpropertyid(const char* value,
    size_t size) {
  
  expectedpropertyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
}
inline std::string* TestErrorStatisticsData::_internal_mutable_expectedpropertyid() {
  
  return expectedpropertyid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestErrorStatisticsData::release_expectedpropertyid() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
  return expectedpropertyid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestErrorStatisticsData::set_allocated_expectedpropertyid(std::string* expectedpropertyid) {
  if (expectedpropertyid != nullptr) {
    
  } else {
    
  }
  expectedpropertyid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expectedpropertyid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestErrorStatisticsData.ExpectedPropertyID)
}

// double MinimumError = 6;
inline void TestErrorStatisticsData::clear_minimumerror() {
  minimumerror_ = 0;
}
inline double TestErrorStatisticsData::_internal_minimumerror() const {
  return minimumerror_;
}
inline double TestErrorStatisticsData::minimumerror() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.MinimumError)
  return _internal_minimumerror();
}
inline void TestErrorStatisticsData::_internal_set_minimumerror(double value) {
  
  minimumerror_ = value;
}
inline void TestErrorStatisticsData::set_minimumerror(double value) {
  _internal_set_minimumerror(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.MinimumError)
}

// double MaximumError = 7;
inline void TestErrorStatisticsData::clear_maximumerror() {
  maximumerror_ = 0;
}
inline double TestErrorStatisticsData::_internal_maximumerror() const {
  return maximumerror_;
}
inline double TestErrorStatisticsData::maximumerror() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.MaximumError)
  return _internal_maximumerror();
}
inline void TestErrorStatisticsData::_internal_set_maximumerror(double value) {
  
  maximumerror_ = value;
}
inline void TestErrorStatisticsData::set_maximumerror(double value) {
  _internal_set_maximumerror(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.MaximumError)
}

// double AverageError = 8;
inline void TestErrorStatisticsData::clear_averageerror() {
  averageerror_ = 0;
}
inline double TestErrorStatisticsData::_internal_averageerror() const {
  return averageerror_;
}
inline double TestErrorStatisticsData::averageerror() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.AverageError)
  return _internal_averageerror();
}
inline void TestErrorStatisticsData::_internal_set_averageerror(double value) {
  
  averageerror_ = value;
}
inline void TestErrorStatisticsData::set_averageerror(double value) {
  _internal_set_averageerror(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.AverageError)
}

// double StandardDeviation = 9;
inline void TestErrorStatisticsData::clear_standarddeviation() {
  standarddeviation_ = 0;
}
inline double TestErrorStatisticsData::_internal_standarddeviation() const {
  return standarddeviation_;
}
inline double TestErrorStatisticsData::standarddeviation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.StandardDeviation)
  return _internal_standarddeviation();
}
inline void TestErrorStatisticsData::_internal_set_standarddeviation(double value) {
  
  standarddeviation_ = value;
}
inline void TestErrorStatisticsData::set_standarddeviation(double value) {
  _internal_set_standarddeviation(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.StandardDeviation)
}

// .pulse.cdm.bind.FunctionData PercentToleranceVsNumErrors = 10;
inline bool TestErrorStatisticsData::_internal_has_percenttolerancevsnumerrors() const {
  return this != internal_default_instance() && percenttolerancevsnumerrors_ != nullptr;
}
inline bool TestErrorStatisticsData::has_percenttolerancevsnumerrors() const {
  return _internal_has_percenttolerancevsnumerrors();
}
inline const ::pulse::cdm::bind::FunctionData& TestErrorStatisticsData::_internal_percenttolerancevsnumerrors() const {
  const ::pulse::cdm::bind::FunctionData* p = percenttolerancevsnumerrors_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FunctionData&>(
      ::pulse::cdm::bind::_FunctionData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionData& TestErrorStatisticsData::percenttolerancevsnumerrors() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.PercentToleranceVsNumErrors)
  return _internal_percenttolerancevsnumerrors();
}
inline void TestErrorStatisticsData::unsafe_arena_set_allocated_percenttolerancevsnumerrors(
    ::pulse::cdm::bind::FunctionData* percenttolerancevsnumerrors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(percenttolerancevsnumerrors_);
  }
  percenttolerancevsnumerrors_ = percenttolerancevsnumerrors;
  if (percenttolerancevsnumerrors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TestErrorStatisticsData.PercentToleranceVsNumErrors)
}
inline ::pulse::cdm::bind::FunctionData* TestErrorStatisticsData::release_percenttolerancevsnumerrors() {
  
  ::pulse::cdm::bind::FunctionData* temp = percenttolerancevsnumerrors_;
  percenttolerancevsnumerrors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FunctionData* TestErrorStatisticsData::unsafe_arena_release_percenttolerancevsnumerrors() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestErrorStatisticsData.PercentToleranceVsNumErrors)
  
  ::pulse::cdm::bind::FunctionData* temp = percenttolerancevsnumerrors_;
  percenttolerancevsnumerrors_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionData* TestErrorStatisticsData::_internal_mutable_percenttolerancevsnumerrors() {
  
  if (percenttolerancevsnumerrors_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionData>(GetArena());
    percenttolerancevsnumerrors_ = p;
  }
  return percenttolerancevsnumerrors_;
}
inline ::pulse::cdm::bind::FunctionData* TestErrorStatisticsData::mutable_percenttolerancevsnumerrors() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestErrorStatisticsData.PercentToleranceVsNumErrors)
  return _internal_mutable_percenttolerancevsnumerrors();
}
inline void TestErrorStatisticsData::set_allocated_percenttolerancevsnumerrors(::pulse::cdm::bind::FunctionData* percenttolerancevsnumerrors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(percenttolerancevsnumerrors_);
  }
  if (percenttolerancevsnumerrors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(percenttolerancevsnumerrors)->GetArena();
    if (message_arena != submessage_arena) {
      percenttolerancevsnumerrors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, percenttolerancevsnumerrors, submessage_arena);
    }
    
  } else {
    
  }
  percenttolerancevsnumerrors_ = percenttolerancevsnumerrors;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestErrorStatisticsData.PercentToleranceVsNumErrors)
}

// repeated string Differences = 11;
inline int TestErrorStatisticsData::_internal_differences_size() const {
  return differences_.size();
}
inline int TestErrorStatisticsData::differences_size() const {
  return _internal_differences_size();
}
inline void TestErrorStatisticsData::clear_differences() {
  differences_.Clear();
}
inline std::string* TestErrorStatisticsData::add_differences() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  return _internal_add_differences();
}
inline const std::string& TestErrorStatisticsData::_internal_differences(int index) const {
  return differences_.Get(index);
}
inline const std::string& TestErrorStatisticsData::differences(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  return _internal_differences(index);
}
inline std::string* TestErrorStatisticsData::mutable_differences(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  return differences_.Mutable(index);
}
inline void TestErrorStatisticsData::set_differences(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  differences_.Mutable(index)->assign(value);
}
inline void TestErrorStatisticsData::set_differences(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  differences_.Mutable(index)->assign(std::move(value));
}
inline void TestErrorStatisticsData::set_differences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  differences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline void TestErrorStatisticsData::set_differences(int index, const char* value, size_t size) {
  differences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline std::string* TestErrorStatisticsData::_internal_add_differences() {
  return differences_.Add();
}
inline void TestErrorStatisticsData::add_differences(const std::string& value) {
  differences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline void TestErrorStatisticsData::add_differences(std::string&& value) {
  differences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline void TestErrorStatisticsData::add_differences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  differences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline void TestErrorStatisticsData::add_differences(const char* value, size_t size) {
  differences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.TestErrorStatisticsData.Differences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestErrorStatisticsData::differences() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  return differences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestErrorStatisticsData::mutable_differences() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestErrorStatisticsData.Differences)
  return &differences_;
}

// -------------------------------------------------------------------

// TestCaseData

// string Name = 1;
inline void TestCaseData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TestCaseData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestCaseData.Name)
  return _internal_name();
}
inline void TestCaseData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestCaseData.Name)
}
inline std::string* TestCaseData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestCaseData.Name)
  return _internal_mutable_name();
}
inline const std::string& TestCaseData::_internal_name() const {
  return name_.Get();
}
inline void TestCaseData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestCaseData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.TestCaseData.Name)
}
inline void TestCaseData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestCaseData.Name)
}
inline void TestCaseData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestCaseData.Name)
}
inline std::string* TestCaseData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestCaseData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestCaseData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestCaseData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestCaseData.Name)
}

// .pulse.cdm.bind.ScalarTimeData Duration = 2;
inline bool TestCaseData::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool TestCaseData::has_duration() const {
  return _internal_has_duration();
}
inline const ::pulse::cdm::bind::ScalarTimeData& TestCaseData::_internal_duration() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& TestCaseData::duration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestCaseData.Duration)
  return _internal_duration();
}
inline void TestCaseData::unsafe_arena_set_allocated_duration(
    ::pulse::cdm::bind::ScalarTimeData* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TestCaseData.Duration)
}
inline ::pulse::cdm::bind::ScalarTimeData* TestCaseData::release_duration() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TestCaseData::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestCaseData.Duration)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TestCaseData::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline ::pulse::cdm::bind::ScalarTimeData* TestCaseData::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestCaseData.Duration)
  return _internal_mutable_duration();
}
inline void TestCaseData::set_allocated_duration(::pulse::cdm::bind::ScalarTimeData* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestCaseData.Duration)
}

// repeated string Failure = 3;
inline int TestCaseData::_internal_failure_size() const {
  return failure_.size();
}
inline int TestCaseData::failure_size() const {
  return _internal_failure_size();
}
inline void TestCaseData::clear_failure() {
  failure_.Clear();
}
inline std::string* TestCaseData::add_failure() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.TestCaseData.Failure)
  return _internal_add_failure();
}
inline const std::string& TestCaseData::_internal_failure(int index) const {
  return failure_.Get(index);
}
inline const std::string& TestCaseData::failure(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestCaseData.Failure)
  return _internal_failure(index);
}
inline std::string* TestCaseData::mutable_failure(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestCaseData.Failure)
  return failure_.Mutable(index);
}
inline void TestCaseData::set_failure(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestCaseData.Failure)
  failure_.Mutable(index)->assign(value);
}
inline void TestCaseData::set_failure(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestCaseData.Failure)
  failure_.Mutable(index)->assign(std::move(value));
}
inline void TestCaseData::set_failure(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failure_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestCaseData.Failure)
}
inline void TestCaseData::set_failure(int index, const char* value, size_t size) {
  failure_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestCaseData.Failure)
}
inline std::string* TestCaseData::_internal_add_failure() {
  return failure_.Add();
}
inline void TestCaseData::add_failure(const std::string& value) {
  failure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestCaseData.Failure)
}
inline void TestCaseData::add_failure(std::string&& value) {
  failure_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestCaseData.Failure)
}
inline void TestCaseData::add_failure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  failure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.TestCaseData.Failure)
}
inline void TestCaseData::add_failure(const char* value, size_t size) {
  failure_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.TestCaseData.Failure)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestCaseData::failure() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestCaseData.Failure)
  return failure_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestCaseData::mutable_failure() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestCaseData.Failure)
  return &failure_;
}

// repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 4;
inline int TestCaseData::_internal_errorstats_size() const {
  return errorstats_.size();
}
inline int TestCaseData::errorstats_size() const {
  return _internal_errorstats_size();
}
inline void TestCaseData::clear_errorstats() {
  errorstats_.Clear();
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestCaseData::mutable_errorstats(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestCaseData.ErrorStats)
  return errorstats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >*
TestCaseData::mutable_errorstats() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestCaseData.ErrorStats)
  return &errorstats_;
}
inline const ::pulse::cdm::bind::TestErrorStatisticsData& TestCaseData::_internal_errorstats(int index) const {
  return errorstats_.Get(index);
}
inline const ::pulse::cdm::bind::TestErrorStatisticsData& TestCaseData::errorstats(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestCaseData.ErrorStats)
  return _internal_errorstats(index);
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestCaseData::_internal_add_errorstats() {
  return errorstats_.Add();
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestCaseData::add_errorstats() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestCaseData.ErrorStats)
  return _internal_add_errorstats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >&
TestCaseData::errorstats() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestCaseData.ErrorStats)
  return errorstats_;
}

// -------------------------------------------------------------------

// TestSuiteData

// string Name = 1;
inline void TestSuiteData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TestSuiteData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.Name)
  return _internal_name();
}
inline void TestSuiteData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Name)
}
inline std::string* TestSuiteData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestSuiteData.Name)
  return _internal_mutable_name();
}
inline const std::string& TestSuiteData::_internal_name() const {
  return name_.Get();
}
inline void TestSuiteData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestSuiteData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.TestSuiteData.Name)
}
inline void TestSuiteData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestSuiteData.Name)
}
inline void TestSuiteData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestSuiteData.Name)
}
inline std::string* TestSuiteData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestSuiteData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TestSuiteData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestSuiteData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TestSuiteData.Name)
}

// bool Performed = 2;
inline void TestSuiteData::clear_performed() {
  performed_ = false;
}
inline bool TestSuiteData::_internal_performed() const {
  return performed_;
}
inline bool TestSuiteData::performed() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.Performed)
  return _internal_performed();
}
inline void TestSuiteData::_internal_set_performed(bool value) {
  
  performed_ = value;
}
inline void TestSuiteData::set_performed(bool value) {
  _internal_set_performed(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Performed)
}

// uint32 Errors = 3;
inline void TestSuiteData::clear_errors() {
  errors_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSuiteData::_internal_errors() const {
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSuiteData::errors() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.Errors)
  return _internal_errors();
}
inline void TestSuiteData::_internal_set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  errors_ = value;
}
inline void TestSuiteData::set_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Errors)
}

// uint32 Tests = 4;
inline void TestSuiteData::clear_tests() {
  tests_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSuiteData::_internal_tests() const {
  return tests_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSuiteData::tests() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.Tests)
  return _internal_tests();
}
inline void TestSuiteData::_internal_set_tests(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tests_ = value;
}
inline void TestSuiteData::set_tests(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tests(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Tests)
}

// repeated string Requirement = 5;
inline int TestSuiteData::_internal_requirement_size() const {
  return requirement_.size();
}
inline int TestSuiteData::requirement_size() const {
  return _internal_requirement_size();
}
inline void TestSuiteData::clear_requirement() {
  requirement_.Clear();
}
inline std::string* TestSuiteData::add_requirement() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.TestSuiteData.Requirement)
  return _internal_add_requirement();
}
inline const std::string& TestSuiteData::_internal_requirement(int index) const {
  return requirement_.Get(index);
}
inline const std::string& TestSuiteData::requirement(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.Requirement)
  return _internal_requirement(index);
}
inline std::string* TestSuiteData::mutable_requirement(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestSuiteData.Requirement)
  return requirement_.Mutable(index);
}
inline void TestSuiteData::set_requirement(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Requirement)
  requirement_.Mutable(index)->assign(value);
}
inline void TestSuiteData::set_requirement(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TestSuiteData.Requirement)
  requirement_.Mutable(index)->assign(std::move(value));
}
inline void TestSuiteData::set_requirement(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirement_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline void TestSuiteData::set_requirement(int index, const char* value, size_t size) {
  requirement_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline std::string* TestSuiteData::_internal_add_requirement() {
  return requirement_.Add();
}
inline void TestSuiteData::add_requirement(const std::string& value) {
  requirement_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline void TestSuiteData::add_requirement(std::string&& value) {
  requirement_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline void TestSuiteData::add_requirement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requirement_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline void TestSuiteData::add_requirement(const char* value, size_t size) {
  requirement_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.TestSuiteData.Requirement)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSuiteData::requirement() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestSuiteData.Requirement)
  return requirement_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSuiteData::mutable_requirement() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestSuiteData.Requirement)
  return &requirement_;
}

// repeated .pulse.cdm.bind.TestErrorStatisticsData ErrorStats = 6;
inline int TestSuiteData::_internal_errorstats_size() const {
  return errorstats_.size();
}
inline int TestSuiteData::errorstats_size() const {
  return _internal_errorstats_size();
}
inline void TestSuiteData::clear_errorstats() {
  errorstats_.Clear();
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestSuiteData::mutable_errorstats(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestSuiteData.ErrorStats)
  return errorstats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >*
TestSuiteData::mutable_errorstats() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestSuiteData.ErrorStats)
  return &errorstats_;
}
inline const ::pulse::cdm::bind::TestErrorStatisticsData& TestSuiteData::_internal_errorstats(int index) const {
  return errorstats_.Get(index);
}
inline const ::pulse::cdm::bind::TestErrorStatisticsData& TestSuiteData::errorstats(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.ErrorStats)
  return _internal_errorstats(index);
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestSuiteData::_internal_add_errorstats() {
  return errorstats_.Add();
}
inline ::pulse::cdm::bind::TestErrorStatisticsData* TestSuiteData::add_errorstats() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestSuiteData.ErrorStats)
  return _internal_add_errorstats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestErrorStatisticsData >&
TestSuiteData::errorstats() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestSuiteData.ErrorStats)
  return errorstats_;
}

// repeated .pulse.cdm.bind.TestCaseData TestCase = 7;
inline int TestSuiteData::_internal_testcase_size() const {
  return testcase_.size();
}
inline int TestSuiteData::testcase_size() const {
  return _internal_testcase_size();
}
inline void TestSuiteData::clear_testcase() {
  testcase_.Clear();
}
inline ::pulse::cdm::bind::TestCaseData* TestSuiteData::mutable_testcase(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestSuiteData.TestCase)
  return testcase_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestCaseData >*
TestSuiteData::mutable_testcase() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestSuiteData.TestCase)
  return &testcase_;
}
inline const ::pulse::cdm::bind::TestCaseData& TestSuiteData::_internal_testcase(int index) const {
  return testcase_.Get(index);
}
inline const ::pulse::cdm::bind::TestCaseData& TestSuiteData::testcase(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestSuiteData.TestCase)
  return _internal_testcase(index);
}
inline ::pulse::cdm::bind::TestCaseData* TestSuiteData::_internal_add_testcase() {
  return testcase_.Add();
}
inline ::pulse::cdm::bind::TestCaseData* TestSuiteData::add_testcase() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestSuiteData.TestCase)
  return _internal_add_testcase();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestCaseData >&
TestSuiteData::testcase() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestSuiteData.TestCase)
  return testcase_;
}

// -------------------------------------------------------------------

// TestReportData

// repeated .pulse.cdm.bind.TestSuiteData TestSuite = 1;
inline int TestReportData::_internal_testsuite_size() const {
  return testsuite_.size();
}
inline int TestReportData::testsuite_size() const {
  return _internal_testsuite_size();
}
inline void TestReportData::clear_testsuite() {
  testsuite_.Clear();
}
inline ::pulse::cdm::bind::TestSuiteData* TestReportData::mutable_testsuite(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TestReportData.TestSuite)
  return testsuite_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestSuiteData >*
TestReportData::mutable_testsuite() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.TestReportData.TestSuite)
  return &testsuite_;
}
inline const ::pulse::cdm::bind::TestSuiteData& TestReportData::_internal_testsuite(int index) const {
  return testsuite_.Get(index);
}
inline const ::pulse::cdm::bind::TestSuiteData& TestReportData::testsuite(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TestReportData.TestSuite)
  return _internal_testsuite(index);
}
inline ::pulse::cdm::bind::TestSuiteData* TestReportData::_internal_add_testsuite() {
  return testsuite_.Add();
}
inline ::pulse::cdm::bind::TestSuiteData* TestReportData::add_testsuite() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.TestReportData.TestSuite)
  return _internal_add_testsuite();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::TestSuiteData >&
TestReportData::testsuite() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.TestReportData.TestSuite)
  return testsuite_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fTestReport_2eproto
