// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/MechanicalVentilatorActions.proto

#include "pulse/cdm/bind/MechanicalVentilatorActions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class MechanicalVentilatorActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MechanicalVentilatorActionData> _instance;
} _MechanicalVentilatorActionData_default_instance_;
class MechanicalVentilatorConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MechanicalVentilatorConfigurationData> _instance;
} _MechanicalVentilatorConfigurationData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_MechanicalVentilatorActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::MechanicalVentilatorActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto}, {
      &scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_MechanicalVentilatorConfigurationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::MechanicalVentilatorConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto}, {
      &scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base,
      &scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorActionData, equipmentaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorConfigurationData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorConfigurationData, mechanicalventilatoraction_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorConfigurationData, Option_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::MechanicalVentilatorActionData)},
  { 6, -1, sizeof(::pulse::cdm::bind::MechanicalVentilatorConfigurationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_MechanicalVentilatorActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_MechanicalVentilatorConfigurationData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0pulse/cdm/bind/MechanicalVentilatorAct"
  "ions.proto\022\016pulse.cdm.bind\032)pulse/cdm/bi"
  "nd/MechanicalVentilator.proto\032\034pulse/cdm"
  "/bind/Actions.proto\"^\n\036MechanicalVentila"
  "torActionData\022<\n\017EquipmentAction\030\001 \001(\0132#"
  ".pulse.cdm.bind.EquipmentActionData\"\345\001\n%"
  "MechanicalVentilatorConfigurationData\022R\n"
  "\032MechanicalVentilatorAction\030\001 \001(\0132..puls"
  "e.cdm.bind.MechanicalVentilatorActionDat"
  "a\022A\n\rConfiguration\030\002 \001(\0132(.pulse.cdm.bin"
  "d.MechanicalVentilatorDataH\000\022\033\n\021Configur"
  "ationFile\030\003 \001(\tH\000B\010\n\006OptionB/\n\032com.kitwa"
  "re.pulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_sccs[2] = {
  &scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base,
  &scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto, "pulse/cdm/bind/MechanicalVentilatorActions.proto", 524,
  &descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto, 2, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class MechanicalVentilatorActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::EquipmentActionData& equipmentaction(const MechanicalVentilatorActionData* msg);
};

const ::pulse::cdm::bind::EquipmentActionData&
MechanicalVentilatorActionData::_Internal::equipmentaction(const MechanicalVentilatorActionData* msg) {
  return *msg->equipmentaction_;
}
void MechanicalVentilatorActionData::clear_equipmentaction() {
  if (GetArena() == nullptr && equipmentaction_ != nullptr) {
    delete equipmentaction_;
  }
  equipmentaction_ = nullptr;
}
MechanicalVentilatorActionData::MechanicalVentilatorActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.MechanicalVentilatorActionData)
}
MechanicalVentilatorActionData::MechanicalVentilatorActionData(const MechanicalVentilatorActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_equipmentaction()) {
    equipmentaction_ = new ::pulse::cdm::bind::EquipmentActionData(*from.equipmentaction_);
  } else {
    equipmentaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.MechanicalVentilatorActionData)
}

void MechanicalVentilatorActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base);
  equipmentaction_ = nullptr;
}

MechanicalVentilatorActionData::~MechanicalVentilatorActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.MechanicalVentilatorActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MechanicalVentilatorActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete equipmentaction_;
}

void MechanicalVentilatorActionData::ArenaDtor(void* object) {
  MechanicalVentilatorActionData* _this = reinterpret_cast< MechanicalVentilatorActionData* >(object);
  (void)_this;
}
void MechanicalVentilatorActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MechanicalVentilatorActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MechanicalVentilatorActionData& MechanicalVentilatorActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MechanicalVentilatorActionData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base);
  return *internal_default_instance();
}


void MechanicalVentilatorActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && equipmentaction_ != nullptr) {
    delete equipmentaction_;
  }
  equipmentaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MechanicalVentilatorActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipmentaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MechanicalVentilatorActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
  if (this->has_equipmentaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::equipmentaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.MechanicalVentilatorActionData)
  return target;
}

size_t MechanicalVentilatorActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
  if (this->has_equipmentaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equipmentaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalVentilatorActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalVentilatorActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MechanicalVentilatorActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.MechanicalVentilatorActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.MechanicalVentilatorActionData)
    MergeFrom(*source);
  }
}

void MechanicalVentilatorActionData::MergeFrom(const MechanicalVentilatorActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_equipmentaction()) {
    _internal_mutable_equipmentaction()->::pulse::cdm::bind::EquipmentActionData::MergeFrom(from._internal_equipmentaction());
  }
}

void MechanicalVentilatorActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalVentilatorActionData::CopyFrom(const MechanicalVentilatorActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.MechanicalVentilatorActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalVentilatorActionData::IsInitialized() const {
  return true;
}

void MechanicalVentilatorActionData::InternalSwap(MechanicalVentilatorActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(equipmentaction_, other->equipmentaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MechanicalVentilatorActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MechanicalVentilatorConfigurationData::_Internal {
 public:
  static const ::pulse::cdm::bind::MechanicalVentilatorActionData& mechanicalventilatoraction(const MechanicalVentilatorConfigurationData* msg);
  static const ::pulse::cdm::bind::MechanicalVentilatorData& configuration(const MechanicalVentilatorConfigurationData* msg);
};

const ::pulse::cdm::bind::MechanicalVentilatorActionData&
MechanicalVentilatorConfigurationData::_Internal::mechanicalventilatoraction(const MechanicalVentilatorConfigurationData* msg) {
  return *msg->mechanicalventilatoraction_;
}
const ::pulse::cdm::bind::MechanicalVentilatorData&
MechanicalVentilatorConfigurationData::_Internal::configuration(const MechanicalVentilatorConfigurationData* msg) {
  return *msg->Option_.configuration_;
}
void MechanicalVentilatorConfigurationData::set_allocated_configuration(::pulse::cdm::bind::MechanicalVentilatorData* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration)->GetArena();
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    set_has_configuration();
    Option_.configuration_ = configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
}
void MechanicalVentilatorConfigurationData::clear_configuration() {
  if (_internal_has_configuration()) {
    if (GetArena() == nullptr) {
      delete Option_.configuration_;
    }
    clear_has_Option();
  }
}
MechanicalVentilatorConfigurationData::MechanicalVentilatorConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
}
MechanicalVentilatorConfigurationData::MechanicalVentilatorConfigurationData(const MechanicalVentilatorConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mechanicalventilatoraction()) {
    mechanicalventilatoraction_ = new ::pulse::cdm::bind::MechanicalVentilatorActionData(*from.mechanicalventilatoraction_);
  } else {
    mechanicalventilatoraction_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::MechanicalVentilatorData::MergeFrom(from._internal_configuration());
      break;
    }
    case kConfigurationFile: {
      _internal_set_configurationfile(from._internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
}

void MechanicalVentilatorConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base);
  mechanicalventilatoraction_ = nullptr;
  clear_has_Option();
}

MechanicalVentilatorConfigurationData::~MechanicalVentilatorConfigurationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MechanicalVentilatorConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mechanicalventilatoraction_;
  if (has_Option()) {
    clear_Option();
  }
}

void MechanicalVentilatorConfigurationData::ArenaDtor(void* object) {
  MechanicalVentilatorConfigurationData* _this = reinterpret_cast< MechanicalVentilatorConfigurationData* >(object);
  (void)_this;
}
void MechanicalVentilatorConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MechanicalVentilatorConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MechanicalVentilatorConfigurationData& MechanicalVentilatorConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MechanicalVentilatorConfigurationData_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.base);
  return *internal_default_instance();
}


void MechanicalVentilatorConfigurationData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  switch (Option_case()) {
    case kConfiguration: {
      if (GetArena() == nullptr) {
        delete Option_.configuration_;
      }
      break;
    }
    case kConfigurationFile: {
      Option_.configurationfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void MechanicalVentilatorConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mechanicalventilatoraction_ != nullptr) {
    delete mechanicalventilatoraction_;
  }
  mechanicalventilatoraction_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MechanicalVentilatorConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.MechanicalVentilatorActionData MechanicalVentilatorAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mechanicalventilatoraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MechanicalVentilatorData Configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ConfigurationFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_configurationfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MechanicalVentilatorConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.MechanicalVentilatorActionData MechanicalVentilatorAction = 1;
  if (this->has_mechanicalventilatoraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mechanicalventilatoraction(this), target, stream);
  }

  // .pulse.cdm.bind.MechanicalVentilatorData Configuration = 2;
  if (_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configuration(this), target, stream);
  }

  // string ConfigurationFile = 3;
  if (_internal_has_configurationfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configurationfile().data(), static_cast<int>(this->_internal_configurationfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_configurationfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  return target;
}

size_t MechanicalVentilatorConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.MechanicalVentilatorActionData MechanicalVentilatorAction = 1;
  if (this->has_mechanicalventilatoraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mechanicalventilatoraction_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.MechanicalVentilatorData Configuration = 2;
    case kConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.configuration_);
      break;
    }
    // string ConfigurationFile = 3;
    case kConfigurationFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalVentilatorConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalVentilatorConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MechanicalVentilatorConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
    MergeFrom(*source);
  }
}

void MechanicalVentilatorConfigurationData::MergeFrom(const MechanicalVentilatorConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mechanicalventilatoraction()) {
    _internal_mutable_mechanicalventilatoraction()->::pulse::cdm::bind::MechanicalVentilatorActionData::MergeFrom(from._internal_mechanicalventilatoraction());
  }
  switch (from.Option_case()) {
    case kConfiguration: {
      _internal_mutable_configuration()->::pulse::cdm::bind::MechanicalVentilatorData::MergeFrom(from._internal_configuration());
      break;
    }
    case kConfigurationFile: {
      _internal_set_configurationfile(from._internal_configurationfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void MechanicalVentilatorConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalVentilatorConfigurationData::CopyFrom(const MechanicalVentilatorConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalVentilatorConfigurationData::IsInitialized() const {
  return true;
}

void MechanicalVentilatorConfigurationData::InternalSwap(MechanicalVentilatorConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mechanicalventilatoraction_, other->mechanicalventilatoraction_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MechanicalVentilatorConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::MechanicalVentilatorActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilatorActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::MechanicalVentilatorActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilatorConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::MechanicalVentilatorConfigurationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
