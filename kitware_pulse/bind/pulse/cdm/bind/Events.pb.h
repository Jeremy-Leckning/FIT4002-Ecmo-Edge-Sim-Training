// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEvents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEvents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEvents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActiveEventData;
class ActiveEventDataDefaultTypeInternal;
extern ActiveEventDataDefaultTypeInternal _ActiveEventData_default_instance_;
class ActiveEventListData;
class ActiveEventListDataDefaultTypeInternal;
extern ActiveEventListDataDefaultTypeInternal _ActiveEventListData_default_instance_;
class EventChangeData;
class EventChangeDataDefaultTypeInternal;
extern EventChangeDataDefaultTypeInternal _EventChangeData_default_instance_;
class EventChangeListData;
class EventChangeListDataDefaultTypeInternal;
extern EventChangeListDataDefaultTypeInternal _EventChangeListData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ActiveEventData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActiveEventData>(Arena*);
template<> ::pulse::cdm::bind::ActiveEventListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActiveEventListData>(Arena*);
template<> ::pulse::cdm::bind::EventChangeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EventChangeData>(Arena*);
template<> ::pulse::cdm::bind::EventChangeListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EventChangeListData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum eEvent : int {
  Antidiuresis = 0,
  Asystole = 1,
  Bradycardia = 2,
  Bradypnea = 3,
  BrainOxygenDeficit = 4,
  CardiacArrest = 5,
  CardiogenicShock = 6,
  CardiovascularCollapse = 7,
  CriticalBrainOxygenDeficit = 8,
  Dehydration = 9,
  Diuresis = 10,
  Fasciculation = 11,
  Fatigue = 12,
  FunctionalIncontinence = 13,
  Hypercapnia = 14,
  Hyperglycemia = 15,
  Hyperthermia = 16,
  Hypoglycemia = 17,
  Hypothermia = 18,
  Hypoxia = 19,
  HypovolemicShock = 20,
  IntracranialHypertension = 21,
  IntracranialHypotension = 22,
  IrreversibleState = 23,
  Ketoacidosis = 24,
  LacticAcidosis = 25,
  MaximumPulmonaryVentilationRate = 26,
  MetabolicAcidosis = 27,
  MetabolicAlkalosis = 28,
  ModerateHyperoxemia = 29,
  ModerateHypocapnia = 30,
  MyocardiumOxygenDeficit = 31,
  Natriuresis = 32,
  NutritionDepleted = 33,
  RenalHypoperfusion = 34,
  RespiratoryAcidosis = 35,
  RespiratoryAlkalosis = 36,
  SevereHyperoxemia = 37,
  SevereHypocapnia = 38,
  StartOfCardiacCycle = 39,
  StartOfExhale = 40,
  StartOfInhale = 41,
  Tachycardia = 42,
  Tachypnea = 43,
  AnesthesiaMachineOxygenBottleOneExhausted = 1000,
  AnesthesiaMachineOxygenBottleTwoExhausted = 1001,
  AnesthesiaMachineReliefValveActive = 1002,
  SupplementalOxygenBottleExhausted = 1003,
  NonRebreatherMaskOxygenBagEmpty = 1004,
  eEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eEvent_IsValid(int value);
constexpr eEvent eEvent_MIN = Antidiuresis;
constexpr eEvent eEvent_MAX = NonRebreatherMaskOxygenBagEmpty;
constexpr int eEvent_ARRAYSIZE = eEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eEvent_descriptor();
template<typename T>
inline const std::string& eEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eEvent_descriptor(), enum_t_value);
}
inline bool eEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eEvent>(
    eEvent_descriptor(), name, value);
}
// ===================================================================

class ActiveEventData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActiveEventData) */ {
 public:
  inline ActiveEventData() : ActiveEventData(nullptr) {}
  virtual ~ActiveEventData();

  ActiveEventData(const ActiveEventData& from);
  ActiveEventData(ActiveEventData&& from) noexcept
    : ActiveEventData() {
    *this = ::std::move(from);
  }

  inline ActiveEventData& operator=(const ActiveEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveEventData& operator=(ActiveEventData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveEventData& default_instance();

  static inline const ActiveEventData* internal_default_instance() {
    return reinterpret_cast<const ActiveEventData*>(
               &_ActiveEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActiveEventData& a, ActiveEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveEventData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveEventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveEventData* New() const final {
    return CreateMaybeMessage<ActiveEventData>(nullptr);
  }

  ActiveEventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveEventData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveEventData& from);
  void MergeFrom(const ActiveEventData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveEventData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActiveEventData";
  }
  protected:
  explicit ActiveEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 2,
    kEventFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarTimeData Duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::pulse::cdm::bind::ScalarTimeData& duration() const;
  ::pulse::cdm::bind::ScalarTimeData* release_duration();
  ::pulse::cdm::bind::ScalarTimeData* mutable_duration();
  void set_allocated_duration(::pulse::cdm::bind::ScalarTimeData* duration);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_duration() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::pulse::cdm::bind::ScalarTimeData* duration);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_duration();

  // .pulse.cdm.bind.eEvent Event = 1;
  void clear_event();
  ::pulse::cdm::bind::eEvent event() const;
  void set_event(::pulse::cdm::bind::eEvent value);
  private:
  ::pulse::cdm::bind::eEvent _internal_event() const;
  void _internal_set_event(::pulse::cdm::bind::eEvent value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActiveEventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTimeData* duration_;
  int event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto;
};
// -------------------------------------------------------------------

class ActiveEventListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActiveEventListData) */ {
 public:
  inline ActiveEventListData() : ActiveEventListData(nullptr) {}
  virtual ~ActiveEventListData();

  ActiveEventListData(const ActiveEventListData& from);
  ActiveEventListData(ActiveEventListData&& from) noexcept
    : ActiveEventListData() {
    *this = ::std::move(from);
  }

  inline ActiveEventListData& operator=(const ActiveEventListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveEventListData& operator=(ActiveEventListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveEventListData& default_instance();

  static inline const ActiveEventListData* internal_default_instance() {
    return reinterpret_cast<const ActiveEventListData*>(
               &_ActiveEventListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActiveEventListData& a, ActiveEventListData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveEventListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveEventListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveEventListData* New() const final {
    return CreateMaybeMessage<ActiveEventListData>(nullptr);
  }

  ActiveEventListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveEventListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveEventListData& from);
  void MergeFrom(const ActiveEventListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveEventListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActiveEventListData";
  }
  protected:
  explicit ActiveEventListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveEventFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.ActiveEventData ActiveEvent = 1;
  int activeevent_size() const;
  private:
  int _internal_activeevent_size() const;
  public:
  void clear_activeevent();
  ::pulse::cdm::bind::ActiveEventData* mutable_activeevent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ActiveEventData >*
      mutable_activeevent();
  private:
  const ::pulse::cdm::bind::ActiveEventData& _internal_activeevent(int index) const;
  ::pulse::cdm::bind::ActiveEventData* _internal_add_activeevent();
  public:
  const ::pulse::cdm::bind::ActiveEventData& activeevent(int index) const;
  ::pulse::cdm::bind::ActiveEventData* add_activeevent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ActiveEventData >&
      activeevent() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActiveEventListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ActiveEventData > activeevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto;
};
// -------------------------------------------------------------------

class EventChangeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EventChangeData) */ {
 public:
  inline EventChangeData() : EventChangeData(nullptr) {}
  virtual ~EventChangeData();

  EventChangeData(const EventChangeData& from);
  EventChangeData(EventChangeData&& from) noexcept
    : EventChangeData() {
    *this = ::std::move(from);
  }

  inline EventChangeData& operator=(const EventChangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventChangeData& operator=(EventChangeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventChangeData& default_instance();

  static inline const EventChangeData* internal_default_instance() {
    return reinterpret_cast<const EventChangeData*>(
               &_EventChangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventChangeData& a, EventChangeData& b) {
    a.Swap(&b);
  }
  inline void Swap(EventChangeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventChangeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventChangeData* New() const final {
    return CreateMaybeMessage<EventChangeData>(nullptr);
  }

  EventChangeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventChangeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventChangeData& from);
  void MergeFrom(const EventChangeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventChangeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EventChangeData";
  }
  protected:
  explicit EventChangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimTimeFieldNumber = 2,
    kEventFieldNumber = 1,
    kActiveFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarTimeData SimTime = 2;
  bool has_simtime() const;
  private:
  bool _internal_has_simtime() const;
  public:
  void clear_simtime();
  const ::pulse::cdm::bind::ScalarTimeData& simtime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_simtime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_simtime();
  void set_allocated_simtime(::pulse::cdm::bind::ScalarTimeData* simtime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_simtime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_simtime();
  public:
  void unsafe_arena_set_allocated_simtime(
      ::pulse::cdm::bind::ScalarTimeData* simtime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_simtime();

  // .pulse.cdm.bind.eEvent Event = 1;
  void clear_event();
  ::pulse::cdm::bind::eEvent event() const;
  void set_event(::pulse::cdm::bind::eEvent value);
  private:
  ::pulse::cdm::bind::eEvent _internal_event() const;
  void _internal_set_event(::pulse::cdm::bind::eEvent value);
  public:

  // bool Active = 3;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EventChangeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTimeData* simtime_;
  int event_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto;
};
// -------------------------------------------------------------------

class EventChangeListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EventChangeListData) */ {
 public:
  inline EventChangeListData() : EventChangeListData(nullptr) {}
  virtual ~EventChangeListData();

  EventChangeListData(const EventChangeListData& from);
  EventChangeListData(EventChangeListData&& from) noexcept
    : EventChangeListData() {
    *this = ::std::move(from);
  }

  inline EventChangeListData& operator=(const EventChangeListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventChangeListData& operator=(EventChangeListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventChangeListData& default_instance();

  static inline const EventChangeListData* internal_default_instance() {
    return reinterpret_cast<const EventChangeListData*>(
               &_EventChangeListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventChangeListData& a, EventChangeListData& b) {
    a.Swap(&b);
  }
  inline void Swap(EventChangeListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventChangeListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventChangeListData* New() const final {
    return CreateMaybeMessage<EventChangeListData>(nullptr);
  }

  EventChangeListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventChangeListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventChangeListData& from);
  void MergeFrom(const EventChangeListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventChangeListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EventChangeListData";
  }
  protected:
  explicit EventChangeListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEvents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.EventChangeData Change = 1;
  int change_size() const;
  private:
  int _internal_change_size() const;
  public:
  void clear_change();
  ::pulse::cdm::bind::EventChangeData* mutable_change(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >*
      mutable_change();
  private:
  const ::pulse::cdm::bind::EventChangeData& _internal_change(int index) const;
  ::pulse::cdm::bind::EventChangeData* _internal_add_change();
  public:
  const ::pulse::cdm::bind::EventChangeData& change(int index) const;
  ::pulse::cdm::bind::EventChangeData* add_change();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >&
      change() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EventChangeListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData > change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEvents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActiveEventData

// .pulse.cdm.bind.eEvent Event = 1;
inline void ActiveEventData::clear_event() {
  event_ = 0;
}
inline ::pulse::cdm::bind::eEvent ActiveEventData::_internal_event() const {
  return static_cast< ::pulse::cdm::bind::eEvent >(event_);
}
inline ::pulse::cdm::bind::eEvent ActiveEventData::event() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveEventData.Event)
  return _internal_event();
}
inline void ActiveEventData::_internal_set_event(::pulse::cdm::bind::eEvent value) {
  
  event_ = value;
}
inline void ActiveEventData::set_event(::pulse::cdm::bind::eEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ActiveEventData.Event)
}

// .pulse.cdm.bind.ScalarTimeData Duration = 2;
inline bool ActiveEventData::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool ActiveEventData::has_duration() const {
  return _internal_has_duration();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ActiveEventData::_internal_duration() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ActiveEventData::duration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveEventData.Duration)
  return _internal_duration();
}
inline void ActiveEventData::unsafe_arena_set_allocated_duration(
    ::pulse::cdm::bind::ScalarTimeData* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ActiveEventData.Duration)
}
inline ::pulse::cdm::bind::ScalarTimeData* ActiveEventData::release_duration() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ActiveEventData::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ActiveEventData.Duration)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ActiveEventData::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ActiveEventData::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActiveEventData.Duration)
  return _internal_mutable_duration();
}
inline void ActiveEventData::set_allocated_duration(::pulse::cdm::bind::ScalarTimeData* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ActiveEventData.Duration)
}

// -------------------------------------------------------------------

// ActiveEventListData

// repeated .pulse.cdm.bind.ActiveEventData ActiveEvent = 1;
inline int ActiveEventListData::_internal_activeevent_size() const {
  return activeevent_.size();
}
inline int ActiveEventListData::activeevent_size() const {
  return _internal_activeevent_size();
}
inline void ActiveEventListData::clear_activeevent() {
  activeevent_.Clear();
}
inline ::pulse::cdm::bind::ActiveEventData* ActiveEventListData::mutable_activeevent(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActiveEventListData.ActiveEvent)
  return activeevent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ActiveEventData >*
ActiveEventListData::mutable_activeevent() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ActiveEventListData.ActiveEvent)
  return &activeevent_;
}
inline const ::pulse::cdm::bind::ActiveEventData& ActiveEventListData::_internal_activeevent(int index) const {
  return activeevent_.Get(index);
}
inline const ::pulse::cdm::bind::ActiveEventData& ActiveEventListData::activeevent(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveEventListData.ActiveEvent)
  return _internal_activeevent(index);
}
inline ::pulse::cdm::bind::ActiveEventData* ActiveEventListData::_internal_add_activeevent() {
  return activeevent_.Add();
}
inline ::pulse::cdm::bind::ActiveEventData* ActiveEventListData::add_activeevent() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ActiveEventListData.ActiveEvent)
  return _internal_add_activeevent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ActiveEventData >&
ActiveEventListData::activeevent() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ActiveEventListData.ActiveEvent)
  return activeevent_;
}

// -------------------------------------------------------------------

// EventChangeData

// .pulse.cdm.bind.eEvent Event = 1;
inline void EventChangeData::clear_event() {
  event_ = 0;
}
inline ::pulse::cdm::bind::eEvent EventChangeData::_internal_event() const {
  return static_cast< ::pulse::cdm::bind::eEvent >(event_);
}
inline ::pulse::cdm::bind::eEvent EventChangeData::event() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EventChangeData.Event)
  return _internal_event();
}
inline void EventChangeData::_internal_set_event(::pulse::cdm::bind::eEvent value) {
  
  event_ = value;
}
inline void EventChangeData::set_event(::pulse::cdm::bind::eEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EventChangeData.Event)
}

// .pulse.cdm.bind.ScalarTimeData SimTime = 2;
inline bool EventChangeData::_internal_has_simtime() const {
  return this != internal_default_instance() && simtime_ != nullptr;
}
inline bool EventChangeData::has_simtime() const {
  return _internal_has_simtime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& EventChangeData::_internal_simtime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = simtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& EventChangeData::simtime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EventChangeData.SimTime)
  return _internal_simtime();
}
inline void EventChangeData::unsafe_arena_set_allocated_simtime(
    ::pulse::cdm::bind::ScalarTimeData* simtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simtime_);
  }
  simtime_ = simtime;
  if (simtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EventChangeData.SimTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* EventChangeData::release_simtime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = simtime_;
  simtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* EventChangeData::unsafe_arena_release_simtime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EventChangeData.SimTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = simtime_;
  simtime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* EventChangeData::_internal_mutable_simtime() {
  
  if (simtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    simtime_ = p;
  }
  return simtime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* EventChangeData::mutable_simtime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EventChangeData.SimTime)
  return _internal_mutable_simtime();
}
inline void EventChangeData::set_allocated_simtime(::pulse::cdm::bind::ScalarTimeData* simtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(simtime_);
  }
  if (simtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simtime)->GetArena();
    if (message_arena != submessage_arena) {
      simtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simtime, submessage_arena);
    }
    
  } else {
    
  }
  simtime_ = simtime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EventChangeData.SimTime)
}

// bool Active = 3;
inline void EventChangeData::clear_active() {
  active_ = false;
}
inline bool EventChangeData::_internal_active() const {
  return active_;
}
inline bool EventChangeData::active() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EventChangeData.Active)
  return _internal_active();
}
inline void EventChangeData::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void EventChangeData::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EventChangeData.Active)
}

// -------------------------------------------------------------------

// EventChangeListData

// repeated .pulse.cdm.bind.EventChangeData Change = 1;
inline int EventChangeListData::_internal_change_size() const {
  return change_.size();
}
inline int EventChangeListData::change_size() const {
  return _internal_change_size();
}
inline void EventChangeListData::clear_change() {
  change_.Clear();
}
inline ::pulse::cdm::bind::EventChangeData* EventChangeListData::mutable_change(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EventChangeListData.Change)
  return change_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >*
EventChangeListData::mutable_change() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.EventChangeListData.Change)
  return &change_;
}
inline const ::pulse::cdm::bind::EventChangeData& EventChangeListData::_internal_change(int index) const {
  return change_.Get(index);
}
inline const ::pulse::cdm::bind::EventChangeData& EventChangeListData::change(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EventChangeListData.Change)
  return _internal_change(index);
}
inline ::pulse::cdm::bind::EventChangeData* EventChangeListData::_internal_add_change() {
  return change_.Add();
}
inline ::pulse::cdm::bind::EventChangeData* EventChangeListData::add_change() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.EventChangeListData.Change)
  return _internal_add_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >&
EventChangeListData::change() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.EventChangeListData.Change)
  return change_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::eEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::eEvent>() {
  return ::pulse::cdm::bind::eEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEvents_2eproto
