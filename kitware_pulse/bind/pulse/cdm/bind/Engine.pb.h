// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEngine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEngine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Events.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
#include "pulse/cdm/bind/Patient.pb.h"
#include "pulse/cdm/bind/PatientActions.pb.h"
#include "pulse/cdm/bind/PatientConditions.pb.h"
#include "pulse/cdm/bind/EnvironmentActions.pb.h"
#include "pulse/cdm/bind/EnvironmentConditions.pb.h"
#include "pulse/cdm/bind/EquipmentActions.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActionListData;
class ActionListDataDefaultTypeInternal;
extern ActionListDataDefaultTypeInternal _ActionListData_default_instance_;
class ActionMapData;
class ActionMapDataDefaultTypeInternal;
extern ActionMapDataDefaultTypeInternal _ActionMapData_default_instance_;
class ActionMapData_ActionMapEntry_DoNotUse;
class ActionMapData_ActionMapEntry_DoNotUseDefaultTypeInternal;
extern ActionMapData_ActionMapEntry_DoNotUseDefaultTypeInternal _ActionMapData_ActionMapEntry_DoNotUse_default_instance_;
class AnyActionData;
class AnyActionDataDefaultTypeInternal;
extern AnyActionDataDefaultTypeInternal _AnyActionData_default_instance_;
class AnyConditionData;
class AnyConditionDataDefaultTypeInternal;
extern AnyConditionDataDefaultTypeInternal _AnyConditionData_default_instance_;
class ConditionListData;
class ConditionListDataDefaultTypeInternal;
extern ConditionListDataDefaultTypeInternal _ConditionListData_default_instance_;
class DataRequestData;
class DataRequestDataDefaultTypeInternal;
extern DataRequestDataDefaultTypeInternal _DataRequestData_default_instance_;
class DataRequestManagerData;
class DataRequestManagerDataDefaultTypeInternal;
extern DataRequestManagerDataDefaultTypeInternal _DataRequestManagerData_default_instance_;
class DataRequestedData;
class DataRequestedDataDefaultTypeInternal;
extern DataRequestedDataDefaultTypeInternal _DataRequestedData_default_instance_;
class DataRequestedListData;
class DataRequestedListDataDefaultTypeInternal;
extern DataRequestedListDataDefaultTypeInternal _DataRequestedListData_default_instance_;
class DecimalFormatData;
class DecimalFormatDataDefaultTypeInternal;
extern DecimalFormatDataDefaultTypeInternal _DecimalFormatData_default_instance_;
class DynamicStabilizationData;
class DynamicStabilizationDataDefaultTypeInternal;
extern DynamicStabilizationDataDefaultTypeInternal _DynamicStabilizationData_default_instance_;
class DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse;
class DynamicStabilizationData_ConditionConvergenceEntry_DoNotUseDefaultTypeInternal;
extern DynamicStabilizationData_ConditionConvergenceEntry_DoNotUseDefaultTypeInternal _DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_default_instance_;
class DynamicStabilizationEngineConvergenceData;
class DynamicStabilizationEngineConvergenceDataDefaultTypeInternal;
extern DynamicStabilizationEngineConvergenceDataDefaultTypeInternal _DynamicStabilizationEngineConvergenceData_default_instance_;
class DynamicStabilizationPropertyConvergenceData;
class DynamicStabilizationPropertyConvergenceDataDefaultTypeInternal;
extern DynamicStabilizationPropertyConvergenceDataDefaultTypeInternal _DynamicStabilizationPropertyConvergenceData_default_instance_;
class EngineInitializationData;
class EngineInitializationDataDefaultTypeInternal;
extern EngineInitializationDataDefaultTypeInternal _EngineInitializationData_default_instance_;
class EngineInitializationListData;
class EngineInitializationListDataDefaultTypeInternal;
extern EngineInitializationListDataDefaultTypeInternal _EngineInitializationListData_default_instance_;
class LogMessagesData;
class LogMessagesDataDefaultTypeInternal;
extern LogMessagesDataDefaultTypeInternal _LogMessagesData_default_instance_;
class PatientConfigurationData;
class PatientConfigurationDataDefaultTypeInternal;
extern PatientConfigurationDataDefaultTypeInternal _PatientConfigurationData_default_instance_;
class TimedStabilizationData;
class TimedStabilizationDataDefaultTypeInternal;
extern TimedStabilizationDataDefaultTypeInternal _TimedStabilizationData_default_instance_;
class TimedStabilizationData_ConditionStabilizationEntry_DoNotUse;
class TimedStabilizationData_ConditionStabilizationEntry_DoNotUseDefaultTypeInternal;
extern TimedStabilizationData_ConditionStabilizationEntry_DoNotUseDefaultTypeInternal _TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ActionListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActionListData>(Arena*);
template<> ::pulse::cdm::bind::ActionMapData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActionMapData>(Arena*);
template<> ::pulse::cdm::bind::ActionMapData_ActionMapEntry_DoNotUse* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActionMapData_ActionMapEntry_DoNotUse>(Arena*);
template<> ::pulse::cdm::bind::AnyActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyActionData>(Arena*);
template<> ::pulse::cdm::bind::AnyConditionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyConditionData>(Arena*);
template<> ::pulse::cdm::bind::ConditionListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ConditionListData>(Arena*);
template<> ::pulse::cdm::bind::DataRequestData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DataRequestData>(Arena*);
template<> ::pulse::cdm::bind::DataRequestManagerData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DataRequestManagerData>(Arena*);
template<> ::pulse::cdm::bind::DataRequestedData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DataRequestedData>(Arena*);
template<> ::pulse::cdm::bind::DataRequestedListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DataRequestedListData>(Arena*);
template<> ::pulse::cdm::bind::DecimalFormatData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DecimalFormatData>(Arena*);
template<> ::pulse::cdm::bind::DynamicStabilizationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationData>(Arena*);
template<> ::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse* Arena::CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse>(Arena*);
template<> ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData>(Arena*);
template<> ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData>(Arena*);
template<> ::pulse::cdm::bind::EngineInitializationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EngineInitializationData>(Arena*);
template<> ::pulse::cdm::bind::EngineInitializationListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EngineInitializationListData>(Arena*);
template<> ::pulse::cdm::bind::LogMessagesData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LogMessagesData>(Arena*);
template<> ::pulse::cdm::bind::PatientConfigurationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientConfigurationData>(Arena*);
template<> ::pulse::cdm::bind::TimedStabilizationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TimedStabilizationData>(Arena*);
template<> ::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse* Arena::CreateMaybeMessage<::pulse::cdm::bind::TimedStabilizationData_ConditionStabilizationEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum DecimalFormatData_eType : int {
  DecimalFormatData_eType_SystemFormatting = 0,
  DecimalFormatData_eType_DefaultFloat = 1,
  DecimalFormatData_eType_FixedMantissa = 2,
  DecimalFormatData_eType_SignificantDigits = 3,
  DecimalFormatData_eType_DecimalFormatData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DecimalFormatData_eType_DecimalFormatData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DecimalFormatData_eType_IsValid(int value);
constexpr DecimalFormatData_eType DecimalFormatData_eType_eType_MIN = DecimalFormatData_eType_SystemFormatting;
constexpr DecimalFormatData_eType DecimalFormatData_eType_eType_MAX = DecimalFormatData_eType_SignificantDigits;
constexpr int DecimalFormatData_eType_eType_ARRAYSIZE = DecimalFormatData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecimalFormatData_eType_descriptor();
template<typename T>
inline const std::string& DecimalFormatData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DecimalFormatData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DecimalFormatData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DecimalFormatData_eType_descriptor(), enum_t_value);
}
inline bool DecimalFormatData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DecimalFormatData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DecimalFormatData_eType>(
    DecimalFormatData_eType_descriptor(), name, value);
}
enum DataRequestData_eCategory : int {
  DataRequestData_eCategory_Patient = 0,
  DataRequestData_eCategory_Physiology = 1,
  DataRequestData_eCategory_Environment = 2,
  DataRequestData_eCategory_Action = 3,
  DataRequestData_eCategory_GasCompartment = 4,
  DataRequestData_eCategory_LiquidCompartment = 5,
  DataRequestData_eCategory_ThermalCompartment = 6,
  DataRequestData_eCategory_TissueCompartment = 7,
  DataRequestData_eCategory_Substance = 8,
  DataRequestData_eCategory_AnesthesiaMachine = 9,
  DataRequestData_eCategory_ECG = 10,
  DataRequestData_eCategory_Inhaler = 11,
  DataRequestData_eCategory_MechanicalVentilator = 12,
  DataRequestData_eCategory_DataRequestData_eCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataRequestData_eCategory_DataRequestData_eCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataRequestData_eCategory_IsValid(int value);
constexpr DataRequestData_eCategory DataRequestData_eCategory_eCategory_MIN = DataRequestData_eCategory_Patient;
constexpr DataRequestData_eCategory DataRequestData_eCategory_eCategory_MAX = DataRequestData_eCategory_MechanicalVentilator;
constexpr int DataRequestData_eCategory_eCategory_ARRAYSIZE = DataRequestData_eCategory_eCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataRequestData_eCategory_descriptor();
template<typename T>
inline const std::string& DataRequestData_eCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataRequestData_eCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataRequestData_eCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataRequestData_eCategory_descriptor(), enum_t_value);
}
inline bool DataRequestData_eCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataRequestData_eCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataRequestData_eCategory>(
    DataRequestData_eCategory_descriptor(), name, value);
}
// ===================================================================

class DecimalFormatData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DecimalFormatData) */ {
 public:
  inline DecimalFormatData() : DecimalFormatData(nullptr) {}
  virtual ~DecimalFormatData();

  DecimalFormatData(const DecimalFormatData& from);
  DecimalFormatData(DecimalFormatData&& from) noexcept
    : DecimalFormatData() {
    *this = ::std::move(from);
  }

  inline DecimalFormatData& operator=(const DecimalFormatData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecimalFormatData& operator=(DecimalFormatData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecimalFormatData& default_instance();

  static inline const DecimalFormatData* internal_default_instance() {
    return reinterpret_cast<const DecimalFormatData*>(
               &_DecimalFormatData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DecimalFormatData& a, DecimalFormatData& b) {
    a.Swap(&b);
  }
  inline void Swap(DecimalFormatData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecimalFormatData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecimalFormatData* New() const final {
    return CreateMaybeMessage<DecimalFormatData>(nullptr);
  }

  DecimalFormatData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecimalFormatData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecimalFormatData& from);
  void MergeFrom(const DecimalFormatData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecimalFormatData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DecimalFormatData";
  }
  protected:
  explicit DecimalFormatData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DecimalFormatData_eType eType;
  static constexpr eType SystemFormatting =
    DecimalFormatData_eType_SystemFormatting;
  static constexpr eType DefaultFloat =
    DecimalFormatData_eType_DefaultFloat;
  static constexpr eType FixedMantissa =
    DecimalFormatData_eType_FixedMantissa;
  static constexpr eType SignificantDigits =
    DecimalFormatData_eType_SignificantDigits;
  static inline bool eType_IsValid(int value) {
    return DecimalFormatData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    DecimalFormatData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    DecimalFormatData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    DecimalFormatData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return DecimalFormatData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return DecimalFormatData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return DecimalFormatData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPrecisionFieldNumber = 2,
  };
  // .pulse.cdm.bind.DecimalFormatData.eType Type = 1;
  void clear_type();
  ::pulse::cdm::bind::DecimalFormatData_eType type() const;
  void set_type(::pulse::cdm::bind::DecimalFormatData_eType value);
  private:
  ::pulse::cdm::bind::DecimalFormatData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::DecimalFormatData_eType value);
  public:

  // uint32 Precision = 2;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DecimalFormatData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DataRequestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DataRequestData) */ {
 public:
  inline DataRequestData() : DataRequestData(nullptr) {}
  virtual ~DataRequestData();

  DataRequestData(const DataRequestData& from);
  DataRequestData(DataRequestData&& from) noexcept
    : DataRequestData() {
    *this = ::std::move(from);
  }

  inline DataRequestData& operator=(const DataRequestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequestData& operator=(DataRequestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequestData& default_instance();

  static inline const DataRequestData* internal_default_instance() {
    return reinterpret_cast<const DataRequestData*>(
               &_DataRequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataRequestData& a, DataRequestData& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequestData* New() const final {
    return CreateMaybeMessage<DataRequestData>(nullptr);
  }

  DataRequestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequestData& from);
  void MergeFrom(const DataRequestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DataRequestData";
  }
  protected:
  explicit DataRequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DataRequestData_eCategory eCategory;
  static constexpr eCategory Patient =
    DataRequestData_eCategory_Patient;
  static constexpr eCategory Physiology =
    DataRequestData_eCategory_Physiology;
  static constexpr eCategory Environment =
    DataRequestData_eCategory_Environment;
  static constexpr eCategory Action =
    DataRequestData_eCategory_Action;
  static constexpr eCategory GasCompartment =
    DataRequestData_eCategory_GasCompartment;
  static constexpr eCategory LiquidCompartment =
    DataRequestData_eCategory_LiquidCompartment;
  static constexpr eCategory ThermalCompartment =
    DataRequestData_eCategory_ThermalCompartment;
  static constexpr eCategory TissueCompartment =
    DataRequestData_eCategory_TissueCompartment;
  static constexpr eCategory Substance =
    DataRequestData_eCategory_Substance;
  static constexpr eCategory AnesthesiaMachine =
    DataRequestData_eCategory_AnesthesiaMachine;
  static constexpr eCategory ECG =
    DataRequestData_eCategory_ECG;
  static constexpr eCategory Inhaler =
    DataRequestData_eCategory_Inhaler;
  static constexpr eCategory MechanicalVentilator =
    DataRequestData_eCategory_MechanicalVentilator;
  static inline bool eCategory_IsValid(int value) {
    return DataRequestData_eCategory_IsValid(value);
  }
  static constexpr eCategory eCategory_MIN =
    DataRequestData_eCategory_eCategory_MIN;
  static constexpr eCategory eCategory_MAX =
    DataRequestData_eCategory_eCategory_MAX;
  static constexpr int eCategory_ARRAYSIZE =
    DataRequestData_eCategory_eCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eCategory_descriptor() {
    return DataRequestData_eCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& eCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eCategory_Name.");
    return DataRequestData_eCategory_Name(enum_t_value);
  }
  static inline bool eCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eCategory* value) {
    return DataRequestData_eCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionNameFieldNumber = 3,
    kCompartmentNameFieldNumber = 4,
    kSubstanceNameFieldNumber = 5,
    kPropertyNameFieldNumber = 6,
    kUnitFieldNumber = 7,
    kDecimalFormatFieldNumber = 1,
    kCategoryFieldNumber = 2,
  };
  // string ActionName = 3;
  void clear_actionname();
  const std::string& actionname() const;
  void set_actionname(const std::string& value);
  void set_actionname(std::string&& value);
  void set_actionname(const char* value);
  void set_actionname(const char* value, size_t size);
  std::string* mutable_actionname();
  std::string* release_actionname();
  void set_allocated_actionname(std::string* actionname);
  private:
  const std::string& _internal_actionname() const;
  void _internal_set_actionname(const std::string& value);
  std::string* _internal_mutable_actionname();
  public:

  // string CompartmentName = 4;
  void clear_compartmentname();
  const std::string& compartmentname() const;
  void set_compartmentname(const std::string& value);
  void set_compartmentname(std::string&& value);
  void set_compartmentname(const char* value);
  void set_compartmentname(const char* value, size_t size);
  std::string* mutable_compartmentname();
  std::string* release_compartmentname();
  void set_allocated_compartmentname(std::string* compartmentname);
  private:
  const std::string& _internal_compartmentname() const;
  void _internal_set_compartmentname(const std::string& value);
  std::string* _internal_mutable_compartmentname();
  public:

  // string SubstanceName = 5;
  void clear_substancename();
  const std::string& substancename() const;
  void set_substancename(const std::string& value);
  void set_substancename(std::string&& value);
  void set_substancename(const char* value);
  void set_substancename(const char* value, size_t size);
  std::string* mutable_substancename();
  std::string* release_substancename();
  void set_allocated_substancename(std::string* substancename);
  private:
  const std::string& _internal_substancename() const;
  void _internal_set_substancename(const std::string& value);
  std::string* _internal_mutable_substancename();
  public:

  // string PropertyName = 6;
  void clear_propertyname();
  const std::string& propertyname() const;
  void set_propertyname(const std::string& value);
  void set_propertyname(std::string&& value);
  void set_propertyname(const char* value);
  void set_propertyname(const char* value, size_t size);
  std::string* mutable_propertyname();
  std::string* release_propertyname();
  void set_allocated_propertyname(std::string* propertyname);
  private:
  const std::string& _internal_propertyname() const;
  void _internal_set_propertyname(const std::string& value);
  std::string* _internal_mutable_propertyname();
  public:

  // string Unit = 7;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .pulse.cdm.bind.DecimalFormatData DecimalFormat = 1;
  bool has_decimalformat() const;
  private:
  bool _internal_has_decimalformat() const;
  public:
  void clear_decimalformat();
  const ::pulse::cdm::bind::DecimalFormatData& decimalformat() const;
  ::pulse::cdm::bind::DecimalFormatData* release_decimalformat();
  ::pulse::cdm::bind::DecimalFormatData* mutable_decimalformat();
  void set_allocated_decimalformat(::pulse::cdm::bind::DecimalFormatData* decimalformat);
  private:
  const ::pulse::cdm::bind::DecimalFormatData& _internal_decimalformat() const;
  ::pulse::cdm::bind::DecimalFormatData* _internal_mutable_decimalformat();
  public:
  void unsafe_arena_set_allocated_decimalformat(
      ::pulse::cdm::bind::DecimalFormatData* decimalformat);
  ::pulse::cdm::bind::DecimalFormatData* unsafe_arena_release_decimalformat();

  // .pulse.cdm.bind.DataRequestData.eCategory Category = 2;
  void clear_category();
  ::pulse::cdm::bind::DataRequestData_eCategory category() const;
  void set_category(::pulse::cdm::bind::DataRequestData_eCategory value);
  private:
  ::pulse::cdm::bind::DataRequestData_eCategory _internal_category() const;
  void _internal_set_category(::pulse::cdm::bind::DataRequestData_eCategory value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DataRequestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actionname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compartmentname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substancename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propertyname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::pulse::cdm::bind::DecimalFormatData* decimalformat_;
  int category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DataRequestManagerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DataRequestManagerData) */ {
 public:
  inline DataRequestManagerData() : DataRequestManagerData(nullptr) {}
  virtual ~DataRequestManagerData();

  DataRequestManagerData(const DataRequestManagerData& from);
  DataRequestManagerData(DataRequestManagerData&& from) noexcept
    : DataRequestManagerData() {
    *this = ::std::move(from);
  }

  inline DataRequestManagerData& operator=(const DataRequestManagerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequestManagerData& operator=(DataRequestManagerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequestManagerData& default_instance();

  static inline const DataRequestManagerData* internal_default_instance() {
    return reinterpret_cast<const DataRequestManagerData*>(
               &_DataRequestManagerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataRequestManagerData& a, DataRequestManagerData& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequestManagerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequestManagerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequestManagerData* New() const final {
    return CreateMaybeMessage<DataRequestManagerData>(nullptr);
  }

  DataRequestManagerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequestManagerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequestManagerData& from);
  void MergeFrom(const DataRequestManagerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequestManagerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DataRequestManagerData";
  }
  protected:
  explicit DataRequestManagerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 5,
    kResultsFilenameFieldNumber = 1,
    kDefaultDecimalFormattingFieldNumber = 3,
    kOverrideDecimalFormattingFieldNumber = 4,
    kSamplesPerSecondFieldNumber = 2,
  };
  // repeated .pulse.cdm.bind.DataRequestData DataRequest = 5;
  int datarequest_size() const;
  private:
  int _internal_datarequest_size() const;
  public:
  void clear_datarequest();
  ::pulse::cdm::bind::DataRequestData* mutable_datarequest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestData >*
      mutable_datarequest();
  private:
  const ::pulse::cdm::bind::DataRequestData& _internal_datarequest(int index) const;
  ::pulse::cdm::bind::DataRequestData* _internal_add_datarequest();
  public:
  const ::pulse::cdm::bind::DataRequestData& datarequest(int index) const;
  ::pulse::cdm::bind::DataRequestData* add_datarequest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestData >&
      datarequest() const;

  // string ResultsFilename = 1;
  void clear_resultsfilename();
  const std::string& resultsfilename() const;
  void set_resultsfilename(const std::string& value);
  void set_resultsfilename(std::string&& value);
  void set_resultsfilename(const char* value);
  void set_resultsfilename(const char* value, size_t size);
  std::string* mutable_resultsfilename();
  std::string* release_resultsfilename();
  void set_allocated_resultsfilename(std::string* resultsfilename);
  private:
  const std::string& _internal_resultsfilename() const;
  void _internal_set_resultsfilename(const std::string& value);
  std::string* _internal_mutable_resultsfilename();
  public:

  // .pulse.cdm.bind.DecimalFormatData DefaultDecimalFormatting = 3;
  bool has_defaultdecimalformatting() const;
  private:
  bool _internal_has_defaultdecimalformatting() const;
  public:
  void clear_defaultdecimalformatting();
  const ::pulse::cdm::bind::DecimalFormatData& defaultdecimalformatting() const;
  ::pulse::cdm::bind::DecimalFormatData* release_defaultdecimalformatting();
  ::pulse::cdm::bind::DecimalFormatData* mutable_defaultdecimalformatting();
  void set_allocated_defaultdecimalformatting(::pulse::cdm::bind::DecimalFormatData* defaultdecimalformatting);
  private:
  const ::pulse::cdm::bind::DecimalFormatData& _internal_defaultdecimalformatting() const;
  ::pulse::cdm::bind::DecimalFormatData* _internal_mutable_defaultdecimalformatting();
  public:
  void unsafe_arena_set_allocated_defaultdecimalformatting(
      ::pulse::cdm::bind::DecimalFormatData* defaultdecimalformatting);
  ::pulse::cdm::bind::DecimalFormatData* unsafe_arena_release_defaultdecimalformatting();

  // .pulse.cdm.bind.DecimalFormatData OverrideDecimalFormatting = 4;
  bool has_overridedecimalformatting() const;
  private:
  bool _internal_has_overridedecimalformatting() const;
  public:
  void clear_overridedecimalformatting();
  const ::pulse::cdm::bind::DecimalFormatData& overridedecimalformatting() const;
  ::pulse::cdm::bind::DecimalFormatData* release_overridedecimalformatting();
  ::pulse::cdm::bind::DecimalFormatData* mutable_overridedecimalformatting();
  void set_allocated_overridedecimalformatting(::pulse::cdm::bind::DecimalFormatData* overridedecimalformatting);
  private:
  const ::pulse::cdm::bind::DecimalFormatData& _internal_overridedecimalformatting() const;
  ::pulse::cdm::bind::DecimalFormatData* _internal_mutable_overridedecimalformatting();
  public:
  void unsafe_arena_set_allocated_overridedecimalformatting(
      ::pulse::cdm::bind::DecimalFormatData* overridedecimalformatting);
  ::pulse::cdm::bind::DecimalFormatData* unsafe_arena_release_overridedecimalformatting();

  // double SamplesPerSecond = 2;
  void clear_samplespersecond();
  double samplespersecond() const;
  void set_samplespersecond(double value);
  private:
  double _internal_samplespersecond() const;
  void _internal_set_samplespersecond(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DataRequestManagerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestData > datarequest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultsfilename_;
  ::pulse::cdm::bind::DecimalFormatData* defaultdecimalformatting_;
  ::pulse::cdm::bind::DecimalFormatData* overridedecimalformatting_;
  double samplespersecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DataRequestedData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DataRequestedData) */ {
 public:
  inline DataRequestedData() : DataRequestedData(nullptr) {}
  virtual ~DataRequestedData();

  DataRequestedData(const DataRequestedData& from);
  DataRequestedData(DataRequestedData&& from) noexcept
    : DataRequestedData() {
    *this = ::std::move(from);
  }

  inline DataRequestedData& operator=(const DataRequestedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequestedData& operator=(DataRequestedData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequestedData& default_instance();

  static inline const DataRequestedData* internal_default_instance() {
    return reinterpret_cast<const DataRequestedData*>(
               &_DataRequestedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataRequestedData& a, DataRequestedData& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequestedData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequestedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequestedData* New() const final {
    return CreateMaybeMessage<DataRequestedData>(nullptr);
  }

  DataRequestedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequestedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequestedData& from);
  void MergeFrom(const DataRequestedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequestedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DataRequestedData";
  }
  protected:
  explicit DataRequestedData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kEventChangeFieldNumber = 4,
    kLogMessagesFieldNumber = 5,
    kIDFieldNumber = 1,
    kIsActiveFieldNumber = 2,
  };
  // repeated double Value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // repeated .pulse.cdm.bind.EventChangeData EventChange = 4;
  int eventchange_size() const;
  private:
  int _internal_eventchange_size() const;
  public:
  void clear_eventchange();
  ::pulse::cdm::bind::EventChangeData* mutable_eventchange(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >*
      mutable_eventchange();
  private:
  const ::pulse::cdm::bind::EventChangeData& _internal_eventchange(int index) const;
  ::pulse::cdm::bind::EventChangeData* _internal_add_eventchange();
  public:
  const ::pulse::cdm::bind::EventChangeData& eventchange(int index) const;
  ::pulse::cdm::bind::EventChangeData* add_eventchange();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >&
      eventchange() const;

  // .pulse.cdm.bind.LogMessagesData LogMessages = 5;
  bool has_logmessages() const;
  private:
  bool _internal_has_logmessages() const;
  public:
  void clear_logmessages();
  const ::pulse::cdm::bind::LogMessagesData& logmessages() const;
  ::pulse::cdm::bind::LogMessagesData* release_logmessages();
  ::pulse::cdm::bind::LogMessagesData* mutable_logmessages();
  void set_allocated_logmessages(::pulse::cdm::bind::LogMessagesData* logmessages);
  private:
  const ::pulse::cdm::bind::LogMessagesData& _internal_logmessages() const;
  ::pulse::cdm::bind::LogMessagesData* _internal_mutable_logmessages();
  public:
  void unsafe_arena_set_allocated_logmessages(
      ::pulse::cdm::bind::LogMessagesData* logmessages);
  ::pulse::cdm::bind::LogMessagesData* unsafe_arena_release_logmessages();

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool IsActive = 2;
  void clear_isactive();
  bool isactive() const;
  void set_isactive(bool value);
  private:
  bool _internal_isactive() const;
  void _internal_set_isactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DataRequestedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData > eventchange_;
  ::pulse::cdm::bind::LogMessagesData* logmessages_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool isactive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DataRequestedListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DataRequestedListData) */ {
 public:
  inline DataRequestedListData() : DataRequestedListData(nullptr) {}
  virtual ~DataRequestedListData();

  DataRequestedListData(const DataRequestedListData& from);
  DataRequestedListData(DataRequestedListData&& from) noexcept
    : DataRequestedListData() {
    *this = ::std::move(from);
  }

  inline DataRequestedListData& operator=(const DataRequestedListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequestedListData& operator=(DataRequestedListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequestedListData& default_instance();

  static inline const DataRequestedListData* internal_default_instance() {
    return reinterpret_cast<const DataRequestedListData*>(
               &_DataRequestedListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataRequestedListData& a, DataRequestedListData& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequestedListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequestedListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequestedListData* New() const final {
    return CreateMaybeMessage<DataRequestedListData>(nullptr);
  }

  DataRequestedListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequestedListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequestedListData& from);
  void MergeFrom(const DataRequestedListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequestedListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DataRequestedListData";
  }
  protected:
  explicit DataRequestedListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestedFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.DataRequestedData DataRequested = 1;
  int datarequested_size() const;
  private:
  int _internal_datarequested_size() const;
  public:
  void clear_datarequested();
  ::pulse::cdm::bind::DataRequestedData* mutable_datarequested(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestedData >*
      mutable_datarequested();
  private:
  const ::pulse::cdm::bind::DataRequestedData& _internal_datarequested(int index) const;
  ::pulse::cdm::bind::DataRequestedData* _internal_add_datarequested();
  public:
  const ::pulse::cdm::bind::DataRequestedData& datarequested(int index) const;
  ::pulse::cdm::bind::DataRequestedData* add_datarequested();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestedData >&
      datarequested() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DataRequestedListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestedData > datarequested_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class AnyConditionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyConditionData) */ {
 public:
  inline AnyConditionData() : AnyConditionData(nullptr) {}
  virtual ~AnyConditionData();

  AnyConditionData(const AnyConditionData& from);
  AnyConditionData(AnyConditionData&& from) noexcept
    : AnyConditionData() {
    *this = ::std::move(from);
  }

  inline AnyConditionData& operator=(const AnyConditionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyConditionData& operator=(AnyConditionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyConditionData& default_instance();

  enum ConditionCase {
    kPatientCondition = 1,
    kEnvironmentCondition = 2,
    CONDITION_NOT_SET = 0,
  };

  static inline const AnyConditionData* internal_default_instance() {
    return reinterpret_cast<const AnyConditionData*>(
               &_AnyConditionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AnyConditionData& a, AnyConditionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyConditionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyConditionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyConditionData* New() const final {
    return CreateMaybeMessage<AnyConditionData>(nullptr);
  }

  AnyConditionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyConditionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyConditionData& from);
  void MergeFrom(const AnyConditionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyConditionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyConditionData";
  }
  protected:
  explicit AnyConditionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientConditionFieldNumber = 1,
    kEnvironmentConditionFieldNumber = 2,
  };
  // .pulse.cdm.bind.AnyPatientConditionData PatientCondition = 1;
  bool has_patientcondition() const;
  private:
  bool _internal_has_patientcondition() const;
  public:
  void clear_patientcondition();
  const ::pulse::cdm::bind::AnyPatientConditionData& patientcondition() const;
  ::pulse::cdm::bind::AnyPatientConditionData* release_patientcondition();
  ::pulse::cdm::bind::AnyPatientConditionData* mutable_patientcondition();
  void set_allocated_patientcondition(::pulse::cdm::bind::AnyPatientConditionData* patientcondition);
  private:
  const ::pulse::cdm::bind::AnyPatientConditionData& _internal_patientcondition() const;
  ::pulse::cdm::bind::AnyPatientConditionData* _internal_mutable_patientcondition();
  public:
  void unsafe_arena_set_allocated_patientcondition(
      ::pulse::cdm::bind::AnyPatientConditionData* patientcondition);
  ::pulse::cdm::bind::AnyPatientConditionData* unsafe_arena_release_patientcondition();

  // .pulse.cdm.bind.AnyEnvironmentConditionData EnvironmentCondition = 2;
  bool has_environmentcondition() const;
  private:
  bool _internal_has_environmentcondition() const;
  public:
  void clear_environmentcondition();
  const ::pulse::cdm::bind::AnyEnvironmentConditionData& environmentcondition() const;
  ::pulse::cdm::bind::AnyEnvironmentConditionData* release_environmentcondition();
  ::pulse::cdm::bind::AnyEnvironmentConditionData* mutable_environmentcondition();
  void set_allocated_environmentcondition(::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition);
  private:
  const ::pulse::cdm::bind::AnyEnvironmentConditionData& _internal_environmentcondition() const;
  ::pulse::cdm::bind::AnyEnvironmentConditionData* _internal_mutable_environmentcondition();
  public:
  void unsafe_arena_set_allocated_environmentcondition(
      ::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition);
  ::pulse::cdm::bind::AnyEnvironmentConditionData* unsafe_arena_release_environmentcondition();

  void clear_Condition();
  ConditionCase Condition_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyConditionData)
 private:
  class _Internal;
  void set_has_patientcondition();
  void set_has_environmentcondition();

  inline bool has_Condition() const;
  inline void clear_has_Condition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ConditionUnion {
    ConditionUnion() {}
    ::pulse::cdm::bind::AnyPatientConditionData* patientcondition_;
    ::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition_;
  } Condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class ConditionListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ConditionListData) */ {
 public:
  inline ConditionListData() : ConditionListData(nullptr) {}
  virtual ~ConditionListData();

  ConditionListData(const ConditionListData& from);
  ConditionListData(ConditionListData&& from) noexcept
    : ConditionListData() {
    *this = ::std::move(from);
  }

  inline ConditionListData& operator=(const ConditionListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionListData& operator=(ConditionListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConditionListData& default_instance();

  static inline const ConditionListData* internal_default_instance() {
    return reinterpret_cast<const ConditionListData*>(
               &_ConditionListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConditionListData& a, ConditionListData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionListData* New() const final {
    return CreateMaybeMessage<ConditionListData>(nullptr);
  }

  ConditionListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConditionListData& from);
  void MergeFrom(const ConditionListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ConditionListData";
  }
  protected:
  explicit ConditionListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyConditionFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.AnyConditionData AnyCondition = 1;
  int anycondition_size() const;
  private:
  int _internal_anycondition_size() const;
  public:
  void clear_anycondition();
  ::pulse::cdm::bind::AnyConditionData* mutable_anycondition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConditionData >*
      mutable_anycondition();
  private:
  const ::pulse::cdm::bind::AnyConditionData& _internal_anycondition(int index) const;
  ::pulse::cdm::bind::AnyConditionData* _internal_add_anycondition();
  public:
  const ::pulse::cdm::bind::AnyConditionData& anycondition(int index) const;
  ::pulse::cdm::bind::AnyConditionData* add_anycondition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConditionData >&
      anycondition() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ConditionListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConditionData > anycondition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class AnyActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyActionData) */ {
 public:
  inline AnyActionData() : AnyActionData(nullptr) {}
  virtual ~AnyActionData();

  AnyActionData(const AnyActionData& from);
  AnyActionData(AnyActionData&& from) noexcept
    : AnyActionData() {
    *this = ::std::move(from);
  }

  inline AnyActionData& operator=(const AnyActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyActionData& operator=(AnyActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyActionData& default_instance();

  enum ActionCase {
    kAdvanceTime = 1,
    kSerialize = 2,
    kOverrides = 3,
    kPatientAction = 4,
    kEnvironmentAction = 5,
    kEquipmentAction = 6,
    ACTION_NOT_SET = 0,
  };

  static inline const AnyActionData* internal_default_instance() {
    return reinterpret_cast<const AnyActionData*>(
               &_AnyActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AnyActionData& a, AnyActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyActionData* New() const final {
    return CreateMaybeMessage<AnyActionData>(nullptr);
  }

  AnyActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyActionData& from);
  void MergeFrom(const AnyActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyActionData";
  }
  protected:
  explicit AnyActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvanceTimeFieldNumber = 1,
    kSerializeFieldNumber = 2,
    kOverridesFieldNumber = 3,
    kPatientActionFieldNumber = 4,
    kEnvironmentActionFieldNumber = 5,
    kEquipmentActionFieldNumber = 6,
  };
  // .pulse.cdm.bind.AdvanceTimeData AdvanceTime = 1;
  bool has_advancetime() const;
  private:
  bool _internal_has_advancetime() const;
  public:
  void clear_advancetime();
  const ::pulse::cdm::bind::AdvanceTimeData& advancetime() const;
  ::pulse::cdm::bind::AdvanceTimeData* release_advancetime();
  ::pulse::cdm::bind::AdvanceTimeData* mutable_advancetime();
  void set_allocated_advancetime(::pulse::cdm::bind::AdvanceTimeData* advancetime);
  private:
  const ::pulse::cdm::bind::AdvanceTimeData& _internal_advancetime() const;
  ::pulse::cdm::bind::AdvanceTimeData* _internal_mutable_advancetime();
  public:
  void unsafe_arena_set_allocated_advancetime(
      ::pulse::cdm::bind::AdvanceTimeData* advancetime);
  ::pulse::cdm::bind::AdvanceTimeData* unsafe_arena_release_advancetime();

  // .pulse.cdm.bind.SerializeStateData Serialize = 2;
  bool has_serialize() const;
  private:
  bool _internal_has_serialize() const;
  public:
  void clear_serialize();
  const ::pulse::cdm::bind::SerializeStateData& serialize() const;
  ::pulse::cdm::bind::SerializeStateData* release_serialize();
  ::pulse::cdm::bind::SerializeStateData* mutable_serialize();
  void set_allocated_serialize(::pulse::cdm::bind::SerializeStateData* serialize);
  private:
  const ::pulse::cdm::bind::SerializeStateData& _internal_serialize() const;
  ::pulse::cdm::bind::SerializeStateData* _internal_mutable_serialize();
  public:
  void unsafe_arena_set_allocated_serialize(
      ::pulse::cdm::bind::SerializeStateData* serialize);
  ::pulse::cdm::bind::SerializeStateData* unsafe_arena_release_serialize();

  // .pulse.cdm.bind.OverridesData Overrides = 3;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::pulse::cdm::bind::OverridesData& overrides() const;
  ::pulse::cdm::bind::OverridesData* release_overrides();
  ::pulse::cdm::bind::OverridesData* mutable_overrides();
  void set_allocated_overrides(::pulse::cdm::bind::OverridesData* overrides);
  private:
  const ::pulse::cdm::bind::OverridesData& _internal_overrides() const;
  ::pulse::cdm::bind::OverridesData* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::pulse::cdm::bind::OverridesData* overrides);
  ::pulse::cdm::bind::OverridesData* unsafe_arena_release_overrides();

  // .pulse.cdm.bind.AnyPatientActionData PatientAction = 4;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::AnyPatientActionData& patientaction() const;
  ::pulse::cdm::bind::AnyPatientActionData* release_patientaction();
  ::pulse::cdm::bind::AnyPatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::AnyPatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::AnyPatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::AnyPatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::AnyPatientActionData* patientaction);
  ::pulse::cdm::bind::AnyPatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.AnyEnvironmentActionData EnvironmentAction = 5;
  bool has_environmentaction() const;
  private:
  bool _internal_has_environmentaction() const;
  public:
  void clear_environmentaction();
  const ::pulse::cdm::bind::AnyEnvironmentActionData& environmentaction() const;
  ::pulse::cdm::bind::AnyEnvironmentActionData* release_environmentaction();
  ::pulse::cdm::bind::AnyEnvironmentActionData* mutable_environmentaction();
  void set_allocated_environmentaction(::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction);
  private:
  const ::pulse::cdm::bind::AnyEnvironmentActionData& _internal_environmentaction() const;
  ::pulse::cdm::bind::AnyEnvironmentActionData* _internal_mutable_environmentaction();
  public:
  void unsafe_arena_set_allocated_environmentaction(
      ::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction);
  ::pulse::cdm::bind::AnyEnvironmentActionData* unsafe_arena_release_environmentaction();

  // .pulse.cdm.bind.AnyEquipmentActionData EquipmentAction = 6;
  bool has_equipmentaction() const;
  private:
  bool _internal_has_equipmentaction() const;
  public:
  void clear_equipmentaction();
  const ::pulse::cdm::bind::AnyEquipmentActionData& equipmentaction() const;
  ::pulse::cdm::bind::AnyEquipmentActionData* release_equipmentaction();
  ::pulse::cdm::bind::AnyEquipmentActionData* mutable_equipmentaction();
  void set_allocated_equipmentaction(::pulse::cdm::bind::AnyEquipmentActionData* equipmentaction);
  private:
  const ::pulse::cdm::bind::AnyEquipmentActionData& _internal_equipmentaction() const;
  ::pulse::cdm::bind::AnyEquipmentActionData* _internal_mutable_equipmentaction();
  public:
  void unsafe_arena_set_allocated_equipmentaction(
      ::pulse::cdm::bind::AnyEquipmentActionData* equipmentaction);
  ::pulse::cdm::bind::AnyEquipmentActionData* unsafe_arena_release_equipmentaction();

  void clear_Action();
  ActionCase Action_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyActionData)
 private:
  class _Internal;
  void set_has_advancetime();
  void set_has_serialize();
  void set_has_overrides();
  void set_has_patientaction();
  void set_has_environmentaction();
  void set_has_equipmentaction();

  inline bool has_Action() const;
  inline void clear_has_Action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::pulse::cdm::bind::AdvanceTimeData* advancetime_;
    ::pulse::cdm::bind::SerializeStateData* serialize_;
    ::pulse::cdm::bind::OverridesData* overrides_;
    ::pulse::cdm::bind::AnyPatientActionData* patientaction_;
    ::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction_;
    ::pulse::cdm::bind::AnyEquipmentActionData* equipmentaction_;
  } Action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class ActionListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActionListData) */ {
 public:
  inline ActionListData() : ActionListData(nullptr) {}
  virtual ~ActionListData();

  ActionListData(const ActionListData& from);
  ActionListData(ActionListData&& from) noexcept
    : ActionListData() {
    *this = ::std::move(from);
  }

  inline ActionListData& operator=(const ActionListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionListData& operator=(ActionListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionListData& default_instance();

  static inline const ActionListData* internal_default_instance() {
    return reinterpret_cast<const ActionListData*>(
               &_ActionListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ActionListData& a, ActionListData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionListData* New() const final {
    return CreateMaybeMessage<ActionListData>(nullptr);
  }

  ActionListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionListData& from);
  void MergeFrom(const ActionListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActionListData";
  }
  protected:
  explicit ActionListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyActionFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 1;
  int anyaction_size() const;
  private:
  int _internal_anyaction_size() const;
  public:
  void clear_anyaction();
  ::pulse::cdm::bind::AnyActionData* mutable_anyaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
      mutable_anyaction();
  private:
  const ::pulse::cdm::bind::AnyActionData& _internal_anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* _internal_add_anyaction();
  public:
  const ::pulse::cdm::bind::AnyActionData& anyaction(int index) const;
  ::pulse::cdm::bind::AnyActionData* add_anyaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
      anyaction() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActionListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData > anyaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class ActionMapData_ActionMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActionMapData_ActionMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActionMapData_ActionMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ActionMapData_ActionMapEntry_DoNotUse();
  explicit ActionMapData_ActionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ActionMapData_ActionMapEntry_DoNotUse& other);
  static const ActionMapData_ActionMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ActionMapData_ActionMapEntry_DoNotUse*>(&_ActionMapData_ActionMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class ActionMapData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActionMapData) */ {
 public:
  inline ActionMapData() : ActionMapData(nullptr) {}
  virtual ~ActionMapData();

  ActionMapData(const ActionMapData& from);
  ActionMapData(ActionMapData&& from) noexcept
    : ActionMapData() {
    *this = ::std::move(from);
  }

  inline ActionMapData& operator=(const ActionMapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionMapData& operator=(ActionMapData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionMapData& default_instance();

  static inline const ActionMapData* internal_default_instance() {
    return reinterpret_cast<const ActionMapData*>(
               &_ActionMapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActionMapData& a, ActionMapData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionMapData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionMapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionMapData* New() const final {
    return CreateMaybeMessage<ActionMapData>(nullptr);
  }

  ActionMapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionMapData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionMapData& from);
  void MergeFrom(const ActionMapData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionMapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActionMapData";
  }
  protected:
  explicit ActionMapData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActionMapFieldNumber = 1,
  };
  // map<int32, .pulse.cdm.bind.ActionListData> ActionMap = 1;
  int actionmap_size() const;
  private:
  int _internal_actionmap_size() const;
  public:
  void clear_actionmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >&
      _internal_actionmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >*
      _internal_mutable_actionmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >&
      actionmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >*
      mutable_actionmap();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActionMapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ActionMapData_ActionMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> actionmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class PatientConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientConfigurationData) */ {
 public:
  inline PatientConfigurationData() : PatientConfigurationData(nullptr) {}
  virtual ~PatientConfigurationData();

  PatientConfigurationData(const PatientConfigurationData& from);
  PatientConfigurationData(PatientConfigurationData&& from) noexcept
    : PatientConfigurationData() {
    *this = ::std::move(from);
  }

  inline PatientConfigurationData& operator=(const PatientConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientConfigurationData& operator=(PatientConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientConfigurationData& default_instance();

  enum PatientTypeCase {
    kPatient = 2,
    kPatientFile = 3,
    PATIENTTYPE_NOT_SET = 0,
  };

  static inline const PatientConfigurationData* internal_default_instance() {
    return reinterpret_cast<const PatientConfigurationData*>(
               &_PatientConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PatientConfigurationData& a, PatientConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientConfigurationData* New() const final {
    return CreateMaybeMessage<PatientConfigurationData>(nullptr);
  }

  PatientConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientConfigurationData& from);
  void MergeFrom(const PatientConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientConfigurationData";
  }
  protected:
  explicit PatientConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarOverrideFieldNumber = 5,
    kDataRootFieldNumber = 1,
    kConditionsFieldNumber = 4,
    kPatientFieldNumber = 2,
    kPatientFileFieldNumber = 3,
  };
  // repeated .pulse.cdm.bind.ScalarPropertyData ScalarOverride = 5;
  int scalaroverride_size() const;
  private:
  int _internal_scalaroverride_size() const;
  public:
  void clear_scalaroverride();
  ::pulse::cdm::bind::ScalarPropertyData* mutable_scalaroverride(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ScalarPropertyData >*
      mutable_scalaroverride();
  private:
  const ::pulse::cdm::bind::ScalarPropertyData& _internal_scalaroverride(int index) const;
  ::pulse::cdm::bind::ScalarPropertyData* _internal_add_scalaroverride();
  public:
  const ::pulse::cdm::bind::ScalarPropertyData& scalaroverride(int index) const;
  ::pulse::cdm::bind::ScalarPropertyData* add_scalaroverride();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ScalarPropertyData >&
      scalaroverride() const;

  // string DataRoot = 1;
  void clear_dataroot();
  const std::string& dataroot() const;
  void set_dataroot(const std::string& value);
  void set_dataroot(std::string&& value);
  void set_dataroot(const char* value);
  void set_dataroot(const char* value, size_t size);
  std::string* mutable_dataroot();
  std::string* release_dataroot();
  void set_allocated_dataroot(std::string* dataroot);
  private:
  const std::string& _internal_dataroot() const;
  void _internal_set_dataroot(const std::string& value);
  std::string* _internal_mutable_dataroot();
  public:

  // .pulse.cdm.bind.ConditionListData Conditions = 4;
  bool has_conditions() const;
  private:
  bool _internal_has_conditions() const;
  public:
  void clear_conditions();
  const ::pulse::cdm::bind::ConditionListData& conditions() const;
  ::pulse::cdm::bind::ConditionListData* release_conditions();
  ::pulse::cdm::bind::ConditionListData* mutable_conditions();
  void set_allocated_conditions(::pulse::cdm::bind::ConditionListData* conditions);
  private:
  const ::pulse::cdm::bind::ConditionListData& _internal_conditions() const;
  ::pulse::cdm::bind::ConditionListData* _internal_mutable_conditions();
  public:
  void unsafe_arena_set_allocated_conditions(
      ::pulse::cdm::bind::ConditionListData* conditions);
  ::pulse::cdm::bind::ConditionListData* unsafe_arena_release_conditions();

  // .pulse.cdm.bind.PatientData Patient = 2;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::pulse::cdm::bind::PatientData& patient() const;
  ::pulse::cdm::bind::PatientData* release_patient();
  ::pulse::cdm::bind::PatientData* mutable_patient();
  void set_allocated_patient(::pulse::cdm::bind::PatientData* patient);
  private:
  const ::pulse::cdm::bind::PatientData& _internal_patient() const;
  ::pulse::cdm::bind::PatientData* _internal_mutable_patient();
  public:
  void unsafe_arena_set_allocated_patient(
      ::pulse::cdm::bind::PatientData* patient);
  ::pulse::cdm::bind::PatientData* unsafe_arena_release_patient();

  // string PatientFile = 3;
  private:
  bool _internal_has_patientfile() const;
  public:
  void clear_patientfile();
  const std::string& patientfile() const;
  void set_patientfile(const std::string& value);
  void set_patientfile(std::string&& value);
  void set_patientfile(const char* value);
  void set_patientfile(const char* value, size_t size);
  std::string* mutable_patientfile();
  std::string* release_patientfile();
  void set_allocated_patientfile(std::string* patientfile);
  private:
  const std::string& _internal_patientfile() const;
  void _internal_set_patientfile(const std::string& value);
  std::string* _internal_mutable_patientfile();
  public:

  void clear_PatientType();
  PatientTypeCase PatientType_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientConfigurationData)
 private:
  class _Internal;
  void set_has_patient();
  void set_has_patientfile();

  inline bool has_PatientType() const;
  inline void clear_has_PatientType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ScalarPropertyData > scalaroverride_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataroot_;
  ::pulse::cdm::bind::ConditionListData* conditions_;
  union PatientTypeUnion {
    PatientTypeUnion() {}
    ::pulse::cdm::bind::PatientData* patient_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patientfile_;
  } PatientType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class EngineInitializationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EngineInitializationData) */ {
 public:
  inline EngineInitializationData() : EngineInitializationData(nullptr) {}
  virtual ~EngineInitializationData();

  EngineInitializationData(const EngineInitializationData& from);
  EngineInitializationData(EngineInitializationData&& from) noexcept
    : EngineInitializationData() {
    *this = ::std::move(from);
  }

  inline EngineInitializationData& operator=(const EngineInitializationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineInitializationData& operator=(EngineInitializationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineInitializationData& default_instance();

  enum StartTypeCase {
    kPatientConfiguration = 2,
    kStateFilename = 3,
    kState = 4,
    STARTTYPE_NOT_SET = 0,
  };

  static inline const EngineInitializationData* internal_default_instance() {
    return reinterpret_cast<const EngineInitializationData*>(
               &_EngineInitializationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EngineInitializationData& a, EngineInitializationData& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineInitializationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineInitializationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineInitializationData* New() const final {
    return CreateMaybeMessage<EngineInitializationData>(nullptr);
  }

  EngineInitializationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineInitializationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineInitializationData& from);
  void MergeFrom(const EngineInitializationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineInitializationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EngineInitializationData";
  }
  protected:
  explicit EngineInitializationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFilenameFieldNumber = 6,
    kDataRequestManagerFieldNumber = 5,
    kIDFieldNumber = 1,
    kKeepLogMessagesFieldNumber = 7,
    kKeepEventChangesFieldNumber = 8,
    kPatientConfigurationFieldNumber = 2,
    kStateFilenameFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string LogFilename = 6;
  void clear_logfilename();
  const std::string& logfilename() const;
  void set_logfilename(const std::string& value);
  void set_logfilename(std::string&& value);
  void set_logfilename(const char* value);
  void set_logfilename(const char* value, size_t size);
  std::string* mutable_logfilename();
  std::string* release_logfilename();
  void set_allocated_logfilename(std::string* logfilename);
  private:
  const std::string& _internal_logfilename() const;
  void _internal_set_logfilename(const std::string& value);
  std::string* _internal_mutable_logfilename();
  public:

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
  bool has_datarequestmanager() const;
  private:
  bool _internal_has_datarequestmanager() const;
  public:
  void clear_datarequestmanager();
  const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* release_datarequestmanager();
  ::pulse::cdm::bind::DataRequestManagerData* mutable_datarequestmanager();
  void set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager);
  private:
  const ::pulse::cdm::bind::DataRequestManagerData& _internal_datarequestmanager() const;
  ::pulse::cdm::bind::DataRequestManagerData* _internal_mutable_datarequestmanager();
  public:
  void unsafe_arena_set_allocated_datarequestmanager(
      ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager);
  ::pulse::cdm::bind::DataRequestManagerData* unsafe_arena_release_datarequestmanager();

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool KeepLogMessages = 7;
  void clear_keeplogmessages();
  bool keeplogmessages() const;
  void set_keeplogmessages(bool value);
  private:
  bool _internal_keeplogmessages() const;
  void _internal_set_keeplogmessages(bool value);
  public:

  // bool KeepEventChanges = 8;
  void clear_keepeventchanges();
  bool keepeventchanges() const;
  void set_keepeventchanges(bool value);
  private:
  bool _internal_keepeventchanges() const;
  void _internal_set_keepeventchanges(bool value);
  public:

  // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 2;
  bool has_patientconfiguration() const;
  private:
  bool _internal_has_patientconfiguration() const;
  public:
  void clear_patientconfiguration();
  const ::pulse::cdm::bind::PatientConfigurationData& patientconfiguration() const;
  ::pulse::cdm::bind::PatientConfigurationData* release_patientconfiguration();
  ::pulse::cdm::bind::PatientConfigurationData* mutable_patientconfiguration();
  void set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration);
  private:
  const ::pulse::cdm::bind::PatientConfigurationData& _internal_patientconfiguration() const;
  ::pulse::cdm::bind::PatientConfigurationData* _internal_mutable_patientconfiguration();
  public:
  void unsafe_arena_set_allocated_patientconfiguration(
      ::pulse::cdm::bind::PatientConfigurationData* patientconfiguration);
  ::pulse::cdm::bind::PatientConfigurationData* unsafe_arena_release_patientconfiguration();

  // string StateFilename = 3;
  private:
  bool _internal_has_statefilename() const;
  public:
  void clear_statefilename();
  const std::string& statefilename() const;
  void set_statefilename(const std::string& value);
  void set_statefilename(std::string&& value);
  void set_statefilename(const char* value);
  void set_statefilename(const char* value, size_t size);
  std::string* mutable_statefilename();
  std::string* release_statefilename();
  void set_allocated_statefilename(std::string* statefilename);
  private:
  const std::string& _internal_statefilename() const;
  void _internal_set_statefilename(const std::string& value);
  std::string* _internal_mutable_statefilename();
  public:

  // string State = 4;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  void clear_StartType();
  StartTypeCase StartType_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EngineInitializationData)
 private:
  class _Internal;
  void set_has_patientconfiguration();
  void set_has_statefilename();
  void set_has_state();

  inline bool has_StartType() const;
  inline void clear_has_StartType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfilename_;
  ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool keeplogmessages_;
  bool keepeventchanges_;
  union StartTypeUnion {
    StartTypeUnion() {}
    ::pulse::cdm::bind::PatientConfigurationData* patientconfiguration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statefilename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  } StartType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class EngineInitializationListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EngineInitializationListData) */ {
 public:
  inline EngineInitializationListData() : EngineInitializationListData(nullptr) {}
  virtual ~EngineInitializationListData();

  EngineInitializationListData(const EngineInitializationListData& from);
  EngineInitializationListData(EngineInitializationListData&& from) noexcept
    : EngineInitializationListData() {
    *this = ::std::move(from);
  }

  inline EngineInitializationListData& operator=(const EngineInitializationListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineInitializationListData& operator=(EngineInitializationListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineInitializationListData& default_instance();

  static inline const EngineInitializationListData* internal_default_instance() {
    return reinterpret_cast<const EngineInitializationListData*>(
               &_EngineInitializationListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EngineInitializationListData& a, EngineInitializationListData& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineInitializationListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineInitializationListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineInitializationListData* New() const final {
    return CreateMaybeMessage<EngineInitializationListData>(nullptr);
  }

  EngineInitializationListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineInitializationListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineInitializationListData& from);
  void MergeFrom(const EngineInitializationListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineInitializationListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EngineInitializationListData";
  }
  protected:
  explicit EngineInitializationListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEngineInitializationFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.EngineInitializationData EngineInitialization = 1;
  int engineinitialization_size() const;
  private:
  int _internal_engineinitialization_size() const;
  public:
  void clear_engineinitialization();
  ::pulse::cdm::bind::EngineInitializationData* mutable_engineinitialization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EngineInitializationData >*
      mutable_engineinitialization();
  private:
  const ::pulse::cdm::bind::EngineInitializationData& _internal_engineinitialization(int index) const;
  ::pulse::cdm::bind::EngineInitializationData* _internal_add_engineinitialization();
  public:
  const ::pulse::cdm::bind::EngineInitializationData& engineinitialization(int index) const;
  ::pulse::cdm::bind::EngineInitializationData* add_engineinitialization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EngineInitializationData >&
      engineinitialization() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EngineInitializationListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EngineInitializationData > engineinitialization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class TimedStabilizationData_ConditionStabilizationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, 
    std::string, ::pulse::cdm::bind::ScalarTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TimedStabilizationData_ConditionStabilizationEntry_DoNotUse, 
    std::string, ::pulse::cdm::bind::ScalarTimeData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TimedStabilizationData_ConditionStabilizationEntry_DoNotUse();
  explicit TimedStabilizationData_ConditionStabilizationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TimedStabilizationData_ConditionStabilizationEntry_DoNotUse& other);
  static const TimedStabilizationData_ConditionStabilizationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TimedStabilizationData_ConditionStabilizationEntry_DoNotUse*>(&_TimedStabilizationData_ConditionStabilizationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pulse.cdm.bind.TimedStabilizationData.ConditionStabilizationEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class TimedStabilizationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TimedStabilizationData) */ {
 public:
  inline TimedStabilizationData() : TimedStabilizationData(nullptr) {}
  virtual ~TimedStabilizationData();

  TimedStabilizationData(const TimedStabilizationData& from);
  TimedStabilizationData(TimedStabilizationData&& from) noexcept
    : TimedStabilizationData() {
    *this = ::std::move(from);
  }

  inline TimedStabilizationData& operator=(const TimedStabilizationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedStabilizationData& operator=(TimedStabilizationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimedStabilizationData& default_instance();

  static inline const TimedStabilizationData* internal_default_instance() {
    return reinterpret_cast<const TimedStabilizationData*>(
               &_TimedStabilizationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TimedStabilizationData& a, TimedStabilizationData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimedStabilizationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimedStabilizationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimedStabilizationData* New() const final {
    return CreateMaybeMessage<TimedStabilizationData>(nullptr);
  }

  TimedStabilizationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimedStabilizationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimedStabilizationData& from);
  void MergeFrom(const TimedStabilizationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimedStabilizationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TimedStabilizationData";
  }
  protected:
  explicit TimedStabilizationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConditionStabilizationFieldNumber = 4,
    kRestingStabilizationTimeFieldNumber = 2,
    kFeedbackStabilizationTimeFieldNumber = 3,
    kTrackingStabilizationFieldNumber = 1,
  };
  // map<string, .pulse.cdm.bind.ScalarTimeData> ConditionStabilization = 4;
  int conditionstabilization_size() const;
  private:
  int _internal_conditionstabilization_size() const;
  public:
  void clear_conditionstabilization();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >&
      _internal_conditionstabilization() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >*
      _internal_mutable_conditionstabilization();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >&
      conditionstabilization() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >*
      mutable_conditionstabilization();

  // .pulse.cdm.bind.ScalarTimeData RestingStabilizationTime = 2;
  bool has_restingstabilizationtime() const;
  private:
  bool _internal_has_restingstabilizationtime() const;
  public:
  void clear_restingstabilizationtime();
  const ::pulse::cdm::bind::ScalarTimeData& restingstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_restingstabilizationtime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_restingstabilizationtime();
  void set_allocated_restingstabilizationtime(::pulse::cdm::bind::ScalarTimeData* restingstabilizationtime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_restingstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_restingstabilizationtime();
  public:
  void unsafe_arena_set_allocated_restingstabilizationtime(
      ::pulse::cdm::bind::ScalarTimeData* restingstabilizationtime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_restingstabilizationtime();

  // .pulse.cdm.bind.ScalarTimeData FeedbackStabilizationTime = 3;
  bool has_feedbackstabilizationtime() const;
  private:
  bool _internal_has_feedbackstabilizationtime() const;
  public:
  void clear_feedbackstabilizationtime();
  const ::pulse::cdm::bind::ScalarTimeData& feedbackstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_feedbackstabilizationtime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_feedbackstabilizationtime();
  void set_allocated_feedbackstabilizationtime(::pulse::cdm::bind::ScalarTimeData* feedbackstabilizationtime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_feedbackstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_feedbackstabilizationtime();
  public:
  void unsafe_arena_set_allocated_feedbackstabilizationtime(
      ::pulse::cdm::bind::ScalarTimeData* feedbackstabilizationtime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_feedbackstabilizationtime();

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  void clear_trackingstabilization();
  ::pulse::cdm::bind::eSwitch trackingstabilization() const;
  void set_trackingstabilization(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_trackingstabilization() const;
  void _internal_set_trackingstabilization(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TimedStabilizationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TimedStabilizationData_ConditionStabilizationEntry_DoNotUse,
      std::string, ::pulse::cdm::bind::ScalarTimeData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> conditionstabilization_;
  ::pulse::cdm::bind::ScalarTimeData* restingstabilizationtime_;
  ::pulse::cdm::bind::ScalarTimeData* feedbackstabilizationtime_;
  int trackingstabilization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DynamicStabilizationPropertyConvergenceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData) */ {
 public:
  inline DynamicStabilizationPropertyConvergenceData() : DynamicStabilizationPropertyConvergenceData(nullptr) {}
  virtual ~DynamicStabilizationPropertyConvergenceData();

  DynamicStabilizationPropertyConvergenceData(const DynamicStabilizationPropertyConvergenceData& from);
  DynamicStabilizationPropertyConvergenceData(DynamicStabilizationPropertyConvergenceData&& from) noexcept
    : DynamicStabilizationPropertyConvergenceData() {
    *this = ::std::move(from);
  }

  inline DynamicStabilizationPropertyConvergenceData& operator=(const DynamicStabilizationPropertyConvergenceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicStabilizationPropertyConvergenceData& operator=(DynamicStabilizationPropertyConvergenceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicStabilizationPropertyConvergenceData& default_instance();

  static inline const DynamicStabilizationPropertyConvergenceData* internal_default_instance() {
    return reinterpret_cast<const DynamicStabilizationPropertyConvergenceData*>(
               &_DynamicStabilizationPropertyConvergenceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DynamicStabilizationPropertyConvergenceData& a, DynamicStabilizationPropertyConvergenceData& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicStabilizationPropertyConvergenceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicStabilizationPropertyConvergenceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicStabilizationPropertyConvergenceData* New() const final {
    return CreateMaybeMessage<DynamicStabilizationPropertyConvergenceData>(nullptr);
  }

  DynamicStabilizationPropertyConvergenceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicStabilizationPropertyConvergenceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicStabilizationPropertyConvergenceData& from);
  void MergeFrom(const DynamicStabilizationPropertyConvergenceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicStabilizationPropertyConvergenceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData";
  }
  protected:
  explicit DynamicStabilizationPropertyConvergenceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 1,
    kPercentDifferenceFieldNumber = 2,
  };
  // .pulse.cdm.bind.DataRequestData DataRequest = 1;
  bool has_datarequest() const;
  private:
  bool _internal_has_datarequest() const;
  public:
  void clear_datarequest();
  const ::pulse::cdm::bind::DataRequestData& datarequest() const;
  ::pulse::cdm::bind::DataRequestData* release_datarequest();
  ::pulse::cdm::bind::DataRequestData* mutable_datarequest();
  void set_allocated_datarequest(::pulse::cdm::bind::DataRequestData* datarequest);
  private:
  const ::pulse::cdm::bind::DataRequestData& _internal_datarequest() const;
  ::pulse::cdm::bind::DataRequestData* _internal_mutable_datarequest();
  public:
  void unsafe_arena_set_allocated_datarequest(
      ::pulse::cdm::bind::DataRequestData* datarequest);
  ::pulse::cdm::bind::DataRequestData* unsafe_arena_release_datarequest();

  // double PercentDifference = 2;
  void clear_percentdifference();
  double percentdifference() const;
  void set_percentdifference(double value);
  private:
  double _internal_percentdifference() const;
  void _internal_set_percentdifference(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::DataRequestData* datarequest_;
  double percentdifference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DynamicStabilizationEngineConvergenceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData) */ {
 public:
  inline DynamicStabilizationEngineConvergenceData() : DynamicStabilizationEngineConvergenceData(nullptr) {}
  virtual ~DynamicStabilizationEngineConvergenceData();

  DynamicStabilizationEngineConvergenceData(const DynamicStabilizationEngineConvergenceData& from);
  DynamicStabilizationEngineConvergenceData(DynamicStabilizationEngineConvergenceData&& from) noexcept
    : DynamicStabilizationEngineConvergenceData() {
    *this = ::std::move(from);
  }

  inline DynamicStabilizationEngineConvergenceData& operator=(const DynamicStabilizationEngineConvergenceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicStabilizationEngineConvergenceData& operator=(DynamicStabilizationEngineConvergenceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicStabilizationEngineConvergenceData& default_instance();

  static inline const DynamicStabilizationEngineConvergenceData* internal_default_instance() {
    return reinterpret_cast<const DynamicStabilizationEngineConvergenceData*>(
               &_DynamicStabilizationEngineConvergenceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DynamicStabilizationEngineConvergenceData& a, DynamicStabilizationEngineConvergenceData& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicStabilizationEngineConvergenceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicStabilizationEngineConvergenceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicStabilizationEngineConvergenceData* New() const final {
    return CreateMaybeMessage<DynamicStabilizationEngineConvergenceData>(nullptr);
  }

  DynamicStabilizationEngineConvergenceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicStabilizationEngineConvergenceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicStabilizationEngineConvergenceData& from);
  void MergeFrom(const DynamicStabilizationEngineConvergenceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicStabilizationEngineConvergenceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DynamicStabilizationEngineConvergenceData";
  }
  protected:
  explicit DynamicStabilizationEngineConvergenceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyConvergenceFieldNumber = 4,
    kConvergenceTimeFieldNumber = 1,
    kMinimumReactionTimeFieldNumber = 2,
    kMaximumAllowedStabilizationTimeFieldNumber = 3,
  };
  // repeated .pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData PropertyConvergence = 4;
  int propertyconvergence_size() const;
  private:
  int _internal_propertyconvergence_size() const;
  public:
  void clear_propertyconvergence();
  ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* mutable_propertyconvergence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >*
      mutable_propertyconvergence();
  private:
  const ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData& _internal_propertyconvergence(int index) const;
  ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* _internal_add_propertyconvergence();
  public:
  const ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData& propertyconvergence(int index) const;
  ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* add_propertyconvergence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >&
      propertyconvergence() const;

  // .pulse.cdm.bind.ScalarTimeData ConvergenceTime = 1;
  bool has_convergencetime() const;
  private:
  bool _internal_has_convergencetime() const;
  public:
  void clear_convergencetime();
  const ::pulse::cdm::bind::ScalarTimeData& convergencetime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_convergencetime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_convergencetime();
  void set_allocated_convergencetime(::pulse::cdm::bind::ScalarTimeData* convergencetime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_convergencetime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_convergencetime();
  public:
  void unsafe_arena_set_allocated_convergencetime(
      ::pulse::cdm::bind::ScalarTimeData* convergencetime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_convergencetime();

  // .pulse.cdm.bind.ScalarTimeData MinimumReactionTime = 2;
  bool has_minimumreactiontime() const;
  private:
  bool _internal_has_minimumreactiontime() const;
  public:
  void clear_minimumreactiontime();
  const ::pulse::cdm::bind::ScalarTimeData& minimumreactiontime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_minimumreactiontime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_minimumreactiontime();
  void set_allocated_minimumreactiontime(::pulse::cdm::bind::ScalarTimeData* minimumreactiontime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_minimumreactiontime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_minimumreactiontime();
  public:
  void unsafe_arena_set_allocated_minimumreactiontime(
      ::pulse::cdm::bind::ScalarTimeData* minimumreactiontime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_minimumreactiontime();

  // .pulse.cdm.bind.ScalarTimeData MaximumAllowedStabilizationTime = 3;
  bool has_maximumallowedstabilizationtime() const;
  private:
  bool _internal_has_maximumallowedstabilizationtime() const;
  public:
  void clear_maximumallowedstabilizationtime();
  const ::pulse::cdm::bind::ScalarTimeData& maximumallowedstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_maximumallowedstabilizationtime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_maximumallowedstabilizationtime();
  void set_allocated_maximumallowedstabilizationtime(::pulse::cdm::bind::ScalarTimeData* maximumallowedstabilizationtime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_maximumallowedstabilizationtime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_maximumallowedstabilizationtime();
  public:
  void unsafe_arena_set_allocated_maximumallowedstabilizationtime(
      ::pulse::cdm::bind::ScalarTimeData* maximumallowedstabilizationtime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_maximumallowedstabilizationtime();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData > propertyconvergence_;
  ::pulse::cdm::bind::ScalarTimeData* convergencetime_;
  ::pulse::cdm::bind::ScalarTimeData* minimumreactiontime_;
  ::pulse::cdm::bind::ScalarTimeData* maximumallowedstabilizationtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, 
    std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse, 
    std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse();
  explicit DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse& other);
  static const DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse*>(&_DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pulse.cdm.bind.DynamicStabilizationData.ConditionConvergenceEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class DynamicStabilizationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DynamicStabilizationData) */ {
 public:
  inline DynamicStabilizationData() : DynamicStabilizationData(nullptr) {}
  virtual ~DynamicStabilizationData();

  DynamicStabilizationData(const DynamicStabilizationData& from);
  DynamicStabilizationData(DynamicStabilizationData&& from) noexcept
    : DynamicStabilizationData() {
    *this = ::std::move(from);
  }

  inline DynamicStabilizationData& operator=(const DynamicStabilizationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicStabilizationData& operator=(DynamicStabilizationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicStabilizationData& default_instance();

  static inline const DynamicStabilizationData* internal_default_instance() {
    return reinterpret_cast<const DynamicStabilizationData*>(
               &_DynamicStabilizationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DynamicStabilizationData& a, DynamicStabilizationData& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicStabilizationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicStabilizationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicStabilizationData* New() const final {
    return CreateMaybeMessage<DynamicStabilizationData>(nullptr);
  }

  DynamicStabilizationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicStabilizationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicStabilizationData& from);
  void MergeFrom(const DynamicStabilizationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicStabilizationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DynamicStabilizationData";
  }
  protected:
  explicit DynamicStabilizationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConditionConvergenceFieldNumber = 4,
    kRestingConvergenceFieldNumber = 2,
    kFeedbackConvergenceFieldNumber = 3,
    kTrackingStabilizationFieldNumber = 1,
  };
  // map<string, .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData> ConditionConvergence = 4;
  int conditionconvergence_size() const;
  private:
  int _internal_conditionconvergence_size() const;
  public:
  void clear_conditionconvergence();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >&
      _internal_conditionconvergence() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >*
      _internal_mutable_conditionconvergence();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >&
      conditionconvergence() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >*
      mutable_conditionconvergence();

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData RestingConvergence = 2;
  bool has_restingconvergence() const;
  private:
  bool _internal_has_restingconvergence() const;
  public:
  void clear_restingconvergence();
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& restingconvergence() const;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* release_restingconvergence();
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* mutable_restingconvergence();
  void set_allocated_restingconvergence(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* restingconvergence);
  private:
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& _internal_restingconvergence() const;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* _internal_mutable_restingconvergence();
  public:
  void unsafe_arena_set_allocated_restingconvergence(
      ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* restingconvergence);
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* unsafe_arena_release_restingconvergence();

  // .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData FeedbackConvergence = 3;
  bool has_feedbackconvergence() const;
  private:
  bool _internal_has_feedbackconvergence() const;
  public:
  void clear_feedbackconvergence();
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& feedbackconvergence() const;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* release_feedbackconvergence();
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* mutable_feedbackconvergence();
  void set_allocated_feedbackconvergence(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* feedbackconvergence);
  private:
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& _internal_feedbackconvergence() const;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* _internal_mutable_feedbackconvergence();
  public:
  void unsafe_arena_set_allocated_feedbackconvergence(
      ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* feedbackconvergence);
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* unsafe_arena_release_feedbackconvergence();

  // .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
  void clear_trackingstabilization();
  ::pulse::cdm::bind::eSwitch trackingstabilization() const;
  void set_trackingstabilization(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_trackingstabilization() const;
  void _internal_set_trackingstabilization(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DynamicStabilizationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DynamicStabilizationData_ConditionConvergenceEntry_DoNotUse,
      std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> conditionconvergence_;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* restingconvergence_;
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* feedbackconvergence_;
  int trackingstabilization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// -------------------------------------------------------------------

class LogMessagesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LogMessagesData) */ {
 public:
  inline LogMessagesData() : LogMessagesData(nullptr) {}
  virtual ~LogMessagesData();

  LogMessagesData(const LogMessagesData& from);
  LogMessagesData(LogMessagesData&& from) noexcept
    : LogMessagesData() {
    *this = ::std::move(from);
  }

  inline LogMessagesData& operator=(const LogMessagesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMessagesData& operator=(LogMessagesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMessagesData& default_instance();

  static inline const LogMessagesData* internal_default_instance() {
    return reinterpret_cast<const LogMessagesData*>(
               &_LogMessagesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(LogMessagesData& a, LogMessagesData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMessagesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMessagesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMessagesData* New() const final {
    return CreateMaybeMessage<LogMessagesData>(nullptr);
  }

  LogMessagesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMessagesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMessagesData& from);
  void MergeFrom(const LogMessagesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMessagesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LogMessagesData";
  }
  protected:
  explicit LogMessagesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugMessagesFieldNumber = 1,
    kInfogMessagesFieldNumber = 2,
    kWarningMessagesFieldNumber = 3,
    kErrorMessagesFieldNumber = 4,
    kFatalMessagesFieldNumber = 5,
  };
  // repeated string DebugMessages = 1;
  int debugmessages_size() const;
  private:
  int _internal_debugmessages_size() const;
  public:
  void clear_debugmessages();
  const std::string& debugmessages(int index) const;
  std::string* mutable_debugmessages(int index);
  void set_debugmessages(int index, const std::string& value);
  void set_debugmessages(int index, std::string&& value);
  void set_debugmessages(int index, const char* value);
  void set_debugmessages(int index, const char* value, size_t size);
  std::string* add_debugmessages();
  void add_debugmessages(const std::string& value);
  void add_debugmessages(std::string&& value);
  void add_debugmessages(const char* value);
  void add_debugmessages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& debugmessages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_debugmessages();
  private:
  const std::string& _internal_debugmessages(int index) const;
  std::string* _internal_add_debugmessages();
  public:

  // repeated string InfogMessages = 2;
  int infogmessages_size() const;
  private:
  int _internal_infogmessages_size() const;
  public:
  void clear_infogmessages();
  const std::string& infogmessages(int index) const;
  std::string* mutable_infogmessages(int index);
  void set_infogmessages(int index, const std::string& value);
  void set_infogmessages(int index, std::string&& value);
  void set_infogmessages(int index, const char* value);
  void set_infogmessages(int index, const char* value, size_t size);
  std::string* add_infogmessages();
  void add_infogmessages(const std::string& value);
  void add_infogmessages(std::string&& value);
  void add_infogmessages(const char* value);
  void add_infogmessages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infogmessages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infogmessages();
  private:
  const std::string& _internal_infogmessages(int index) const;
  std::string* _internal_add_infogmessages();
  public:

  // repeated string WarningMessages = 3;
  int warningmessages_size() const;
  private:
  int _internal_warningmessages_size() const;
  public:
  void clear_warningmessages();
  const std::string& warningmessages(int index) const;
  std::string* mutable_warningmessages(int index);
  void set_warningmessages(int index, const std::string& value);
  void set_warningmessages(int index, std::string&& value);
  void set_warningmessages(int index, const char* value);
  void set_warningmessages(int index, const char* value, size_t size);
  std::string* add_warningmessages();
  void add_warningmessages(const std::string& value);
  void add_warningmessages(std::string&& value);
  void add_warningmessages(const char* value);
  void add_warningmessages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warningmessages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warningmessages();
  private:
  const std::string& _internal_warningmessages(int index) const;
  std::string* _internal_add_warningmessages();
  public:

  // repeated string ErrorMessages = 4;
  int errormessages_size() const;
  private:
  int _internal_errormessages_size() const;
  public:
  void clear_errormessages();
  const std::string& errormessages(int index) const;
  std::string* mutable_errormessages(int index);
  void set_errormessages(int index, const std::string& value);
  void set_errormessages(int index, std::string&& value);
  void set_errormessages(int index, const char* value);
  void set_errormessages(int index, const char* value, size_t size);
  std::string* add_errormessages();
  void add_errormessages(const std::string& value);
  void add_errormessages(std::string&& value);
  void add_errormessages(const char* value);
  void add_errormessages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errormessages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errormessages();
  private:
  const std::string& _internal_errormessages(int index) const;
  std::string* _internal_add_errormessages();
  public:

  // repeated string FatalMessages = 5;
  int fatalmessages_size() const;
  private:
  int _internal_fatalmessages_size() const;
  public:
  void clear_fatalmessages();
  const std::string& fatalmessages(int index) const;
  std::string* mutable_fatalmessages(int index);
  void set_fatalmessages(int index, const std::string& value);
  void set_fatalmessages(int index, std::string&& value);
  void set_fatalmessages(int index, const char* value);
  void set_fatalmessages(int index, const char* value, size_t size);
  std::string* add_fatalmessages();
  void add_fatalmessages(const std::string& value);
  void add_fatalmessages(std::string&& value);
  void add_fatalmessages(const char* value);
  void add_fatalmessages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fatalmessages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fatalmessages();
  private:
  const std::string& _internal_fatalmessages(int index) const;
  std::string* _internal_add_fatalmessages();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LogMessagesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> debugmessages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infogmessages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warningmessages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errormessages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fatalmessages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEngine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DecimalFormatData

// .pulse.cdm.bind.DecimalFormatData.eType Type = 1;
inline void DecimalFormatData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::DecimalFormatData_eType DecimalFormatData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::DecimalFormatData_eType >(type_);
}
inline ::pulse::cdm::bind::DecimalFormatData_eType DecimalFormatData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DecimalFormatData.Type)
  return _internal_type();
}
inline void DecimalFormatData::_internal_set_type(::pulse::cdm::bind::DecimalFormatData_eType value) {
  
  type_ = value;
}
inline void DecimalFormatData::set_type(::pulse::cdm::bind::DecimalFormatData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DecimalFormatData.Type)
}

// uint32 Precision = 2;
inline void DecimalFormatData::clear_precision() {
  precision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DecimalFormatData::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DecimalFormatData::precision() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DecimalFormatData.Precision)
  return _internal_precision();
}
inline void DecimalFormatData::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  precision_ = value;
}
inline void DecimalFormatData::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DecimalFormatData.Precision)
}

// -------------------------------------------------------------------

// DataRequestData

// .pulse.cdm.bind.DecimalFormatData DecimalFormat = 1;
inline bool DataRequestData::_internal_has_decimalformat() const {
  return this != internal_default_instance() && decimalformat_ != nullptr;
}
inline bool DataRequestData::has_decimalformat() const {
  return _internal_has_decimalformat();
}
inline void DataRequestData::clear_decimalformat() {
  if (GetArena() == nullptr && decimalformat_ != nullptr) {
    delete decimalformat_;
  }
  decimalformat_ = nullptr;
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestData::_internal_decimalformat() const {
  const ::pulse::cdm::bind::DecimalFormatData* p = decimalformat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DecimalFormatData&>(
      ::pulse::cdm::bind::_DecimalFormatData_default_instance_);
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestData::decimalformat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.DecimalFormat)
  return _internal_decimalformat();
}
inline void DataRequestData::unsafe_arena_set_allocated_decimalformat(
    ::pulse::cdm::bind::DecimalFormatData* decimalformat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decimalformat_);
  }
  decimalformat_ = decimalformat;
  if (decimalformat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DataRequestData.DecimalFormat)
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestData::release_decimalformat() {
  
  ::pulse::cdm::bind::DecimalFormatData* temp = decimalformat_;
  decimalformat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestData::unsafe_arena_release_decimalformat() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.DecimalFormat)
  
  ::pulse::cdm::bind::DecimalFormatData* temp = decimalformat_;
  decimalformat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestData::_internal_mutable_decimalformat() {
  
  if (decimalformat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DecimalFormatData>(GetArena());
    decimalformat_ = p;
  }
  return decimalformat_;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestData::mutable_decimalformat() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.DecimalFormat)
  return _internal_mutable_decimalformat();
}
inline void DataRequestData::set_allocated_decimalformat(::pulse::cdm::bind::DecimalFormatData* decimalformat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete decimalformat_;
  }
  if (decimalformat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimalformat);
    if (message_arena != submessage_arena) {
      decimalformat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimalformat, submessage_arena);
    }
    
  } else {
    
  }
  decimalformat_ = decimalformat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.DecimalFormat)
}

// .pulse.cdm.bind.DataRequestData.eCategory Category = 2;
inline void DataRequestData::clear_category() {
  category_ = 0;
}
inline ::pulse::cdm::bind::DataRequestData_eCategory DataRequestData::_internal_category() const {
  return static_cast< ::pulse::cdm::bind::DataRequestData_eCategory >(category_);
}
inline ::pulse::cdm::bind::DataRequestData_eCategory DataRequestData::category() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.Category)
  return _internal_category();
}
inline void DataRequestData::_internal_set_category(::pulse::cdm::bind::DataRequestData_eCategory value) {
  
  category_ = value;
}
inline void DataRequestData::set_category(::pulse::cdm::bind::DataRequestData_eCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.Category)
}

// string ActionName = 3;
inline void DataRequestData::clear_actionname() {
  actionname_.ClearToEmpty();
}
inline const std::string& DataRequestData::actionname() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.ActionName)
  return _internal_actionname();
}
inline void DataRequestData::set_actionname(const std::string& value) {
  _internal_set_actionname(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.ActionName)
}
inline std::string* DataRequestData::mutable_actionname() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.ActionName)
  return _internal_mutable_actionname();
}
inline const std::string& DataRequestData::_internal_actionname() const {
  return actionname_.Get();
}
inline void DataRequestData::_internal_set_actionname(const std::string& value) {
  
  actionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestData::set_actionname(std::string&& value) {
  
  actionname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestData.ActionName)
}
inline void DataRequestData::set_actionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestData.ActionName)
}
inline void DataRequestData::set_actionname(const char* value,
    size_t size) {
  
  actionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestData.ActionName)
}
inline std::string* DataRequestData::_internal_mutable_actionname() {
  
  return actionname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestData::release_actionname() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.ActionName)
  return actionname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestData::set_allocated_actionname(std::string* actionname) {
  if (actionname != nullptr) {
    
  } else {
    
  }
  actionname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actionname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.ActionName)
}

// string CompartmentName = 4;
inline void DataRequestData::clear_compartmentname() {
  compartmentname_.ClearToEmpty();
}
inline const std::string& DataRequestData::compartmentname() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.CompartmentName)
  return _internal_compartmentname();
}
inline void DataRequestData::set_compartmentname(const std::string& value) {
  _internal_set_compartmentname(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.CompartmentName)
}
inline std::string* DataRequestData::mutable_compartmentname() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.CompartmentName)
  return _internal_mutable_compartmentname();
}
inline const std::string& DataRequestData::_internal_compartmentname() const {
  return compartmentname_.Get();
}
inline void DataRequestData::_internal_set_compartmentname(const std::string& value) {
  
  compartmentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestData::set_compartmentname(std::string&& value) {
  
  compartmentname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestData.CompartmentName)
}
inline void DataRequestData::set_compartmentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compartmentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestData.CompartmentName)
}
inline void DataRequestData::set_compartmentname(const char* value,
    size_t size) {
  
  compartmentname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestData.CompartmentName)
}
inline std::string* DataRequestData::_internal_mutable_compartmentname() {
  
  return compartmentname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestData::release_compartmentname() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.CompartmentName)
  return compartmentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestData::set_allocated_compartmentname(std::string* compartmentname) {
  if (compartmentname != nullptr) {
    
  } else {
    
  }
  compartmentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compartmentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.CompartmentName)
}

// string SubstanceName = 5;
inline void DataRequestData::clear_substancename() {
  substancename_.ClearToEmpty();
}
inline const std::string& DataRequestData::substancename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.SubstanceName)
  return _internal_substancename();
}
inline void DataRequestData::set_substancename(const std::string& value) {
  _internal_set_substancename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.SubstanceName)
}
inline std::string* DataRequestData::mutable_substancename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.SubstanceName)
  return _internal_mutable_substancename();
}
inline const std::string& DataRequestData::_internal_substancename() const {
  return substancename_.Get();
}
inline void DataRequestData::_internal_set_substancename(const std::string& value) {
  
  substancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestData::set_substancename(std::string&& value) {
  
  substancename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestData.SubstanceName)
}
inline void DataRequestData::set_substancename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestData.SubstanceName)
}
inline void DataRequestData::set_substancename(const char* value,
    size_t size) {
  
  substancename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestData.SubstanceName)
}
inline std::string* DataRequestData::_internal_mutable_substancename() {
  
  return substancename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestData::release_substancename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.SubstanceName)
  return substancename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestData::set_allocated_substancename(std::string* substancename) {
  if (substancename != nullptr) {
    
  } else {
    
  }
  substancename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substancename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.SubstanceName)
}

// string PropertyName = 6;
inline void DataRequestData::clear_propertyname() {
  propertyname_.ClearToEmpty();
}
inline const std::string& DataRequestData::propertyname() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.PropertyName)
  return _internal_propertyname();
}
inline void DataRequestData::set_propertyname(const std::string& value) {
  _internal_set_propertyname(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.PropertyName)
}
inline std::string* DataRequestData::mutable_propertyname() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.PropertyName)
  return _internal_mutable_propertyname();
}
inline const std::string& DataRequestData::_internal_propertyname() const {
  return propertyname_.Get();
}
inline void DataRequestData::_internal_set_propertyname(const std::string& value) {
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestData::set_propertyname(std::string&& value) {
  
  propertyname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestData.PropertyName)
}
inline void DataRequestData::set_propertyname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestData.PropertyName)
}
inline void DataRequestData::set_propertyname(const char* value,
    size_t size) {
  
  propertyname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestData.PropertyName)
}
inline std::string* DataRequestData::_internal_mutable_propertyname() {
  
  return propertyname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestData::release_propertyname() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.PropertyName)
  return propertyname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestData::set_allocated_propertyname(std::string* propertyname) {
  if (propertyname != nullptr) {
    
  } else {
    
  }
  propertyname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), propertyname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.PropertyName)
}

// string Unit = 7;
inline void DataRequestData::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& DataRequestData::unit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestData.Unit)
  return _internal_unit();
}
inline void DataRequestData::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestData.Unit)
}
inline std::string* DataRequestData::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestData.Unit)
  return _internal_mutable_unit();
}
inline const std::string& DataRequestData::_internal_unit() const {
  return unit_.Get();
}
inline void DataRequestData::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestData::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestData.Unit)
}
inline void DataRequestData::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestData.Unit)
}
inline void DataRequestData::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestData.Unit)
}
inline std::string* DataRequestData::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestData::release_unit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestData.Unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestData::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestData.Unit)
}

// -------------------------------------------------------------------

// DataRequestManagerData

// string ResultsFilename = 1;
inline void DataRequestManagerData::clear_resultsfilename() {
  resultsfilename_.ClearToEmpty();
}
inline const std::string& DataRequestManagerData::resultsfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
  return _internal_resultsfilename();
}
inline void DataRequestManagerData::set_resultsfilename(const std::string& value) {
  _internal_set_resultsfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
}
inline std::string* DataRequestManagerData::mutable_resultsfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
  return _internal_mutable_resultsfilename();
}
inline const std::string& DataRequestManagerData::_internal_resultsfilename() const {
  return resultsfilename_.Get();
}
inline void DataRequestManagerData::_internal_set_resultsfilename(const std::string& value) {
  
  resultsfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataRequestManagerData::set_resultsfilename(std::string&& value) {
  
  resultsfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
}
inline void DataRequestManagerData::set_resultsfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resultsfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
}
inline void DataRequestManagerData::set_resultsfilename(const char* value,
    size_t size) {
  
  resultsfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
}
inline std::string* DataRequestManagerData::_internal_mutable_resultsfilename() {
  
  return resultsfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataRequestManagerData::release_resultsfilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
  return resultsfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataRequestManagerData::set_allocated_resultsfilename(std::string* resultsfilename) {
  if (resultsfilename != nullptr) {
    
  } else {
    
  }
  resultsfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resultsfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestManagerData.ResultsFilename)
}

// double SamplesPerSecond = 2;
inline void DataRequestManagerData::clear_samplespersecond() {
  samplespersecond_ = 0;
}
inline double DataRequestManagerData::_internal_samplespersecond() const {
  return samplespersecond_;
}
inline double DataRequestManagerData::samplespersecond() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestManagerData.SamplesPerSecond)
  return _internal_samplespersecond();
}
inline void DataRequestManagerData::_internal_set_samplespersecond(double value) {
  
  samplespersecond_ = value;
}
inline void DataRequestManagerData::set_samplespersecond(double value) {
  _internal_set_samplespersecond(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestManagerData.SamplesPerSecond)
}

// .pulse.cdm.bind.DecimalFormatData DefaultDecimalFormatting = 3;
inline bool DataRequestManagerData::_internal_has_defaultdecimalformatting() const {
  return this != internal_default_instance() && defaultdecimalformatting_ != nullptr;
}
inline bool DataRequestManagerData::has_defaultdecimalformatting() const {
  return _internal_has_defaultdecimalformatting();
}
inline void DataRequestManagerData::clear_defaultdecimalformatting() {
  if (GetArena() == nullptr && defaultdecimalformatting_ != nullptr) {
    delete defaultdecimalformatting_;
  }
  defaultdecimalformatting_ = nullptr;
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestManagerData::_internal_defaultdecimalformatting() const {
  const ::pulse::cdm::bind::DecimalFormatData* p = defaultdecimalformatting_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DecimalFormatData&>(
      ::pulse::cdm::bind::_DecimalFormatData_default_instance_);
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestManagerData::defaultdecimalformatting() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestManagerData.DefaultDecimalFormatting)
  return _internal_defaultdecimalformatting();
}
inline void DataRequestManagerData::unsafe_arena_set_allocated_defaultdecimalformatting(
    ::pulse::cdm::bind::DecimalFormatData* defaultdecimalformatting) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultdecimalformatting_);
  }
  defaultdecimalformatting_ = defaultdecimalformatting;
  if (defaultdecimalformatting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DataRequestManagerData.DefaultDecimalFormatting)
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::release_defaultdecimalformatting() {
  
  ::pulse::cdm::bind::DecimalFormatData* temp = defaultdecimalformatting_;
  defaultdecimalformatting_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::unsafe_arena_release_defaultdecimalformatting() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestManagerData.DefaultDecimalFormatting)
  
  ::pulse::cdm::bind::DecimalFormatData* temp = defaultdecimalformatting_;
  defaultdecimalformatting_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::_internal_mutable_defaultdecimalformatting() {
  
  if (defaultdecimalformatting_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DecimalFormatData>(GetArena());
    defaultdecimalformatting_ = p;
  }
  return defaultdecimalformatting_;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::mutable_defaultdecimalformatting() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestManagerData.DefaultDecimalFormatting)
  return _internal_mutable_defaultdecimalformatting();
}
inline void DataRequestManagerData::set_allocated_defaultdecimalformatting(::pulse::cdm::bind::DecimalFormatData* defaultdecimalformatting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defaultdecimalformatting_;
  }
  if (defaultdecimalformatting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defaultdecimalformatting);
    if (message_arena != submessage_arena) {
      defaultdecimalformatting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultdecimalformatting, submessage_arena);
    }
    
  } else {
    
  }
  defaultdecimalformatting_ = defaultdecimalformatting;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestManagerData.DefaultDecimalFormatting)
}

// .pulse.cdm.bind.DecimalFormatData OverrideDecimalFormatting = 4;
inline bool DataRequestManagerData::_internal_has_overridedecimalformatting() const {
  return this != internal_default_instance() && overridedecimalformatting_ != nullptr;
}
inline bool DataRequestManagerData::has_overridedecimalformatting() const {
  return _internal_has_overridedecimalformatting();
}
inline void DataRequestManagerData::clear_overridedecimalformatting() {
  if (GetArena() == nullptr && overridedecimalformatting_ != nullptr) {
    delete overridedecimalformatting_;
  }
  overridedecimalformatting_ = nullptr;
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestManagerData::_internal_overridedecimalformatting() const {
  const ::pulse::cdm::bind::DecimalFormatData* p = overridedecimalformatting_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DecimalFormatData&>(
      ::pulse::cdm::bind::_DecimalFormatData_default_instance_);
}
inline const ::pulse::cdm::bind::DecimalFormatData& DataRequestManagerData::overridedecimalformatting() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestManagerData.OverrideDecimalFormatting)
  return _internal_overridedecimalformatting();
}
inline void DataRequestManagerData::unsafe_arena_set_allocated_overridedecimalformatting(
    ::pulse::cdm::bind::DecimalFormatData* overridedecimalformatting) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overridedecimalformatting_);
  }
  overridedecimalformatting_ = overridedecimalformatting;
  if (overridedecimalformatting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DataRequestManagerData.OverrideDecimalFormatting)
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::release_overridedecimalformatting() {
  
  ::pulse::cdm::bind::DecimalFormatData* temp = overridedecimalformatting_;
  overridedecimalformatting_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::unsafe_arena_release_overridedecimalformatting() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestManagerData.OverrideDecimalFormatting)
  
  ::pulse::cdm::bind::DecimalFormatData* temp = overridedecimalformatting_;
  overridedecimalformatting_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::_internal_mutable_overridedecimalformatting() {
  
  if (overridedecimalformatting_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DecimalFormatData>(GetArena());
    overridedecimalformatting_ = p;
  }
  return overridedecimalformatting_;
}
inline ::pulse::cdm::bind::DecimalFormatData* DataRequestManagerData::mutable_overridedecimalformatting() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestManagerData.OverrideDecimalFormatting)
  return _internal_mutable_overridedecimalformatting();
}
inline void DataRequestManagerData::set_allocated_overridedecimalformatting(::pulse::cdm::bind::DecimalFormatData* overridedecimalformatting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overridedecimalformatting_;
  }
  if (overridedecimalformatting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overridedecimalformatting);
    if (message_arena != submessage_arena) {
      overridedecimalformatting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overridedecimalformatting, submessage_arena);
    }
    
  } else {
    
  }
  overridedecimalformatting_ = overridedecimalformatting;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestManagerData.OverrideDecimalFormatting)
}

// repeated .pulse.cdm.bind.DataRequestData DataRequest = 5;
inline int DataRequestManagerData::_internal_datarequest_size() const {
  return datarequest_.size();
}
inline int DataRequestManagerData::datarequest_size() const {
  return _internal_datarequest_size();
}
inline void DataRequestManagerData::clear_datarequest() {
  datarequest_.Clear();
}
inline ::pulse::cdm::bind::DataRequestData* DataRequestManagerData::mutable_datarequest(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestManagerData.DataRequest)
  return datarequest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestData >*
DataRequestManagerData::mutable_datarequest() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DataRequestManagerData.DataRequest)
  return &datarequest_;
}
inline const ::pulse::cdm::bind::DataRequestData& DataRequestManagerData::_internal_datarequest(int index) const {
  return datarequest_.Get(index);
}
inline const ::pulse::cdm::bind::DataRequestData& DataRequestManagerData::datarequest(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestManagerData.DataRequest)
  return _internal_datarequest(index);
}
inline ::pulse::cdm::bind::DataRequestData* DataRequestManagerData::_internal_add_datarequest() {
  return datarequest_.Add();
}
inline ::pulse::cdm::bind::DataRequestData* DataRequestManagerData::add_datarequest() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DataRequestManagerData.DataRequest)
  return _internal_add_datarequest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestData >&
DataRequestManagerData::datarequest() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DataRequestManagerData.DataRequest)
  return datarequest_;
}

// -------------------------------------------------------------------

// DataRequestedData

// int32 ID = 1;
inline void DataRequestedData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataRequestedData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataRequestedData::id() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedData.ID)
  return _internal_id();
}
inline void DataRequestedData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DataRequestedData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestedData.ID)
}

// bool IsActive = 2;
inline void DataRequestedData::clear_isactive() {
  isactive_ = false;
}
inline bool DataRequestedData::_internal_isactive() const {
  return isactive_;
}
inline bool DataRequestedData::isactive() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedData.IsActive)
  return _internal_isactive();
}
inline void DataRequestedData::_internal_set_isactive(bool value) {
  
  isactive_ = value;
}
inline void DataRequestedData::set_isactive(bool value) {
  _internal_set_isactive(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestedData.IsActive)
}

// repeated double Value = 3;
inline int DataRequestedData::_internal_value_size() const {
  return value_.size();
}
inline int DataRequestedData::value_size() const {
  return _internal_value_size();
}
inline void DataRequestedData::clear_value() {
  value_.Clear();
}
inline double DataRequestedData::_internal_value(int index) const {
  return value_.Get(index);
}
inline double DataRequestedData::value(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedData.Value)
  return _internal_value(index);
}
inline void DataRequestedData::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DataRequestedData.Value)
}
inline void DataRequestedData::_internal_add_value(double value) {
  value_.Add(value);
}
inline void DataRequestedData::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DataRequestedData.Value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DataRequestedData::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DataRequestedData::value() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DataRequestedData.Value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DataRequestedData::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DataRequestedData::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DataRequestedData.Value)
  return _internal_mutable_value();
}

// repeated .pulse.cdm.bind.EventChangeData EventChange = 4;
inline int DataRequestedData::_internal_eventchange_size() const {
  return eventchange_.size();
}
inline int DataRequestedData::eventchange_size() const {
  return _internal_eventchange_size();
}
inline ::pulse::cdm::bind::EventChangeData* DataRequestedData::mutable_eventchange(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestedData.EventChange)
  return eventchange_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >*
DataRequestedData::mutable_eventchange() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DataRequestedData.EventChange)
  return &eventchange_;
}
inline const ::pulse::cdm::bind::EventChangeData& DataRequestedData::_internal_eventchange(int index) const {
  return eventchange_.Get(index);
}
inline const ::pulse::cdm::bind::EventChangeData& DataRequestedData::eventchange(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedData.EventChange)
  return _internal_eventchange(index);
}
inline ::pulse::cdm::bind::EventChangeData* DataRequestedData::_internal_add_eventchange() {
  return eventchange_.Add();
}
inline ::pulse::cdm::bind::EventChangeData* DataRequestedData::add_eventchange() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DataRequestedData.EventChange)
  return _internal_add_eventchange();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EventChangeData >&
DataRequestedData::eventchange() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DataRequestedData.EventChange)
  return eventchange_;
}

// .pulse.cdm.bind.LogMessagesData LogMessages = 5;
inline bool DataRequestedData::_internal_has_logmessages() const {
  return this != internal_default_instance() && logmessages_ != nullptr;
}
inline bool DataRequestedData::has_logmessages() const {
  return _internal_has_logmessages();
}
inline void DataRequestedData::clear_logmessages() {
  if (GetArena() == nullptr && logmessages_ != nullptr) {
    delete logmessages_;
  }
  logmessages_ = nullptr;
}
inline const ::pulse::cdm::bind::LogMessagesData& DataRequestedData::_internal_logmessages() const {
  const ::pulse::cdm::bind::LogMessagesData* p = logmessages_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::LogMessagesData&>(
      ::pulse::cdm::bind::_LogMessagesData_default_instance_);
}
inline const ::pulse::cdm::bind::LogMessagesData& DataRequestedData::logmessages() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedData.LogMessages)
  return _internal_logmessages();
}
inline void DataRequestedData::unsafe_arena_set_allocated_logmessages(
    ::pulse::cdm::bind::LogMessagesData* logmessages) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logmessages_);
  }
  logmessages_ = logmessages;
  if (logmessages) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DataRequestedData.LogMessages)
}
inline ::pulse::cdm::bind::LogMessagesData* DataRequestedData::release_logmessages() {
  
  ::pulse::cdm::bind::LogMessagesData* temp = logmessages_;
  logmessages_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::LogMessagesData* DataRequestedData::unsafe_arena_release_logmessages() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DataRequestedData.LogMessages)
  
  ::pulse::cdm::bind::LogMessagesData* temp = logmessages_;
  logmessages_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::LogMessagesData* DataRequestedData::_internal_mutable_logmessages() {
  
  if (logmessages_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::LogMessagesData>(GetArena());
    logmessages_ = p;
  }
  return logmessages_;
}
inline ::pulse::cdm::bind::LogMessagesData* DataRequestedData::mutable_logmessages() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestedData.LogMessages)
  return _internal_mutable_logmessages();
}
inline void DataRequestedData::set_allocated_logmessages(::pulse::cdm::bind::LogMessagesData* logmessages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logmessages_;
  }
  if (logmessages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logmessages);
    if (message_arena != submessage_arena) {
      logmessages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logmessages, submessage_arena);
    }
    
  } else {
    
  }
  logmessages_ = logmessages;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DataRequestedData.LogMessages)
}

// -------------------------------------------------------------------

// DataRequestedListData

// repeated .pulse.cdm.bind.DataRequestedData DataRequested = 1;
inline int DataRequestedListData::_internal_datarequested_size() const {
  return datarequested_.size();
}
inline int DataRequestedListData::datarequested_size() const {
  return _internal_datarequested_size();
}
inline void DataRequestedListData::clear_datarequested() {
  datarequested_.Clear();
}
inline ::pulse::cdm::bind::DataRequestedData* DataRequestedListData::mutable_datarequested(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DataRequestedListData.DataRequested)
  return datarequested_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestedData >*
DataRequestedListData::mutable_datarequested() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DataRequestedListData.DataRequested)
  return &datarequested_;
}
inline const ::pulse::cdm::bind::DataRequestedData& DataRequestedListData::_internal_datarequested(int index) const {
  return datarequested_.Get(index);
}
inline const ::pulse::cdm::bind::DataRequestedData& DataRequestedListData::datarequested(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DataRequestedListData.DataRequested)
  return _internal_datarequested(index);
}
inline ::pulse::cdm::bind::DataRequestedData* DataRequestedListData::_internal_add_datarequested() {
  return datarequested_.Add();
}
inline ::pulse::cdm::bind::DataRequestedData* DataRequestedListData::add_datarequested() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DataRequestedListData.DataRequested)
  return _internal_add_datarequested();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DataRequestedData >&
DataRequestedListData::datarequested() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DataRequestedListData.DataRequested)
  return datarequested_;
}

// -------------------------------------------------------------------

// AnyConditionData

// .pulse.cdm.bind.AnyPatientConditionData PatientCondition = 1;
inline bool AnyConditionData::_internal_has_patientcondition() const {
  return Condition_case() == kPatientCondition;
}
inline bool AnyConditionData::has_patientcondition() const {
  return _internal_has_patientcondition();
}
inline void AnyConditionData::set_has_patientcondition() {
  _oneof_case_[0] = kPatientCondition;
}
inline ::pulse::cdm::bind::AnyPatientConditionData* AnyConditionData::release_patientcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConditionData.PatientCondition)
  if (_internal_has_patientcondition()) {
    clear_has_Condition();
      ::pulse::cdm::bind::AnyPatientConditionData* temp = Condition_.patientcondition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Condition_.patientcondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnyPatientConditionData& AnyConditionData::_internal_patientcondition() const {
  return _internal_has_patientcondition()
      ? *Condition_.patientcondition_
      : reinterpret_cast< ::pulse::cdm::bind::AnyPatientConditionData&>(::pulse::cdm::bind::_AnyPatientConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnyPatientConditionData& AnyConditionData::patientcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConditionData.PatientCondition)
  return _internal_patientcondition();
}
inline ::pulse::cdm::bind::AnyPatientConditionData* AnyConditionData::unsafe_arena_release_patientcondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConditionData.PatientCondition)
  if (_internal_has_patientcondition()) {
    clear_has_Condition();
    ::pulse::cdm::bind::AnyPatientConditionData* temp = Condition_.patientcondition_;
    Condition_.patientcondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConditionData::unsafe_arena_set_allocated_patientcondition(::pulse::cdm::bind::AnyPatientConditionData* patientcondition) {
  clear_Condition();
  if (patientcondition) {
    set_has_patientcondition();
    Condition_.patientcondition_ = patientcondition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConditionData.PatientCondition)
}
inline ::pulse::cdm::bind::AnyPatientConditionData* AnyConditionData::_internal_mutable_patientcondition() {
  if (!_internal_has_patientcondition()) {
    clear_Condition();
    set_has_patientcondition();
    Condition_.patientcondition_ = CreateMaybeMessage< ::pulse::cdm::bind::AnyPatientConditionData >(GetArena());
  }
  return Condition_.patientcondition_;
}
inline ::pulse::cdm::bind::AnyPatientConditionData* AnyConditionData::mutable_patientcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConditionData.PatientCondition)
  return _internal_mutable_patientcondition();
}

// .pulse.cdm.bind.AnyEnvironmentConditionData EnvironmentCondition = 2;
inline bool AnyConditionData::_internal_has_environmentcondition() const {
  return Condition_case() == kEnvironmentCondition;
}
inline bool AnyConditionData::has_environmentcondition() const {
  return _internal_has_environmentcondition();
}
inline void AnyConditionData::set_has_environmentcondition() {
  _oneof_case_[0] = kEnvironmentCondition;
}
inline ::pulse::cdm::bind::AnyEnvironmentConditionData* AnyConditionData::release_environmentcondition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
  if (_internal_has_environmentcondition()) {
    clear_has_Condition();
      ::pulse::cdm::bind::AnyEnvironmentConditionData* temp = Condition_.environmentcondition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Condition_.environmentcondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnyEnvironmentConditionData& AnyConditionData::_internal_environmentcondition() const {
  return _internal_has_environmentcondition()
      ? *Condition_.environmentcondition_
      : reinterpret_cast< ::pulse::cdm::bind::AnyEnvironmentConditionData&>(::pulse::cdm::bind::_AnyEnvironmentConditionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnyEnvironmentConditionData& AnyConditionData::environmentcondition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
  return _internal_environmentcondition();
}
inline ::pulse::cdm::bind::AnyEnvironmentConditionData* AnyConditionData::unsafe_arena_release_environmentcondition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
  if (_internal_has_environmentcondition()) {
    clear_has_Condition();
    ::pulse::cdm::bind::AnyEnvironmentConditionData* temp = Condition_.environmentcondition_;
    Condition_.environmentcondition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConditionData::unsafe_arena_set_allocated_environmentcondition(::pulse::cdm::bind::AnyEnvironmentConditionData* environmentcondition) {
  clear_Condition();
  if (environmentcondition) {
    set_has_environmentcondition();
    Condition_.environmentcondition_ = environmentcondition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
}
inline ::pulse::cdm::bind::AnyEnvironmentConditionData* AnyConditionData::_internal_mutable_environmentcondition() {
  if (!_internal_has_environmentcondition()) {
    clear_Condition();
    set_has_environmentcondition();
    Condition_.environmentcondition_ = CreateMaybeMessage< ::pulse::cdm::bind::AnyEnvironmentConditionData >(GetArena());
  }
  return Condition_.environmentcondition_;
}
inline ::pulse::cdm::bind::AnyEnvironmentConditionData* AnyConditionData::mutable_environmentcondition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConditionData.EnvironmentCondition)
  return _internal_mutable_environmentcondition();
}

inline bool AnyConditionData::has_Condition() const {
  return Condition_case() != CONDITION_NOT_SET;
}
inline void AnyConditionData::clear_has_Condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline AnyConditionData::ConditionCase AnyConditionData::Condition_case() const {
  return AnyConditionData::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionListData

// repeated .pulse.cdm.bind.AnyConditionData AnyCondition = 1;
inline int ConditionListData::_internal_anycondition_size() const {
  return anycondition_.size();
}
inline int ConditionListData::anycondition_size() const {
  return _internal_anycondition_size();
}
inline void ConditionListData::clear_anycondition() {
  anycondition_.Clear();
}
inline ::pulse::cdm::bind::AnyConditionData* ConditionListData::mutable_anycondition(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConditionListData.AnyCondition)
  return anycondition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConditionData >*
ConditionListData::mutable_anycondition() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ConditionListData.AnyCondition)
  return &anycondition_;
}
inline const ::pulse::cdm::bind::AnyConditionData& ConditionListData::_internal_anycondition(int index) const {
  return anycondition_.Get(index);
}
inline const ::pulse::cdm::bind::AnyConditionData& ConditionListData::anycondition(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConditionListData.AnyCondition)
  return _internal_anycondition(index);
}
inline ::pulse::cdm::bind::AnyConditionData* ConditionListData::_internal_add_anycondition() {
  return anycondition_.Add();
}
inline ::pulse::cdm::bind::AnyConditionData* ConditionListData::add_anycondition() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ConditionListData.AnyCondition)
  return _internal_add_anycondition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConditionData >&
ConditionListData::anycondition() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ConditionListData.AnyCondition)
  return anycondition_;
}

// -------------------------------------------------------------------

// AnyActionData

// .pulse.cdm.bind.AdvanceTimeData AdvanceTime = 1;
inline bool AnyActionData::_internal_has_advancetime() const {
  return Action_case() == kAdvanceTime;
}
inline bool AnyActionData::has_advancetime() const {
  return _internal_has_advancetime();
}
inline void AnyActionData::set_has_advancetime() {
  _oneof_case_[0] = kAdvanceTime;
}
inline ::pulse::cdm::bind::AdvanceTimeData* AnyActionData::release_advancetime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.AdvanceTime)
  if (_internal_has_advancetime()) {
    clear_has_Action();
      ::pulse::cdm::bind::AdvanceTimeData* temp = Action_.advancetime_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.advancetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AdvanceTimeData& AnyActionData::_internal_advancetime() const {
  return _internal_has_advancetime()
      ? *Action_.advancetime_
      : reinterpret_cast< ::pulse::cdm::bind::AdvanceTimeData&>(::pulse::cdm::bind::_AdvanceTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::AdvanceTimeData& AnyActionData::advancetime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.AdvanceTime)
  return _internal_advancetime();
}
inline ::pulse::cdm::bind::AdvanceTimeData* AnyActionData::unsafe_arena_release_advancetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.AdvanceTime)
  if (_internal_has_advancetime()) {
    clear_has_Action();
    ::pulse::cdm::bind::AdvanceTimeData* temp = Action_.advancetime_;
    Action_.advancetime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_advancetime(::pulse::cdm::bind::AdvanceTimeData* advancetime) {
  clear_Action();
  if (advancetime) {
    set_has_advancetime();
    Action_.advancetime_ = advancetime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.AdvanceTime)
}
inline ::pulse::cdm::bind::AdvanceTimeData* AnyActionData::_internal_mutable_advancetime() {
  if (!_internal_has_advancetime()) {
    clear_Action();
    set_has_advancetime();
    Action_.advancetime_ = CreateMaybeMessage< ::pulse::cdm::bind::AdvanceTimeData >(GetArena());
  }
  return Action_.advancetime_;
}
inline ::pulse::cdm::bind::AdvanceTimeData* AnyActionData::mutable_advancetime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.AdvanceTime)
  return _internal_mutable_advancetime();
}

// .pulse.cdm.bind.SerializeStateData Serialize = 2;
inline bool AnyActionData::_internal_has_serialize() const {
  return Action_case() == kSerialize;
}
inline bool AnyActionData::has_serialize() const {
  return _internal_has_serialize();
}
inline void AnyActionData::set_has_serialize() {
  _oneof_case_[0] = kSerialize;
}
inline ::pulse::cdm::bind::SerializeStateData* AnyActionData::release_serialize() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.Serialize)
  if (_internal_has_serialize()) {
    clear_has_Action();
      ::pulse::cdm::bind::SerializeStateData* temp = Action_.serialize_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.serialize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SerializeStateData& AnyActionData::_internal_serialize() const {
  return _internal_has_serialize()
      ? *Action_.serialize_
      : reinterpret_cast< ::pulse::cdm::bind::SerializeStateData&>(::pulse::cdm::bind::_SerializeStateData_default_instance_);
}
inline const ::pulse::cdm::bind::SerializeStateData& AnyActionData::serialize() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.Serialize)
  return _internal_serialize();
}
inline ::pulse::cdm::bind::SerializeStateData* AnyActionData::unsafe_arena_release_serialize() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.Serialize)
  if (_internal_has_serialize()) {
    clear_has_Action();
    ::pulse::cdm::bind::SerializeStateData* temp = Action_.serialize_;
    Action_.serialize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_serialize(::pulse::cdm::bind::SerializeStateData* serialize) {
  clear_Action();
  if (serialize) {
    set_has_serialize();
    Action_.serialize_ = serialize;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.Serialize)
}
inline ::pulse::cdm::bind::SerializeStateData* AnyActionData::_internal_mutable_serialize() {
  if (!_internal_has_serialize()) {
    clear_Action();
    set_has_serialize();
    Action_.serialize_ = CreateMaybeMessage< ::pulse::cdm::bind::SerializeStateData >(GetArena());
  }
  return Action_.serialize_;
}
inline ::pulse::cdm::bind::SerializeStateData* AnyActionData::mutable_serialize() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.Serialize)
  return _internal_mutable_serialize();
}

// .pulse.cdm.bind.OverridesData Overrides = 3;
inline bool AnyActionData::_internal_has_overrides() const {
  return Action_case() == kOverrides;
}
inline bool AnyActionData::has_overrides() const {
  return _internal_has_overrides();
}
inline void AnyActionData::set_has_overrides() {
  _oneof_case_[0] = kOverrides;
}
inline ::pulse::cdm::bind::OverridesData* AnyActionData::release_overrides() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.Overrides)
  if (_internal_has_overrides()) {
    clear_has_Action();
      ::pulse::cdm::bind::OverridesData* temp = Action_.overrides_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.overrides_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::OverridesData& AnyActionData::_internal_overrides() const {
  return _internal_has_overrides()
      ? *Action_.overrides_
      : reinterpret_cast< ::pulse::cdm::bind::OverridesData&>(::pulse::cdm::bind::_OverridesData_default_instance_);
}
inline const ::pulse::cdm::bind::OverridesData& AnyActionData::overrides() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.Overrides)
  return _internal_overrides();
}
inline ::pulse::cdm::bind::OverridesData* AnyActionData::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.Overrides)
  if (_internal_has_overrides()) {
    clear_has_Action();
    ::pulse::cdm::bind::OverridesData* temp = Action_.overrides_;
    Action_.overrides_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_overrides(::pulse::cdm::bind::OverridesData* overrides) {
  clear_Action();
  if (overrides) {
    set_has_overrides();
    Action_.overrides_ = overrides;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.Overrides)
}
inline ::pulse::cdm::bind::OverridesData* AnyActionData::_internal_mutable_overrides() {
  if (!_internal_has_overrides()) {
    clear_Action();
    set_has_overrides();
    Action_.overrides_ = CreateMaybeMessage< ::pulse::cdm::bind::OverridesData >(GetArena());
  }
  return Action_.overrides_;
}
inline ::pulse::cdm::bind::OverridesData* AnyActionData::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.Overrides)
  return _internal_mutable_overrides();
}

// .pulse.cdm.bind.AnyPatientActionData PatientAction = 4;
inline bool AnyActionData::_internal_has_patientaction() const {
  return Action_case() == kPatientAction;
}
inline bool AnyActionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void AnyActionData::set_has_patientaction() {
  _oneof_case_[0] = kPatientAction;
}
inline ::pulse::cdm::bind::AnyPatientActionData* AnyActionData::release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.PatientAction)
  if (_internal_has_patientaction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnyPatientActionData* temp = Action_.patientaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.patientaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnyPatientActionData& AnyActionData::_internal_patientaction() const {
  return _internal_has_patientaction()
      ? *Action_.patientaction_
      : reinterpret_cast< ::pulse::cdm::bind::AnyPatientActionData&>(::pulse::cdm::bind::_AnyPatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnyPatientActionData& AnyActionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.PatientAction)
  return _internal_patientaction();
}
inline ::pulse::cdm::bind::AnyPatientActionData* AnyActionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.PatientAction)
  if (_internal_has_patientaction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnyPatientActionData* temp = Action_.patientaction_;
    Action_.patientaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_patientaction(::pulse::cdm::bind::AnyPatientActionData* patientaction) {
  clear_Action();
  if (patientaction) {
    set_has_patientaction();
    Action_.patientaction_ = patientaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.PatientAction)
}
inline ::pulse::cdm::bind::AnyPatientActionData* AnyActionData::_internal_mutable_patientaction() {
  if (!_internal_has_patientaction()) {
    clear_Action();
    set_has_patientaction();
    Action_.patientaction_ = CreateMaybeMessage< ::pulse::cdm::bind::AnyPatientActionData >(GetArena());
  }
  return Action_.patientaction_;
}
inline ::pulse::cdm::bind::AnyPatientActionData* AnyActionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.PatientAction)
  return _internal_mutable_patientaction();
}

// .pulse.cdm.bind.AnyEnvironmentActionData EnvironmentAction = 5;
inline bool AnyActionData::_internal_has_environmentaction() const {
  return Action_case() == kEnvironmentAction;
}
inline bool AnyActionData::has_environmentaction() const {
  return _internal_has_environmentaction();
}
inline void AnyActionData::set_has_environmentaction() {
  _oneof_case_[0] = kEnvironmentAction;
}
inline ::pulse::cdm::bind::AnyEnvironmentActionData* AnyActionData::release_environmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.EnvironmentAction)
  if (_internal_has_environmentaction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnyEnvironmentActionData* temp = Action_.environmentaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.environmentaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnyEnvironmentActionData& AnyActionData::_internal_environmentaction() const {
  return _internal_has_environmentaction()
      ? *Action_.environmentaction_
      : reinterpret_cast< ::pulse::cdm::bind::AnyEnvironmentActionData&>(::pulse::cdm::bind::_AnyEnvironmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnyEnvironmentActionData& AnyActionData::environmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.EnvironmentAction)
  return _internal_environmentaction();
}
inline ::pulse::cdm::bind::AnyEnvironmentActionData* AnyActionData::unsafe_arena_release_environmentaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.EnvironmentAction)
  if (_internal_has_environmentaction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnyEnvironmentActionData* temp = Action_.environmentaction_;
    Action_.environmentaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_environmentaction(::pulse::cdm::bind::AnyEnvironmentActionData* environmentaction) {
  clear_Action();
  if (environmentaction) {
    set_has_environmentaction();
    Action_.environmentaction_ = environmentaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.EnvironmentAction)
}
inline ::pulse::cdm::bind::AnyEnvironmentActionData* AnyActionData::_internal_mutable_environmentaction() {
  if (!_internal_has_environmentaction()) {
    clear_Action();
    set_has_environmentaction();
    Action_.environmentaction_ = CreateMaybeMessage< ::pulse::cdm::bind::AnyEnvironmentActionData >(GetArena());
  }
  return Action_.environmentaction_;
}
inline ::pulse::cdm::bind::AnyEnvironmentActionData* AnyActionData::mutable_environmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.EnvironmentAction)
  return _internal_mutable_environmentaction();
}

// .pulse.cdm.bind.AnyEquipmentActionData EquipmentAction = 6;
inline bool AnyActionData::_internal_has_equipmentaction() const {
  return Action_case() == kEquipmentAction;
}
inline bool AnyActionData::has_equipmentaction() const {
  return _internal_has_equipmentaction();
}
inline void AnyActionData::set_has_equipmentaction() {
  _oneof_case_[0] = kEquipmentAction;
}
inline ::pulse::cdm::bind::AnyEquipmentActionData* AnyActionData::release_equipmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyActionData.EquipmentAction)
  if (_internal_has_equipmentaction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnyEquipmentActionData* temp = Action_.equipmentaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.equipmentaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnyEquipmentActionData& AnyActionData::_internal_equipmentaction() const {
  return _internal_has_equipmentaction()
      ? *Action_.equipmentaction_
      : reinterpret_cast< ::pulse::cdm::bind::AnyEquipmentActionData&>(::pulse::cdm::bind::_AnyEquipmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnyEquipmentActionData& AnyActionData::equipmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyActionData.EquipmentAction)
  return _internal_equipmentaction();
}
inline ::pulse::cdm::bind::AnyEquipmentActionData* AnyActionData::unsafe_arena_release_equipmentaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyActionData.EquipmentAction)
  if (_internal_has_equipmentaction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnyEquipmentActionData* temp = Action_.equipmentaction_;
    Action_.equipmentaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyActionData::unsafe_arena_set_allocated_equipmentaction(::pulse::cdm::bind::AnyEquipmentActionData* equipmentaction) {
  clear_Action();
  if (equipmentaction) {
    set_has_equipmentaction();
    Action_.equipmentaction_ = equipmentaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyActionData.EquipmentAction)
}
inline ::pulse::cdm::bind::AnyEquipmentActionData* AnyActionData::_internal_mutable_equipmentaction() {
  if (!_internal_has_equipmentaction()) {
    clear_Action();
    set_has_equipmentaction();
    Action_.equipmentaction_ = CreateMaybeMessage< ::pulse::cdm::bind::AnyEquipmentActionData >(GetArena());
  }
  return Action_.equipmentaction_;
}
inline ::pulse::cdm::bind::AnyEquipmentActionData* AnyActionData::mutable_equipmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyActionData.EquipmentAction)
  return _internal_mutable_equipmentaction();
}

inline bool AnyActionData::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
inline void AnyActionData::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline AnyActionData::ActionCase AnyActionData::Action_case() const {
  return AnyActionData::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActionListData

// repeated .pulse.cdm.bind.AnyActionData AnyAction = 1;
inline int ActionListData::_internal_anyaction_size() const {
  return anyaction_.size();
}
inline int ActionListData::anyaction_size() const {
  return _internal_anyaction_size();
}
inline void ActionListData::clear_anyaction() {
  anyaction_.Clear();
}
inline ::pulse::cdm::bind::AnyActionData* ActionListData::mutable_anyaction(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActionListData.AnyAction)
  return anyaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >*
ActionListData::mutable_anyaction() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ActionListData.AnyAction)
  return &anyaction_;
}
inline const ::pulse::cdm::bind::AnyActionData& ActionListData::_internal_anyaction(int index) const {
  return anyaction_.Get(index);
}
inline const ::pulse::cdm::bind::AnyActionData& ActionListData::anyaction(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActionListData.AnyAction)
  return _internal_anyaction(index);
}
inline ::pulse::cdm::bind::AnyActionData* ActionListData::_internal_add_anyaction() {
  return anyaction_.Add();
}
inline ::pulse::cdm::bind::AnyActionData* ActionListData::add_anyaction() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ActionListData.AnyAction)
  return _internal_add_anyaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyActionData >&
ActionListData::anyaction() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ActionListData.AnyAction)
  return anyaction_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ActionMapData

// map<int32, .pulse.cdm.bind.ActionListData> ActionMap = 1;
inline int ActionMapData::_internal_actionmap_size() const {
  return actionmap_.size();
}
inline int ActionMapData::actionmap_size() const {
  return _internal_actionmap_size();
}
inline void ActionMapData::clear_actionmap() {
  actionmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >&
ActionMapData::_internal_actionmap() const {
  return actionmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >&
ActionMapData::actionmap() const {
  // @@protoc_insertion_point(field_map:pulse.cdm.bind.ActionMapData.ActionMap)
  return _internal_actionmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >*
ActionMapData::_internal_mutable_actionmap() {
  return actionmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pulse::cdm::bind::ActionListData >*
ActionMapData::mutable_actionmap() {
  // @@protoc_insertion_point(field_mutable_map:pulse.cdm.bind.ActionMapData.ActionMap)
  return _internal_mutable_actionmap();
}

// -------------------------------------------------------------------

// PatientConfigurationData

// string DataRoot = 1;
inline void PatientConfigurationData::clear_dataroot() {
  dataroot_.ClearToEmpty();
}
inline const std::string& PatientConfigurationData::dataroot() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConfigurationData.DataRoot)
  return _internal_dataroot();
}
inline void PatientConfigurationData::set_dataroot(const std::string& value) {
  _internal_set_dataroot(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientConfigurationData.DataRoot)
}
inline std::string* PatientConfigurationData::mutable_dataroot() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConfigurationData.DataRoot)
  return _internal_mutable_dataroot();
}
inline const std::string& PatientConfigurationData::_internal_dataroot() const {
  return dataroot_.Get();
}
inline void PatientConfigurationData::_internal_set_dataroot(const std::string& value) {
  
  dataroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PatientConfigurationData::set_dataroot(std::string&& value) {
  
  dataroot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.PatientConfigurationData.DataRoot)
}
inline void PatientConfigurationData::set_dataroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.PatientConfigurationData.DataRoot)
}
inline void PatientConfigurationData::set_dataroot(const char* value,
    size_t size) {
  
  dataroot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.PatientConfigurationData.DataRoot)
}
inline std::string* PatientConfigurationData::_internal_mutable_dataroot() {
  
  return dataroot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PatientConfigurationData::release_dataroot() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientConfigurationData.DataRoot)
  return dataroot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PatientConfigurationData::set_allocated_dataroot(std::string* dataroot) {
  if (dataroot != nullptr) {
    
  } else {
    
  }
  dataroot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataroot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientConfigurationData.DataRoot)
}

// .pulse.cdm.bind.PatientData Patient = 2;
inline bool PatientConfigurationData::_internal_has_patient() const {
  return PatientType_case() == kPatient;
}
inline bool PatientConfigurationData::has_patient() const {
  return _internal_has_patient();
}
inline void PatientConfigurationData::set_has_patient() {
  _oneof_case_[0] = kPatient;
}
inline ::pulse::cdm::bind::PatientData* PatientConfigurationData::release_patient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientConfigurationData.Patient)
  if (_internal_has_patient()) {
    clear_has_PatientType();
      ::pulse::cdm::bind::PatientData* temp = PatientType_.patient_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    PatientType_.patient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PatientData& PatientConfigurationData::_internal_patient() const {
  return _internal_has_patient()
      ? *PatientType_.patient_
      : reinterpret_cast< ::pulse::cdm::bind::PatientData&>(::pulse::cdm::bind::_PatientData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientData& PatientConfigurationData::patient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConfigurationData.Patient)
  return _internal_patient();
}
inline ::pulse::cdm::bind::PatientData* PatientConfigurationData::unsafe_arena_release_patient() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.PatientConfigurationData.Patient)
  if (_internal_has_patient()) {
    clear_has_PatientType();
    ::pulse::cdm::bind::PatientData* temp = PatientType_.patient_;
    PatientType_.patient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PatientConfigurationData::unsafe_arena_set_allocated_patient(::pulse::cdm::bind::PatientData* patient) {
  clear_PatientType();
  if (patient) {
    set_has_patient();
    PatientType_.patient_ = patient;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PatientConfigurationData.Patient)
}
inline ::pulse::cdm::bind::PatientData* PatientConfigurationData::_internal_mutable_patient() {
  if (!_internal_has_patient()) {
    clear_PatientType();
    set_has_patient();
    PatientType_.patient_ = CreateMaybeMessage< ::pulse::cdm::bind::PatientData >(GetArena());
  }
  return PatientType_.patient_;
}
inline ::pulse::cdm::bind::PatientData* PatientConfigurationData::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConfigurationData.Patient)
  return _internal_mutable_patient();
}

// string PatientFile = 3;
inline bool PatientConfigurationData::_internal_has_patientfile() const {
  return PatientType_case() == kPatientFile;
}
inline void PatientConfigurationData::set_has_patientfile() {
  _oneof_case_[0] = kPatientFile;
}
inline void PatientConfigurationData::clear_patientfile() {
  if (_internal_has_patientfile()) {
    PatientType_.patientfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_PatientType();
  }
}
inline const std::string& PatientConfigurationData::patientfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConfigurationData.PatientFile)
  return _internal_patientfile();
}
inline void PatientConfigurationData::set_patientfile(const std::string& value) {
  _internal_set_patientfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientConfigurationData.PatientFile)
}
inline std::string* PatientConfigurationData::mutable_patientfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConfigurationData.PatientFile)
  return _internal_mutable_patientfile();
}
inline const std::string& PatientConfigurationData::_internal_patientfile() const {
  if (_internal_has_patientfile()) {
    return PatientType_.patientfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PatientConfigurationData::_internal_set_patientfile(const std::string& value) {
  if (!_internal_has_patientfile()) {
    clear_PatientType();
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  PatientType_.patientfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PatientConfigurationData::set_patientfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientConfigurationData.PatientFile)
  if (!_internal_has_patientfile()) {
    clear_PatientType();
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  PatientType_.patientfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.PatientConfigurationData.PatientFile)
}
inline void PatientConfigurationData::set_patientfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_patientfile()) {
    clear_PatientType();
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  PatientType_.patientfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.PatientConfigurationData.PatientFile)
}
inline void PatientConfigurationData::set_patientfile(const char* value,
                             size_t size) {
  if (!_internal_has_patientfile()) {
    clear_PatientType();
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  PatientType_.patientfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.PatientConfigurationData.PatientFile)
}
inline std::string* PatientConfigurationData::_internal_mutable_patientfile() {
  if (!_internal_has_patientfile()) {
    clear_PatientType();
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return PatientType_.patientfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PatientConfigurationData::release_patientfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientConfigurationData.PatientFile)
  if (_internal_has_patientfile()) {
    clear_has_PatientType();
    return PatientType_.patientfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PatientConfigurationData::set_allocated_patientfile(std::string* patientfile) {
  if (has_PatientType()) {
    clear_PatientType();
  }
  if (patientfile != nullptr) {
    set_has_patientfile();
    PatientType_.patientfile_.UnsafeSetDefault(patientfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(patientfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientConfigurationData.PatientFile)
}

// .pulse.cdm.bind.ConditionListData Conditions = 4;
inline bool PatientConfigurationData::_internal_has_conditions() const {
  return this != internal_default_instance() && conditions_ != nullptr;
}
inline bool PatientConfigurationData::has_conditions() const {
  return _internal_has_conditions();
}
inline void PatientConfigurationData::clear_conditions() {
  if (GetArena() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
}
inline const ::pulse::cdm::bind::ConditionListData& PatientConfigurationData::_internal_conditions() const {
  const ::pulse::cdm::bind::ConditionListData* p = conditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ConditionListData&>(
      ::pulse::cdm::bind::_ConditionListData_default_instance_);
}
inline const ::pulse::cdm::bind::ConditionListData& PatientConfigurationData::conditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConfigurationData.Conditions)
  return _internal_conditions();
}
inline void PatientConfigurationData::unsafe_arena_set_allocated_conditions(
    ::pulse::cdm::bind::ConditionListData* conditions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conditions_);
  }
  conditions_ = conditions;
  if (conditions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PatientConfigurationData.Conditions)
}
inline ::pulse::cdm::bind::ConditionListData* PatientConfigurationData::release_conditions() {
  
  ::pulse::cdm::bind::ConditionListData* temp = conditions_;
  conditions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ConditionListData* PatientConfigurationData::unsafe_arena_release_conditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientConfigurationData.Conditions)
  
  ::pulse::cdm::bind::ConditionListData* temp = conditions_;
  conditions_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ConditionListData* PatientConfigurationData::_internal_mutable_conditions() {
  
  if (conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ConditionListData>(GetArena());
    conditions_ = p;
  }
  return conditions_;
}
inline ::pulse::cdm::bind::ConditionListData* PatientConfigurationData::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConfigurationData.Conditions)
  return _internal_mutable_conditions();
}
inline void PatientConfigurationData::set_allocated_conditions(::pulse::cdm::bind::ConditionListData* conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conditions_;
  }
  if (conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conditions);
    if (message_arena != submessage_arena) {
      conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    
  } else {
    
  }
  conditions_ = conditions;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientConfigurationData.Conditions)
}

// repeated .pulse.cdm.bind.ScalarPropertyData ScalarOverride = 5;
inline int PatientConfigurationData::_internal_scalaroverride_size() const {
  return scalaroverride_.size();
}
inline int PatientConfigurationData::scalaroverride_size() const {
  return _internal_scalaroverride_size();
}
inline ::pulse::cdm::bind::ScalarPropertyData* PatientConfigurationData::mutable_scalaroverride(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientConfigurationData.ScalarOverride)
  return scalaroverride_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ScalarPropertyData >*
PatientConfigurationData::mutable_scalaroverride() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.PatientConfigurationData.ScalarOverride)
  return &scalaroverride_;
}
inline const ::pulse::cdm::bind::ScalarPropertyData& PatientConfigurationData::_internal_scalaroverride(int index) const {
  return scalaroverride_.Get(index);
}
inline const ::pulse::cdm::bind::ScalarPropertyData& PatientConfigurationData::scalaroverride(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientConfigurationData.ScalarOverride)
  return _internal_scalaroverride(index);
}
inline ::pulse::cdm::bind::ScalarPropertyData* PatientConfigurationData::_internal_add_scalaroverride() {
  return scalaroverride_.Add();
}
inline ::pulse::cdm::bind::ScalarPropertyData* PatientConfigurationData::add_scalaroverride() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.PatientConfigurationData.ScalarOverride)
  return _internal_add_scalaroverride();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ScalarPropertyData >&
PatientConfigurationData::scalaroverride() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.PatientConfigurationData.ScalarOverride)
  return scalaroverride_;
}

inline bool PatientConfigurationData::has_PatientType() const {
  return PatientType_case() != PATIENTTYPE_NOT_SET;
}
inline void PatientConfigurationData::clear_has_PatientType() {
  _oneof_case_[0] = PATIENTTYPE_NOT_SET;
}
inline PatientConfigurationData::PatientTypeCase PatientConfigurationData::PatientType_case() const {
  return PatientConfigurationData::PatientTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EngineInitializationData

// int32 ID = 1;
inline void EngineInitializationData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineInitializationData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineInitializationData::id() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.ID)
  return _internal_id();
}
inline void EngineInitializationData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void EngineInitializationData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.ID)
}

// .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 2;
inline bool EngineInitializationData::_internal_has_patientconfiguration() const {
  return StartType_case() == kPatientConfiguration;
}
inline bool EngineInitializationData::has_patientconfiguration() const {
  return _internal_has_patientconfiguration();
}
inline void EngineInitializationData::set_has_patientconfiguration() {
  _oneof_case_[0] = kPatientConfiguration;
}
inline void EngineInitializationData::clear_patientconfiguration() {
  if (_internal_has_patientconfiguration()) {
    if (GetArena() == nullptr) {
      delete StartType_.patientconfiguration_;
    }
    clear_has_StartType();
  }
}
inline ::pulse::cdm::bind::PatientConfigurationData* EngineInitializationData::release_patientconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
  if (_internal_has_patientconfiguration()) {
    clear_has_StartType();
      ::pulse::cdm::bind::PatientConfigurationData* temp = StartType_.patientconfiguration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StartType_.patientconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PatientConfigurationData& EngineInitializationData::_internal_patientconfiguration() const {
  return _internal_has_patientconfiguration()
      ? *StartType_.patientconfiguration_
      : reinterpret_cast< ::pulse::cdm::bind::PatientConfigurationData&>(::pulse::cdm::bind::_PatientConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientConfigurationData& EngineInitializationData::patientconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
  return _internal_patientconfiguration();
}
inline ::pulse::cdm::bind::PatientConfigurationData* EngineInitializationData::unsafe_arena_release_patientconfiguration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
  if (_internal_has_patientconfiguration()) {
    clear_has_StartType();
    ::pulse::cdm::bind::PatientConfigurationData* temp = StartType_.patientconfiguration_;
    StartType_.patientconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EngineInitializationData::unsafe_arena_set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration) {
  clear_StartType();
  if (patientconfiguration) {
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = patientconfiguration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
}
inline ::pulse::cdm::bind::PatientConfigurationData* EngineInitializationData::_internal_mutable_patientconfiguration() {
  if (!_internal_has_patientconfiguration()) {
    clear_StartType();
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = CreateMaybeMessage< ::pulse::cdm::bind::PatientConfigurationData >(GetArena());
  }
  return StartType_.patientconfiguration_;
}
inline ::pulse::cdm::bind::PatientConfigurationData* EngineInitializationData::mutable_patientconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationData.PatientConfiguration)
  return _internal_mutable_patientconfiguration();
}

// string StateFilename = 3;
inline bool EngineInitializationData::_internal_has_statefilename() const {
  return StartType_case() == kStateFilename;
}
inline void EngineInitializationData::set_has_statefilename() {
  _oneof_case_[0] = kStateFilename;
}
inline void EngineInitializationData::clear_statefilename() {
  if (_internal_has_statefilename()) {
    StartType_.statefilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_StartType();
  }
}
inline const std::string& EngineInitializationData::statefilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.StateFilename)
  return _internal_statefilename();
}
inline void EngineInitializationData::set_statefilename(const std::string& value) {
  _internal_set_statefilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.StateFilename)
}
inline std::string* EngineInitializationData::mutable_statefilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationData.StateFilename)
  return _internal_mutable_statefilename();
}
inline const std::string& EngineInitializationData::_internal_statefilename() const {
  if (_internal_has_statefilename()) {
    return StartType_.statefilename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EngineInitializationData::_internal_set_statefilename(const std::string& value) {
  if (!_internal_has_statefilename()) {
    clear_StartType();
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.statefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EngineInitializationData::set_statefilename(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.StateFilename)
  if (!_internal_has_statefilename()) {
    clear_StartType();
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.statefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.EngineInitializationData.StateFilename)
}
inline void EngineInitializationData::set_statefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_statefilename()) {
    clear_StartType();
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.statefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.EngineInitializationData.StateFilename)
}
inline void EngineInitializationData::set_statefilename(const char* value,
                             size_t size) {
  if (!_internal_has_statefilename()) {
    clear_StartType();
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.statefilename_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.EngineInitializationData.StateFilename)
}
inline std::string* EngineInitializationData::_internal_mutable_statefilename() {
  if (!_internal_has_statefilename()) {
    clear_StartType();
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return StartType_.statefilename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EngineInitializationData::release_statefilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EngineInitializationData.StateFilename)
  if (_internal_has_statefilename()) {
    clear_has_StartType();
    return StartType_.statefilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void EngineInitializationData::set_allocated_statefilename(std::string* statefilename) {
  if (has_StartType()) {
    clear_StartType();
  }
  if (statefilename != nullptr) {
    set_has_statefilename();
    StartType_.statefilename_.UnsafeSetDefault(statefilename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(statefilename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EngineInitializationData.StateFilename)
}

// string State = 4;
inline bool EngineInitializationData::_internal_has_state() const {
  return StartType_case() == kState;
}
inline void EngineInitializationData::set_has_state() {
  _oneof_case_[0] = kState;
}
inline void EngineInitializationData::clear_state() {
  if (_internal_has_state()) {
    StartType_.state_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_StartType();
  }
}
inline const std::string& EngineInitializationData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.State)
  return _internal_state();
}
inline void EngineInitializationData::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.State)
}
inline std::string* EngineInitializationData::mutable_state() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationData.State)
  return _internal_mutable_state();
}
inline const std::string& EngineInitializationData::_internal_state() const {
  if (_internal_has_state()) {
    return StartType_.state_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EngineInitializationData::_internal_set_state(const std::string& value) {
  if (!_internal_has_state()) {
    clear_StartType();
    set_has_state();
    StartType_.state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EngineInitializationData::set_state(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.State)
  if (!_internal_has_state()) {
    clear_StartType();
    set_has_state();
    StartType_.state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.EngineInitializationData.State)
}
inline void EngineInitializationData::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_state()) {
    clear_StartType();
    set_has_state();
    StartType_.state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.EngineInitializationData.State)
}
inline void EngineInitializationData::set_state(const char* value,
                             size_t size) {
  if (!_internal_has_state()) {
    clear_StartType();
    set_has_state();
    StartType_.state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StartType_.state_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.EngineInitializationData.State)
}
inline std::string* EngineInitializationData::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_StartType();
    set_has_state();
    StartType_.state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return StartType_.state_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EngineInitializationData::release_state() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EngineInitializationData.State)
  if (_internal_has_state()) {
    clear_has_StartType();
    return StartType_.state_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void EngineInitializationData::set_allocated_state(std::string* state) {
  if (has_StartType()) {
    clear_StartType();
  }
  if (state != nullptr) {
    set_has_state();
    StartType_.state_.UnsafeSetDefault(state);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(state);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EngineInitializationData.State)
}

// .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
inline bool EngineInitializationData::_internal_has_datarequestmanager() const {
  return this != internal_default_instance() && datarequestmanager_ != nullptr;
}
inline bool EngineInitializationData::has_datarequestmanager() const {
  return _internal_has_datarequestmanager();
}
inline void EngineInitializationData::clear_datarequestmanager() {
  if (GetArena() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
}
inline const ::pulse::cdm::bind::DataRequestManagerData& EngineInitializationData::_internal_datarequestmanager() const {
  const ::pulse::cdm::bind::DataRequestManagerData* p = datarequestmanager_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DataRequestManagerData&>(
      ::pulse::cdm::bind::_DataRequestManagerData_default_instance_);
}
inline const ::pulse::cdm::bind::DataRequestManagerData& EngineInitializationData::datarequestmanager() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.DataRequestManager)
  return _internal_datarequestmanager();
}
inline void EngineInitializationData::unsafe_arena_set_allocated_datarequestmanager(
    ::pulse::cdm::bind::DataRequestManagerData* datarequestmanager) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequestmanager_);
  }
  datarequestmanager_ = datarequestmanager;
  if (datarequestmanager) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EngineInitializationData.DataRequestManager)
}
inline ::pulse::cdm::bind::DataRequestManagerData* EngineInitializationData::release_datarequestmanager() {
  
  ::pulse::cdm::bind::DataRequestManagerData* temp = datarequestmanager_;
  datarequestmanager_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DataRequestManagerData* EngineInitializationData::unsafe_arena_release_datarequestmanager() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EngineInitializationData.DataRequestManager)
  
  ::pulse::cdm::bind::DataRequestManagerData* temp = datarequestmanager_;
  datarequestmanager_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DataRequestManagerData* EngineInitializationData::_internal_mutable_datarequestmanager() {
  
  if (datarequestmanager_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DataRequestManagerData>(GetArena());
    datarequestmanager_ = p;
  }
  return datarequestmanager_;
}
inline ::pulse::cdm::bind::DataRequestManagerData* EngineInitializationData::mutable_datarequestmanager() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationData.DataRequestManager)
  return _internal_mutable_datarequestmanager();
}
inline void EngineInitializationData::set_allocated_datarequestmanager(::pulse::cdm::bind::DataRequestManagerData* datarequestmanager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datarequestmanager_;
  }
  if (datarequestmanager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datarequestmanager);
    if (message_arena != submessage_arena) {
      datarequestmanager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datarequestmanager, submessage_arena);
    }
    
  } else {
    
  }
  datarequestmanager_ = datarequestmanager;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EngineInitializationData.DataRequestManager)
}

// string LogFilename = 6;
inline void EngineInitializationData::clear_logfilename() {
  logfilename_.ClearToEmpty();
}
inline const std::string& EngineInitializationData::logfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.LogFilename)
  return _internal_logfilename();
}
inline void EngineInitializationData::set_logfilename(const std::string& value) {
  _internal_set_logfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.LogFilename)
}
inline std::string* EngineInitializationData::mutable_logfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationData.LogFilename)
  return _internal_mutable_logfilename();
}
inline const std::string& EngineInitializationData::_internal_logfilename() const {
  return logfilename_.Get();
}
inline void EngineInitializationData::_internal_set_logfilename(const std::string& value) {
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EngineInitializationData::set_logfilename(std::string&& value) {
  
  logfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.EngineInitializationData.LogFilename)
}
inline void EngineInitializationData::set_logfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.EngineInitializationData.LogFilename)
}
inline void EngineInitializationData::set_logfilename(const char* value,
    size_t size) {
  
  logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.EngineInitializationData.LogFilename)
}
inline std::string* EngineInitializationData::_internal_mutable_logfilename() {
  
  return logfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EngineInitializationData::release_logfilename() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EngineInitializationData.LogFilename)
  return logfilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngineInitializationData::set_allocated_logfilename(std::string* logfilename) {
  if (logfilename != nullptr) {
    
  } else {
    
  }
  logfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EngineInitializationData.LogFilename)
}

// bool KeepLogMessages = 7;
inline void EngineInitializationData::clear_keeplogmessages() {
  keeplogmessages_ = false;
}
inline bool EngineInitializationData::_internal_keeplogmessages() const {
  return keeplogmessages_;
}
inline bool EngineInitializationData::keeplogmessages() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.KeepLogMessages)
  return _internal_keeplogmessages();
}
inline void EngineInitializationData::_internal_set_keeplogmessages(bool value) {
  
  keeplogmessages_ = value;
}
inline void EngineInitializationData::set_keeplogmessages(bool value) {
  _internal_set_keeplogmessages(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.KeepLogMessages)
}

// bool KeepEventChanges = 8;
inline void EngineInitializationData::clear_keepeventchanges() {
  keepeventchanges_ = false;
}
inline bool EngineInitializationData::_internal_keepeventchanges() const {
  return keepeventchanges_;
}
inline bool EngineInitializationData::keepeventchanges() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationData.KeepEventChanges)
  return _internal_keepeventchanges();
}
inline void EngineInitializationData::_internal_set_keepeventchanges(bool value) {
  
  keepeventchanges_ = value;
}
inline void EngineInitializationData::set_keepeventchanges(bool value) {
  _internal_set_keepeventchanges(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EngineInitializationData.KeepEventChanges)
}

inline bool EngineInitializationData::has_StartType() const {
  return StartType_case() != STARTTYPE_NOT_SET;
}
inline void EngineInitializationData::clear_has_StartType() {
  _oneof_case_[0] = STARTTYPE_NOT_SET;
}
inline EngineInitializationData::StartTypeCase EngineInitializationData::StartType_case() const {
  return EngineInitializationData::StartTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EngineInitializationListData

// repeated .pulse.cdm.bind.EngineInitializationData EngineInitialization = 1;
inline int EngineInitializationListData::_internal_engineinitialization_size() const {
  return engineinitialization_.size();
}
inline int EngineInitializationListData::engineinitialization_size() const {
  return _internal_engineinitialization_size();
}
inline void EngineInitializationListData::clear_engineinitialization() {
  engineinitialization_.Clear();
}
inline ::pulse::cdm::bind::EngineInitializationData* EngineInitializationListData::mutable_engineinitialization(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EngineInitializationListData.EngineInitialization)
  return engineinitialization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EngineInitializationData >*
EngineInitializationListData::mutable_engineinitialization() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.EngineInitializationListData.EngineInitialization)
  return &engineinitialization_;
}
inline const ::pulse::cdm::bind::EngineInitializationData& EngineInitializationListData::_internal_engineinitialization(int index) const {
  return engineinitialization_.Get(index);
}
inline const ::pulse::cdm::bind::EngineInitializationData& EngineInitializationListData::engineinitialization(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EngineInitializationListData.EngineInitialization)
  return _internal_engineinitialization(index);
}
inline ::pulse::cdm::bind::EngineInitializationData* EngineInitializationListData::_internal_add_engineinitialization() {
  return engineinitialization_.Add();
}
inline ::pulse::cdm::bind::EngineInitializationData* EngineInitializationListData::add_engineinitialization() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.EngineInitializationListData.EngineInitialization)
  return _internal_add_engineinitialization();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::EngineInitializationData >&
EngineInitializationListData::engineinitialization() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.EngineInitializationListData.EngineInitialization)
  return engineinitialization_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TimedStabilizationData

// .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
inline void TimedStabilizationData::clear_trackingstabilization() {
  trackingstabilization_ = 0;
}
inline ::pulse::cdm::bind::eSwitch TimedStabilizationData::_internal_trackingstabilization() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(trackingstabilization_);
}
inline ::pulse::cdm::bind::eSwitch TimedStabilizationData::trackingstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TimedStabilizationData.TrackingStabilization)
  return _internal_trackingstabilization();
}
inline void TimedStabilizationData::_internal_set_trackingstabilization(::pulse::cdm::bind::eSwitch value) {
  
  trackingstabilization_ = value;
}
inline void TimedStabilizationData::set_trackingstabilization(::pulse::cdm::bind::eSwitch value) {
  _internal_set_trackingstabilization(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TimedStabilizationData.TrackingStabilization)
}

// .pulse.cdm.bind.ScalarTimeData RestingStabilizationTime = 2;
inline bool TimedStabilizationData::_internal_has_restingstabilizationtime() const {
  return this != internal_default_instance() && restingstabilizationtime_ != nullptr;
}
inline bool TimedStabilizationData::has_restingstabilizationtime() const {
  return _internal_has_restingstabilizationtime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& TimedStabilizationData::_internal_restingstabilizationtime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = restingstabilizationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& TimedStabilizationData::restingstabilizationtime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TimedStabilizationData.RestingStabilizationTime)
  return _internal_restingstabilizationtime();
}
inline void TimedStabilizationData::unsafe_arena_set_allocated_restingstabilizationtime(
    ::pulse::cdm::bind::ScalarTimeData* restingstabilizationtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restingstabilizationtime_);
  }
  restingstabilizationtime_ = restingstabilizationtime;
  if (restingstabilizationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TimedStabilizationData.RestingStabilizationTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::release_restingstabilizationtime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = restingstabilizationtime_;
  restingstabilizationtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::unsafe_arena_release_restingstabilizationtime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TimedStabilizationData.RestingStabilizationTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = restingstabilizationtime_;
  restingstabilizationtime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::_internal_mutable_restingstabilizationtime() {
  
  if (restingstabilizationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    restingstabilizationtime_ = p;
  }
  return restingstabilizationtime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::mutable_restingstabilizationtime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TimedStabilizationData.RestingStabilizationTime)
  return _internal_mutable_restingstabilizationtime();
}
inline void TimedStabilizationData::set_allocated_restingstabilizationtime(::pulse::cdm::bind::ScalarTimeData* restingstabilizationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restingstabilizationtime_);
  }
  if (restingstabilizationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restingstabilizationtime)->GetArena();
    if (message_arena != submessage_arena) {
      restingstabilizationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restingstabilizationtime, submessage_arena);
    }
    
  } else {
    
  }
  restingstabilizationtime_ = restingstabilizationtime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TimedStabilizationData.RestingStabilizationTime)
}

// .pulse.cdm.bind.ScalarTimeData FeedbackStabilizationTime = 3;
inline bool TimedStabilizationData::_internal_has_feedbackstabilizationtime() const {
  return this != internal_default_instance() && feedbackstabilizationtime_ != nullptr;
}
inline bool TimedStabilizationData::has_feedbackstabilizationtime() const {
  return _internal_has_feedbackstabilizationtime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& TimedStabilizationData::_internal_feedbackstabilizationtime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = feedbackstabilizationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& TimedStabilizationData::feedbackstabilizationtime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TimedStabilizationData.FeedbackStabilizationTime)
  return _internal_feedbackstabilizationtime();
}
inline void TimedStabilizationData::unsafe_arena_set_allocated_feedbackstabilizationtime(
    ::pulse::cdm::bind::ScalarTimeData* feedbackstabilizationtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedbackstabilizationtime_);
  }
  feedbackstabilizationtime_ = feedbackstabilizationtime;
  if (feedbackstabilizationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TimedStabilizationData.FeedbackStabilizationTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::release_feedbackstabilizationtime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = feedbackstabilizationtime_;
  feedbackstabilizationtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::unsafe_arena_release_feedbackstabilizationtime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TimedStabilizationData.FeedbackStabilizationTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = feedbackstabilizationtime_;
  feedbackstabilizationtime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::_internal_mutable_feedbackstabilizationtime() {
  
  if (feedbackstabilizationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    feedbackstabilizationtime_ = p;
  }
  return feedbackstabilizationtime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* TimedStabilizationData::mutable_feedbackstabilizationtime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TimedStabilizationData.FeedbackStabilizationTime)
  return _internal_mutable_feedbackstabilizationtime();
}
inline void TimedStabilizationData::set_allocated_feedbackstabilizationtime(::pulse::cdm::bind::ScalarTimeData* feedbackstabilizationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedbackstabilizationtime_);
  }
  if (feedbackstabilizationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedbackstabilizationtime)->GetArena();
    if (message_arena != submessage_arena) {
      feedbackstabilizationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedbackstabilizationtime, submessage_arena);
    }
    
  } else {
    
  }
  feedbackstabilizationtime_ = feedbackstabilizationtime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TimedStabilizationData.FeedbackStabilizationTime)
}

// map<string, .pulse.cdm.bind.ScalarTimeData> ConditionStabilization = 4;
inline int TimedStabilizationData::_internal_conditionstabilization_size() const {
  return conditionstabilization_.size();
}
inline int TimedStabilizationData::conditionstabilization_size() const {
  return _internal_conditionstabilization_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >&
TimedStabilizationData::_internal_conditionstabilization() const {
  return conditionstabilization_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >&
TimedStabilizationData::conditionstabilization() const {
  // @@protoc_insertion_point(field_map:pulse.cdm.bind.TimedStabilizationData.ConditionStabilization)
  return _internal_conditionstabilization();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >*
TimedStabilizationData::_internal_mutable_conditionstabilization() {
  return conditionstabilization_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::ScalarTimeData >*
TimedStabilizationData::mutable_conditionstabilization() {
  // @@protoc_insertion_point(field_mutable_map:pulse.cdm.bind.TimedStabilizationData.ConditionStabilization)
  return _internal_mutable_conditionstabilization();
}

// -------------------------------------------------------------------

// DynamicStabilizationPropertyConvergenceData

// .pulse.cdm.bind.DataRequestData DataRequest = 1;
inline bool DynamicStabilizationPropertyConvergenceData::_internal_has_datarequest() const {
  return this != internal_default_instance() && datarequest_ != nullptr;
}
inline bool DynamicStabilizationPropertyConvergenceData::has_datarequest() const {
  return _internal_has_datarequest();
}
inline void DynamicStabilizationPropertyConvergenceData::clear_datarequest() {
  if (GetArena() == nullptr && datarequest_ != nullptr) {
    delete datarequest_;
  }
  datarequest_ = nullptr;
}
inline const ::pulse::cdm::bind::DataRequestData& DynamicStabilizationPropertyConvergenceData::_internal_datarequest() const {
  const ::pulse::cdm::bind::DataRequestData* p = datarequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DataRequestData&>(
      ::pulse::cdm::bind::_DataRequestData_default_instance_);
}
inline const ::pulse::cdm::bind::DataRequestData& DynamicStabilizationPropertyConvergenceData::datarequest() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.DataRequest)
  return _internal_datarequest();
}
inline void DynamicStabilizationPropertyConvergenceData::unsafe_arena_set_allocated_datarequest(
    ::pulse::cdm::bind::DataRequestData* datarequest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datarequest_);
  }
  datarequest_ = datarequest;
  if (datarequest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.DataRequest)
}
inline ::pulse::cdm::bind::DataRequestData* DynamicStabilizationPropertyConvergenceData::release_datarequest() {
  
  ::pulse::cdm::bind::DataRequestData* temp = datarequest_;
  datarequest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DataRequestData* DynamicStabilizationPropertyConvergenceData::unsafe_arena_release_datarequest() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.DataRequest)
  
  ::pulse::cdm::bind::DataRequestData* temp = datarequest_;
  datarequest_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DataRequestData* DynamicStabilizationPropertyConvergenceData::_internal_mutable_datarequest() {
  
  if (datarequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DataRequestData>(GetArena());
    datarequest_ = p;
  }
  return datarequest_;
}
inline ::pulse::cdm::bind::DataRequestData* DynamicStabilizationPropertyConvergenceData::mutable_datarequest() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.DataRequest)
  return _internal_mutable_datarequest();
}
inline void DynamicStabilizationPropertyConvergenceData::set_allocated_datarequest(::pulse::cdm::bind::DataRequestData* datarequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datarequest_;
  }
  if (datarequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datarequest);
    if (message_arena != submessage_arena) {
      datarequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datarequest, submessage_arena);
    }
    
  } else {
    
  }
  datarequest_ = datarequest;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.DataRequest)
}

// double PercentDifference = 2;
inline void DynamicStabilizationPropertyConvergenceData::clear_percentdifference() {
  percentdifference_ = 0;
}
inline double DynamicStabilizationPropertyConvergenceData::_internal_percentdifference() const {
  return percentdifference_;
}
inline double DynamicStabilizationPropertyConvergenceData::percentdifference() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.PercentDifference)
  return _internal_percentdifference();
}
inline void DynamicStabilizationPropertyConvergenceData::_internal_set_percentdifference(double value) {
  
  percentdifference_ = value;
}
inline void DynamicStabilizationPropertyConvergenceData::set_percentdifference(double value) {
  _internal_set_percentdifference(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData.PercentDifference)
}

// -------------------------------------------------------------------

// DynamicStabilizationEngineConvergenceData

// .pulse.cdm.bind.ScalarTimeData ConvergenceTime = 1;
inline bool DynamicStabilizationEngineConvergenceData::_internal_has_convergencetime() const {
  return this != internal_default_instance() && convergencetime_ != nullptr;
}
inline bool DynamicStabilizationEngineConvergenceData::has_convergencetime() const {
  return _internal_has_convergencetime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::_internal_convergencetime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = convergencetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::convergencetime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.ConvergenceTime)
  return _internal_convergencetime();
}
inline void DynamicStabilizationEngineConvergenceData::unsafe_arena_set_allocated_convergencetime(
    ::pulse::cdm::bind::ScalarTimeData* convergencetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convergencetime_);
  }
  convergencetime_ = convergencetime;
  if (convergencetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.ConvergenceTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::release_convergencetime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = convergencetime_;
  convergencetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::unsafe_arena_release_convergencetime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.ConvergenceTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = convergencetime_;
  convergencetime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::_internal_mutable_convergencetime() {
  
  if (convergencetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    convergencetime_ = p;
  }
  return convergencetime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::mutable_convergencetime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.ConvergenceTime)
  return _internal_mutable_convergencetime();
}
inline void DynamicStabilizationEngineConvergenceData::set_allocated_convergencetime(::pulse::cdm::bind::ScalarTimeData* convergencetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(convergencetime_);
  }
  if (convergencetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convergencetime)->GetArena();
    if (message_arena != submessage_arena) {
      convergencetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convergencetime, submessage_arena);
    }
    
  } else {
    
  }
  convergencetime_ = convergencetime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.ConvergenceTime)
}

// .pulse.cdm.bind.ScalarTimeData MinimumReactionTime = 2;
inline bool DynamicStabilizationEngineConvergenceData::_internal_has_minimumreactiontime() const {
  return this != internal_default_instance() && minimumreactiontime_ != nullptr;
}
inline bool DynamicStabilizationEngineConvergenceData::has_minimumreactiontime() const {
  return _internal_has_minimumreactiontime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::_internal_minimumreactiontime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = minimumreactiontime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::minimumreactiontime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MinimumReactionTime)
  return _internal_minimumreactiontime();
}
inline void DynamicStabilizationEngineConvergenceData::unsafe_arena_set_allocated_minimumreactiontime(
    ::pulse::cdm::bind::ScalarTimeData* minimumreactiontime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumreactiontime_);
  }
  minimumreactiontime_ = minimumreactiontime;
  if (minimumreactiontime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MinimumReactionTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::release_minimumreactiontime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = minimumreactiontime_;
  minimumreactiontime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::unsafe_arena_release_minimumreactiontime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MinimumReactionTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = minimumreactiontime_;
  minimumreactiontime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::_internal_mutable_minimumreactiontime() {
  
  if (minimumreactiontime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    minimumreactiontime_ = p;
  }
  return minimumreactiontime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::mutable_minimumreactiontime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MinimumReactionTime)
  return _internal_mutable_minimumreactiontime();
}
inline void DynamicStabilizationEngineConvergenceData::set_allocated_minimumreactiontime(::pulse::cdm::bind::ScalarTimeData* minimumreactiontime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumreactiontime_);
  }
  if (minimumreactiontime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumreactiontime)->GetArena();
    if (message_arena != submessage_arena) {
      minimumreactiontime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimumreactiontime, submessage_arena);
    }
    
  } else {
    
  }
  minimumreactiontime_ = minimumreactiontime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MinimumReactionTime)
}

// .pulse.cdm.bind.ScalarTimeData MaximumAllowedStabilizationTime = 3;
inline bool DynamicStabilizationEngineConvergenceData::_internal_has_maximumallowedstabilizationtime() const {
  return this != internal_default_instance() && maximumallowedstabilizationtime_ != nullptr;
}
inline bool DynamicStabilizationEngineConvergenceData::has_maximumallowedstabilizationtime() const {
  return _internal_has_maximumallowedstabilizationtime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::_internal_maximumallowedstabilizationtime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = maximumallowedstabilizationtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& DynamicStabilizationEngineConvergenceData::maximumallowedstabilizationtime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MaximumAllowedStabilizationTime)
  return _internal_maximumallowedstabilizationtime();
}
inline void DynamicStabilizationEngineConvergenceData::unsafe_arena_set_allocated_maximumallowedstabilizationtime(
    ::pulse::cdm::bind::ScalarTimeData* maximumallowedstabilizationtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumallowedstabilizationtime_);
  }
  maximumallowedstabilizationtime_ = maximumallowedstabilizationtime;
  if (maximumallowedstabilizationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MaximumAllowedStabilizationTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::release_maximumallowedstabilizationtime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = maximumallowedstabilizationtime_;
  maximumallowedstabilizationtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::unsafe_arena_release_maximumallowedstabilizationtime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MaximumAllowedStabilizationTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = maximumallowedstabilizationtime_;
  maximumallowedstabilizationtime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::_internal_mutable_maximumallowedstabilizationtime() {
  
  if (maximumallowedstabilizationtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    maximumallowedstabilizationtime_ = p;
  }
  return maximumallowedstabilizationtime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* DynamicStabilizationEngineConvergenceData::mutable_maximumallowedstabilizationtime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MaximumAllowedStabilizationTime)
  return _internal_mutable_maximumallowedstabilizationtime();
}
inline void DynamicStabilizationEngineConvergenceData::set_allocated_maximumallowedstabilizationtime(::pulse::cdm::bind::ScalarTimeData* maximumallowedstabilizationtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumallowedstabilizationtime_);
  }
  if (maximumallowedstabilizationtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumallowedstabilizationtime)->GetArena();
    if (message_arena != submessage_arena) {
      maximumallowedstabilizationtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximumallowedstabilizationtime, submessage_arena);
    }
    
  } else {
    
  }
  maximumallowedstabilizationtime_ = maximumallowedstabilizationtime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.MaximumAllowedStabilizationTime)
}

// repeated .pulse.cdm.bind.DynamicStabilizationPropertyConvergenceData PropertyConvergence = 4;
inline int DynamicStabilizationEngineConvergenceData::_internal_propertyconvergence_size() const {
  return propertyconvergence_.size();
}
inline int DynamicStabilizationEngineConvergenceData::propertyconvergence_size() const {
  return _internal_propertyconvergence_size();
}
inline void DynamicStabilizationEngineConvergenceData::clear_propertyconvergence() {
  propertyconvergence_.Clear();
}
inline ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* DynamicStabilizationEngineConvergenceData::mutable_propertyconvergence(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.PropertyConvergence)
  return propertyconvergence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >*
DynamicStabilizationEngineConvergenceData::mutable_propertyconvergence() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.PropertyConvergence)
  return &propertyconvergence_;
}
inline const ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData& DynamicStabilizationEngineConvergenceData::_internal_propertyconvergence(int index) const {
  return propertyconvergence_.Get(index);
}
inline const ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData& DynamicStabilizationEngineConvergenceData::propertyconvergence(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.PropertyConvergence)
  return _internal_propertyconvergence(index);
}
inline ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* DynamicStabilizationEngineConvergenceData::_internal_add_propertyconvergence() {
  return propertyconvergence_.Add();
}
inline ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData* DynamicStabilizationEngineConvergenceData::add_propertyconvergence() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.PropertyConvergence)
  return _internal_add_propertyconvergence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::DynamicStabilizationPropertyConvergenceData >&
DynamicStabilizationEngineConvergenceData::propertyconvergence() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.DynamicStabilizationEngineConvergenceData.PropertyConvergence)
  return propertyconvergence_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DynamicStabilizationData

// .pulse.cdm.bind.eSwitch TrackingStabilization = 1;
inline void DynamicStabilizationData::clear_trackingstabilization() {
  trackingstabilization_ = 0;
}
inline ::pulse::cdm::bind::eSwitch DynamicStabilizationData::_internal_trackingstabilization() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(trackingstabilization_);
}
inline ::pulse::cdm::bind::eSwitch DynamicStabilizationData::trackingstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationData.TrackingStabilization)
  return _internal_trackingstabilization();
}
inline void DynamicStabilizationData::_internal_set_trackingstabilization(::pulse::cdm::bind::eSwitch value) {
  
  trackingstabilization_ = value;
}
inline void DynamicStabilizationData::set_trackingstabilization(::pulse::cdm::bind::eSwitch value) {
  _internal_set_trackingstabilization(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.DynamicStabilizationData.TrackingStabilization)
}

// .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData RestingConvergence = 2;
inline bool DynamicStabilizationData::_internal_has_restingconvergence() const {
  return this != internal_default_instance() && restingconvergence_ != nullptr;
}
inline bool DynamicStabilizationData::has_restingconvergence() const {
  return _internal_has_restingconvergence();
}
inline void DynamicStabilizationData::clear_restingconvergence() {
  if (GetArena() == nullptr && restingconvergence_ != nullptr) {
    delete restingconvergence_;
  }
  restingconvergence_ = nullptr;
}
inline const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& DynamicStabilizationData::_internal_restingconvergence() const {
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* p = restingconvergence_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData&>(
      ::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_);
}
inline const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& DynamicStabilizationData::restingconvergence() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationData.RestingConvergence)
  return _internal_restingconvergence();
}
inline void DynamicStabilizationData::unsafe_arena_set_allocated_restingconvergence(
    ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* restingconvergence) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restingconvergence_);
  }
  restingconvergence_ = restingconvergence;
  if (restingconvergence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationData.RestingConvergence)
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::release_restingconvergence() {
  
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* temp = restingconvergence_;
  restingconvergence_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::unsafe_arena_release_restingconvergence() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationData.RestingConvergence)
  
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* temp = restingconvergence_;
  restingconvergence_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::_internal_mutable_restingconvergence() {
  
  if (restingconvergence_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData>(GetArena());
    restingconvergence_ = p;
  }
  return restingconvergence_;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::mutable_restingconvergence() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationData.RestingConvergence)
  return _internal_mutable_restingconvergence();
}
inline void DynamicStabilizationData::set_allocated_restingconvergence(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* restingconvergence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete restingconvergence_;
  }
  if (restingconvergence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(restingconvergence);
    if (message_arena != submessage_arena) {
      restingconvergence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restingconvergence, submessage_arena);
    }
    
  } else {
    
  }
  restingconvergence_ = restingconvergence;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationData.RestingConvergence)
}

// .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData FeedbackConvergence = 3;
inline bool DynamicStabilizationData::_internal_has_feedbackconvergence() const {
  return this != internal_default_instance() && feedbackconvergence_ != nullptr;
}
inline bool DynamicStabilizationData::has_feedbackconvergence() const {
  return _internal_has_feedbackconvergence();
}
inline void DynamicStabilizationData::clear_feedbackconvergence() {
  if (GetArena() == nullptr && feedbackconvergence_ != nullptr) {
    delete feedbackconvergence_;
  }
  feedbackconvergence_ = nullptr;
}
inline const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& DynamicStabilizationData::_internal_feedbackconvergence() const {
  const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* p = feedbackconvergence_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData&>(
      ::pulse::cdm::bind::_DynamicStabilizationEngineConvergenceData_default_instance_);
}
inline const ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData& DynamicStabilizationData::feedbackconvergence() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DynamicStabilizationData.FeedbackConvergence)
  return _internal_feedbackconvergence();
}
inline void DynamicStabilizationData::unsafe_arena_set_allocated_feedbackconvergence(
    ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* feedbackconvergence) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedbackconvergence_);
  }
  feedbackconvergence_ = feedbackconvergence;
  if (feedbackconvergence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DynamicStabilizationData.FeedbackConvergence)
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::release_feedbackconvergence() {
  
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* temp = feedbackconvergence_;
  feedbackconvergence_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::unsafe_arena_release_feedbackconvergence() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DynamicStabilizationData.FeedbackConvergence)
  
  ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* temp = feedbackconvergence_;
  feedbackconvergence_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::_internal_mutable_feedbackconvergence() {
  
  if (feedbackconvergence_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData>(GetArena());
    feedbackconvergence_ = p;
  }
  return feedbackconvergence_;
}
inline ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* DynamicStabilizationData::mutable_feedbackconvergence() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DynamicStabilizationData.FeedbackConvergence)
  return _internal_mutable_feedbackconvergence();
}
inline void DynamicStabilizationData::set_allocated_feedbackconvergence(::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData* feedbackconvergence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feedbackconvergence_;
  }
  if (feedbackconvergence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feedbackconvergence);
    if (message_arena != submessage_arena) {
      feedbackconvergence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedbackconvergence, submessage_arena);
    }
    
  } else {
    
  }
  feedbackconvergence_ = feedbackconvergence;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DynamicStabilizationData.FeedbackConvergence)
}

// map<string, .pulse.cdm.bind.DynamicStabilizationEngineConvergenceData> ConditionConvergence = 4;
inline int DynamicStabilizationData::_internal_conditionconvergence_size() const {
  return conditionconvergence_.size();
}
inline int DynamicStabilizationData::conditionconvergence_size() const {
  return _internal_conditionconvergence_size();
}
inline void DynamicStabilizationData::clear_conditionconvergence() {
  conditionconvergence_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >&
DynamicStabilizationData::_internal_conditionconvergence() const {
  return conditionconvergence_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >&
DynamicStabilizationData::conditionconvergence() const {
  // @@protoc_insertion_point(field_map:pulse.cdm.bind.DynamicStabilizationData.ConditionConvergence)
  return _internal_conditionconvergence();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >*
DynamicStabilizationData::_internal_mutable_conditionconvergence() {
  return conditionconvergence_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::pulse::cdm::bind::DynamicStabilizationEngineConvergenceData >*
DynamicStabilizationData::mutable_conditionconvergence() {
  // @@protoc_insertion_point(field_mutable_map:pulse.cdm.bind.DynamicStabilizationData.ConditionConvergence)
  return _internal_mutable_conditionconvergence();
}

// -------------------------------------------------------------------

// LogMessagesData

// repeated string DebugMessages = 1;
inline int LogMessagesData::_internal_debugmessages_size() const {
  return debugmessages_.size();
}
inline int LogMessagesData::debugmessages_size() const {
  return _internal_debugmessages_size();
}
inline void LogMessagesData::clear_debugmessages() {
  debugmessages_.Clear();
}
inline std::string* LogMessagesData::add_debugmessages() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.LogMessagesData.DebugMessages)
  return _internal_add_debugmessages();
}
inline const std::string& LogMessagesData::_internal_debugmessages(int index) const {
  return debugmessages_.Get(index);
}
inline const std::string& LogMessagesData::debugmessages(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LogMessagesData.DebugMessages)
  return _internal_debugmessages(index);
}
inline std::string* LogMessagesData::mutable_debugmessages(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LogMessagesData.DebugMessages)
  return debugmessages_.Mutable(index);
}
inline void LogMessagesData::set_debugmessages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.DebugMessages)
  debugmessages_.Mutable(index)->assign(value);
}
inline void LogMessagesData::set_debugmessages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.DebugMessages)
  debugmessages_.Mutable(index)->assign(std::move(value));
}
inline void LogMessagesData::set_debugmessages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debugmessages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline void LogMessagesData::set_debugmessages(int index, const char* value, size_t size) {
  debugmessages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline std::string* LogMessagesData::_internal_add_debugmessages() {
  return debugmessages_.Add();
}
inline void LogMessagesData::add_debugmessages(const std::string& value) {
  debugmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline void LogMessagesData::add_debugmessages(std::string&& value) {
  debugmessages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline void LogMessagesData::add_debugmessages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debugmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline void LogMessagesData::add_debugmessages(const char* value, size_t size) {
  debugmessages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.LogMessagesData.DebugMessages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMessagesData::debugmessages() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LogMessagesData.DebugMessages)
  return debugmessages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMessagesData::mutable_debugmessages() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LogMessagesData.DebugMessages)
  return &debugmessages_;
}

// repeated string InfogMessages = 2;
inline int LogMessagesData::_internal_infogmessages_size() const {
  return infogmessages_.size();
}
inline int LogMessagesData::infogmessages_size() const {
  return _internal_infogmessages_size();
}
inline void LogMessagesData::clear_infogmessages() {
  infogmessages_.Clear();
}
inline std::string* LogMessagesData::add_infogmessages() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.LogMessagesData.InfogMessages)
  return _internal_add_infogmessages();
}
inline const std::string& LogMessagesData::_internal_infogmessages(int index) const {
  return infogmessages_.Get(index);
}
inline const std::string& LogMessagesData::infogmessages(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LogMessagesData.InfogMessages)
  return _internal_infogmessages(index);
}
inline std::string* LogMessagesData::mutable_infogmessages(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LogMessagesData.InfogMessages)
  return infogmessages_.Mutable(index);
}
inline void LogMessagesData::set_infogmessages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.InfogMessages)
  infogmessages_.Mutable(index)->assign(value);
}
inline void LogMessagesData::set_infogmessages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.InfogMessages)
  infogmessages_.Mutable(index)->assign(std::move(value));
}
inline void LogMessagesData::set_infogmessages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infogmessages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline void LogMessagesData::set_infogmessages(int index, const char* value, size_t size) {
  infogmessages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline std::string* LogMessagesData::_internal_add_infogmessages() {
  return infogmessages_.Add();
}
inline void LogMessagesData::add_infogmessages(const std::string& value) {
  infogmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline void LogMessagesData::add_infogmessages(std::string&& value) {
  infogmessages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline void LogMessagesData::add_infogmessages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infogmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline void LogMessagesData::add_infogmessages(const char* value, size_t size) {
  infogmessages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.LogMessagesData.InfogMessages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMessagesData::infogmessages() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LogMessagesData.InfogMessages)
  return infogmessages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMessagesData::mutable_infogmessages() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LogMessagesData.InfogMessages)
  return &infogmessages_;
}

// repeated string WarningMessages = 3;
inline int LogMessagesData::_internal_warningmessages_size() const {
  return warningmessages_.size();
}
inline int LogMessagesData::warningmessages_size() const {
  return _internal_warningmessages_size();
}
inline void LogMessagesData::clear_warningmessages() {
  warningmessages_.Clear();
}
inline std::string* LogMessagesData::add_warningmessages() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.LogMessagesData.WarningMessages)
  return _internal_add_warningmessages();
}
inline const std::string& LogMessagesData::_internal_warningmessages(int index) const {
  return warningmessages_.Get(index);
}
inline const std::string& LogMessagesData::warningmessages(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LogMessagesData.WarningMessages)
  return _internal_warningmessages(index);
}
inline std::string* LogMessagesData::mutable_warningmessages(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LogMessagesData.WarningMessages)
  return warningmessages_.Mutable(index);
}
inline void LogMessagesData::set_warningmessages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.WarningMessages)
  warningmessages_.Mutable(index)->assign(value);
}
inline void LogMessagesData::set_warningmessages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.WarningMessages)
  warningmessages_.Mutable(index)->assign(std::move(value));
}
inline void LogMessagesData::set_warningmessages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warningmessages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline void LogMessagesData::set_warningmessages(int index, const char* value, size_t size) {
  warningmessages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline std::string* LogMessagesData::_internal_add_warningmessages() {
  return warningmessages_.Add();
}
inline void LogMessagesData::add_warningmessages(const std::string& value) {
  warningmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline void LogMessagesData::add_warningmessages(std::string&& value) {
  warningmessages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline void LogMessagesData::add_warningmessages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warningmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline void LogMessagesData::add_warningmessages(const char* value, size_t size) {
  warningmessages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.LogMessagesData.WarningMessages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMessagesData::warningmessages() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LogMessagesData.WarningMessages)
  return warningmessages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMessagesData::mutable_warningmessages() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LogMessagesData.WarningMessages)
  return &warningmessages_;
}

// repeated string ErrorMessages = 4;
inline int LogMessagesData::_internal_errormessages_size() const {
  return errormessages_.size();
}
inline int LogMessagesData::errormessages_size() const {
  return _internal_errormessages_size();
}
inline void LogMessagesData::clear_errormessages() {
  errormessages_.Clear();
}
inline std::string* LogMessagesData::add_errormessages() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  return _internal_add_errormessages();
}
inline const std::string& LogMessagesData::_internal_errormessages(int index) const {
  return errormessages_.Get(index);
}
inline const std::string& LogMessagesData::errormessages(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  return _internal_errormessages(index);
}
inline std::string* LogMessagesData::mutable_errormessages(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  return errormessages_.Mutable(index);
}
inline void LogMessagesData::set_errormessages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  errormessages_.Mutable(index)->assign(value);
}
inline void LogMessagesData::set_errormessages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  errormessages_.Mutable(index)->assign(std::move(value));
}
inline void LogMessagesData::set_errormessages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errormessages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline void LogMessagesData::set_errormessages(int index, const char* value, size_t size) {
  errormessages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline std::string* LogMessagesData::_internal_add_errormessages() {
  return errormessages_.Add();
}
inline void LogMessagesData::add_errormessages(const std::string& value) {
  errormessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline void LogMessagesData::add_errormessages(std::string&& value) {
  errormessages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline void LogMessagesData::add_errormessages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errormessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline void LogMessagesData::add_errormessages(const char* value, size_t size) {
  errormessages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.LogMessagesData.ErrorMessages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMessagesData::errormessages() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  return errormessages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMessagesData::mutable_errormessages() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LogMessagesData.ErrorMessages)
  return &errormessages_;
}

// repeated string FatalMessages = 5;
inline int LogMessagesData::_internal_fatalmessages_size() const {
  return fatalmessages_.size();
}
inline int LogMessagesData::fatalmessages_size() const {
  return _internal_fatalmessages_size();
}
inline void LogMessagesData::clear_fatalmessages() {
  fatalmessages_.Clear();
}
inline std::string* LogMessagesData::add_fatalmessages() {
  // @@protoc_insertion_point(field_add_mutable:pulse.cdm.bind.LogMessagesData.FatalMessages)
  return _internal_add_fatalmessages();
}
inline const std::string& LogMessagesData::_internal_fatalmessages(int index) const {
  return fatalmessages_.Get(index);
}
inline const std::string& LogMessagesData::fatalmessages(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LogMessagesData.FatalMessages)
  return _internal_fatalmessages(index);
}
inline std::string* LogMessagesData::mutable_fatalmessages(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LogMessagesData.FatalMessages)
  return fatalmessages_.Mutable(index);
}
inline void LogMessagesData::set_fatalmessages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.FatalMessages)
  fatalmessages_.Mutable(index)->assign(value);
}
inline void LogMessagesData::set_fatalmessages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.LogMessagesData.FatalMessages)
  fatalmessages_.Mutable(index)->assign(std::move(value));
}
inline void LogMessagesData::set_fatalmessages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fatalmessages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline void LogMessagesData::set_fatalmessages(int index, const char* value, size_t size) {
  fatalmessages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline std::string* LogMessagesData::_internal_add_fatalmessages() {
  return fatalmessages_.Add();
}
inline void LogMessagesData::add_fatalmessages(const std::string& value) {
  fatalmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline void LogMessagesData::add_fatalmessages(std::string&& value) {
  fatalmessages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline void LogMessagesData::add_fatalmessages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fatalmessages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline void LogMessagesData::add_fatalmessages(const char* value, size_t size) {
  fatalmessages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.cdm.bind.LogMessagesData.FatalMessages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogMessagesData::fatalmessages() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LogMessagesData.FatalMessages)
  return fatalmessages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogMessagesData::mutable_fatalmessages() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LogMessagesData.FatalMessages)
  return &fatalmessages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::DecimalFormatData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::DecimalFormatData_eType>() {
  return ::pulse::cdm::bind::DecimalFormatData_eType_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::DataRequestData_eCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::DataRequestData_eCategory>() {
  return ::pulse::cdm::bind::DataRequestData_eCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEngine_2eproto
