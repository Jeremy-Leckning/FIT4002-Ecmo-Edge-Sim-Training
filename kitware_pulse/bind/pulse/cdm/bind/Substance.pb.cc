// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Substance.proto

#include "pulse/cdm/bind/Substance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class SubstanceAerosolizationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceAerosolizationData> _instance;
} _SubstanceAerosolizationData_default_instance_;
class SubstancePhysicochemicalsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstancePhysicochemicalsData> _instance;
} _SubstancePhysicochemicalsData_default_instance_;
class SubstanceTissuePharmacokineticsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceTissuePharmacokineticsData> _instance;
} _SubstanceTissuePharmacokineticsData_default_instance_;
class SubstancePharmacokineticsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstancePharmacokineticsData> _instance;
} _SubstancePharmacokineticsData_default_instance_;
class SubstancePharmacodynamicsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstancePharmacodynamicsData> _instance;
} _SubstancePharmacodynamicsData_default_instance_;
class SubstanceSystemicClearanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceSystemicClearanceData> _instance;
} _SubstanceSystemicClearanceData_default_instance_;
class SubstanceRenalRegulationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceRenalRegulationData> _instance;
} _SubstanceRenalRegulationData_default_instance_;
class SubstanceRenalClearanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceRenalClearanceData> _instance;
} _SubstanceRenalClearanceData_default_instance_;
class SubstanceClearanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceClearanceData> _instance;
} _SubstanceClearanceData_default_instance_;
class SubstanceFractionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceFractionData> _instance;
} _SubstanceFractionData_default_instance_;
class SubstanceConcentrationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceConcentrationData> _instance;
} _SubstanceConcentrationData_default_instance_;
class SubstanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceData> _instance;
} _SubstanceData_default_instance_;
class SubstanceCompoundDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceCompoundData> _instance;
} _SubstanceCompoundData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceAerosolizationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceAerosolizationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_HistogramFractionVsLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceClearanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceClearanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceCompoundData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceCompoundData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceConcentrationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceConcentrationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerAreaTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarInversePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceFractionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceFractionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstancePharmacodynamicsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstancePharmacodynamicsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstancePharmacokineticsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstancePharmacokineticsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static void InitDefaultsscc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstancePhysicochemicalsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstancePhysicochemicalsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceRenalClearanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceRenalClearanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceRenalRegulationData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceRenalRegulationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceSystemicClearanceData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceSystemicClearanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceTissuePharmacokineticsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fSubstance_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceAerosolizationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceAerosolizationData, bronchiolemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceAerosolizationData, inflammationcoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceAerosolizationData, particulatesizedistribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, aciddissociationconstant_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, bindingprotein_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, bloodplasmaratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, fractionunboundinplasma_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, ionicstate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, logp_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePhysicochemicalsData, oralabsorptionrateconstant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceTissuePharmacokineticsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceTissuePharmacokineticsData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceTissuePharmacokineticsData, partitioncoefficient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacokineticsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacokineticsData, physicochemicals_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacokineticsData, tissuekinetics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, bronchodilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, diastolicpressuremodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, ec50_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, emaxshapeparameter_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, heartratemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, neuromuscularblock_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, pupillaryresponse_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, respirationratemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, sedation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, systolicpressuremodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, tidalvolumemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstancePharmacodynamicsData, tubularpermeabilitymodifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, fractionexcretedinfeces_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, fractionexcretedinurine_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, fractionmetabolizedingut_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, fractionunboundinplasma_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, intrinsicclearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, renalclearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceSystemicClearanceData, systemicclearance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalRegulationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalRegulationData, chargeinblood_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalRegulationData, fractionunboundinplasma_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalRegulationData, reabsorptionratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalRegulationData, transportmaximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, clearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, regulation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, filtrationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, reabsorptionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, excretionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceRenalClearanceData, glomerularfilterability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceClearanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceClearanceData, systemicclearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceClearanceData, renalclearance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceFractionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceFractionData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceFractionData, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceConcentrationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceConcentrationData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceConcentrationData, concentration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, density_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, molarmass_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, maximumdiffusionflux_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, michaeliscoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, aerosolization_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, bloodconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, massinbody_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, massinblood_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, massintissue_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, plasmaconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, systemicmasscleared_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, tissueconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, alveolartransfer_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, diffusingcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, endtidalfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, endtidalpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, relativediffusioncoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, solubilitycoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, clearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, pharmacokinetics_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceData, pharmacodynamics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceCompoundData, component_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::SubstanceAerosolizationData)},
  { 8, -1, sizeof(::pulse::cdm::bind::SubstancePhysicochemicalsData)},
  { 20, -1, sizeof(::pulse::cdm::bind::SubstanceTissuePharmacokineticsData)},
  { 27, -1, sizeof(::pulse::cdm::bind::SubstancePharmacokineticsData)},
  { 34, -1, sizeof(::pulse::cdm::bind::SubstancePharmacodynamicsData)},
  { 51, -1, sizeof(::pulse::cdm::bind::SubstanceSystemicClearanceData)},
  { 63, -1, sizeof(::pulse::cdm::bind::SubstanceRenalRegulationData)},
  { 72, -1, sizeof(::pulse::cdm::bind::SubstanceRenalClearanceData)},
  { 83, -1, sizeof(::pulse::cdm::bind::SubstanceClearanceData)},
  { 90, -1, sizeof(::pulse::cdm::bind::SubstanceFractionData)},
  { 97, -1, sizeof(::pulse::cdm::bind::SubstanceConcentrationData)},
  { 104, -1, sizeof(::pulse::cdm::bind::SubstanceData)},
  { 132, -1, sizeof(::pulse::cdm::bind::SubstanceCompoundData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceAerosolizationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstancePhysicochemicalsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceTissuePharmacokineticsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstancePharmacokineticsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstancePharmacodynamicsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceSystemicClearanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceRenalRegulationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceRenalClearanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceClearanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceFractionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceConcentrationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceCompoundData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fSubstance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036pulse/cdm/bind/Substance.proto\022\016pulse."
  "cdm.bind\032\032pulse/cdm/bind/Enums.proto\032\037pu"
  "lse/cdm/bind/Properties.proto\032\037pulse/cdm"
  "/bind/Physiology.proto\"\366\001\n\033SubstanceAero"
  "solizationData\022B\n\022BronchioleModifier\030\001 \001"
  "(\0132&.pulse.cdm.bind.ScalarNegative1To1Da"
  "ta\022\?\n\027InflammationCoefficient\030\002 \001(\0132\036.pu"
  "lse.cdm.bind.Scalar0To1Data\022R\n\033Particula"
  "teSizeDistribution\030\003 \001(\0132-.pulse.cdm.bin"
  "d.HistogramFractionVsLengthData\"\210\005\n\035Subs"
  "tancePhysicochemicalsData\022<\n\030AcidDissoci"
  "ationConstant\030\001 \001(\0132\032.pulse.cdm.bind.Sca"
  "larData\022U\n\016BindingProtein\030\002 \001(\0162=.pulse."
  "cdm.bind.SubstancePhysicochemicalsData.e"
  "BindingProtein\0224\n\020BloodPlasmaRatio\030\003 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\022\?\n\027Fraction"
  "UnboundInPlasma\030\004 \001(\0132\036.pulse.cdm.bind.S"
  "calar0To1Data\022M\n\nIonicState\030\005 \001(\01629.puls"
  "e.cdm.bind.SubstancePhysicochemicalsData"
  ".eIonicState\022(\n\004LogP\030\006 \001(\0132\032.pulse.cdm.b"
  "ind.ScalarData\022>\n\032OralAbsorptionRateCons"
  "tant\030\007 \001(\0132\032.pulse.cdm.bind.ScalarData\"P"
  "\n\013eIonicState\022\022\n\016NullIonicState\020\000\022\010\n\004Aci"
  "d\020\001\022\010\n\004Base\020\002\022\013\n\007Neutral\020\003\022\014\n\010WeakBase\020\004"
  "\"P\n\017eBindingProtein\022\026\n\022NullBindingProtei"
  "n\020\000\022\007\n\003AAG\020\001\022\013\n\007Albumin\020\002\022\017\n\013Lipoprotein"
  "\020\003\"m\n#SubstanceTissuePharmacokineticsDat"
  "a\022\014\n\004Name\030\001 \001(\t\0228\n\024PartitionCoefficient\030"
  "\002 \001(\0132\032.pulse.cdm.bind.ScalarData\"\265\001\n\035Su"
  "bstancePharmacokineticsData\022G\n\020Physicoch"
  "emicals\030\001 \001(\0132-.pulse.cdm.bind.Substance"
  "PhysicochemicalsData\022K\n\016TissueKinetics\030\002"
  " \003(\01323.pulse.cdm.bind.SubstanceTissuePha"
  "rmacokineticsData\"\302\006\n\035SubstancePharmacod"
  "ynamicsData\022\?\n\017Bronchodilation\030\001 \001(\0132&.p"
  "ulse.cdm.bind.ScalarNegative1To1Data\022I\n\031"
  "DiastolicPressureModifier\030\002 \001(\0132&.pulse."
  "cdm.bind.ScalarNegative1To1Data\0225\n\004EC50\030"
  "\003 \001(\0132\'.pulse.cdm.bind.ScalarMassPerVolu"
  "meData\0226\n\022EMaxShapeParameter\030\004 \001(\0132\032.pul"
  "se.cdm.bind.ScalarData\022A\n\021HeartRateModif"
  "ier\030\005 \001(\0132&.pulse.cdm.bind.ScalarNegativ"
  "e1To1Data\022B\n\022NeuromuscularBlock\030\006 \001(\0132&."
  "pulse.cdm.bind.ScalarNegative1To1Data\022@\n"
  "\021PupillaryResponse\030\007 \001(\0132%.pulse.cdm.bin"
  "d.PupillaryResponseData\022G\n\027RespirationRa"
  "teModifier\030\010 \001(\0132&.pulse.cdm.bind.Scalar"
  "Negative1To1Data\0228\n\010Sedation\030\t \001(\0132&.pul"
  "se.cdm.bind.ScalarNegative1To1Data\022H\n\030Sy"
  "stolicPressureModifier\030\n \001(\0132&.pulse.cdm"
  ".bind.ScalarNegative1To1Data\022C\n\023TidalVol"
  "umeModifier\030\013 \001(\0132&.pulse.cdm.bind.Scala"
  "rNegative1To1Data\022K\n\033TubularPermeability"
  "Modifier\030\014 \001(\0132&.pulse.cdm.bind.ScalarNe"
  "gative1To1Data\"\373\003\n\036SubstanceSystemicClea"
  "ranceData\022\?\n\027FractionExcretedInFeces\030\001 \001"
  "(\0132\036.pulse.cdm.bind.Scalar0To1Data\022\?\n\027Fr"
  "actionExcretedInUrine\030\002 \001(\0132\036.pulse.cdm."
  "bind.Scalar0To1Data\022@\n\030FractionMetaboliz"
  "edInGut\030\003 \001(\0132\036.pulse.cdm.bind.Scalar0To"
  "1Data\022\?\n\027FractionUnboundInPlasma\030\004 \001(\0132\036"
  ".pulse.cdm.bind.Scalar0To1Data\022G\n\022Intrin"
  "sicClearance\030\005 \001(\0132+.pulse.cdm.bind.Scal"
  "arVolumePerTimeMassData\022C\n\016RenalClearanc"
  "e\030\006 \001(\0132+.pulse.cdm.bind.ScalarVolumePer"
  "TimeMassData\022F\n\021SystemicClearance\030\007 \001(\0132"
  "+.pulse.cdm.bind.ScalarVolumePerTimeMass"
  "Data\"\207\002\n\034SubstanceRenalRegulationData\022.\n"
  "\rChargeInBlood\030\001 \001(\0162\027.pulse.cdm.bind.eC"
  "harge\022\?\n\027FractionUnboundInPlasma\030\002 \001(\0132\036"
  ".pulse.cdm.bind.Scalar0To1Data\0225\n\021Reabso"
  "rptionRatio\030\003 \001(\0132\032.pulse.cdm.bind.Scala"
  "rData\022\?\n\020TransportMaximum\030\004 \001(\0132%.pulse."
  "cdm.bind.ScalarMassPerTimeData\"\232\003\n\033Subst"
  "anceRenalClearanceData\022>\n\tClearance\030\001 \001("
  "\0132+.pulse.cdm.bind.ScalarVolumePerTimeMa"
  "ssData\022@\n\nRegulation\030\002 \001(\0132,.pulse.cdm.b"
  "ind.SubstanceRenalRegulationData\022=\n\016Filt"
  "rationRate\030\003 \001(\0132%.pulse.cdm.bind.Scalar"
  "MassPerTimeData\022\?\n\020ReabsorptionRate\030\004 \001("
  "\0132%.pulse.cdm.bind.ScalarMassPerTimeData"
  "\022<\n\rExcretionRate\030\005 \001(\0132%.pulse.cdm.bind"
  ".ScalarMassPerTimeData\022;\n\027GlomerularFilt"
  "erability\030\006 \001(\0132\032.pulse.cdm.bind.ScalarD"
  "ata\"\250\001\n\026SubstanceClearanceData\022I\n\021System"
  "icClearance\030\001 \001(\0132..pulse.cdm.bind.Subst"
  "anceSystemicClearanceData\022C\n\016RenalCleara"
  "nce\030\002 \001(\0132+.pulse.cdm.bind.SubstanceRena"
  "lClearanceData\"U\n\025SubstanceFractionData\022"
  "\014\n\004Name\030\001 \001(\t\022.\n\006Amount\030\002 \001(\0132\036.pulse.cd"
  "m.bind.Scalar0To1Data\"j\n\032SubstanceConcen"
  "trationData\022\014\n\004Name\030\001 \001(\t\022>\n\rConcentrati"
  "on\030\002 \001(\0132\'.pulse.cdm.bind.ScalarMassPerV"
  "olumeData\"\345\013\n\rSubstanceData\022\014\n\004Name\030\001 \001("
  "\t\0228\n\007Density\030\002 \001(\0132\'.pulse.cdm.bind.Scal"
  "arMassPerVolumeData\022:\n\tMolarMass\030\003 \001(\0132\'"
  ".pulse.cdm.bind.ScalarMassPerAmountData\022"
  "3\n\005State\030\004 \001(\0162$.pulse.cdm.bind.Substanc"
  "eData.eState\022G\n\024MaximumDiffusionFlux\030\005 \001"
  "(\0132).pulse.cdm.bind.ScalarMassPerAreaTim"
  "eData\0228\n\024MichaelisCoefficient\030\006 \001(\0132\032.pu"
  "lse.cdm.bind.ScalarData\022C\n\016Aerosolizatio"
  "n\030\007 \001(\0132+.pulse.cdm.bind.SubstanceAeroso"
  "lizationData\022C\n\022BloodConcentration\030\010 \001(\013"
  "2\'.pulse.cdm.bind.ScalarMassPerVolumeDat"
  "a\0222\n\nMassInBody\030\t \001(\0132\036.pulse.cdm.bind.S"
  "calarMassData\0223\n\013MassInBlood\030\n \001(\0132\036.pul"
  "se.cdm.bind.ScalarMassData\0224\n\014MassInTiss"
  "ue\030\013 \001(\0132\036.pulse.cdm.bind.ScalarMassData"
  "\022D\n\023PlasmaConcentration\030\014 \001(\0132\'.pulse.cd"
  "m.bind.ScalarMassPerVolumeData\022;\n\023System"
  "icMassCleared\030\r \001(\0132\036.pulse.cdm.bind.Sca"
  "larMassData\022D\n\023TissueConcentration\030\016 \001(\013"
  "2\'.pulse.cdm.bind.ScalarMassPerVolumeDat"
  "a\022A\n\020AlveolarTransfer\030\017 \001(\0132\'.pulse.cdm."
  "bind.ScalarVolumePerTimeData\022J\n\021Diffusin"
  "gCapacity\030\020 \001(\0132/.pulse.cdm.bind.ScalarV"
  "olumePerTimePressureData\0228\n\020EndTidalFrac"
  "tion\030\021 \001(\0132\036.pulse.cdm.bind.Scalar0To1Da"
  "ta\022<\n\020EndTidalPressure\030\022 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureData\022@\n\034RelativeDiff"
  "usionCoefficient\030\023 \001(\0132\032.pulse.cdm.bind."
  "ScalarData\022H\n\025SolubilityCoefficient\030\024 \001("
  "\0132).pulse.cdm.bind.ScalarInversePressure"
  "Data\0229\n\tClearance\030\025 \001(\0132&.pulse.cdm.bind"
  ".SubstanceClearanceData\022G\n\020Pharmacokinet"
  "ics\030\026 \001(\0132-.pulse.cdm.bind.SubstancePhar"
  "macokineticsData\022G\n\020Pharmacodynamics\030\027 \001"
  "(\0132-.pulse.cdm.bind.SubstancePharmacodyn"
  "amicsData\"F\n\006eState\022\r\n\tNullState\020\000\022\t\n\005So"
  "lid\020\001\022\n\n\006Liquid\020\002\022\007\n\003Gas\020\003\022\r\n\tMolecular\020"
  "\004\"d\n\025SubstanceCompoundData\022\014\n\004Name\030\001 \001(\t"
  "\022=\n\tComponent\030\002 \003(\0132*.pulse.cdm.bind.Sub"
  "stanceConcentrationDataB/\n\032com.kitware.p"
  "ulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_sccs[13] = {
  &scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
  &scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fSubstance_2eproto, "pulse/cdm/bind/Substance.proto", 5400,
  &descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto_deps, 13, 3,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fSubstance_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fSubstance_2eproto, 13, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fSubstance_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstancePhysicochemicalsData_eIonicState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto[0];
}
bool SubstancePhysicochemicalsData_eIonicState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::NullIonicState;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::Acid;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::Base;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::Neutral;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::WeakBase;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::eIonicState_MIN;
constexpr SubstancePhysicochemicalsData_eIonicState SubstancePhysicochemicalsData::eIonicState_MAX;
constexpr int SubstancePhysicochemicalsData::eIonicState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstancePhysicochemicalsData_eBindingProtein_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto[1];
}
bool SubstancePhysicochemicalsData_eBindingProtein_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::NullBindingProtein;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::AAG;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::Albumin;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::Lipoprotein;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::eBindingProtein_MIN;
constexpr SubstancePhysicochemicalsData_eBindingProtein SubstancePhysicochemicalsData::eBindingProtein_MAX;
constexpr int SubstancePhysicochemicalsData::eBindingProtein_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstanceData_eState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstance_2eproto[2];
}
bool SubstanceData_eState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SubstanceData_eState SubstanceData::NullState;
constexpr SubstanceData_eState SubstanceData::Solid;
constexpr SubstanceData_eState SubstanceData::Liquid;
constexpr SubstanceData_eState SubstanceData::Gas;
constexpr SubstanceData_eState SubstanceData::Molecular;
constexpr SubstanceData_eState SubstanceData::eState_MIN;
constexpr SubstanceData_eState SubstanceData::eState_MAX;
constexpr int SubstanceData::eState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SubstanceAerosolizationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchiolemodifier(const SubstanceAerosolizationData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& inflammationcoefficient(const SubstanceAerosolizationData* msg);
  static const ::pulse::cdm::bind::HistogramFractionVsLengthData& particulatesizedistribution(const SubstanceAerosolizationData* msg);
};

const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstanceAerosolizationData::_Internal::bronchiolemodifier(const SubstanceAerosolizationData* msg) {
  return *msg->bronchiolemodifier_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceAerosolizationData::_Internal::inflammationcoefficient(const SubstanceAerosolizationData* msg) {
  return *msg->inflammationcoefficient_;
}
const ::pulse::cdm::bind::HistogramFractionVsLengthData&
SubstanceAerosolizationData::_Internal::particulatesizedistribution(const SubstanceAerosolizationData* msg) {
  return *msg->particulatesizedistribution_;
}
void SubstanceAerosolizationData::clear_bronchiolemodifier() {
  if (GetArena() == nullptr && bronchiolemodifier_ != nullptr) {
    delete bronchiolemodifier_;
  }
  bronchiolemodifier_ = nullptr;
}
void SubstanceAerosolizationData::clear_inflammationcoefficient() {
  if (GetArena() == nullptr && inflammationcoefficient_ != nullptr) {
    delete inflammationcoefficient_;
  }
  inflammationcoefficient_ = nullptr;
}
void SubstanceAerosolizationData::clear_particulatesizedistribution() {
  if (GetArena() == nullptr && particulatesizedistribution_ != nullptr) {
    delete particulatesizedistribution_;
  }
  particulatesizedistribution_ = nullptr;
}
SubstanceAerosolizationData::SubstanceAerosolizationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceAerosolizationData)
}
SubstanceAerosolizationData::SubstanceAerosolizationData(const SubstanceAerosolizationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bronchiolemodifier()) {
    bronchiolemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.bronchiolemodifier_);
  } else {
    bronchiolemodifier_ = nullptr;
  }
  if (from._internal_has_inflammationcoefficient()) {
    inflammationcoefficient_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.inflammationcoefficient_);
  } else {
    inflammationcoefficient_ = nullptr;
  }
  if (from._internal_has_particulatesizedistribution()) {
    particulatesizedistribution_ = new ::pulse::cdm::bind::HistogramFractionVsLengthData(*from.particulatesizedistribution_);
  } else {
    particulatesizedistribution_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceAerosolizationData)
}

void SubstanceAerosolizationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bronchiolemodifier_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&particulatesizedistribution_) -
      reinterpret_cast<char*>(&bronchiolemodifier_)) + sizeof(particulatesizedistribution_));
}

SubstanceAerosolizationData::~SubstanceAerosolizationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceAerosolizationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceAerosolizationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bronchiolemodifier_;
  if (this != internal_default_instance()) delete inflammationcoefficient_;
  if (this != internal_default_instance()) delete particulatesizedistribution_;
}

void SubstanceAerosolizationData::ArenaDtor(void* object) {
  SubstanceAerosolizationData* _this = reinterpret_cast< SubstanceAerosolizationData* >(object);
  (void)_this;
}
void SubstanceAerosolizationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceAerosolizationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceAerosolizationData& SubstanceAerosolizationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceAerosolizationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceAerosolizationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceAerosolizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bronchiolemodifier_ != nullptr) {
    delete bronchiolemodifier_;
  }
  bronchiolemodifier_ = nullptr;
  if (GetArena() == nullptr && inflammationcoefficient_ != nullptr) {
    delete inflammationcoefficient_;
  }
  inflammationcoefficient_ = nullptr;
  if (GetArena() == nullptr && particulatesizedistribution_ != nullptr) {
    delete particulatesizedistribution_;
  }
  particulatesizedistribution_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceAerosolizationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarNegative1To1Data BronchioleModifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchiolemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data InflammationCoefficient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inflammationcoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.HistogramFractionVsLengthData ParticulateSizeDistribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_particulatesizedistribution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceAerosolizationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceAerosolizationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data BronchioleModifier = 1;
  if (this->has_bronchiolemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bronchiolemodifier(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data InflammationCoefficient = 2;
  if (this->has_inflammationcoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inflammationcoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.HistogramFractionVsLengthData ParticulateSizeDistribution = 3;
  if (this->has_particulatesizedistribution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::particulatesizedistribution(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceAerosolizationData)
  return target;
}

size_t SubstanceAerosolizationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceAerosolizationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data BronchioleModifier = 1;
  if (this->has_bronchiolemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bronchiolemodifier_);
  }

  // .pulse.cdm.bind.Scalar0To1Data InflammationCoefficient = 2;
  if (this->has_inflammationcoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inflammationcoefficient_);
  }

  // .pulse.cdm.bind.HistogramFractionVsLengthData ParticulateSizeDistribution = 3;
  if (this->has_particulatesizedistribution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *particulatesizedistribution_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceAerosolizationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceAerosolizationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceAerosolizationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceAerosolizationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceAerosolizationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceAerosolizationData)
    MergeFrom(*source);
  }
}

void SubstanceAerosolizationData::MergeFrom(const SubstanceAerosolizationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceAerosolizationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bronchiolemodifier()) {
    _internal_mutable_bronchiolemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_bronchiolemodifier());
  }
  if (from.has_inflammationcoefficient()) {
    _internal_mutable_inflammationcoefficient()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_inflammationcoefficient());
  }
  if (from.has_particulatesizedistribution()) {
    _internal_mutable_particulatesizedistribution()->::pulse::cdm::bind::HistogramFractionVsLengthData::MergeFrom(from._internal_particulatesizedistribution());
  }
}

void SubstanceAerosolizationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceAerosolizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceAerosolizationData::CopyFrom(const SubstanceAerosolizationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceAerosolizationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceAerosolizationData::IsInitialized() const {
  return true;
}

void SubstanceAerosolizationData::InternalSwap(SubstanceAerosolizationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceAerosolizationData, particulatesizedistribution_)
      + sizeof(SubstanceAerosolizationData::particulatesizedistribution_)
      - PROTOBUF_FIELD_OFFSET(SubstanceAerosolizationData, bronchiolemodifier_)>(
          reinterpret_cast<char*>(&bronchiolemodifier_),
          reinterpret_cast<char*>(&other->bronchiolemodifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceAerosolizationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstancePhysicochemicalsData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& aciddissociationconstant(const SubstancePhysicochemicalsData* msg);
  static const ::pulse::cdm::bind::ScalarData& bloodplasmaratio(const SubstancePhysicochemicalsData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma(const SubstancePhysicochemicalsData* msg);
  static const ::pulse::cdm::bind::ScalarData& logp(const SubstancePhysicochemicalsData* msg);
  static const ::pulse::cdm::bind::ScalarData& oralabsorptionrateconstant(const SubstancePhysicochemicalsData* msg);
};

const ::pulse::cdm::bind::ScalarData&
SubstancePhysicochemicalsData::_Internal::aciddissociationconstant(const SubstancePhysicochemicalsData* msg) {
  return *msg->aciddissociationconstant_;
}
const ::pulse::cdm::bind::ScalarData&
SubstancePhysicochemicalsData::_Internal::bloodplasmaratio(const SubstancePhysicochemicalsData* msg) {
  return *msg->bloodplasmaratio_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstancePhysicochemicalsData::_Internal::fractionunboundinplasma(const SubstancePhysicochemicalsData* msg) {
  return *msg->fractionunboundinplasma_;
}
const ::pulse::cdm::bind::ScalarData&
SubstancePhysicochemicalsData::_Internal::logp(const SubstancePhysicochemicalsData* msg) {
  return *msg->logp_;
}
const ::pulse::cdm::bind::ScalarData&
SubstancePhysicochemicalsData::_Internal::oralabsorptionrateconstant(const SubstancePhysicochemicalsData* msg) {
  return *msg->oralabsorptionrateconstant_;
}
void SubstancePhysicochemicalsData::clear_aciddissociationconstant() {
  if (GetArena() == nullptr && aciddissociationconstant_ != nullptr) {
    delete aciddissociationconstant_;
  }
  aciddissociationconstant_ = nullptr;
}
void SubstancePhysicochemicalsData::clear_bloodplasmaratio() {
  if (GetArena() == nullptr && bloodplasmaratio_ != nullptr) {
    delete bloodplasmaratio_;
  }
  bloodplasmaratio_ = nullptr;
}
void SubstancePhysicochemicalsData::clear_fractionunboundinplasma() {
  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
}
void SubstancePhysicochemicalsData::clear_logp() {
  if (GetArena() == nullptr && logp_ != nullptr) {
    delete logp_;
  }
  logp_ = nullptr;
}
void SubstancePhysicochemicalsData::clear_oralabsorptionrateconstant() {
  if (GetArena() == nullptr && oralabsorptionrateconstant_ != nullptr) {
    delete oralabsorptionrateconstant_;
  }
  oralabsorptionrateconstant_ = nullptr;
}
SubstancePhysicochemicalsData::SubstancePhysicochemicalsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstancePhysicochemicalsData)
}
SubstancePhysicochemicalsData::SubstancePhysicochemicalsData(const SubstancePhysicochemicalsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aciddissociationconstant()) {
    aciddissociationconstant_ = new ::pulse::cdm::bind::ScalarData(*from.aciddissociationconstant_);
  } else {
    aciddissociationconstant_ = nullptr;
  }
  if (from._internal_has_bloodplasmaratio()) {
    bloodplasmaratio_ = new ::pulse::cdm::bind::ScalarData(*from.bloodplasmaratio_);
  } else {
    bloodplasmaratio_ = nullptr;
  }
  if (from._internal_has_fractionunboundinplasma()) {
    fractionunboundinplasma_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionunboundinplasma_);
  } else {
    fractionunboundinplasma_ = nullptr;
  }
  if (from._internal_has_logp()) {
    logp_ = new ::pulse::cdm::bind::ScalarData(*from.logp_);
  } else {
    logp_ = nullptr;
  }
  if (from._internal_has_oralabsorptionrateconstant()) {
    oralabsorptionrateconstant_ = new ::pulse::cdm::bind::ScalarData(*from.oralabsorptionrateconstant_);
  } else {
    oralabsorptionrateconstant_ = nullptr;
  }
  ::memcpy(&bindingprotein_, &from.bindingprotein_,
    static_cast<size_t>(reinterpret_cast<char*>(&ionicstate_) -
    reinterpret_cast<char*>(&bindingprotein_)) + sizeof(ionicstate_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstancePhysicochemicalsData)
}

void SubstancePhysicochemicalsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aciddissociationconstant_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ionicstate_) -
      reinterpret_cast<char*>(&aciddissociationconstant_)) + sizeof(ionicstate_));
}

SubstancePhysicochemicalsData::~SubstancePhysicochemicalsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstancePhysicochemicalsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstancePhysicochemicalsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aciddissociationconstant_;
  if (this != internal_default_instance()) delete bloodplasmaratio_;
  if (this != internal_default_instance()) delete fractionunboundinplasma_;
  if (this != internal_default_instance()) delete logp_;
  if (this != internal_default_instance()) delete oralabsorptionrateconstant_;
}

void SubstancePhysicochemicalsData::ArenaDtor(void* object) {
  SubstancePhysicochemicalsData* _this = reinterpret_cast< SubstancePhysicochemicalsData* >(object);
  (void)_this;
}
void SubstancePhysicochemicalsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstancePhysicochemicalsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstancePhysicochemicalsData& SubstancePhysicochemicalsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstancePhysicochemicalsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstancePhysicochemicalsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && aciddissociationconstant_ != nullptr) {
    delete aciddissociationconstant_;
  }
  aciddissociationconstant_ = nullptr;
  if (GetArena() == nullptr && bloodplasmaratio_ != nullptr) {
    delete bloodplasmaratio_;
  }
  bloodplasmaratio_ = nullptr;
  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
  if (GetArena() == nullptr && logp_ != nullptr) {
    delete logp_;
  }
  logp_ = nullptr;
  if (GetArena() == nullptr && oralabsorptionrateconstant_ != nullptr) {
    delete oralabsorptionrateconstant_;
  }
  oralabsorptionrateconstant_ = nullptr;
  ::memset(&bindingprotein_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ionicstate_) -
      reinterpret_cast<char*>(&bindingprotein_)) + sizeof(ionicstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstancePhysicochemicalsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarData AcidDissociationConstant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aciddissociationconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstancePhysicochemicalsData.eBindingProtein BindingProtein = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bindingprotein(static_cast<::pulse::cdm::bind::SubstancePhysicochemicalsData_eBindingProtein>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BloodPlasmaRatio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodplasmaratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionunboundinplasma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstancePhysicochemicalsData.eIonicState IonicState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ionicstate(static_cast<::pulse::cdm::bind::SubstancePhysicochemicalsData_eIonicState>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData LogP = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_logp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData OralAbsorptionRateConstant = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_oralabsorptionrateconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstancePhysicochemicalsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData AcidDissociationConstant = 1;
  if (this->has_aciddissociationconstant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aciddissociationconstant(this), target, stream);
  }

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eBindingProtein BindingProtein = 2;
  if (this->bindingprotein() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bindingprotein(), target);
  }

  // .pulse.cdm.bind.ScalarData BloodPlasmaRatio = 3;
  if (this->has_bloodplasmaratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bloodplasmaratio(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  if (this->has_fractionunboundinplasma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fractionunboundinplasma(this), target, stream);
  }

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eIonicState IonicState = 5;
  if (this->ionicstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ionicstate(), target);
  }

  // .pulse.cdm.bind.ScalarData LogP = 6;
  if (this->has_logp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::logp(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData OralAbsorptionRateConstant = 7;
  if (this->has_oralabsorptionrateconstant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::oralabsorptionrateconstant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstancePhysicochemicalsData)
  return target;
}

size_t SubstancePhysicochemicalsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData AcidDissociationConstant = 1;
  if (this->has_aciddissociationconstant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aciddissociationconstant_);
  }

  // .pulse.cdm.bind.ScalarData BloodPlasmaRatio = 3;
  if (this->has_bloodplasmaratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodplasmaratio_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  if (this->has_fractionunboundinplasma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionunboundinplasma_);
  }

  // .pulse.cdm.bind.ScalarData LogP = 6;
  if (this->has_logp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logp_);
  }

  // .pulse.cdm.bind.ScalarData OralAbsorptionRateConstant = 7;
  if (this->has_oralabsorptionrateconstant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oralabsorptionrateconstant_);
  }

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eBindingProtein BindingProtein = 2;
  if (this->bindingprotein() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bindingprotein());
  }

  // .pulse.cdm.bind.SubstancePhysicochemicalsData.eIonicState IonicState = 5;
  if (this->ionicstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ionicstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstancePhysicochemicalsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstancePhysicochemicalsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstancePhysicochemicalsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstancePhysicochemicalsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstancePhysicochemicalsData)
    MergeFrom(*source);
  }
}

void SubstancePhysicochemicalsData::MergeFrom(const SubstancePhysicochemicalsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aciddissociationconstant()) {
    _internal_mutable_aciddissociationconstant()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_aciddissociationconstant());
  }
  if (from.has_bloodplasmaratio()) {
    _internal_mutable_bloodplasmaratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_bloodplasmaratio());
  }
  if (from.has_fractionunboundinplasma()) {
    _internal_mutable_fractionunboundinplasma()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionunboundinplasma());
  }
  if (from.has_logp()) {
    _internal_mutable_logp()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_logp());
  }
  if (from.has_oralabsorptionrateconstant()) {
    _internal_mutable_oralabsorptionrateconstant()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_oralabsorptionrateconstant());
  }
  if (from.bindingprotein() != 0) {
    _internal_set_bindingprotein(from._internal_bindingprotein());
  }
  if (from.ionicstate() != 0) {
    _internal_set_ionicstate(from._internal_ionicstate());
  }
}

void SubstancePhysicochemicalsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstancePhysicochemicalsData::CopyFrom(const SubstancePhysicochemicalsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstancePhysicochemicalsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstancePhysicochemicalsData::IsInitialized() const {
  return true;
}

void SubstancePhysicochemicalsData::InternalSwap(SubstancePhysicochemicalsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstancePhysicochemicalsData, ionicstate_)
      + sizeof(SubstancePhysicochemicalsData::ionicstate_)
      - PROTOBUF_FIELD_OFFSET(SubstancePhysicochemicalsData, aciddissociationconstant_)>(
          reinterpret_cast<char*>(&aciddissociationconstant_),
          reinterpret_cast<char*>(&other->aciddissociationconstant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstancePhysicochemicalsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceTissuePharmacokineticsData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& partitioncoefficient(const SubstanceTissuePharmacokineticsData* msg);
};

const ::pulse::cdm::bind::ScalarData&
SubstanceTissuePharmacokineticsData::_Internal::partitioncoefficient(const SubstanceTissuePharmacokineticsData* msg) {
  return *msg->partitioncoefficient_;
}
void SubstanceTissuePharmacokineticsData::clear_partitioncoefficient() {
  if (GetArena() == nullptr && partitioncoefficient_ != nullptr) {
    delete partitioncoefficient_;
  }
  partitioncoefficient_ = nullptr;
}
SubstanceTissuePharmacokineticsData::SubstanceTissuePharmacokineticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
}
SubstanceTissuePharmacokineticsData::SubstanceTissuePharmacokineticsData(const SubstanceTissuePharmacokineticsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_partitioncoefficient()) {
    partitioncoefficient_ = new ::pulse::cdm::bind::ScalarData(*from.partitioncoefficient_);
  } else {
    partitioncoefficient_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
}

void SubstanceTissuePharmacokineticsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partitioncoefficient_ = nullptr;
}

SubstanceTissuePharmacokineticsData::~SubstanceTissuePharmacokineticsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceTissuePharmacokineticsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete partitioncoefficient_;
}

void SubstanceTissuePharmacokineticsData::ArenaDtor(void* object) {
  SubstanceTissuePharmacokineticsData* _this = reinterpret_cast< SubstanceTissuePharmacokineticsData* >(object);
  (void)_this;
}
void SubstanceTissuePharmacokineticsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceTissuePharmacokineticsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceTissuePharmacokineticsData& SubstanceTissuePharmacokineticsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceTissuePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceTissuePharmacokineticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && partitioncoefficient_ != nullptr) {
    delete partitioncoefficient_;
  }
  partitioncoefficient_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceTissuePharmacokineticsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData PartitionCoefficient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioncoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceTissuePharmacokineticsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceTissuePharmacokineticsData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.ScalarData PartitionCoefficient = 2;
  if (this->has_partitioncoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partitioncoefficient(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  return target;
}

size_t SubstanceTissuePharmacokineticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.ScalarData PartitionCoefficient = 2;
  if (this->has_partitioncoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partitioncoefficient_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceTissuePharmacokineticsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceTissuePharmacokineticsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceTissuePharmacokineticsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
    MergeFrom(*source);
  }
}

void SubstanceTissuePharmacokineticsData::MergeFrom(const SubstanceTissuePharmacokineticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_partitioncoefficient()) {
    _internal_mutable_partitioncoefficient()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_partitioncoefficient());
  }
}

void SubstanceTissuePharmacokineticsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceTissuePharmacokineticsData::CopyFrom(const SubstanceTissuePharmacokineticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceTissuePharmacokineticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceTissuePharmacokineticsData::IsInitialized() const {
  return true;
}

void SubstanceTissuePharmacokineticsData::InternalSwap(SubstanceTissuePharmacokineticsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(partitioncoefficient_, other->partitioncoefficient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceTissuePharmacokineticsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstancePharmacokineticsData::_Internal {
 public:
  static const ::pulse::cdm::bind::SubstancePhysicochemicalsData& physicochemicals(const SubstancePharmacokineticsData* msg);
};

const ::pulse::cdm::bind::SubstancePhysicochemicalsData&
SubstancePharmacokineticsData::_Internal::physicochemicals(const SubstancePharmacokineticsData* msg) {
  return *msg->physicochemicals_;
}
SubstancePharmacokineticsData::SubstancePharmacokineticsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tissuekinetics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstancePharmacokineticsData)
}
SubstancePharmacokineticsData::SubstancePharmacokineticsData(const SubstancePharmacokineticsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tissuekinetics_(from.tissuekinetics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_physicochemicals()) {
    physicochemicals_ = new ::pulse::cdm::bind::SubstancePhysicochemicalsData(*from.physicochemicals_);
  } else {
    physicochemicals_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstancePharmacokineticsData)
}

void SubstancePharmacokineticsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  physicochemicals_ = nullptr;
}

SubstancePharmacokineticsData::~SubstancePharmacokineticsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstancePharmacokineticsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstancePharmacokineticsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete physicochemicals_;
}

void SubstancePharmacokineticsData::ArenaDtor(void* object) {
  SubstancePharmacokineticsData* _this = reinterpret_cast< SubstancePharmacokineticsData* >(object);
  (void)_this;
}
void SubstancePharmacokineticsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstancePharmacokineticsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstancePharmacokineticsData& SubstancePharmacokineticsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstancePharmacokineticsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstancePharmacokineticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tissuekinetics_.Clear();
  if (GetArena() == nullptr && physicochemicals_ != nullptr) {
    delete physicochemicals_;
  }
  physicochemicals_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstancePharmacokineticsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.SubstancePhysicochemicalsData Physicochemicals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_physicochemicals(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceTissuePharmacokineticsData TissueKinetics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tissuekinetics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstancePharmacokineticsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstancePhysicochemicalsData Physicochemicals = 1;
  if (this->has_physicochemicals()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::physicochemicals(this), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceTissuePharmacokineticsData TissueKinetics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tissuekinetics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tissuekinetics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstancePharmacokineticsData)
  return target;
}

size_t SubstancePharmacokineticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.SubstanceTissuePharmacokineticsData TissueKinetics = 2;
  total_size += 1UL * this->_internal_tissuekinetics_size();
  for (const auto& msg : this->tissuekinetics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.SubstancePhysicochemicalsData Physicochemicals = 1;
  if (this->has_physicochemicals()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physicochemicals_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstancePharmacokineticsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstancePharmacokineticsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstancePharmacokineticsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstancePharmacokineticsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstancePharmacokineticsData)
    MergeFrom(*source);
  }
}

void SubstancePharmacokineticsData::MergeFrom(const SubstancePharmacokineticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tissuekinetics_.MergeFrom(from.tissuekinetics_);
  if (from.has_physicochemicals()) {
    _internal_mutable_physicochemicals()->::pulse::cdm::bind::SubstancePhysicochemicalsData::MergeFrom(from._internal_physicochemicals());
  }
}

void SubstancePharmacokineticsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstancePharmacokineticsData::CopyFrom(const SubstancePharmacokineticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstancePharmacokineticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstancePharmacokineticsData::IsInitialized() const {
  return true;
}

void SubstancePharmacokineticsData::InternalSwap(SubstancePharmacokineticsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tissuekinetics_.InternalSwap(&other->tissuekinetics_);
  swap(physicochemicals_, other->physicochemicals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstancePharmacokineticsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstancePharmacodynamicsData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchodilation(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& diastolicpressuremodifier(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& ec50(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarData& emaxshapeparameter(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& heartratemodifier(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& neuromuscularblock(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::PupillaryResponseData& pupillaryresponse(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& respirationratemodifier(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& sedation(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& systolicpressuremodifier(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& tidalvolumemodifier(const SubstancePharmacodynamicsData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& tubularpermeabilitymodifier(const SubstancePharmacodynamicsData* msg);
};

const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::bronchodilation(const SubstancePharmacodynamicsData* msg) {
  return *msg->bronchodilation_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::diastolicpressuremodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->diastolicpressuremodifier_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstancePharmacodynamicsData::_Internal::ec50(const SubstancePharmacodynamicsData* msg) {
  return *msg->ec50_;
}
const ::pulse::cdm::bind::ScalarData&
SubstancePharmacodynamicsData::_Internal::emaxshapeparameter(const SubstancePharmacodynamicsData* msg) {
  return *msg->emaxshapeparameter_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::heartratemodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->heartratemodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::neuromuscularblock(const SubstancePharmacodynamicsData* msg) {
  return *msg->neuromuscularblock_;
}
const ::pulse::cdm::bind::PupillaryResponseData&
SubstancePharmacodynamicsData::_Internal::pupillaryresponse(const SubstancePharmacodynamicsData* msg) {
  return *msg->pupillaryresponse_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::respirationratemodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->respirationratemodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::sedation(const SubstancePharmacodynamicsData* msg) {
  return *msg->sedation_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::systolicpressuremodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->systolicpressuremodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::tidalvolumemodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->tidalvolumemodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
SubstancePharmacodynamicsData::_Internal::tubularpermeabilitymodifier(const SubstancePharmacodynamicsData* msg) {
  return *msg->tubularpermeabilitymodifier_;
}
void SubstancePharmacodynamicsData::clear_bronchodilation() {
  if (GetArena() == nullptr && bronchodilation_ != nullptr) {
    delete bronchodilation_;
  }
  bronchodilation_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_diastolicpressuremodifier() {
  if (GetArena() == nullptr && diastolicpressuremodifier_ != nullptr) {
    delete diastolicpressuremodifier_;
  }
  diastolicpressuremodifier_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_ec50() {
  if (GetArena() == nullptr && ec50_ != nullptr) {
    delete ec50_;
  }
  ec50_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_emaxshapeparameter() {
  if (GetArena() == nullptr && emaxshapeparameter_ != nullptr) {
    delete emaxshapeparameter_;
  }
  emaxshapeparameter_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_heartratemodifier() {
  if (GetArena() == nullptr && heartratemodifier_ != nullptr) {
    delete heartratemodifier_;
  }
  heartratemodifier_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_neuromuscularblock() {
  if (GetArena() == nullptr && neuromuscularblock_ != nullptr) {
    delete neuromuscularblock_;
  }
  neuromuscularblock_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_pupillaryresponse() {
  if (GetArena() == nullptr && pupillaryresponse_ != nullptr) {
    delete pupillaryresponse_;
  }
  pupillaryresponse_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_respirationratemodifier() {
  if (GetArena() == nullptr && respirationratemodifier_ != nullptr) {
    delete respirationratemodifier_;
  }
  respirationratemodifier_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_sedation() {
  if (GetArena() == nullptr && sedation_ != nullptr) {
    delete sedation_;
  }
  sedation_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_systolicpressuremodifier() {
  if (GetArena() == nullptr && systolicpressuremodifier_ != nullptr) {
    delete systolicpressuremodifier_;
  }
  systolicpressuremodifier_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_tidalvolumemodifier() {
  if (GetArena() == nullptr && tidalvolumemodifier_ != nullptr) {
    delete tidalvolumemodifier_;
  }
  tidalvolumemodifier_ = nullptr;
}
void SubstancePharmacodynamicsData::clear_tubularpermeabilitymodifier() {
  if (GetArena() == nullptr && tubularpermeabilitymodifier_ != nullptr) {
    delete tubularpermeabilitymodifier_;
  }
  tubularpermeabilitymodifier_ = nullptr;
}
SubstancePharmacodynamicsData::SubstancePharmacodynamicsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstancePharmacodynamicsData)
}
SubstancePharmacodynamicsData::SubstancePharmacodynamicsData(const SubstancePharmacodynamicsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bronchodilation()) {
    bronchodilation_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.bronchodilation_);
  } else {
    bronchodilation_ = nullptr;
  }
  if (from._internal_has_diastolicpressuremodifier()) {
    diastolicpressuremodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.diastolicpressuremodifier_);
  } else {
    diastolicpressuremodifier_ = nullptr;
  }
  if (from._internal_has_ec50()) {
    ec50_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.ec50_);
  } else {
    ec50_ = nullptr;
  }
  if (from._internal_has_emaxshapeparameter()) {
    emaxshapeparameter_ = new ::pulse::cdm::bind::ScalarData(*from.emaxshapeparameter_);
  } else {
    emaxshapeparameter_ = nullptr;
  }
  if (from._internal_has_heartratemodifier()) {
    heartratemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.heartratemodifier_);
  } else {
    heartratemodifier_ = nullptr;
  }
  if (from._internal_has_neuromuscularblock()) {
    neuromuscularblock_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.neuromuscularblock_);
  } else {
    neuromuscularblock_ = nullptr;
  }
  if (from._internal_has_pupillaryresponse()) {
    pupillaryresponse_ = new ::pulse::cdm::bind::PupillaryResponseData(*from.pupillaryresponse_);
  } else {
    pupillaryresponse_ = nullptr;
  }
  if (from._internal_has_respirationratemodifier()) {
    respirationratemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.respirationratemodifier_);
  } else {
    respirationratemodifier_ = nullptr;
  }
  if (from._internal_has_sedation()) {
    sedation_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.sedation_);
  } else {
    sedation_ = nullptr;
  }
  if (from._internal_has_systolicpressuremodifier()) {
    systolicpressuremodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.systolicpressuremodifier_);
  } else {
    systolicpressuremodifier_ = nullptr;
  }
  if (from._internal_has_tidalvolumemodifier()) {
    tidalvolumemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.tidalvolumemodifier_);
  } else {
    tidalvolumemodifier_ = nullptr;
  }
  if (from._internal_has_tubularpermeabilitymodifier()) {
    tubularpermeabilitymodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.tubularpermeabilitymodifier_);
  } else {
    tubularpermeabilitymodifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstancePharmacodynamicsData)
}

void SubstancePharmacodynamicsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bronchodilation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tubularpermeabilitymodifier_) -
      reinterpret_cast<char*>(&bronchodilation_)) + sizeof(tubularpermeabilitymodifier_));
}

SubstancePharmacodynamicsData::~SubstancePharmacodynamicsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstancePharmacodynamicsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstancePharmacodynamicsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bronchodilation_;
  if (this != internal_default_instance()) delete diastolicpressuremodifier_;
  if (this != internal_default_instance()) delete ec50_;
  if (this != internal_default_instance()) delete emaxshapeparameter_;
  if (this != internal_default_instance()) delete heartratemodifier_;
  if (this != internal_default_instance()) delete neuromuscularblock_;
  if (this != internal_default_instance()) delete pupillaryresponse_;
  if (this != internal_default_instance()) delete respirationratemodifier_;
  if (this != internal_default_instance()) delete sedation_;
  if (this != internal_default_instance()) delete systolicpressuremodifier_;
  if (this != internal_default_instance()) delete tidalvolumemodifier_;
  if (this != internal_default_instance()) delete tubularpermeabilitymodifier_;
}

void SubstancePharmacodynamicsData::ArenaDtor(void* object) {
  SubstancePharmacodynamicsData* _this = reinterpret_cast< SubstancePharmacodynamicsData* >(object);
  (void)_this;
}
void SubstancePharmacodynamicsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstancePharmacodynamicsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstancePharmacodynamicsData& SubstancePharmacodynamicsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstancePharmacodynamicsData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstancePharmacodynamicsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bronchodilation_ != nullptr) {
    delete bronchodilation_;
  }
  bronchodilation_ = nullptr;
  if (GetArena() == nullptr && diastolicpressuremodifier_ != nullptr) {
    delete diastolicpressuremodifier_;
  }
  diastolicpressuremodifier_ = nullptr;
  if (GetArena() == nullptr && ec50_ != nullptr) {
    delete ec50_;
  }
  ec50_ = nullptr;
  if (GetArena() == nullptr && emaxshapeparameter_ != nullptr) {
    delete emaxshapeparameter_;
  }
  emaxshapeparameter_ = nullptr;
  if (GetArena() == nullptr && heartratemodifier_ != nullptr) {
    delete heartratemodifier_;
  }
  heartratemodifier_ = nullptr;
  if (GetArena() == nullptr && neuromuscularblock_ != nullptr) {
    delete neuromuscularblock_;
  }
  neuromuscularblock_ = nullptr;
  if (GetArena() == nullptr && pupillaryresponse_ != nullptr) {
    delete pupillaryresponse_;
  }
  pupillaryresponse_ = nullptr;
  if (GetArena() == nullptr && respirationratemodifier_ != nullptr) {
    delete respirationratemodifier_;
  }
  respirationratemodifier_ = nullptr;
  if (GetArena() == nullptr && sedation_ != nullptr) {
    delete sedation_;
  }
  sedation_ = nullptr;
  if (GetArena() == nullptr && systolicpressuremodifier_ != nullptr) {
    delete systolicpressuremodifier_;
  }
  systolicpressuremodifier_ = nullptr;
  if (GetArena() == nullptr && tidalvolumemodifier_ != nullptr) {
    delete tidalvolumemodifier_;
  }
  tidalvolumemodifier_ = nullptr;
  if (GetArena() == nullptr && tubularpermeabilitymodifier_ != nullptr) {
    delete tubularpermeabilitymodifier_;
  }
  tubularpermeabilitymodifier_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstancePharmacodynamicsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarNegative1To1Data Bronchodilation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchodilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data DiastolicPressureModifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_diastolicpressuremodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData EC50 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ec50(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData EMaxShapeParameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emaxshapeparameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data HeartRateModifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartratemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data NeuromuscularBlock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_neuromuscularblock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pupillaryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data RespirationRateModifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationratemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data Sedation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sedation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data SystolicPressureModifier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_systolicpressuremodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data TidalVolumeModifier = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tidalvolumemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityModifier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tubularpermeabilitymodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstancePharmacodynamicsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data Bronchodilation = 1;
  if (this->has_bronchodilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bronchodilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data DiastolicPressureModifier = 2;
  if (this->has_diastolicpressuremodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::diastolicpressuremodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData EC50 = 3;
  if (this->has_ec50()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ec50(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData EMaxShapeParameter = 4;
  if (this->has_emaxshapeparameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::emaxshapeparameter(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data HeartRateModifier = 5;
  if (this->has_heartratemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heartratemodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data NeuromuscularBlock = 6;
  if (this->has_neuromuscularblock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::neuromuscularblock(this), target, stream);
  }

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 7;
  if (this->has_pupillaryresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pupillaryresponse(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data RespirationRateModifier = 8;
  if (this->has_respirationratemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::respirationratemodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data Sedation = 9;
  if (this->has_sedation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sedation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data SystolicPressureModifier = 10;
  if (this->has_systolicpressuremodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::systolicpressuremodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TidalVolumeModifier = 11;
  if (this->has_tidalvolumemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::tidalvolumemodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityModifier = 12;
  if (this->has_tubularpermeabilitymodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tubularpermeabilitymodifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstancePharmacodynamicsData)
  return target;
}

size_t SubstancePharmacodynamicsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data Bronchodilation = 1;
  if (this->has_bronchodilation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bronchodilation_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data DiastolicPressureModifier = 2;
  if (this->has_diastolicpressuremodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diastolicpressuremodifier_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData EC50 = 3;
  if (this->has_ec50()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ec50_);
  }

  // .pulse.cdm.bind.ScalarData EMaxShapeParameter = 4;
  if (this->has_emaxshapeparameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emaxshapeparameter_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data HeartRateModifier = 5;
  if (this->has_heartratemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartratemodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data NeuromuscularBlock = 6;
  if (this->has_neuromuscularblock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neuromuscularblock_);
  }

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 7;
  if (this->has_pupillaryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pupillaryresponse_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data RespirationRateModifier = 8;
  if (this->has_respirationratemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationratemodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data Sedation = 9;
  if (this->has_sedation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sedation_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data SystolicPressureModifier = 10;
  if (this->has_systolicpressuremodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systolicpressuremodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TidalVolumeModifier = 11;
  if (this->has_tidalvolumemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tidalvolumemodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityModifier = 12;
  if (this->has_tubularpermeabilitymodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tubularpermeabilitymodifier_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstancePharmacodynamicsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstancePharmacodynamicsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstancePharmacodynamicsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstancePharmacodynamicsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstancePharmacodynamicsData)
    MergeFrom(*source);
  }
}

void SubstancePharmacodynamicsData::MergeFrom(const SubstancePharmacodynamicsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bronchodilation()) {
    _internal_mutable_bronchodilation()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_bronchodilation());
  }
  if (from.has_diastolicpressuremodifier()) {
    _internal_mutable_diastolicpressuremodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_diastolicpressuremodifier());
  }
  if (from.has_ec50()) {
    _internal_mutable_ec50()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_ec50());
  }
  if (from.has_emaxshapeparameter()) {
    _internal_mutable_emaxshapeparameter()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_emaxshapeparameter());
  }
  if (from.has_heartratemodifier()) {
    _internal_mutable_heartratemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_heartratemodifier());
  }
  if (from.has_neuromuscularblock()) {
    _internal_mutable_neuromuscularblock()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_neuromuscularblock());
  }
  if (from.has_pupillaryresponse()) {
    _internal_mutable_pupillaryresponse()->::pulse::cdm::bind::PupillaryResponseData::MergeFrom(from._internal_pupillaryresponse());
  }
  if (from.has_respirationratemodifier()) {
    _internal_mutable_respirationratemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_respirationratemodifier());
  }
  if (from.has_sedation()) {
    _internal_mutable_sedation()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_sedation());
  }
  if (from.has_systolicpressuremodifier()) {
    _internal_mutable_systolicpressuremodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_systolicpressuremodifier());
  }
  if (from.has_tidalvolumemodifier()) {
    _internal_mutable_tidalvolumemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_tidalvolumemodifier());
  }
  if (from.has_tubularpermeabilitymodifier()) {
    _internal_mutable_tubularpermeabilitymodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_tubularpermeabilitymodifier());
  }
}

void SubstancePharmacodynamicsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstancePharmacodynamicsData::CopyFrom(const SubstancePharmacodynamicsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstancePharmacodynamicsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstancePharmacodynamicsData::IsInitialized() const {
  return true;
}

void SubstancePharmacodynamicsData::InternalSwap(SubstancePharmacodynamicsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstancePharmacodynamicsData, tubularpermeabilitymodifier_)
      + sizeof(SubstancePharmacodynamicsData::tubularpermeabilitymodifier_)
      - PROTOBUF_FIELD_OFFSET(SubstancePharmacodynamicsData, bronchodilation_)>(
          reinterpret_cast<char*>(&bronchodilation_),
          reinterpret_cast<char*>(&other->bronchodilation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstancePharmacodynamicsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceSystemicClearanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionexcretedinfeces(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionexcretedinurine(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionmetabolizedingut(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& intrinsicclearance(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& renalclearance(const SubstanceSystemicClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& systemicclearance(const SubstanceSystemicClearanceData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceSystemicClearanceData::_Internal::fractionexcretedinfeces(const SubstanceSystemicClearanceData* msg) {
  return *msg->fractionexcretedinfeces_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceSystemicClearanceData::_Internal::fractionexcretedinurine(const SubstanceSystemicClearanceData* msg) {
  return *msg->fractionexcretedinurine_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceSystemicClearanceData::_Internal::fractionmetabolizedingut(const SubstanceSystemicClearanceData* msg) {
  return *msg->fractionmetabolizedingut_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceSystemicClearanceData::_Internal::fractionunboundinplasma(const SubstanceSystemicClearanceData* msg) {
  return *msg->fractionunboundinplasma_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&
SubstanceSystemicClearanceData::_Internal::intrinsicclearance(const SubstanceSystemicClearanceData* msg) {
  return *msg->intrinsicclearance_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&
SubstanceSystemicClearanceData::_Internal::renalclearance(const SubstanceSystemicClearanceData* msg) {
  return *msg->renalclearance_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&
SubstanceSystemicClearanceData::_Internal::systemicclearance(const SubstanceSystemicClearanceData* msg) {
  return *msg->systemicclearance_;
}
void SubstanceSystemicClearanceData::clear_fractionexcretedinfeces() {
  if (GetArena() == nullptr && fractionexcretedinfeces_ != nullptr) {
    delete fractionexcretedinfeces_;
  }
  fractionexcretedinfeces_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_fractionexcretedinurine() {
  if (GetArena() == nullptr && fractionexcretedinurine_ != nullptr) {
    delete fractionexcretedinurine_;
  }
  fractionexcretedinurine_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_fractionmetabolizedingut() {
  if (GetArena() == nullptr && fractionmetabolizedingut_ != nullptr) {
    delete fractionmetabolizedingut_;
  }
  fractionmetabolizedingut_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_fractionunboundinplasma() {
  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_intrinsicclearance() {
  if (GetArena() == nullptr && intrinsicclearance_ != nullptr) {
    delete intrinsicclearance_;
  }
  intrinsicclearance_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_renalclearance() {
  if (GetArena() == nullptr && renalclearance_ != nullptr) {
    delete renalclearance_;
  }
  renalclearance_ = nullptr;
}
void SubstanceSystemicClearanceData::clear_systemicclearance() {
  if (GetArena() == nullptr && systemicclearance_ != nullptr) {
    delete systemicclearance_;
  }
  systemicclearance_ = nullptr;
}
SubstanceSystemicClearanceData::SubstanceSystemicClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceSystemicClearanceData)
}
SubstanceSystemicClearanceData::SubstanceSystemicClearanceData(const SubstanceSystemicClearanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fractionexcretedinfeces()) {
    fractionexcretedinfeces_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionexcretedinfeces_);
  } else {
    fractionexcretedinfeces_ = nullptr;
  }
  if (from._internal_has_fractionexcretedinurine()) {
    fractionexcretedinurine_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionexcretedinurine_);
  } else {
    fractionexcretedinurine_ = nullptr;
  }
  if (from._internal_has_fractionmetabolizedingut()) {
    fractionmetabolizedingut_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionmetabolizedingut_);
  } else {
    fractionmetabolizedingut_ = nullptr;
  }
  if (from._internal_has_fractionunboundinplasma()) {
    fractionunboundinplasma_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionunboundinplasma_);
  } else {
    fractionunboundinplasma_ = nullptr;
  }
  if (from._internal_has_intrinsicclearance()) {
    intrinsicclearance_ = new ::pulse::cdm::bind::ScalarVolumePerTimeMassData(*from.intrinsicclearance_);
  } else {
    intrinsicclearance_ = nullptr;
  }
  if (from._internal_has_renalclearance()) {
    renalclearance_ = new ::pulse::cdm::bind::ScalarVolumePerTimeMassData(*from.renalclearance_);
  } else {
    renalclearance_ = nullptr;
  }
  if (from._internal_has_systemicclearance()) {
    systemicclearance_ = new ::pulse::cdm::bind::ScalarVolumePerTimeMassData(*from.systemicclearance_);
  } else {
    systemicclearance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceSystemicClearanceData)
}

void SubstanceSystemicClearanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fractionexcretedinfeces_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&systemicclearance_) -
      reinterpret_cast<char*>(&fractionexcretedinfeces_)) + sizeof(systemicclearance_));
}

SubstanceSystemicClearanceData::~SubstanceSystemicClearanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceSystemicClearanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceSystemicClearanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fractionexcretedinfeces_;
  if (this != internal_default_instance()) delete fractionexcretedinurine_;
  if (this != internal_default_instance()) delete fractionmetabolizedingut_;
  if (this != internal_default_instance()) delete fractionunboundinplasma_;
  if (this != internal_default_instance()) delete intrinsicclearance_;
  if (this != internal_default_instance()) delete renalclearance_;
  if (this != internal_default_instance()) delete systemicclearance_;
}

void SubstanceSystemicClearanceData::ArenaDtor(void* object) {
  SubstanceSystemicClearanceData* _this = reinterpret_cast< SubstanceSystemicClearanceData* >(object);
  (void)_this;
}
void SubstanceSystemicClearanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceSystemicClearanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceSystemicClearanceData& SubstanceSystemicClearanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceSystemicClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceSystemicClearanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fractionexcretedinfeces_ != nullptr) {
    delete fractionexcretedinfeces_;
  }
  fractionexcretedinfeces_ = nullptr;
  if (GetArena() == nullptr && fractionexcretedinurine_ != nullptr) {
    delete fractionexcretedinurine_;
  }
  fractionexcretedinurine_ = nullptr;
  if (GetArena() == nullptr && fractionmetabolizedingut_ != nullptr) {
    delete fractionmetabolizedingut_;
  }
  fractionmetabolizedingut_ = nullptr;
  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
  if (GetArena() == nullptr && intrinsicclearance_ != nullptr) {
    delete intrinsicclearance_;
  }
  intrinsicclearance_ = nullptr;
  if (GetArena() == nullptr && renalclearance_ != nullptr) {
    delete renalclearance_;
  }
  renalclearance_ = nullptr;
  if (GetArena() == nullptr && systemicclearance_ != nullptr) {
    delete systemicclearance_;
  }
  systemicclearance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceSystemicClearanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInFeces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionexcretedinfeces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInUrine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionexcretedinurine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionMetabolizedInGut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionmetabolizedingut(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionunboundinplasma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeMassData IntrinsicClearance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsicclearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeMassData RenalClearance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalclearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeMassData SystemicClearance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemicclearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceSystemicClearanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInFeces = 1;
  if (this->has_fractionexcretedinfeces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fractionexcretedinfeces(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInUrine = 2;
  if (this->has_fractionexcretedinurine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fractionexcretedinurine(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionMetabolizedInGut = 3;
  if (this->has_fractionmetabolizedingut()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fractionmetabolizedingut(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  if (this->has_fractionunboundinplasma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fractionunboundinplasma(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData IntrinsicClearance = 5;
  if (this->has_intrinsicclearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intrinsicclearance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData RenalClearance = 6;
  if (this->has_renalclearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::renalclearance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData SystemicClearance = 7;
  if (this->has_systemicclearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::systemicclearance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceSystemicClearanceData)
  return target;
}

size_t SubstanceSystemicClearanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInFeces = 1;
  if (this->has_fractionexcretedinfeces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionexcretedinfeces_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionExcretedInUrine = 2;
  if (this->has_fractionexcretedinurine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionexcretedinurine_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionMetabolizedInGut = 3;
  if (this->has_fractionmetabolizedingut()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionmetabolizedingut_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 4;
  if (this->has_fractionunboundinplasma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionunboundinplasma_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData IntrinsicClearance = 5;
  if (this->has_intrinsicclearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsicclearance_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData RenalClearance = 6;
  if (this->has_renalclearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalclearance_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData SystemicClearance = 7;
  if (this->has_systemicclearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemicclearance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceSystemicClearanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceSystemicClearanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceSystemicClearanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceSystemicClearanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceSystemicClearanceData)
    MergeFrom(*source);
  }
}

void SubstanceSystemicClearanceData::MergeFrom(const SubstanceSystemicClearanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fractionexcretedinfeces()) {
    _internal_mutable_fractionexcretedinfeces()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionexcretedinfeces());
  }
  if (from.has_fractionexcretedinurine()) {
    _internal_mutable_fractionexcretedinurine()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionexcretedinurine());
  }
  if (from.has_fractionmetabolizedingut()) {
    _internal_mutable_fractionmetabolizedingut()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionmetabolizedingut());
  }
  if (from.has_fractionunboundinplasma()) {
    _internal_mutable_fractionunboundinplasma()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionunboundinplasma());
  }
  if (from.has_intrinsicclearance()) {
    _internal_mutable_intrinsicclearance()->::pulse::cdm::bind::ScalarVolumePerTimeMassData::MergeFrom(from._internal_intrinsicclearance());
  }
  if (from.has_renalclearance()) {
    _internal_mutable_renalclearance()->::pulse::cdm::bind::ScalarVolumePerTimeMassData::MergeFrom(from._internal_renalclearance());
  }
  if (from.has_systemicclearance()) {
    _internal_mutable_systemicclearance()->::pulse::cdm::bind::ScalarVolumePerTimeMassData::MergeFrom(from._internal_systemicclearance());
  }
}

void SubstanceSystemicClearanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceSystemicClearanceData::CopyFrom(const SubstanceSystemicClearanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceSystemicClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceSystemicClearanceData::IsInitialized() const {
  return true;
}

void SubstanceSystemicClearanceData::InternalSwap(SubstanceSystemicClearanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceSystemicClearanceData, systemicclearance_)
      + sizeof(SubstanceSystemicClearanceData::systemicclearance_)
      - PROTOBUF_FIELD_OFFSET(SubstanceSystemicClearanceData, fractionexcretedinfeces_)>(
          reinterpret_cast<char*>(&fractionexcretedinfeces_),
          reinterpret_cast<char*>(&other->fractionexcretedinfeces_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceSystemicClearanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceRenalRegulationData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionunboundinplasma(const SubstanceRenalRegulationData* msg);
  static const ::pulse::cdm::bind::ScalarData& reabsorptionratio(const SubstanceRenalRegulationData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& transportmaximum(const SubstanceRenalRegulationData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceRenalRegulationData::_Internal::fractionunboundinplasma(const SubstanceRenalRegulationData* msg) {
  return *msg->fractionunboundinplasma_;
}
const ::pulse::cdm::bind::ScalarData&
SubstanceRenalRegulationData::_Internal::reabsorptionratio(const SubstanceRenalRegulationData* msg) {
  return *msg->reabsorptionratio_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
SubstanceRenalRegulationData::_Internal::transportmaximum(const SubstanceRenalRegulationData* msg) {
  return *msg->transportmaximum_;
}
void SubstanceRenalRegulationData::clear_fractionunboundinplasma() {
  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
}
void SubstanceRenalRegulationData::clear_reabsorptionratio() {
  if (GetArena() == nullptr && reabsorptionratio_ != nullptr) {
    delete reabsorptionratio_;
  }
  reabsorptionratio_ = nullptr;
}
void SubstanceRenalRegulationData::clear_transportmaximum() {
  if (GetArena() == nullptr && transportmaximum_ != nullptr) {
    delete transportmaximum_;
  }
  transportmaximum_ = nullptr;
}
SubstanceRenalRegulationData::SubstanceRenalRegulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceRenalRegulationData)
}
SubstanceRenalRegulationData::SubstanceRenalRegulationData(const SubstanceRenalRegulationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fractionunboundinplasma()) {
    fractionunboundinplasma_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionunboundinplasma_);
  } else {
    fractionunboundinplasma_ = nullptr;
  }
  if (from._internal_has_reabsorptionratio()) {
    reabsorptionratio_ = new ::pulse::cdm::bind::ScalarData(*from.reabsorptionratio_);
  } else {
    reabsorptionratio_ = nullptr;
  }
  if (from._internal_has_transportmaximum()) {
    transportmaximum_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.transportmaximum_);
  } else {
    transportmaximum_ = nullptr;
  }
  chargeinblood_ = from.chargeinblood_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceRenalRegulationData)
}

void SubstanceRenalRegulationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fractionunboundinplasma_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chargeinblood_) -
      reinterpret_cast<char*>(&fractionunboundinplasma_)) + sizeof(chargeinblood_));
}

SubstanceRenalRegulationData::~SubstanceRenalRegulationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceRenalRegulationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceRenalRegulationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fractionunboundinplasma_;
  if (this != internal_default_instance()) delete reabsorptionratio_;
  if (this != internal_default_instance()) delete transportmaximum_;
}

void SubstanceRenalRegulationData::ArenaDtor(void* object) {
  SubstanceRenalRegulationData* _this = reinterpret_cast< SubstanceRenalRegulationData* >(object);
  (void)_this;
}
void SubstanceRenalRegulationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceRenalRegulationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceRenalRegulationData& SubstanceRenalRegulationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceRenalRegulationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceRenalRegulationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fractionunboundinplasma_ != nullptr) {
    delete fractionunboundinplasma_;
  }
  fractionunboundinplasma_ = nullptr;
  if (GetArena() == nullptr && reabsorptionratio_ != nullptr) {
    delete reabsorptionratio_;
  }
  reabsorptionratio_ = nullptr;
  if (GetArena() == nullptr && transportmaximum_ != nullptr) {
    delete transportmaximum_;
  }
  transportmaximum_ = nullptr;
  chargeinblood_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceRenalRegulationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eCharge ChargeInBlood = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chargeinblood(static_cast<::pulse::cdm::bind::eCharge>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionunboundinplasma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData ReabsorptionRatio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reabsorptionratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData TransportMaximum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transportmaximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceRenalRegulationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eCharge ChargeInBlood = 1;
  if (this->chargeinblood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chargeinblood(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 2;
  if (this->has_fractionunboundinplasma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fractionunboundinplasma(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData ReabsorptionRatio = 3;
  if (this->has_reabsorptionratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reabsorptionratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData TransportMaximum = 4;
  if (this->has_transportmaximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transportmaximum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceRenalRegulationData)
  return target;
}

size_t SubstanceRenalRegulationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data FractionUnboundInPlasma = 2;
  if (this->has_fractionunboundinplasma()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionunboundinplasma_);
  }

  // .pulse.cdm.bind.ScalarData ReabsorptionRatio = 3;
  if (this->has_reabsorptionratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reabsorptionratio_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData TransportMaximum = 4;
  if (this->has_transportmaximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transportmaximum_);
  }

  // .pulse.cdm.bind.eCharge ChargeInBlood = 1;
  if (this->chargeinblood() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chargeinblood());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceRenalRegulationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceRenalRegulationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceRenalRegulationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceRenalRegulationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceRenalRegulationData)
    MergeFrom(*source);
  }
}

void SubstanceRenalRegulationData::MergeFrom(const SubstanceRenalRegulationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fractionunboundinplasma()) {
    _internal_mutable_fractionunboundinplasma()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionunboundinplasma());
  }
  if (from.has_reabsorptionratio()) {
    _internal_mutable_reabsorptionratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_reabsorptionratio());
  }
  if (from.has_transportmaximum()) {
    _internal_mutable_transportmaximum()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_transportmaximum());
  }
  if (from.chargeinblood() != 0) {
    _internal_set_chargeinblood(from._internal_chargeinblood());
  }
}

void SubstanceRenalRegulationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceRenalRegulationData::CopyFrom(const SubstanceRenalRegulationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceRenalRegulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceRenalRegulationData::IsInitialized() const {
  return true;
}

void SubstanceRenalRegulationData::InternalSwap(SubstanceRenalRegulationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceRenalRegulationData, chargeinblood_)
      + sizeof(SubstanceRenalRegulationData::chargeinblood_)
      - PROTOBUF_FIELD_OFFSET(SubstanceRenalRegulationData, fractionunboundinplasma_)>(
          reinterpret_cast<char*>(&fractionunboundinplasma_),
          reinterpret_cast<char*>(&other->fractionunboundinplasma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceRenalRegulationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceRenalClearanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarVolumePerTimeMassData& clearance(const SubstanceRenalClearanceData* msg);
  static const ::pulse::cdm::bind::SubstanceRenalRegulationData& regulation(const SubstanceRenalClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& filtrationrate(const SubstanceRenalClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& reabsorptionrate(const SubstanceRenalClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& excretionrate(const SubstanceRenalClearanceData* msg);
  static const ::pulse::cdm::bind::ScalarData& glomerularfilterability(const SubstanceRenalClearanceData* msg);
};

const ::pulse::cdm::bind::ScalarVolumePerTimeMassData&
SubstanceRenalClearanceData::_Internal::clearance(const SubstanceRenalClearanceData* msg) {
  return *msg->clearance_;
}
const ::pulse::cdm::bind::SubstanceRenalRegulationData&
SubstanceRenalClearanceData::_Internal::regulation(const SubstanceRenalClearanceData* msg) {
  return *msg->regulation_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
SubstanceRenalClearanceData::_Internal::filtrationrate(const SubstanceRenalClearanceData* msg) {
  return *msg->filtrationrate_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
SubstanceRenalClearanceData::_Internal::reabsorptionrate(const SubstanceRenalClearanceData* msg) {
  return *msg->reabsorptionrate_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
SubstanceRenalClearanceData::_Internal::excretionrate(const SubstanceRenalClearanceData* msg) {
  return *msg->excretionrate_;
}
const ::pulse::cdm::bind::ScalarData&
SubstanceRenalClearanceData::_Internal::glomerularfilterability(const SubstanceRenalClearanceData* msg) {
  return *msg->glomerularfilterability_;
}
void SubstanceRenalClearanceData::clear_clearance() {
  if (GetArena() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
}
void SubstanceRenalClearanceData::clear_filtrationrate() {
  if (GetArena() == nullptr && filtrationrate_ != nullptr) {
    delete filtrationrate_;
  }
  filtrationrate_ = nullptr;
}
void SubstanceRenalClearanceData::clear_reabsorptionrate() {
  if (GetArena() == nullptr && reabsorptionrate_ != nullptr) {
    delete reabsorptionrate_;
  }
  reabsorptionrate_ = nullptr;
}
void SubstanceRenalClearanceData::clear_excretionrate() {
  if (GetArena() == nullptr && excretionrate_ != nullptr) {
    delete excretionrate_;
  }
  excretionrate_ = nullptr;
}
void SubstanceRenalClearanceData::clear_glomerularfilterability() {
  if (GetArena() == nullptr && glomerularfilterability_ != nullptr) {
    delete glomerularfilterability_;
  }
  glomerularfilterability_ = nullptr;
}
SubstanceRenalClearanceData::SubstanceRenalClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceRenalClearanceData)
}
SubstanceRenalClearanceData::SubstanceRenalClearanceData(const SubstanceRenalClearanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clearance()) {
    clearance_ = new ::pulse::cdm::bind::ScalarVolumePerTimeMassData(*from.clearance_);
  } else {
    clearance_ = nullptr;
  }
  if (from._internal_has_regulation()) {
    regulation_ = new ::pulse::cdm::bind::SubstanceRenalRegulationData(*from.regulation_);
  } else {
    regulation_ = nullptr;
  }
  if (from._internal_has_filtrationrate()) {
    filtrationrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.filtrationrate_);
  } else {
    filtrationrate_ = nullptr;
  }
  if (from._internal_has_reabsorptionrate()) {
    reabsorptionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.reabsorptionrate_);
  } else {
    reabsorptionrate_ = nullptr;
  }
  if (from._internal_has_excretionrate()) {
    excretionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.excretionrate_);
  } else {
    excretionrate_ = nullptr;
  }
  if (from._internal_has_glomerularfilterability()) {
    glomerularfilterability_ = new ::pulse::cdm::bind::ScalarData(*from.glomerularfilterability_);
  } else {
    glomerularfilterability_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceRenalClearanceData)
}

void SubstanceRenalClearanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&clearance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&glomerularfilterability_) -
      reinterpret_cast<char*>(&clearance_)) + sizeof(glomerularfilterability_));
}

SubstanceRenalClearanceData::~SubstanceRenalClearanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceRenalClearanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceRenalClearanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete clearance_;
  if (this != internal_default_instance()) delete regulation_;
  if (this != internal_default_instance()) delete filtrationrate_;
  if (this != internal_default_instance()) delete reabsorptionrate_;
  if (this != internal_default_instance()) delete excretionrate_;
  if (this != internal_default_instance()) delete glomerularfilterability_;
}

void SubstanceRenalClearanceData::ArenaDtor(void* object) {
  SubstanceRenalClearanceData* _this = reinterpret_cast< SubstanceRenalClearanceData* >(object);
  (void)_this;
}
void SubstanceRenalClearanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceRenalClearanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceRenalClearanceData& SubstanceRenalClearanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceRenalClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceRenalClearanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
  if (GetArena() == nullptr && regulation_ != nullptr) {
    delete regulation_;
  }
  regulation_ = nullptr;
  if (GetArena() == nullptr && filtrationrate_ != nullptr) {
    delete filtrationrate_;
  }
  filtrationrate_ = nullptr;
  if (GetArena() == nullptr && reabsorptionrate_ != nullptr) {
    delete reabsorptionrate_;
  }
  reabsorptionrate_ = nullptr;
  if (GetArena() == nullptr && excretionrate_ != nullptr) {
    delete excretionrate_;
  }
  excretionrate_ = nullptr;
  if (GetArena() == nullptr && glomerularfilterability_ != nullptr) {
    delete glomerularfilterability_;
  }
  glomerularfilterability_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceRenalClearanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarVolumePerTimeMassData Clearance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceRenalRegulationData Regulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regulation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData FiltrationRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtrationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData ReabsorptionRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reabsorptionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData ExcretionRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_excretionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData GlomerularFilterability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_glomerularfilterability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceRenalClearanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData Clearance = 1;
  if (this->has_clearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clearance(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceRenalRegulationData Regulation = 2;
  if (this->has_regulation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::regulation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData FiltrationRate = 3;
  if (this->has_filtrationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filtrationrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ReabsorptionRate = 4;
  if (this->has_reabsorptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reabsorptionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ExcretionRate = 5;
  if (this->has_excretionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::excretionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData GlomerularFilterability = 6;
  if (this->has_glomerularfilterability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::glomerularfilterability(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceRenalClearanceData)
  return target;
}

size_t SubstanceRenalClearanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeMassData Clearance = 1;
  if (this->has_clearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clearance_);
  }

  // .pulse.cdm.bind.SubstanceRenalRegulationData Regulation = 2;
  if (this->has_regulation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *regulation_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData FiltrationRate = 3;
  if (this->has_filtrationrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filtrationrate_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ReabsorptionRate = 4;
  if (this->has_reabsorptionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reabsorptionrate_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ExcretionRate = 5;
  if (this->has_excretionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excretionrate_);
  }

  // .pulse.cdm.bind.ScalarData GlomerularFilterability = 6;
  if (this->has_glomerularfilterability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *glomerularfilterability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceRenalClearanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceRenalClearanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceRenalClearanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceRenalClearanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceRenalClearanceData)
    MergeFrom(*source);
  }
}

void SubstanceRenalClearanceData::MergeFrom(const SubstanceRenalClearanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clearance()) {
    _internal_mutable_clearance()->::pulse::cdm::bind::ScalarVolumePerTimeMassData::MergeFrom(from._internal_clearance());
  }
  if (from.has_regulation()) {
    _internal_mutable_regulation()->::pulse::cdm::bind::SubstanceRenalRegulationData::MergeFrom(from._internal_regulation());
  }
  if (from.has_filtrationrate()) {
    _internal_mutable_filtrationrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_filtrationrate());
  }
  if (from.has_reabsorptionrate()) {
    _internal_mutable_reabsorptionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_reabsorptionrate());
  }
  if (from.has_excretionrate()) {
    _internal_mutable_excretionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_excretionrate());
  }
  if (from.has_glomerularfilterability()) {
    _internal_mutable_glomerularfilterability()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_glomerularfilterability());
  }
}

void SubstanceRenalClearanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceRenalClearanceData::CopyFrom(const SubstanceRenalClearanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceRenalClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceRenalClearanceData::IsInitialized() const {
  return true;
}

void SubstanceRenalClearanceData::InternalSwap(SubstanceRenalClearanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceRenalClearanceData, glomerularfilterability_)
      + sizeof(SubstanceRenalClearanceData::glomerularfilterability_)
      - PROTOBUF_FIELD_OFFSET(SubstanceRenalClearanceData, clearance_)>(
          reinterpret_cast<char*>(&clearance_),
          reinterpret_cast<char*>(&other->clearance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceRenalClearanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceClearanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::SubstanceSystemicClearanceData& systemicclearance(const SubstanceClearanceData* msg);
  static const ::pulse::cdm::bind::SubstanceRenalClearanceData& renalclearance(const SubstanceClearanceData* msg);
};

const ::pulse::cdm::bind::SubstanceSystemicClearanceData&
SubstanceClearanceData::_Internal::systemicclearance(const SubstanceClearanceData* msg) {
  return *msg->systemicclearance_;
}
const ::pulse::cdm::bind::SubstanceRenalClearanceData&
SubstanceClearanceData::_Internal::renalclearance(const SubstanceClearanceData* msg) {
  return *msg->renalclearance_;
}
SubstanceClearanceData::SubstanceClearanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceClearanceData)
}
SubstanceClearanceData::SubstanceClearanceData(const SubstanceClearanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_systemicclearance()) {
    systemicclearance_ = new ::pulse::cdm::bind::SubstanceSystemicClearanceData(*from.systemicclearance_);
  } else {
    systemicclearance_ = nullptr;
  }
  if (from._internal_has_renalclearance()) {
    renalclearance_ = new ::pulse::cdm::bind::SubstanceRenalClearanceData(*from.renalclearance_);
  } else {
    renalclearance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceClearanceData)
}

void SubstanceClearanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&systemicclearance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&renalclearance_) -
      reinterpret_cast<char*>(&systemicclearance_)) + sizeof(renalclearance_));
}

SubstanceClearanceData::~SubstanceClearanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceClearanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceClearanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete systemicclearance_;
  if (this != internal_default_instance()) delete renalclearance_;
}

void SubstanceClearanceData::ArenaDtor(void* object) {
  SubstanceClearanceData* _this = reinterpret_cast< SubstanceClearanceData* >(object);
  (void)_this;
}
void SubstanceClearanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceClearanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceClearanceData& SubstanceClearanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceClearanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceClearanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && systemicclearance_ != nullptr) {
    delete systemicclearance_;
  }
  systemicclearance_ = nullptr;
  if (GetArena() == nullptr && renalclearance_ != nullptr) {
    delete renalclearance_;
  }
  renalclearance_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceClearanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.SubstanceSystemicClearanceData SystemicClearance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemicclearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceRenalClearanceData RenalClearance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalclearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceClearanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceClearanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceSystemicClearanceData SystemicClearance = 1;
  if (this->has_systemicclearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::systemicclearance(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceRenalClearanceData RenalClearance = 2;
  if (this->has_renalclearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::renalclearance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceClearanceData)
  return target;
}

size_t SubstanceClearanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceClearanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceSystemicClearanceData SystemicClearance = 1;
  if (this->has_systemicclearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemicclearance_);
  }

  // .pulse.cdm.bind.SubstanceRenalClearanceData RenalClearance = 2;
  if (this->has_renalclearance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalclearance_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceClearanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceClearanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceClearanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceClearanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceClearanceData)
    MergeFrom(*source);
  }
}

void SubstanceClearanceData::MergeFrom(const SubstanceClearanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceClearanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_systemicclearance()) {
    _internal_mutable_systemicclearance()->::pulse::cdm::bind::SubstanceSystemicClearanceData::MergeFrom(from._internal_systemicclearance());
  }
  if (from.has_renalclearance()) {
    _internal_mutable_renalclearance()->::pulse::cdm::bind::SubstanceRenalClearanceData::MergeFrom(from._internal_renalclearance());
  }
}

void SubstanceClearanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceClearanceData::CopyFrom(const SubstanceClearanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceClearanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceClearanceData::IsInitialized() const {
  return true;
}

void SubstanceClearanceData::InternalSwap(SubstanceClearanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceClearanceData, renalclearance_)
      + sizeof(SubstanceClearanceData::renalclearance_)
      - PROTOBUF_FIELD_OFFSET(SubstanceClearanceData, systemicclearance_)>(
          reinterpret_cast<char*>(&systemicclearance_),
          reinterpret_cast<char*>(&other->systemicclearance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceClearanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceFractionData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& amount(const SubstanceFractionData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceFractionData::_Internal::amount(const SubstanceFractionData* msg) {
  return *msg->amount_;
}
void SubstanceFractionData::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
SubstanceFractionData::SubstanceFractionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceFractionData)
}
SubstanceFractionData::SubstanceFractionData(const SubstanceFractionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_amount()) {
    amount_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceFractionData)
}

void SubstanceFractionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

SubstanceFractionData::~SubstanceFractionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceFractionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceFractionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void SubstanceFractionData::ArenaDtor(void* object) {
  SubstanceFractionData* _this = reinterpret_cast< SubstanceFractionData* >(object);
  (void)_this;
}
void SubstanceFractionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceFractionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceFractionData& SubstanceFractionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceFractionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceFractionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceFractionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceFractionData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceFractionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceFractionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceFractionData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.Scalar0To1Data Amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceFractionData)
  return target;
}

size_t SubstanceFractionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceFractionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.Scalar0To1Data Amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceFractionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceFractionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceFractionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceFractionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceFractionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceFractionData)
    MergeFrom(*source);
  }
}

void SubstanceFractionData::MergeFrom(const SubstanceFractionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceFractionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_amount());
  }
}

void SubstanceFractionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceFractionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceFractionData::CopyFrom(const SubstanceFractionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceFractionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceFractionData::IsInitialized() const {
  return true;
}

void SubstanceFractionData::InternalSwap(SubstanceFractionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceFractionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceConcentrationData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration(const SubstanceConcentrationData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceConcentrationData::_Internal::concentration(const SubstanceConcentrationData* msg) {
  return *msg->concentration_;
}
void SubstanceConcentrationData::clear_concentration() {
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
}
SubstanceConcentrationData::SubstanceConcentrationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceConcentrationData)
}
SubstanceConcentrationData::SubstanceConcentrationData(const SubstanceConcentrationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_concentration()) {
    concentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceConcentrationData)
}

void SubstanceConcentrationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concentration_ = nullptr;
}

SubstanceConcentrationData::~SubstanceConcentrationData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceConcentrationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceConcentrationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concentration_;
}

void SubstanceConcentrationData::ArenaDtor(void* object) {
  SubstanceConcentrationData* _this = reinterpret_cast< SubstanceConcentrationData* >(object);
  (void)_this;
}
void SubstanceConcentrationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceConcentrationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceConcentrationData& SubstanceConcentrationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceConcentrationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceConcentrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceConcentrationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceConcentrationData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceConcentrationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceConcentrationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceConcentrationData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concentration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceConcentrationData)
  return target;
}

size_t SubstanceConcentrationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceConcentrationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceConcentrationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceConcentrationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceConcentrationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceConcentrationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceConcentrationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceConcentrationData)
    MergeFrom(*source);
  }
}

void SubstanceConcentrationData::MergeFrom(const SubstanceConcentrationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceConcentrationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_concentration()) {
    _internal_mutable_concentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_concentration());
  }
}

void SubstanceConcentrationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceConcentrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceConcentrationData::CopyFrom(const SubstanceConcentrationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceConcentrationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceConcentrationData::IsInitialized() const {
  return true;
}

void SubstanceConcentrationData::InternalSwap(SubstanceConcentrationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(concentration_, other->concentration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceConcentrationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& density(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmass(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerAreaTimeData& maximumdiffusionflux(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarData& michaeliscoefficient(const SubstanceData* msg);
  static const ::pulse::cdm::bind::SubstanceAerosolizationData& aerosolization(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& bloodconcentration(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& massinbody(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& massinblood(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& massintissue(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& plasmaconcentration(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& systemicmasscleared(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& tissueconcentration(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& alveolartransfer(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& diffusingcapacity(const SubstanceData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& endtidalfraction(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& endtidalpressure(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarData& relativediffusioncoefficient(const SubstanceData* msg);
  static const ::pulse::cdm::bind::ScalarInversePressureData& solubilitycoefficient(const SubstanceData* msg);
  static const ::pulse::cdm::bind::SubstanceClearanceData& clearance(const SubstanceData* msg);
  static const ::pulse::cdm::bind::SubstancePharmacokineticsData& pharmacokinetics(const SubstanceData* msg);
  static const ::pulse::cdm::bind::SubstancePharmacodynamicsData& pharmacodynamics(const SubstanceData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceData::_Internal::density(const SubstanceData* msg) {
  return *msg->density_;
}
const ::pulse::cdm::bind::ScalarMassPerAmountData&
SubstanceData::_Internal::molarmass(const SubstanceData* msg) {
  return *msg->molarmass_;
}
const ::pulse::cdm::bind::ScalarMassPerAreaTimeData&
SubstanceData::_Internal::maximumdiffusionflux(const SubstanceData* msg) {
  return *msg->maximumdiffusionflux_;
}
const ::pulse::cdm::bind::ScalarData&
SubstanceData::_Internal::michaeliscoefficient(const SubstanceData* msg) {
  return *msg->michaeliscoefficient_;
}
const ::pulse::cdm::bind::SubstanceAerosolizationData&
SubstanceData::_Internal::aerosolization(const SubstanceData* msg) {
  return *msg->aerosolization_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceData::_Internal::bloodconcentration(const SubstanceData* msg) {
  return *msg->bloodconcentration_;
}
const ::pulse::cdm::bind::ScalarMassData&
SubstanceData::_Internal::massinbody(const SubstanceData* msg) {
  return *msg->massinbody_;
}
const ::pulse::cdm::bind::ScalarMassData&
SubstanceData::_Internal::massinblood(const SubstanceData* msg) {
  return *msg->massinblood_;
}
const ::pulse::cdm::bind::ScalarMassData&
SubstanceData::_Internal::massintissue(const SubstanceData* msg) {
  return *msg->massintissue_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceData::_Internal::plasmaconcentration(const SubstanceData* msg) {
  return *msg->plasmaconcentration_;
}
const ::pulse::cdm::bind::ScalarMassData&
SubstanceData::_Internal::systemicmasscleared(const SubstanceData* msg) {
  return *msg->systemicmasscleared_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
SubstanceData::_Internal::tissueconcentration(const SubstanceData* msg) {
  return *msg->tissueconcentration_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
SubstanceData::_Internal::alveolartransfer(const SubstanceData* msg) {
  return *msg->alveolartransfer_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&
SubstanceData::_Internal::diffusingcapacity(const SubstanceData* msg) {
  return *msg->diffusingcapacity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SubstanceData::_Internal::endtidalfraction(const SubstanceData* msg) {
  return *msg->endtidalfraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
SubstanceData::_Internal::endtidalpressure(const SubstanceData* msg) {
  return *msg->endtidalpressure_;
}
const ::pulse::cdm::bind::ScalarData&
SubstanceData::_Internal::relativediffusioncoefficient(const SubstanceData* msg) {
  return *msg->relativediffusioncoefficient_;
}
const ::pulse::cdm::bind::ScalarInversePressureData&
SubstanceData::_Internal::solubilitycoefficient(const SubstanceData* msg) {
  return *msg->solubilitycoefficient_;
}
const ::pulse::cdm::bind::SubstanceClearanceData&
SubstanceData::_Internal::clearance(const SubstanceData* msg) {
  return *msg->clearance_;
}
const ::pulse::cdm::bind::SubstancePharmacokineticsData&
SubstanceData::_Internal::pharmacokinetics(const SubstanceData* msg) {
  return *msg->pharmacokinetics_;
}
const ::pulse::cdm::bind::SubstancePharmacodynamicsData&
SubstanceData::_Internal::pharmacodynamics(const SubstanceData* msg) {
  return *msg->pharmacodynamics_;
}
void SubstanceData::clear_density() {
  if (GetArena() == nullptr && density_ != nullptr) {
    delete density_;
  }
  density_ = nullptr;
}
void SubstanceData::clear_molarmass() {
  if (GetArena() == nullptr && molarmass_ != nullptr) {
    delete molarmass_;
  }
  molarmass_ = nullptr;
}
void SubstanceData::clear_maximumdiffusionflux() {
  if (GetArena() == nullptr && maximumdiffusionflux_ != nullptr) {
    delete maximumdiffusionflux_;
  }
  maximumdiffusionflux_ = nullptr;
}
void SubstanceData::clear_michaeliscoefficient() {
  if (GetArena() == nullptr && michaeliscoefficient_ != nullptr) {
    delete michaeliscoefficient_;
  }
  michaeliscoefficient_ = nullptr;
}
void SubstanceData::clear_bloodconcentration() {
  if (GetArena() == nullptr && bloodconcentration_ != nullptr) {
    delete bloodconcentration_;
  }
  bloodconcentration_ = nullptr;
}
void SubstanceData::clear_massinbody() {
  if (GetArena() == nullptr && massinbody_ != nullptr) {
    delete massinbody_;
  }
  massinbody_ = nullptr;
}
void SubstanceData::clear_massinblood() {
  if (GetArena() == nullptr && massinblood_ != nullptr) {
    delete massinblood_;
  }
  massinblood_ = nullptr;
}
void SubstanceData::clear_massintissue() {
  if (GetArena() == nullptr && massintissue_ != nullptr) {
    delete massintissue_;
  }
  massintissue_ = nullptr;
}
void SubstanceData::clear_plasmaconcentration() {
  if (GetArena() == nullptr && plasmaconcentration_ != nullptr) {
    delete plasmaconcentration_;
  }
  plasmaconcentration_ = nullptr;
}
void SubstanceData::clear_systemicmasscleared() {
  if (GetArena() == nullptr && systemicmasscleared_ != nullptr) {
    delete systemicmasscleared_;
  }
  systemicmasscleared_ = nullptr;
}
void SubstanceData::clear_tissueconcentration() {
  if (GetArena() == nullptr && tissueconcentration_ != nullptr) {
    delete tissueconcentration_;
  }
  tissueconcentration_ = nullptr;
}
void SubstanceData::clear_alveolartransfer() {
  if (GetArena() == nullptr && alveolartransfer_ != nullptr) {
    delete alveolartransfer_;
  }
  alveolartransfer_ = nullptr;
}
void SubstanceData::clear_diffusingcapacity() {
  if (GetArena() == nullptr && diffusingcapacity_ != nullptr) {
    delete diffusingcapacity_;
  }
  diffusingcapacity_ = nullptr;
}
void SubstanceData::clear_endtidalfraction() {
  if (GetArena() == nullptr && endtidalfraction_ != nullptr) {
    delete endtidalfraction_;
  }
  endtidalfraction_ = nullptr;
}
void SubstanceData::clear_endtidalpressure() {
  if (GetArena() == nullptr && endtidalpressure_ != nullptr) {
    delete endtidalpressure_;
  }
  endtidalpressure_ = nullptr;
}
void SubstanceData::clear_relativediffusioncoefficient() {
  if (GetArena() == nullptr && relativediffusioncoefficient_ != nullptr) {
    delete relativediffusioncoefficient_;
  }
  relativediffusioncoefficient_ = nullptr;
}
void SubstanceData::clear_solubilitycoefficient() {
  if (GetArena() == nullptr && solubilitycoefficient_ != nullptr) {
    delete solubilitycoefficient_;
  }
  solubilitycoefficient_ = nullptr;
}
SubstanceData::SubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceData)
}
SubstanceData::SubstanceData(const SubstanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_density()) {
    density_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.density_);
  } else {
    density_ = nullptr;
  }
  if (from._internal_has_molarmass()) {
    molarmass_ = new ::pulse::cdm::bind::ScalarMassPerAmountData(*from.molarmass_);
  } else {
    molarmass_ = nullptr;
  }
  if (from._internal_has_maximumdiffusionflux()) {
    maximumdiffusionflux_ = new ::pulse::cdm::bind::ScalarMassPerAreaTimeData(*from.maximumdiffusionflux_);
  } else {
    maximumdiffusionflux_ = nullptr;
  }
  if (from._internal_has_michaeliscoefficient()) {
    michaeliscoefficient_ = new ::pulse::cdm::bind::ScalarData(*from.michaeliscoefficient_);
  } else {
    michaeliscoefficient_ = nullptr;
  }
  if (from._internal_has_aerosolization()) {
    aerosolization_ = new ::pulse::cdm::bind::SubstanceAerosolizationData(*from.aerosolization_);
  } else {
    aerosolization_ = nullptr;
  }
  if (from._internal_has_bloodconcentration()) {
    bloodconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.bloodconcentration_);
  } else {
    bloodconcentration_ = nullptr;
  }
  if (from._internal_has_massinbody()) {
    massinbody_ = new ::pulse::cdm::bind::ScalarMassData(*from.massinbody_);
  } else {
    massinbody_ = nullptr;
  }
  if (from._internal_has_massinblood()) {
    massinblood_ = new ::pulse::cdm::bind::ScalarMassData(*from.massinblood_);
  } else {
    massinblood_ = nullptr;
  }
  if (from._internal_has_massintissue()) {
    massintissue_ = new ::pulse::cdm::bind::ScalarMassData(*from.massintissue_);
  } else {
    massintissue_ = nullptr;
  }
  if (from._internal_has_plasmaconcentration()) {
    plasmaconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.plasmaconcentration_);
  } else {
    plasmaconcentration_ = nullptr;
  }
  if (from._internal_has_systemicmasscleared()) {
    systemicmasscleared_ = new ::pulse::cdm::bind::ScalarMassData(*from.systemicmasscleared_);
  } else {
    systemicmasscleared_ = nullptr;
  }
  if (from._internal_has_tissueconcentration()) {
    tissueconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.tissueconcentration_);
  } else {
    tissueconcentration_ = nullptr;
  }
  if (from._internal_has_alveolartransfer()) {
    alveolartransfer_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.alveolartransfer_);
  } else {
    alveolartransfer_ = nullptr;
  }
  if (from._internal_has_diffusingcapacity()) {
    diffusingcapacity_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureData(*from.diffusingcapacity_);
  } else {
    diffusingcapacity_ = nullptr;
  }
  if (from._internal_has_endtidalfraction()) {
    endtidalfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.endtidalfraction_);
  } else {
    endtidalfraction_ = nullptr;
  }
  if (from._internal_has_endtidalpressure()) {
    endtidalpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.endtidalpressure_);
  } else {
    endtidalpressure_ = nullptr;
  }
  if (from._internal_has_relativediffusioncoefficient()) {
    relativediffusioncoefficient_ = new ::pulse::cdm::bind::ScalarData(*from.relativediffusioncoefficient_);
  } else {
    relativediffusioncoefficient_ = nullptr;
  }
  if (from._internal_has_solubilitycoefficient()) {
    solubilitycoefficient_ = new ::pulse::cdm::bind::ScalarInversePressureData(*from.solubilitycoefficient_);
  } else {
    solubilitycoefficient_ = nullptr;
  }
  if (from._internal_has_clearance()) {
    clearance_ = new ::pulse::cdm::bind::SubstanceClearanceData(*from.clearance_);
  } else {
    clearance_ = nullptr;
  }
  if (from._internal_has_pharmacokinetics()) {
    pharmacokinetics_ = new ::pulse::cdm::bind::SubstancePharmacokineticsData(*from.pharmacokinetics_);
  } else {
    pharmacokinetics_ = nullptr;
  }
  if (from._internal_has_pharmacodynamics()) {
    pharmacodynamics_ = new ::pulse::cdm::bind::SubstancePharmacodynamicsData(*from.pharmacodynamics_);
  } else {
    pharmacodynamics_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceData)
}

void SubstanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&density_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&density_)) + sizeof(state_));
}

SubstanceData::~SubstanceData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete density_;
  if (this != internal_default_instance()) delete molarmass_;
  if (this != internal_default_instance()) delete maximumdiffusionflux_;
  if (this != internal_default_instance()) delete michaeliscoefficient_;
  if (this != internal_default_instance()) delete aerosolization_;
  if (this != internal_default_instance()) delete bloodconcentration_;
  if (this != internal_default_instance()) delete massinbody_;
  if (this != internal_default_instance()) delete massinblood_;
  if (this != internal_default_instance()) delete massintissue_;
  if (this != internal_default_instance()) delete plasmaconcentration_;
  if (this != internal_default_instance()) delete systemicmasscleared_;
  if (this != internal_default_instance()) delete tissueconcentration_;
  if (this != internal_default_instance()) delete alveolartransfer_;
  if (this != internal_default_instance()) delete diffusingcapacity_;
  if (this != internal_default_instance()) delete endtidalfraction_;
  if (this != internal_default_instance()) delete endtidalpressure_;
  if (this != internal_default_instance()) delete relativediffusioncoefficient_;
  if (this != internal_default_instance()) delete solubilitycoefficient_;
  if (this != internal_default_instance()) delete clearance_;
  if (this != internal_default_instance()) delete pharmacokinetics_;
  if (this != internal_default_instance()) delete pharmacodynamics_;
}

void SubstanceData::ArenaDtor(void* object) {
  SubstanceData* _this = reinterpret_cast< SubstanceData* >(object);
  (void)_this;
}
void SubstanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceData& SubstanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && density_ != nullptr) {
    delete density_;
  }
  density_ = nullptr;
  if (GetArena() == nullptr && molarmass_ != nullptr) {
    delete molarmass_;
  }
  molarmass_ = nullptr;
  if (GetArena() == nullptr && maximumdiffusionflux_ != nullptr) {
    delete maximumdiffusionflux_;
  }
  maximumdiffusionflux_ = nullptr;
  if (GetArena() == nullptr && michaeliscoefficient_ != nullptr) {
    delete michaeliscoefficient_;
  }
  michaeliscoefficient_ = nullptr;
  if (GetArena() == nullptr && aerosolization_ != nullptr) {
    delete aerosolization_;
  }
  aerosolization_ = nullptr;
  if (GetArena() == nullptr && bloodconcentration_ != nullptr) {
    delete bloodconcentration_;
  }
  bloodconcentration_ = nullptr;
  if (GetArena() == nullptr && massinbody_ != nullptr) {
    delete massinbody_;
  }
  massinbody_ = nullptr;
  if (GetArena() == nullptr && massinblood_ != nullptr) {
    delete massinblood_;
  }
  massinblood_ = nullptr;
  if (GetArena() == nullptr && massintissue_ != nullptr) {
    delete massintissue_;
  }
  massintissue_ = nullptr;
  if (GetArena() == nullptr && plasmaconcentration_ != nullptr) {
    delete plasmaconcentration_;
  }
  plasmaconcentration_ = nullptr;
  if (GetArena() == nullptr && systemicmasscleared_ != nullptr) {
    delete systemicmasscleared_;
  }
  systemicmasscleared_ = nullptr;
  if (GetArena() == nullptr && tissueconcentration_ != nullptr) {
    delete tissueconcentration_;
  }
  tissueconcentration_ = nullptr;
  if (GetArena() == nullptr && alveolartransfer_ != nullptr) {
    delete alveolartransfer_;
  }
  alveolartransfer_ = nullptr;
  if (GetArena() == nullptr && diffusingcapacity_ != nullptr) {
    delete diffusingcapacity_;
  }
  diffusingcapacity_ = nullptr;
  if (GetArena() == nullptr && endtidalfraction_ != nullptr) {
    delete endtidalfraction_;
  }
  endtidalfraction_ = nullptr;
  if (GetArena() == nullptr && endtidalpressure_ != nullptr) {
    delete endtidalpressure_;
  }
  endtidalpressure_ = nullptr;
  if (GetArena() == nullptr && relativediffusioncoefficient_ != nullptr) {
    delete relativediffusioncoefficient_;
  }
  relativediffusioncoefficient_ = nullptr;
  if (GetArena() == nullptr && solubilitycoefficient_ != nullptr) {
    delete solubilitycoefficient_;
  }
  solubilitycoefficient_ = nullptr;
  if (GetArena() == nullptr && clearance_ != nullptr) {
    delete clearance_;
  }
  clearance_ = nullptr;
  if (GetArena() == nullptr && pharmacokinetics_ != nullptr) {
    delete pharmacokinetics_;
  }
  pharmacokinetics_ = nullptr;
  if (GetArena() == nullptr && pharmacodynamics_ != nullptr) {
    delete pharmacodynamics_;
  }
  pharmacodynamics_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Density = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_density(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerAmountData MolarMass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_molarmass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceData.eState State = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::SubstanceData_eState>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerAreaTimeData MaximumDiffusionFlux = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumdiffusionflux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData MichaelisCoefficient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_michaeliscoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceAerosolizationData Aerosolization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_aerosolization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData BloodConcentration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassInBody = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_massinbody(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassInBlood = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_massinblood(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassInTissue = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_massintissue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaConcentration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_plasmaconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData SystemicMassCleared = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemicmasscleared(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissueconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData AlveolarTransfer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_alveolartransfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureData DiffusingCapacity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusingcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data EndTidalFraction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidalfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData EndTidalPressure = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidalpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData RelativeDiffusionCoefficient = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativediffusioncoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarInversePressureData SolubilityCoefficient = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_solubilitycoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstanceClearanceData Clearance = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstancePharmacokineticsData Pharmacokinetics = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pharmacokinetics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SubstancePharmacodynamicsData Pharmacodynamics = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pharmacodynamics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Density = 2;
  if (this->has_density()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::density(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMass = 3;
  if (this->has_molarmass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::molarmass(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceData.eState State = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerAreaTimeData MaximumDiffusionFlux = 5;
  if (this->has_maximumdiffusionflux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::maximumdiffusionflux(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData MichaelisCoefficient = 6;
  if (this->has_michaeliscoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::michaeliscoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceAerosolizationData Aerosolization = 7;
  if (this->has_aerosolization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::aerosolization(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodConcentration = 8;
  if (this->has_bloodconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bloodconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassInBody = 9;
  if (this->has_massinbody()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::massinbody(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassInBlood = 10;
  if (this->has_massinblood()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::massinblood(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassInTissue = 11;
  if (this->has_massintissue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::massintissue(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaConcentration = 12;
  if (this->has_plasmaconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::plasmaconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData SystemicMassCleared = 13;
  if (this->has_systemicmasscleared()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::systemicmasscleared(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 14;
  if (this->has_tissueconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::tissueconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData AlveolarTransfer = 15;
  if (this->has_alveolartransfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::alveolartransfer(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData DiffusingCapacity = 16;
  if (this->has_diffusingcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::diffusingcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalFraction = 17;
  if (this->has_endtidalfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::endtidalfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalPressure = 18;
  if (this->has_endtidalpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::endtidalpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData RelativeDiffusionCoefficient = 19;
  if (this->has_relativediffusioncoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::relativediffusioncoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarInversePressureData SolubilityCoefficient = 20;
  if (this->has_solubilitycoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::solubilitycoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.SubstanceClearanceData Clearance = 21;
  if (this->has_clearance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::clearance(this), target, stream);
  }

  // .pulse.cdm.bind.SubstancePharmacokineticsData Pharmacokinetics = 22;
  if (this->has_pharmacokinetics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::pharmacokinetics(this), target, stream);
  }

  // .pulse.cdm.bind.SubstancePharmacodynamicsData Pharmacodynamics = 23;
  if (this->has_pharmacodynamics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::pharmacodynamics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceData)
  return target;
}

size_t SubstanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Density = 2;
  if (this->has_density()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *density_);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMass = 3;
  if (this->has_molarmass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *molarmass_);
  }

  // .pulse.cdm.bind.ScalarMassPerAreaTimeData MaximumDiffusionFlux = 5;
  if (this->has_maximumdiffusionflux()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumdiffusionflux_);
  }

  // .pulse.cdm.bind.ScalarData MichaelisCoefficient = 6;
  if (this->has_michaeliscoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *michaeliscoefficient_);
  }

  // .pulse.cdm.bind.SubstanceAerosolizationData Aerosolization = 7;
  if (this->has_aerosolization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aerosolization_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodConcentration = 8;
  if (this->has_bloodconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodconcentration_);
  }

  // .pulse.cdm.bind.ScalarMassData MassInBody = 9;
  if (this->has_massinbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *massinbody_);
  }

  // .pulse.cdm.bind.ScalarMassData MassInBlood = 10;
  if (this->has_massinblood()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *massinblood_);
  }

  // .pulse.cdm.bind.ScalarMassData MassInTissue = 11;
  if (this->has_massintissue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *massintissue_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaConcentration = 12;
  if (this->has_plasmaconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plasmaconcentration_);
  }

  // .pulse.cdm.bind.ScalarMassData SystemicMassCleared = 13;
  if (this->has_systemicmasscleared()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemicmasscleared_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 14;
  if (this->has_tissueconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissueconcentration_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData AlveolarTransfer = 15;
  if (this->has_alveolartransfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alveolartransfer_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData DiffusingCapacity = 16;
  if (this->has_diffusingcapacity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffusingcapacity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalFraction = 17;
  if (this->has_endtidalfraction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidalfraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalPressure = 18;
  if (this->has_endtidalpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidalpressure_);
  }

  // .pulse.cdm.bind.ScalarData RelativeDiffusionCoefficient = 19;
  if (this->has_relativediffusioncoefficient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relativediffusioncoefficient_);
  }

  // .pulse.cdm.bind.ScalarInversePressureData SolubilityCoefficient = 20;
  if (this->has_solubilitycoefficient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solubilitycoefficient_);
  }

  // .pulse.cdm.bind.SubstanceClearanceData Clearance = 21;
  if (this->has_clearance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clearance_);
  }

  // .pulse.cdm.bind.SubstancePharmacokineticsData Pharmacokinetics = 22;
  if (this->has_pharmacokinetics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pharmacokinetics_);
  }

  // .pulse.cdm.bind.SubstancePharmacodynamicsData Pharmacodynamics = 23;
  if (this->has_pharmacodynamics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pharmacodynamics_);
  }

  // .pulse.cdm.bind.SubstanceData.eState State = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceData)
    MergeFrom(*source);
  }
}

void SubstanceData::MergeFrom(const SubstanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_density()) {
    _internal_mutable_density()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_density());
  }
  if (from.has_molarmass()) {
    _internal_mutable_molarmass()->::pulse::cdm::bind::ScalarMassPerAmountData::MergeFrom(from._internal_molarmass());
  }
  if (from.has_maximumdiffusionflux()) {
    _internal_mutable_maximumdiffusionflux()->::pulse::cdm::bind::ScalarMassPerAreaTimeData::MergeFrom(from._internal_maximumdiffusionflux());
  }
  if (from.has_michaeliscoefficient()) {
    _internal_mutable_michaeliscoefficient()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_michaeliscoefficient());
  }
  if (from.has_aerosolization()) {
    _internal_mutable_aerosolization()->::pulse::cdm::bind::SubstanceAerosolizationData::MergeFrom(from._internal_aerosolization());
  }
  if (from.has_bloodconcentration()) {
    _internal_mutable_bloodconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_bloodconcentration());
  }
  if (from.has_massinbody()) {
    _internal_mutable_massinbody()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_massinbody());
  }
  if (from.has_massinblood()) {
    _internal_mutable_massinblood()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_massinblood());
  }
  if (from.has_massintissue()) {
    _internal_mutable_massintissue()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_massintissue());
  }
  if (from.has_plasmaconcentration()) {
    _internal_mutable_plasmaconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_plasmaconcentration());
  }
  if (from.has_systemicmasscleared()) {
    _internal_mutable_systemicmasscleared()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_systemicmasscleared());
  }
  if (from.has_tissueconcentration()) {
    _internal_mutable_tissueconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_tissueconcentration());
  }
  if (from.has_alveolartransfer()) {
    _internal_mutable_alveolartransfer()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_alveolartransfer());
  }
  if (from.has_diffusingcapacity()) {
    _internal_mutable_diffusingcapacity()->::pulse::cdm::bind::ScalarVolumePerTimePressureData::MergeFrom(from._internal_diffusingcapacity());
  }
  if (from.has_endtidalfraction()) {
    _internal_mutable_endtidalfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_endtidalfraction());
  }
  if (from.has_endtidalpressure()) {
    _internal_mutable_endtidalpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_endtidalpressure());
  }
  if (from.has_relativediffusioncoefficient()) {
    _internal_mutable_relativediffusioncoefficient()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_relativediffusioncoefficient());
  }
  if (from.has_solubilitycoefficient()) {
    _internal_mutable_solubilitycoefficient()->::pulse::cdm::bind::ScalarInversePressureData::MergeFrom(from._internal_solubilitycoefficient());
  }
  if (from.has_clearance()) {
    _internal_mutable_clearance()->::pulse::cdm::bind::SubstanceClearanceData::MergeFrom(from._internal_clearance());
  }
  if (from.has_pharmacokinetics()) {
    _internal_mutable_pharmacokinetics()->::pulse::cdm::bind::SubstancePharmacokineticsData::MergeFrom(from._internal_pharmacokinetics());
  }
  if (from.has_pharmacodynamics()) {
    _internal_mutable_pharmacodynamics()->::pulse::cdm::bind::SubstancePharmacodynamicsData::MergeFrom(from._internal_pharmacodynamics());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SubstanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceData::CopyFrom(const SubstanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceData::IsInitialized() const {
  return true;
}

void SubstanceData::InternalSwap(SubstanceData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubstanceData, state_)
      + sizeof(SubstanceData::state_)
      - PROTOBUF_FIELD_OFFSET(SubstanceData, density_)>(
          reinterpret_cast<char*>(&density_),
          reinterpret_cast<char*>(&other->density_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubstanceCompoundData::_Internal {
 public:
};

SubstanceCompoundData::SubstanceCompoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  component_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceCompoundData)
}
SubstanceCompoundData::SubstanceCompoundData(const SubstanceCompoundData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      component_(from.component_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceCompoundData)
}

void SubstanceCompoundData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubstanceCompoundData::~SubstanceCompoundData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceCompoundData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceCompoundData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstanceCompoundData::ArenaDtor(void* object) {
  SubstanceCompoundData* _this = reinterpret_cast< SubstanceCompoundData* >(object);
  (void)_this;
}
void SubstanceCompoundData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceCompoundData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceCompoundData& SubstanceCompoundData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceCompoundData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base);
  return *internal_default_instance();
}


void SubstanceCompoundData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceCompoundData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceCompoundData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceCompoundData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceConcentrationData Component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceCompoundData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceCompoundData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceCompoundData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData Component = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_component_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_component(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceCompoundData)
  return target;
}

size_t SubstanceCompoundData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceCompoundData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.SubstanceConcentrationData Component = 2;
  total_size += 1UL * this->_internal_component_size();
  for (const auto& msg : this->component_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceCompoundData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceCompoundData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceCompoundData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceCompoundData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceCompoundData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceCompoundData)
    MergeFrom(*source);
  }
}

void SubstanceCompoundData::MergeFrom(const SubstanceCompoundData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceCompoundData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  component_.MergeFrom(from.component_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SubstanceCompoundData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceCompoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceCompoundData::CopyFrom(const SubstanceCompoundData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceCompoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceCompoundData::IsInitialized() const {
  return true;
}

void SubstanceCompoundData::InternalSwap(SubstanceCompoundData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  component_.InternalSwap(&other->component_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceCompoundData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceAerosolizationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceAerosolizationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceAerosolizationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstancePhysicochemicalsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstancePhysicochemicalsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstancePhysicochemicalsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceTissuePharmacokineticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstancePharmacokineticsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstancePharmacokineticsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstancePharmacokineticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstancePharmacodynamicsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstancePharmacodynamicsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstancePharmacodynamicsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceSystemicClearanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceSystemicClearanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceSystemicClearanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceRenalRegulationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceRenalRegulationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceRenalRegulationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceRenalClearanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceRenalClearanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceRenalClearanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceClearanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceClearanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceClearanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceFractionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceFractionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceFractionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceConcentrationData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceConcentrationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceConcentrationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceCompoundData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceCompoundData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceCompoundData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
