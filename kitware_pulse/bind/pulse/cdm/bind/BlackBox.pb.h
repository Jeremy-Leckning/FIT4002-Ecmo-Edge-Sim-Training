// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/BlackBox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fBlackBox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fBlackBox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fBlackBox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class BlackBoxData;
class BlackBoxDataDefaultTypeInternal;
extern BlackBoxDataDefaultTypeInternal _BlackBoxData_default_instance_;
class BlackBoxElectricChargeData;
class BlackBoxElectricChargeDataDefaultTypeInternal;
extern BlackBoxElectricChargeDataDefaultTypeInternal _BlackBoxElectricChargeData_default_instance_;
class BlackBoxElectricCurrentData;
class BlackBoxElectricCurrentDataDefaultTypeInternal;
extern BlackBoxElectricCurrentDataDefaultTypeInternal _BlackBoxElectricCurrentData_default_instance_;
class BlackBoxElectricPotentialData;
class BlackBoxElectricPotentialDataDefaultTypeInternal;
extern BlackBoxElectricPotentialDataDefaultTypeInternal _BlackBoxElectricPotentialData_default_instance_;
class BlackBoxEnergyData;
class BlackBoxEnergyDataDefaultTypeInternal;
extern BlackBoxEnergyDataDefaultTypeInternal _BlackBoxEnergyData_default_instance_;
class BlackBoxMassPerVolumeData;
class BlackBoxMassPerVolumeDataDefaultTypeInternal;
extern BlackBoxMassPerVolumeDataDefaultTypeInternal _BlackBoxMassPerVolumeData_default_instance_;
class BlackBoxPowerData;
class BlackBoxPowerDataDefaultTypeInternal;
extern BlackBoxPowerDataDefaultTypeInternal _BlackBoxPowerData_default_instance_;
class BlackBoxPressureData;
class BlackBoxPressureDataDefaultTypeInternal;
extern BlackBoxPressureDataDefaultTypeInternal _BlackBoxPressureData_default_instance_;
class BlackBoxPropertyData;
class BlackBoxPropertyDataDefaultTypeInternal;
extern BlackBoxPropertyDataDefaultTypeInternal _BlackBoxPropertyData_default_instance_;
class BlackBoxSubstanceData;
class BlackBoxSubstanceDataDefaultTypeInternal;
extern BlackBoxSubstanceDataDefaultTypeInternal _BlackBoxSubstanceData_default_instance_;
class BlackBoxTemperatureData;
class BlackBoxTemperatureDataDefaultTypeInternal;
extern BlackBoxTemperatureDataDefaultTypeInternal _BlackBoxTemperatureData_default_instance_;
class BlackBoxVolumeData;
class BlackBoxVolumeDataDefaultTypeInternal;
extern BlackBoxVolumeDataDefaultTypeInternal _BlackBoxVolumeData_default_instance_;
class BlackBoxVolumePerTimeData;
class BlackBoxVolumePerTimeDataDefaultTypeInternal;
extern BlackBoxVolumePerTimeDataDefaultTypeInternal _BlackBoxVolumePerTimeData_default_instance_;
class BlackBoxesData;
class BlackBoxesDataDefaultTypeInternal;
extern BlackBoxesDataDefaultTypeInternal _BlackBoxesData_default_instance_;
class ElectricBlackBoxData;
class ElectricBlackBoxDataDefaultTypeInternal;
extern ElectricBlackBoxDataDefaultTypeInternal _ElectricBlackBoxData_default_instance_;
class FluidBlackBoxData;
class FluidBlackBoxDataDefaultTypeInternal;
extern FluidBlackBoxDataDefaultTypeInternal _FluidBlackBoxData_default_instance_;
class GasBlackBoxData;
class GasBlackBoxDataDefaultTypeInternal;
extern GasBlackBoxDataDefaultTypeInternal _GasBlackBoxData_default_instance_;
class GasBlackBoxSubstanceData;
class GasBlackBoxSubstanceDataDefaultTypeInternal;
extern GasBlackBoxSubstanceDataDefaultTypeInternal _GasBlackBoxSubstanceData_default_instance_;
class LiquidBlackBoxData;
class LiquidBlackBoxDataDefaultTypeInternal;
extern LiquidBlackBoxDataDefaultTypeInternal _LiquidBlackBoxData_default_instance_;
class LiquidBlackBoxSubstanceData;
class LiquidBlackBoxSubstanceDataDefaultTypeInternal;
extern LiquidBlackBoxSubstanceDataDefaultTypeInternal _LiquidBlackBoxSubstanceData_default_instance_;
class ThermalBlackBoxData;
class ThermalBlackBoxDataDefaultTypeInternal;
extern ThermalBlackBoxDataDefaultTypeInternal _ThermalBlackBoxData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::BlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxElectricChargeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricChargeData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxElectricCurrentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricCurrentData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxElectricPotentialData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricPotentialData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxEnergyData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxEnergyData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxMassPerVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxMassPerVolumeData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxPowerData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPowerData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxPressureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPressureData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxPropertyData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxSubstanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxSubstanceData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxTemperatureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxTemperatureData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxVolumeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxVolumeData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxVolumePerTimeData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxVolumePerTimeData>(Arena*);
template<> ::pulse::cdm::bind::BlackBoxesData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BlackBoxesData>(Arena*);
template<> ::pulse::cdm::bind::ElectricBlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectricBlackBoxData>(Arena*);
template<> ::pulse::cdm::bind::FluidBlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::FluidBlackBoxData>(Arena*);
template<> ::pulse::cdm::bind::GasBlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasBlackBoxData>(Arena*);
template<> ::pulse::cdm::bind::GasBlackBoxSubstanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasBlackBoxSubstanceData>(Arena*);
template<> ::pulse::cdm::bind::LiquidBlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidBlackBoxData>(Arena*);
template<> ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidBlackBoxSubstanceData>(Arena*);
template<> ::pulse::cdm::bind::ThermalBlackBoxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ThermalBlackBoxData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum BlackBoxPropertyData_eType : int {
  BlackBoxPropertyData_eType_None = 0,
  BlackBoxPropertyData_eType_Imposed = 1,
  BlackBoxPropertyData_eType_Provided = 2,
  BlackBoxPropertyData_eType_BlackBoxPropertyData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlackBoxPropertyData_eType_BlackBoxPropertyData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlackBoxPropertyData_eType_IsValid(int value);
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData_eType_eType_MIN = BlackBoxPropertyData_eType_None;
constexpr BlackBoxPropertyData_eType BlackBoxPropertyData_eType_eType_MAX = BlackBoxPropertyData_eType_Provided;
constexpr int BlackBoxPropertyData_eType_eType_ARRAYSIZE = BlackBoxPropertyData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlackBoxPropertyData_eType_descriptor();
template<typename T>
inline const std::string& BlackBoxPropertyData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlackBoxPropertyData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlackBoxPropertyData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlackBoxPropertyData_eType_descriptor(), enum_t_value);
}
inline bool BlackBoxPropertyData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlackBoxPropertyData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlackBoxPropertyData_eType>(
    BlackBoxPropertyData_eType_descriptor(), name, value);
}
// ===================================================================

class BlackBoxPropertyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxPropertyData) */ {
 public:
  inline BlackBoxPropertyData() : BlackBoxPropertyData(nullptr) {}
  virtual ~BlackBoxPropertyData();

  BlackBoxPropertyData(const BlackBoxPropertyData& from);
  BlackBoxPropertyData(BlackBoxPropertyData&& from) noexcept
    : BlackBoxPropertyData() {
    *this = ::std::move(from);
  }

  inline BlackBoxPropertyData& operator=(const BlackBoxPropertyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxPropertyData& operator=(BlackBoxPropertyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxPropertyData& default_instance();

  static inline const BlackBoxPropertyData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxPropertyData*>(
               &_BlackBoxPropertyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlackBoxPropertyData& a, BlackBoxPropertyData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxPropertyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxPropertyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxPropertyData* New() const final {
    return CreateMaybeMessage<BlackBoxPropertyData>(nullptr);
  }

  BlackBoxPropertyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxPropertyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxPropertyData& from);
  void MergeFrom(const BlackBoxPropertyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxPropertyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxPropertyData";
  }
  protected:
  explicit BlackBoxPropertyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BlackBoxPropertyData_eType eType;
  static constexpr eType None =
    BlackBoxPropertyData_eType_None;
  static constexpr eType Imposed =
    BlackBoxPropertyData_eType_Imposed;
  static constexpr eType Provided =
    BlackBoxPropertyData_eType_Provided;
  static inline bool eType_IsValid(int value) {
    return BlackBoxPropertyData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    BlackBoxPropertyData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    BlackBoxPropertyData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    BlackBoxPropertyData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return BlackBoxPropertyData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return BlackBoxPropertyData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return BlackBoxPropertyData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData.eType Type = 1;
  void clear_type();
  ::pulse::cdm::bind::BlackBoxPropertyData_eType type() const;
  void set_type(::pulse::cdm::bind::BlackBoxPropertyData_eType value);
  private:
  ::pulse::cdm::bind::BlackBoxPropertyData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::BlackBoxPropertyData_eType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxPropertyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxVolumePerTimeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxVolumePerTimeData) */ {
 public:
  inline BlackBoxVolumePerTimeData() : BlackBoxVolumePerTimeData(nullptr) {}
  virtual ~BlackBoxVolumePerTimeData();

  BlackBoxVolumePerTimeData(const BlackBoxVolumePerTimeData& from);
  BlackBoxVolumePerTimeData(BlackBoxVolumePerTimeData&& from) noexcept
    : BlackBoxVolumePerTimeData() {
    *this = ::std::move(from);
  }

  inline BlackBoxVolumePerTimeData& operator=(const BlackBoxVolumePerTimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxVolumePerTimeData& operator=(BlackBoxVolumePerTimeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxVolumePerTimeData& default_instance();

  static inline const BlackBoxVolumePerTimeData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxVolumePerTimeData*>(
               &_BlackBoxVolumePerTimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlackBoxVolumePerTimeData& a, BlackBoxVolumePerTimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxVolumePerTimeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxVolumePerTimeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxVolumePerTimeData* New() const final {
    return CreateMaybeMessage<BlackBoxVolumePerTimeData>(nullptr);
  }

  BlackBoxVolumePerTimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxVolumePerTimeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxVolumePerTimeData& from);
  void MergeFrom(const BlackBoxVolumePerTimeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxVolumePerTimeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxVolumePerTimeData";
  }
  protected:
  explicit BlackBoxVolumePerTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& property() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_property();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarVolumePerTimeData* property);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_property() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* property);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxVolumePerTimeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxPressureData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxPressureData) */ {
 public:
  inline BlackBoxPressureData() : BlackBoxPressureData(nullptr) {}
  virtual ~BlackBoxPressureData();

  BlackBoxPressureData(const BlackBoxPressureData& from);
  BlackBoxPressureData(BlackBoxPressureData&& from) noexcept
    : BlackBoxPressureData() {
    *this = ::std::move(from);
  }

  inline BlackBoxPressureData& operator=(const BlackBoxPressureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxPressureData& operator=(BlackBoxPressureData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxPressureData& default_instance();

  static inline const BlackBoxPressureData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxPressureData*>(
               &_BlackBoxPressureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlackBoxPressureData& a, BlackBoxPressureData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxPressureData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxPressureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxPressureData* New() const final {
    return CreateMaybeMessage<BlackBoxPressureData>(nullptr);
  }

  BlackBoxPressureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxPressureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxPressureData& from);
  void MergeFrom(const BlackBoxPressureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxPressureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxPressureData";
  }
  protected:
  explicit BlackBoxPressureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarPressureData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarPressureData& property() const;
  ::pulse::cdm::bind::ScalarPressureData* release_property();
  ::pulse::cdm::bind::ScalarPressureData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarPressureData* property);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_property() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarPressureData* property);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxPressureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarPressureData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxVolumeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxVolumeData) */ {
 public:
  inline BlackBoxVolumeData() : BlackBoxVolumeData(nullptr) {}
  virtual ~BlackBoxVolumeData();

  BlackBoxVolumeData(const BlackBoxVolumeData& from);
  BlackBoxVolumeData(BlackBoxVolumeData&& from) noexcept
    : BlackBoxVolumeData() {
    *this = ::std::move(from);
  }

  inline BlackBoxVolumeData& operator=(const BlackBoxVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxVolumeData& operator=(BlackBoxVolumeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxVolumeData& default_instance();

  static inline const BlackBoxVolumeData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxVolumeData*>(
               &_BlackBoxVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlackBoxVolumeData& a, BlackBoxVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxVolumeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxVolumeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxVolumeData* New() const final {
    return CreateMaybeMessage<BlackBoxVolumeData>(nullptr);
  }

  BlackBoxVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxVolumeData& from);
  void MergeFrom(const BlackBoxVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxVolumeData";
  }
  protected:
  explicit BlackBoxVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarVolumeData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarVolumeData& property() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_property();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarVolumeData* property);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_property() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarVolumeData* property);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxVolumeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarVolumeData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxMassPerVolumeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxMassPerVolumeData) */ {
 public:
  inline BlackBoxMassPerVolumeData() : BlackBoxMassPerVolumeData(nullptr) {}
  virtual ~BlackBoxMassPerVolumeData();

  BlackBoxMassPerVolumeData(const BlackBoxMassPerVolumeData& from);
  BlackBoxMassPerVolumeData(BlackBoxMassPerVolumeData&& from) noexcept
    : BlackBoxMassPerVolumeData() {
    *this = ::std::move(from);
  }

  inline BlackBoxMassPerVolumeData& operator=(const BlackBoxMassPerVolumeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxMassPerVolumeData& operator=(BlackBoxMassPerVolumeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxMassPerVolumeData& default_instance();

  static inline const BlackBoxMassPerVolumeData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxMassPerVolumeData*>(
               &_BlackBoxMassPerVolumeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlackBoxMassPerVolumeData& a, BlackBoxMassPerVolumeData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxMassPerVolumeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxMassPerVolumeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxMassPerVolumeData* New() const final {
    return CreateMaybeMessage<BlackBoxMassPerVolumeData>(nullptr);
  }

  BlackBoxMassPerVolumeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxMassPerVolumeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxMassPerVolumeData& from);
  void MergeFrom(const BlackBoxMassPerVolumeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxMassPerVolumeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxMassPerVolumeData";
  }
  protected:
  explicit BlackBoxMassPerVolumeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& property() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_property();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarMassPerVolumeData* property);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_property() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* property);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxMassPerVolumeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxElectricCurrentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxElectricCurrentData) */ {
 public:
  inline BlackBoxElectricCurrentData() : BlackBoxElectricCurrentData(nullptr) {}
  virtual ~BlackBoxElectricCurrentData();

  BlackBoxElectricCurrentData(const BlackBoxElectricCurrentData& from);
  BlackBoxElectricCurrentData(BlackBoxElectricCurrentData&& from) noexcept
    : BlackBoxElectricCurrentData() {
    *this = ::std::move(from);
  }

  inline BlackBoxElectricCurrentData& operator=(const BlackBoxElectricCurrentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxElectricCurrentData& operator=(BlackBoxElectricCurrentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxElectricCurrentData& default_instance();

  static inline const BlackBoxElectricCurrentData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxElectricCurrentData*>(
               &_BlackBoxElectricCurrentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BlackBoxElectricCurrentData& a, BlackBoxElectricCurrentData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxElectricCurrentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxElectricCurrentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxElectricCurrentData* New() const final {
    return CreateMaybeMessage<BlackBoxElectricCurrentData>(nullptr);
  }

  BlackBoxElectricCurrentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxElectricCurrentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxElectricCurrentData& from);
  void MergeFrom(const BlackBoxElectricCurrentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxElectricCurrentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxElectricCurrentData";
  }
  protected:
  explicit BlackBoxElectricCurrentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarElectricCurrentData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarElectricCurrentData& property() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* release_property();
  ::pulse::cdm::bind::ScalarElectricCurrentData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarElectricCurrentData* property);
  private:
  const ::pulse::cdm::bind::ScalarElectricCurrentData& _internal_property() const;
  ::pulse::cdm::bind::ScalarElectricCurrentData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarElectricCurrentData* property);
  ::pulse::cdm::bind::ScalarElectricCurrentData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxElectricCurrentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarElectricCurrentData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxElectricPotentialData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxElectricPotentialData) */ {
 public:
  inline BlackBoxElectricPotentialData() : BlackBoxElectricPotentialData(nullptr) {}
  virtual ~BlackBoxElectricPotentialData();

  BlackBoxElectricPotentialData(const BlackBoxElectricPotentialData& from);
  BlackBoxElectricPotentialData(BlackBoxElectricPotentialData&& from) noexcept
    : BlackBoxElectricPotentialData() {
    *this = ::std::move(from);
  }

  inline BlackBoxElectricPotentialData& operator=(const BlackBoxElectricPotentialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxElectricPotentialData& operator=(BlackBoxElectricPotentialData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxElectricPotentialData& default_instance();

  static inline const BlackBoxElectricPotentialData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxElectricPotentialData*>(
               &_BlackBoxElectricPotentialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlackBoxElectricPotentialData& a, BlackBoxElectricPotentialData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxElectricPotentialData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxElectricPotentialData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxElectricPotentialData* New() const final {
    return CreateMaybeMessage<BlackBoxElectricPotentialData>(nullptr);
  }

  BlackBoxElectricPotentialData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxElectricPotentialData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxElectricPotentialData& from);
  void MergeFrom(const BlackBoxElectricPotentialData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxElectricPotentialData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxElectricPotentialData";
  }
  protected:
  explicit BlackBoxElectricPotentialData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarElectricPotentialData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& property() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_property();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarElectricPotentialData* property);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_property() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarElectricPotentialData* property);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxElectricPotentialData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxElectricChargeData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxElectricChargeData) */ {
 public:
  inline BlackBoxElectricChargeData() : BlackBoxElectricChargeData(nullptr) {}
  virtual ~BlackBoxElectricChargeData();

  BlackBoxElectricChargeData(const BlackBoxElectricChargeData& from);
  BlackBoxElectricChargeData(BlackBoxElectricChargeData&& from) noexcept
    : BlackBoxElectricChargeData() {
    *this = ::std::move(from);
  }

  inline BlackBoxElectricChargeData& operator=(const BlackBoxElectricChargeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxElectricChargeData& operator=(BlackBoxElectricChargeData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxElectricChargeData& default_instance();

  static inline const BlackBoxElectricChargeData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxElectricChargeData*>(
               &_BlackBoxElectricChargeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlackBoxElectricChargeData& a, BlackBoxElectricChargeData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxElectricChargeData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxElectricChargeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxElectricChargeData* New() const final {
    return CreateMaybeMessage<BlackBoxElectricChargeData>(nullptr);
  }

  BlackBoxElectricChargeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxElectricChargeData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxElectricChargeData& from);
  void MergeFrom(const BlackBoxElectricChargeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxElectricChargeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxElectricChargeData";
  }
  protected:
  explicit BlackBoxElectricChargeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarElectricChargeData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarElectricChargeData& property() const;
  ::pulse::cdm::bind::ScalarElectricChargeData* release_property();
  ::pulse::cdm::bind::ScalarElectricChargeData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarElectricChargeData* property);
  private:
  const ::pulse::cdm::bind::ScalarElectricChargeData& _internal_property() const;
  ::pulse::cdm::bind::ScalarElectricChargeData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarElectricChargeData* property);
  ::pulse::cdm::bind::ScalarElectricChargeData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxElectricChargeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarElectricChargeData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxPowerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxPowerData) */ {
 public:
  inline BlackBoxPowerData() : BlackBoxPowerData(nullptr) {}
  virtual ~BlackBoxPowerData();

  BlackBoxPowerData(const BlackBoxPowerData& from);
  BlackBoxPowerData(BlackBoxPowerData&& from) noexcept
    : BlackBoxPowerData() {
    *this = ::std::move(from);
  }

  inline BlackBoxPowerData& operator=(const BlackBoxPowerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxPowerData& operator=(BlackBoxPowerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxPowerData& default_instance();

  static inline const BlackBoxPowerData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxPowerData*>(
               &_BlackBoxPowerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BlackBoxPowerData& a, BlackBoxPowerData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxPowerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxPowerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxPowerData* New() const final {
    return CreateMaybeMessage<BlackBoxPowerData>(nullptr);
  }

  BlackBoxPowerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxPowerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxPowerData& from);
  void MergeFrom(const BlackBoxPowerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxPowerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxPowerData";
  }
  protected:
  explicit BlackBoxPowerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarPowerData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarPowerData& property() const;
  ::pulse::cdm::bind::ScalarPowerData* release_property();
  ::pulse::cdm::bind::ScalarPowerData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarPowerData* property);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_property() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarPowerData* property);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxPowerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarPowerData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxTemperatureData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxTemperatureData) */ {
 public:
  inline BlackBoxTemperatureData() : BlackBoxTemperatureData(nullptr) {}
  virtual ~BlackBoxTemperatureData();

  BlackBoxTemperatureData(const BlackBoxTemperatureData& from);
  BlackBoxTemperatureData(BlackBoxTemperatureData&& from) noexcept
    : BlackBoxTemperatureData() {
    *this = ::std::move(from);
  }

  inline BlackBoxTemperatureData& operator=(const BlackBoxTemperatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxTemperatureData& operator=(BlackBoxTemperatureData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxTemperatureData& default_instance();

  static inline const BlackBoxTemperatureData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxTemperatureData*>(
               &_BlackBoxTemperatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlackBoxTemperatureData& a, BlackBoxTemperatureData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxTemperatureData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxTemperatureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxTemperatureData* New() const final {
    return CreateMaybeMessage<BlackBoxTemperatureData>(nullptr);
  }

  BlackBoxTemperatureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxTemperatureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxTemperatureData& from);
  void MergeFrom(const BlackBoxTemperatureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxTemperatureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxTemperatureData";
  }
  protected:
  explicit BlackBoxTemperatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarTemperatureData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarTemperatureData& property() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_property();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarTemperatureData* property);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_property() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarTemperatureData* property);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxTemperatureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarTemperatureData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxEnergyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxEnergyData) */ {
 public:
  inline BlackBoxEnergyData() : BlackBoxEnergyData(nullptr) {}
  virtual ~BlackBoxEnergyData();

  BlackBoxEnergyData(const BlackBoxEnergyData& from);
  BlackBoxEnergyData(BlackBoxEnergyData&& from) noexcept
    : BlackBoxEnergyData() {
    *this = ::std::move(from);
  }

  inline BlackBoxEnergyData& operator=(const BlackBoxEnergyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxEnergyData& operator=(BlackBoxEnergyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxEnergyData& default_instance();

  static inline const BlackBoxEnergyData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxEnergyData*>(
               &_BlackBoxEnergyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlackBoxEnergyData& a, BlackBoxEnergyData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxEnergyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxEnergyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxEnergyData* New() const final {
    return CreateMaybeMessage<BlackBoxEnergyData>(nullptr);
  }

  BlackBoxEnergyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxEnergyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxEnergyData& from);
  void MergeFrom(const BlackBoxEnergyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxEnergyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxEnergyData";
  }
  protected:
  explicit BlackBoxEnergyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxPropertyData& base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* release_base();
  ::pulse::cdm::bind::BlackBoxPropertyData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxPropertyData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxPropertyData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxPropertyData* base);
  ::pulse::cdm::bind::BlackBoxPropertyData* unsafe_arena_release_base();

  // .pulse.cdm.bind.ScalarEnergyData Property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::pulse::cdm::bind::ScalarEnergyData& property() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_property();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_property();
  void set_allocated_property(::pulse::cdm::bind::ScalarEnergyData* property);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_property() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::pulse::cdm::bind::ScalarEnergyData* property);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxEnergyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxPropertyData* base_;
  ::pulse::cdm::bind::ScalarEnergyData* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxSubstanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxSubstanceData) */ {
 public:
  inline BlackBoxSubstanceData() : BlackBoxSubstanceData(nullptr) {}
  virtual ~BlackBoxSubstanceData();

  BlackBoxSubstanceData(const BlackBoxSubstanceData& from);
  BlackBoxSubstanceData(BlackBoxSubstanceData&& from) noexcept
    : BlackBoxSubstanceData() {
    *this = ::std::move(from);
  }

  inline BlackBoxSubstanceData& operator=(const BlackBoxSubstanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxSubstanceData& operator=(BlackBoxSubstanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxSubstanceData& default_instance();

  static inline const BlackBoxSubstanceData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxSubstanceData*>(
               &_BlackBoxSubstanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlackBoxSubstanceData& a, BlackBoxSubstanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxSubstanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxSubstanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxSubstanceData* New() const final {
    return CreateMaybeMessage<BlackBoxSubstanceData>(nullptr);
  }

  BlackBoxSubstanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxSubstanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxSubstanceData& from);
  void MergeFrom(const BlackBoxSubstanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxSubstanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxSubstanceData";
  }
  protected:
  explicit BlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxSubstanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class GasBlackBoxSubstanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasBlackBoxSubstanceData) */ {
 public:
  inline GasBlackBoxSubstanceData() : GasBlackBoxSubstanceData(nullptr) {}
  virtual ~GasBlackBoxSubstanceData();

  GasBlackBoxSubstanceData(const GasBlackBoxSubstanceData& from);
  GasBlackBoxSubstanceData(GasBlackBoxSubstanceData&& from) noexcept
    : GasBlackBoxSubstanceData() {
    *this = ::std::move(from);
  }

  inline GasBlackBoxSubstanceData& operator=(const GasBlackBoxSubstanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasBlackBoxSubstanceData& operator=(GasBlackBoxSubstanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasBlackBoxSubstanceData& default_instance();

  static inline const GasBlackBoxSubstanceData* internal_default_instance() {
    return reinterpret_cast<const GasBlackBoxSubstanceData*>(
               &_GasBlackBoxSubstanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GasBlackBoxSubstanceData& a, GasBlackBoxSubstanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasBlackBoxSubstanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasBlackBoxSubstanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasBlackBoxSubstanceData* New() const final {
    return CreateMaybeMessage<GasBlackBoxSubstanceData>(nullptr);
  }

  GasBlackBoxSubstanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasBlackBoxSubstanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasBlackBoxSubstanceData& from);
  void MergeFrom(const GasBlackBoxSubstanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasBlackBoxSubstanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasBlackBoxSubstanceData";
  }
  protected:
  explicit GasBlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kPartialPressureFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxSubstanceData& base() const;
  ::pulse::cdm::bind::BlackBoxSubstanceData* release_base();
  ::pulse::cdm::bind::BlackBoxSubstanceData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxSubstanceData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxSubstanceData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxSubstanceData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxSubstanceData* base);
  ::pulse::cdm::bind::BlackBoxSubstanceData* unsafe_arena_release_base();

  // .pulse.cdm.bind.BlackBoxPressureData PartialPressure = 2;
  bool has_partialpressure() const;
  private:
  bool _internal_has_partialpressure() const;
  public:
  void clear_partialpressure();
  const ::pulse::cdm::bind::BlackBoxPressureData& partialpressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* release_partialpressure();
  ::pulse::cdm::bind::BlackBoxPressureData* mutable_partialpressure();
  void set_allocated_partialpressure(::pulse::cdm::bind::BlackBoxPressureData* partialpressure);
  private:
  const ::pulse::cdm::bind::BlackBoxPressureData& _internal_partialpressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* _internal_mutable_partialpressure();
  public:
  void unsafe_arena_set_allocated_partialpressure(
      ::pulse::cdm::bind::BlackBoxPressureData* partialpressure);
  ::pulse::cdm::bind::BlackBoxPressureData* unsafe_arena_release_partialpressure();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasBlackBoxSubstanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxSubstanceData* base_;
  ::pulse::cdm::bind::BlackBoxPressureData* partialpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class LiquidBlackBoxSubstanceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidBlackBoxSubstanceData) */ {
 public:
  inline LiquidBlackBoxSubstanceData() : LiquidBlackBoxSubstanceData(nullptr) {}
  virtual ~LiquidBlackBoxSubstanceData();

  LiquidBlackBoxSubstanceData(const LiquidBlackBoxSubstanceData& from);
  LiquidBlackBoxSubstanceData(LiquidBlackBoxSubstanceData&& from) noexcept
    : LiquidBlackBoxSubstanceData() {
    *this = ::std::move(from);
  }

  inline LiquidBlackBoxSubstanceData& operator=(const LiquidBlackBoxSubstanceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidBlackBoxSubstanceData& operator=(LiquidBlackBoxSubstanceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidBlackBoxSubstanceData& default_instance();

  static inline const LiquidBlackBoxSubstanceData* internal_default_instance() {
    return reinterpret_cast<const LiquidBlackBoxSubstanceData*>(
               &_LiquidBlackBoxSubstanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LiquidBlackBoxSubstanceData& a, LiquidBlackBoxSubstanceData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidBlackBoxSubstanceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidBlackBoxSubstanceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidBlackBoxSubstanceData* New() const final {
    return CreateMaybeMessage<LiquidBlackBoxSubstanceData>(nullptr);
  }

  LiquidBlackBoxSubstanceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidBlackBoxSubstanceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidBlackBoxSubstanceData& from);
  void MergeFrom(const LiquidBlackBoxSubstanceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidBlackBoxSubstanceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidBlackBoxSubstanceData";
  }
  protected:
  explicit LiquidBlackBoxSubstanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kConcentrationFieldNumber = 2,
  };
  // .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxSubstanceData& base() const;
  ::pulse::cdm::bind::BlackBoxSubstanceData* release_base();
  ::pulse::cdm::bind::BlackBoxSubstanceData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxSubstanceData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxSubstanceData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxSubstanceData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxSubstanceData* base);
  ::pulse::cdm::bind::BlackBoxSubstanceData* unsafe_arena_release_base();

  // .pulse.cdm.bind.BlackBoxMassPerVolumeData Concentration = 2;
  bool has_concentration() const;
  private:
  bool _internal_has_concentration() const;
  public:
  void clear_concentration();
  const ::pulse::cdm::bind::BlackBoxMassPerVolumeData& concentration() const;
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* release_concentration();
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* mutable_concentration();
  void set_allocated_concentration(::pulse::cdm::bind::BlackBoxMassPerVolumeData* concentration);
  private:
  const ::pulse::cdm::bind::BlackBoxMassPerVolumeData& _internal_concentration() const;
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* _internal_mutable_concentration();
  public:
  void unsafe_arena_set_allocated_concentration(
      ::pulse::cdm::bind::BlackBoxMassPerVolumeData* concentration);
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* unsafe_arena_release_concentration();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidBlackBoxSubstanceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxSubstanceData* base_;
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* concentration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxData) */ {
 public:
  inline BlackBoxData() : BlackBoxData(nullptr) {}
  virtual ~BlackBoxData();

  BlackBoxData(const BlackBoxData& from);
  BlackBoxData(BlackBoxData&& from) noexcept
    : BlackBoxData() {
    *this = ::std::move(from);
  }

  inline BlackBoxData& operator=(const BlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxData& operator=(BlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxData& default_instance();

  static inline const BlackBoxData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxData*>(
               &_BlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BlackBoxData& a, BlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxData* New() const final {
    return CreateMaybeMessage<BlackBoxData>(nullptr);
  }

  BlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxData& from);
  void MergeFrom(const BlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxData";
  }
  protected:
  explicit BlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class FluidBlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.FluidBlackBoxData) */ {
 public:
  inline FluidBlackBoxData() : FluidBlackBoxData(nullptr) {}
  virtual ~FluidBlackBoxData();

  FluidBlackBoxData(const FluidBlackBoxData& from);
  FluidBlackBoxData(FluidBlackBoxData&& from) noexcept
    : FluidBlackBoxData() {
    *this = ::std::move(from);
  }

  inline FluidBlackBoxData& operator=(const FluidBlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FluidBlackBoxData& operator=(FluidBlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FluidBlackBoxData& default_instance();

  static inline const FluidBlackBoxData* internal_default_instance() {
    return reinterpret_cast<const FluidBlackBoxData*>(
               &_FluidBlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FluidBlackBoxData& a, FluidBlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(FluidBlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FluidBlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FluidBlackBoxData* New() const final {
    return CreateMaybeMessage<FluidBlackBoxData>(nullptr);
  }

  FluidBlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FluidBlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FluidBlackBoxData& from);
  void MergeFrom(const FluidBlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FluidBlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.FluidBlackBoxData";
  }
  protected:
  explicit FluidBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSourceFlowFieldNumber = 2,
    kTargetFlowFieldNumber = 3,
    kSourcePressureFieldNumber = 4,
    kTargetPressureFieldNumber = 5,
    kPressureFieldNumber = 6,
    kVolumeFieldNumber = 7,
  };
  // .pulse.cdm.bind.BlackBoxData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxData& base() const;
  ::pulse::cdm::bind::BlackBoxData* release_base();
  ::pulse::cdm::bind::BlackBoxData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxData* base);
  ::pulse::cdm::bind::BlackBoxData* unsafe_arena_release_base();

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData SourceFlow = 2;
  bool has_sourceflow() const;
  private:
  bool _internal_has_sourceflow() const;
  public:
  void clear_sourceflow();
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& sourceflow() const;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* release_sourceflow();
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* mutable_sourceflow();
  void set_allocated_sourceflow(::pulse::cdm::bind::BlackBoxVolumePerTimeData* sourceflow);
  private:
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& _internal_sourceflow() const;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* _internal_mutable_sourceflow();
  public:
  void unsafe_arena_set_allocated_sourceflow(
      ::pulse::cdm::bind::BlackBoxVolumePerTimeData* sourceflow);
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* unsafe_arena_release_sourceflow();

  // .pulse.cdm.bind.BlackBoxVolumePerTimeData TargetFlow = 3;
  bool has_targetflow() const;
  private:
  bool _internal_has_targetflow() const;
  public:
  void clear_targetflow();
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& targetflow() const;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* release_targetflow();
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* mutable_targetflow();
  void set_allocated_targetflow(::pulse::cdm::bind::BlackBoxVolumePerTimeData* targetflow);
  private:
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& _internal_targetflow() const;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* _internal_mutable_targetflow();
  public:
  void unsafe_arena_set_allocated_targetflow(
      ::pulse::cdm::bind::BlackBoxVolumePerTimeData* targetflow);
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* unsafe_arena_release_targetflow();

  // .pulse.cdm.bind.BlackBoxPressureData SourcePressure = 4;
  bool has_sourcepressure() const;
  private:
  bool _internal_has_sourcepressure() const;
  public:
  void clear_sourcepressure();
  const ::pulse::cdm::bind::BlackBoxPressureData& sourcepressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* release_sourcepressure();
  ::pulse::cdm::bind::BlackBoxPressureData* mutable_sourcepressure();
  void set_allocated_sourcepressure(::pulse::cdm::bind::BlackBoxPressureData* sourcepressure);
  private:
  const ::pulse::cdm::bind::BlackBoxPressureData& _internal_sourcepressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* _internal_mutable_sourcepressure();
  public:
  void unsafe_arena_set_allocated_sourcepressure(
      ::pulse::cdm::bind::BlackBoxPressureData* sourcepressure);
  ::pulse::cdm::bind::BlackBoxPressureData* unsafe_arena_release_sourcepressure();

  // .pulse.cdm.bind.BlackBoxPressureData TargetPressure = 5;
  bool has_targetpressure() const;
  private:
  bool _internal_has_targetpressure() const;
  public:
  void clear_targetpressure();
  const ::pulse::cdm::bind::BlackBoxPressureData& targetpressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* release_targetpressure();
  ::pulse::cdm::bind::BlackBoxPressureData* mutable_targetpressure();
  void set_allocated_targetpressure(::pulse::cdm::bind::BlackBoxPressureData* targetpressure);
  private:
  const ::pulse::cdm::bind::BlackBoxPressureData& _internal_targetpressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* _internal_mutable_targetpressure();
  public:
  void unsafe_arena_set_allocated_targetpressure(
      ::pulse::cdm::bind::BlackBoxPressureData* targetpressure);
  ::pulse::cdm::bind::BlackBoxPressureData* unsafe_arena_release_targetpressure();

  // .pulse.cdm.bind.BlackBoxPressureData Pressure = 6;
  bool has_pressure() const;
  private:
  bool _internal_has_pressure() const;
  public:
  void clear_pressure();
  const ::pulse::cdm::bind::BlackBoxPressureData& pressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* release_pressure();
  ::pulse::cdm::bind::BlackBoxPressureData* mutable_pressure();
  void set_allocated_pressure(::pulse::cdm::bind::BlackBoxPressureData* pressure);
  private:
  const ::pulse::cdm::bind::BlackBoxPressureData& _internal_pressure() const;
  ::pulse::cdm::bind::BlackBoxPressureData* _internal_mutable_pressure();
  public:
  void unsafe_arena_set_allocated_pressure(
      ::pulse::cdm::bind::BlackBoxPressureData* pressure);
  ::pulse::cdm::bind::BlackBoxPressureData* unsafe_arena_release_pressure();

  // .pulse.cdm.bind.BlackBoxVolumeData Volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::pulse::cdm::bind::BlackBoxVolumeData& volume() const;
  ::pulse::cdm::bind::BlackBoxVolumeData* release_volume();
  ::pulse::cdm::bind::BlackBoxVolumeData* mutable_volume();
  void set_allocated_volume(::pulse::cdm::bind::BlackBoxVolumeData* volume);
  private:
  const ::pulse::cdm::bind::BlackBoxVolumeData& _internal_volume() const;
  ::pulse::cdm::bind::BlackBoxVolumeData* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::pulse::cdm::bind::BlackBoxVolumeData* volume);
  ::pulse::cdm::bind::BlackBoxVolumeData* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.FluidBlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxData* base_;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* sourceflow_;
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* targetflow_;
  ::pulse::cdm::bind::BlackBoxPressureData* sourcepressure_;
  ::pulse::cdm::bind::BlackBoxPressureData* targetpressure_;
  ::pulse::cdm::bind::BlackBoxPressureData* pressure_;
  ::pulse::cdm::bind::BlackBoxVolumeData* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class ElectricBlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectricBlackBoxData) */ {
 public:
  inline ElectricBlackBoxData() : ElectricBlackBoxData(nullptr) {}
  virtual ~ElectricBlackBoxData();

  ElectricBlackBoxData(const ElectricBlackBoxData& from);
  ElectricBlackBoxData(ElectricBlackBoxData&& from) noexcept
    : ElectricBlackBoxData() {
    *this = ::std::move(from);
  }

  inline ElectricBlackBoxData& operator=(const ElectricBlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectricBlackBoxData& operator=(ElectricBlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectricBlackBoxData& default_instance();

  static inline const ElectricBlackBoxData* internal_default_instance() {
    return reinterpret_cast<const ElectricBlackBoxData*>(
               &_ElectricBlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ElectricBlackBoxData& a, ElectricBlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectricBlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectricBlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectricBlackBoxData* New() const final {
    return CreateMaybeMessage<ElectricBlackBoxData>(nullptr);
  }

  ElectricBlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectricBlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectricBlackBoxData& from);
  void MergeFrom(const ElectricBlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectricBlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectricBlackBoxData";
  }
  protected:
  explicit ElectricBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSourceCurrentFieldNumber = 2,
    kTargetCurrentFieldNumber = 3,
    kSourceVoltageFieldNumber = 4,
    kTargetVoltageFieldNumber = 5,
    kVoltageFieldNumber = 6,
    kChargeFieldNumber = 7,
  };
  // .pulse.cdm.bind.BlackBoxData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxData& base() const;
  ::pulse::cdm::bind::BlackBoxData* release_base();
  ::pulse::cdm::bind::BlackBoxData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxData* base);
  ::pulse::cdm::bind::BlackBoxData* unsafe_arena_release_base();

  // .pulse.cdm.bind.BlackBoxElectricCurrentData SourceCurrent = 2;
  bool has_sourcecurrent() const;
  private:
  bool _internal_has_sourcecurrent() const;
  public:
  void clear_sourcecurrent();
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData& sourcecurrent() const;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* release_sourcecurrent();
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* mutable_sourcecurrent();
  void set_allocated_sourcecurrent(::pulse::cdm::bind::BlackBoxElectricCurrentData* sourcecurrent);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData& _internal_sourcecurrent() const;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* _internal_mutable_sourcecurrent();
  public:
  void unsafe_arena_set_allocated_sourcecurrent(
      ::pulse::cdm::bind::BlackBoxElectricCurrentData* sourcecurrent);
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* unsafe_arena_release_sourcecurrent();

  // .pulse.cdm.bind.BlackBoxElectricCurrentData TargetCurrent = 3;
  bool has_targetcurrent() const;
  private:
  bool _internal_has_targetcurrent() const;
  public:
  void clear_targetcurrent();
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData& targetcurrent() const;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* release_targetcurrent();
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* mutable_targetcurrent();
  void set_allocated_targetcurrent(::pulse::cdm::bind::BlackBoxElectricCurrentData* targetcurrent);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData& _internal_targetcurrent() const;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* _internal_mutable_targetcurrent();
  public:
  void unsafe_arena_set_allocated_targetcurrent(
      ::pulse::cdm::bind::BlackBoxElectricCurrentData* targetcurrent);
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* unsafe_arena_release_targetcurrent();

  // .pulse.cdm.bind.BlackBoxElectricPotentialData SourceVoltage = 4;
  bool has_sourcevoltage() const;
  private:
  bool _internal_has_sourcevoltage() const;
  public:
  void clear_sourcevoltage();
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& sourcevoltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* release_sourcevoltage();
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* mutable_sourcevoltage();
  void set_allocated_sourcevoltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* sourcevoltage);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& _internal_sourcevoltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* _internal_mutable_sourcevoltage();
  public:
  void unsafe_arena_set_allocated_sourcevoltage(
      ::pulse::cdm::bind::BlackBoxElectricPotentialData* sourcevoltage);
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* unsafe_arena_release_sourcevoltage();

  // .pulse.cdm.bind.BlackBoxElectricPotentialData TargetVoltage = 5;
  bool has_targetvoltage() const;
  private:
  bool _internal_has_targetvoltage() const;
  public:
  void clear_targetvoltage();
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& targetvoltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* release_targetvoltage();
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* mutable_targetvoltage();
  void set_allocated_targetvoltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* targetvoltage);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& _internal_targetvoltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* _internal_mutable_targetvoltage();
  public:
  void unsafe_arena_set_allocated_targetvoltage(
      ::pulse::cdm::bind::BlackBoxElectricPotentialData* targetvoltage);
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* unsafe_arena_release_targetvoltage();

  // .pulse.cdm.bind.BlackBoxElectricPotentialData Voltage = 6;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& voltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* release_voltage();
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* mutable_voltage();
  void set_allocated_voltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* voltage);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData& _internal_voltage() const;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* _internal_mutable_voltage();
  public:
  void unsafe_arena_set_allocated_voltage(
      ::pulse::cdm::bind::BlackBoxElectricPotentialData* voltage);
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* unsafe_arena_release_voltage();

  // .pulse.cdm.bind.BlackBoxElectricChargeData Charge = 7;
  bool has_charge() const;
  private:
  bool _internal_has_charge() const;
  public:
  void clear_charge();
  const ::pulse::cdm::bind::BlackBoxElectricChargeData& charge() const;
  ::pulse::cdm::bind::BlackBoxElectricChargeData* release_charge();
  ::pulse::cdm::bind::BlackBoxElectricChargeData* mutable_charge();
  void set_allocated_charge(::pulse::cdm::bind::BlackBoxElectricChargeData* charge);
  private:
  const ::pulse::cdm::bind::BlackBoxElectricChargeData& _internal_charge() const;
  ::pulse::cdm::bind::BlackBoxElectricChargeData* _internal_mutable_charge();
  public:
  void unsafe_arena_set_allocated_charge(
      ::pulse::cdm::bind::BlackBoxElectricChargeData* charge);
  ::pulse::cdm::bind::BlackBoxElectricChargeData* unsafe_arena_release_charge();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectricBlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxData* base_;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* sourcecurrent_;
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* targetcurrent_;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* sourcevoltage_;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* targetvoltage_;
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* voltage_;
  ::pulse::cdm::bind::BlackBoxElectricChargeData* charge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class ThermalBlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ThermalBlackBoxData) */ {
 public:
  inline ThermalBlackBoxData() : ThermalBlackBoxData(nullptr) {}
  virtual ~ThermalBlackBoxData();

  ThermalBlackBoxData(const ThermalBlackBoxData& from);
  ThermalBlackBoxData(ThermalBlackBoxData&& from) noexcept
    : ThermalBlackBoxData() {
    *this = ::std::move(from);
  }

  inline ThermalBlackBoxData& operator=(const ThermalBlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalBlackBoxData& operator=(ThermalBlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalBlackBoxData& default_instance();

  static inline const ThermalBlackBoxData* internal_default_instance() {
    return reinterpret_cast<const ThermalBlackBoxData*>(
               &_ThermalBlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ThermalBlackBoxData& a, ThermalBlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalBlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalBlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalBlackBoxData* New() const final {
    return CreateMaybeMessage<ThermalBlackBoxData>(nullptr);
  }

  ThermalBlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalBlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalBlackBoxData& from);
  void MergeFrom(const ThermalBlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalBlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ThermalBlackBoxData";
  }
  protected:
  explicit ThermalBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kSourceHeatTransferRateFieldNumber = 2,
    kTargetHeatTransferRateFieldNumber = 3,
    kSourceTemperatureFieldNumber = 4,
    kTargetTemperatureFieldNumber = 5,
    kTemperatureFieldNumber = 6,
    kHeatFieldNumber = 7,
  };
  // .pulse.cdm.bind.BlackBoxData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::BlackBoxData& base() const;
  ::pulse::cdm::bind::BlackBoxData* release_base();
  ::pulse::cdm::bind::BlackBoxData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::BlackBoxData* base);
  private:
  const ::pulse::cdm::bind::BlackBoxData& _internal_base() const;
  ::pulse::cdm::bind::BlackBoxData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::BlackBoxData* base);
  ::pulse::cdm::bind::BlackBoxData* unsafe_arena_release_base();

  // .pulse.cdm.bind.BlackBoxPowerData SourceHeatTransferRate = 2;
  bool has_sourceheattransferrate() const;
  private:
  bool _internal_has_sourceheattransferrate() const;
  public:
  void clear_sourceheattransferrate();
  const ::pulse::cdm::bind::BlackBoxPowerData& sourceheattransferrate() const;
  ::pulse::cdm::bind::BlackBoxPowerData* release_sourceheattransferrate();
  ::pulse::cdm::bind::BlackBoxPowerData* mutable_sourceheattransferrate();
  void set_allocated_sourceheattransferrate(::pulse::cdm::bind::BlackBoxPowerData* sourceheattransferrate);
  private:
  const ::pulse::cdm::bind::BlackBoxPowerData& _internal_sourceheattransferrate() const;
  ::pulse::cdm::bind::BlackBoxPowerData* _internal_mutable_sourceheattransferrate();
  public:
  void unsafe_arena_set_allocated_sourceheattransferrate(
      ::pulse::cdm::bind::BlackBoxPowerData* sourceheattransferrate);
  ::pulse::cdm::bind::BlackBoxPowerData* unsafe_arena_release_sourceheattransferrate();

  // .pulse.cdm.bind.BlackBoxPowerData TargetHeatTransferRate = 3;
  bool has_targetheattransferrate() const;
  private:
  bool _internal_has_targetheattransferrate() const;
  public:
  void clear_targetheattransferrate();
  const ::pulse::cdm::bind::BlackBoxPowerData& targetheattransferrate() const;
  ::pulse::cdm::bind::BlackBoxPowerData* release_targetheattransferrate();
  ::pulse::cdm::bind::BlackBoxPowerData* mutable_targetheattransferrate();
  void set_allocated_targetheattransferrate(::pulse::cdm::bind::BlackBoxPowerData* targetheattransferrate);
  private:
  const ::pulse::cdm::bind::BlackBoxPowerData& _internal_targetheattransferrate() const;
  ::pulse::cdm::bind::BlackBoxPowerData* _internal_mutable_targetheattransferrate();
  public:
  void unsafe_arena_set_allocated_targetheattransferrate(
      ::pulse::cdm::bind::BlackBoxPowerData* targetheattransferrate);
  ::pulse::cdm::bind::BlackBoxPowerData* unsafe_arena_release_targetheattransferrate();

  // .pulse.cdm.bind.BlackBoxTemperatureData SourceTemperature = 4;
  bool has_sourcetemperature() const;
  private:
  bool _internal_has_sourcetemperature() const;
  public:
  void clear_sourcetemperature();
  const ::pulse::cdm::bind::BlackBoxTemperatureData& sourcetemperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* release_sourcetemperature();
  ::pulse::cdm::bind::BlackBoxTemperatureData* mutable_sourcetemperature();
  void set_allocated_sourcetemperature(::pulse::cdm::bind::BlackBoxTemperatureData* sourcetemperature);
  private:
  const ::pulse::cdm::bind::BlackBoxTemperatureData& _internal_sourcetemperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* _internal_mutable_sourcetemperature();
  public:
  void unsafe_arena_set_allocated_sourcetemperature(
      ::pulse::cdm::bind::BlackBoxTemperatureData* sourcetemperature);
  ::pulse::cdm::bind::BlackBoxTemperatureData* unsafe_arena_release_sourcetemperature();

  // .pulse.cdm.bind.BlackBoxTemperatureData TargetTemperature = 5;
  bool has_targettemperature() const;
  private:
  bool _internal_has_targettemperature() const;
  public:
  void clear_targettemperature();
  const ::pulse::cdm::bind::BlackBoxTemperatureData& targettemperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* release_targettemperature();
  ::pulse::cdm::bind::BlackBoxTemperatureData* mutable_targettemperature();
  void set_allocated_targettemperature(::pulse::cdm::bind::BlackBoxTemperatureData* targettemperature);
  private:
  const ::pulse::cdm::bind::BlackBoxTemperatureData& _internal_targettemperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* _internal_mutable_targettemperature();
  public:
  void unsafe_arena_set_allocated_targettemperature(
      ::pulse::cdm::bind::BlackBoxTemperatureData* targettemperature);
  ::pulse::cdm::bind::BlackBoxTemperatureData* unsafe_arena_release_targettemperature();

  // .pulse.cdm.bind.BlackBoxTemperatureData Temperature = 6;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::pulse::cdm::bind::BlackBoxTemperatureData& temperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* release_temperature();
  ::pulse::cdm::bind::BlackBoxTemperatureData* mutable_temperature();
  void set_allocated_temperature(::pulse::cdm::bind::BlackBoxTemperatureData* temperature);
  private:
  const ::pulse::cdm::bind::BlackBoxTemperatureData& _internal_temperature() const;
  ::pulse::cdm::bind::BlackBoxTemperatureData* _internal_mutable_temperature();
  public:
  void unsafe_arena_set_allocated_temperature(
      ::pulse::cdm::bind::BlackBoxTemperatureData* temperature);
  ::pulse::cdm::bind::BlackBoxTemperatureData* unsafe_arena_release_temperature();

  // .pulse.cdm.bind.BlackBoxEnergyData Heat = 7;
  bool has_heat() const;
  private:
  bool _internal_has_heat() const;
  public:
  void clear_heat();
  const ::pulse::cdm::bind::BlackBoxEnergyData& heat() const;
  ::pulse::cdm::bind::BlackBoxEnergyData* release_heat();
  ::pulse::cdm::bind::BlackBoxEnergyData* mutable_heat();
  void set_allocated_heat(::pulse::cdm::bind::BlackBoxEnergyData* heat);
  private:
  const ::pulse::cdm::bind::BlackBoxEnergyData& _internal_heat() const;
  ::pulse::cdm::bind::BlackBoxEnergyData* _internal_mutable_heat();
  public:
  void unsafe_arena_set_allocated_heat(
      ::pulse::cdm::bind::BlackBoxEnergyData* heat);
  ::pulse::cdm::bind::BlackBoxEnergyData* unsafe_arena_release_heat();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ThermalBlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::BlackBoxData* base_;
  ::pulse::cdm::bind::BlackBoxPowerData* sourceheattransferrate_;
  ::pulse::cdm::bind::BlackBoxPowerData* targetheattransferrate_;
  ::pulse::cdm::bind::BlackBoxTemperatureData* sourcetemperature_;
  ::pulse::cdm::bind::BlackBoxTemperatureData* targettemperature_;
  ::pulse::cdm::bind::BlackBoxTemperatureData* temperature_;
  ::pulse::cdm::bind::BlackBoxEnergyData* heat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class GasBlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasBlackBoxData) */ {
 public:
  inline GasBlackBoxData() : GasBlackBoxData(nullptr) {}
  virtual ~GasBlackBoxData();

  GasBlackBoxData(const GasBlackBoxData& from);
  GasBlackBoxData(GasBlackBoxData&& from) noexcept
    : GasBlackBoxData() {
    *this = ::std::move(from);
  }

  inline GasBlackBoxData& operator=(const GasBlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasBlackBoxData& operator=(GasBlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasBlackBoxData& default_instance();

  static inline const GasBlackBoxData* internal_default_instance() {
    return reinterpret_cast<const GasBlackBoxData*>(
               &_GasBlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GasBlackBoxData& a, GasBlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasBlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasBlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasBlackBoxData* New() const final {
    return CreateMaybeMessage<GasBlackBoxData>(nullptr);
  }

  GasBlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasBlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasBlackBoxData& from);
  void MergeFrom(const GasBlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasBlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasBlackBoxData";
  }
  protected:
  explicit GasBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.GasBlackBoxSubstanceData SubstanceQuantity = 2;
  int substancequantity_size() const;
  private:
  int _internal_substancequantity_size() const;
  public:
  void clear_substancequantity();
  ::pulse::cdm::bind::GasBlackBoxSubstanceData* mutable_substancequantity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxSubstanceData >*
      mutable_substancequantity();
  private:
  const ::pulse::cdm::bind::GasBlackBoxSubstanceData& _internal_substancequantity(int index) const;
  ::pulse::cdm::bind::GasBlackBoxSubstanceData* _internal_add_substancequantity();
  public:
  const ::pulse::cdm::bind::GasBlackBoxSubstanceData& substancequantity(int index) const;
  ::pulse::cdm::bind::GasBlackBoxSubstanceData* add_substancequantity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxSubstanceData >&
      substancequantity() const;

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::FluidBlackBoxData& base() const;
  ::pulse::cdm::bind::FluidBlackBoxData* release_base();
  ::pulse::cdm::bind::FluidBlackBoxData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::FluidBlackBoxData* base);
  private:
  const ::pulse::cdm::bind::FluidBlackBoxData& _internal_base() const;
  ::pulse::cdm::bind::FluidBlackBoxData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::FluidBlackBoxData* base);
  ::pulse::cdm::bind::FluidBlackBoxData* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasBlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxSubstanceData > substancequantity_;
  ::pulse::cdm::bind::FluidBlackBoxData* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class LiquidBlackBoxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidBlackBoxData) */ {
 public:
  inline LiquidBlackBoxData() : LiquidBlackBoxData(nullptr) {}
  virtual ~LiquidBlackBoxData();

  LiquidBlackBoxData(const LiquidBlackBoxData& from);
  LiquidBlackBoxData(LiquidBlackBoxData&& from) noexcept
    : LiquidBlackBoxData() {
    *this = ::std::move(from);
  }

  inline LiquidBlackBoxData& operator=(const LiquidBlackBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidBlackBoxData& operator=(LiquidBlackBoxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidBlackBoxData& default_instance();

  static inline const LiquidBlackBoxData* internal_default_instance() {
    return reinterpret_cast<const LiquidBlackBoxData*>(
               &_LiquidBlackBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LiquidBlackBoxData& a, LiquidBlackBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidBlackBoxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidBlackBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidBlackBoxData* New() const final {
    return CreateMaybeMessage<LiquidBlackBoxData>(nullptr);
  }

  LiquidBlackBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidBlackBoxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidBlackBoxData& from);
  void MergeFrom(const LiquidBlackBoxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidBlackBoxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidBlackBoxData";
  }
  protected:
  explicit LiquidBlackBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 2,
    kBaseFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.LiquidBlackBoxSubstanceData SubstanceQuantity = 2;
  int substancequantity_size() const;
  private:
  int _internal_substancequantity_size() const;
  public:
  void clear_substancequantity();
  ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* mutable_substancequantity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >*
      mutable_substancequantity();
  private:
  const ::pulse::cdm::bind::LiquidBlackBoxSubstanceData& _internal_substancequantity(int index) const;
  ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* _internal_add_substancequantity();
  public:
  const ::pulse::cdm::bind::LiquidBlackBoxSubstanceData& substancequantity(int index) const;
  ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* add_substancequantity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >&
      substancequantity() const;

  // .pulse.cdm.bind.FluidBlackBoxData Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::pulse::cdm::bind::FluidBlackBoxData& base() const;
  ::pulse::cdm::bind::FluidBlackBoxData* release_base();
  ::pulse::cdm::bind::FluidBlackBoxData* mutable_base();
  void set_allocated_base(::pulse::cdm::bind::FluidBlackBoxData* base);
  private:
  const ::pulse::cdm::bind::FluidBlackBoxData& _internal_base() const;
  ::pulse::cdm::bind::FluidBlackBoxData* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::pulse::cdm::bind::FluidBlackBoxData* base);
  ::pulse::cdm::bind::FluidBlackBoxData* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidBlackBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData > substancequantity_;
  ::pulse::cdm::bind::FluidBlackBoxData* base_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// -------------------------------------------------------------------

class BlackBoxesData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BlackBoxesData) */ {
 public:
  inline BlackBoxesData() : BlackBoxesData(nullptr) {}
  virtual ~BlackBoxesData();

  BlackBoxesData(const BlackBoxesData& from);
  BlackBoxesData(BlackBoxesData&& from) noexcept
    : BlackBoxesData() {
    *this = ::std::move(from);
  }

  inline BlackBoxesData& operator=(const BlackBoxesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlackBoxesData& operator=(BlackBoxesData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlackBoxesData& default_instance();

  static inline const BlackBoxesData* internal_default_instance() {
    return reinterpret_cast<const BlackBoxesData*>(
               &_BlackBoxesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BlackBoxesData& a, BlackBoxesData& b) {
    a.Swap(&b);
  }
  inline void Swap(BlackBoxesData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlackBoxesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlackBoxesData* New() const final {
    return CreateMaybeMessage<BlackBoxesData>(nullptr);
  }

  BlackBoxesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlackBoxesData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlackBoxesData& from);
  void MergeFrom(const BlackBoxesData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlackBoxesData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BlackBoxesData";
  }
  protected:
  explicit BlackBoxesData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fBlackBox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasBoxFieldNumber = 1,
    kLiquidBoxFieldNumber = 2,
  };
  // repeated .pulse.cdm.bind.GasBlackBoxData GasBox = 1;
  int gasbox_size() const;
  private:
  int _internal_gasbox_size() const;
  public:
  void clear_gasbox();
  ::pulse::cdm::bind::GasBlackBoxData* mutable_gasbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxData >*
      mutable_gasbox();
  private:
  const ::pulse::cdm::bind::GasBlackBoxData& _internal_gasbox(int index) const;
  ::pulse::cdm::bind::GasBlackBoxData* _internal_add_gasbox();
  public:
  const ::pulse::cdm::bind::GasBlackBoxData& gasbox(int index) const;
  ::pulse::cdm::bind::GasBlackBoxData* add_gasbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxData >&
      gasbox() const;

  // repeated .pulse.cdm.bind.LiquidBlackBoxData LiquidBox = 2;
  int liquidbox_size() const;
  private:
  int _internal_liquidbox_size() const;
  public:
  void clear_liquidbox();
  ::pulse::cdm::bind::LiquidBlackBoxData* mutable_liquidbox(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxData >*
      mutable_liquidbox();
  private:
  const ::pulse::cdm::bind::LiquidBlackBoxData& _internal_liquidbox(int index) const;
  ::pulse::cdm::bind::LiquidBlackBoxData* _internal_add_liquidbox();
  public:
  const ::pulse::cdm::bind::LiquidBlackBoxData& liquidbox(int index) const;
  ::pulse::cdm::bind::LiquidBlackBoxData* add_liquidbox();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxData >&
      liquidbox() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BlackBoxesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxData > gasbox_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxData > liquidbox_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fBlackBox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlackBoxPropertyData

// .pulse.cdm.bind.BlackBoxPropertyData.eType Type = 1;
inline void BlackBoxPropertyData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData_eType BlackBoxPropertyData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::BlackBoxPropertyData_eType >(type_);
}
inline ::pulse::cdm::bind::BlackBoxPropertyData_eType BlackBoxPropertyData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxPropertyData.Type)
  return _internal_type();
}
inline void BlackBoxPropertyData::_internal_set_type(::pulse::cdm::bind::BlackBoxPropertyData_eType value) {
  
  type_ = value;
}
inline void BlackBoxPropertyData::set_type(::pulse::cdm::bind::BlackBoxPropertyData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.BlackBoxPropertyData.Type)
}

// -------------------------------------------------------------------

// BlackBoxVolumePerTimeData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxVolumePerTimeData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxVolumePerTimeData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxVolumePerTimeData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxVolumePerTimeData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxVolumePerTimeData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxVolumePerTimeData.Base)
  return _internal_base();
}
inline void BlackBoxVolumePerTimeData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxVolumePerTimeData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumePerTimeData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumePerTimeData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxVolumePerTimeData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumePerTimeData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumePerTimeData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxVolumePerTimeData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxVolumePerTimeData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxVolumePerTimeData.Base)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Property = 2;
inline bool BlackBoxVolumePerTimeData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxVolumePerTimeData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& BlackBoxVolumePerTimeData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& BlackBoxVolumePerTimeData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxVolumePerTimeData.Property)
  return _internal_property();
}
inline void BlackBoxVolumePerTimeData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxVolumePerTimeData.Property)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* BlackBoxVolumePerTimeData::release_property() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* BlackBoxVolumePerTimeData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxVolumePerTimeData.Property)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* BlackBoxVolumePerTimeData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* BlackBoxVolumePerTimeData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxVolumePerTimeData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxVolumePerTimeData::set_allocated_property(::pulse::cdm::bind::ScalarVolumePerTimeData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxVolumePerTimeData.Property)
}

// -------------------------------------------------------------------

// BlackBoxPressureData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxPressureData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxPressureData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxPressureData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxPressureData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxPressureData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxPressureData.Base)
  return _internal_base();
}
inline void BlackBoxPressureData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxPressureData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPressureData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPressureData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxPressureData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPressureData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPressureData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxPressureData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxPressureData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxPressureData.Base)
}

// .pulse.cdm.bind.ScalarPressureData Property = 2;
inline bool BlackBoxPressureData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxPressureData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BlackBoxPressureData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BlackBoxPressureData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxPressureData.Property)
  return _internal_property();
}
inline void BlackBoxPressureData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarPressureData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxPressureData.Property)
}
inline ::pulse::cdm::bind::ScalarPressureData* BlackBoxPressureData::release_property() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BlackBoxPressureData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxPressureData.Property)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BlackBoxPressureData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BlackBoxPressureData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxPressureData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxPressureData::set_allocated_property(::pulse::cdm::bind::ScalarPressureData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxPressureData.Property)
}

// -------------------------------------------------------------------

// BlackBoxVolumeData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxVolumeData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxVolumeData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxVolumeData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxVolumeData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxVolumeData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxVolumeData.Base)
  return _internal_base();
}
inline void BlackBoxVolumeData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxVolumeData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumeData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumeData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxVolumeData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumeData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxVolumeData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxVolumeData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxVolumeData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxVolumeData.Base)
}

// .pulse.cdm.bind.ScalarVolumeData Property = 2;
inline bool BlackBoxVolumeData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxVolumeData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& BlackBoxVolumeData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& BlackBoxVolumeData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxVolumeData.Property)
  return _internal_property();
}
inline void BlackBoxVolumeData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarVolumeData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxVolumeData.Property)
}
inline ::pulse::cdm::bind::ScalarVolumeData* BlackBoxVolumeData::release_property() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BlackBoxVolumeData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxVolumeData.Property)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BlackBoxVolumeData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BlackBoxVolumeData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxVolumeData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxVolumeData::set_allocated_property(::pulse::cdm::bind::ScalarVolumeData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxVolumeData.Property)
}

// -------------------------------------------------------------------

// BlackBoxMassPerVolumeData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxMassPerVolumeData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxMassPerVolumeData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxMassPerVolumeData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxMassPerVolumeData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxMassPerVolumeData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxMassPerVolumeData.Base)
  return _internal_base();
}
inline void BlackBoxMassPerVolumeData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxMassPerVolumeData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxMassPerVolumeData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxMassPerVolumeData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxMassPerVolumeData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxMassPerVolumeData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxMassPerVolumeData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxMassPerVolumeData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxMassPerVolumeData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxMassPerVolumeData.Base)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Property = 2;
inline bool BlackBoxMassPerVolumeData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxMassPerVolumeData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BlackBoxMassPerVolumeData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BlackBoxMassPerVolumeData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxMassPerVolumeData.Property)
  return _internal_property();
}
inline void BlackBoxMassPerVolumeData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxMassPerVolumeData.Property)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BlackBoxMassPerVolumeData::release_property() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BlackBoxMassPerVolumeData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxMassPerVolumeData.Property)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BlackBoxMassPerVolumeData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BlackBoxMassPerVolumeData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxMassPerVolumeData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxMassPerVolumeData::set_allocated_property(::pulse::cdm::bind::ScalarMassPerVolumeData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxMassPerVolumeData.Property)
}

// -------------------------------------------------------------------

// BlackBoxElectricCurrentData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxElectricCurrentData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxElectricCurrentData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxElectricCurrentData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricCurrentData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricCurrentData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricCurrentData.Base)
  return _internal_base();
}
inline void BlackBoxElectricCurrentData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricCurrentData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricCurrentData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricCurrentData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricCurrentData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricCurrentData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricCurrentData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricCurrentData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxElectricCurrentData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricCurrentData.Base)
}

// .pulse.cdm.bind.ScalarElectricCurrentData Property = 2;
inline bool BlackBoxElectricCurrentData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxElectricCurrentData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& BlackBoxElectricCurrentData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarElectricCurrentData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricCurrentData&>(
      ::pulse::cdm::bind::_ScalarElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricCurrentData& BlackBoxElectricCurrentData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricCurrentData.Property)
  return _internal_property();
}
inline void BlackBoxElectricCurrentData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarElectricCurrentData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricCurrentData.Property)
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* BlackBoxElectricCurrentData::release_property() {
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* BlackBoxElectricCurrentData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricCurrentData.Property)
  
  ::pulse::cdm::bind::ScalarElectricCurrentData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* BlackBoxElectricCurrentData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricCurrentData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarElectricCurrentData* BlackBoxElectricCurrentData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricCurrentData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxElectricCurrentData::set_allocated_property(::pulse::cdm::bind::ScalarElectricCurrentData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricCurrentData.Property)
}

// -------------------------------------------------------------------

// BlackBoxElectricPotentialData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxElectricPotentialData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxElectricPotentialData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxElectricPotentialData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricPotentialData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricPotentialData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricPotentialData.Base)
  return _internal_base();
}
inline void BlackBoxElectricPotentialData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricPotentialData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricPotentialData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricPotentialData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricPotentialData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricPotentialData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricPotentialData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricPotentialData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxElectricPotentialData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricPotentialData.Base)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Property = 2;
inline bool BlackBoxElectricPotentialData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxElectricPotentialData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& BlackBoxElectricPotentialData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& BlackBoxElectricPotentialData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricPotentialData.Property)
  return _internal_property();
}
inline void BlackBoxElectricPotentialData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarElectricPotentialData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricPotentialData.Property)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* BlackBoxElectricPotentialData::release_property() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* BlackBoxElectricPotentialData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricPotentialData.Property)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* BlackBoxElectricPotentialData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* BlackBoxElectricPotentialData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricPotentialData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxElectricPotentialData::set_allocated_property(::pulse::cdm::bind::ScalarElectricPotentialData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricPotentialData.Property)
}

// -------------------------------------------------------------------

// BlackBoxElectricChargeData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxElectricChargeData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxElectricChargeData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxElectricChargeData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricChargeData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxElectricChargeData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricChargeData.Base)
  return _internal_base();
}
inline void BlackBoxElectricChargeData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricChargeData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricChargeData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricChargeData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricChargeData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricChargeData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxElectricChargeData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricChargeData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxElectricChargeData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricChargeData.Base)
}

// .pulse.cdm.bind.ScalarElectricChargeData Property = 2;
inline bool BlackBoxElectricChargeData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxElectricChargeData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarElectricChargeData& BlackBoxElectricChargeData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarElectricChargeData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricChargeData&>(
      ::pulse::cdm::bind::_ScalarElectricChargeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricChargeData& BlackBoxElectricChargeData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxElectricChargeData.Property)
  return _internal_property();
}
inline void BlackBoxElectricChargeData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarElectricChargeData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxElectricChargeData.Property)
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* BlackBoxElectricChargeData::release_property() {
  
  ::pulse::cdm::bind::ScalarElectricChargeData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* BlackBoxElectricChargeData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxElectricChargeData.Property)
  
  ::pulse::cdm::bind::ScalarElectricChargeData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* BlackBoxElectricChargeData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricChargeData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarElectricChargeData* BlackBoxElectricChargeData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxElectricChargeData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxElectricChargeData::set_allocated_property(::pulse::cdm::bind::ScalarElectricChargeData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxElectricChargeData.Property)
}

// -------------------------------------------------------------------

// BlackBoxPowerData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxPowerData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxPowerData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxPowerData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxPowerData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxPowerData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxPowerData.Base)
  return _internal_base();
}
inline void BlackBoxPowerData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxPowerData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPowerData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPowerData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxPowerData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPowerData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxPowerData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxPowerData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxPowerData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxPowerData.Base)
}

// .pulse.cdm.bind.ScalarPowerData Property = 2;
inline bool BlackBoxPowerData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxPowerData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarPowerData& BlackBoxPowerData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& BlackBoxPowerData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxPowerData.Property)
  return _internal_property();
}
inline void BlackBoxPowerData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarPowerData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxPowerData.Property)
}
inline ::pulse::cdm::bind::ScalarPowerData* BlackBoxPowerData::release_property() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* BlackBoxPowerData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxPowerData.Property)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* BlackBoxPowerData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarPowerData* BlackBoxPowerData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxPowerData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxPowerData::set_allocated_property(::pulse::cdm::bind::ScalarPowerData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxPowerData.Property)
}

// -------------------------------------------------------------------

// BlackBoxTemperatureData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxTemperatureData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxTemperatureData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxTemperatureData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxTemperatureData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxTemperatureData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxTemperatureData.Base)
  return _internal_base();
}
inline void BlackBoxTemperatureData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxTemperatureData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxTemperatureData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxTemperatureData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxTemperatureData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxTemperatureData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxTemperatureData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxTemperatureData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxTemperatureData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxTemperatureData.Base)
}

// .pulse.cdm.bind.ScalarTemperatureData Property = 2;
inline bool BlackBoxTemperatureData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxTemperatureData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& BlackBoxTemperatureData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& BlackBoxTemperatureData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxTemperatureData.Property)
  return _internal_property();
}
inline void BlackBoxTemperatureData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarTemperatureData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxTemperatureData.Property)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* BlackBoxTemperatureData::release_property() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* BlackBoxTemperatureData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxTemperatureData.Property)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* BlackBoxTemperatureData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* BlackBoxTemperatureData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxTemperatureData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxTemperatureData::set_allocated_property(::pulse::cdm::bind::ScalarTemperatureData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxTemperatureData.Property)
}

// -------------------------------------------------------------------

// BlackBoxEnergyData

// .pulse.cdm.bind.BlackBoxPropertyData Base = 1;
inline bool BlackBoxEnergyData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool BlackBoxEnergyData::has_base() const {
  return _internal_has_base();
}
inline void BlackBoxEnergyData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxEnergyData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxPropertyData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPropertyData&>(
      ::pulse::cdm::bind::_BlackBoxPropertyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPropertyData& BlackBoxEnergyData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxEnergyData.Base)
  return _internal_base();
}
inline void BlackBoxEnergyData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxPropertyData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxEnergyData.Base)
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxEnergyData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxEnergyData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxEnergyData.Base)
  
  ::pulse::cdm::bind::BlackBoxPropertyData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxEnergyData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPropertyData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxPropertyData* BlackBoxEnergyData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxEnergyData.Base)
  return _internal_mutable_base();
}
inline void BlackBoxEnergyData::set_allocated_base(::pulse::cdm::bind::BlackBoxPropertyData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxEnergyData.Base)
}

// .pulse.cdm.bind.ScalarEnergyData Property = 2;
inline bool BlackBoxEnergyData::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BlackBoxEnergyData::has_property() const {
  return _internal_has_property();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& BlackBoxEnergyData::_internal_property() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& BlackBoxEnergyData::property() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxEnergyData.Property)
  return _internal_property();
}
inline void BlackBoxEnergyData::unsafe_arena_set_allocated_property(
    ::pulse::cdm::bind::ScalarEnergyData* property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BlackBoxEnergyData.Property)
}
inline ::pulse::cdm::bind::ScalarEnergyData* BlackBoxEnergyData::release_property() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = property_;
  property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* BlackBoxEnergyData::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxEnergyData.Property)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* BlackBoxEnergyData::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    property_ = p;
  }
  return property_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* BlackBoxEnergyData::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxEnergyData.Property)
  return _internal_mutable_property();
}
inline void BlackBoxEnergyData::set_allocated_property(::pulse::cdm::bind::ScalarEnergyData* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property)->GetArena();
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxEnergyData.Property)
}

// -------------------------------------------------------------------

// BlackBoxSubstanceData

// string Name = 1;
inline void BlackBoxSubstanceData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BlackBoxSubstanceData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxSubstanceData.Name)
  return _internal_name();
}
inline void BlackBoxSubstanceData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.BlackBoxSubstanceData.Name)
}
inline std::string* BlackBoxSubstanceData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxSubstanceData.Name)
  return _internal_mutable_name();
}
inline const std::string& BlackBoxSubstanceData::_internal_name() const {
  return name_.Get();
}
inline void BlackBoxSubstanceData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlackBoxSubstanceData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.BlackBoxSubstanceData.Name)
}
inline void BlackBoxSubstanceData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.BlackBoxSubstanceData.Name)
}
inline void BlackBoxSubstanceData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.BlackBoxSubstanceData.Name)
}
inline std::string* BlackBoxSubstanceData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlackBoxSubstanceData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxSubstanceData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlackBoxSubstanceData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxSubstanceData.Name)
}

// -------------------------------------------------------------------

// GasBlackBoxSubstanceData

// .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
inline bool GasBlackBoxSubstanceData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GasBlackBoxSubstanceData::has_base() const {
  return _internal_has_base();
}
inline void GasBlackBoxSubstanceData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxSubstanceData& GasBlackBoxSubstanceData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxSubstanceData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxSubstanceData&>(
      ::pulse::cdm::bind::_BlackBoxSubstanceData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxSubstanceData& GasBlackBoxSubstanceData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasBlackBoxSubstanceData.Base)
  return _internal_base();
}
inline void GasBlackBoxSubstanceData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxSubstanceData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasBlackBoxSubstanceData.Base)
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* GasBlackBoxSubstanceData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxSubstanceData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* GasBlackBoxSubstanceData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasBlackBoxSubstanceData.Base)
  
  ::pulse::cdm::bind::BlackBoxSubstanceData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* GasBlackBoxSubstanceData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxSubstanceData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* GasBlackBoxSubstanceData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasBlackBoxSubstanceData.Base)
  return _internal_mutable_base();
}
inline void GasBlackBoxSubstanceData::set_allocated_base(::pulse::cdm::bind::BlackBoxSubstanceData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasBlackBoxSubstanceData.Base)
}

// .pulse.cdm.bind.BlackBoxPressureData PartialPressure = 2;
inline bool GasBlackBoxSubstanceData::_internal_has_partialpressure() const {
  return this != internal_default_instance() && partialpressure_ != nullptr;
}
inline bool GasBlackBoxSubstanceData::has_partialpressure() const {
  return _internal_has_partialpressure();
}
inline void GasBlackBoxSubstanceData::clear_partialpressure() {
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& GasBlackBoxSubstanceData::_internal_partialpressure() const {
  const ::pulse::cdm::bind::BlackBoxPressureData* p = partialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPressureData&>(
      ::pulse::cdm::bind::_BlackBoxPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& GasBlackBoxSubstanceData::partialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasBlackBoxSubstanceData.PartialPressure)
  return _internal_partialpressure();
}
inline void GasBlackBoxSubstanceData::unsafe_arena_set_allocated_partialpressure(
    ::pulse::cdm::bind::BlackBoxPressureData* partialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure_);
  }
  partialpressure_ = partialpressure;
  if (partialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasBlackBoxSubstanceData.PartialPressure)
}
inline ::pulse::cdm::bind::BlackBoxPressureData* GasBlackBoxSubstanceData::release_partialpressure() {
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* GasBlackBoxSubstanceData::unsafe_arena_release_partialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasBlackBoxSubstanceData.PartialPressure)
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* GasBlackBoxSubstanceData::_internal_mutable_partialpressure() {
  
  if (partialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPressureData>(GetArena());
    partialpressure_ = p;
  }
  return partialpressure_;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* GasBlackBoxSubstanceData::mutable_partialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasBlackBoxSubstanceData.PartialPressure)
  return _internal_mutable_partialpressure();
}
inline void GasBlackBoxSubstanceData::set_allocated_partialpressure(::pulse::cdm::bind::BlackBoxPressureData* partialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete partialpressure_;
  }
  if (partialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(partialpressure);
    if (message_arena != submessage_arena) {
      partialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partialpressure, submessage_arena);
    }
    
  } else {
    
  }
  partialpressure_ = partialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasBlackBoxSubstanceData.PartialPressure)
}

// -------------------------------------------------------------------

// LiquidBlackBoxSubstanceData

// .pulse.cdm.bind.BlackBoxSubstanceData Base = 1;
inline bool LiquidBlackBoxSubstanceData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool LiquidBlackBoxSubstanceData::has_base() const {
  return _internal_has_base();
}
inline void LiquidBlackBoxSubstanceData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxSubstanceData& LiquidBlackBoxSubstanceData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxSubstanceData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxSubstanceData&>(
      ::pulse::cdm::bind::_BlackBoxSubstanceData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxSubstanceData& LiquidBlackBoxSubstanceData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Base)
  return _internal_base();
}
inline void LiquidBlackBoxSubstanceData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxSubstanceData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Base)
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* LiquidBlackBoxSubstanceData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxSubstanceData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* LiquidBlackBoxSubstanceData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Base)
  
  ::pulse::cdm::bind::BlackBoxSubstanceData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* LiquidBlackBoxSubstanceData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxSubstanceData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxSubstanceData* LiquidBlackBoxSubstanceData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Base)
  return _internal_mutable_base();
}
inline void LiquidBlackBoxSubstanceData::set_allocated_base(::pulse::cdm::bind::BlackBoxSubstanceData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Base)
}

// .pulse.cdm.bind.BlackBoxMassPerVolumeData Concentration = 2;
inline bool LiquidBlackBoxSubstanceData::_internal_has_concentration() const {
  return this != internal_default_instance() && concentration_ != nullptr;
}
inline bool LiquidBlackBoxSubstanceData::has_concentration() const {
  return _internal_has_concentration();
}
inline void LiquidBlackBoxSubstanceData::clear_concentration() {
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxMassPerVolumeData& LiquidBlackBoxSubstanceData::_internal_concentration() const {
  const ::pulse::cdm::bind::BlackBoxMassPerVolumeData* p = concentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxMassPerVolumeData&>(
      ::pulse::cdm::bind::_BlackBoxMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxMassPerVolumeData& LiquidBlackBoxSubstanceData::concentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Concentration)
  return _internal_concentration();
}
inline void LiquidBlackBoxSubstanceData::unsafe_arena_set_allocated_concentration(
    ::pulse::cdm::bind::BlackBoxMassPerVolumeData* concentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  concentration_ = concentration;
  if (concentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Concentration)
}
inline ::pulse::cdm::bind::BlackBoxMassPerVolumeData* LiquidBlackBoxSubstanceData::release_concentration() {
  
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxMassPerVolumeData* LiquidBlackBoxSubstanceData::unsafe_arena_release_concentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Concentration)
  
  ::pulse::cdm::bind::BlackBoxMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxMassPerVolumeData* LiquidBlackBoxSubstanceData::_internal_mutable_concentration() {
  
  if (concentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxMassPerVolumeData>(GetArena());
    concentration_ = p;
  }
  return concentration_;
}
inline ::pulse::cdm::bind::BlackBoxMassPerVolumeData* LiquidBlackBoxSubstanceData::mutable_concentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Concentration)
  return _internal_mutable_concentration();
}
inline void LiquidBlackBoxSubstanceData::set_allocated_concentration(::pulse::cdm::bind::BlackBoxMassPerVolumeData* concentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete concentration_;
  }
  if (concentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concentration);
    if (message_arena != submessage_arena) {
      concentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concentration, submessage_arena);
    }
    
  } else {
    
  }
  concentration_ = concentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidBlackBoxSubstanceData.Concentration)
}

// -------------------------------------------------------------------

// BlackBoxData

// string Name = 1;
inline void BlackBoxData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BlackBoxData::name() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxData.Name)
  return _internal_name();
}
inline void BlackBoxData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.BlackBoxData.Name)
}
inline std::string* BlackBoxData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxData.Name)
  return _internal_mutable_name();
}
inline const std::string& BlackBoxData::_internal_name() const {
  return name_.Get();
}
inline void BlackBoxData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlackBoxData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.BlackBoxData.Name)
}
inline void BlackBoxData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.BlackBoxData.Name)
}
inline void BlackBoxData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.BlackBoxData.Name)
}
inline std::string* BlackBoxData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlackBoxData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BlackBoxData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlackBoxData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BlackBoxData.Name)
}

// -------------------------------------------------------------------

// FluidBlackBoxData

// .pulse.cdm.bind.BlackBoxData Base = 1;
inline bool FluidBlackBoxData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool FluidBlackBoxData::has_base() const {
  return _internal_has_base();
}
inline void FluidBlackBoxData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxData& FluidBlackBoxData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxData&>(
      ::pulse::cdm::bind::_BlackBoxData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxData& FluidBlackBoxData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.Base)
  return _internal_base();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Base)
}
inline ::pulse::cdm::bind::BlackBoxData* FluidBlackBoxData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* FluidBlackBoxData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.Base)
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* FluidBlackBoxData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxData* FluidBlackBoxData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.Base)
  return _internal_mutable_base();
}
inline void FluidBlackBoxData::set_allocated_base(::pulse::cdm::bind::BlackBoxData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Base)
}

// .pulse.cdm.bind.BlackBoxVolumePerTimeData SourceFlow = 2;
inline bool FluidBlackBoxData::_internal_has_sourceflow() const {
  return this != internal_default_instance() && sourceflow_ != nullptr;
}
inline bool FluidBlackBoxData::has_sourceflow() const {
  return _internal_has_sourceflow();
}
inline void FluidBlackBoxData::clear_sourceflow() {
  if (GetArena() == nullptr && sourceflow_ != nullptr) {
    delete sourceflow_;
  }
  sourceflow_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& FluidBlackBoxData::_internal_sourceflow() const {
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData* p = sourceflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxVolumePerTimeData&>(
      ::pulse::cdm::bind::_BlackBoxVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& FluidBlackBoxData::sourceflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.SourceFlow)
  return _internal_sourceflow();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_sourceflow(
    ::pulse::cdm::bind::BlackBoxVolumePerTimeData* sourceflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourceflow_);
  }
  sourceflow_ = sourceflow;
  if (sourceflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.SourceFlow)
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::release_sourceflow() {
  
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* temp = sourceflow_;
  sourceflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::unsafe_arena_release_sourceflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.SourceFlow)
  
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* temp = sourceflow_;
  sourceflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::_internal_mutable_sourceflow() {
  
  if (sourceflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxVolumePerTimeData>(GetArena());
    sourceflow_ = p;
  }
  return sourceflow_;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::mutable_sourceflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.SourceFlow)
  return _internal_mutable_sourceflow();
}
inline void FluidBlackBoxData::set_allocated_sourceflow(::pulse::cdm::bind::BlackBoxVolumePerTimeData* sourceflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourceflow_;
  }
  if (sourceflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourceflow);
    if (message_arena != submessage_arena) {
      sourceflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceflow, submessage_arena);
    }
    
  } else {
    
  }
  sourceflow_ = sourceflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.SourceFlow)
}

// .pulse.cdm.bind.BlackBoxVolumePerTimeData TargetFlow = 3;
inline bool FluidBlackBoxData::_internal_has_targetflow() const {
  return this != internal_default_instance() && targetflow_ != nullptr;
}
inline bool FluidBlackBoxData::has_targetflow() const {
  return _internal_has_targetflow();
}
inline void FluidBlackBoxData::clear_targetflow() {
  if (GetArena() == nullptr && targetflow_ != nullptr) {
    delete targetflow_;
  }
  targetflow_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& FluidBlackBoxData::_internal_targetflow() const {
  const ::pulse::cdm::bind::BlackBoxVolumePerTimeData* p = targetflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxVolumePerTimeData&>(
      ::pulse::cdm::bind::_BlackBoxVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxVolumePerTimeData& FluidBlackBoxData::targetflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.TargetFlow)
  return _internal_targetflow();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_targetflow(
    ::pulse::cdm::bind::BlackBoxVolumePerTimeData* targetflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetflow_);
  }
  targetflow_ = targetflow;
  if (targetflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.TargetFlow)
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::release_targetflow() {
  
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* temp = targetflow_;
  targetflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::unsafe_arena_release_targetflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.TargetFlow)
  
  ::pulse::cdm::bind::BlackBoxVolumePerTimeData* temp = targetflow_;
  targetflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::_internal_mutable_targetflow() {
  
  if (targetflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxVolumePerTimeData>(GetArena());
    targetflow_ = p;
  }
  return targetflow_;
}
inline ::pulse::cdm::bind::BlackBoxVolumePerTimeData* FluidBlackBoxData::mutable_targetflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.TargetFlow)
  return _internal_mutable_targetflow();
}
inline void FluidBlackBoxData::set_allocated_targetflow(::pulse::cdm::bind::BlackBoxVolumePerTimeData* targetflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetflow_;
  }
  if (targetflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetflow);
    if (message_arena != submessage_arena) {
      targetflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetflow, submessage_arena);
    }
    
  } else {
    
  }
  targetflow_ = targetflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.TargetFlow)
}

// .pulse.cdm.bind.BlackBoxPressureData SourcePressure = 4;
inline bool FluidBlackBoxData::_internal_has_sourcepressure() const {
  return this != internal_default_instance() && sourcepressure_ != nullptr;
}
inline bool FluidBlackBoxData::has_sourcepressure() const {
  return _internal_has_sourcepressure();
}
inline void FluidBlackBoxData::clear_sourcepressure() {
  if (GetArena() == nullptr && sourcepressure_ != nullptr) {
    delete sourcepressure_;
  }
  sourcepressure_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::_internal_sourcepressure() const {
  const ::pulse::cdm::bind::BlackBoxPressureData* p = sourcepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPressureData&>(
      ::pulse::cdm::bind::_BlackBoxPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::sourcepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.SourcePressure)
  return _internal_sourcepressure();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_sourcepressure(
    ::pulse::cdm::bind::BlackBoxPressureData* sourcepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcepressure_);
  }
  sourcepressure_ = sourcepressure;
  if (sourcepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.SourcePressure)
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::release_sourcepressure() {
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = sourcepressure_;
  sourcepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::unsafe_arena_release_sourcepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.SourcePressure)
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = sourcepressure_;
  sourcepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::_internal_mutable_sourcepressure() {
  
  if (sourcepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPressureData>(GetArena());
    sourcepressure_ = p;
  }
  return sourcepressure_;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::mutable_sourcepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.SourcePressure)
  return _internal_mutable_sourcepressure();
}
inline void FluidBlackBoxData::set_allocated_sourcepressure(::pulse::cdm::bind::BlackBoxPressureData* sourcepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourcepressure_;
  }
  if (sourcepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourcepressure);
    if (message_arena != submessage_arena) {
      sourcepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcepressure, submessage_arena);
    }
    
  } else {
    
  }
  sourcepressure_ = sourcepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.SourcePressure)
}

// .pulse.cdm.bind.BlackBoxPressureData TargetPressure = 5;
inline bool FluidBlackBoxData::_internal_has_targetpressure() const {
  return this != internal_default_instance() && targetpressure_ != nullptr;
}
inline bool FluidBlackBoxData::has_targetpressure() const {
  return _internal_has_targetpressure();
}
inline void FluidBlackBoxData::clear_targetpressure() {
  if (GetArena() == nullptr && targetpressure_ != nullptr) {
    delete targetpressure_;
  }
  targetpressure_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::_internal_targetpressure() const {
  const ::pulse::cdm::bind::BlackBoxPressureData* p = targetpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPressureData&>(
      ::pulse::cdm::bind::_BlackBoxPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::targetpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.TargetPressure)
  return _internal_targetpressure();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_targetpressure(
    ::pulse::cdm::bind::BlackBoxPressureData* targetpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetpressure_);
  }
  targetpressure_ = targetpressure;
  if (targetpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.TargetPressure)
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::release_targetpressure() {
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = targetpressure_;
  targetpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::unsafe_arena_release_targetpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.TargetPressure)
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = targetpressure_;
  targetpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::_internal_mutable_targetpressure() {
  
  if (targetpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPressureData>(GetArena());
    targetpressure_ = p;
  }
  return targetpressure_;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::mutable_targetpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.TargetPressure)
  return _internal_mutable_targetpressure();
}
inline void FluidBlackBoxData::set_allocated_targetpressure(::pulse::cdm::bind::BlackBoxPressureData* targetpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetpressure_;
  }
  if (targetpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetpressure);
    if (message_arena != submessage_arena) {
      targetpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetpressure, submessage_arena);
    }
    
  } else {
    
  }
  targetpressure_ = targetpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.TargetPressure)
}

// .pulse.cdm.bind.BlackBoxPressureData Pressure = 6;
inline bool FluidBlackBoxData::_internal_has_pressure() const {
  return this != internal_default_instance() && pressure_ != nullptr;
}
inline bool FluidBlackBoxData::has_pressure() const {
  return _internal_has_pressure();
}
inline void FluidBlackBoxData::clear_pressure() {
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::_internal_pressure() const {
  const ::pulse::cdm::bind::BlackBoxPressureData* p = pressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPressureData&>(
      ::pulse::cdm::bind::_BlackBoxPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPressureData& FluidBlackBoxData::pressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.Pressure)
  return _internal_pressure();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_pressure(
    ::pulse::cdm::bind::BlackBoxPressureData* pressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure_);
  }
  pressure_ = pressure;
  if (pressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Pressure)
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::release_pressure() {
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = pressure_;
  pressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::unsafe_arena_release_pressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.Pressure)
  
  ::pulse::cdm::bind::BlackBoxPressureData* temp = pressure_;
  pressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::_internal_mutable_pressure() {
  
  if (pressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPressureData>(GetArena());
    pressure_ = p;
  }
  return pressure_;
}
inline ::pulse::cdm::bind::BlackBoxPressureData* FluidBlackBoxData::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.Pressure)
  return _internal_mutable_pressure();
}
inline void FluidBlackBoxData::set_allocated_pressure(::pulse::cdm::bind::BlackBoxPressureData* pressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pressure_;
  }
  if (pressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pressure);
    if (message_arena != submessage_arena) {
      pressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pressure, submessage_arena);
    }
    
  } else {
    
  }
  pressure_ = pressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Pressure)
}

// .pulse.cdm.bind.BlackBoxVolumeData Volume = 7;
inline bool FluidBlackBoxData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool FluidBlackBoxData::has_volume() const {
  return _internal_has_volume();
}
inline void FluidBlackBoxData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxVolumeData& FluidBlackBoxData::_internal_volume() const {
  const ::pulse::cdm::bind::BlackBoxVolumeData* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxVolumeData&>(
      ::pulse::cdm::bind::_BlackBoxVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxVolumeData& FluidBlackBoxData::volume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.FluidBlackBoxData.Volume)
  return _internal_volume();
}
inline void FluidBlackBoxData::unsafe_arena_set_allocated_volume(
    ::pulse::cdm::bind::BlackBoxVolumeData* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Volume)
}
inline ::pulse::cdm::bind::BlackBoxVolumeData* FluidBlackBoxData::release_volume() {
  
  ::pulse::cdm::bind::BlackBoxVolumeData* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumeData* FluidBlackBoxData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.FluidBlackBoxData.Volume)
  
  ::pulse::cdm::bind::BlackBoxVolumeData* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxVolumeData* FluidBlackBoxData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxVolumeData>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::pulse::cdm::bind::BlackBoxVolumeData* FluidBlackBoxData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.FluidBlackBoxData.Volume)
  return _internal_mutable_volume();
}
inline void FluidBlackBoxData::set_allocated_volume(::pulse::cdm::bind::BlackBoxVolumeData* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.FluidBlackBoxData.Volume)
}

// -------------------------------------------------------------------

// ElectricBlackBoxData

// .pulse.cdm.bind.BlackBoxData Base = 1;
inline bool ElectricBlackBoxData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ElectricBlackBoxData::has_base() const {
  return _internal_has_base();
}
inline void ElectricBlackBoxData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxData& ElectricBlackBoxData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxData&>(
      ::pulse::cdm::bind::_BlackBoxData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxData& ElectricBlackBoxData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.Base)
  return _internal_base();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Base)
}
inline ::pulse::cdm::bind::BlackBoxData* ElectricBlackBoxData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* ElectricBlackBoxData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.Base)
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* ElectricBlackBoxData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxData* ElectricBlackBoxData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.Base)
  return _internal_mutable_base();
}
inline void ElectricBlackBoxData::set_allocated_base(::pulse::cdm::bind::BlackBoxData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Base)
}

// .pulse.cdm.bind.BlackBoxElectricCurrentData SourceCurrent = 2;
inline bool ElectricBlackBoxData::_internal_has_sourcecurrent() const {
  return this != internal_default_instance() && sourcecurrent_ != nullptr;
}
inline bool ElectricBlackBoxData::has_sourcecurrent() const {
  return _internal_has_sourcecurrent();
}
inline void ElectricBlackBoxData::clear_sourcecurrent() {
  if (GetArena() == nullptr && sourcecurrent_ != nullptr) {
    delete sourcecurrent_;
  }
  sourcecurrent_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricCurrentData& ElectricBlackBoxData::_internal_sourcecurrent() const {
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData* p = sourcecurrent_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricCurrentData&>(
      ::pulse::cdm::bind::_BlackBoxElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricCurrentData& ElectricBlackBoxData::sourcecurrent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.SourceCurrent)
  return _internal_sourcecurrent();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_sourcecurrent(
    ::pulse::cdm::bind::BlackBoxElectricCurrentData* sourcecurrent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcecurrent_);
  }
  sourcecurrent_ = sourcecurrent;
  if (sourcecurrent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.SourceCurrent)
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::release_sourcecurrent() {
  
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* temp = sourcecurrent_;
  sourcecurrent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::unsafe_arena_release_sourcecurrent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.SourceCurrent)
  
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* temp = sourcecurrent_;
  sourcecurrent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::_internal_mutable_sourcecurrent() {
  
  if (sourcecurrent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricCurrentData>(GetArena());
    sourcecurrent_ = p;
  }
  return sourcecurrent_;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::mutable_sourcecurrent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.SourceCurrent)
  return _internal_mutable_sourcecurrent();
}
inline void ElectricBlackBoxData::set_allocated_sourcecurrent(::pulse::cdm::bind::BlackBoxElectricCurrentData* sourcecurrent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourcecurrent_;
  }
  if (sourcecurrent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourcecurrent);
    if (message_arena != submessage_arena) {
      sourcecurrent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcecurrent, submessage_arena);
    }
    
  } else {
    
  }
  sourcecurrent_ = sourcecurrent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.SourceCurrent)
}

// .pulse.cdm.bind.BlackBoxElectricCurrentData TargetCurrent = 3;
inline bool ElectricBlackBoxData::_internal_has_targetcurrent() const {
  return this != internal_default_instance() && targetcurrent_ != nullptr;
}
inline bool ElectricBlackBoxData::has_targetcurrent() const {
  return _internal_has_targetcurrent();
}
inline void ElectricBlackBoxData::clear_targetcurrent() {
  if (GetArena() == nullptr && targetcurrent_ != nullptr) {
    delete targetcurrent_;
  }
  targetcurrent_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricCurrentData& ElectricBlackBoxData::_internal_targetcurrent() const {
  const ::pulse::cdm::bind::BlackBoxElectricCurrentData* p = targetcurrent_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricCurrentData&>(
      ::pulse::cdm::bind::_BlackBoxElectricCurrentData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricCurrentData& ElectricBlackBoxData::targetcurrent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.TargetCurrent)
  return _internal_targetcurrent();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_targetcurrent(
    ::pulse::cdm::bind::BlackBoxElectricCurrentData* targetcurrent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetcurrent_);
  }
  targetcurrent_ = targetcurrent;
  if (targetcurrent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.TargetCurrent)
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::release_targetcurrent() {
  
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* temp = targetcurrent_;
  targetcurrent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::unsafe_arena_release_targetcurrent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.TargetCurrent)
  
  ::pulse::cdm::bind::BlackBoxElectricCurrentData* temp = targetcurrent_;
  targetcurrent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::_internal_mutable_targetcurrent() {
  
  if (targetcurrent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricCurrentData>(GetArena());
    targetcurrent_ = p;
  }
  return targetcurrent_;
}
inline ::pulse::cdm::bind::BlackBoxElectricCurrentData* ElectricBlackBoxData::mutable_targetcurrent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.TargetCurrent)
  return _internal_mutable_targetcurrent();
}
inline void ElectricBlackBoxData::set_allocated_targetcurrent(::pulse::cdm::bind::BlackBoxElectricCurrentData* targetcurrent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetcurrent_;
  }
  if (targetcurrent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetcurrent);
    if (message_arena != submessage_arena) {
      targetcurrent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetcurrent, submessage_arena);
    }
    
  } else {
    
  }
  targetcurrent_ = targetcurrent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.TargetCurrent)
}

// .pulse.cdm.bind.BlackBoxElectricPotentialData SourceVoltage = 4;
inline bool ElectricBlackBoxData::_internal_has_sourcevoltage() const {
  return this != internal_default_instance() && sourcevoltage_ != nullptr;
}
inline bool ElectricBlackBoxData::has_sourcevoltage() const {
  return _internal_has_sourcevoltage();
}
inline void ElectricBlackBoxData::clear_sourcevoltage() {
  if (GetArena() == nullptr && sourcevoltage_ != nullptr) {
    delete sourcevoltage_;
  }
  sourcevoltage_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::_internal_sourcevoltage() const {
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData* p = sourcevoltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricPotentialData&>(
      ::pulse::cdm::bind::_BlackBoxElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::sourcevoltage() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.SourceVoltage)
  return _internal_sourcevoltage();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_sourcevoltage(
    ::pulse::cdm::bind::BlackBoxElectricPotentialData* sourcevoltage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcevoltage_);
  }
  sourcevoltage_ = sourcevoltage;
  if (sourcevoltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.SourceVoltage)
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::release_sourcevoltage() {
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = sourcevoltage_;
  sourcevoltage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::unsafe_arena_release_sourcevoltage() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.SourceVoltage)
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = sourcevoltage_;
  sourcevoltage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::_internal_mutable_sourcevoltage() {
  
  if (sourcevoltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricPotentialData>(GetArena());
    sourcevoltage_ = p;
  }
  return sourcevoltage_;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::mutable_sourcevoltage() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.SourceVoltage)
  return _internal_mutable_sourcevoltage();
}
inline void ElectricBlackBoxData::set_allocated_sourcevoltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* sourcevoltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourcevoltage_;
  }
  if (sourcevoltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourcevoltage);
    if (message_arena != submessage_arena) {
      sourcevoltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcevoltage, submessage_arena);
    }
    
  } else {
    
  }
  sourcevoltage_ = sourcevoltage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.SourceVoltage)
}

// .pulse.cdm.bind.BlackBoxElectricPotentialData TargetVoltage = 5;
inline bool ElectricBlackBoxData::_internal_has_targetvoltage() const {
  return this != internal_default_instance() && targetvoltage_ != nullptr;
}
inline bool ElectricBlackBoxData::has_targetvoltage() const {
  return _internal_has_targetvoltage();
}
inline void ElectricBlackBoxData::clear_targetvoltage() {
  if (GetArena() == nullptr && targetvoltage_ != nullptr) {
    delete targetvoltage_;
  }
  targetvoltage_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::_internal_targetvoltage() const {
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData* p = targetvoltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricPotentialData&>(
      ::pulse::cdm::bind::_BlackBoxElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::targetvoltage() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.TargetVoltage)
  return _internal_targetvoltage();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_targetvoltage(
    ::pulse::cdm::bind::BlackBoxElectricPotentialData* targetvoltage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetvoltage_);
  }
  targetvoltage_ = targetvoltage;
  if (targetvoltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.TargetVoltage)
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::release_targetvoltage() {
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = targetvoltage_;
  targetvoltage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::unsafe_arena_release_targetvoltage() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.TargetVoltage)
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = targetvoltage_;
  targetvoltage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::_internal_mutable_targetvoltage() {
  
  if (targetvoltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricPotentialData>(GetArena());
    targetvoltage_ = p;
  }
  return targetvoltage_;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::mutable_targetvoltage() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.TargetVoltage)
  return _internal_mutable_targetvoltage();
}
inline void ElectricBlackBoxData::set_allocated_targetvoltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* targetvoltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetvoltage_;
  }
  if (targetvoltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetvoltage);
    if (message_arena != submessage_arena) {
      targetvoltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetvoltage, submessage_arena);
    }
    
  } else {
    
  }
  targetvoltage_ = targetvoltage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.TargetVoltage)
}

// .pulse.cdm.bind.BlackBoxElectricPotentialData Voltage = 6;
inline bool ElectricBlackBoxData::_internal_has_voltage() const {
  return this != internal_default_instance() && voltage_ != nullptr;
}
inline bool ElectricBlackBoxData::has_voltage() const {
  return _internal_has_voltage();
}
inline void ElectricBlackBoxData::clear_voltage() {
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::_internal_voltage() const {
  const ::pulse::cdm::bind::BlackBoxElectricPotentialData* p = voltage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricPotentialData&>(
      ::pulse::cdm::bind::_BlackBoxElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricPotentialData& ElectricBlackBoxData::voltage() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.Voltage)
  return _internal_voltage();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_voltage(
    ::pulse::cdm::bind::BlackBoxElectricPotentialData* voltage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage_);
  }
  voltage_ = voltage;
  if (voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Voltage)
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::release_voltage() {
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = voltage_;
  voltage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::unsafe_arena_release_voltage() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.Voltage)
  
  ::pulse::cdm::bind::BlackBoxElectricPotentialData* temp = voltage_;
  voltage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::_internal_mutable_voltage() {
  
  if (voltage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricPotentialData>(GetArena());
    voltage_ = p;
  }
  return voltage_;
}
inline ::pulse::cdm::bind::BlackBoxElectricPotentialData* ElectricBlackBoxData::mutable_voltage() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.Voltage)
  return _internal_mutable_voltage();
}
inline void ElectricBlackBoxData::set_allocated_voltage(::pulse::cdm::bind::BlackBoxElectricPotentialData* voltage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete voltage_;
  }
  if (voltage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(voltage);
    if (message_arena != submessage_arena) {
      voltage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltage, submessage_arena);
    }
    
  } else {
    
  }
  voltage_ = voltage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Voltage)
}

// .pulse.cdm.bind.BlackBoxElectricChargeData Charge = 7;
inline bool ElectricBlackBoxData::_internal_has_charge() const {
  return this != internal_default_instance() && charge_ != nullptr;
}
inline bool ElectricBlackBoxData::has_charge() const {
  return _internal_has_charge();
}
inline void ElectricBlackBoxData::clear_charge() {
  if (GetArena() == nullptr && charge_ != nullptr) {
    delete charge_;
  }
  charge_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxElectricChargeData& ElectricBlackBoxData::_internal_charge() const {
  const ::pulse::cdm::bind::BlackBoxElectricChargeData* p = charge_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxElectricChargeData&>(
      ::pulse::cdm::bind::_BlackBoxElectricChargeData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxElectricChargeData& ElectricBlackBoxData::charge() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectricBlackBoxData.Charge)
  return _internal_charge();
}
inline void ElectricBlackBoxData::unsafe_arena_set_allocated_charge(
    ::pulse::cdm::bind::BlackBoxElectricChargeData* charge) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charge_);
  }
  charge_ = charge;
  if (charge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Charge)
}
inline ::pulse::cdm::bind::BlackBoxElectricChargeData* ElectricBlackBoxData::release_charge() {
  
  ::pulse::cdm::bind::BlackBoxElectricChargeData* temp = charge_;
  charge_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricChargeData* ElectricBlackBoxData::unsafe_arena_release_charge() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectricBlackBoxData.Charge)
  
  ::pulse::cdm::bind::BlackBoxElectricChargeData* temp = charge_;
  charge_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxElectricChargeData* ElectricBlackBoxData::_internal_mutable_charge() {
  
  if (charge_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxElectricChargeData>(GetArena());
    charge_ = p;
  }
  return charge_;
}
inline ::pulse::cdm::bind::BlackBoxElectricChargeData* ElectricBlackBoxData::mutable_charge() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectricBlackBoxData.Charge)
  return _internal_mutable_charge();
}
inline void ElectricBlackBoxData::set_allocated_charge(::pulse::cdm::bind::BlackBoxElectricChargeData* charge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete charge_;
  }
  if (charge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(charge);
    if (message_arena != submessage_arena) {
      charge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charge, submessage_arena);
    }
    
  } else {
    
  }
  charge_ = charge;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectricBlackBoxData.Charge)
}

// -------------------------------------------------------------------

// ThermalBlackBoxData

// .pulse.cdm.bind.BlackBoxData Base = 1;
inline bool ThermalBlackBoxData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ThermalBlackBoxData::has_base() const {
  return _internal_has_base();
}
inline void ThermalBlackBoxData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxData& ThermalBlackBoxData::_internal_base() const {
  const ::pulse::cdm::bind::BlackBoxData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxData&>(
      ::pulse::cdm::bind::_BlackBoxData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxData& ThermalBlackBoxData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.Base)
  return _internal_base();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::BlackBoxData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Base)
}
inline ::pulse::cdm::bind::BlackBoxData* ThermalBlackBoxData::release_base() {
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* ThermalBlackBoxData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.Base)
  
  ::pulse::cdm::bind::BlackBoxData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxData* ThermalBlackBoxData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::BlackBoxData* ThermalBlackBoxData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.Base)
  return _internal_mutable_base();
}
inline void ThermalBlackBoxData::set_allocated_base(::pulse::cdm::bind::BlackBoxData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Base)
}

// .pulse.cdm.bind.BlackBoxPowerData SourceHeatTransferRate = 2;
inline bool ThermalBlackBoxData::_internal_has_sourceheattransferrate() const {
  return this != internal_default_instance() && sourceheattransferrate_ != nullptr;
}
inline bool ThermalBlackBoxData::has_sourceheattransferrate() const {
  return _internal_has_sourceheattransferrate();
}
inline void ThermalBlackBoxData::clear_sourceheattransferrate() {
  if (GetArena() == nullptr && sourceheattransferrate_ != nullptr) {
    delete sourceheattransferrate_;
  }
  sourceheattransferrate_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPowerData& ThermalBlackBoxData::_internal_sourceheattransferrate() const {
  const ::pulse::cdm::bind::BlackBoxPowerData* p = sourceheattransferrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPowerData&>(
      ::pulse::cdm::bind::_BlackBoxPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPowerData& ThermalBlackBoxData::sourceheattransferrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.SourceHeatTransferRate)
  return _internal_sourceheattransferrate();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_sourceheattransferrate(
    ::pulse::cdm::bind::BlackBoxPowerData* sourceheattransferrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourceheattransferrate_);
  }
  sourceheattransferrate_ = sourceheattransferrate;
  if (sourceheattransferrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.SourceHeatTransferRate)
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::release_sourceheattransferrate() {
  
  ::pulse::cdm::bind::BlackBoxPowerData* temp = sourceheattransferrate_;
  sourceheattransferrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::unsafe_arena_release_sourceheattransferrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.SourceHeatTransferRate)
  
  ::pulse::cdm::bind::BlackBoxPowerData* temp = sourceheattransferrate_;
  sourceheattransferrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::_internal_mutable_sourceheattransferrate() {
  
  if (sourceheattransferrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPowerData>(GetArena());
    sourceheattransferrate_ = p;
  }
  return sourceheattransferrate_;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::mutable_sourceheattransferrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.SourceHeatTransferRate)
  return _internal_mutable_sourceheattransferrate();
}
inline void ThermalBlackBoxData::set_allocated_sourceheattransferrate(::pulse::cdm::bind::BlackBoxPowerData* sourceheattransferrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourceheattransferrate_;
  }
  if (sourceheattransferrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourceheattransferrate);
    if (message_arena != submessage_arena) {
      sourceheattransferrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourceheattransferrate, submessage_arena);
    }
    
  } else {
    
  }
  sourceheattransferrate_ = sourceheattransferrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.SourceHeatTransferRate)
}

// .pulse.cdm.bind.BlackBoxPowerData TargetHeatTransferRate = 3;
inline bool ThermalBlackBoxData::_internal_has_targetheattransferrate() const {
  return this != internal_default_instance() && targetheattransferrate_ != nullptr;
}
inline bool ThermalBlackBoxData::has_targetheattransferrate() const {
  return _internal_has_targetheattransferrate();
}
inline void ThermalBlackBoxData::clear_targetheattransferrate() {
  if (GetArena() == nullptr && targetheattransferrate_ != nullptr) {
    delete targetheattransferrate_;
  }
  targetheattransferrate_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxPowerData& ThermalBlackBoxData::_internal_targetheattransferrate() const {
  const ::pulse::cdm::bind::BlackBoxPowerData* p = targetheattransferrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxPowerData&>(
      ::pulse::cdm::bind::_BlackBoxPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxPowerData& ThermalBlackBoxData::targetheattransferrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.TargetHeatTransferRate)
  return _internal_targetheattransferrate();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_targetheattransferrate(
    ::pulse::cdm::bind::BlackBoxPowerData* targetheattransferrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetheattransferrate_);
  }
  targetheattransferrate_ = targetheattransferrate;
  if (targetheattransferrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.TargetHeatTransferRate)
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::release_targetheattransferrate() {
  
  ::pulse::cdm::bind::BlackBoxPowerData* temp = targetheattransferrate_;
  targetheattransferrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::unsafe_arena_release_targetheattransferrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.TargetHeatTransferRate)
  
  ::pulse::cdm::bind::BlackBoxPowerData* temp = targetheattransferrate_;
  targetheattransferrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::_internal_mutable_targetheattransferrate() {
  
  if (targetheattransferrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxPowerData>(GetArena());
    targetheattransferrate_ = p;
  }
  return targetheattransferrate_;
}
inline ::pulse::cdm::bind::BlackBoxPowerData* ThermalBlackBoxData::mutable_targetheattransferrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.TargetHeatTransferRate)
  return _internal_mutable_targetheattransferrate();
}
inline void ThermalBlackBoxData::set_allocated_targetheattransferrate(::pulse::cdm::bind::BlackBoxPowerData* targetheattransferrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targetheattransferrate_;
  }
  if (targetheattransferrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targetheattransferrate);
    if (message_arena != submessage_arena) {
      targetheattransferrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetheattransferrate, submessage_arena);
    }
    
  } else {
    
  }
  targetheattransferrate_ = targetheattransferrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.TargetHeatTransferRate)
}

// .pulse.cdm.bind.BlackBoxTemperatureData SourceTemperature = 4;
inline bool ThermalBlackBoxData::_internal_has_sourcetemperature() const {
  return this != internal_default_instance() && sourcetemperature_ != nullptr;
}
inline bool ThermalBlackBoxData::has_sourcetemperature() const {
  return _internal_has_sourcetemperature();
}
inline void ThermalBlackBoxData::clear_sourcetemperature() {
  if (GetArena() == nullptr && sourcetemperature_ != nullptr) {
    delete sourcetemperature_;
  }
  sourcetemperature_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::_internal_sourcetemperature() const {
  const ::pulse::cdm::bind::BlackBoxTemperatureData* p = sourcetemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxTemperatureData&>(
      ::pulse::cdm::bind::_BlackBoxTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::sourcetemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.SourceTemperature)
  return _internal_sourcetemperature();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_sourcetemperature(
    ::pulse::cdm::bind::BlackBoxTemperatureData* sourcetemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcetemperature_);
  }
  sourcetemperature_ = sourcetemperature;
  if (sourcetemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.SourceTemperature)
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::release_sourcetemperature() {
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = sourcetemperature_;
  sourcetemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::unsafe_arena_release_sourcetemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.SourceTemperature)
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = sourcetemperature_;
  sourcetemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::_internal_mutable_sourcetemperature() {
  
  if (sourcetemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxTemperatureData>(GetArena());
    sourcetemperature_ = p;
  }
  return sourcetemperature_;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::mutable_sourcetemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.SourceTemperature)
  return _internal_mutable_sourcetemperature();
}
inline void ThermalBlackBoxData::set_allocated_sourcetemperature(::pulse::cdm::bind::BlackBoxTemperatureData* sourcetemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sourcetemperature_;
  }
  if (sourcetemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sourcetemperature);
    if (message_arena != submessage_arena) {
      sourcetemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcetemperature, submessage_arena);
    }
    
  } else {
    
  }
  sourcetemperature_ = sourcetemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.SourceTemperature)
}

// .pulse.cdm.bind.BlackBoxTemperatureData TargetTemperature = 5;
inline bool ThermalBlackBoxData::_internal_has_targettemperature() const {
  return this != internal_default_instance() && targettemperature_ != nullptr;
}
inline bool ThermalBlackBoxData::has_targettemperature() const {
  return _internal_has_targettemperature();
}
inline void ThermalBlackBoxData::clear_targettemperature() {
  if (GetArena() == nullptr && targettemperature_ != nullptr) {
    delete targettemperature_;
  }
  targettemperature_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::_internal_targettemperature() const {
  const ::pulse::cdm::bind::BlackBoxTemperatureData* p = targettemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxTemperatureData&>(
      ::pulse::cdm::bind::_BlackBoxTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::targettemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.TargetTemperature)
  return _internal_targettemperature();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_targettemperature(
    ::pulse::cdm::bind::BlackBoxTemperatureData* targettemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targettemperature_);
  }
  targettemperature_ = targettemperature;
  if (targettemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.TargetTemperature)
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::release_targettemperature() {
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = targettemperature_;
  targettemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::unsafe_arena_release_targettemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.TargetTemperature)
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = targettemperature_;
  targettemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::_internal_mutable_targettemperature() {
  
  if (targettemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxTemperatureData>(GetArena());
    targettemperature_ = p;
  }
  return targettemperature_;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::mutable_targettemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.TargetTemperature)
  return _internal_mutable_targettemperature();
}
inline void ThermalBlackBoxData::set_allocated_targettemperature(::pulse::cdm::bind::BlackBoxTemperatureData* targettemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete targettemperature_;
  }
  if (targettemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(targettemperature);
    if (message_arena != submessage_arena) {
      targettemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targettemperature, submessage_arena);
    }
    
  } else {
    
  }
  targettemperature_ = targettemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.TargetTemperature)
}

// .pulse.cdm.bind.BlackBoxTemperatureData Temperature = 6;
inline bool ThermalBlackBoxData::_internal_has_temperature() const {
  return this != internal_default_instance() && temperature_ != nullptr;
}
inline bool ThermalBlackBoxData::has_temperature() const {
  return _internal_has_temperature();
}
inline void ThermalBlackBoxData::clear_temperature() {
  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::_internal_temperature() const {
  const ::pulse::cdm::bind::BlackBoxTemperatureData* p = temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxTemperatureData&>(
      ::pulse::cdm::bind::_BlackBoxTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxTemperatureData& ThermalBlackBoxData::temperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.Temperature)
  return _internal_temperature();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_temperature(
    ::pulse::cdm::bind::BlackBoxTemperatureData* temperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature_);
  }
  temperature_ = temperature;
  if (temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Temperature)
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::release_temperature() {
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::unsafe_arena_release_temperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.Temperature)
  
  ::pulse::cdm::bind::BlackBoxTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::_internal_mutable_temperature() {
  
  if (temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxTemperatureData>(GetArena());
    temperature_ = p;
  }
  return temperature_;
}
inline ::pulse::cdm::bind::BlackBoxTemperatureData* ThermalBlackBoxData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.Temperature)
  return _internal_mutable_temperature();
}
inline void ThermalBlackBoxData::set_allocated_temperature(::pulse::cdm::bind::BlackBoxTemperatureData* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete temperature_;
  }
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(temperature);
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Temperature)
}

// .pulse.cdm.bind.BlackBoxEnergyData Heat = 7;
inline bool ThermalBlackBoxData::_internal_has_heat() const {
  return this != internal_default_instance() && heat_ != nullptr;
}
inline bool ThermalBlackBoxData::has_heat() const {
  return _internal_has_heat();
}
inline void ThermalBlackBoxData::clear_heat() {
  if (GetArena() == nullptr && heat_ != nullptr) {
    delete heat_;
  }
  heat_ = nullptr;
}
inline const ::pulse::cdm::bind::BlackBoxEnergyData& ThermalBlackBoxData::_internal_heat() const {
  const ::pulse::cdm::bind::BlackBoxEnergyData* p = heat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::BlackBoxEnergyData&>(
      ::pulse::cdm::bind::_BlackBoxEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::BlackBoxEnergyData& ThermalBlackBoxData::heat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalBlackBoxData.Heat)
  return _internal_heat();
}
inline void ThermalBlackBoxData::unsafe_arena_set_allocated_heat(
    ::pulse::cdm::bind::BlackBoxEnergyData* heat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heat_);
  }
  heat_ = heat;
  if (heat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Heat)
}
inline ::pulse::cdm::bind::BlackBoxEnergyData* ThermalBlackBoxData::release_heat() {
  
  ::pulse::cdm::bind::BlackBoxEnergyData* temp = heat_;
  heat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxEnergyData* ThermalBlackBoxData::unsafe_arena_release_heat() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalBlackBoxData.Heat)
  
  ::pulse::cdm::bind::BlackBoxEnergyData* temp = heat_;
  heat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::BlackBoxEnergyData* ThermalBlackBoxData::_internal_mutable_heat() {
  
  if (heat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::BlackBoxEnergyData>(GetArena());
    heat_ = p;
  }
  return heat_;
}
inline ::pulse::cdm::bind::BlackBoxEnergyData* ThermalBlackBoxData::mutable_heat() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalBlackBoxData.Heat)
  return _internal_mutable_heat();
}
inline void ThermalBlackBoxData::set_allocated_heat(::pulse::cdm::bind::BlackBoxEnergyData* heat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heat_;
  }
  if (heat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heat);
    if (message_arena != submessage_arena) {
      heat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heat, submessage_arena);
    }
    
  } else {
    
  }
  heat_ = heat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalBlackBoxData.Heat)
}

// -------------------------------------------------------------------

// GasBlackBoxData

// .pulse.cdm.bind.FluidBlackBoxData Base = 1;
inline bool GasBlackBoxData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GasBlackBoxData::has_base() const {
  return _internal_has_base();
}
inline void GasBlackBoxData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidBlackBoxData& GasBlackBoxData::_internal_base() const {
  const ::pulse::cdm::bind::FluidBlackBoxData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidBlackBoxData&>(
      ::pulse::cdm::bind::_FluidBlackBoxData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidBlackBoxData& GasBlackBoxData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasBlackBoxData.Base)
  return _internal_base();
}
inline void GasBlackBoxData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::FluidBlackBoxData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasBlackBoxData.Base)
}
inline ::pulse::cdm::bind::FluidBlackBoxData* GasBlackBoxData::release_base() {
  
  ::pulse::cdm::bind::FluidBlackBoxData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* GasBlackBoxData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasBlackBoxData.Base)
  
  ::pulse::cdm::bind::FluidBlackBoxData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* GasBlackBoxData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidBlackBoxData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* GasBlackBoxData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasBlackBoxData.Base)
  return _internal_mutable_base();
}
inline void GasBlackBoxData::set_allocated_base(::pulse::cdm::bind::FluidBlackBoxData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasBlackBoxData.Base)
}

// repeated .pulse.cdm.bind.GasBlackBoxSubstanceData SubstanceQuantity = 2;
inline int GasBlackBoxData::_internal_substancequantity_size() const {
  return substancequantity_.size();
}
inline int GasBlackBoxData::substancequantity_size() const {
  return _internal_substancequantity_size();
}
inline void GasBlackBoxData::clear_substancequantity() {
  substancequantity_.Clear();
}
inline ::pulse::cdm::bind::GasBlackBoxSubstanceData* GasBlackBoxData::mutable_substancequantity(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasBlackBoxData.SubstanceQuantity)
  return substancequantity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxSubstanceData >*
GasBlackBoxData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.GasBlackBoxData.SubstanceQuantity)
  return &substancequantity_;
}
inline const ::pulse::cdm::bind::GasBlackBoxSubstanceData& GasBlackBoxData::_internal_substancequantity(int index) const {
  return substancequantity_.Get(index);
}
inline const ::pulse::cdm::bind::GasBlackBoxSubstanceData& GasBlackBoxData::substancequantity(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasBlackBoxData.SubstanceQuantity)
  return _internal_substancequantity(index);
}
inline ::pulse::cdm::bind::GasBlackBoxSubstanceData* GasBlackBoxData::_internal_add_substancequantity() {
  return substancequantity_.Add();
}
inline ::pulse::cdm::bind::GasBlackBoxSubstanceData* GasBlackBoxData::add_substancequantity() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.GasBlackBoxData.SubstanceQuantity)
  return _internal_add_substancequantity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxSubstanceData >&
GasBlackBoxData::substancequantity() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.GasBlackBoxData.SubstanceQuantity)
  return substancequantity_;
}

// -------------------------------------------------------------------

// LiquidBlackBoxData

// .pulse.cdm.bind.FluidBlackBoxData Base = 1;
inline bool LiquidBlackBoxData::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool LiquidBlackBoxData::has_base() const {
  return _internal_has_base();
}
inline void LiquidBlackBoxData::clear_base() {
  if (GetArena() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
inline const ::pulse::cdm::bind::FluidBlackBoxData& LiquidBlackBoxData::_internal_base() const {
  const ::pulse::cdm::bind::FluidBlackBoxData* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FluidBlackBoxData&>(
      ::pulse::cdm::bind::_FluidBlackBoxData_default_instance_);
}
inline const ::pulse::cdm::bind::FluidBlackBoxData& LiquidBlackBoxData::base() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidBlackBoxData.Base)
  return _internal_base();
}
inline void LiquidBlackBoxData::unsafe_arena_set_allocated_base(
    ::pulse::cdm::bind::FluidBlackBoxData* base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidBlackBoxData.Base)
}
inline ::pulse::cdm::bind::FluidBlackBoxData* LiquidBlackBoxData::release_base() {
  
  ::pulse::cdm::bind::FluidBlackBoxData* temp = base_;
  base_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* LiquidBlackBoxData::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidBlackBoxData.Base)
  
  ::pulse::cdm::bind::FluidBlackBoxData* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* LiquidBlackBoxData::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FluidBlackBoxData>(GetArena());
    base_ = p;
  }
  return base_;
}
inline ::pulse::cdm::bind::FluidBlackBoxData* LiquidBlackBoxData::mutable_base() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidBlackBoxData.Base)
  return _internal_mutable_base();
}
inline void LiquidBlackBoxData::set_allocated_base(::pulse::cdm::bind::FluidBlackBoxData* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidBlackBoxData.Base)
}

// repeated .pulse.cdm.bind.LiquidBlackBoxSubstanceData SubstanceQuantity = 2;
inline int LiquidBlackBoxData::_internal_substancequantity_size() const {
  return substancequantity_.size();
}
inline int LiquidBlackBoxData::substancequantity_size() const {
  return _internal_substancequantity_size();
}
inline void LiquidBlackBoxData::clear_substancequantity() {
  substancequantity_.Clear();
}
inline ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* LiquidBlackBoxData::mutable_substancequantity(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidBlackBoxData.SubstanceQuantity)
  return substancequantity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >*
LiquidBlackBoxData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.LiquidBlackBoxData.SubstanceQuantity)
  return &substancequantity_;
}
inline const ::pulse::cdm::bind::LiquidBlackBoxSubstanceData& LiquidBlackBoxData::_internal_substancequantity(int index) const {
  return substancequantity_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidBlackBoxSubstanceData& LiquidBlackBoxData::substancequantity(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidBlackBoxData.SubstanceQuantity)
  return _internal_substancequantity(index);
}
inline ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* LiquidBlackBoxData::_internal_add_substancequantity() {
  return substancequantity_.Add();
}
inline ::pulse::cdm::bind::LiquidBlackBoxSubstanceData* LiquidBlackBoxData::add_substancequantity() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.LiquidBlackBoxData.SubstanceQuantity)
  return _internal_add_substancequantity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxSubstanceData >&
LiquidBlackBoxData::substancequantity() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.LiquidBlackBoxData.SubstanceQuantity)
  return substancequantity_;
}

// -------------------------------------------------------------------

// BlackBoxesData

// repeated .pulse.cdm.bind.GasBlackBoxData GasBox = 1;
inline int BlackBoxesData::_internal_gasbox_size() const {
  return gasbox_.size();
}
inline int BlackBoxesData::gasbox_size() const {
  return _internal_gasbox_size();
}
inline void BlackBoxesData::clear_gasbox() {
  gasbox_.Clear();
}
inline ::pulse::cdm::bind::GasBlackBoxData* BlackBoxesData::mutable_gasbox(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxesData.GasBox)
  return gasbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxData >*
BlackBoxesData::mutable_gasbox() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.BlackBoxesData.GasBox)
  return &gasbox_;
}
inline const ::pulse::cdm::bind::GasBlackBoxData& BlackBoxesData::_internal_gasbox(int index) const {
  return gasbox_.Get(index);
}
inline const ::pulse::cdm::bind::GasBlackBoxData& BlackBoxesData::gasbox(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxesData.GasBox)
  return _internal_gasbox(index);
}
inline ::pulse::cdm::bind::GasBlackBoxData* BlackBoxesData::_internal_add_gasbox() {
  return gasbox_.Add();
}
inline ::pulse::cdm::bind::GasBlackBoxData* BlackBoxesData::add_gasbox() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.BlackBoxesData.GasBox)
  return _internal_add_gasbox();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::GasBlackBoxData >&
BlackBoxesData::gasbox() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.BlackBoxesData.GasBox)
  return gasbox_;
}

// repeated .pulse.cdm.bind.LiquidBlackBoxData LiquidBox = 2;
inline int BlackBoxesData::_internal_liquidbox_size() const {
  return liquidbox_.size();
}
inline int BlackBoxesData::liquidbox_size() const {
  return _internal_liquidbox_size();
}
inline void BlackBoxesData::clear_liquidbox() {
  liquidbox_.Clear();
}
inline ::pulse::cdm::bind::LiquidBlackBoxData* BlackBoxesData::mutable_liquidbox(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BlackBoxesData.LiquidBox)
  return liquidbox_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxData >*
BlackBoxesData::mutable_liquidbox() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.BlackBoxesData.LiquidBox)
  return &liquidbox_;
}
inline const ::pulse::cdm::bind::LiquidBlackBoxData& BlackBoxesData::_internal_liquidbox(int index) const {
  return liquidbox_.Get(index);
}
inline const ::pulse::cdm::bind::LiquidBlackBoxData& BlackBoxesData::liquidbox(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BlackBoxesData.LiquidBox)
  return _internal_liquidbox(index);
}
inline ::pulse::cdm::bind::LiquidBlackBoxData* BlackBoxesData::_internal_add_liquidbox() {
  return liquidbox_.Add();
}
inline ::pulse::cdm::bind::LiquidBlackBoxData* BlackBoxesData::add_liquidbox() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.BlackBoxesData.LiquidBox)
  return _internal_add_liquidbox();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::LiquidBlackBoxData >&
BlackBoxesData::liquidbox() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.BlackBoxesData.LiquidBox)
  return liquidbox_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::BlackBoxPropertyData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::BlackBoxPropertyData_eType>() {
  return ::pulse::cdm::bind::BlackBoxPropertyData_eType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fBlackBox_2eproto
