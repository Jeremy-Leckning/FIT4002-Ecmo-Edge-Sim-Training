// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/SubstanceQuantity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class GasSubstanceQuantityData;
class GasSubstanceQuantityDataDefaultTypeInternal;
extern GasSubstanceQuantityDataDefaultTypeInternal _GasSubstanceQuantityData_default_instance_;
class LiquidSubstanceQuantityData;
class LiquidSubstanceQuantityDataDefaultTypeInternal;
extern LiquidSubstanceQuantityDataDefaultTypeInternal _LiquidSubstanceQuantityData_default_instance_;
class SubstanceQuantityData;
class SubstanceQuantityDataDefaultTypeInternal;
extern SubstanceQuantityDataDefaultTypeInternal _SubstanceQuantityData_default_instance_;
class TissueSubstanceQuantityData;
class TissueSubstanceQuantityDataDefaultTypeInternal;
extern TissueSubstanceQuantityDataDefaultTypeInternal _TissueSubstanceQuantityData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::GasSubstanceQuantityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GasSubstanceQuantityData>(Arena*);
template<> ::pulse::cdm::bind::LiquidSubstanceQuantityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LiquidSubstanceQuantityData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceQuantityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceQuantityData>(Arena*);
template<> ::pulse::cdm::bind::TissueSubstanceQuantityData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TissueSubstanceQuantityData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class SubstanceQuantityData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceQuantityData) */ {
 public:
  inline SubstanceQuantityData() : SubstanceQuantityData(nullptr) {}
  virtual ~SubstanceQuantityData();

  SubstanceQuantityData(const SubstanceQuantityData& from);
  SubstanceQuantityData(SubstanceQuantityData&& from) noexcept
    : SubstanceQuantityData() {
    *this = ::std::move(from);
  }

  inline SubstanceQuantityData& operator=(const SubstanceQuantityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceQuantityData& operator=(SubstanceQuantityData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceQuantityData& default_instance();

  static inline const SubstanceQuantityData* internal_default_instance() {
    return reinterpret_cast<const SubstanceQuantityData*>(
               &_SubstanceQuantityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubstanceQuantityData& a, SubstanceQuantityData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceQuantityData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceQuantityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceQuantityData* New() const final {
    return CreateMaybeMessage<SubstanceQuantityData>(nullptr);
  }

  SubstanceQuantityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceQuantityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceQuantityData& from);
  void MergeFrom(const SubstanceQuantityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceQuantityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceQuantityData";
  }
  protected:
  explicit SubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceFieldNumber = 1,
  };
  // string Substance = 1;
  void clear_substance();
  const std::string& substance() const;
  void set_substance(const std::string& value);
  void set_substance(std::string&& value);
  void set_substance(const char* value);
  void set_substance(const char* value, size_t size);
  std::string* mutable_substance();
  std::string* release_substance();
  void set_allocated_substance(std::string* substance);
  private:
  const std::string& _internal_substance() const;
  void _internal_set_substance(const std::string& value);
  std::string* _internal_mutable_substance();
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceQuantityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
};
// -------------------------------------------------------------------

class GasSubstanceQuantityData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GasSubstanceQuantityData) */ {
 public:
  inline GasSubstanceQuantityData() : GasSubstanceQuantityData(nullptr) {}
  virtual ~GasSubstanceQuantityData();

  GasSubstanceQuantityData(const GasSubstanceQuantityData& from);
  GasSubstanceQuantityData(GasSubstanceQuantityData&& from) noexcept
    : GasSubstanceQuantityData() {
    *this = ::std::move(from);
  }

  inline GasSubstanceQuantityData& operator=(const GasSubstanceQuantityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasSubstanceQuantityData& operator=(GasSubstanceQuantityData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GasSubstanceQuantityData& default_instance();

  static inline const GasSubstanceQuantityData* internal_default_instance() {
    return reinterpret_cast<const GasSubstanceQuantityData*>(
               &_GasSubstanceQuantityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GasSubstanceQuantityData& a, GasSubstanceQuantityData& b) {
    a.Swap(&b);
  }
  inline void Swap(GasSubstanceQuantityData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasSubstanceQuantityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GasSubstanceQuantityData* New() const final {
    return CreateMaybeMessage<GasSubstanceQuantityData>(nullptr);
  }

  GasSubstanceQuantityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GasSubstanceQuantityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GasSubstanceQuantityData& from);
  void MergeFrom(const GasSubstanceQuantityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasSubstanceQuantityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GasSubstanceQuantityData";
  }
  protected:
  explicit GasSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 1,
    kPartialPressureFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kVolumeFractionFieldNumber = 4,
  };
  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  bool has_substancequantity() const;
  private:
  bool _internal_has_substancequantity() const;
  public:
  void clear_substancequantity();
  const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* release_substancequantity();
  ::pulse::cdm::bind::SubstanceQuantityData* mutable_substancequantity();
  void set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  private:
  const ::pulse::cdm::bind::SubstanceQuantityData& _internal_substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* _internal_mutable_substancequantity();
  public:
  void unsafe_arena_set_allocated_substancequantity(
      ::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  ::pulse::cdm::bind::SubstanceQuantityData* unsafe_arena_release_substancequantity();

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 2;
  bool has_partialpressure() const;
  private:
  bool _internal_has_partialpressure() const;
  public:
  void clear_partialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& partialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_partialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_partialpressure();
  void set_allocated_partialpressure(::pulse::cdm::bind::ScalarPressureData* partialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_partialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_partialpressure();
  public:
  void unsafe_arena_set_allocated_partialpressure(
      ::pulse::cdm::bind::ScalarPressureData* partialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_partialpressure();

  // .pulse.cdm.bind.ScalarVolumeData Volume = 3;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::pulse::cdm::bind::ScalarVolumeData& volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_volume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_volume();
  void set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::pulse::cdm::bind::ScalarVolumeData* volume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_volume();

  // .pulse.cdm.bind.Scalar0To1Data VolumeFraction = 4;
  bool has_volumefraction() const;
  private:
  bool _internal_has_volumefraction() const;
  public:
  void clear_volumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& volumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_volumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_volumefraction();
  void set_allocated_volumefraction(::pulse::cdm::bind::Scalar0To1Data* volumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_volumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_volumefraction();
  public:
  void unsafe_arena_set_allocated_volumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* volumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_volumefraction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GasSubstanceQuantityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::SubstanceQuantityData* substancequantity_;
  ::pulse::cdm::bind::ScalarPressureData* partialpressure_;
  ::pulse::cdm::bind::ScalarVolumeData* volume_;
  ::pulse::cdm::bind::Scalar0To1Data* volumefraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
};
// -------------------------------------------------------------------

class LiquidSubstanceQuantityData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LiquidSubstanceQuantityData) */ {
 public:
  inline LiquidSubstanceQuantityData() : LiquidSubstanceQuantityData(nullptr) {}
  virtual ~LiquidSubstanceQuantityData();

  LiquidSubstanceQuantityData(const LiquidSubstanceQuantityData& from);
  LiquidSubstanceQuantityData(LiquidSubstanceQuantityData&& from) noexcept
    : LiquidSubstanceQuantityData() {
    *this = ::std::move(from);
  }

  inline LiquidSubstanceQuantityData& operator=(const LiquidSubstanceQuantityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidSubstanceQuantityData& operator=(LiquidSubstanceQuantityData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LiquidSubstanceQuantityData& default_instance();

  static inline const LiquidSubstanceQuantityData* internal_default_instance() {
    return reinterpret_cast<const LiquidSubstanceQuantityData*>(
               &_LiquidSubstanceQuantityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LiquidSubstanceQuantityData& a, LiquidSubstanceQuantityData& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidSubstanceQuantityData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidSubstanceQuantityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiquidSubstanceQuantityData* New() const final {
    return CreateMaybeMessage<LiquidSubstanceQuantityData>(nullptr);
  }

  LiquidSubstanceQuantityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiquidSubstanceQuantityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LiquidSubstanceQuantityData& from);
  void MergeFrom(const LiquidSubstanceQuantityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidSubstanceQuantityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LiquidSubstanceQuantityData";
  }
  protected:
  explicit LiquidSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 1,
    kConcentrationFieldNumber = 2,
    kMassFieldNumber = 3,
    kMassClearedFieldNumber = 4,
    kMassDepositedFieldNumber = 5,
    kMassExcretedFieldNumber = 6,
    kMolarityFieldNumber = 7,
    kPartialPressureFieldNumber = 8,
    kSaturationFieldNumber = 9,
  };
  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  bool has_substancequantity() const;
  private:
  bool _internal_has_substancequantity() const;
  public:
  void clear_substancequantity();
  const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* release_substancequantity();
  ::pulse::cdm::bind::SubstanceQuantityData* mutable_substancequantity();
  void set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  private:
  const ::pulse::cdm::bind::SubstanceQuantityData& _internal_substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* _internal_mutable_substancequantity();
  public:
  void unsafe_arena_set_allocated_substancequantity(
      ::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  ::pulse::cdm::bind::SubstanceQuantityData* unsafe_arena_release_substancequantity();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  bool has_concentration() const;
  private:
  bool _internal_has_concentration() const;
  public:
  void clear_concentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_concentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_concentration();
  void set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_concentration();
  public:
  void unsafe_arena_set_allocated_concentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_concentration();

  // .pulse.cdm.bind.ScalarMassData Mass = 3;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  const ::pulse::cdm::bind::ScalarMassData& mass() const;
  ::pulse::cdm::bind::ScalarMassData* release_mass();
  ::pulse::cdm::bind::ScalarMassData* mutable_mass();
  void set_allocated_mass(::pulse::cdm::bind::ScalarMassData* mass);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_mass() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_mass();
  public:
  void unsafe_arena_set_allocated_mass(
      ::pulse::cdm::bind::ScalarMassData* mass);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_mass();

  // .pulse.cdm.bind.ScalarMassData MassCleared = 4;
  bool has_masscleared() const;
  private:
  bool _internal_has_masscleared() const;
  public:
  void clear_masscleared();
  const ::pulse::cdm::bind::ScalarMassData& masscleared() const;
  ::pulse::cdm::bind::ScalarMassData* release_masscleared();
  ::pulse::cdm::bind::ScalarMassData* mutable_masscleared();
  void set_allocated_masscleared(::pulse::cdm::bind::ScalarMassData* masscleared);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_masscleared() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_masscleared();
  public:
  void unsafe_arena_set_allocated_masscleared(
      ::pulse::cdm::bind::ScalarMassData* masscleared);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_masscleared();

  // .pulse.cdm.bind.ScalarMassData MassDeposited = 5;
  bool has_massdeposited() const;
  private:
  bool _internal_has_massdeposited() const;
  public:
  void clear_massdeposited();
  const ::pulse::cdm::bind::ScalarMassData& massdeposited() const;
  ::pulse::cdm::bind::ScalarMassData* release_massdeposited();
  ::pulse::cdm::bind::ScalarMassData* mutable_massdeposited();
  void set_allocated_massdeposited(::pulse::cdm::bind::ScalarMassData* massdeposited);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_massdeposited() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_massdeposited();
  public:
  void unsafe_arena_set_allocated_massdeposited(
      ::pulse::cdm::bind::ScalarMassData* massdeposited);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_massdeposited();

  // .pulse.cdm.bind.ScalarMassData MassExcreted = 6;
  bool has_massexcreted() const;
  private:
  bool _internal_has_massexcreted() const;
  public:
  void clear_massexcreted();
  const ::pulse::cdm::bind::ScalarMassData& massexcreted() const;
  ::pulse::cdm::bind::ScalarMassData* release_massexcreted();
  ::pulse::cdm::bind::ScalarMassData* mutable_massexcreted();
  void set_allocated_massexcreted(::pulse::cdm::bind::ScalarMassData* massexcreted);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_massexcreted() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_massexcreted();
  public:
  void unsafe_arena_set_allocated_massexcreted(
      ::pulse::cdm::bind::ScalarMassData* massexcreted);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_massexcreted();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Molarity = 7;
  bool has_molarity() const;
  private:
  bool _internal_has_molarity() const;
  public:
  void clear_molarity();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& molarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_molarity();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_molarity();
  void set_allocated_molarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* molarity);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_molarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_molarity();
  public:
  void unsafe_arena_set_allocated_molarity(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* molarity);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_molarity();

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 8;
  bool has_partialpressure() const;
  private:
  bool _internal_has_partialpressure() const;
  public:
  void clear_partialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& partialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_partialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_partialpressure();
  void set_allocated_partialpressure(::pulse::cdm::bind::ScalarPressureData* partialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_partialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_partialpressure();
  public:
  void unsafe_arena_set_allocated_partialpressure(
      ::pulse::cdm::bind::ScalarPressureData* partialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_partialpressure();

  // .pulse.cdm.bind.Scalar0To1Data Saturation = 9;
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  const ::pulse::cdm::bind::Scalar0To1Data& saturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_saturation();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_saturation();
  void set_allocated_saturation(::pulse::cdm::bind::Scalar0To1Data* saturation);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_saturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_saturation();
  public:
  void unsafe_arena_set_allocated_saturation(
      ::pulse::cdm::bind::Scalar0To1Data* saturation);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_saturation();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LiquidSubstanceQuantityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::SubstanceQuantityData* substancequantity_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration_;
  ::pulse::cdm::bind::ScalarMassData* mass_;
  ::pulse::cdm::bind::ScalarMassData* masscleared_;
  ::pulse::cdm::bind::ScalarMassData* massdeposited_;
  ::pulse::cdm::bind::ScalarMassData* massexcreted_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* molarity_;
  ::pulse::cdm::bind::ScalarPressureData* partialpressure_;
  ::pulse::cdm::bind::Scalar0To1Data* saturation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
};
// -------------------------------------------------------------------

class TissueSubstanceQuantityData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TissueSubstanceQuantityData) */ {
 public:
  inline TissueSubstanceQuantityData() : TissueSubstanceQuantityData(nullptr) {}
  virtual ~TissueSubstanceQuantityData();

  TissueSubstanceQuantityData(const TissueSubstanceQuantityData& from);
  TissueSubstanceQuantityData(TissueSubstanceQuantityData&& from) noexcept
    : TissueSubstanceQuantityData() {
    *this = ::std::move(from);
  }

  inline TissueSubstanceQuantityData& operator=(const TissueSubstanceQuantityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TissueSubstanceQuantityData& operator=(TissueSubstanceQuantityData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TissueSubstanceQuantityData& default_instance();

  static inline const TissueSubstanceQuantityData* internal_default_instance() {
    return reinterpret_cast<const TissueSubstanceQuantityData*>(
               &_TissueSubstanceQuantityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TissueSubstanceQuantityData& a, TissueSubstanceQuantityData& b) {
    a.Swap(&b);
  }
  inline void Swap(TissueSubstanceQuantityData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TissueSubstanceQuantityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TissueSubstanceQuantityData* New() const final {
    return CreateMaybeMessage<TissueSubstanceQuantityData>(nullptr);
  }

  TissueSubstanceQuantityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TissueSubstanceQuantityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TissueSubstanceQuantityData& from);
  void MergeFrom(const TissueSubstanceQuantityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TissueSubstanceQuantityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TissueSubstanceQuantityData";
  }
  protected:
  explicit TissueSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceQuantityFieldNumber = 1,
    kTissueConcentrationFieldNumber = 2,
    kTissueMolarityFieldNumber = 3,
    kExtravascularConcentrationFieldNumber = 4,
    kExtravascularMolarityFieldNumber = 5,
    kExtravascularPartialPressureFieldNumber = 6,
    kExtravascularSaturationFieldNumber = 7,
  };
  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  bool has_substancequantity() const;
  private:
  bool _internal_has_substancequantity() const;
  public:
  void clear_substancequantity();
  const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* release_substancequantity();
  ::pulse::cdm::bind::SubstanceQuantityData* mutable_substancequantity();
  void set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  private:
  const ::pulse::cdm::bind::SubstanceQuantityData& _internal_substancequantity() const;
  ::pulse::cdm::bind::SubstanceQuantityData* _internal_mutable_substancequantity();
  public:
  void unsafe_arena_set_allocated_substancequantity(
      ::pulse::cdm::bind::SubstanceQuantityData* substancequantity);
  ::pulse::cdm::bind::SubstanceQuantityData* unsafe_arena_release_substancequantity();

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 2;
  bool has_tissueconcentration() const;
  private:
  bool _internal_has_tissueconcentration() const;
  public:
  void clear_tissueconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& tissueconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_tissueconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_tissueconcentration();
  void set_allocated_tissueconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_tissueconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_tissueconcentration();
  public:
  void unsafe_arena_set_allocated_tissueconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_tissueconcentration();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData TissueMolarity = 3;
  bool has_tissuemolarity() const;
  private:
  bool _internal_has_tissuemolarity() const;
  public:
  void clear_tissuemolarity();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& tissuemolarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_tissuemolarity();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_tissuemolarity();
  void set_allocated_tissuemolarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* tissuemolarity);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_tissuemolarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_tissuemolarity();
  public:
  void unsafe_arena_set_allocated_tissuemolarity(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* tissuemolarity);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_tissuemolarity();

  // .pulse.cdm.bind.ScalarMassPerVolumeData ExtravascularConcentration = 4;
  bool has_extravascularconcentration() const;
  private:
  bool _internal_has_extravascularconcentration() const;
  public:
  void clear_extravascularconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& extravascularconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_extravascularconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_extravascularconcentration();
  void set_allocated_extravascularconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* extravascularconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_extravascularconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_extravascularconcentration();
  public:
  void unsafe_arena_set_allocated_extravascularconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* extravascularconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_extravascularconcentration();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData ExtravascularMolarity = 5;
  bool has_extravascularmolarity() const;
  private:
  bool _internal_has_extravascularmolarity() const;
  public:
  void clear_extravascularmolarity();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& extravascularmolarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_extravascularmolarity();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_extravascularmolarity();
  void set_allocated_extravascularmolarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* extravascularmolarity);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_extravascularmolarity() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_extravascularmolarity();
  public:
  void unsafe_arena_set_allocated_extravascularmolarity(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* extravascularmolarity);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_extravascularmolarity();

  // .pulse.cdm.bind.ScalarPressureData ExtravascularPartialPressure = 6;
  bool has_extravascularpartialpressure() const;
  private:
  bool _internal_has_extravascularpartialpressure() const;
  public:
  void clear_extravascularpartialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& extravascularpartialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_extravascularpartialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_extravascularpartialpressure();
  void set_allocated_extravascularpartialpressure(::pulse::cdm::bind::ScalarPressureData* extravascularpartialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_extravascularpartialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_extravascularpartialpressure();
  public:
  void unsafe_arena_set_allocated_extravascularpartialpressure(
      ::pulse::cdm::bind::ScalarPressureData* extravascularpartialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_extravascularpartialpressure();

  // .pulse.cdm.bind.Scalar0To1Data ExtravascularSaturation = 7;
  bool has_extravascularsaturation() const;
  private:
  bool _internal_has_extravascularsaturation() const;
  public:
  void clear_extravascularsaturation();
  const ::pulse::cdm::bind::Scalar0To1Data& extravascularsaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_extravascularsaturation();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_extravascularsaturation();
  void set_allocated_extravascularsaturation(::pulse::cdm::bind::Scalar0To1Data* extravascularsaturation);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_extravascularsaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_extravascularsaturation();
  public:
  void unsafe_arena_set_allocated_extravascularsaturation(
      ::pulse::cdm::bind::Scalar0To1Data* extravascularsaturation);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_extravascularsaturation();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TissueSubstanceQuantityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::SubstanceQuantityData* substancequantity_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* tissuemolarity_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* extravascularconcentration_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* extravascularmolarity_;
  ::pulse::cdm::bind::ScalarPressureData* extravascularpartialpressure_;
  ::pulse::cdm::bind::Scalar0To1Data* extravascularsaturation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubstanceQuantityData

// string Substance = 1;
inline void SubstanceQuantityData::clear_substance() {
  substance_.ClearToEmpty();
}
inline const std::string& SubstanceQuantityData::substance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceQuantityData.Substance)
  return _internal_substance();
}
inline void SubstanceQuantityData::set_substance(const std::string& value) {
  _internal_set_substance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceQuantityData.Substance)
}
inline std::string* SubstanceQuantityData::mutable_substance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceQuantityData.Substance)
  return _internal_mutable_substance();
}
inline const std::string& SubstanceQuantityData::_internal_substance() const {
  return substance_.Get();
}
inline void SubstanceQuantityData::_internal_set_substance(const std::string& value) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceQuantityData::set_substance(std::string&& value) {
  
  substance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceQuantityData.Substance)
}
inline void SubstanceQuantityData::set_substance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceQuantityData.Substance)
}
inline void SubstanceQuantityData::set_substance(const char* value,
    size_t size) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceQuantityData.Substance)
}
inline std::string* SubstanceQuantityData::_internal_mutable_substance() {
  
  return substance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceQuantityData::release_substance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceQuantityData.Substance)
  return substance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceQuantityData::set_allocated_substance(std::string* substance) {
  if (substance != nullptr) {
    
  } else {
    
  }
  substance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceQuantityData.Substance)
}

// -------------------------------------------------------------------

// GasSubstanceQuantityData

// .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
inline bool GasSubstanceQuantityData::_internal_has_substancequantity() const {
  return this != internal_default_instance() && substancequantity_ != nullptr;
}
inline bool GasSubstanceQuantityData::has_substancequantity() const {
  return _internal_has_substancequantity();
}
inline void GasSubstanceQuantityData::clear_substancequantity() {
  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& GasSubstanceQuantityData::_internal_substancequantity() const {
  const ::pulse::cdm::bind::SubstanceQuantityData* p = substancequantity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceQuantityData&>(
      ::pulse::cdm::bind::_SubstanceQuantityData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& GasSubstanceQuantityData::substancequantity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasSubstanceQuantityData.SubstanceQuantity)
  return _internal_substancequantity();
}
inline void GasSubstanceQuantityData::unsafe_arena_set_allocated_substancequantity(
    ::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancequantity_);
  }
  substancequantity_ = substancequantity;
  if (substancequantity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.SubstanceQuantity)
}
inline ::pulse::cdm::bind::SubstanceQuantityData* GasSubstanceQuantityData::release_substancequantity() {
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* GasSubstanceQuantityData::unsafe_arena_release_substancequantity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasSubstanceQuantityData.SubstanceQuantity)
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* GasSubstanceQuantityData::_internal_mutable_substancequantity() {
  
  if (substancequantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceQuantityData>(GetArena());
    substancequantity_ = p;
  }
  return substancequantity_;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* GasSubstanceQuantityData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasSubstanceQuantityData.SubstanceQuantity)
  return _internal_mutable_substancequantity();
}
inline void GasSubstanceQuantityData::set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete substancequantity_;
  }
  if (substancequantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substancequantity);
    if (message_arena != submessage_arena) {
      substancequantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancequantity, submessage_arena);
    }
    
  } else {
    
  }
  substancequantity_ = substancequantity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.SubstanceQuantity)
}

// .pulse.cdm.bind.ScalarPressureData PartialPressure = 2;
inline bool GasSubstanceQuantityData::_internal_has_partialpressure() const {
  return this != internal_default_instance() && partialpressure_ != nullptr;
}
inline bool GasSubstanceQuantityData::has_partialpressure() const {
  return _internal_has_partialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& GasSubstanceQuantityData::_internal_partialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = partialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& GasSubstanceQuantityData::partialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasSubstanceQuantityData.PartialPressure)
  return _internal_partialpressure();
}
inline void GasSubstanceQuantityData::unsafe_arena_set_allocated_partialpressure(
    ::pulse::cdm::bind::ScalarPressureData* partialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure_);
  }
  partialpressure_ = partialpressure;
  if (partialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.PartialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* GasSubstanceQuantityData::release_partialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* GasSubstanceQuantityData::unsafe_arena_release_partialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasSubstanceQuantityData.PartialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* GasSubstanceQuantityData::_internal_mutable_partialpressure() {
  
  if (partialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    partialpressure_ = p;
  }
  return partialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* GasSubstanceQuantityData::mutable_partialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasSubstanceQuantityData.PartialPressure)
  return _internal_mutable_partialpressure();
}
inline void GasSubstanceQuantityData::set_allocated_partialpressure(::pulse::cdm::bind::ScalarPressureData* partialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure_);
  }
  if (partialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      partialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partialpressure, submessage_arena);
    }
    
  } else {
    
  }
  partialpressure_ = partialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.PartialPressure)
}

// .pulse.cdm.bind.ScalarVolumeData Volume = 3;
inline bool GasSubstanceQuantityData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool GasSubstanceQuantityData::has_volume() const {
  return _internal_has_volume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& GasSubstanceQuantityData::_internal_volume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& GasSubstanceQuantityData::volume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasSubstanceQuantityData.Volume)
  return _internal_volume();
}
inline void GasSubstanceQuantityData::unsafe_arena_set_allocated_volume(
    ::pulse::cdm::bind::ScalarVolumeData* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.Volume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* GasSubstanceQuantityData::release_volume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* GasSubstanceQuantityData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasSubstanceQuantityData.Volume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* GasSubstanceQuantityData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* GasSubstanceQuantityData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasSubstanceQuantityData.Volume)
  return _internal_mutable_volume();
}
inline void GasSubstanceQuantityData::set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume)->GetArena();
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.Volume)
}

// .pulse.cdm.bind.Scalar0To1Data VolumeFraction = 4;
inline bool GasSubstanceQuantityData::_internal_has_volumefraction() const {
  return this != internal_default_instance() && volumefraction_ != nullptr;
}
inline bool GasSubstanceQuantityData::has_volumefraction() const {
  return _internal_has_volumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& GasSubstanceQuantityData::_internal_volumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = volumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& GasSubstanceQuantityData::volumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GasSubstanceQuantityData.VolumeFraction)
  return _internal_volumefraction();
}
inline void GasSubstanceQuantityData::unsafe_arena_set_allocated_volumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* volumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefraction_);
  }
  volumefraction_ = volumefraction;
  if (volumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.VolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* GasSubstanceQuantityData::release_volumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefraction_;
  volumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* GasSubstanceQuantityData::unsafe_arena_release_volumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GasSubstanceQuantityData.VolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefraction_;
  volumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* GasSubstanceQuantityData::_internal_mutable_volumefraction() {
  
  if (volumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    volumefraction_ = p;
  }
  return volumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* GasSubstanceQuantityData::mutable_volumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GasSubstanceQuantityData.VolumeFraction)
  return _internal_mutable_volumefraction();
}
inline void GasSubstanceQuantityData::set_allocated_volumefraction(::pulse::cdm::bind::Scalar0To1Data* volumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefraction_);
  }
  if (volumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      volumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volumefraction, submessage_arena);
    }
    
  } else {
    
  }
  volumefraction_ = volumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GasSubstanceQuantityData.VolumeFraction)
}

// -------------------------------------------------------------------

// LiquidSubstanceQuantityData

// .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
inline bool LiquidSubstanceQuantityData::_internal_has_substancequantity() const {
  return this != internal_default_instance() && substancequantity_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_substancequantity() const {
  return _internal_has_substancequantity();
}
inline void LiquidSubstanceQuantityData::clear_substancequantity() {
  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& LiquidSubstanceQuantityData::_internal_substancequantity() const {
  const ::pulse::cdm::bind::SubstanceQuantityData* p = substancequantity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceQuantityData&>(
      ::pulse::cdm::bind::_SubstanceQuantityData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& LiquidSubstanceQuantityData::substancequantity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.SubstanceQuantity)
  return _internal_substancequantity();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_substancequantity(
    ::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancequantity_);
  }
  substancequantity_ = substancequantity;
  if (substancequantity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.SubstanceQuantity)
}
inline ::pulse::cdm::bind::SubstanceQuantityData* LiquidSubstanceQuantityData::release_substancequantity() {
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* LiquidSubstanceQuantityData::unsafe_arena_release_substancequantity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.SubstanceQuantity)
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* LiquidSubstanceQuantityData::_internal_mutable_substancequantity() {
  
  if (substancequantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceQuantityData>(GetArena());
    substancequantity_ = p;
  }
  return substancequantity_;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* LiquidSubstanceQuantityData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.SubstanceQuantity)
  return _internal_mutable_substancequantity();
}
inline void LiquidSubstanceQuantityData::set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete substancequantity_;
  }
  if (substancequantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substancequantity);
    if (message_arena != submessage_arena) {
      substancequantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancequantity, submessage_arena);
    }
    
  } else {
    
  }
  substancequantity_ = substancequantity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.SubstanceQuantity)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
inline bool LiquidSubstanceQuantityData::_internal_has_concentration() const {
  return this != internal_default_instance() && concentration_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_concentration() const {
  return _internal_has_concentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& LiquidSubstanceQuantityData::_internal_concentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = concentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& LiquidSubstanceQuantityData::concentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.Concentration)
  return _internal_concentration();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_concentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  concentration_ = concentration;
  if (concentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Concentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* LiquidSubstanceQuantityData::release_concentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* LiquidSubstanceQuantityData::unsafe_arena_release_concentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.Concentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* LiquidSubstanceQuantityData::_internal_mutable_concentration() {
  
  if (concentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    concentration_ = p;
  }
  return concentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* LiquidSubstanceQuantityData::mutable_concentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.Concentration)
  return _internal_mutable_concentration();
}
inline void LiquidSubstanceQuantityData::set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  if (concentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration)->GetArena();
    if (message_arena != submessage_arena) {
      concentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concentration, submessage_arena);
    }
    
  } else {
    
  }
  concentration_ = concentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Concentration)
}

// .pulse.cdm.bind.ScalarMassData Mass = 3;
inline bool LiquidSubstanceQuantityData::_internal_has_mass() const {
  return this != internal_default_instance() && mass_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_mass() const {
  return _internal_has_mass();
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::_internal_mass() const {
  const ::pulse::cdm::bind::ScalarMassData* p = mass_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::mass() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.Mass)
  return _internal_mass();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_mass(
    ::pulse::cdm::bind::ScalarMassData* mass) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mass_);
  }
  mass_ = mass;
  if (mass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Mass)
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::release_mass() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = mass_;
  mass_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::unsafe_arena_release_mass() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.Mass)
  
  ::pulse::cdm::bind::ScalarMassData* temp = mass_;
  mass_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::_internal_mutable_mass() {
  
  if (mass_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    mass_ = p;
  }
  return mass_;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::mutable_mass() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.Mass)
  return _internal_mutable_mass();
}
inline void LiquidSubstanceQuantityData::set_allocated_mass(::pulse::cdm::bind::ScalarMassData* mass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mass_);
  }
  if (mass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mass)->GetArena();
    if (message_arena != submessage_arena) {
      mass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mass, submessage_arena);
    }
    
  } else {
    
  }
  mass_ = mass;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Mass)
}

// .pulse.cdm.bind.ScalarMassData MassCleared = 4;
inline bool LiquidSubstanceQuantityData::_internal_has_masscleared() const {
  return this != internal_default_instance() && masscleared_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_masscleared() const {
  return _internal_has_masscleared();
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::_internal_masscleared() const {
  const ::pulse::cdm::bind::ScalarMassData* p = masscleared_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::masscleared() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.MassCleared)
  return _internal_masscleared();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_masscleared(
    ::pulse::cdm::bind::ScalarMassData* masscleared) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(masscleared_);
  }
  masscleared_ = masscleared;
  if (masscleared) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassCleared)
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::release_masscleared() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = masscleared_;
  masscleared_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::unsafe_arena_release_masscleared() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.MassCleared)
  
  ::pulse::cdm::bind::ScalarMassData* temp = masscleared_;
  masscleared_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::_internal_mutable_masscleared() {
  
  if (masscleared_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    masscleared_ = p;
  }
  return masscleared_;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::mutable_masscleared() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.MassCleared)
  return _internal_mutable_masscleared();
}
inline void LiquidSubstanceQuantityData::set_allocated_masscleared(::pulse::cdm::bind::ScalarMassData* masscleared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(masscleared_);
  }
  if (masscleared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(masscleared)->GetArena();
    if (message_arena != submessage_arena) {
      masscleared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, masscleared, submessage_arena);
    }
    
  } else {
    
  }
  masscleared_ = masscleared;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassCleared)
}

// .pulse.cdm.bind.ScalarMassData MassDeposited = 5;
inline bool LiquidSubstanceQuantityData::_internal_has_massdeposited() const {
  return this != internal_default_instance() && massdeposited_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_massdeposited() const {
  return _internal_has_massdeposited();
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::_internal_massdeposited() const {
  const ::pulse::cdm::bind::ScalarMassData* p = massdeposited_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::massdeposited() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.MassDeposited)
  return _internal_massdeposited();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_massdeposited(
    ::pulse::cdm::bind::ScalarMassData* massdeposited) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massdeposited_);
  }
  massdeposited_ = massdeposited;
  if (massdeposited) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassDeposited)
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::release_massdeposited() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = massdeposited_;
  massdeposited_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::unsafe_arena_release_massdeposited() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.MassDeposited)
  
  ::pulse::cdm::bind::ScalarMassData* temp = massdeposited_;
  massdeposited_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::_internal_mutable_massdeposited() {
  
  if (massdeposited_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    massdeposited_ = p;
  }
  return massdeposited_;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::mutable_massdeposited() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.MassDeposited)
  return _internal_mutable_massdeposited();
}
inline void LiquidSubstanceQuantityData::set_allocated_massdeposited(::pulse::cdm::bind::ScalarMassData* massdeposited) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(massdeposited_);
  }
  if (massdeposited) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massdeposited)->GetArena();
    if (message_arena != submessage_arena) {
      massdeposited = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massdeposited, submessage_arena);
    }
    
  } else {
    
  }
  massdeposited_ = massdeposited;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassDeposited)
}

// .pulse.cdm.bind.ScalarMassData MassExcreted = 6;
inline bool LiquidSubstanceQuantityData::_internal_has_massexcreted() const {
  return this != internal_default_instance() && massexcreted_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_massexcreted() const {
  return _internal_has_massexcreted();
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::_internal_massexcreted() const {
  const ::pulse::cdm::bind::ScalarMassData* p = massexcreted_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& LiquidSubstanceQuantityData::massexcreted() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.MassExcreted)
  return _internal_massexcreted();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_massexcreted(
    ::pulse::cdm::bind::ScalarMassData* massexcreted) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massexcreted_);
  }
  massexcreted_ = massexcreted;
  if (massexcreted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassExcreted)
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::release_massexcreted() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = massexcreted_;
  massexcreted_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::unsafe_arena_release_massexcreted() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.MassExcreted)
  
  ::pulse::cdm::bind::ScalarMassData* temp = massexcreted_;
  massexcreted_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::_internal_mutable_massexcreted() {
  
  if (massexcreted_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    massexcreted_ = p;
  }
  return massexcreted_;
}
inline ::pulse::cdm::bind::ScalarMassData* LiquidSubstanceQuantityData::mutable_massexcreted() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.MassExcreted)
  return _internal_mutable_massexcreted();
}
inline void LiquidSubstanceQuantityData::set_allocated_massexcreted(::pulse::cdm::bind::ScalarMassData* massexcreted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(massexcreted_);
  }
  if (massexcreted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(massexcreted)->GetArena();
    if (message_arena != submessage_arena) {
      massexcreted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, massexcreted, submessage_arena);
    }
    
  } else {
    
  }
  massexcreted_ = massexcreted;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.MassExcreted)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData Molarity = 7;
inline bool LiquidSubstanceQuantityData::_internal_has_molarity() const {
  return this != internal_default_instance() && molarity_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_molarity() const {
  return _internal_has_molarity();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& LiquidSubstanceQuantityData::_internal_molarity() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = molarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& LiquidSubstanceQuantityData::molarity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.Molarity)
  return _internal_molarity();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_molarity(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* molarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarity_);
  }
  molarity_ = molarity;
  if (molarity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Molarity)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* LiquidSubstanceQuantityData::release_molarity() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = molarity_;
  molarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* LiquidSubstanceQuantityData::unsafe_arena_release_molarity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.Molarity)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = molarity_;
  molarity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* LiquidSubstanceQuantityData::_internal_mutable_molarity() {
  
  if (molarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    molarity_ = p;
  }
  return molarity_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* LiquidSubstanceQuantityData::mutable_molarity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.Molarity)
  return _internal_mutable_molarity();
}
inline void LiquidSubstanceQuantityData::set_allocated_molarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* molarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarity_);
  }
  if (molarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarity)->GetArena();
    if (message_arena != submessage_arena) {
      molarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, molarity, submessage_arena);
    }
    
  } else {
    
  }
  molarity_ = molarity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Molarity)
}

// .pulse.cdm.bind.ScalarPressureData PartialPressure = 8;
inline bool LiquidSubstanceQuantityData::_internal_has_partialpressure() const {
  return this != internal_default_instance() && partialpressure_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_partialpressure() const {
  return _internal_has_partialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& LiquidSubstanceQuantityData::_internal_partialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = partialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& LiquidSubstanceQuantityData::partialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.PartialPressure)
  return _internal_partialpressure();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_partialpressure(
    ::pulse::cdm::bind::ScalarPressureData* partialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure_);
  }
  partialpressure_ = partialpressure;
  if (partialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.PartialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* LiquidSubstanceQuantityData::release_partialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* LiquidSubstanceQuantityData::unsafe_arena_release_partialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.PartialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = partialpressure_;
  partialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* LiquidSubstanceQuantityData::_internal_mutable_partialpressure() {
  
  if (partialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    partialpressure_ = p;
  }
  return partialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* LiquidSubstanceQuantityData::mutable_partialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.PartialPressure)
  return _internal_mutable_partialpressure();
}
inline void LiquidSubstanceQuantityData::set_allocated_partialpressure(::pulse::cdm::bind::ScalarPressureData* partialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure_);
  }
  if (partialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      partialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partialpressure, submessage_arena);
    }
    
  } else {
    
  }
  partialpressure_ = partialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.PartialPressure)
}

// .pulse.cdm.bind.Scalar0To1Data Saturation = 9;
inline bool LiquidSubstanceQuantityData::_internal_has_saturation() const {
  return this != internal_default_instance() && saturation_ != nullptr;
}
inline bool LiquidSubstanceQuantityData::has_saturation() const {
  return _internal_has_saturation();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LiquidSubstanceQuantityData::_internal_saturation() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = saturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LiquidSubstanceQuantityData::saturation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LiquidSubstanceQuantityData.Saturation)
  return _internal_saturation();
}
inline void LiquidSubstanceQuantityData::unsafe_arena_set_allocated_saturation(
    ::pulse::cdm::bind::Scalar0To1Data* saturation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturation_);
  }
  saturation_ = saturation;
  if (saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Saturation)
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidSubstanceQuantityData::release_saturation() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = saturation_;
  saturation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidSubstanceQuantityData::unsafe_arena_release_saturation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LiquidSubstanceQuantityData.Saturation)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = saturation_;
  saturation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidSubstanceQuantityData::_internal_mutable_saturation() {
  
  if (saturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    saturation_ = p;
  }
  return saturation_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LiquidSubstanceQuantityData::mutable_saturation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LiquidSubstanceQuantityData.Saturation)
  return _internal_mutable_saturation();
}
inline void LiquidSubstanceQuantityData::set_allocated_saturation(::pulse::cdm::bind::Scalar0To1Data* saturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturation_);
  }
  if (saturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturation)->GetArena();
    if (message_arena != submessage_arena) {
      saturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saturation, submessage_arena);
    }
    
  } else {
    
  }
  saturation_ = saturation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LiquidSubstanceQuantityData.Saturation)
}

// -------------------------------------------------------------------

// TissueSubstanceQuantityData

// .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
inline bool TissueSubstanceQuantityData::_internal_has_substancequantity() const {
  return this != internal_default_instance() && substancequantity_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_substancequantity() const {
  return _internal_has_substancequantity();
}
inline void TissueSubstanceQuantityData::clear_substancequantity() {
  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& TissueSubstanceQuantityData::_internal_substancequantity() const {
  const ::pulse::cdm::bind::SubstanceQuantityData* p = substancequantity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::SubstanceQuantityData&>(
      ::pulse::cdm::bind::_SubstanceQuantityData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceQuantityData& TissueSubstanceQuantityData::substancequantity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.SubstanceQuantity)
  return _internal_substancequantity();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_substancequantity(
    ::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancequantity_);
  }
  substancequantity_ = substancequantity;
  if (substancequantity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.SubstanceQuantity)
}
inline ::pulse::cdm::bind::SubstanceQuantityData* TissueSubstanceQuantityData::release_substancequantity() {
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* TissueSubstanceQuantityData::unsafe_arena_release_substancequantity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.SubstanceQuantity)
  
  ::pulse::cdm::bind::SubstanceQuantityData* temp = substancequantity_;
  substancequantity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* TissueSubstanceQuantityData::_internal_mutable_substancequantity() {
  
  if (substancequantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::SubstanceQuantityData>(GetArena());
    substancequantity_ = p;
  }
  return substancequantity_;
}
inline ::pulse::cdm::bind::SubstanceQuantityData* TissueSubstanceQuantityData::mutable_substancequantity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.SubstanceQuantity)
  return _internal_mutable_substancequantity();
}
inline void TissueSubstanceQuantityData::set_allocated_substancequantity(::pulse::cdm::bind::SubstanceQuantityData* substancequantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete substancequantity_;
  }
  if (substancequantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(substancequantity);
    if (message_arena != submessage_arena) {
      substancequantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancequantity, submessage_arena);
    }
    
  } else {
    
  }
  substancequantity_ = substancequantity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.SubstanceQuantity)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 2;
inline bool TissueSubstanceQuantityData::_internal_has_tissueconcentration() const {
  return this != internal_default_instance() && tissueconcentration_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_tissueconcentration() const {
  return _internal_has_tissueconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& TissueSubstanceQuantityData::_internal_tissueconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = tissueconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& TissueSubstanceQuantityData::tissueconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.TissueConcentration)
  return _internal_tissueconcentration();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_tissueconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration_);
  }
  tissueconcentration_ = tissueconcentration;
  if (tissueconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.TissueConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::release_tissueconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = tissueconcentration_;
  tissueconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::unsafe_arena_release_tissueconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.TissueConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = tissueconcentration_;
  tissueconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::_internal_mutable_tissueconcentration() {
  
  if (tissueconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    tissueconcentration_ = p;
  }
  return tissueconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::mutable_tissueconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.TissueConcentration)
  return _internal_mutable_tissueconcentration();
}
inline void TissueSubstanceQuantityData::set_allocated_tissueconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* tissueconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration_);
  }
  if (tissueconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      tissueconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissueconcentration, submessage_arena);
    }
    
  } else {
    
  }
  tissueconcentration_ = tissueconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.TissueConcentration)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData TissueMolarity = 3;
inline bool TissueSubstanceQuantityData::_internal_has_tissuemolarity() const {
  return this != internal_default_instance() && tissuemolarity_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_tissuemolarity() const {
  return _internal_has_tissuemolarity();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& TissueSubstanceQuantityData::_internal_tissuemolarity() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = tissuemolarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& TissueSubstanceQuantityData::tissuemolarity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.TissueMolarity)
  return _internal_tissuemolarity();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_tissuemolarity(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* tissuemolarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuemolarity_);
  }
  tissuemolarity_ = tissuemolarity;
  if (tissuemolarity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.TissueMolarity)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::release_tissuemolarity() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = tissuemolarity_;
  tissuemolarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::unsafe_arena_release_tissuemolarity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.TissueMolarity)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = tissuemolarity_;
  tissuemolarity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::_internal_mutable_tissuemolarity() {
  
  if (tissuemolarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    tissuemolarity_ = p;
  }
  return tissuemolarity_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::mutable_tissuemolarity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.TissueMolarity)
  return _internal_mutable_tissuemolarity();
}
inline void TissueSubstanceQuantityData::set_allocated_tissuemolarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* tissuemolarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuemolarity_);
  }
  if (tissuemolarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissuemolarity)->GetArena();
    if (message_arena != submessage_arena) {
      tissuemolarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissuemolarity, submessage_arena);
    }
    
  } else {
    
  }
  tissuemolarity_ = tissuemolarity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.TissueMolarity)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData ExtravascularConcentration = 4;
inline bool TissueSubstanceQuantityData::_internal_has_extravascularconcentration() const {
  return this != internal_default_instance() && extravascularconcentration_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_extravascularconcentration() const {
  return _internal_has_extravascularconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& TissueSubstanceQuantityData::_internal_extravascularconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = extravascularconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& TissueSubstanceQuantityData::extravascularconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularConcentration)
  return _internal_extravascularconcentration();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_extravascularconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* extravascularconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularconcentration_);
  }
  extravascularconcentration_ = extravascularconcentration;
  if (extravascularconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::release_extravascularconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = extravascularconcentration_;
  extravascularconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::unsafe_arena_release_extravascularconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = extravascularconcentration_;
  extravascularconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::_internal_mutable_extravascularconcentration() {
  
  if (extravascularconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    extravascularconcentration_ = p;
  }
  return extravascularconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* TissueSubstanceQuantityData::mutable_extravascularconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularConcentration)
  return _internal_mutable_extravascularconcentration();
}
inline void TissueSubstanceQuantityData::set_allocated_extravascularconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* extravascularconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularconcentration_);
  }
  if (extravascularconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      extravascularconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extravascularconcentration, submessage_arena);
    }
    
  } else {
    
  }
  extravascularconcentration_ = extravascularconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularConcentration)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData ExtravascularMolarity = 5;
inline bool TissueSubstanceQuantityData::_internal_has_extravascularmolarity() const {
  return this != internal_default_instance() && extravascularmolarity_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_extravascularmolarity() const {
  return _internal_has_extravascularmolarity();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& TissueSubstanceQuantityData::_internal_extravascularmolarity() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = extravascularmolarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& TissueSubstanceQuantityData::extravascularmolarity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularMolarity)
  return _internal_extravascularmolarity();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_extravascularmolarity(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* extravascularmolarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularmolarity_);
  }
  extravascularmolarity_ = extravascularmolarity;
  if (extravascularmolarity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularMolarity)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::release_extravascularmolarity() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = extravascularmolarity_;
  extravascularmolarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::unsafe_arena_release_extravascularmolarity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularMolarity)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = extravascularmolarity_;
  extravascularmolarity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::_internal_mutable_extravascularmolarity() {
  
  if (extravascularmolarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    extravascularmolarity_ = p;
  }
  return extravascularmolarity_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* TissueSubstanceQuantityData::mutable_extravascularmolarity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularMolarity)
  return _internal_mutable_extravascularmolarity();
}
inline void TissueSubstanceQuantityData::set_allocated_extravascularmolarity(::pulse::cdm::bind::ScalarAmountPerVolumeData* extravascularmolarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularmolarity_);
  }
  if (extravascularmolarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularmolarity)->GetArena();
    if (message_arena != submessage_arena) {
      extravascularmolarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extravascularmolarity, submessage_arena);
    }
    
  } else {
    
  }
  extravascularmolarity_ = extravascularmolarity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularMolarity)
}

// .pulse.cdm.bind.ScalarPressureData ExtravascularPartialPressure = 6;
inline bool TissueSubstanceQuantityData::_internal_has_extravascularpartialpressure() const {
  return this != internal_default_instance() && extravascularpartialpressure_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_extravascularpartialpressure() const {
  return _internal_has_extravascularpartialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& TissueSubstanceQuantityData::_internal_extravascularpartialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = extravascularpartialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& TissueSubstanceQuantityData::extravascularpartialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularPartialPressure)
  return _internal_extravascularpartialpressure();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_extravascularpartialpressure(
    ::pulse::cdm::bind::ScalarPressureData* extravascularpartialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularpartialpressure_);
  }
  extravascularpartialpressure_ = extravascularpartialpressure;
  if (extravascularpartialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularPartialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* TissueSubstanceQuantityData::release_extravascularpartialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = extravascularpartialpressure_;
  extravascularpartialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* TissueSubstanceQuantityData::unsafe_arena_release_extravascularpartialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularPartialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = extravascularpartialpressure_;
  extravascularpartialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* TissueSubstanceQuantityData::_internal_mutable_extravascularpartialpressure() {
  
  if (extravascularpartialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    extravascularpartialpressure_ = p;
  }
  return extravascularpartialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* TissueSubstanceQuantityData::mutable_extravascularpartialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularPartialPressure)
  return _internal_mutable_extravascularpartialpressure();
}
inline void TissueSubstanceQuantityData::set_allocated_extravascularpartialpressure(::pulse::cdm::bind::ScalarPressureData* extravascularpartialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularpartialpressure_);
  }
  if (extravascularpartialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularpartialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      extravascularpartialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extravascularpartialpressure, submessage_arena);
    }
    
  } else {
    
  }
  extravascularpartialpressure_ = extravascularpartialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularPartialPressure)
}

// .pulse.cdm.bind.Scalar0To1Data ExtravascularSaturation = 7;
inline bool TissueSubstanceQuantityData::_internal_has_extravascularsaturation() const {
  return this != internal_default_instance() && extravascularsaturation_ != nullptr;
}
inline bool TissueSubstanceQuantityData::has_extravascularsaturation() const {
  return _internal_has_extravascularsaturation();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueSubstanceQuantityData::_internal_extravascularsaturation() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = extravascularsaturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TissueSubstanceQuantityData::extravascularsaturation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularSaturation)
  return _internal_extravascularsaturation();
}
inline void TissueSubstanceQuantityData::unsafe_arena_set_allocated_extravascularsaturation(
    ::pulse::cdm::bind::Scalar0To1Data* extravascularsaturation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularsaturation_);
  }
  extravascularsaturation_ = extravascularsaturation;
  if (extravascularsaturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularSaturation)
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueSubstanceQuantityData::release_extravascularsaturation() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = extravascularsaturation_;
  extravascularsaturation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueSubstanceQuantityData::unsafe_arena_release_extravascularsaturation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularSaturation)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = extravascularsaturation_;
  extravascularsaturation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueSubstanceQuantityData::_internal_mutable_extravascularsaturation() {
  
  if (extravascularsaturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    extravascularsaturation_ = p;
  }
  return extravascularsaturation_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TissueSubstanceQuantityData::mutable_extravascularsaturation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularSaturation)
  return _internal_mutable_extravascularsaturation();
}
inline void TissueSubstanceQuantityData::set_allocated_extravascularsaturation(::pulse::cdm::bind::Scalar0To1Data* extravascularsaturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularsaturation_);
  }
  if (extravascularsaturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularsaturation)->GetArena();
    if (message_arena != submessage_arena) {
      extravascularsaturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extravascularsaturation, submessage_arena);
    }
    
  } else {
    
  }
  extravascularsaturation_ = extravascularsaturation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSubstanceQuantityData.ExtravascularSaturation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto
