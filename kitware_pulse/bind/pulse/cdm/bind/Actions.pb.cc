// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Actions.proto

#include "pulse/cdm/bind/Actions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fActions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionData> _instance;
} _ActionData_default_instance_;
class EquipmentActionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipmentActionData> _instance;
} _EquipmentActionData_default_instance_;
class AdvanceTimeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvanceTimeData> _instance;
} _AdvanceTimeData_default_instance_;
class SerializeStateDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SerializeStateData> _instance;
} _SerializeStateData_default_instance_;
class OverridesDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverridesData> _instance;
} _OverridesData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto}, {}};

static void InitDefaultsscc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AdvanceTimeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AdvanceTimeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EquipmentActionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EquipmentActionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static void InitDefaultsscc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_OverridesData_default_instance_;
    new (ptr) ::pulse::cdm::bind::OverridesData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
      &scc_info_ScalarPropertyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SerializeStateData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SerializeStateData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto}, {
      &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fActions_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fActions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fActions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActionData, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EquipmentActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EquipmentActionData, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AdvanceTimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AdvanceTimeData, action_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AdvanceTimeData, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SerializeStateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SerializeStateData, action_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SerializeStateData, type_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SerializeStateData, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::OverridesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::OverridesData, action_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::OverridesData, scalaroverride_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::ActionData)},
  { 6, -1, sizeof(::pulse::cdm::bind::EquipmentActionData)},
  { 12, -1, sizeof(::pulse::cdm::bind::AdvanceTimeData)},
  { 19, -1, sizeof(::pulse::cdm::bind::SerializeStateData)},
  { 27, -1, sizeof(::pulse::cdm::bind::OverridesData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EquipmentActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AdvanceTimeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SerializeStateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_OverridesData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fActions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034pulse/cdm/bind/Actions.proto\022\016pulse.cd"
  "m.bind\032\037pulse/cdm/bind/Properties.proto\""
  "\035\n\nActionData\022\017\n\007Comment\030\001 \001(\t\"A\n\023Equipm"
  "entActionData\022*\n\006Action\030\001 \001(\0132\032.pulse.cd"
  "m.bind.ActionData\"k\n\017AdvanceTimeData\022*\n\006"
  "Action\030\001 \001(\0132\032.pulse.cdm.bind.ActionData"
  "\022,\n\004Time\030\002 \001(\0132\036.pulse.cdm.bind.ScalarTi"
  "meData\"\247\001\n\022SerializeStateData\022*\n\006Action\030"
  "\001 \001(\0132\032.pulse.cdm.bind.ActionData\0226\n\004Typ"
  "e\030\002 \001(\0162(.pulse.cdm.bind.SerializeStateD"
  "ata.eType\022\020\n\010Filename\030\003 \001(\t\"\033\n\005eType\022\010\n\004"
  "Save\020\000\022\010\n\004Load\020\001\"w\n\rOverridesData\022*\n\006Act"
  "ion\030\001 \001(\0132\032.pulse.cdm.bind.ActionData\022:\n"
  "\016ScalarOverride\030\002 \003(\0132\".pulse.cdm.bind.S"
  "calarPropertyDataB/\n\032com.kitware.pulse.c"
  "dm.bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_sccs[5] = {
  &scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
  &scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
  &scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
  &scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
  &scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fActions_2eproto, "pulse/cdm/bind/Actions.proto", 634,
  &descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fActions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fActions_2eproto, 5, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fActions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fActions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fActions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SerializeStateData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fActions_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fActions_2eproto[0];
}
bool SerializeStateData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SerializeStateData_eType SerializeStateData::Save;
constexpr SerializeStateData_eType SerializeStateData::Load;
constexpr SerializeStateData_eType SerializeStateData::eType_MIN;
constexpr SerializeStateData_eType SerializeStateData::eType_MAX;
constexpr int SerializeStateData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ActionData::_Internal {
 public:
};

ActionData::ActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ActionData)
}
ActionData::ActionData(const ActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ActionData)
}

void ActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActionData::~ActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActionData::ArenaDtor(void* object) {
  ActionData* _this = reinterpret_cast< ActionData* >(object);
  (void)_this;
}
void ActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionData& ActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  return *internal_default_instance();
}


void ActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Comment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ActionData.Comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Comment = 1;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ActionData.Comment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ActionData)
  return target;
}

size_t ActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Comment = 1;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ActionData)
    MergeFrom(*source);
  }
}

void ActionData::MergeFrom(const ActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
}

void ActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionData::CopyFrom(const ActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionData::IsInitialized() const {
  return true;
}

void ActionData::InternalSwap(ActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EquipmentActionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const EquipmentActionData* msg);
};

const ::pulse::cdm::bind::ActionData&
EquipmentActionData::_Internal::action(const EquipmentActionData* msg) {
  return *msg->action_;
}
EquipmentActionData::EquipmentActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EquipmentActionData)
}
EquipmentActionData::EquipmentActionData(const EquipmentActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EquipmentActionData)
}

void EquipmentActionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  action_ = nullptr;
}

EquipmentActionData::~EquipmentActionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EquipmentActionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EquipmentActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void EquipmentActionData::ArenaDtor(void* object) {
  EquipmentActionData* _this = reinterpret_cast< EquipmentActionData* >(object);
  (void)_this;
}
void EquipmentActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquipmentActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipmentActionData& EquipmentActionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipmentActionData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  return *internal_default_instance();
}


void EquipmentActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EquipmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipmentActionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EquipmentActionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EquipmentActionData)
  return target;
}

size_t EquipmentActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EquipmentActionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipmentActionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EquipmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipmentActionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipmentActionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EquipmentActionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EquipmentActionData)
    MergeFrom(*source);
  }
}

void EquipmentActionData::MergeFrom(const EquipmentActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EquipmentActionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
}

void EquipmentActionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EquipmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentActionData::CopyFrom(const EquipmentActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EquipmentActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentActionData::IsInitialized() const {
  return true;
}

void EquipmentActionData::InternalSwap(EquipmentActionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentActionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdvanceTimeData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const AdvanceTimeData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& time(const AdvanceTimeData* msg);
};

const ::pulse::cdm::bind::ActionData&
AdvanceTimeData::_Internal::action(const AdvanceTimeData* msg) {
  return *msg->action_;
}
const ::pulse::cdm::bind::ScalarTimeData&
AdvanceTimeData::_Internal::time(const AdvanceTimeData* msg) {
  return *msg->time_;
}
void AdvanceTimeData::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
AdvanceTimeData::AdvanceTimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AdvanceTimeData)
}
AdvanceTimeData::AdvanceTimeData(const AdvanceTimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::pulse::cdm::bind::ScalarTimeData(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AdvanceTimeData)
}

void AdvanceTimeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&action_)) + sizeof(time_));
}

AdvanceTimeData::~AdvanceTimeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AdvanceTimeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdvanceTimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete time_;
}

void AdvanceTimeData::ArenaDtor(void* object) {
  AdvanceTimeData* _this = reinterpret_cast< AdvanceTimeData* >(object);
  (void)_this;
}
void AdvanceTimeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvanceTimeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvanceTimeData& AdvanceTimeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvanceTimeData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  return *internal_default_instance();
}


void AdvanceTimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AdvanceTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvanceTimeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData Time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvanceTimeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AdvanceTimeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData Time = 2;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AdvanceTimeData)
  return target;
}

size_t AdvanceTimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AdvanceTimeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .pulse.cdm.bind.ScalarTimeData Time = 2;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvanceTimeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AdvanceTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvanceTimeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvanceTimeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AdvanceTimeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AdvanceTimeData)
    MergeFrom(*source);
  }
}

void AdvanceTimeData::MergeFrom(const AdvanceTimeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AdvanceTimeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
  if (from.has_time()) {
    _internal_mutable_time()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_time());
  }
}

void AdvanceTimeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AdvanceTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceTimeData::CopyFrom(const AdvanceTimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AdvanceTimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceTimeData::IsInitialized() const {
  return true;
}

void AdvanceTimeData::InternalSwap(AdvanceTimeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdvanceTimeData, time_)
      + sizeof(AdvanceTimeData::time_)
      - PROTOBUF_FIELD_OFFSET(AdvanceTimeData, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvanceTimeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SerializeStateData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const SerializeStateData* msg);
};

const ::pulse::cdm::bind::ActionData&
SerializeStateData::_Internal::action(const SerializeStateData* msg) {
  return *msg->action_;
}
SerializeStateData::SerializeStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SerializeStateData)
}
SerializeStateData::SerializeStateData(const SerializeStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SerializeStateData)
}

void SerializeStateData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&action_)) + sizeof(type_));
}

SerializeStateData::~SerializeStateData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SerializeStateData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SerializeStateData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
}

void SerializeStateData::ArenaDtor(void* object) {
  SerializeStateData* _this = reinterpret_cast< SerializeStateData* >(object);
  (void)_this;
}
void SerializeStateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SerializeStateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SerializeStateData& SerializeStateData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SerializeStateData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  return *internal_default_instance();
}


void SerializeStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SerializeStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializeStateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SerializeStateData.eType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pulse::cdm::bind::SerializeStateData_eType>(val));
        } else goto handle_unusual;
        continue;
      // string Filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SerializeStateData.Filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SerializeStateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SerializeStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // .pulse.cdm.bind.SerializeStateData.eType Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string Filename = 3;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SerializeStateData.Filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SerializeStateData)
  return target;
}

size_t SerializeStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SerializeStateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .pulse.cdm.bind.SerializeStateData.eType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializeStateData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SerializeStateData)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializeStateData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SerializeStateData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SerializeStateData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SerializeStateData)
    MergeFrom(*source);
  }
}

void SerializeStateData::MergeFrom(const SerializeStateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SerializeStateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SerializeStateData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SerializeStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializeStateData::CopyFrom(const SerializeStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SerializeStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializeStateData::IsInitialized() const {
  return true;
}

void SerializeStateData::InternalSwap(SerializeStateData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializeStateData, type_)
      + sizeof(SerializeStateData::type_)
      - PROTOBUF_FIELD_OFFSET(SerializeStateData, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializeStateData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OverridesData::_Internal {
 public:
  static const ::pulse::cdm::bind::ActionData& action(const OverridesData* msg);
};

const ::pulse::cdm::bind::ActionData&
OverridesData::_Internal::action(const OverridesData* msg) {
  return *msg->action_;
}
void OverridesData::clear_scalaroverride() {
  scalaroverride_.Clear();
}
OverridesData::OverridesData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scalaroverride_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.OverridesData)
}
OverridesData::OverridesData(const OverridesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scalaroverride_(from.scalaroverride_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::pulse::cdm::bind::ActionData(*from.action_);
  } else {
    action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.OverridesData)
}

void OverridesData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  action_ = nullptr;
}

OverridesData::~OverridesData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.OverridesData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OverridesData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void OverridesData::ArenaDtor(void* object) {
  OverridesData* _this = reinterpret_cast< OverridesData* >(object);
  (void)_this;
}
void OverridesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverridesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverridesData& OverridesData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverridesData_pulse_2fcdm_2fbind_2fActions_2eproto.base);
  return *internal_default_instance();
}


void OverridesData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.OverridesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scalaroverride_.Clear();
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverridesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ActionData Action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.ScalarPropertyData ScalarOverride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scalaroverride(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverridesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.OverridesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // repeated .pulse.cdm.bind.ScalarPropertyData ScalarOverride = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scalaroverride_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_scalaroverride(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.OverridesData)
  return target;
}

size_t OverridesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.OverridesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ScalarPropertyData ScalarOverride = 2;
  total_size += 1UL * this->_internal_scalaroverride_size();
  for (const auto& msg : this->scalaroverride_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.ActionData Action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverridesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.OverridesData)
  GOOGLE_DCHECK_NE(&from, this);
  const OverridesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverridesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.OverridesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.OverridesData)
    MergeFrom(*source);
  }
}

void OverridesData::MergeFrom(const OverridesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.OverridesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scalaroverride_.MergeFrom(from.scalaroverride_);
  if (from.has_action()) {
    _internal_mutable_action()->::pulse::cdm::bind::ActionData::MergeFrom(from._internal_action());
  }
}

void OverridesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.OverridesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverridesData::CopyFrom(const OverridesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.OverridesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverridesData::IsInitialized() const {
  return true;
}

void OverridesData::InternalSwap(OverridesData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scalaroverride_.InternalSwap(&other->scalaroverride_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverridesData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EquipmentActionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EquipmentActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EquipmentActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AdvanceTimeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AdvanceTimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AdvanceTimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SerializeStateData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SerializeStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SerializeStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::OverridesData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::OverridesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::OverridesData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
