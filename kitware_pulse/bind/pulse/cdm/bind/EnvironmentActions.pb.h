// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EnvironmentActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Environment.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEnvironmentActionData;
class AnyEnvironmentActionDataDefaultTypeInternal;
extern AnyEnvironmentActionDataDefaultTypeInternal _AnyEnvironmentActionData_default_instance_;
class ChangeEnvironmentalConditionsData;
class ChangeEnvironmentalConditionsDataDefaultTypeInternal;
extern ChangeEnvironmentalConditionsDataDefaultTypeInternal _ChangeEnvironmentalConditionsData_default_instance_;
class EnvironmentActionData;
class EnvironmentActionDataDefaultTypeInternal;
extern EnvironmentActionDataDefaultTypeInternal _EnvironmentActionData_default_instance_;
class ThermalApplicationData;
class ThermalApplicationDataDefaultTypeInternal;
extern ThermalApplicationDataDefaultTypeInternal _ThermalApplicationData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnyEnvironmentActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyEnvironmentActionData>(Arena*);
template<> ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChangeEnvironmentalConditionsData>(Arena*);
template<> ::pulse::cdm::bind::EnvironmentActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EnvironmentActionData>(Arena*);
template<> ::pulse::cdm::bind::ThermalApplicationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ThermalApplicationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyEnvironmentActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyEnvironmentActionData) */ {
 public:
  inline AnyEnvironmentActionData() : AnyEnvironmentActionData(nullptr) {}
  virtual ~AnyEnvironmentActionData();

  AnyEnvironmentActionData(const AnyEnvironmentActionData& from);
  AnyEnvironmentActionData(AnyEnvironmentActionData&& from) noexcept
    : AnyEnvironmentActionData() {
    *this = ::std::move(from);
  }

  inline AnyEnvironmentActionData& operator=(const AnyEnvironmentActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyEnvironmentActionData& operator=(AnyEnvironmentActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyEnvironmentActionData& default_instance();

  enum ActionCase {
    kChangeEnvironmentalConditions = 1,
    kThermalApplication = 2,
    ACTION_NOT_SET = 0,
  };

  static inline const AnyEnvironmentActionData* internal_default_instance() {
    return reinterpret_cast<const AnyEnvironmentActionData*>(
               &_AnyEnvironmentActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyEnvironmentActionData& a, AnyEnvironmentActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyEnvironmentActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyEnvironmentActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyEnvironmentActionData* New() const final {
    return CreateMaybeMessage<AnyEnvironmentActionData>(nullptr);
  }

  AnyEnvironmentActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyEnvironmentActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyEnvironmentActionData& from);
  void MergeFrom(const AnyEnvironmentActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyEnvironmentActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyEnvironmentActionData";
  }
  protected:
  explicit AnyEnvironmentActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeEnvironmentalConditionsFieldNumber = 1,
    kThermalApplicationFieldNumber = 2,
  };
  // .pulse.cdm.bind.ChangeEnvironmentalConditionsData ChangeEnvironmentalConditions = 1;
  bool has_changeenvironmentalconditions() const;
  private:
  bool _internal_has_changeenvironmentalconditions() const;
  public:
  void clear_changeenvironmentalconditions();
  const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData& changeenvironmentalconditions() const;
  ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* release_changeenvironmentalconditions();
  ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* mutable_changeenvironmentalconditions();
  void set_allocated_changeenvironmentalconditions(::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions);
  private:
  const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData& _internal_changeenvironmentalconditions() const;
  ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* _internal_mutable_changeenvironmentalconditions();
  public:
  void unsafe_arena_set_allocated_changeenvironmentalconditions(
      ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions);
  ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* unsafe_arena_release_changeenvironmentalconditions();

  // .pulse.cdm.bind.ThermalApplicationData ThermalApplication = 2;
  bool has_thermalapplication() const;
  private:
  bool _internal_has_thermalapplication() const;
  public:
  void clear_thermalapplication();
  const ::pulse::cdm::bind::ThermalApplicationData& thermalapplication() const;
  ::pulse::cdm::bind::ThermalApplicationData* release_thermalapplication();
  ::pulse::cdm::bind::ThermalApplicationData* mutable_thermalapplication();
  void set_allocated_thermalapplication(::pulse::cdm::bind::ThermalApplicationData* thermalapplication);
  private:
  const ::pulse::cdm::bind::ThermalApplicationData& _internal_thermalapplication() const;
  ::pulse::cdm::bind::ThermalApplicationData* _internal_mutable_thermalapplication();
  public:
  void unsafe_arena_set_allocated_thermalapplication(
      ::pulse::cdm::bind::ThermalApplicationData* thermalapplication);
  ::pulse::cdm::bind::ThermalApplicationData* unsafe_arena_release_thermalapplication();

  void clear_Action();
  ActionCase Action_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyEnvironmentActionData)
 private:
  class _Internal;
  void set_has_changeenvironmentalconditions();
  void set_has_thermalapplication();

  inline bool has_Action() const;
  inline void clear_has_Action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions_;
    ::pulse::cdm::bind::ThermalApplicationData* thermalapplication_;
  } Action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EnvironmentActionData) */ {
 public:
  inline EnvironmentActionData() : EnvironmentActionData(nullptr) {}
  virtual ~EnvironmentActionData();

  EnvironmentActionData(const EnvironmentActionData& from);
  EnvironmentActionData(EnvironmentActionData&& from) noexcept
    : EnvironmentActionData() {
    *this = ::std::move(from);
  }

  inline EnvironmentActionData& operator=(const EnvironmentActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentActionData& operator=(EnvironmentActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentActionData& default_instance();

  static inline const EnvironmentActionData* internal_default_instance() {
    return reinterpret_cast<const EnvironmentActionData*>(
               &_EnvironmentActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnvironmentActionData& a, EnvironmentActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentActionData* New() const final {
    return CreateMaybeMessage<EnvironmentActionData>(nullptr);
  }

  EnvironmentActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentActionData& from);
  void MergeFrom(const EnvironmentActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EnvironmentActionData";
  }
  protected:
  explicit EnvironmentActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.ActionData Action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::pulse::cdm::bind::ActionData& action() const;
  ::pulse::cdm::bind::ActionData* release_action();
  ::pulse::cdm::bind::ActionData* mutable_action();
  void set_allocated_action(::pulse::cdm::bind::ActionData* action);
  private:
  const ::pulse::cdm::bind::ActionData& _internal_action() const;
  ::pulse::cdm::bind::ActionData* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::pulse::cdm::bind::ActionData* action);
  ::pulse::cdm::bind::ActionData* unsafe_arena_release_action();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EnvironmentActionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ActionData* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
};
// -------------------------------------------------------------------

class ChangeEnvironmentalConditionsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChangeEnvironmentalConditionsData) */ {
 public:
  inline ChangeEnvironmentalConditionsData() : ChangeEnvironmentalConditionsData(nullptr) {}
  virtual ~ChangeEnvironmentalConditionsData();

  ChangeEnvironmentalConditionsData(const ChangeEnvironmentalConditionsData& from);
  ChangeEnvironmentalConditionsData(ChangeEnvironmentalConditionsData&& from) noexcept
    : ChangeEnvironmentalConditionsData() {
    *this = ::std::move(from);
  }

  inline ChangeEnvironmentalConditionsData& operator=(const ChangeEnvironmentalConditionsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeEnvironmentalConditionsData& operator=(ChangeEnvironmentalConditionsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeEnvironmentalConditionsData& default_instance();

  enum OptionCase {
    kEnvironmentalConditions = 2,
    kEnvironmentalConditionsFile = 3,
    OPTION_NOT_SET = 0,
  };

  static inline const ChangeEnvironmentalConditionsData* internal_default_instance() {
    return reinterpret_cast<const ChangeEnvironmentalConditionsData*>(
               &_ChangeEnvironmentalConditionsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChangeEnvironmentalConditionsData& a, ChangeEnvironmentalConditionsData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeEnvironmentalConditionsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeEnvironmentalConditionsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeEnvironmentalConditionsData* New() const final {
    return CreateMaybeMessage<ChangeEnvironmentalConditionsData>(nullptr);
  }

  ChangeEnvironmentalConditionsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeEnvironmentalConditionsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeEnvironmentalConditionsData& from);
  void MergeFrom(const ChangeEnvironmentalConditionsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeEnvironmentalConditionsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChangeEnvironmentalConditionsData";
  }
  protected:
  explicit ChangeEnvironmentalConditionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentActionFieldNumber = 1,
    kEnvironmentalConditionsFieldNumber = 2,
    kEnvironmentalConditionsFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  bool has_environmentaction() const;
  private:
  bool _internal_has_environmentaction() const;
  public:
  void clear_environmentaction();
  const ::pulse::cdm::bind::EnvironmentActionData& environmentaction() const;
  ::pulse::cdm::bind::EnvironmentActionData* release_environmentaction();
  ::pulse::cdm::bind::EnvironmentActionData* mutable_environmentaction();
  void set_allocated_environmentaction(::pulse::cdm::bind::EnvironmentActionData* environmentaction);
  private:
  const ::pulse::cdm::bind::EnvironmentActionData& _internal_environmentaction() const;
  ::pulse::cdm::bind::EnvironmentActionData* _internal_mutable_environmentaction();
  public:
  void unsafe_arena_set_allocated_environmentaction(
      ::pulse::cdm::bind::EnvironmentActionData* environmentaction);
  ::pulse::cdm::bind::EnvironmentActionData* unsafe_arena_release_environmentaction();

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
  bool has_environmentalconditions() const;
  private:
  bool _internal_has_environmentalconditions() const;
  public:
  void clear_environmentalconditions();
  const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* release_environmentalconditions();
  ::pulse::cdm::bind::EnvironmentalConditionsData* mutable_environmentalconditions();
  void set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions);
  private:
  const ::pulse::cdm::bind::EnvironmentalConditionsData& _internal_environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* _internal_mutable_environmentalconditions();
  public:
  void unsafe_arena_set_allocated_environmentalconditions(
      ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions);
  ::pulse::cdm::bind::EnvironmentalConditionsData* unsafe_arena_release_environmentalconditions();

  // string EnvironmentalConditionsFile = 3;
  private:
  bool _internal_has_environmentalconditionsfile() const;
  public:
  void clear_environmentalconditionsfile();
  const std::string& environmentalconditionsfile() const;
  void set_environmentalconditionsfile(const std::string& value);
  void set_environmentalconditionsfile(std::string&& value);
  void set_environmentalconditionsfile(const char* value);
  void set_environmentalconditionsfile(const char* value, size_t size);
  std::string* mutable_environmentalconditionsfile();
  std::string* release_environmentalconditionsfile();
  void set_allocated_environmentalconditionsfile(std::string* environmentalconditionsfile);
  private:
  const std::string& _internal_environmentalconditionsfile() const;
  void _internal_set_environmentalconditionsfile(const std::string& value);
  std::string* _internal_mutable_environmentalconditionsfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChangeEnvironmentalConditionsData)
 private:
  class _Internal;
  void set_has_environmentalconditions();
  void set_has_environmentalconditionsfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EnvironmentActionData* environmentaction_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environmentalconditionsfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
};
// -------------------------------------------------------------------

class ThermalApplicationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ThermalApplicationData) */ {
 public:
  inline ThermalApplicationData() : ThermalApplicationData(nullptr) {}
  virtual ~ThermalApplicationData();

  ThermalApplicationData(const ThermalApplicationData& from);
  ThermalApplicationData(ThermalApplicationData&& from) noexcept
    : ThermalApplicationData() {
    *this = ::std::move(from);
  }

  inline ThermalApplicationData& operator=(const ThermalApplicationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalApplicationData& operator=(ThermalApplicationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalApplicationData& default_instance();

  static inline const ThermalApplicationData* internal_default_instance() {
    return reinterpret_cast<const ThermalApplicationData*>(
               &_ThermalApplicationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ThermalApplicationData& a, ThermalApplicationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalApplicationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalApplicationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalApplicationData* New() const final {
    return CreateMaybeMessage<ThermalApplicationData>(nullptr);
  }

  ThermalApplicationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalApplicationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalApplicationData& from);
  void MergeFrom(const ThermalApplicationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalApplicationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ThermalApplicationData";
  }
  protected:
  explicit ThermalApplicationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentActionFieldNumber = 1,
    kActiveHeatingFieldNumber = 2,
    kActiveCoolingFieldNumber = 3,
    kAppliedTemperatureFieldNumber = 4,
    kAppendToPreviousFieldNumber = 5,
  };
  // .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
  bool has_environmentaction() const;
  private:
  bool _internal_has_environmentaction() const;
  public:
  void clear_environmentaction();
  const ::pulse::cdm::bind::EnvironmentActionData& environmentaction() const;
  ::pulse::cdm::bind::EnvironmentActionData* release_environmentaction();
  ::pulse::cdm::bind::EnvironmentActionData* mutable_environmentaction();
  void set_allocated_environmentaction(::pulse::cdm::bind::EnvironmentActionData* environmentaction);
  private:
  const ::pulse::cdm::bind::EnvironmentActionData& _internal_environmentaction() const;
  ::pulse::cdm::bind::EnvironmentActionData* _internal_mutable_environmentaction();
  public:
  void unsafe_arena_set_allocated_environmentaction(
      ::pulse::cdm::bind::EnvironmentActionData* environmentaction);
  ::pulse::cdm::bind::EnvironmentActionData* unsafe_arena_release_environmentaction();

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  bool has_activeheating() const;
  private:
  bool _internal_has_activeheating() const;
  public:
  void clear_activeheating();
  const ::pulse::cdm::bind::ActiveConditioningData& activeheating() const;
  ::pulse::cdm::bind::ActiveConditioningData* release_activeheating();
  ::pulse::cdm::bind::ActiveConditioningData* mutable_activeheating();
  void set_allocated_activeheating(::pulse::cdm::bind::ActiveConditioningData* activeheating);
  private:
  const ::pulse::cdm::bind::ActiveConditioningData& _internal_activeheating() const;
  ::pulse::cdm::bind::ActiveConditioningData* _internal_mutable_activeheating();
  public:
  void unsafe_arena_set_allocated_activeheating(
      ::pulse::cdm::bind::ActiveConditioningData* activeheating);
  ::pulse::cdm::bind::ActiveConditioningData* unsafe_arena_release_activeheating();

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  bool has_activecooling() const;
  private:
  bool _internal_has_activecooling() const;
  public:
  void clear_activecooling();
  const ::pulse::cdm::bind::ActiveConditioningData& activecooling() const;
  ::pulse::cdm::bind::ActiveConditioningData* release_activecooling();
  ::pulse::cdm::bind::ActiveConditioningData* mutable_activecooling();
  void set_allocated_activecooling(::pulse::cdm::bind::ActiveConditioningData* activecooling);
  private:
  const ::pulse::cdm::bind::ActiveConditioningData& _internal_activecooling() const;
  ::pulse::cdm::bind::ActiveConditioningData* _internal_mutable_activecooling();
  public:
  void unsafe_arena_set_allocated_activecooling(
      ::pulse::cdm::bind::ActiveConditioningData* activecooling);
  ::pulse::cdm::bind::ActiveConditioningData* unsafe_arena_release_activecooling();

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  bool has_appliedtemperature() const;
  private:
  bool _internal_has_appliedtemperature() const;
  public:
  void clear_appliedtemperature();
  const ::pulse::cdm::bind::AppliedTemperatureData& appliedtemperature() const;
  ::pulse::cdm::bind::AppliedTemperatureData* release_appliedtemperature();
  ::pulse::cdm::bind::AppliedTemperatureData* mutable_appliedtemperature();
  void set_allocated_appliedtemperature(::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature);
  private:
  const ::pulse::cdm::bind::AppliedTemperatureData& _internal_appliedtemperature() const;
  ::pulse::cdm::bind::AppliedTemperatureData* _internal_mutable_appliedtemperature();
  public:
  void unsafe_arena_set_allocated_appliedtemperature(
      ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature);
  ::pulse::cdm::bind::AppliedTemperatureData* unsafe_arena_release_appliedtemperature();

  // bool AppendToPrevious = 5;
  void clear_appendtoprevious();
  bool appendtoprevious() const;
  void set_appendtoprevious(bool value);
  private:
  bool _internal_appendtoprevious() const;
  void _internal_set_appendtoprevious(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ThermalApplicationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EnvironmentActionData* environmentaction_;
  ::pulse::cdm::bind::ActiveConditioningData* activeheating_;
  ::pulse::cdm::bind::ActiveConditioningData* activecooling_;
  ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature_;
  bool appendtoprevious_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyEnvironmentActionData

// .pulse.cdm.bind.ChangeEnvironmentalConditionsData ChangeEnvironmentalConditions = 1;
inline bool AnyEnvironmentActionData::_internal_has_changeenvironmentalconditions() const {
  return Action_case() == kChangeEnvironmentalConditions;
}
inline bool AnyEnvironmentActionData::has_changeenvironmentalconditions() const {
  return _internal_has_changeenvironmentalconditions();
}
inline void AnyEnvironmentActionData::set_has_changeenvironmentalconditions() {
  _oneof_case_[0] = kChangeEnvironmentalConditions;
}
inline void AnyEnvironmentActionData::clear_changeenvironmentalconditions() {
  if (_internal_has_changeenvironmentalconditions()) {
    if (GetArena() == nullptr) {
      delete Action_.changeenvironmentalconditions_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* AnyEnvironmentActionData::release_changeenvironmentalconditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
  if (_internal_has_changeenvironmentalconditions()) {
    clear_has_Action();
      ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* temp = Action_.changeenvironmentalconditions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.changeenvironmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData& AnyEnvironmentActionData::_internal_changeenvironmentalconditions() const {
  return _internal_has_changeenvironmentalconditions()
      ? *Action_.changeenvironmentalconditions_
      : reinterpret_cast< ::pulse::cdm::bind::ChangeEnvironmentalConditionsData&>(::pulse::cdm::bind::_ChangeEnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::ChangeEnvironmentalConditionsData& AnyEnvironmentActionData::changeenvironmentalconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
  return _internal_changeenvironmentalconditions();
}
inline ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* AnyEnvironmentActionData::unsafe_arena_release_changeenvironmentalconditions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
  if (_internal_has_changeenvironmentalconditions()) {
    clear_has_Action();
    ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* temp = Action_.changeenvironmentalconditions_;
    Action_.changeenvironmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEnvironmentActionData::unsafe_arena_set_allocated_changeenvironmentalconditions(::pulse::cdm::bind::ChangeEnvironmentalConditionsData* changeenvironmentalconditions) {
  clear_Action();
  if (changeenvironmentalconditions) {
    set_has_changeenvironmentalconditions();
    Action_.changeenvironmentalconditions_ = changeenvironmentalconditions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
}
inline ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* AnyEnvironmentActionData::_internal_mutable_changeenvironmentalconditions() {
  if (!_internal_has_changeenvironmentalconditions()) {
    clear_Action();
    set_has_changeenvironmentalconditions();
    Action_.changeenvironmentalconditions_ = CreateMaybeMessage< ::pulse::cdm::bind::ChangeEnvironmentalConditionsData >(GetArena());
  }
  return Action_.changeenvironmentalconditions_;
}
inline ::pulse::cdm::bind::ChangeEnvironmentalConditionsData* AnyEnvironmentActionData::mutable_changeenvironmentalconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEnvironmentActionData.ChangeEnvironmentalConditions)
  return _internal_mutable_changeenvironmentalconditions();
}

// .pulse.cdm.bind.ThermalApplicationData ThermalApplication = 2;
inline bool AnyEnvironmentActionData::_internal_has_thermalapplication() const {
  return Action_case() == kThermalApplication;
}
inline bool AnyEnvironmentActionData::has_thermalapplication() const {
  return _internal_has_thermalapplication();
}
inline void AnyEnvironmentActionData::set_has_thermalapplication() {
  _oneof_case_[0] = kThermalApplication;
}
inline void AnyEnvironmentActionData::clear_thermalapplication() {
  if (_internal_has_thermalapplication()) {
    if (GetArena() == nullptr) {
      delete Action_.thermalapplication_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ThermalApplicationData* AnyEnvironmentActionData::release_thermalapplication() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
  if (_internal_has_thermalapplication()) {
    clear_has_Action();
      ::pulse::cdm::bind::ThermalApplicationData* temp = Action_.thermalapplication_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.thermalapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ThermalApplicationData& AnyEnvironmentActionData::_internal_thermalapplication() const {
  return _internal_has_thermalapplication()
      ? *Action_.thermalapplication_
      : reinterpret_cast< ::pulse::cdm::bind::ThermalApplicationData&>(::pulse::cdm::bind::_ThermalApplicationData_default_instance_);
}
inline const ::pulse::cdm::bind::ThermalApplicationData& AnyEnvironmentActionData::thermalapplication() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
  return _internal_thermalapplication();
}
inline ::pulse::cdm::bind::ThermalApplicationData* AnyEnvironmentActionData::unsafe_arena_release_thermalapplication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
  if (_internal_has_thermalapplication()) {
    clear_has_Action();
    ::pulse::cdm::bind::ThermalApplicationData* temp = Action_.thermalapplication_;
    Action_.thermalapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEnvironmentActionData::unsafe_arena_set_allocated_thermalapplication(::pulse::cdm::bind::ThermalApplicationData* thermalapplication) {
  clear_Action();
  if (thermalapplication) {
    set_has_thermalapplication();
    Action_.thermalapplication_ = thermalapplication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
}
inline ::pulse::cdm::bind::ThermalApplicationData* AnyEnvironmentActionData::_internal_mutable_thermalapplication() {
  if (!_internal_has_thermalapplication()) {
    clear_Action();
    set_has_thermalapplication();
    Action_.thermalapplication_ = CreateMaybeMessage< ::pulse::cdm::bind::ThermalApplicationData >(GetArena());
  }
  return Action_.thermalapplication_;
}
inline ::pulse::cdm::bind::ThermalApplicationData* AnyEnvironmentActionData::mutable_thermalapplication() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEnvironmentActionData.ThermalApplication)
  return _internal_mutable_thermalapplication();
}

inline bool AnyEnvironmentActionData::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
inline void AnyEnvironmentActionData::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline AnyEnvironmentActionData::ActionCase AnyEnvironmentActionData::Action_case() const {
  return AnyEnvironmentActionData::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnvironmentActionData

// .pulse.cdm.bind.ActionData Action = 1;
inline bool EnvironmentActionData::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool EnvironmentActionData::has_action() const {
  return _internal_has_action();
}
inline const ::pulse::cdm::bind::ActionData& EnvironmentActionData::_internal_action() const {
  const ::pulse::cdm::bind::ActionData* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActionData&>(
      ::pulse::cdm::bind::_ActionData_default_instance_);
}
inline const ::pulse::cdm::bind::ActionData& EnvironmentActionData::action() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentActionData.Action)
  return _internal_action();
}
inline void EnvironmentActionData::unsafe_arena_set_allocated_action(
    ::pulse::cdm::bind::ActionData* action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentActionData.Action)
}
inline ::pulse::cdm::bind::ActionData* EnvironmentActionData::release_action() {
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActionData* EnvironmentActionData::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentActionData.Action)
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActionData* EnvironmentActionData::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActionData>(GetArena());
    action_ = p;
  }
  return action_;
}
inline ::pulse::cdm::bind::ActionData* EnvironmentActionData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentActionData.Action)
  return _internal_mutable_action();
}
inline void EnvironmentActionData::set_allocated_action(::pulse::cdm::bind::ActionData* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action)->GetArena();
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentActionData.Action)
}

// -------------------------------------------------------------------

// ChangeEnvironmentalConditionsData

// .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
inline bool ChangeEnvironmentalConditionsData::_internal_has_environmentaction() const {
  return this != internal_default_instance() && environmentaction_ != nullptr;
}
inline bool ChangeEnvironmentalConditionsData::has_environmentaction() const {
  return _internal_has_environmentaction();
}
inline void ChangeEnvironmentalConditionsData::clear_environmentaction() {
  if (GetArena() == nullptr && environmentaction_ != nullptr) {
    delete environmentaction_;
  }
  environmentaction_ = nullptr;
}
inline const ::pulse::cdm::bind::EnvironmentActionData& ChangeEnvironmentalConditionsData::_internal_environmentaction() const {
  const ::pulse::cdm::bind::EnvironmentActionData* p = environmentaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EnvironmentActionData&>(
      ::pulse::cdm::bind::_EnvironmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentActionData& ChangeEnvironmentalConditionsData::environmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentAction)
  return _internal_environmentaction();
}
inline void ChangeEnvironmentalConditionsData::unsafe_arena_set_allocated_environmentaction(
    ::pulse::cdm::bind::EnvironmentActionData* environmentaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmentaction_);
  }
  environmentaction_ = environmentaction;
  if (environmentaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentAction)
}
inline ::pulse::cdm::bind::EnvironmentActionData* ChangeEnvironmentalConditionsData::release_environmentaction() {
  
  ::pulse::cdm::bind::EnvironmentActionData* temp = environmentaction_;
  environmentaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ChangeEnvironmentalConditionsData::unsafe_arena_release_environmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentAction)
  
  ::pulse::cdm::bind::EnvironmentActionData* temp = environmentaction_;
  environmentaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ChangeEnvironmentalConditionsData::_internal_mutable_environmentaction() {
  
  if (environmentaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnvironmentActionData>(GetArena());
    environmentaction_ = p;
  }
  return environmentaction_;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ChangeEnvironmentalConditionsData::mutable_environmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentAction)
  return _internal_mutable_environmentaction();
}
inline void ChangeEnvironmentalConditionsData::set_allocated_environmentaction(::pulse::cdm::bind::EnvironmentActionData* environmentaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environmentaction_;
  }
  if (environmentaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environmentaction);
    if (message_arena != submessage_arena) {
      environmentaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentaction, submessage_arena);
    }
    
  } else {
    
  }
  environmentaction_ = environmentaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentAction)
}

// .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
inline bool ChangeEnvironmentalConditionsData::_internal_has_environmentalconditions() const {
  return Option_case() == kEnvironmentalConditions;
}
inline bool ChangeEnvironmentalConditionsData::has_environmentalconditions() const {
  return _internal_has_environmentalconditions();
}
inline void ChangeEnvironmentalConditionsData::set_has_environmentalconditions() {
  _oneof_case_[0] = kEnvironmentalConditions;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ChangeEnvironmentalConditionsData::release_environmentalconditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
  if (_internal_has_environmentalconditions()) {
    clear_has_Option();
      ::pulse::cdm::bind::EnvironmentalConditionsData* temp = Option_.environmentalconditions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.environmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& ChangeEnvironmentalConditionsData::_internal_environmentalconditions() const {
  return _internal_has_environmentalconditions()
      ? *Option_.environmentalconditions_
      : reinterpret_cast< ::pulse::cdm::bind::EnvironmentalConditionsData&>(::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& ChangeEnvironmentalConditionsData::environmentalconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
  return _internal_environmentalconditions();
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ChangeEnvironmentalConditionsData::unsafe_arena_release_environmentalconditions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
  if (_internal_has_environmentalconditions()) {
    clear_has_Option();
    ::pulse::cdm::bind::EnvironmentalConditionsData* temp = Option_.environmentalconditions_;
    Option_.environmentalconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChangeEnvironmentalConditionsData::unsafe_arena_set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions) {
  clear_Option();
  if (environmentalconditions) {
    set_has_environmentalconditions();
    Option_.environmentalconditions_ = environmentalconditions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ChangeEnvironmentalConditionsData::_internal_mutable_environmentalconditions() {
  if (!_internal_has_environmentalconditions()) {
    clear_Option();
    set_has_environmentalconditions();
    Option_.environmentalconditions_ = CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentalConditionsData >(GetArena());
  }
  return Option_.environmentalconditions_;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ChangeEnvironmentalConditionsData::mutable_environmentalconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditions)
  return _internal_mutable_environmentalconditions();
}

// string EnvironmentalConditionsFile = 3;
inline bool ChangeEnvironmentalConditionsData::_internal_has_environmentalconditionsfile() const {
  return Option_case() == kEnvironmentalConditionsFile;
}
inline void ChangeEnvironmentalConditionsData::set_has_environmentalconditionsfile() {
  _oneof_case_[0] = kEnvironmentalConditionsFile;
}
inline void ChangeEnvironmentalConditionsData::clear_environmentalconditionsfile() {
  if (_internal_has_environmentalconditionsfile()) {
    Option_.environmentalconditionsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& ChangeEnvironmentalConditionsData::environmentalconditionsfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
  return _internal_environmentalconditionsfile();
}
inline void ChangeEnvironmentalConditionsData::set_environmentalconditionsfile(const std::string& value) {
  _internal_set_environmentalconditionsfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline std::string* ChangeEnvironmentalConditionsData::mutable_environmentalconditionsfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
  return _internal_mutable_environmentalconditionsfile();
}
inline const std::string& ChangeEnvironmentalConditionsData::_internal_environmentalconditionsfile() const {
  if (_internal_has_environmentalconditionsfile()) {
    return Option_.environmentalconditionsfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChangeEnvironmentalConditionsData::_internal_set_environmentalconditionsfile(const std::string& value) {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeEnvironmentalConditionsData::set_environmentalconditionsfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline void ChangeEnvironmentalConditionsData::set_environmentalconditionsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline void ChangeEnvironmentalConditionsData::set_environmentalconditionsfile(const char* value,
                             size_t size) {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.environmentalconditionsfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
}
inline std::string* ChangeEnvironmentalConditionsData::_internal_mutable_environmentalconditionsfile() {
  if (!_internal_has_environmentalconditionsfile()) {
    clear_Option();
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.environmentalconditionsfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeEnvironmentalConditionsData::release_environmentalconditionsfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
  if (_internal_has_environmentalconditionsfile()) {
    clear_has_Option();
    return Option_.environmentalconditionsfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ChangeEnvironmentalConditionsData::set_allocated_environmentalconditionsfile(std::string* environmentalconditionsfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (environmentalconditionsfile != nullptr) {
    set_has_environmentalconditionsfile();
    Option_.environmentalconditionsfile_.UnsafeSetDefault(environmentalconditionsfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(environmentalconditionsfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChangeEnvironmentalConditionsData.EnvironmentalConditionsFile)
}

inline bool ChangeEnvironmentalConditionsData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void ChangeEnvironmentalConditionsData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline ChangeEnvironmentalConditionsData::OptionCase ChangeEnvironmentalConditionsData::Option_case() const {
  return ChangeEnvironmentalConditionsData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ThermalApplicationData

// .pulse.cdm.bind.EnvironmentActionData EnvironmentAction = 1;
inline bool ThermalApplicationData::_internal_has_environmentaction() const {
  return this != internal_default_instance() && environmentaction_ != nullptr;
}
inline bool ThermalApplicationData::has_environmentaction() const {
  return _internal_has_environmentaction();
}
inline void ThermalApplicationData::clear_environmentaction() {
  if (GetArena() == nullptr && environmentaction_ != nullptr) {
    delete environmentaction_;
  }
  environmentaction_ = nullptr;
}
inline const ::pulse::cdm::bind::EnvironmentActionData& ThermalApplicationData::_internal_environmentaction() const {
  const ::pulse::cdm::bind::EnvironmentActionData* p = environmentaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EnvironmentActionData&>(
      ::pulse::cdm::bind::_EnvironmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentActionData& ThermalApplicationData::environmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalApplicationData.EnvironmentAction)
  return _internal_environmentaction();
}
inline void ThermalApplicationData::unsafe_arena_set_allocated_environmentaction(
    ::pulse::cdm::bind::EnvironmentActionData* environmentaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmentaction_);
  }
  environmentaction_ = environmentaction;
  if (environmentaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalApplicationData.EnvironmentAction)
}
inline ::pulse::cdm::bind::EnvironmentActionData* ThermalApplicationData::release_environmentaction() {
  
  ::pulse::cdm::bind::EnvironmentActionData* temp = environmentaction_;
  environmentaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ThermalApplicationData::unsafe_arena_release_environmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalApplicationData.EnvironmentAction)
  
  ::pulse::cdm::bind::EnvironmentActionData* temp = environmentaction_;
  environmentaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ThermalApplicationData::_internal_mutable_environmentaction() {
  
  if (environmentaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnvironmentActionData>(GetArena());
    environmentaction_ = p;
  }
  return environmentaction_;
}
inline ::pulse::cdm::bind::EnvironmentActionData* ThermalApplicationData::mutable_environmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalApplicationData.EnvironmentAction)
  return _internal_mutable_environmentaction();
}
inline void ThermalApplicationData::set_allocated_environmentaction(::pulse::cdm::bind::EnvironmentActionData* environmentaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environmentaction_;
  }
  if (environmentaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environmentaction);
    if (message_arena != submessage_arena) {
      environmentaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentaction, submessage_arena);
    }
    
  } else {
    
  }
  environmentaction_ = environmentaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalApplicationData.EnvironmentAction)
}

// .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
inline bool ThermalApplicationData::_internal_has_activeheating() const {
  return this != internal_default_instance() && activeheating_ != nullptr;
}
inline bool ThermalApplicationData::has_activeheating() const {
  return _internal_has_activeheating();
}
inline const ::pulse::cdm::bind::ActiveConditioningData& ThermalApplicationData::_internal_activeheating() const {
  const ::pulse::cdm::bind::ActiveConditioningData* p = activeheating_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActiveConditioningData&>(
      ::pulse::cdm::bind::_ActiveConditioningData_default_instance_);
}
inline const ::pulse::cdm::bind::ActiveConditioningData& ThermalApplicationData::activeheating() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalApplicationData.ActiveHeating)
  return _internal_activeheating();
}
inline void ThermalApplicationData::unsafe_arena_set_allocated_activeheating(
    ::pulse::cdm::bind::ActiveConditioningData* activeheating) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activeheating_);
  }
  activeheating_ = activeheating;
  if (activeheating) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalApplicationData.ActiveHeating)
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::release_activeheating() {
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activeheating_;
  activeheating_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::unsafe_arena_release_activeheating() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalApplicationData.ActiveHeating)
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activeheating_;
  activeheating_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::_internal_mutable_activeheating() {
  
  if (activeheating_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActiveConditioningData>(GetArena());
    activeheating_ = p;
  }
  return activeheating_;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::mutable_activeheating() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalApplicationData.ActiveHeating)
  return _internal_mutable_activeheating();
}
inline void ThermalApplicationData::set_allocated_activeheating(::pulse::cdm::bind::ActiveConditioningData* activeheating) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activeheating_);
  }
  if (activeheating) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activeheating)->GetArena();
    if (message_arena != submessage_arena) {
      activeheating = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activeheating, submessage_arena);
    }
    
  } else {
    
  }
  activeheating_ = activeheating;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalApplicationData.ActiveHeating)
}

// .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
inline bool ThermalApplicationData::_internal_has_activecooling() const {
  return this != internal_default_instance() && activecooling_ != nullptr;
}
inline bool ThermalApplicationData::has_activecooling() const {
  return _internal_has_activecooling();
}
inline const ::pulse::cdm::bind::ActiveConditioningData& ThermalApplicationData::_internal_activecooling() const {
  const ::pulse::cdm::bind::ActiveConditioningData* p = activecooling_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActiveConditioningData&>(
      ::pulse::cdm::bind::_ActiveConditioningData_default_instance_);
}
inline const ::pulse::cdm::bind::ActiveConditioningData& ThermalApplicationData::activecooling() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalApplicationData.ActiveCooling)
  return _internal_activecooling();
}
inline void ThermalApplicationData::unsafe_arena_set_allocated_activecooling(
    ::pulse::cdm::bind::ActiveConditioningData* activecooling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activecooling_);
  }
  activecooling_ = activecooling;
  if (activecooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalApplicationData.ActiveCooling)
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::release_activecooling() {
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activecooling_;
  activecooling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::unsafe_arena_release_activecooling() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalApplicationData.ActiveCooling)
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activecooling_;
  activecooling_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::_internal_mutable_activecooling() {
  
  if (activecooling_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActiveConditioningData>(GetArena());
    activecooling_ = p;
  }
  return activecooling_;
}
inline ::pulse::cdm::bind::ActiveConditioningData* ThermalApplicationData::mutable_activecooling() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalApplicationData.ActiveCooling)
  return _internal_mutable_activecooling();
}
inline void ThermalApplicationData::set_allocated_activecooling(::pulse::cdm::bind::ActiveConditioningData* activecooling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activecooling_);
  }
  if (activecooling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activecooling)->GetArena();
    if (message_arena != submessage_arena) {
      activecooling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activecooling, submessage_arena);
    }
    
  } else {
    
  }
  activecooling_ = activecooling;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalApplicationData.ActiveCooling)
}

// .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
inline bool ThermalApplicationData::_internal_has_appliedtemperature() const {
  return this != internal_default_instance() && appliedtemperature_ != nullptr;
}
inline bool ThermalApplicationData::has_appliedtemperature() const {
  return _internal_has_appliedtemperature();
}
inline const ::pulse::cdm::bind::AppliedTemperatureData& ThermalApplicationData::_internal_appliedtemperature() const {
  const ::pulse::cdm::bind::AppliedTemperatureData* p = appliedtemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AppliedTemperatureData&>(
      ::pulse::cdm::bind::_AppliedTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::AppliedTemperatureData& ThermalApplicationData::appliedtemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalApplicationData.AppliedTemperature)
  return _internal_appliedtemperature();
}
inline void ThermalApplicationData::unsafe_arena_set_allocated_appliedtemperature(
    ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appliedtemperature_);
  }
  appliedtemperature_ = appliedtemperature;
  if (appliedtemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ThermalApplicationData.AppliedTemperature)
}
inline ::pulse::cdm::bind::AppliedTemperatureData* ThermalApplicationData::release_appliedtemperature() {
  
  ::pulse::cdm::bind::AppliedTemperatureData* temp = appliedtemperature_;
  appliedtemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* ThermalApplicationData::unsafe_arena_release_appliedtemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ThermalApplicationData.AppliedTemperature)
  
  ::pulse::cdm::bind::AppliedTemperatureData* temp = appliedtemperature_;
  appliedtemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* ThermalApplicationData::_internal_mutable_appliedtemperature() {
  
  if (appliedtemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AppliedTemperatureData>(GetArena());
    appliedtemperature_ = p;
  }
  return appliedtemperature_;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* ThermalApplicationData::mutable_appliedtemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ThermalApplicationData.AppliedTemperature)
  return _internal_mutable_appliedtemperature();
}
inline void ThermalApplicationData::set_allocated_appliedtemperature(::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(appliedtemperature_);
  }
  if (appliedtemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appliedtemperature)->GetArena();
    if (message_arena != submessage_arena) {
      appliedtemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appliedtemperature, submessage_arena);
    }
    
  } else {
    
  }
  appliedtemperature_ = appliedtemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ThermalApplicationData.AppliedTemperature)
}

// bool AppendToPrevious = 5;
inline void ThermalApplicationData::clear_appendtoprevious() {
  appendtoprevious_ = false;
}
inline bool ThermalApplicationData::_internal_appendtoprevious() const {
  return appendtoprevious_;
}
inline bool ThermalApplicationData::appendtoprevious() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ThermalApplicationData.AppendToPrevious)
  return _internal_appendtoprevious();
}
inline void ThermalApplicationData::_internal_set_appendtoprevious(bool value) {
  
  appendtoprevious_ = value;
}
inline void ThermalApplicationData::set_appendtoprevious(bool value) {
  _internal_set_appendtoprevious(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ThermalApplicationData.AppendToPrevious)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironmentActions_2eproto
