// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/MechanicalVentilator.proto

#include "pulse/cdm/bind/MechanicalVentilator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class MechanicalVentilatorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MechanicalVentilatorData> _instance;
} _MechanicalVentilatorData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_MechanicalVentilatorData_default_instance_;
    new (ptr) ::pulse::cdm::bind::MechanicalVentilatorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto}, {
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, connection_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, endotrachealtuberesistance_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, expirationtuberesistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, expirationvalveresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, expirationwaveform_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, inspirationpausetime_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, inspirationtuberesistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, inspirationvalveresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, inspirationwaveform_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, fractioninspiredgas_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, concentrationinspiredaerosol_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, ExpiratoryBaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, ExpirationCycle_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, InspirationLimit_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, InspiratoryTarget_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, InspirationMachineTrigger_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MechanicalVentilatorData, InspirationPatientTrigger_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::MechanicalVentilatorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_MechanicalVentilatorData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)pulse/cdm/bind/MechanicalVentilator.pr"
  "oto\022\016pulse.cdm.bind\032\037pulse/cdm/bind/Prop"
  "erties.proto\032\036pulse/cdm/bind/Substance.p"
  "roto\"\276\021\n\030MechanicalVentilatorData\022H\n\nCon"
  "nection\030\001 \001(\01624.pulse.cdm.bind.Mechanica"
  "lVentilatorData.eConnection\022S\n\032Endotrach"
  "ealTubeResistance\030\002 \001(\0132/.pulse.cdm.bind"
  ".ScalarPressureTimePerVolumeData\022H\n\032Posi"
  "tiveEndExpiredPressure\030\003 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureDataH\000\022H\n\032Functional"
  "ResidualCapacity\030\004 \001(\0132\".pulse.cdm.bind."
  "ScalarPressureDataH\000\022F\n\023ExpirationCycleF"
  "low\030\005 \001(\0132\'.pulse.cdm.bind.ScalarVolumeP"
  "erTimeDataH\001\022E\n\027ExpirationCyclePressure\030"
  "\006 \001(\0132\".pulse.cdm.bind.ScalarPressureDat"
  "aH\001\022=\n\023ExpirationCycleTime\030\007 \001(\0132\036.pulse"
  ".cdm.bind.ScalarTimeDataH\001\022A\n\025Expiration"
  "CycleVolume\030\010 \001(\0132 .pulse.cdm.bind.Scala"
  "rVolumeDataH\001\022Q\n\030ExpirationTubeResistanc"
  "e\030\t \001(\0132/.pulse.cdm.bind.ScalarPressureT"
  "imePerVolumeData\022R\n\031ExpirationValveResis"
  "tance\030\n \001(\0132/.pulse.cdm.bind.ScalarPress"
  "ureTimePerVolumeData\022T\n\022ExpirationWavefo"
  "rm\030\013 \001(\01628.pulse.cdm.bind.MechanicalVent"
  "ilatorData.eDriverWaveform\022G\n\024Inspiratio"
  "nLimitFlow\030\014 \001(\0132\'.pulse.cdm.bind.Scalar"
  "VolumePerTimeDataH\002\022F\n\030InspirationLimitP"
  "ressure\030\r \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureDataH\002\022B\n\026InspirationLimitVolume\030\016 "
  "\001(\0132 .pulse.cdm.bind.ScalarVolumeDataH\002\022"
  "<\n\024InspirationPauseTime\030\017 \001(\0132\036.pulse.cd"
  "m.bind.ScalarTimeData\022H\n\025InspirationTarg"
  "etFlow\030\020 \001(\0132\'.pulse.cdm.bind.ScalarVolu"
  "mePerTimeDataH\003\022E\n\027PeakInspiratoryPressu"
  "re\030\021 \001(\0132\".pulse.cdm.bind.ScalarPressure"
  "DataH\003\022G\n\035InspirationMachineTriggerTime\030"
  "\022 \001(\0132\036.pulse.cdm.bind.ScalarTimeDataH\004\022"
  "P\n\035InspirationPatientTriggerFlow\030\023 \001(\0132\'"
  ".pulse.cdm.bind.ScalarVolumePerTimeDataH"
  "\005\022O\n!InspirationPatientTriggerPressure\030\024"
  " \001(\0132\".pulse.cdm.bind.ScalarPressureData"
  "H\005\022R\n\031InspirationTubeResistance\030\025 \001(\0132/."
  "pulse.cdm.bind.ScalarPressureTimePerVolu"
  "meData\022S\n\032InspirationValveResistance\030\026 \001"
  "(\0132/.pulse.cdm.bind.ScalarPressureTimePe"
  "rVolumeData\022U\n\023InspirationWaveform\030\027 \001(\016"
  "28.pulse.cdm.bind.MechanicalVentilatorDa"
  "ta.eDriverWaveform\022B\n\023FractionInspiredGa"
  "s\030\030 \003(\0132%.pulse.cdm.bind.SubstanceFracti"
  "onData\022P\n\034ConcentrationInspiredAerosol\030\031"
  " \003(\0132*.pulse.cdm.bind.SubstanceConcentra"
  "tionData\">\n\013eConnection\022\022\n\016NullConnectio"
  "n\020\000\022\007\n\003Off\020\001\022\010\n\004Mask\020\002\022\010\n\004Tube\020\003\"o\n\017eDri"
  "verWaveform\022\026\n\022NullDriverWaveform\020\000\022\n\n\006S"
  "quare\020\001\022\017\n\013Exponential\020\002\022\010\n\004Ramp\020\003\022\016\n\nSi"
  "nusoidal\020\004\022\r\n\tSigmoidal\020\005B\024\n\022ExpiratoryB"
  "aselineB\021\n\017ExpirationCycleB\022\n\020Inspiratio"
  "nLimitB\023\n\021InspiratoryTargetB\033\n\031Inspirati"
  "onMachineTriggerB\033\n\031InspirationPatientTr"
  "iggerB/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016"
  "pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_sccs[1] = {
  &scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto, "pulse/cdm/bind/MechanicalVentilator.proto", 2422,
  &descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto, 1, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MechanicalVentilatorData_eConnection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto[0];
}
bool MechanicalVentilatorData_eConnection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::NullConnection;
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::Off;
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::Mask;
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::Tube;
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::eConnection_MIN;
constexpr MechanicalVentilatorData_eConnection MechanicalVentilatorData::eConnection_MAX;
constexpr int MechanicalVentilatorData::eConnection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MechanicalVentilatorData_eDriverWaveform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto[1];
}
bool MechanicalVentilatorData_eDriverWaveform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::NullDriverWaveform;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::Square;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::Exponential;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::Ramp;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::Sinusoidal;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::Sigmoidal;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::eDriverWaveform_MIN;
constexpr MechanicalVentilatorData_eDriverWaveform MechanicalVentilatorData::eDriverWaveform_MAX;
constexpr int MechanicalVentilatorData::eDriverWaveform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MechanicalVentilatorData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& endotrachealtuberesistance(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& positiveendexpiredpressure(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& functionalresidualcapacity(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& expirationcycleflow(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& expirationcyclepressure(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& expirationcycletime(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& expirationcyclevolume(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& expirationtuberesistance(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& expirationvalveresistance(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inspirationlimitflow(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& inspirationlimitpressure(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& inspirationlimitvolume(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& inspirationpausetime(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inspirationtargetflow(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& peakinspiratorypressure(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& inspirationmachinetriggertime(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inspirationpatienttriggerflow(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& inspirationpatienttriggerpressure(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& inspirationtuberesistance(const MechanicalVentilatorData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& inspirationvalveresistance(const MechanicalVentilatorData* msg);
};

const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
MechanicalVentilatorData::_Internal::endotrachealtuberesistance(const MechanicalVentilatorData* msg) {
  return *msg->endotrachealtuberesistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::positiveendexpiredpressure(const MechanicalVentilatorData* msg) {
  return *msg->ExpiratoryBaseline_.positiveendexpiredpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::functionalresidualcapacity(const MechanicalVentilatorData* msg) {
  return *msg->ExpiratoryBaseline_.functionalresidualcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
MechanicalVentilatorData::_Internal::expirationcycleflow(const MechanicalVentilatorData* msg) {
  return *msg->ExpirationCycle_.expirationcycleflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::expirationcyclepressure(const MechanicalVentilatorData* msg) {
  return *msg->ExpirationCycle_.expirationcyclepressure_;
}
const ::pulse::cdm::bind::ScalarTimeData&
MechanicalVentilatorData::_Internal::expirationcycletime(const MechanicalVentilatorData* msg) {
  return *msg->ExpirationCycle_.expirationcycletime_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
MechanicalVentilatorData::_Internal::expirationcyclevolume(const MechanicalVentilatorData* msg) {
  return *msg->ExpirationCycle_.expirationcyclevolume_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
MechanicalVentilatorData::_Internal::expirationtuberesistance(const MechanicalVentilatorData* msg) {
  return *msg->expirationtuberesistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
MechanicalVentilatorData::_Internal::expirationvalveresistance(const MechanicalVentilatorData* msg) {
  return *msg->expirationvalveresistance_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
MechanicalVentilatorData::_Internal::inspirationlimitflow(const MechanicalVentilatorData* msg) {
  return *msg->InspirationLimit_.inspirationlimitflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::inspirationlimitpressure(const MechanicalVentilatorData* msg) {
  return *msg->InspirationLimit_.inspirationlimitpressure_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
MechanicalVentilatorData::_Internal::inspirationlimitvolume(const MechanicalVentilatorData* msg) {
  return *msg->InspirationLimit_.inspirationlimitvolume_;
}
const ::pulse::cdm::bind::ScalarTimeData&
MechanicalVentilatorData::_Internal::inspirationpausetime(const MechanicalVentilatorData* msg) {
  return *msg->inspirationpausetime_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
MechanicalVentilatorData::_Internal::inspirationtargetflow(const MechanicalVentilatorData* msg) {
  return *msg->InspiratoryTarget_.inspirationtargetflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::peakinspiratorypressure(const MechanicalVentilatorData* msg) {
  return *msg->InspiratoryTarget_.peakinspiratorypressure_;
}
const ::pulse::cdm::bind::ScalarTimeData&
MechanicalVentilatorData::_Internal::inspirationmachinetriggertime(const MechanicalVentilatorData* msg) {
  return *msg->InspirationMachineTrigger_.inspirationmachinetriggertime_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
MechanicalVentilatorData::_Internal::inspirationpatienttriggerflow(const MechanicalVentilatorData* msg) {
  return *msg->InspirationPatientTrigger_.inspirationpatienttriggerflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
MechanicalVentilatorData::_Internal::inspirationpatienttriggerpressure(const MechanicalVentilatorData* msg) {
  return *msg->InspirationPatientTrigger_.inspirationpatienttriggerpressure_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
MechanicalVentilatorData::_Internal::inspirationtuberesistance(const MechanicalVentilatorData* msg) {
  return *msg->inspirationtuberesistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
MechanicalVentilatorData::_Internal::inspirationvalveresistance(const MechanicalVentilatorData* msg) {
  return *msg->inspirationvalveresistance_;
}
void MechanicalVentilatorData::clear_endotrachealtuberesistance() {
  if (GetArena() == nullptr && endotrachealtuberesistance_ != nullptr) {
    delete endotrachealtuberesistance_;
  }
  endotrachealtuberesistance_ = nullptr;
}
void MechanicalVentilatorData::set_allocated_positiveendexpiredpressure(::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpiratoryBaseline();
  if (positiveendexpiredpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiredpressure)->GetArena();
    if (message_arena != submessage_arena) {
      positiveendexpiredpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiveendexpiredpressure, submessage_arena);
    }
    set_has_positiveendexpiredpressure();
    ExpiratoryBaseline_.positiveendexpiredpressure_ = positiveendexpiredpressure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.PositiveEndExpiredPressure)
}
void MechanicalVentilatorData::clear_positiveendexpiredpressure() {
  if (_internal_has_positiveendexpiredpressure()) {
    if (GetArena() == nullptr) {
      delete ExpiratoryBaseline_.positiveendexpiredpressure_;
    }
    clear_has_ExpiratoryBaseline();
  }
}
void MechanicalVentilatorData::set_allocated_functionalresidualcapacity(::pulse::cdm::bind::ScalarPressureData* functionalresidualcapacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpiratoryBaseline();
  if (functionalresidualcapacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionalresidualcapacity)->GetArena();
    if (message_arena != submessage_arena) {
      functionalresidualcapacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionalresidualcapacity, submessage_arena);
    }
    set_has_functionalresidualcapacity();
    ExpiratoryBaseline_.functionalresidualcapacity_ = functionalresidualcapacity;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.FunctionalResidualCapacity)
}
void MechanicalVentilatorData::clear_functionalresidualcapacity() {
  if (_internal_has_functionalresidualcapacity()) {
    if (GetArena() == nullptr) {
      delete ExpiratoryBaseline_.functionalresidualcapacity_;
    }
    clear_has_ExpiratoryBaseline();
  }
}
void MechanicalVentilatorData::set_allocated_expirationcycleflow(::pulse::cdm::bind::ScalarVolumePerTimeData* expirationcycleflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpirationCycle();
  if (expirationcycleflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationcycleflow)->GetArena();
    if (message_arena != submessage_arena) {
      expirationcycleflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationcycleflow, submessage_arena);
    }
    set_has_expirationcycleflow();
    ExpirationCycle_.expirationcycleflow_ = expirationcycleflow;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.ExpirationCycleFlow)
}
void MechanicalVentilatorData::clear_expirationcycleflow() {
  if (_internal_has_expirationcycleflow()) {
    if (GetArena() == nullptr) {
      delete ExpirationCycle_.expirationcycleflow_;
    }
    clear_has_ExpirationCycle();
  }
}
void MechanicalVentilatorData::set_allocated_expirationcyclepressure(::pulse::cdm::bind::ScalarPressureData* expirationcyclepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpirationCycle();
  if (expirationcyclepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationcyclepressure)->GetArena();
    if (message_arena != submessage_arena) {
      expirationcyclepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationcyclepressure, submessage_arena);
    }
    set_has_expirationcyclepressure();
    ExpirationCycle_.expirationcyclepressure_ = expirationcyclepressure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.ExpirationCyclePressure)
}
void MechanicalVentilatorData::clear_expirationcyclepressure() {
  if (_internal_has_expirationcyclepressure()) {
    if (GetArena() == nullptr) {
      delete ExpirationCycle_.expirationcyclepressure_;
    }
    clear_has_ExpirationCycle();
  }
}
void MechanicalVentilatorData::set_allocated_expirationcycletime(::pulse::cdm::bind::ScalarTimeData* expirationcycletime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpirationCycle();
  if (expirationcycletime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationcycletime)->GetArena();
    if (message_arena != submessage_arena) {
      expirationcycletime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationcycletime, submessage_arena);
    }
    set_has_expirationcycletime();
    ExpirationCycle_.expirationcycletime_ = expirationcycletime;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.ExpirationCycleTime)
}
void MechanicalVentilatorData::clear_expirationcycletime() {
  if (_internal_has_expirationcycletime()) {
    if (GetArena() == nullptr) {
      delete ExpirationCycle_.expirationcycletime_;
    }
    clear_has_ExpirationCycle();
  }
}
void MechanicalVentilatorData::set_allocated_expirationcyclevolume(::pulse::cdm::bind::ScalarVolumeData* expirationcyclevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ExpirationCycle();
  if (expirationcyclevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expirationcyclevolume)->GetArena();
    if (message_arena != submessage_arena) {
      expirationcyclevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expirationcyclevolume, submessage_arena);
    }
    set_has_expirationcyclevolume();
    ExpirationCycle_.expirationcyclevolume_ = expirationcyclevolume;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.ExpirationCycleVolume)
}
void MechanicalVentilatorData::clear_expirationcyclevolume() {
  if (_internal_has_expirationcyclevolume()) {
    if (GetArena() == nullptr) {
      delete ExpirationCycle_.expirationcyclevolume_;
    }
    clear_has_ExpirationCycle();
  }
}
void MechanicalVentilatorData::clear_expirationtuberesistance() {
  if (GetArena() == nullptr && expirationtuberesistance_ != nullptr) {
    delete expirationtuberesistance_;
  }
  expirationtuberesistance_ = nullptr;
}
void MechanicalVentilatorData::clear_expirationvalveresistance() {
  if (GetArena() == nullptr && expirationvalveresistance_ != nullptr) {
    delete expirationvalveresistance_;
  }
  expirationvalveresistance_ = nullptr;
}
void MechanicalVentilatorData::set_allocated_inspirationlimitflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inspirationlimitflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationLimit();
  if (inspirationlimitflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationlimitflow)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationlimitflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationlimitflow, submessage_arena);
    }
    set_has_inspirationlimitflow();
    InspirationLimit_.inspirationlimitflow_ = inspirationlimitflow;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationLimitFlow)
}
void MechanicalVentilatorData::clear_inspirationlimitflow() {
  if (_internal_has_inspirationlimitflow()) {
    if (GetArena() == nullptr) {
      delete InspirationLimit_.inspirationlimitflow_;
    }
    clear_has_InspirationLimit();
  }
}
void MechanicalVentilatorData::set_allocated_inspirationlimitpressure(::pulse::cdm::bind::ScalarPressureData* inspirationlimitpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationLimit();
  if (inspirationlimitpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationlimitpressure)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationlimitpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationlimitpressure, submessage_arena);
    }
    set_has_inspirationlimitpressure();
    InspirationLimit_.inspirationlimitpressure_ = inspirationlimitpressure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationLimitPressure)
}
void MechanicalVentilatorData::clear_inspirationlimitpressure() {
  if (_internal_has_inspirationlimitpressure()) {
    if (GetArena() == nullptr) {
      delete InspirationLimit_.inspirationlimitpressure_;
    }
    clear_has_InspirationLimit();
  }
}
void MechanicalVentilatorData::set_allocated_inspirationlimitvolume(::pulse::cdm::bind::ScalarVolumeData* inspirationlimitvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationLimit();
  if (inspirationlimitvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationlimitvolume)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationlimitvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationlimitvolume, submessage_arena);
    }
    set_has_inspirationlimitvolume();
    InspirationLimit_.inspirationlimitvolume_ = inspirationlimitvolume;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationLimitVolume)
}
void MechanicalVentilatorData::clear_inspirationlimitvolume() {
  if (_internal_has_inspirationlimitvolume()) {
    if (GetArena() == nullptr) {
      delete InspirationLimit_.inspirationlimitvolume_;
    }
    clear_has_InspirationLimit();
  }
}
void MechanicalVentilatorData::clear_inspirationpausetime() {
  if (GetArena() == nullptr && inspirationpausetime_ != nullptr) {
    delete inspirationpausetime_;
  }
  inspirationpausetime_ = nullptr;
}
void MechanicalVentilatorData::set_allocated_inspirationtargetflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inspirationtargetflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspiratoryTarget();
  if (inspirationtargetflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationtargetflow)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationtargetflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationtargetflow, submessage_arena);
    }
    set_has_inspirationtargetflow();
    InspiratoryTarget_.inspirationtargetflow_ = inspirationtargetflow;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationTargetFlow)
}
void MechanicalVentilatorData::clear_inspirationtargetflow() {
  if (_internal_has_inspirationtargetflow()) {
    if (GetArena() == nullptr) {
      delete InspiratoryTarget_.inspirationtargetflow_;
    }
    clear_has_InspiratoryTarget();
  }
}
void MechanicalVentilatorData::set_allocated_peakinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspiratoryTarget();
  if (peakinspiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      peakinspiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakinspiratorypressure, submessage_arena);
    }
    set_has_peakinspiratorypressure();
    InspiratoryTarget_.peakinspiratorypressure_ = peakinspiratorypressure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.PeakInspiratoryPressure)
}
void MechanicalVentilatorData::clear_peakinspiratorypressure() {
  if (_internal_has_peakinspiratorypressure()) {
    if (GetArena() == nullptr) {
      delete InspiratoryTarget_.peakinspiratorypressure_;
    }
    clear_has_InspiratoryTarget();
  }
}
void MechanicalVentilatorData::set_allocated_inspirationmachinetriggertime(::pulse::cdm::bind::ScalarTimeData* inspirationmachinetriggertime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationMachineTrigger();
  if (inspirationmachinetriggertime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationmachinetriggertime)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationmachinetriggertime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationmachinetriggertime, submessage_arena);
    }
    set_has_inspirationmachinetriggertime();
    InspirationMachineTrigger_.inspirationmachinetriggertime_ = inspirationmachinetriggertime;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationMachineTriggerTime)
}
void MechanicalVentilatorData::clear_inspirationmachinetriggertime() {
  if (_internal_has_inspirationmachinetriggertime()) {
    if (GetArena() == nullptr) {
      delete InspirationMachineTrigger_.inspirationmachinetriggertime_;
    }
    clear_has_InspirationMachineTrigger();
  }
}
void MechanicalVentilatorData::set_allocated_inspirationpatienttriggerflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inspirationpatienttriggerflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationPatientTrigger();
  if (inspirationpatienttriggerflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationpatienttriggerflow)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationpatienttriggerflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationpatienttriggerflow, submessage_arena);
    }
    set_has_inspirationpatienttriggerflow();
    InspirationPatientTrigger_.inspirationpatienttriggerflow_ = inspirationpatienttriggerflow;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationPatientTriggerFlow)
}
void MechanicalVentilatorData::clear_inspirationpatienttriggerflow() {
  if (_internal_has_inspirationpatienttriggerflow()) {
    if (GetArena() == nullptr) {
      delete InspirationPatientTrigger_.inspirationpatienttriggerflow_;
    }
    clear_has_InspirationPatientTrigger();
  }
}
void MechanicalVentilatorData::set_allocated_inspirationpatienttriggerpressure(::pulse::cdm::bind::ScalarPressureData* inspirationpatienttriggerpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_InspirationPatientTrigger();
  if (inspirationpatienttriggerpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspirationpatienttriggerpressure)->GetArena();
    if (message_arena != submessage_arena) {
      inspirationpatienttriggerpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspirationpatienttriggerpressure, submessage_arena);
    }
    set_has_inspirationpatienttriggerpressure();
    InspirationPatientTrigger_.inspirationpatienttriggerpressure_ = inspirationpatienttriggerpressure;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorData.InspirationPatientTriggerPressure)
}
void MechanicalVentilatorData::clear_inspirationpatienttriggerpressure() {
  if (_internal_has_inspirationpatienttriggerpressure()) {
    if (GetArena() == nullptr) {
      delete InspirationPatientTrigger_.inspirationpatienttriggerpressure_;
    }
    clear_has_InspirationPatientTrigger();
  }
}
void MechanicalVentilatorData::clear_inspirationtuberesistance() {
  if (GetArena() == nullptr && inspirationtuberesistance_ != nullptr) {
    delete inspirationtuberesistance_;
  }
  inspirationtuberesistance_ = nullptr;
}
void MechanicalVentilatorData::clear_inspirationvalveresistance() {
  if (GetArena() == nullptr && inspirationvalveresistance_ != nullptr) {
    delete inspirationvalveresistance_;
  }
  inspirationvalveresistance_ = nullptr;
}
void MechanicalVentilatorData::clear_fractioninspiredgas() {
  fractioninspiredgas_.Clear();
}
void MechanicalVentilatorData::clear_concentrationinspiredaerosol() {
  concentrationinspiredaerosol_.Clear();
}
MechanicalVentilatorData::MechanicalVentilatorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fractioninspiredgas_(arena),
  concentrationinspiredaerosol_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.MechanicalVentilatorData)
}
MechanicalVentilatorData::MechanicalVentilatorData(const MechanicalVentilatorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fractioninspiredgas_(from.fractioninspiredgas_),
      concentrationinspiredaerosol_(from.concentrationinspiredaerosol_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_endotrachealtuberesistance()) {
    endotrachealtuberesistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.endotrachealtuberesistance_);
  } else {
    endotrachealtuberesistance_ = nullptr;
  }
  if (from._internal_has_expirationtuberesistance()) {
    expirationtuberesistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.expirationtuberesistance_);
  } else {
    expirationtuberesistance_ = nullptr;
  }
  if (from._internal_has_expirationvalveresistance()) {
    expirationvalveresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.expirationvalveresistance_);
  } else {
    expirationvalveresistance_ = nullptr;
  }
  if (from._internal_has_inspirationpausetime()) {
    inspirationpausetime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.inspirationpausetime_);
  } else {
    inspirationpausetime_ = nullptr;
  }
  if (from._internal_has_inspirationtuberesistance()) {
    inspirationtuberesistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.inspirationtuberesistance_);
  } else {
    inspirationtuberesistance_ = nullptr;
  }
  if (from._internal_has_inspirationvalveresistance()) {
    inspirationvalveresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.inspirationvalveresistance_);
  } else {
    inspirationvalveresistance_ = nullptr;
  }
  ::memcpy(&connection_, &from.connection_,
    static_cast<size_t>(reinterpret_cast<char*>(&inspirationwaveform_) -
    reinterpret_cast<char*>(&connection_)) + sizeof(inspirationwaveform_));
  clear_has_ExpiratoryBaseline();
  switch (from.ExpiratoryBaseline_case()) {
    case kPositiveEndExpiredPressure: {
      _internal_mutable_positiveendexpiredpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_positiveendexpiredpressure());
      break;
    }
    case kFunctionalResidualCapacity: {
      _internal_mutable_functionalresidualcapacity()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_functionalresidualcapacity());
      break;
    }
    case EXPIRATORYBASELINE_NOT_SET: {
      break;
    }
  }
  clear_has_ExpirationCycle();
  switch (from.ExpirationCycle_case()) {
    case kExpirationCycleFlow: {
      _internal_mutable_expirationcycleflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_expirationcycleflow());
      break;
    }
    case kExpirationCyclePressure: {
      _internal_mutable_expirationcyclepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_expirationcyclepressure());
      break;
    }
    case kExpirationCycleTime: {
      _internal_mutable_expirationcycletime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_expirationcycletime());
      break;
    }
    case kExpirationCycleVolume: {
      _internal_mutable_expirationcyclevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_expirationcyclevolume());
      break;
    }
    case EXPIRATIONCYCLE_NOT_SET: {
      break;
    }
  }
  clear_has_InspirationLimit();
  switch (from.InspirationLimit_case()) {
    case kInspirationLimitFlow: {
      _internal_mutable_inspirationlimitflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationlimitflow());
      break;
    }
    case kInspirationLimitPressure: {
      _internal_mutable_inspirationlimitpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_inspirationlimitpressure());
      break;
    }
    case kInspirationLimitVolume: {
      _internal_mutable_inspirationlimitvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspirationlimitvolume());
      break;
    }
    case INSPIRATIONLIMIT_NOT_SET: {
      break;
    }
  }
  clear_has_InspiratoryTarget();
  switch (from.InspiratoryTarget_case()) {
    case kInspirationTargetFlow: {
      _internal_mutable_inspirationtargetflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationtargetflow());
      break;
    }
    case kPeakInspiratoryPressure: {
      _internal_mutable_peakinspiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_peakinspiratorypressure());
      break;
    }
    case INSPIRATORYTARGET_NOT_SET: {
      break;
    }
  }
  clear_has_InspirationMachineTrigger();
  switch (from.InspirationMachineTrigger_case()) {
    case kInspirationMachineTriggerTime: {
      _internal_mutable_inspirationmachinetriggertime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_inspirationmachinetriggertime());
      break;
    }
    case INSPIRATIONMACHINETRIGGER_NOT_SET: {
      break;
    }
  }
  clear_has_InspirationPatientTrigger();
  switch (from.InspirationPatientTrigger_case()) {
    case kInspirationPatientTriggerFlow: {
      _internal_mutable_inspirationpatienttriggerflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationpatienttriggerflow());
      break;
    }
    case kInspirationPatientTriggerPressure: {
      _internal_mutable_inspirationpatienttriggerpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_inspirationpatienttriggerpressure());
      break;
    }
    case INSPIRATIONPATIENTTRIGGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.MechanicalVentilatorData)
}

void MechanicalVentilatorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&endotrachealtuberesistance_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inspirationwaveform_) -
      reinterpret_cast<char*>(&endotrachealtuberesistance_)) + sizeof(inspirationwaveform_));
  clear_has_ExpiratoryBaseline();
  clear_has_ExpirationCycle();
  clear_has_InspirationLimit();
  clear_has_InspiratoryTarget();
  clear_has_InspirationMachineTrigger();
  clear_has_InspirationPatientTrigger();
}

MechanicalVentilatorData::~MechanicalVentilatorData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.MechanicalVentilatorData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MechanicalVentilatorData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete endotrachealtuberesistance_;
  if (this != internal_default_instance()) delete expirationtuberesistance_;
  if (this != internal_default_instance()) delete expirationvalveresistance_;
  if (this != internal_default_instance()) delete inspirationpausetime_;
  if (this != internal_default_instance()) delete inspirationtuberesistance_;
  if (this != internal_default_instance()) delete inspirationvalveresistance_;
  if (has_ExpiratoryBaseline()) {
    clear_ExpiratoryBaseline();
  }
  if (has_ExpirationCycle()) {
    clear_ExpirationCycle();
  }
  if (has_InspirationLimit()) {
    clear_InspirationLimit();
  }
  if (has_InspiratoryTarget()) {
    clear_InspiratoryTarget();
  }
  if (has_InspirationMachineTrigger()) {
    clear_InspirationMachineTrigger();
  }
  if (has_InspirationPatientTrigger()) {
    clear_InspirationPatientTrigger();
  }
}

void MechanicalVentilatorData::ArenaDtor(void* object) {
  MechanicalVentilatorData* _this = reinterpret_cast< MechanicalVentilatorData* >(object);
  (void)_this;
}
void MechanicalVentilatorData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MechanicalVentilatorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MechanicalVentilatorData& MechanicalVentilatorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MechanicalVentilatorData_pulse_2fcdm_2fbind_2fMechanicalVentilator_2eproto.base);
  return *internal_default_instance();
}


void MechanicalVentilatorData::clear_ExpiratoryBaseline() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (ExpiratoryBaseline_case()) {
    case kPositiveEndExpiredPressure: {
      if (GetArena() == nullptr) {
        delete ExpiratoryBaseline_.positiveendexpiredpressure_;
      }
      break;
    }
    case kFunctionalResidualCapacity: {
      if (GetArena() == nullptr) {
        delete ExpiratoryBaseline_.functionalresidualcapacity_;
      }
      break;
    }
    case EXPIRATORYBASELINE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPIRATORYBASELINE_NOT_SET;
}

void MechanicalVentilatorData::clear_ExpirationCycle() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (ExpirationCycle_case()) {
    case kExpirationCycleFlow: {
      if (GetArena() == nullptr) {
        delete ExpirationCycle_.expirationcycleflow_;
      }
      break;
    }
    case kExpirationCyclePressure: {
      if (GetArena() == nullptr) {
        delete ExpirationCycle_.expirationcyclepressure_;
      }
      break;
    }
    case kExpirationCycleTime: {
      if (GetArena() == nullptr) {
        delete ExpirationCycle_.expirationcycletime_;
      }
      break;
    }
    case kExpirationCycleVolume: {
      if (GetArena() == nullptr) {
        delete ExpirationCycle_.expirationcyclevolume_;
      }
      break;
    }
    case EXPIRATIONCYCLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EXPIRATIONCYCLE_NOT_SET;
}

void MechanicalVentilatorData::clear_InspirationLimit() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (InspirationLimit_case()) {
    case kInspirationLimitFlow: {
      if (GetArena() == nullptr) {
        delete InspirationLimit_.inspirationlimitflow_;
      }
      break;
    }
    case kInspirationLimitPressure: {
      if (GetArena() == nullptr) {
        delete InspirationLimit_.inspirationlimitpressure_;
      }
      break;
    }
    case kInspirationLimitVolume: {
      if (GetArena() == nullptr) {
        delete InspirationLimit_.inspirationlimitvolume_;
      }
      break;
    }
    case INSPIRATIONLIMIT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = INSPIRATIONLIMIT_NOT_SET;
}

void MechanicalVentilatorData::clear_InspiratoryTarget() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (InspiratoryTarget_case()) {
    case kInspirationTargetFlow: {
      if (GetArena() == nullptr) {
        delete InspiratoryTarget_.inspirationtargetflow_;
      }
      break;
    }
    case kPeakInspiratoryPressure: {
      if (GetArena() == nullptr) {
        delete InspiratoryTarget_.peakinspiratorypressure_;
      }
      break;
    }
    case INSPIRATORYTARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = INSPIRATORYTARGET_NOT_SET;
}

void MechanicalVentilatorData::clear_InspirationMachineTrigger() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (InspirationMachineTrigger_case()) {
    case kInspirationMachineTriggerTime: {
      if (GetArena() == nullptr) {
        delete InspirationMachineTrigger_.inspirationmachinetriggertime_;
      }
      break;
    }
    case INSPIRATIONMACHINETRIGGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = INSPIRATIONMACHINETRIGGER_NOT_SET;
}

void MechanicalVentilatorData::clear_InspirationPatientTrigger() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  switch (InspirationPatientTrigger_case()) {
    case kInspirationPatientTriggerFlow: {
      if (GetArena() == nullptr) {
        delete InspirationPatientTrigger_.inspirationpatienttriggerflow_;
      }
      break;
    }
    case kInspirationPatientTriggerPressure: {
      if (GetArena() == nullptr) {
        delete InspirationPatientTrigger_.inspirationpatienttriggerpressure_;
      }
      break;
    }
    case INSPIRATIONPATIENTTRIGGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = INSPIRATIONPATIENTTRIGGER_NOT_SET;
}


void MechanicalVentilatorData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.MechanicalVentilatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fractioninspiredgas_.Clear();
  concentrationinspiredaerosol_.Clear();
  if (GetArena() == nullptr && endotrachealtuberesistance_ != nullptr) {
    delete endotrachealtuberesistance_;
  }
  endotrachealtuberesistance_ = nullptr;
  if (GetArena() == nullptr && expirationtuberesistance_ != nullptr) {
    delete expirationtuberesistance_;
  }
  expirationtuberesistance_ = nullptr;
  if (GetArena() == nullptr && expirationvalveresistance_ != nullptr) {
    delete expirationvalveresistance_;
  }
  expirationvalveresistance_ = nullptr;
  if (GetArena() == nullptr && inspirationpausetime_ != nullptr) {
    delete inspirationpausetime_;
  }
  inspirationpausetime_ = nullptr;
  if (GetArena() == nullptr && inspirationtuberesistance_ != nullptr) {
    delete inspirationtuberesistance_;
  }
  inspirationtuberesistance_ = nullptr;
  if (GetArena() == nullptr && inspirationvalveresistance_ != nullptr) {
    delete inspirationvalveresistance_;
  }
  inspirationvalveresistance_ = nullptr;
  ::memset(&connection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inspirationwaveform_) -
      reinterpret_cast<char*>(&connection_)) + sizeof(inspirationwaveform_));
  clear_ExpiratoryBaseline();
  clear_ExpirationCycle();
  clear_InspirationLimit();
  clear_InspiratoryTarget();
  clear_InspirationMachineTrigger();
  clear_InspirationPatientTrigger();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MechanicalVentilatorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.MechanicalVentilatorData.eConnection Connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connection(static_cast<::pulse::cdm::bind::MechanicalVentilatorData_eConnection>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData EndotrachealTubeResistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endotrachealtuberesistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiveendexpiredpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData FunctionalResidualCapacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionalresidualcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData ExpirationCycleFlow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationcycleflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ExpirationCyclePressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationcyclepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ExpirationCycleTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationcycletime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ExpirationCycleVolume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationcyclevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationTubeResistance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationtuberesistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationValveResistance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_expirationvalveresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform ExpirationWaveform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_expirationwaveform(static_cast<::pulse::cdm::bind::MechanicalVentilatorData_eDriverWaveform>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationLimitFlow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationlimitflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData InspirationLimitPressure = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationlimitpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData InspirationLimitVolume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationlimitvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData InspirationPauseTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationpausetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationTargetFlow = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationtargetflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakinspiratorypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData InspirationMachineTriggerTime = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationmachinetriggertime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationPatientTriggerFlow = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationpatienttriggerflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData InspirationPatientTriggerPressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationpatienttriggerpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationTubeResistance = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationtuberesistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationValveResistance = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspirationvalveresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform InspirationWaveform = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inspirationwaveform(static_cast<::pulse::cdm::bind::MechanicalVentilatorData_eDriverWaveform>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceFractionData FractionInspiredGas = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fractioninspiredgas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceConcentrationData ConcentrationInspiredAerosol = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_concentrationinspiredaerosol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MechanicalVentilatorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.MechanicalVentilatorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.MechanicalVentilatorData.eConnection Connection = 1;
  if (this->connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_connection(), target);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData EndotrachealTubeResistance = 2;
  if (this->has_endotrachealtuberesistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endotrachealtuberesistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 3;
  if (_internal_has_positiveendexpiredpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::positiveendexpiredpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData FunctionalResidualCapacity = 4;
  if (_internal_has_functionalresidualcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::functionalresidualcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData ExpirationCycleFlow = 5;
  if (_internal_has_expirationcycleflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expirationcycleflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData ExpirationCyclePressure = 6;
  if (_internal_has_expirationcyclepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expirationcyclepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ExpirationCycleTime = 7;
  if (_internal_has_expirationcycletime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::expirationcycletime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExpirationCycleVolume = 8;
  if (_internal_has_expirationcyclevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::expirationcyclevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationTubeResistance = 9;
  if (this->has_expirationtuberesistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::expirationtuberesistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationValveResistance = 10;
  if (this->has_expirationvalveresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::expirationvalveresistance(this), target, stream);
  }

  // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform ExpirationWaveform = 11;
  if (this->expirationwaveform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_expirationwaveform(), target);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationLimitFlow = 12;
  if (_internal_has_inspirationlimitflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::inspirationlimitflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData InspirationLimitPressure = 13;
  if (_internal_has_inspirationlimitpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::inspirationlimitpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspirationLimitVolume = 14;
  if (_internal_has_inspirationlimitvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::inspirationlimitvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData InspirationPauseTime = 15;
  if (this->has_inspirationpausetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::inspirationpausetime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationTargetFlow = 16;
  if (_internal_has_inspirationtargetflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::inspirationtargetflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 17;
  if (_internal_has_peakinspiratorypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::peakinspiratorypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData InspirationMachineTriggerTime = 18;
  if (_internal_has_inspirationmachinetriggertime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::inspirationmachinetriggertime(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationPatientTriggerFlow = 19;
  if (_internal_has_inspirationpatienttriggerflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::inspirationpatienttriggerflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData InspirationPatientTriggerPressure = 20;
  if (_internal_has_inspirationpatienttriggerpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::inspirationpatienttriggerpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationTubeResistance = 21;
  if (this->has_inspirationtuberesistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::inspirationtuberesistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationValveResistance = 22;
  if (this->has_inspirationvalveresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::inspirationvalveresistance(this), target, stream);
  }

  // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform InspirationWaveform = 23;
  if (this->inspirationwaveform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_inspirationwaveform(), target);
  }

  // repeated .pulse.cdm.bind.SubstanceFractionData FractionInspiredGas = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fractioninspiredgas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_fractioninspiredgas(i), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData ConcentrationInspiredAerosol = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_concentrationinspiredaerosol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_concentrationinspiredaerosol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.MechanicalVentilatorData)
  return target;
}

size_t MechanicalVentilatorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.MechanicalVentilatorData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.SubstanceFractionData FractionInspiredGas = 24;
  total_size += 2UL * this->_internal_fractioninspiredgas_size();
  for (const auto& msg : this->fractioninspiredgas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData ConcentrationInspiredAerosol = 25;
  total_size += 2UL * this->_internal_concentrationinspiredaerosol_size();
  for (const auto& msg : this->concentrationinspiredaerosol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData EndotrachealTubeResistance = 2;
  if (this->has_endotrachealtuberesistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endotrachealtuberesistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationTubeResistance = 9;
  if (this->has_expirationtuberesistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expirationtuberesistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpirationValveResistance = 10;
  if (this->has_expirationvalveresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expirationvalveresistance_);
  }

  // .pulse.cdm.bind.ScalarTimeData InspirationPauseTime = 15;
  if (this->has_inspirationpausetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspirationpausetime_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationTubeResistance = 21;
  if (this->has_inspirationtuberesistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspirationtuberesistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspirationValveResistance = 22;
  if (this->has_inspirationvalveresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspirationvalveresistance_);
  }

  // .pulse.cdm.bind.MechanicalVentilatorData.eConnection Connection = 1;
  if (this->connection() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connection());
  }

  // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform ExpirationWaveform = 11;
  if (this->expirationwaveform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_expirationwaveform());
  }

  // .pulse.cdm.bind.MechanicalVentilatorData.eDriverWaveform InspirationWaveform = 23;
  if (this->inspirationwaveform() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inspirationwaveform());
  }

  switch (ExpiratoryBaseline_case()) {
    // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 3;
    case kPositiveEndExpiredPressure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpiratoryBaseline_.positiveendexpiredpressure_);
      break;
    }
    // .pulse.cdm.bind.ScalarPressureData FunctionalResidualCapacity = 4;
    case kFunctionalResidualCapacity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpiratoryBaseline_.functionalresidualcapacity_);
      break;
    }
    case EXPIRATORYBASELINE_NOT_SET: {
      break;
    }
  }
  switch (ExpirationCycle_case()) {
    // .pulse.cdm.bind.ScalarVolumePerTimeData ExpirationCycleFlow = 5;
    case kExpirationCycleFlow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpirationCycle_.expirationcycleflow_);
      break;
    }
    // .pulse.cdm.bind.ScalarPressureData ExpirationCyclePressure = 6;
    case kExpirationCyclePressure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpirationCycle_.expirationcyclepressure_);
      break;
    }
    // .pulse.cdm.bind.ScalarTimeData ExpirationCycleTime = 7;
    case kExpirationCycleTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpirationCycle_.expirationcycletime_);
      break;
    }
    // .pulse.cdm.bind.ScalarVolumeData ExpirationCycleVolume = 8;
    case kExpirationCycleVolume: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ExpirationCycle_.expirationcyclevolume_);
      break;
    }
    case EXPIRATIONCYCLE_NOT_SET: {
      break;
    }
  }
  switch (InspirationLimit_case()) {
    // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationLimitFlow = 12;
    case kInspirationLimitFlow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationLimit_.inspirationlimitflow_);
      break;
    }
    // .pulse.cdm.bind.ScalarPressureData InspirationLimitPressure = 13;
    case kInspirationLimitPressure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationLimit_.inspirationlimitpressure_);
      break;
    }
    // .pulse.cdm.bind.ScalarVolumeData InspirationLimitVolume = 14;
    case kInspirationLimitVolume: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationLimit_.inspirationlimitvolume_);
      break;
    }
    case INSPIRATIONLIMIT_NOT_SET: {
      break;
    }
  }
  switch (InspiratoryTarget_case()) {
    // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationTargetFlow = 16;
    case kInspirationTargetFlow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspiratoryTarget_.inspirationtargetflow_);
      break;
    }
    // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 17;
    case kPeakInspiratoryPressure: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspiratoryTarget_.peakinspiratorypressure_);
      break;
    }
    case INSPIRATORYTARGET_NOT_SET: {
      break;
    }
  }
  switch (InspirationMachineTrigger_case()) {
    // .pulse.cdm.bind.ScalarTimeData InspirationMachineTriggerTime = 18;
    case kInspirationMachineTriggerTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationMachineTrigger_.inspirationmachinetriggertime_);
      break;
    }
    case INSPIRATIONMACHINETRIGGER_NOT_SET: {
      break;
    }
  }
  switch (InspirationPatientTrigger_case()) {
    // .pulse.cdm.bind.ScalarVolumePerTimeData InspirationPatientTriggerFlow = 19;
    case kInspirationPatientTriggerFlow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationPatientTrigger_.inspirationpatienttriggerflow_);
      break;
    }
    // .pulse.cdm.bind.ScalarPressureData InspirationPatientTriggerPressure = 20;
    case kInspirationPatientTriggerPressure: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *InspirationPatientTrigger_.inspirationpatienttriggerpressure_);
      break;
    }
    case INSPIRATIONPATIENTTRIGGER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MechanicalVentilatorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.MechanicalVentilatorData)
  GOOGLE_DCHECK_NE(&from, this);
  const MechanicalVentilatorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MechanicalVentilatorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.MechanicalVentilatorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.MechanicalVentilatorData)
    MergeFrom(*source);
  }
}

void MechanicalVentilatorData::MergeFrom(const MechanicalVentilatorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.MechanicalVentilatorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fractioninspiredgas_.MergeFrom(from.fractioninspiredgas_);
  concentrationinspiredaerosol_.MergeFrom(from.concentrationinspiredaerosol_);
  if (from.has_endotrachealtuberesistance()) {
    _internal_mutable_endotrachealtuberesistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_endotrachealtuberesistance());
  }
  if (from.has_expirationtuberesistance()) {
    _internal_mutable_expirationtuberesistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_expirationtuberesistance());
  }
  if (from.has_expirationvalveresistance()) {
    _internal_mutable_expirationvalveresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_expirationvalveresistance());
  }
  if (from.has_inspirationpausetime()) {
    _internal_mutable_inspirationpausetime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_inspirationpausetime());
  }
  if (from.has_inspirationtuberesistance()) {
    _internal_mutable_inspirationtuberesistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_inspirationtuberesistance());
  }
  if (from.has_inspirationvalveresistance()) {
    _internal_mutable_inspirationvalveresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_inspirationvalveresistance());
  }
  if (from.connection() != 0) {
    _internal_set_connection(from._internal_connection());
  }
  if (from.expirationwaveform() != 0) {
    _internal_set_expirationwaveform(from._internal_expirationwaveform());
  }
  if (from.inspirationwaveform() != 0) {
    _internal_set_inspirationwaveform(from._internal_inspirationwaveform());
  }
  switch (from.ExpiratoryBaseline_case()) {
    case kPositiveEndExpiredPressure: {
      _internal_mutable_positiveendexpiredpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_positiveendexpiredpressure());
      break;
    }
    case kFunctionalResidualCapacity: {
      _internal_mutable_functionalresidualcapacity()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_functionalresidualcapacity());
      break;
    }
    case EXPIRATORYBASELINE_NOT_SET: {
      break;
    }
  }
  switch (from.ExpirationCycle_case()) {
    case kExpirationCycleFlow: {
      _internal_mutable_expirationcycleflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_expirationcycleflow());
      break;
    }
    case kExpirationCyclePressure: {
      _internal_mutable_expirationcyclepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_expirationcyclepressure());
      break;
    }
    case kExpirationCycleTime: {
      _internal_mutable_expirationcycletime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_expirationcycletime());
      break;
    }
    case kExpirationCycleVolume: {
      _internal_mutable_expirationcyclevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_expirationcyclevolume());
      break;
    }
    case EXPIRATIONCYCLE_NOT_SET: {
      break;
    }
  }
  switch (from.InspirationLimit_case()) {
    case kInspirationLimitFlow: {
      _internal_mutable_inspirationlimitflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationlimitflow());
      break;
    }
    case kInspirationLimitPressure: {
      _internal_mutable_inspirationlimitpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_inspirationlimitpressure());
      break;
    }
    case kInspirationLimitVolume: {
      _internal_mutable_inspirationlimitvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspirationlimitvolume());
      break;
    }
    case INSPIRATIONLIMIT_NOT_SET: {
      break;
    }
  }
  switch (from.InspiratoryTarget_case()) {
    case kInspirationTargetFlow: {
      _internal_mutable_inspirationtargetflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationtargetflow());
      break;
    }
    case kPeakInspiratoryPressure: {
      _internal_mutable_peakinspiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_peakinspiratorypressure());
      break;
    }
    case INSPIRATORYTARGET_NOT_SET: {
      break;
    }
  }
  switch (from.InspirationMachineTrigger_case()) {
    case kInspirationMachineTriggerTime: {
      _internal_mutable_inspirationmachinetriggertime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_inspirationmachinetriggertime());
      break;
    }
    case INSPIRATIONMACHINETRIGGER_NOT_SET: {
      break;
    }
  }
  switch (from.InspirationPatientTrigger_case()) {
    case kInspirationPatientTriggerFlow: {
      _internal_mutable_inspirationpatienttriggerflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspirationpatienttriggerflow());
      break;
    }
    case kInspirationPatientTriggerPressure: {
      _internal_mutable_inspirationpatienttriggerpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_inspirationpatienttriggerpressure());
      break;
    }
    case INSPIRATIONPATIENTTRIGGER_NOT_SET: {
      break;
    }
  }
}

void MechanicalVentilatorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.MechanicalVentilatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MechanicalVentilatorData::CopyFrom(const MechanicalVentilatorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.MechanicalVentilatorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MechanicalVentilatorData::IsInitialized() const {
  return true;
}

void MechanicalVentilatorData::InternalSwap(MechanicalVentilatorData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fractioninspiredgas_.InternalSwap(&other->fractioninspiredgas_);
  concentrationinspiredaerosol_.InternalSwap(&other->concentrationinspiredaerosol_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MechanicalVentilatorData, inspirationwaveform_)
      + sizeof(MechanicalVentilatorData::inspirationwaveform_)
      - PROTOBUF_FIELD_OFFSET(MechanicalVentilatorData, endotrachealtuberesistance_)>(
          reinterpret_cast<char*>(&endotrachealtuberesistance_),
          reinterpret_cast<char*>(&other->endotrachealtuberesistance_));
  swap(ExpiratoryBaseline_, other->ExpiratoryBaseline_);
  swap(ExpirationCycle_, other->ExpirationCycle_);
  swap(InspirationLimit_, other->InspirationLimit_);
  swap(InspiratoryTarget_, other->InspiratoryTarget_);
  swap(InspirationMachineTrigger_, other->InspirationMachineTrigger_);
  swap(InspirationPatientTrigger_, other->InspirationPatientTrigger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MechanicalVentilatorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::MechanicalVentilatorData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilatorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::MechanicalVentilatorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
