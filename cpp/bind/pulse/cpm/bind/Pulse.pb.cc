// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/Pulse.proto

#include "pulse/cpm/bind/Pulse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fScenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class ScenarioDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioData> _instance;
} _ScenarioData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
static void InitDefaultsscc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cpm::bind::_ScenarioData_default_instance_;
    new (ptr) ::pulse::cpm::bind::ScenarioData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto}, {
      &scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base,
      &scc_info_ConfigurationData_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcpm_2fbind_2fPulse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcpm_2fbind_2fPulse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ScenarioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ScenarioData, scenario_),
  PROTOBUF_FIELD_OFFSET(::pulse::cpm::bind::ScenarioData, configuration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cpm::bind::ScenarioData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cpm::bind::_ScenarioData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032pulse/cpm/bind/Pulse.proto\022\016pulse.cpm."
  "bind\032\035pulse/cdm/bind/Scenario.proto\032\'pul"
  "se/cpm/bind/PulseConfiguration.proto\"x\n\014"
  "ScenarioData\022.\n\010Scenario\030\001 \001(\0132\034.pulse.c"
  "dm.bind.ScenarioData\0228\n\rConfiguration\030\002 "
  "\001(\0132!.pulse.cpm.bind.ConfigurationDataB/"
  "\n\032com.kitware.pulse.cpm.bindH\001\252\002\016pulse.c"
  "pm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto,
  &::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_sccs[1] = {
  &scc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcpm_2fbind_2fPulse_2eproto, "pulse/cpm/bind/Pulse.proto", 295,
  &descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_once, descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_sccs, descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcpm_2fbind_2fPulse_2eproto::offsets,
  file_level_metadata_pulse_2fcpm_2fbind_2fPulse_2eproto, 1, file_level_enum_descriptors_pulse_2fcpm_2fbind_2fPulse_2eproto, file_level_service_descriptors_pulse_2fcpm_2fbind_2fPulse_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcpm_2fbind_2fPulse_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcpm_2fbind_2fPulse_2eproto)), true);
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class ScenarioData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScenarioData& scenario(const ScenarioData* msg);
  static const ::pulse::cpm::bind::ConfigurationData& configuration(const ScenarioData* msg);
};

const ::pulse::cdm::bind::ScenarioData&
ScenarioData::_Internal::scenario(const ScenarioData* msg) {
  return *msg->scenario_;
}
const ::pulse::cpm::bind::ConfigurationData&
ScenarioData::_Internal::configuration(const ScenarioData* msg) {
  return *msg->configuration_;
}
void ScenarioData::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void ScenarioData::clear_configuration() {
  if (GetArena() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
ScenarioData::ScenarioData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cpm.bind.ScenarioData)
}
ScenarioData::ScenarioData(const ScenarioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::pulse::cdm::bind::ScenarioData(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::pulse::cpm::bind::ConfigurationData(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cpm.bind.ScenarioData)
}

void ScenarioData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scenario_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&configuration_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(configuration_));
}

ScenarioData::~ScenarioData() {
  // @@protoc_insertion_point(destructor:pulse.cpm.bind.ScenarioData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete configuration_;
}

void ScenarioData::ArenaDtor(void* object) {
  ScenarioData* _this = reinterpret_cast< ScenarioData* >(object);
  (void)_this;
}
void ScenarioData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioData& ScenarioData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioData_pulse_2fcpm_2fbind_2fPulse_2eproto.base);
  return *internal_default_instance();
}


void ScenarioData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cpm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScenarioData Scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cpm.bind.ConfigurationData Configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cpm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScenarioData Scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .pulse.cpm.bind.ConfigurationData Configuration = 2;
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cpm.bind.ScenarioData)
  return target;
}

size_t ScenarioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cpm.bind.ScenarioData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScenarioData Scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .pulse.cpm.bind.ConfigurationData Configuration = 2;
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cpm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cpm.bind.ScenarioData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cpm.bind.ScenarioData)
    MergeFrom(*source);
  }
}

void ScenarioData::MergeFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cpm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::pulse::cdm::bind::ScenarioData::MergeFrom(from._internal_scenario());
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->::pulse::cpm::bind::ConfigurationData::MergeFrom(from._internal_configuration());
  }
}

void ScenarioData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cpm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioData::CopyFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cpm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioData::IsInitialized() const {
  return true;
}

void ScenarioData::InternalSwap(ScenarioData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioData, configuration_)
      + sizeof(ScenarioData::configuration_)
      - PROTOBUF_FIELD_OFFSET(ScenarioData, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cpm::bind::ScenarioData* Arena::CreateMaybeMessage< ::pulse::cpm::bind::ScenarioData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cpm::bind::ScenarioData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
