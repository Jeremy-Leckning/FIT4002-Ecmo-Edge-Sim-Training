// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseEnvironment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Environment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class EnvironmentData;
class EnvironmentDataDefaultTypeInternal;
extern EnvironmentDataDefaultTypeInternal _EnvironmentData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cpm::bind::EnvironmentData* Arena::CreateMaybeMessage<::pulse::cpm::bind::EnvironmentData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class EnvironmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.EnvironmentData) */ {
 public:
  inline EnvironmentData() : EnvironmentData(nullptr) {}
  virtual ~EnvironmentData();

  EnvironmentData(const EnvironmentData& from);
  EnvironmentData(EnvironmentData&& from) noexcept
    : EnvironmentData() {
    *this = ::std::move(from);
  }

  inline EnvironmentData& operator=(const EnvironmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentData& operator=(EnvironmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentData& default_instance();

  static inline const EnvironmentData* internal_default_instance() {
    return reinterpret_cast<const EnvironmentData*>(
               &_EnvironmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvironmentData& a, EnvironmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentData* New() const final {
    return CreateMaybeMessage<EnvironmentData>(nullptr);
  }

  EnvironmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentData& from);
  void MergeFrom(const EnvironmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.EnvironmentData";
  }
  protected:
  explicit EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kPatientEquivalentDiameterMFieldNumber = 2,
  };
  // .pulse.cdm.bind.EnvironmentData Common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::pulse::cdm::bind::EnvironmentData& common() const;
  ::pulse::cdm::bind::EnvironmentData* release_common();
  ::pulse::cdm::bind::EnvironmentData* mutable_common();
  void set_allocated_common(::pulse::cdm::bind::EnvironmentData* common);
  private:
  const ::pulse::cdm::bind::EnvironmentData& _internal_common() const;
  ::pulse::cdm::bind::EnvironmentData* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::pulse::cdm::bind::EnvironmentData* common);
  ::pulse::cdm::bind::EnvironmentData* unsafe_arena_release_common();

  // double PatientEquivalentDiameter_m = 2;
  void clear_patientequivalentdiameter_m();
  double patientequivalentdiameter_m() const;
  void set_patientequivalentdiameter_m(double value);
  private:
  double _internal_patientequivalentdiameter_m() const;
  void _internal_set_patientequivalentdiameter_m(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.EnvironmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EnvironmentData* common_;
  double patientequivalentdiameter_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvironmentData

// .pulse.cdm.bind.EnvironmentData Common = 1;
inline bool EnvironmentData::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool EnvironmentData::has_common() const {
  return _internal_has_common();
}
inline const ::pulse::cdm::bind::EnvironmentData& EnvironmentData::_internal_common() const {
  const ::pulse::cdm::bind::EnvironmentData* p = common_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EnvironmentData&>(
      ::pulse::cdm::bind::_EnvironmentData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentData& EnvironmentData::common() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnvironmentData.Common)
  return _internal_common();
}
inline void EnvironmentData::unsafe_arena_set_allocated_common(
    ::pulse::cdm::bind::EnvironmentData* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.EnvironmentData.Common)
}
inline ::pulse::cdm::bind::EnvironmentData* EnvironmentData::release_common() {
  
  ::pulse::cdm::bind::EnvironmentData* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentData* EnvironmentData::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.EnvironmentData.Common)
  
  ::pulse::cdm::bind::EnvironmentData* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentData* EnvironmentData::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnvironmentData>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::pulse::cdm::bind::EnvironmentData* EnvironmentData::mutable_common() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.EnvironmentData.Common)
  return _internal_mutable_common();
}
inline void EnvironmentData::set_allocated_common(::pulse::cdm::bind::EnvironmentData* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common)->GetArena();
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.EnvironmentData.Common)
}

// double PatientEquivalentDiameter_m = 2;
inline void EnvironmentData::clear_patientequivalentdiameter_m() {
  patientequivalentdiameter_m_ = 0;
}
inline double EnvironmentData::_internal_patientequivalentdiameter_m() const {
  return patientequivalentdiameter_m_;
}
inline double EnvironmentData::patientequivalentdiameter_m() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.EnvironmentData.PatientEquivalentDiameter_m)
  return _internal_patientequivalentdiameter_m();
}
inline void EnvironmentData::_internal_set_patientequivalentdiameter_m(double value) {
  
  patientequivalentdiameter_m_ = value;
}
inline void EnvironmentData::set_patientequivalentdiameter_m(double value) {
  _internal_set_patientequivalentdiameter_m(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.EnvironmentData.PatientEquivalentDiameter_m)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cpm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseEnvironment_2eproto
