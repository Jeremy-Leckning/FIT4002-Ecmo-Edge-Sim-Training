// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cpm/bind/PulseConfiguration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Actions.pb.h"
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Engine.pb.h"
#include "pulse/cdm/bind/Environment.pb.h"
#include "pulse/cdm/bind/PatientNutrition.pb.h"
#include "pulse/cdm/bind/ElectroCardioGram.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
namespace pulse {
namespace cpm {
namespace bind {
class ConfigurationData;
class ConfigurationDataDefaultTypeInternal;
extern ConfigurationDataDefaultTypeInternal _ConfigurationData_default_instance_;
class ConfigurationData_BloodChemistryConfigurationData;
class ConfigurationData_BloodChemistryConfigurationDataDefaultTypeInternal;
extern ConfigurationData_BloodChemistryConfigurationDataDefaultTypeInternal _ConfigurationData_BloodChemistryConfigurationData_default_instance_;
class ConfigurationData_CardiovascularConfigurationData;
class ConfigurationData_CardiovascularConfigurationDataDefaultTypeInternal;
extern ConfigurationData_CardiovascularConfigurationDataDefaultTypeInternal _ConfigurationData_CardiovascularConfigurationData_default_instance_;
class ConfigurationData_CircuitConfigurationData;
class ConfigurationData_CircuitConfigurationDataDefaultTypeInternal;
extern ConfigurationData_CircuitConfigurationDataDefaultTypeInternal _ConfigurationData_CircuitConfigurationData_default_instance_;
class ConfigurationData_ConstantsConfigurationData;
class ConfigurationData_ConstantsConfigurationDataDefaultTypeInternal;
extern ConfigurationData_ConstantsConfigurationDataDefaultTypeInternal _ConfigurationData_ConstantsConfigurationData_default_instance_;
class ConfigurationData_DrugsConfigurationData;
class ConfigurationData_DrugsConfigurationDataDefaultTypeInternal;
extern ConfigurationData_DrugsConfigurationDataDefaultTypeInternal _ConfigurationData_DrugsConfigurationData_default_instance_;
class ConfigurationData_ECGConfigurationData;
class ConfigurationData_ECGConfigurationDataDefaultTypeInternal;
extern ConfigurationData_ECGConfigurationDataDefaultTypeInternal _ConfigurationData_ECGConfigurationData_default_instance_;
class ConfigurationData_EnergyConfigurationData;
class ConfigurationData_EnergyConfigurationDataDefaultTypeInternal;
extern ConfigurationData_EnergyConfigurationDataDefaultTypeInternal _ConfigurationData_EnergyConfigurationData_default_instance_;
class ConfigurationData_EnvironmentConfigurationData;
class ConfigurationData_EnvironmentConfigurationDataDefaultTypeInternal;
extern ConfigurationData_EnvironmentConfigurationDataDefaultTypeInternal _ConfigurationData_EnvironmentConfigurationData_default_instance_;
class ConfigurationData_GastrointestinalConfigurationData;
class ConfigurationData_GastrointestinalConfigurationDataDefaultTypeInternal;
extern ConfigurationData_GastrointestinalConfigurationDataDefaultTypeInternal _ConfigurationData_GastrointestinalConfigurationData_default_instance_;
class ConfigurationData_NervousConfigurationData;
class ConfigurationData_NervousConfigurationDataDefaultTypeInternal;
extern ConfigurationData_NervousConfigurationDataDefaultTypeInternal _ConfigurationData_NervousConfigurationData_default_instance_;
class ConfigurationData_RenalConfigurationData;
class ConfigurationData_RenalConfigurationDataDefaultTypeInternal;
extern ConfigurationData_RenalConfigurationDataDefaultTypeInternal _ConfigurationData_RenalConfigurationData_default_instance_;
class ConfigurationData_RespiratoryConfigurationData;
class ConfigurationData_RespiratoryConfigurationDataDefaultTypeInternal;
extern ConfigurationData_RespiratoryConfigurationDataDefaultTypeInternal _ConfigurationData_RespiratoryConfigurationData_default_instance_;
class ConfigurationData_TissueConfigurationData;
class ConfigurationData_TissueConfigurationDataDefaultTypeInternal;
extern ConfigurationData_TissueConfigurationDataDefaultTypeInternal _ConfigurationData_TissueConfigurationData_default_instance_;
}  // namespace bind
}  // namespace cpm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cpm::bind::ConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_ECGConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_NervousConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_RenalConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData>(Arena*);
template<> ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* Arena::CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_TissueConfigurationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cpm {
namespace bind {

// ===================================================================

class ConfigurationData_BloodChemistryConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData) */ {
 public:
  inline ConfigurationData_BloodChemistryConfigurationData() : ConfigurationData_BloodChemistryConfigurationData(nullptr) {}
  virtual ~ConfigurationData_BloodChemistryConfigurationData();

  ConfigurationData_BloodChemistryConfigurationData(const ConfigurationData_BloodChemistryConfigurationData& from);
  ConfigurationData_BloodChemistryConfigurationData(ConfigurationData_BloodChemistryConfigurationData&& from) noexcept
    : ConfigurationData_BloodChemistryConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_BloodChemistryConfigurationData& operator=(const ConfigurationData_BloodChemistryConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_BloodChemistryConfigurationData& operator=(ConfigurationData_BloodChemistryConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_BloodChemistryConfigurationData& default_instance();

  static inline const ConfigurationData_BloodChemistryConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_BloodChemistryConfigurationData*>(
               &_ConfigurationData_BloodChemistryConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigurationData_BloodChemistryConfigurationData& a, ConfigurationData_BloodChemistryConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_BloodChemistryConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_BloodChemistryConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_BloodChemistryConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_BloodChemistryConfigurationData>(nullptr);
  }

  ConfigurationData_BloodChemistryConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_BloodChemistryConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_BloodChemistryConfigurationData& from);
  void MergeFrom(const ConfigurationData_BloodChemistryConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_BloodChemistryConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData";
  }
  protected:
  explicit ConfigurationData_BloodChemistryConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanCorpuscularHemoglobinFieldNumber = 1,
    kMeanCorpuscularVolumeFieldNumber = 2,
    kStandardDiffusionDistanceFieldNumber = 3,
    kStandardOxygenDiffusionCoefficientFieldNumber = 4,
  };
  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 1;
  bool has_meancorpuscularhemoglobin() const;
  private:
  bool _internal_has_meancorpuscularhemoglobin() const;
  public:
  void clear_meancorpuscularhemoglobin();
  const ::pulse::cdm::bind::ScalarMassPerAmountData& meancorpuscularhemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* release_meancorpuscularhemoglobin();
  ::pulse::cdm::bind::ScalarMassPerAmountData* mutable_meancorpuscularhemoglobin();
  void set_allocated_meancorpuscularhemoglobin(::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAmountData& _internal_meancorpuscularhemoglobin() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* _internal_mutable_meancorpuscularhemoglobin();
  public:
  void unsafe_arena_set_allocated_meancorpuscularhemoglobin(
      ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin);
  ::pulse::cdm::bind::ScalarMassPerAmountData* unsafe_arena_release_meancorpuscularhemoglobin();

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 2;
  bool has_meancorpuscularvolume() const;
  private:
  bool _internal_has_meancorpuscularvolume() const;
  public:
  void clear_meancorpuscularvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& meancorpuscularvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_meancorpuscularvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_meancorpuscularvolume();
  void set_allocated_meancorpuscularvolume(::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_meancorpuscularvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_meancorpuscularvolume();
  public:
  void unsafe_arena_set_allocated_meancorpuscularvolume(
      ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_meancorpuscularvolume();

  // .pulse.cdm.bind.ScalarLengthData StandardDiffusionDistance = 3;
  bool has_standarddiffusiondistance() const;
  private:
  bool _internal_has_standarddiffusiondistance() const;
  public:
  void clear_standarddiffusiondistance();
  const ::pulse::cdm::bind::ScalarLengthData& standarddiffusiondistance() const;
  ::pulse::cdm::bind::ScalarLengthData* release_standarddiffusiondistance();
  ::pulse::cdm::bind::ScalarLengthData* mutable_standarddiffusiondistance();
  void set_allocated_standarddiffusiondistance(::pulse::cdm::bind::ScalarLengthData* standarddiffusiondistance);
  private:
  const ::pulse::cdm::bind::ScalarLengthData& _internal_standarddiffusiondistance() const;
  ::pulse::cdm::bind::ScalarLengthData* _internal_mutable_standarddiffusiondistance();
  public:
  void unsafe_arena_set_allocated_standarddiffusiondistance(
      ::pulse::cdm::bind::ScalarLengthData* standarddiffusiondistance);
  ::pulse::cdm::bind::ScalarLengthData* unsafe_arena_release_standarddiffusiondistance();

  // .pulse.cdm.bind.ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient = 4;
  bool has_standardoxygendiffusioncoefficient() const;
  private:
  bool _internal_has_standardoxygendiffusioncoefficient() const;
  public:
  void clear_standardoxygendiffusioncoefficient();
  const ::pulse::cdm::bind::ScalarAreaPerTimePressureData& standardoxygendiffusioncoefficient() const;
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* release_standardoxygendiffusioncoefficient();
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* mutable_standardoxygendiffusioncoefficient();
  void set_allocated_standardoxygendiffusioncoefficient(::pulse::cdm::bind::ScalarAreaPerTimePressureData* standardoxygendiffusioncoefficient);
  private:
  const ::pulse::cdm::bind::ScalarAreaPerTimePressureData& _internal_standardoxygendiffusioncoefficient() const;
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* _internal_mutable_standardoxygendiffusioncoefficient();
  public:
  void unsafe_arena_set_allocated_standardoxygendiffusioncoefficient(
      ::pulse::cdm::bind::ScalarAreaPerTimePressureData* standardoxygendiffusioncoefficient);
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* unsafe_arena_release_standardoxygendiffusioncoefficient();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin_;
  ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume_;
  ::pulse::cdm::bind::ScalarLengthData* standarddiffusiondistance_;
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* standardoxygendiffusioncoefficient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_CardiovascularConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData) */ {
 public:
  inline ConfigurationData_CardiovascularConfigurationData() : ConfigurationData_CardiovascularConfigurationData(nullptr) {}
  virtual ~ConfigurationData_CardiovascularConfigurationData();

  ConfigurationData_CardiovascularConfigurationData(const ConfigurationData_CardiovascularConfigurationData& from);
  ConfigurationData_CardiovascularConfigurationData(ConfigurationData_CardiovascularConfigurationData&& from) noexcept
    : ConfigurationData_CardiovascularConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_CardiovascularConfigurationData& operator=(const ConfigurationData_CardiovascularConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_CardiovascularConfigurationData& operator=(ConfigurationData_CardiovascularConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_CardiovascularConfigurationData& default_instance();

  static inline const ConfigurationData_CardiovascularConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_CardiovascularConfigurationData*>(
               &_ConfigurationData_CardiovascularConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigurationData_CardiovascularConfigurationData& a, ConfigurationData_CardiovascularConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_CardiovascularConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_CardiovascularConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_CardiovascularConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_CardiovascularConfigurationData>(nullptr);
  }

  ConfigurationData_CardiovascularConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_CardiovascularConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_CardiovascularConfigurationData& from);
  void MergeFrom(const ConfigurationData_CardiovascularConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_CardiovascularConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData";
  }
  protected:
  explicit ConfigurationData_CardiovascularConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftHeartElastanceMaximumFieldNumber = 1,
    kLeftHeartElastanceMinimumFieldNumber = 2,
    kMinimumBloodVolumeFractionFieldNumber = 3,
    kRightHeartElastanceMaximumFieldNumber = 4,
    kRightHeartElastanceMinimumFieldNumber = 5,
    kStandardPulmonaryCapillaryCoverageFieldNumber = 6,
  };
  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMaximum = 1;
  bool has_leftheartelastancemaximum() const;
  private:
  bool _internal_has_leftheartelastancemaximum() const;
  public:
  void clear_leftheartelastancemaximum();
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& leftheartelastancemaximum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* release_leftheartelastancemaximum();
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* mutable_leftheartelastancemaximum();
  void set_allocated_leftheartelastancemaximum(::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastancemaximum);
  private:
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& _internal_leftheartelastancemaximum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* _internal_mutable_leftheartelastancemaximum();
  public:
  void unsafe_arena_set_allocated_leftheartelastancemaximum(
      ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastancemaximum);
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* unsafe_arena_release_leftheartelastancemaximum();

  // .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMinimum = 2;
  bool has_leftheartelastanceminimum() const;
  private:
  bool _internal_has_leftheartelastanceminimum() const;
  public:
  void clear_leftheartelastanceminimum();
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& leftheartelastanceminimum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* release_leftheartelastanceminimum();
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* mutable_leftheartelastanceminimum();
  void set_allocated_leftheartelastanceminimum(::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastanceminimum);
  private:
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& _internal_leftheartelastanceminimum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* _internal_mutable_leftheartelastanceminimum();
  public:
  void unsafe_arena_set_allocated_leftheartelastanceminimum(
      ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastanceminimum);
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* unsafe_arena_release_leftheartelastanceminimum();

  // .pulse.cdm.bind.Scalar0To1Data MinimumBloodVolumeFraction = 3;
  bool has_minimumbloodvolumefraction() const;
  private:
  bool _internal_has_minimumbloodvolumefraction() const;
  public:
  void clear_minimumbloodvolumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& minimumbloodvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_minimumbloodvolumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_minimumbloodvolumefraction();
  void set_allocated_minimumbloodvolumefraction(::pulse::cdm::bind::Scalar0To1Data* minimumbloodvolumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_minimumbloodvolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_minimumbloodvolumefraction();
  public:
  void unsafe_arena_set_allocated_minimumbloodvolumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* minimumbloodvolumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_minimumbloodvolumefraction();

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMaximum = 4;
  bool has_rightheartelastancemaximum() const;
  private:
  bool _internal_has_rightheartelastancemaximum() const;
  public:
  void clear_rightheartelastancemaximum();
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& rightheartelastancemaximum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* release_rightheartelastancemaximum();
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* mutable_rightheartelastancemaximum();
  void set_allocated_rightheartelastancemaximum(::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastancemaximum);
  private:
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& _internal_rightheartelastancemaximum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* _internal_mutable_rightheartelastancemaximum();
  public:
  void unsafe_arena_set_allocated_rightheartelastancemaximum(
      ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastancemaximum);
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* unsafe_arena_release_rightheartelastancemaximum();

  // .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMinimum = 5;
  bool has_rightheartelastanceminimum() const;
  private:
  bool _internal_has_rightheartelastanceminimum() const;
  public:
  void clear_rightheartelastanceminimum();
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& rightheartelastanceminimum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* release_rightheartelastanceminimum();
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* mutable_rightheartelastanceminimum();
  void set_allocated_rightheartelastanceminimum(::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastanceminimum);
  private:
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& _internal_rightheartelastanceminimum() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* _internal_mutable_rightheartelastanceminimum();
  public:
  void unsafe_arena_set_allocated_rightheartelastanceminimum(
      ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastanceminimum);
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* unsafe_arena_release_rightheartelastanceminimum();

  // .pulse.cdm.bind.ScalarData StandardPulmonaryCapillaryCoverage = 6;
  bool has_standardpulmonarycapillarycoverage() const;
  private:
  bool _internal_has_standardpulmonarycapillarycoverage() const;
  public:
  void clear_standardpulmonarycapillarycoverage();
  const ::pulse::cdm::bind::ScalarData& standardpulmonarycapillarycoverage() const;
  ::pulse::cdm::bind::ScalarData* release_standardpulmonarycapillarycoverage();
  ::pulse::cdm::bind::ScalarData* mutable_standardpulmonarycapillarycoverage();
  void set_allocated_standardpulmonarycapillarycoverage(::pulse::cdm::bind::ScalarData* standardpulmonarycapillarycoverage);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_standardpulmonarycapillarycoverage() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_standardpulmonarycapillarycoverage();
  public:
  void unsafe_arena_set_allocated_standardpulmonarycapillarycoverage(
      ::pulse::cdm::bind::ScalarData* standardpulmonarycapillarycoverage);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_standardpulmonarycapillarycoverage();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastancemaximum_;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastanceminimum_;
  ::pulse::cdm::bind::Scalar0To1Data* minimumbloodvolumefraction_;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastancemaximum_;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastanceminimum_;
  ::pulse::cdm::bind::ScalarData* standardpulmonarycapillarycoverage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_CircuitConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData) */ {
 public:
  inline ConfigurationData_CircuitConfigurationData() : ConfigurationData_CircuitConfigurationData(nullptr) {}
  virtual ~ConfigurationData_CircuitConfigurationData();

  ConfigurationData_CircuitConfigurationData(const ConfigurationData_CircuitConfigurationData& from);
  ConfigurationData_CircuitConfigurationData(ConfigurationData_CircuitConfigurationData&& from) noexcept
    : ConfigurationData_CircuitConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_CircuitConfigurationData& operator=(const ConfigurationData_CircuitConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_CircuitConfigurationData& operator=(ConfigurationData_CircuitConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_CircuitConfigurationData& default_instance();

  static inline const ConfigurationData_CircuitConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_CircuitConfigurationData*>(
               &_ConfigurationData_CircuitConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigurationData_CircuitConfigurationData& a, ConfigurationData_CircuitConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_CircuitConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_CircuitConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_CircuitConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_CircuitConfigurationData>(nullptr);
  }

  ConfigurationData_CircuitConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_CircuitConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_CircuitConfigurationData& from);
  void MergeFrom(const ConfigurationData_CircuitConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_CircuitConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.CircuitConfigurationData";
  }
  protected:
  explicit ConfigurationData_CircuitConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardiovascularOpenResistanceFieldNumber = 1,
    kDefaultClosedElectricResistanceFieldNumber = 2,
    kDefaultOpenElectricResistanceFieldNumber = 3,
    kDefaultClosedFlowResistanceFieldNumber = 4,
    kDefaultOpenFlowResistanceFieldNumber = 5,
    kDefaultClosedHeatResistanceFieldNumber = 6,
    kDefaultOpenHeatResistanceFieldNumber = 7,
    kMachineClosedResistanceFieldNumber = 8,
    kMachineOpenResistanceFieldNumber = 9,
    kRespiratoryClosedResistanceFieldNumber = 10,
    kRespiratoryOpenResistanceFieldNumber = 11,
  };
  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData CardiovascularOpenResistance = 1;
  bool has_cardiovascularopenresistance() const;
  private:
  bool _internal_has_cardiovascularopenresistance() const;
  public:
  void clear_cardiovascularopenresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& cardiovascularopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_cardiovascularopenresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_cardiovascularopenresistance();
  void set_allocated_cardiovascularopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* cardiovascularopenresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_cardiovascularopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_cardiovascularopenresistance();
  public:
  void unsafe_arena_set_allocated_cardiovascularopenresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* cardiovascularopenresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_cardiovascularopenresistance();

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultClosedElectricResistance = 2;
  bool has_defaultclosedelectricresistance() const;
  private:
  bool _internal_has_defaultclosedelectricresistance() const;
  public:
  void clear_defaultclosedelectricresistance();
  const ::pulse::cdm::bind::ScalarElectricResistanceData& defaultclosedelectricresistance() const;
  ::pulse::cdm::bind::ScalarElectricResistanceData* release_defaultclosedelectricresistance();
  ::pulse::cdm::bind::ScalarElectricResistanceData* mutable_defaultclosedelectricresistance();
  void set_allocated_defaultclosedelectricresistance(::pulse::cdm::bind::ScalarElectricResistanceData* defaultclosedelectricresistance);
  private:
  const ::pulse::cdm::bind::ScalarElectricResistanceData& _internal_defaultclosedelectricresistance() const;
  ::pulse::cdm::bind::ScalarElectricResistanceData* _internal_mutable_defaultclosedelectricresistance();
  public:
  void unsafe_arena_set_allocated_defaultclosedelectricresistance(
      ::pulse::cdm::bind::ScalarElectricResistanceData* defaultclosedelectricresistance);
  ::pulse::cdm::bind::ScalarElectricResistanceData* unsafe_arena_release_defaultclosedelectricresistance();

  // .pulse.cdm.bind.ScalarElectricResistanceData DefaultOpenElectricResistance = 3;
  bool has_defaultopenelectricresistance() const;
  private:
  bool _internal_has_defaultopenelectricresistance() const;
  public:
  void clear_defaultopenelectricresistance();
  const ::pulse::cdm::bind::ScalarElectricResistanceData& defaultopenelectricresistance() const;
  ::pulse::cdm::bind::ScalarElectricResistanceData* release_defaultopenelectricresistance();
  ::pulse::cdm::bind::ScalarElectricResistanceData* mutable_defaultopenelectricresistance();
  void set_allocated_defaultopenelectricresistance(::pulse::cdm::bind::ScalarElectricResistanceData* defaultopenelectricresistance);
  private:
  const ::pulse::cdm::bind::ScalarElectricResistanceData& _internal_defaultopenelectricresistance() const;
  ::pulse::cdm::bind::ScalarElectricResistanceData* _internal_mutable_defaultopenelectricresistance();
  public:
  void unsafe_arena_set_allocated_defaultopenelectricresistance(
      ::pulse::cdm::bind::ScalarElectricResistanceData* defaultopenelectricresistance);
  ::pulse::cdm::bind::ScalarElectricResistanceData* unsafe_arena_release_defaultopenelectricresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultClosedFlowResistance = 4;
  bool has_defaultclosedflowresistance() const;
  private:
  bool _internal_has_defaultclosedflowresistance() const;
  public:
  void clear_defaultclosedflowresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& defaultclosedflowresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_defaultclosedflowresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_defaultclosedflowresistance();
  void set_allocated_defaultclosedflowresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultclosedflowresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_defaultclosedflowresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_defaultclosedflowresistance();
  public:
  void unsafe_arena_set_allocated_defaultclosedflowresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultclosedflowresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_defaultclosedflowresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultOpenFlowResistance = 5;
  bool has_defaultopenflowresistance() const;
  private:
  bool _internal_has_defaultopenflowresistance() const;
  public:
  void clear_defaultopenflowresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& defaultopenflowresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_defaultopenflowresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_defaultopenflowresistance();
  void set_allocated_defaultopenflowresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultopenflowresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_defaultopenflowresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_defaultopenflowresistance();
  public:
  void unsafe_arena_set_allocated_defaultopenflowresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultopenflowresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_defaultopenflowresistance();

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultClosedHeatResistance = 6;
  bool has_defaultclosedheatresistance() const;
  private:
  bool _internal_has_defaultclosedheatresistance() const;
  public:
  void clear_defaultclosedheatresistance();
  const ::pulse::cdm::bind::ScalarHeatResistanceData& defaultclosedheatresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceData* release_defaultclosedheatresistance();
  ::pulse::cdm::bind::ScalarHeatResistanceData* mutable_defaultclosedheatresistance();
  void set_allocated_defaultclosedheatresistance(::pulse::cdm::bind::ScalarHeatResistanceData* defaultclosedheatresistance);
  private:
  const ::pulse::cdm::bind::ScalarHeatResistanceData& _internal_defaultclosedheatresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceData* _internal_mutable_defaultclosedheatresistance();
  public:
  void unsafe_arena_set_allocated_defaultclosedheatresistance(
      ::pulse::cdm::bind::ScalarHeatResistanceData* defaultclosedheatresistance);
  ::pulse::cdm::bind::ScalarHeatResistanceData* unsafe_arena_release_defaultclosedheatresistance();

  // .pulse.cdm.bind.ScalarHeatResistanceData DefaultOpenHeatResistance = 7;
  bool has_defaultopenheatresistance() const;
  private:
  bool _internal_has_defaultopenheatresistance() const;
  public:
  void clear_defaultopenheatresistance();
  const ::pulse::cdm::bind::ScalarHeatResistanceData& defaultopenheatresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceData* release_defaultopenheatresistance();
  ::pulse::cdm::bind::ScalarHeatResistanceData* mutable_defaultopenheatresistance();
  void set_allocated_defaultopenheatresistance(::pulse::cdm::bind::ScalarHeatResistanceData* defaultopenheatresistance);
  private:
  const ::pulse::cdm::bind::ScalarHeatResistanceData& _internal_defaultopenheatresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceData* _internal_mutable_defaultopenheatresistance();
  public:
  void unsafe_arena_set_allocated_defaultopenheatresistance(
      ::pulse::cdm::bind::ScalarHeatResistanceData* defaultopenheatresistance);
  ::pulse::cdm::bind::ScalarHeatResistanceData* unsafe_arena_release_defaultopenheatresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineClosedResistance = 8;
  bool has_machineclosedresistance() const;
  private:
  bool _internal_has_machineclosedresistance() const;
  public:
  void clear_machineclosedresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& machineclosedresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_machineclosedresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_machineclosedresistance();
  void set_allocated_machineclosedresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineclosedresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_machineclosedresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_machineclosedresistance();
  public:
  void unsafe_arena_set_allocated_machineclosedresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineclosedresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_machineclosedresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineOpenResistance = 9;
  bool has_machineopenresistance() const;
  private:
  bool _internal_has_machineopenresistance() const;
  public:
  void clear_machineopenresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& machineopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_machineopenresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_machineopenresistance();
  void set_allocated_machineopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineopenresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_machineopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_machineopenresistance();
  public:
  void unsafe_arena_set_allocated_machineopenresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineopenresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_machineopenresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryClosedResistance = 10;
  bool has_respiratoryclosedresistance() const;
  private:
  bool _internal_has_respiratoryclosedresistance() const;
  public:
  void clear_respiratoryclosedresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& respiratoryclosedresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_respiratoryclosedresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_respiratoryclosedresistance();
  void set_allocated_respiratoryclosedresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryclosedresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_respiratoryclosedresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_respiratoryclosedresistance();
  public:
  void unsafe_arena_set_allocated_respiratoryclosedresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryclosedresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_respiratoryclosedresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryOpenResistance = 11;
  bool has_respiratoryopenresistance() const;
  private:
  bool _internal_has_respiratoryopenresistance() const;
  public:
  void clear_respiratoryopenresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& respiratoryopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_respiratoryopenresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_respiratoryopenresistance();
  void set_allocated_respiratoryopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryopenresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_respiratoryopenresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_respiratoryopenresistance();
  public:
  void unsafe_arena_set_allocated_respiratoryopenresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryopenresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_respiratoryopenresistance();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* cardiovascularopenresistance_;
  ::pulse::cdm::bind::ScalarElectricResistanceData* defaultclosedelectricresistance_;
  ::pulse::cdm::bind::ScalarElectricResistanceData* defaultopenelectricresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultclosedflowresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultopenflowresistance_;
  ::pulse::cdm::bind::ScalarHeatResistanceData* defaultclosedheatresistance_;
  ::pulse::cdm::bind::ScalarHeatResistanceData* defaultopenheatresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineclosedresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineopenresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryclosedresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryopenresistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_ConstantsConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData) */ {
 public:
  inline ConfigurationData_ConstantsConfigurationData() : ConfigurationData_ConstantsConfigurationData(nullptr) {}
  virtual ~ConfigurationData_ConstantsConfigurationData();

  ConfigurationData_ConstantsConfigurationData(const ConfigurationData_ConstantsConfigurationData& from);
  ConfigurationData_ConstantsConfigurationData(ConfigurationData_ConstantsConfigurationData&& from) noexcept
    : ConfigurationData_ConstantsConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_ConstantsConfigurationData& operator=(const ConfigurationData_ConstantsConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_ConstantsConfigurationData& operator=(ConfigurationData_ConstantsConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_ConstantsConfigurationData& default_instance();

  static inline const ConfigurationData_ConstantsConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_ConstantsConfigurationData*>(
               &_ConfigurationData_ConstantsConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConfigurationData_ConstantsConfigurationData& a, ConfigurationData_ConstantsConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_ConstantsConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_ConstantsConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_ConstantsConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_ConstantsConfigurationData>(nullptr);
  }

  ConfigurationData_ConstantsConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_ConstantsConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_ConstantsConfigurationData& from);
  void MergeFrom(const ConfigurationData_ConstantsConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_ConstantsConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData";
  }
  protected:
  explicit ConfigurationData_ConstantsConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOxygenMetabolicConstantFieldNumber = 1,
    kStefanBoltzmannFieldNumber = 2,
    kUniversalGasConstantFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarData OxygenMetabolicConstant = 1;
  bool has_oxygenmetabolicconstant() const;
  private:
  bool _internal_has_oxygenmetabolicconstant() const;
  public:
  void clear_oxygenmetabolicconstant();
  const ::pulse::cdm::bind::ScalarData& oxygenmetabolicconstant() const;
  ::pulse::cdm::bind::ScalarData* release_oxygenmetabolicconstant();
  ::pulse::cdm::bind::ScalarData* mutable_oxygenmetabolicconstant();
  void set_allocated_oxygenmetabolicconstant(::pulse::cdm::bind::ScalarData* oxygenmetabolicconstant);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_oxygenmetabolicconstant() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_oxygenmetabolicconstant();
  public:
  void unsafe_arena_set_allocated_oxygenmetabolicconstant(
      ::pulse::cdm::bind::ScalarData* oxygenmetabolicconstant);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_oxygenmetabolicconstant();

  // .pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann = 2;
  bool has_stefanboltzmann() const;
  private:
  bool _internal_has_stefanboltzmann() const;
  public:
  void clear_stefanboltzmann();
  const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData& stefanboltzmann() const;
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* release_stefanboltzmann();
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* mutable_stefanboltzmann();
  void set_allocated_stefanboltzmann(::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* stefanboltzmann);
  private:
  const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData& _internal_stefanboltzmann() const;
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* _internal_mutable_stefanboltzmann();
  public:
  void unsafe_arena_set_allocated_stefanboltzmann(
      ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* stefanboltzmann);
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* unsafe_arena_release_stefanboltzmann();

  // .pulse.cdm.bind.ScalarHeatCapacitancePerAmountData UniversalGasConstant = 3;
  bool has_universalgasconstant() const;
  private:
  bool _internal_has_universalgasconstant() const;
  public:
  void clear_universalgasconstant();
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData& universalgasconstant() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* release_universalgasconstant();
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* mutable_universalgasconstant();
  void set_allocated_universalgasconstant(::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* universalgasconstant);
  private:
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData& _internal_universalgasconstant() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* _internal_mutable_universalgasconstant();
  public:
  void unsafe_arena_set_allocated_universalgasconstant(
      ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* universalgasconstant);
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* unsafe_arena_release_universalgasconstant();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarData* oxygenmetabolicconstant_;
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* stefanboltzmann_;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* universalgasconstant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_DrugsConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData) */ {
 public:
  inline ConfigurationData_DrugsConfigurationData() : ConfigurationData_DrugsConfigurationData(nullptr) {}
  virtual ~ConfigurationData_DrugsConfigurationData();

  ConfigurationData_DrugsConfigurationData(const ConfigurationData_DrugsConfigurationData& from);
  ConfigurationData_DrugsConfigurationData(ConfigurationData_DrugsConfigurationData&& from) noexcept
    : ConfigurationData_DrugsConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_DrugsConfigurationData& operator=(const ConfigurationData_DrugsConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_DrugsConfigurationData& operator=(ConfigurationData_DrugsConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_DrugsConfigurationData& default_instance();

  static inline const ConfigurationData_DrugsConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_DrugsConfigurationData*>(
               &_ConfigurationData_DrugsConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConfigurationData_DrugsConfigurationData& a, ConfigurationData_DrugsConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_DrugsConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_DrugsConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_DrugsConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_DrugsConfigurationData>(nullptr);
  }

  ConfigurationData_DrugsConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_DrugsConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_DrugsConfigurationData& from);
  void MergeFrom(const ConfigurationData_DrugsConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_DrugsConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.DrugsConfigurationData";
  }
  protected:
  explicit ConfigurationData_DrugsConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPDModelFieldNumber = 1,
  };
  // .pulse.cdm.bind.eSwitch PDModel = 1;
  void clear_pdmodel();
  ::pulse::cdm::bind::eSwitch pdmodel() const;
  void set_pdmodel(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_pdmodel() const;
  void _internal_set_pdmodel(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int pdmodel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_ECGConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.ECGConfigurationData) */ {
 public:
  inline ConfigurationData_ECGConfigurationData() : ConfigurationData_ECGConfigurationData(nullptr) {}
  virtual ~ConfigurationData_ECGConfigurationData();

  ConfigurationData_ECGConfigurationData(const ConfigurationData_ECGConfigurationData& from);
  ConfigurationData_ECGConfigurationData(ConfigurationData_ECGConfigurationData&& from) noexcept
    : ConfigurationData_ECGConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_ECGConfigurationData& operator=(const ConfigurationData_ECGConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_ECGConfigurationData& operator=(ConfigurationData_ECGConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_ECGConfigurationData& default_instance();

  enum ElectroCardioGramInterpolatorCase {
    kInterpolatorFileName = 1,
    kInterpolator = 2,
    ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET = 0,
  };

  static inline const ConfigurationData_ECGConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_ECGConfigurationData*>(
               &_ConfigurationData_ECGConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfigurationData_ECGConfigurationData& a, ConfigurationData_ECGConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_ECGConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_ECGConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_ECGConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_ECGConfigurationData>(nullptr);
  }

  ConfigurationData_ECGConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_ECGConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_ECGConfigurationData& from);
  void MergeFrom(const ConfigurationData_ECGConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_ECGConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.ECGConfigurationData";
  }
  protected:
  explicit ConfigurationData_ECGConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterpolatorFileNameFieldNumber = 1,
    kInterpolatorFieldNumber = 2,
  };
  // string InterpolatorFileName = 1;
  private:
  bool _internal_has_interpolatorfilename() const;
  public:
  void clear_interpolatorfilename();
  const std::string& interpolatorfilename() const;
  void set_interpolatorfilename(const std::string& value);
  void set_interpolatorfilename(std::string&& value);
  void set_interpolatorfilename(const char* value);
  void set_interpolatorfilename(const char* value, size_t size);
  std::string* mutable_interpolatorfilename();
  std::string* release_interpolatorfilename();
  void set_allocated_interpolatorfilename(std::string* interpolatorfilename);
  private:
  const std::string& _internal_interpolatorfilename() const;
  void _internal_set_interpolatorfilename(const std::string& value);
  std::string* _internal_mutable_interpolatorfilename();
  public:

  // .pulse.cdm.bind.ElectroCardioGramWaveformListData Interpolator = 2;
  bool has_interpolator() const;
  private:
  bool _internal_has_interpolator() const;
  public:
  void clear_interpolator();
  const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& interpolator() const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* release_interpolator();
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* mutable_interpolator();
  void set_allocated_interpolator(::pulse::cdm::bind::ElectroCardioGramWaveformListData* interpolator);
  private:
  const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& _internal_interpolator() const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* _internal_mutable_interpolator();
  public:
  void unsafe_arena_set_allocated_interpolator(
      ::pulse::cdm::bind::ElectroCardioGramWaveformListData* interpolator);
  ::pulse::cdm::bind::ElectroCardioGramWaveformListData* unsafe_arena_release_interpolator();

  void clear_ElectroCardioGramInterpolator();
  ElectroCardioGramInterpolatorCase ElectroCardioGramInterpolator_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.ECGConfigurationData)
 private:
  class _Internal;
  void set_has_interpolatorfilename();
  void set_has_interpolator();

  inline bool has_ElectroCardioGramInterpolator() const;
  inline void clear_has_ElectroCardioGramInterpolator();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ElectroCardioGramInterpolatorUnion {
    ElectroCardioGramInterpolatorUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interpolatorfilename_;
    ::pulse::cdm::bind::ElectroCardioGramWaveformListData* interpolator_;
  } ElectroCardioGramInterpolator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_EnergyConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData) */ {
 public:
  inline ConfigurationData_EnergyConfigurationData() : ConfigurationData_EnergyConfigurationData(nullptr) {}
  virtual ~ConfigurationData_EnergyConfigurationData();

  ConfigurationData_EnergyConfigurationData(const ConfigurationData_EnergyConfigurationData& from);
  ConfigurationData_EnergyConfigurationData(ConfigurationData_EnergyConfigurationData&& from) noexcept
    : ConfigurationData_EnergyConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_EnergyConfigurationData& operator=(const ConfigurationData_EnergyConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_EnergyConfigurationData& operator=(ConfigurationData_EnergyConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_EnergyConfigurationData& default_instance();

  static inline const ConfigurationData_EnergyConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_EnergyConfigurationData*>(
               &_ConfigurationData_EnergyConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfigurationData_EnergyConfigurationData& a, ConfigurationData_EnergyConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_EnergyConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_EnergyConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_EnergyConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_EnergyConfigurationData>(nullptr);
  }

  ConfigurationData_EnergyConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_EnergyConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_EnergyConfigurationData& from);
  void MergeFrom(const ConfigurationData_EnergyConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_EnergyConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.EnergyConfigurationData";
  }
  protected:
  explicit ConfigurationData_EnergyConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodySpecificHeatFieldNumber = 1,
    kCarbonDioxideProductionFromOxygenConsumptionConstantFieldNumber = 2,
    kCoreTemperatureLowFieldNumber = 3,
    kCoreTemperatureHighFieldNumber = 4,
    kDeltaCoreTemperatureLowFieldNumber = 5,
    kEnergyPerATPFieldNumber = 6,
    kSweatHeatTransferFieldNumber = 7,
    kVaporizationEnergyFieldNumber = 8,
    kVaporSpecificHeatFieldNumber = 9,
  };
  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BodySpecificHeat = 1;
  bool has_bodyspecificheat() const;
  private:
  bool _internal_has_bodyspecificheat() const;
  public:
  void clear_bodyspecificheat();
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& bodyspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* release_bodyspecificheat();
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* mutable_bodyspecificheat();
  void set_allocated_bodyspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bodyspecificheat);
  private:
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& _internal_bodyspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* _internal_mutable_bodyspecificheat();
  public:
  void unsafe_arena_set_allocated_bodyspecificheat(
      ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bodyspecificheat);
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* unsafe_arena_release_bodyspecificheat();

  // .pulse.cdm.bind.ScalarData CarbonDioxideProductionFromOxygenConsumptionConstant = 2;
  bool has_carbondioxideproductionfromoxygenconsumptionconstant() const;
  private:
  bool _internal_has_carbondioxideproductionfromoxygenconsumptionconstant() const;
  public:
  void clear_carbondioxideproductionfromoxygenconsumptionconstant();
  const ::pulse::cdm::bind::ScalarData& carbondioxideproductionfromoxygenconsumptionconstant() const;
  ::pulse::cdm::bind::ScalarData* release_carbondioxideproductionfromoxygenconsumptionconstant();
  ::pulse::cdm::bind::ScalarData* mutable_carbondioxideproductionfromoxygenconsumptionconstant();
  void set_allocated_carbondioxideproductionfromoxygenconsumptionconstant(::pulse::cdm::bind::ScalarData* carbondioxideproductionfromoxygenconsumptionconstant);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_carbondioxideproductionfromoxygenconsumptionconstant() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_carbondioxideproductionfromoxygenconsumptionconstant();
  public:
  void unsafe_arena_set_allocated_carbondioxideproductionfromoxygenconsumptionconstant(
      ::pulse::cdm::bind::ScalarData* carbondioxideproductionfromoxygenconsumptionconstant);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_carbondioxideproductionfromoxygenconsumptionconstant();

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureLow = 3;
  bool has_coretemperaturelow() const;
  private:
  bool _internal_has_coretemperaturelow() const;
  public:
  void clear_coretemperaturelow();
  const ::pulse::cdm::bind::ScalarTemperatureData& coretemperaturelow() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_coretemperaturelow();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_coretemperaturelow();
  void set_allocated_coretemperaturelow(::pulse::cdm::bind::ScalarTemperatureData* coretemperaturelow);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_coretemperaturelow() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_coretemperaturelow();
  public:
  void unsafe_arena_set_allocated_coretemperaturelow(
      ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturelow);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_coretemperaturelow();

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureHigh = 4;
  bool has_coretemperaturehigh() const;
  private:
  bool _internal_has_coretemperaturehigh() const;
  public:
  void clear_coretemperaturehigh();
  const ::pulse::cdm::bind::ScalarTemperatureData& coretemperaturehigh() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_coretemperaturehigh();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_coretemperaturehigh();
  void set_allocated_coretemperaturehigh(::pulse::cdm::bind::ScalarTemperatureData* coretemperaturehigh);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_coretemperaturehigh() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_coretemperaturehigh();
  public:
  void unsafe_arena_set_allocated_coretemperaturehigh(
      ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturehigh);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_coretemperaturehigh();

  // .pulse.cdm.bind.ScalarTemperatureData DeltaCoreTemperatureLow = 5;
  bool has_deltacoretemperaturelow() const;
  private:
  bool _internal_has_deltacoretemperaturelow() const;
  public:
  void clear_deltacoretemperaturelow();
  const ::pulse::cdm::bind::ScalarTemperatureData& deltacoretemperaturelow() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_deltacoretemperaturelow();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_deltacoretemperaturelow();
  void set_allocated_deltacoretemperaturelow(::pulse::cdm::bind::ScalarTemperatureData* deltacoretemperaturelow);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_deltacoretemperaturelow() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_deltacoretemperaturelow();
  public:
  void unsafe_arena_set_allocated_deltacoretemperaturelow(
      ::pulse::cdm::bind::ScalarTemperatureData* deltacoretemperaturelow);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_deltacoretemperaturelow();

  // .pulse.cdm.bind.ScalarEnergyPerAmountData EnergyPerATP = 6;
  bool has_energyperatp() const;
  private:
  bool _internal_has_energyperatp() const;
  public:
  void clear_energyperatp();
  const ::pulse::cdm::bind::ScalarEnergyPerAmountData& energyperatp() const;
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* release_energyperatp();
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* mutable_energyperatp();
  void set_allocated_energyperatp(::pulse::cdm::bind::ScalarEnergyPerAmountData* energyperatp);
  private:
  const ::pulse::cdm::bind::ScalarEnergyPerAmountData& _internal_energyperatp() const;
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* _internal_mutable_energyperatp();
  public:
  void unsafe_arena_set_allocated_energyperatp(
      ::pulse::cdm::bind::ScalarEnergyPerAmountData* energyperatp);
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* unsafe_arena_release_energyperatp();

  // .pulse.cdm.bind.ScalarHeatConductanceData SweatHeatTransfer = 7;
  bool has_sweatheattransfer() const;
  private:
  bool _internal_has_sweatheattransfer() const;
  public:
  void clear_sweatheattransfer();
  const ::pulse::cdm::bind::ScalarHeatConductanceData& sweatheattransfer() const;
  ::pulse::cdm::bind::ScalarHeatConductanceData* release_sweatheattransfer();
  ::pulse::cdm::bind::ScalarHeatConductanceData* mutable_sweatheattransfer();
  void set_allocated_sweatheattransfer(::pulse::cdm::bind::ScalarHeatConductanceData* sweatheattransfer);
  private:
  const ::pulse::cdm::bind::ScalarHeatConductanceData& _internal_sweatheattransfer() const;
  ::pulse::cdm::bind::ScalarHeatConductanceData* _internal_mutable_sweatheattransfer();
  public:
  void unsafe_arena_set_allocated_sweatheattransfer(
      ::pulse::cdm::bind::ScalarHeatConductanceData* sweatheattransfer);
  ::pulse::cdm::bind::ScalarHeatConductanceData* unsafe_arena_release_sweatheattransfer();

  // .pulse.cdm.bind.ScalarEnergyPerMassData VaporizationEnergy = 8;
  bool has_vaporizationenergy() const;
  private:
  bool _internal_has_vaporizationenergy() const;
  public:
  void clear_vaporizationenergy();
  const ::pulse::cdm::bind::ScalarEnergyPerMassData& vaporizationenergy() const;
  ::pulse::cdm::bind::ScalarEnergyPerMassData* release_vaporizationenergy();
  ::pulse::cdm::bind::ScalarEnergyPerMassData* mutable_vaporizationenergy();
  void set_allocated_vaporizationenergy(::pulse::cdm::bind::ScalarEnergyPerMassData* vaporizationenergy);
  private:
  const ::pulse::cdm::bind::ScalarEnergyPerMassData& _internal_vaporizationenergy() const;
  ::pulse::cdm::bind::ScalarEnergyPerMassData* _internal_mutable_vaporizationenergy();
  public:
  void unsafe_arena_set_allocated_vaporizationenergy(
      ::pulse::cdm::bind::ScalarEnergyPerMassData* vaporizationenergy);
  ::pulse::cdm::bind::ScalarEnergyPerMassData* unsafe_arena_release_vaporizationenergy();

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData VaporSpecificHeat = 9;
  bool has_vaporspecificheat() const;
  private:
  bool _internal_has_vaporspecificheat() const;
  public:
  void clear_vaporspecificheat();
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& vaporspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* release_vaporspecificheat();
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* mutable_vaporspecificheat();
  void set_allocated_vaporspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* vaporspecificheat);
  private:
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& _internal_vaporspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* _internal_mutable_vaporspecificheat();
  public:
  void unsafe_arena_set_allocated_vaporspecificheat(
      ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* vaporspecificheat);
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* unsafe_arena_release_vaporspecificheat();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bodyspecificheat_;
  ::pulse::cdm::bind::ScalarData* carbondioxideproductionfromoxygenconsumptionconstant_;
  ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturelow_;
  ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturehigh_;
  ::pulse::cdm::bind::ScalarTemperatureData* deltacoretemperaturelow_;
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* energyperatp_;
  ::pulse::cdm::bind::ScalarHeatConductanceData* sweatheattransfer_;
  ::pulse::cdm::bind::ScalarEnergyPerMassData* vaporizationenergy_;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* vaporspecificheat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_EnvironmentConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData) */ {
 public:
  inline ConfigurationData_EnvironmentConfigurationData() : ConfigurationData_EnvironmentConfigurationData(nullptr) {}
  virtual ~ConfigurationData_EnvironmentConfigurationData();

  ConfigurationData_EnvironmentConfigurationData(const ConfigurationData_EnvironmentConfigurationData& from);
  ConfigurationData_EnvironmentConfigurationData(ConfigurationData_EnvironmentConfigurationData&& from) noexcept
    : ConfigurationData_EnvironmentConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_EnvironmentConfigurationData& operator=(const ConfigurationData_EnvironmentConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_EnvironmentConfigurationData& operator=(ConfigurationData_EnvironmentConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_EnvironmentConfigurationData& default_instance();

  enum OptionCase {
    kInitialConditions = 1,
    kInitialConditionsFile = 2,
    OPTION_NOT_SET = 0,
  };

  static inline const ConfigurationData_EnvironmentConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_EnvironmentConfigurationData*>(
               &_ConfigurationData_EnvironmentConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConfigurationData_EnvironmentConfigurationData& a, ConfigurationData_EnvironmentConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_EnvironmentConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_EnvironmentConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_EnvironmentConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_EnvironmentConfigurationData>(nullptr);
  }

  ConfigurationData_EnvironmentConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_EnvironmentConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_EnvironmentConfigurationData& from);
  void MergeFrom(const ConfigurationData_EnvironmentConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_EnvironmentConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData";
  }
  protected:
  explicit ConfigurationData_EnvironmentConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirDensityFieldNumber = 3,
    kAirSpecificHeatFieldNumber = 4,
    kMolarMassOfDryAirFieldNumber = 5,
    kMolarMassOfWaterVaporFieldNumber = 6,
    kWaterDensityFieldNumber = 7,
    kInitialConditionsFieldNumber = 1,
    kInitialConditionsFileFieldNumber = 2,
  };
  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 3;
  bool has_airdensity() const;
  private:
  bool _internal_has_airdensity() const;
  public:
  void clear_airdensity();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& airdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_airdensity();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_airdensity();
  void set_allocated_airdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_airdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_airdensity();
  public:
  void unsafe_arena_set_allocated_airdensity(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_airdensity();

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData AirSpecificHeat = 4;
  bool has_airspecificheat() const;
  private:
  bool _internal_has_airspecificheat() const;
  public:
  void clear_airspecificheat();
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& airspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* release_airspecificheat();
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* mutable_airspecificheat();
  void set_allocated_airspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* airspecificheat);
  private:
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& _internal_airspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* _internal_mutable_airspecificheat();
  public:
  void unsafe_arena_set_allocated_airspecificheat(
      ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* airspecificheat);
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* unsafe_arena_release_airspecificheat();

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfDryAir = 5;
  bool has_molarmassofdryair() const;
  private:
  bool _internal_has_molarmassofdryair() const;
  public:
  void clear_molarmassofdryair();
  const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmassofdryair() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* release_molarmassofdryair();
  ::pulse::cdm::bind::ScalarMassPerAmountData* mutable_molarmassofdryair();
  void set_allocated_molarmassofdryair(::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofdryair);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAmountData& _internal_molarmassofdryair() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* _internal_mutable_molarmassofdryair();
  public:
  void unsafe_arena_set_allocated_molarmassofdryair(
      ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofdryair);
  ::pulse::cdm::bind::ScalarMassPerAmountData* unsafe_arena_release_molarmassofdryair();

  // .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfWaterVapor = 6;
  bool has_molarmassofwatervapor() const;
  private:
  bool _internal_has_molarmassofwatervapor() const;
  public:
  void clear_molarmassofwatervapor();
  const ::pulse::cdm::bind::ScalarMassPerAmountData& molarmassofwatervapor() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* release_molarmassofwatervapor();
  ::pulse::cdm::bind::ScalarMassPerAmountData* mutable_molarmassofwatervapor();
  void set_allocated_molarmassofwatervapor(::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofwatervapor);
  private:
  const ::pulse::cdm::bind::ScalarMassPerAmountData& _internal_molarmassofwatervapor() const;
  ::pulse::cdm::bind::ScalarMassPerAmountData* _internal_mutable_molarmassofwatervapor();
  public:
  void unsafe_arena_set_allocated_molarmassofwatervapor(
      ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofwatervapor);
  ::pulse::cdm::bind::ScalarMassPerAmountData* unsafe_arena_release_molarmassofwatervapor();

  // .pulse.cdm.bind.ScalarMassPerVolumeData WaterDensity = 7;
  bool has_waterdensity() const;
  private:
  bool _internal_has_waterdensity() const;
  public:
  void clear_waterdensity();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& waterdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_waterdensity();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_waterdensity();
  void set_allocated_waterdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* waterdensity);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_waterdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_waterdensity();
  public:
  void unsafe_arena_set_allocated_waterdensity(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* waterdensity);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_waterdensity();

  // .pulse.cdm.bind.EnvironmentalConditionsData InitialConditions = 1;
  bool has_initialconditions() const;
  private:
  bool _internal_has_initialconditions() const;
  public:
  void clear_initialconditions();
  const ::pulse::cdm::bind::EnvironmentalConditionsData& initialconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* release_initialconditions();
  ::pulse::cdm::bind::EnvironmentalConditionsData* mutable_initialconditions();
  void set_allocated_initialconditions(::pulse::cdm::bind::EnvironmentalConditionsData* initialconditions);
  private:
  const ::pulse::cdm::bind::EnvironmentalConditionsData& _internal_initialconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* _internal_mutable_initialconditions();
  public:
  void unsafe_arena_set_allocated_initialconditions(
      ::pulse::cdm::bind::EnvironmentalConditionsData* initialconditions);
  ::pulse::cdm::bind::EnvironmentalConditionsData* unsafe_arena_release_initialconditions();

  // string InitialConditionsFile = 2;
  private:
  bool _internal_has_initialconditionsfile() const;
  public:
  void clear_initialconditionsfile();
  const std::string& initialconditionsfile() const;
  void set_initialconditionsfile(const std::string& value);
  void set_initialconditionsfile(std::string&& value);
  void set_initialconditionsfile(const char* value);
  void set_initialconditionsfile(const char* value, size_t size);
  std::string* mutable_initialconditionsfile();
  std::string* release_initialconditionsfile();
  void set_allocated_initialconditionsfile(std::string* initialconditionsfile);
  private:
  const std::string& _internal_initialconditionsfile() const;
  void _internal_set_initialconditionsfile(const std::string& value);
  std::string* _internal_mutable_initialconditionsfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData)
 private:
  class _Internal;
  void set_has_initialconditions();
  void set_has_initialconditionsfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity_;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* airspecificheat_;
  ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofdryair_;
  ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofwatervapor_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* waterdensity_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::EnvironmentalConditionsData* initialconditions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialconditionsfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_GastrointestinalConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData) */ {
 public:
  inline ConfigurationData_GastrointestinalConfigurationData() : ConfigurationData_GastrointestinalConfigurationData(nullptr) {}
  virtual ~ConfigurationData_GastrointestinalConfigurationData();

  ConfigurationData_GastrointestinalConfigurationData(const ConfigurationData_GastrointestinalConfigurationData& from);
  ConfigurationData_GastrointestinalConfigurationData(ConfigurationData_GastrointestinalConfigurationData&& from) noexcept
    : ConfigurationData_GastrointestinalConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_GastrointestinalConfigurationData& operator=(const ConfigurationData_GastrointestinalConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_GastrointestinalConfigurationData& operator=(ConfigurationData_GastrointestinalConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_GastrointestinalConfigurationData& default_instance();

  enum OptionCase {
    kInitialStomachContents = 1,
    kInitialStomachContentsFile = 2,
    OPTION_NOT_SET = 0,
  };

  static inline const ConfigurationData_GastrointestinalConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_GastrointestinalConfigurationData*>(
               &_ConfigurationData_GastrointestinalConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigurationData_GastrointestinalConfigurationData& a, ConfigurationData_GastrointestinalConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_GastrointestinalConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_GastrointestinalConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_GastrointestinalConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_GastrointestinalConfigurationData>(nullptr);
  }

  ConfigurationData_GastrointestinalConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_GastrointestinalConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_GastrointestinalConfigurationData& from);
  void MergeFrom(const ConfigurationData_GastrointestinalConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_GastrointestinalConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData";
  }
  protected:
  explicit ConfigurationData_GastrointestinalConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalciumAbsorptionFractionFieldNumber = 3,
    kCalciumDigestionRateFieldNumber = 4,
    kCarbohydrateAbsorptionFractionFieldNumber = 5,
    kDefaultCarbohydrateDigestionRateFieldNumber = 6,
    kDefaultFatDigestionRateFieldNumber = 7,
    kDefaultProteinDigestionRateFieldNumber = 8,
    kFatAbsorptionFractionFieldNumber = 9,
    kProteinToUreaFractionFieldNumber = 10,
    kWaterDigestionRateFieldNumber = 11,
    kInitialStomachContentsFieldNumber = 1,
    kInitialStomachContentsFileFieldNumber = 2,
  };
  // .pulse.cdm.bind.Scalar0To1Data CalciumAbsorptionFraction = 3;
  bool has_calciumabsorptionfraction() const;
  private:
  bool _internal_has_calciumabsorptionfraction() const;
  public:
  void clear_calciumabsorptionfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& calciumabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_calciumabsorptionfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_calciumabsorptionfraction();
  void set_allocated_calciumabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* calciumabsorptionfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_calciumabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_calciumabsorptionfraction();
  public:
  void unsafe_arena_set_allocated_calciumabsorptionfraction(
      ::pulse::cdm::bind::Scalar0To1Data* calciumabsorptionfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_calciumabsorptionfraction();

  // .pulse.cdm.bind.ScalarMassPerTimeData CalciumDigestionRate = 4;
  bool has_calciumdigestionrate() const;
  private:
  bool _internal_has_calciumdigestionrate() const;
  public:
  void clear_calciumdigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& calciumdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_calciumdigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_calciumdigestionrate();
  void set_allocated_calciumdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* calciumdigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_calciumdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_calciumdigestionrate();
  public:
  void unsafe_arena_set_allocated_calciumdigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* calciumdigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_calciumdigestionrate();

  // .pulse.cdm.bind.Scalar0To1Data CarbohydrateAbsorptionFraction = 5;
  bool has_carbohydrateabsorptionfraction() const;
  private:
  bool _internal_has_carbohydrateabsorptionfraction() const;
  public:
  void clear_carbohydrateabsorptionfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& carbohydrateabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_carbohydrateabsorptionfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_carbohydrateabsorptionfraction();
  void set_allocated_carbohydrateabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* carbohydrateabsorptionfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_carbohydrateabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_carbohydrateabsorptionfraction();
  public:
  void unsafe_arena_set_allocated_carbohydrateabsorptionfraction(
      ::pulse::cdm::bind::Scalar0To1Data* carbohydrateabsorptionfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_carbohydrateabsorptionfraction();

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultCarbohydrateDigestionRate = 6;
  bool has_defaultcarbohydratedigestionrate() const;
  private:
  bool _internal_has_defaultcarbohydratedigestionrate() const;
  public:
  void clear_defaultcarbohydratedigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultcarbohydratedigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_defaultcarbohydratedigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_defaultcarbohydratedigestionrate();
  void set_allocated_defaultcarbohydratedigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultcarbohydratedigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_defaultcarbohydratedigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_defaultcarbohydratedigestionrate();
  public:
  void unsafe_arena_set_allocated_defaultcarbohydratedigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* defaultcarbohydratedigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_defaultcarbohydratedigestionrate();

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultFatDigestionRate = 7;
  bool has_defaultfatdigestionrate() const;
  private:
  bool _internal_has_defaultfatdigestionrate() const;
  public:
  void clear_defaultfatdigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultfatdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_defaultfatdigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_defaultfatdigestionrate();
  void set_allocated_defaultfatdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultfatdigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_defaultfatdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_defaultfatdigestionrate();
  public:
  void unsafe_arena_set_allocated_defaultfatdigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* defaultfatdigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_defaultfatdigestionrate();

  // .pulse.cdm.bind.ScalarMassPerTimeData DefaultProteinDigestionRate = 8;
  bool has_defaultproteindigestionrate() const;
  private:
  bool _internal_has_defaultproteindigestionrate() const;
  public:
  void clear_defaultproteindigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& defaultproteindigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_defaultproteindigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_defaultproteindigestionrate();
  void set_allocated_defaultproteindigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultproteindigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_defaultproteindigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_defaultproteindigestionrate();
  public:
  void unsafe_arena_set_allocated_defaultproteindigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* defaultproteindigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_defaultproteindigestionrate();

  // .pulse.cdm.bind.Scalar0To1Data FatAbsorptionFraction = 9;
  bool has_fatabsorptionfraction() const;
  private:
  bool _internal_has_fatabsorptionfraction() const;
  public:
  void clear_fatabsorptionfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& fatabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fatabsorptionfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fatabsorptionfraction();
  void set_allocated_fatabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* fatabsorptionfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fatabsorptionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fatabsorptionfraction();
  public:
  void unsafe_arena_set_allocated_fatabsorptionfraction(
      ::pulse::cdm::bind::Scalar0To1Data* fatabsorptionfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fatabsorptionfraction();

  // .pulse.cdm.bind.Scalar0To1Data ProteinToUreaFraction = 10;
  bool has_proteintoureafraction() const;
  private:
  bool _internal_has_proteintoureafraction() const;
  public:
  void clear_proteintoureafraction();
  const ::pulse::cdm::bind::Scalar0To1Data& proteintoureafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_proteintoureafraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_proteintoureafraction();
  void set_allocated_proteintoureafraction(::pulse::cdm::bind::Scalar0To1Data* proteintoureafraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_proteintoureafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_proteintoureafraction();
  public:
  void unsafe_arena_set_allocated_proteintoureafraction(
      ::pulse::cdm::bind::Scalar0To1Data* proteintoureafraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_proteintoureafraction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterDigestionRate = 11;
  bool has_waterdigestionrate() const;
  private:
  bool _internal_has_waterdigestionrate() const;
  public:
  void clear_waterdigestionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& waterdigestionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_waterdigestionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_waterdigestionrate();
  void set_allocated_waterdigestionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* waterdigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_waterdigestionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_waterdigestionrate();
  public:
  void unsafe_arena_set_allocated_waterdigestionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* waterdigestionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_waterdigestionrate();

  // .pulse.cdm.bind.NutritionData InitialStomachContents = 1;
  bool has_initialstomachcontents() const;
  private:
  bool _internal_has_initialstomachcontents() const;
  public:
  void clear_initialstomachcontents();
  const ::pulse::cdm::bind::NutritionData& initialstomachcontents() const;
  ::pulse::cdm::bind::NutritionData* release_initialstomachcontents();
  ::pulse::cdm::bind::NutritionData* mutable_initialstomachcontents();
  void set_allocated_initialstomachcontents(::pulse::cdm::bind::NutritionData* initialstomachcontents);
  private:
  const ::pulse::cdm::bind::NutritionData& _internal_initialstomachcontents() const;
  ::pulse::cdm::bind::NutritionData* _internal_mutable_initialstomachcontents();
  public:
  void unsafe_arena_set_allocated_initialstomachcontents(
      ::pulse::cdm::bind::NutritionData* initialstomachcontents);
  ::pulse::cdm::bind::NutritionData* unsafe_arena_release_initialstomachcontents();

  // string InitialStomachContentsFile = 2;
  private:
  bool _internal_has_initialstomachcontentsfile() const;
  public:
  void clear_initialstomachcontentsfile();
  const std::string& initialstomachcontentsfile() const;
  void set_initialstomachcontentsfile(const std::string& value);
  void set_initialstomachcontentsfile(std::string&& value);
  void set_initialstomachcontentsfile(const char* value);
  void set_initialstomachcontentsfile(const char* value, size_t size);
  std::string* mutable_initialstomachcontentsfile();
  std::string* release_initialstomachcontentsfile();
  void set_allocated_initialstomachcontentsfile(std::string* initialstomachcontentsfile);
  private:
  const std::string& _internal_initialstomachcontentsfile() const;
  void _internal_set_initialstomachcontentsfile(const std::string& value);
  std::string* _internal_mutable_initialstomachcontentsfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData)
 private:
  class _Internal;
  void set_has_initialstomachcontents();
  void set_has_initialstomachcontentsfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* calciumabsorptionfraction_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* calciumdigestionrate_;
  ::pulse::cdm::bind::Scalar0To1Data* carbohydrateabsorptionfraction_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* defaultcarbohydratedigestionrate_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* defaultfatdigestionrate_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* defaultproteindigestionrate_;
  ::pulse::cdm::bind::Scalar0To1Data* fatabsorptionfraction_;
  ::pulse::cdm::bind::Scalar0To1Data* proteintoureafraction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* waterdigestionrate_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::NutritionData* initialstomachcontents_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialstomachcontentsfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_NervousConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.NervousConfigurationData) */ {
 public:
  inline ConfigurationData_NervousConfigurationData() : ConfigurationData_NervousConfigurationData(nullptr) {}
  virtual ~ConfigurationData_NervousConfigurationData();

  ConfigurationData_NervousConfigurationData(const ConfigurationData_NervousConfigurationData& from);
  ConfigurationData_NervousConfigurationData(ConfigurationData_NervousConfigurationData&& from) noexcept
    : ConfigurationData_NervousConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_NervousConfigurationData& operator=(const ConfigurationData_NervousConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_NervousConfigurationData& operator=(ConfigurationData_NervousConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_NervousConfigurationData& default_instance();

  static inline const ConfigurationData_NervousConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_NervousConfigurationData*>(
               &_ConfigurationData_NervousConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigurationData_NervousConfigurationData& a, ConfigurationData_NervousConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_NervousConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_NervousConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_NervousConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_NervousConfigurationData>(nullptr);
  }

  ConfigurationData_NervousConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_NervousConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_NervousConfigurationData& from);
  void MergeFrom(const ConfigurationData_NervousConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_NervousConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.NervousConfigurationData";
  }
  protected:
  explicit ConfigurationData_NervousConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartElastanceDistributedTimeDelayFieldNumber = 4,
    kHeartRateDistributedTimeDelayFieldNumber = 5,
    kNormalizedHeartRateInterceptFieldNumber = 6,
    kNormalizedHeartRateSympatheticSlopeFieldNumber = 7,
    kNormalizedHeartRateParasympatheticSlopeFieldNumber = 8,
    kNormalizedHeartElastanceInterceptFieldNumber = 9,
    kNormalizedHeartElastanceSympatheticSlopeFieldNumber = 10,
    kNormalizedResistanceInterceptFieldNumber = 11,
    kNormalizedResistanceSympatheticSlopeFieldNumber = 12,
    kNormalizedComplianceInterceptFieldNumber = 13,
    kNormalizedComplianceParasympatheticSlopeFieldNumber = 14,
    kPupilDiameterBaselineFieldNumber = 15,
    kResponseSlopeFieldNumber = 16,
    kSystemicResistanceDistributedTimeDelayFieldNumber = 17,
    kVenousComplianceDistributedTimeDelayFieldNumber = 18,
    kEnableCerebrospinalFluidFieldNumber = 1,
    kChemoreceptorFeedbackFieldNumber = 2,
    kBaroreceptorFeedbackFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarTimeData HeartElastanceDistributedTimeDelay = 4;
  bool has_heartelastancedistributedtimedelay() const;
  private:
  bool _internal_has_heartelastancedistributedtimedelay() const;
  public:
  void clear_heartelastancedistributedtimedelay();
  const ::pulse::cdm::bind::ScalarTimeData& heartelastancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* release_heartelastancedistributedtimedelay();
  ::pulse::cdm::bind::ScalarTimeData* mutable_heartelastancedistributedtimedelay();
  void set_allocated_heartelastancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* heartelastancedistributedtimedelay);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_heartelastancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_heartelastancedistributedtimedelay();
  public:
  void unsafe_arena_set_allocated_heartelastancedistributedtimedelay(
      ::pulse::cdm::bind::ScalarTimeData* heartelastancedistributedtimedelay);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_heartelastancedistributedtimedelay();

  // .pulse.cdm.bind.ScalarTimeData HeartRateDistributedTimeDelay = 5;
  bool has_heartratedistributedtimedelay() const;
  private:
  bool _internal_has_heartratedistributedtimedelay() const;
  public:
  void clear_heartratedistributedtimedelay();
  const ::pulse::cdm::bind::ScalarTimeData& heartratedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* release_heartratedistributedtimedelay();
  ::pulse::cdm::bind::ScalarTimeData* mutable_heartratedistributedtimedelay();
  void set_allocated_heartratedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* heartratedistributedtimedelay);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_heartratedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_heartratedistributedtimedelay();
  public:
  void unsafe_arena_set_allocated_heartratedistributedtimedelay(
      ::pulse::cdm::bind::ScalarTimeData* heartratedistributedtimedelay);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_heartratedistributedtimedelay();

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateIntercept = 6;
  bool has_normalizedheartrateintercept() const;
  private:
  bool _internal_has_normalizedheartrateintercept() const;
  public:
  void clear_normalizedheartrateintercept();
  const ::pulse::cdm::bind::ScalarData& normalizedheartrateintercept() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedheartrateintercept();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedheartrateintercept();
  void set_allocated_normalizedheartrateintercept(::pulse::cdm::bind::ScalarData* normalizedheartrateintercept);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedheartrateintercept() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedheartrateintercept();
  public:
  void unsafe_arena_set_allocated_normalizedheartrateintercept(
      ::pulse::cdm::bind::ScalarData* normalizedheartrateintercept);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedheartrateintercept();

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateSympatheticSlope = 7;
  bool has_normalizedheartratesympatheticslope() const;
  private:
  bool _internal_has_normalizedheartratesympatheticslope() const;
  public:
  void clear_normalizedheartratesympatheticslope();
  const ::pulse::cdm::bind::ScalarData& normalizedheartratesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedheartratesympatheticslope();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedheartratesympatheticslope();
  void set_allocated_normalizedheartratesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartratesympatheticslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedheartratesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedheartratesympatheticslope();
  public:
  void unsafe_arena_set_allocated_normalizedheartratesympatheticslope(
      ::pulse::cdm::bind::ScalarData* normalizedheartratesympatheticslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedheartratesympatheticslope();

  // .pulse.cdm.bind.ScalarData NormalizedHeartRateParasympatheticSlope = 8;
  bool has_normalizedheartrateparasympatheticslope() const;
  private:
  bool _internal_has_normalizedheartrateparasympatheticslope() const;
  public:
  void clear_normalizedheartrateparasympatheticslope();
  const ::pulse::cdm::bind::ScalarData& normalizedheartrateparasympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedheartrateparasympatheticslope();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedheartrateparasympatheticslope();
  void set_allocated_normalizedheartrateparasympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartrateparasympatheticslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedheartrateparasympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedheartrateparasympatheticslope();
  public:
  void unsafe_arena_set_allocated_normalizedheartrateparasympatheticslope(
      ::pulse::cdm::bind::ScalarData* normalizedheartrateparasympatheticslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedheartrateparasympatheticslope();

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceIntercept = 9;
  bool has_normalizedheartelastanceintercept() const;
  private:
  bool _internal_has_normalizedheartelastanceintercept() const;
  public:
  void clear_normalizedheartelastanceintercept();
  const ::pulse::cdm::bind::ScalarData& normalizedheartelastanceintercept() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedheartelastanceintercept();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedheartelastanceintercept();
  void set_allocated_normalizedheartelastanceintercept(::pulse::cdm::bind::ScalarData* normalizedheartelastanceintercept);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedheartelastanceintercept() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedheartelastanceintercept();
  public:
  void unsafe_arena_set_allocated_normalizedheartelastanceintercept(
      ::pulse::cdm::bind::ScalarData* normalizedheartelastanceintercept);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedheartelastanceintercept();

  // .pulse.cdm.bind.ScalarData NormalizedHeartElastanceSympatheticSlope = 10;
  bool has_normalizedheartelastancesympatheticslope() const;
  private:
  bool _internal_has_normalizedheartelastancesympatheticslope() const;
  public:
  void clear_normalizedheartelastancesympatheticslope();
  const ::pulse::cdm::bind::ScalarData& normalizedheartelastancesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedheartelastancesympatheticslope();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedheartelastancesympatheticslope();
  void set_allocated_normalizedheartelastancesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartelastancesympatheticslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedheartelastancesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedheartelastancesympatheticslope();
  public:
  void unsafe_arena_set_allocated_normalizedheartelastancesympatheticslope(
      ::pulse::cdm::bind::ScalarData* normalizedheartelastancesympatheticslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedheartelastancesympatheticslope();

  // .pulse.cdm.bind.ScalarData NormalizedResistanceIntercept = 11;
  bool has_normalizedresistanceintercept() const;
  private:
  bool _internal_has_normalizedresistanceintercept() const;
  public:
  void clear_normalizedresistanceintercept();
  const ::pulse::cdm::bind::ScalarData& normalizedresistanceintercept() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedresistanceintercept();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedresistanceintercept();
  void set_allocated_normalizedresistanceintercept(::pulse::cdm::bind::ScalarData* normalizedresistanceintercept);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedresistanceintercept() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedresistanceintercept();
  public:
  void unsafe_arena_set_allocated_normalizedresistanceintercept(
      ::pulse::cdm::bind::ScalarData* normalizedresistanceintercept);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedresistanceintercept();

  // .pulse.cdm.bind.ScalarData NormalizedResistanceSympatheticSlope = 12;
  bool has_normalizedresistancesympatheticslope() const;
  private:
  bool _internal_has_normalizedresistancesympatheticslope() const;
  public:
  void clear_normalizedresistancesympatheticslope();
  const ::pulse::cdm::bind::ScalarData& normalizedresistancesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedresistancesympatheticslope();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedresistancesympatheticslope();
  void set_allocated_normalizedresistancesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedresistancesympatheticslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedresistancesympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedresistancesympatheticslope();
  public:
  void unsafe_arena_set_allocated_normalizedresistancesympatheticslope(
      ::pulse::cdm::bind::ScalarData* normalizedresistancesympatheticslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedresistancesympatheticslope();

  // .pulse.cdm.bind.ScalarData NormalizedComplianceIntercept = 13;
  bool has_normalizedcomplianceintercept() const;
  private:
  bool _internal_has_normalizedcomplianceintercept() const;
  public:
  void clear_normalizedcomplianceintercept();
  const ::pulse::cdm::bind::ScalarData& normalizedcomplianceintercept() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedcomplianceintercept();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedcomplianceintercept();
  void set_allocated_normalizedcomplianceintercept(::pulse::cdm::bind::ScalarData* normalizedcomplianceintercept);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedcomplianceintercept() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedcomplianceintercept();
  public:
  void unsafe_arena_set_allocated_normalizedcomplianceintercept(
      ::pulse::cdm::bind::ScalarData* normalizedcomplianceintercept);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedcomplianceintercept();

  // .pulse.cdm.bind.ScalarData NormalizedComplianceParasympatheticSlope = 14;
  bool has_normalizedcomplianceparasympatheticslope() const;
  private:
  bool _internal_has_normalizedcomplianceparasympatheticslope() const;
  public:
  void clear_normalizedcomplianceparasympatheticslope();
  const ::pulse::cdm::bind::ScalarData& normalizedcomplianceparasympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* release_normalizedcomplianceparasympatheticslope();
  ::pulse::cdm::bind::ScalarData* mutable_normalizedcomplianceparasympatheticslope();
  void set_allocated_normalizedcomplianceparasympatheticslope(::pulse::cdm::bind::ScalarData* normalizedcomplianceparasympatheticslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_normalizedcomplianceparasympatheticslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_normalizedcomplianceparasympatheticslope();
  public:
  void unsafe_arena_set_allocated_normalizedcomplianceparasympatheticslope(
      ::pulse::cdm::bind::ScalarData* normalizedcomplianceparasympatheticslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_normalizedcomplianceparasympatheticslope();

  // .pulse.cdm.bind.ScalarLengthData PupilDiameterBaseline = 15;
  bool has_pupildiameterbaseline() const;
  private:
  bool _internal_has_pupildiameterbaseline() const;
  public:
  void clear_pupildiameterbaseline();
  const ::pulse::cdm::bind::ScalarLengthData& pupildiameterbaseline() const;
  ::pulse::cdm::bind::ScalarLengthData* release_pupildiameterbaseline();
  ::pulse::cdm::bind::ScalarLengthData* mutable_pupildiameterbaseline();
  void set_allocated_pupildiameterbaseline(::pulse::cdm::bind::ScalarLengthData* pupildiameterbaseline);
  private:
  const ::pulse::cdm::bind::ScalarLengthData& _internal_pupildiameterbaseline() const;
  ::pulse::cdm::bind::ScalarLengthData* _internal_mutable_pupildiameterbaseline();
  public:
  void unsafe_arena_set_allocated_pupildiameterbaseline(
      ::pulse::cdm::bind::ScalarLengthData* pupildiameterbaseline);
  ::pulse::cdm::bind::ScalarLengthData* unsafe_arena_release_pupildiameterbaseline();

  // .pulse.cdm.bind.ScalarData ResponseSlope = 16;
  bool has_responseslope() const;
  private:
  bool _internal_has_responseslope() const;
  public:
  void clear_responseslope();
  const ::pulse::cdm::bind::ScalarData& responseslope() const;
  ::pulse::cdm::bind::ScalarData* release_responseslope();
  ::pulse::cdm::bind::ScalarData* mutable_responseslope();
  void set_allocated_responseslope(::pulse::cdm::bind::ScalarData* responseslope);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_responseslope() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_responseslope();
  public:
  void unsafe_arena_set_allocated_responseslope(
      ::pulse::cdm::bind::ScalarData* responseslope);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_responseslope();

  // .pulse.cdm.bind.ScalarTimeData SystemicResistanceDistributedTimeDelay = 17;
  bool has_systemicresistancedistributedtimedelay() const;
  private:
  bool _internal_has_systemicresistancedistributedtimedelay() const;
  public:
  void clear_systemicresistancedistributedtimedelay();
  const ::pulse::cdm::bind::ScalarTimeData& systemicresistancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* release_systemicresistancedistributedtimedelay();
  ::pulse::cdm::bind::ScalarTimeData* mutable_systemicresistancedistributedtimedelay();
  void set_allocated_systemicresistancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* systemicresistancedistributedtimedelay);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_systemicresistancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_systemicresistancedistributedtimedelay();
  public:
  void unsafe_arena_set_allocated_systemicresistancedistributedtimedelay(
      ::pulse::cdm::bind::ScalarTimeData* systemicresistancedistributedtimedelay);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_systemicresistancedistributedtimedelay();

  // .pulse.cdm.bind.ScalarTimeData VenousComplianceDistributedTimeDelay = 18;
  bool has_venouscompliancedistributedtimedelay() const;
  private:
  bool _internal_has_venouscompliancedistributedtimedelay() const;
  public:
  void clear_venouscompliancedistributedtimedelay();
  const ::pulse::cdm::bind::ScalarTimeData& venouscompliancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* release_venouscompliancedistributedtimedelay();
  ::pulse::cdm::bind::ScalarTimeData* mutable_venouscompliancedistributedtimedelay();
  void set_allocated_venouscompliancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* venouscompliancedistributedtimedelay);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_venouscompliancedistributedtimedelay() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_venouscompliancedistributedtimedelay();
  public:
  void unsafe_arena_set_allocated_venouscompliancedistributedtimedelay(
      ::pulse::cdm::bind::ScalarTimeData* venouscompliancedistributedtimedelay);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_venouscompliancedistributedtimedelay();

  // .pulse.cdm.bind.eSwitch EnableCerebrospinalFluid = 1;
  void clear_enablecerebrospinalfluid();
  ::pulse::cdm::bind::eSwitch enablecerebrospinalfluid() const;
  void set_enablecerebrospinalfluid(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_enablecerebrospinalfluid() const;
  void _internal_set_enablecerebrospinalfluid(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 2;
  void clear_chemoreceptorfeedback();
  ::pulse::cdm::bind::eSwitch chemoreceptorfeedback() const;
  void set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_chemoreceptorfeedback() const;
  void _internal_set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 3;
  void clear_baroreceptorfeedback();
  ::pulse::cdm::bind::eSwitch baroreceptorfeedback() const;
  void set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_baroreceptorfeedback() const;
  void _internal_set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.NervousConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTimeData* heartelastancedistributedtimedelay_;
  ::pulse::cdm::bind::ScalarTimeData* heartratedistributedtimedelay_;
  ::pulse::cdm::bind::ScalarData* normalizedheartrateintercept_;
  ::pulse::cdm::bind::ScalarData* normalizedheartratesympatheticslope_;
  ::pulse::cdm::bind::ScalarData* normalizedheartrateparasympatheticslope_;
  ::pulse::cdm::bind::ScalarData* normalizedheartelastanceintercept_;
  ::pulse::cdm::bind::ScalarData* normalizedheartelastancesympatheticslope_;
  ::pulse::cdm::bind::ScalarData* normalizedresistanceintercept_;
  ::pulse::cdm::bind::ScalarData* normalizedresistancesympatheticslope_;
  ::pulse::cdm::bind::ScalarData* normalizedcomplianceintercept_;
  ::pulse::cdm::bind::ScalarData* normalizedcomplianceparasympatheticslope_;
  ::pulse::cdm::bind::ScalarLengthData* pupildiameterbaseline_;
  ::pulse::cdm::bind::ScalarData* responseslope_;
  ::pulse::cdm::bind::ScalarTimeData* systemicresistancedistributedtimedelay_;
  ::pulse::cdm::bind::ScalarTimeData* venouscompliancedistributedtimedelay_;
  int enablecerebrospinalfluid_;
  int chemoreceptorfeedback_;
  int baroreceptorfeedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_RenalConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.RenalConfigurationData) */ {
 public:
  inline ConfigurationData_RenalConfigurationData() : ConfigurationData_RenalConfigurationData(nullptr) {}
  virtual ~ConfigurationData_RenalConfigurationData();

  ConfigurationData_RenalConfigurationData(const ConfigurationData_RenalConfigurationData& from);
  ConfigurationData_RenalConfigurationData(ConfigurationData_RenalConfigurationData&& from) noexcept
    : ConfigurationData_RenalConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_RenalConfigurationData& operator=(const ConfigurationData_RenalConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_RenalConfigurationData& operator=(ConfigurationData_RenalConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_RenalConfigurationData& default_instance();

  static inline const ConfigurationData_RenalConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_RenalConfigurationData*>(
               &_ConfigurationData_RenalConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConfigurationData_RenalConfigurationData& a, ConfigurationData_RenalConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_RenalConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_RenalConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_RenalConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_RenalConfigurationData>(nullptr);
  }

  ConfigurationData_RenalConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_RenalConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_RenalConfigurationData& from);
  void MergeFrom(const ConfigurationData_RenalConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_RenalConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.RenalConfigurationData";
  }
  protected:
  explicit ConfigurationData_RenalConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlasmaSodiumConcentrationSetPointFieldNumber = 2,
    kPeritubularPotassiumConcentrationSetPointFieldNumber = 3,
    kLeftGlomerularFilteringSurfaceAreaBaselineFieldNumber = 4,
    kLeftGlomerularFluidPermeabilityBaselineFieldNumber = 5,
    kLeftTubularReabsorptionFilteringSurfaceAreaBaselineFieldNumber = 6,
    kLeftTubularReabsorptionFluidPermeabilityBaselineFieldNumber = 7,
    kMaximumAfferentResistanceFieldNumber = 8,
    kMinimumAfferentResistanceFieldNumber = 9,
    kRightGlomerularFilteringSurfaceAreaBaselineFieldNumber = 10,
    kRightGlomerularFluidPermeabilityBaselineFieldNumber = 11,
    kRightTubularReabsorptionFilteringSurfaceAreaBaselineFieldNumber = 12,
    kRightTubularReabsorptionFluidPermeabilityBaselineFieldNumber = 13,
    kTargetSodiumDeliveryFieldNumber = 14,
    kEnableRenalFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint = 2;
  bool has_plasmasodiumconcentrationsetpoint() const;
  private:
  bool _internal_has_plasmasodiumconcentrationsetpoint() const;
  public:
  void clear_plasmasodiumconcentrationsetpoint();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& plasmasodiumconcentrationsetpoint() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_plasmasodiumconcentrationsetpoint();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_plasmasodiumconcentrationsetpoint();
  void set_allocated_plasmasodiumconcentrationsetpoint(::pulse::cdm::bind::ScalarMassPerVolumeData* plasmasodiumconcentrationsetpoint);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_plasmasodiumconcentrationsetpoint() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_plasmasodiumconcentrationsetpoint();
  public:
  void unsafe_arena_set_allocated_plasmasodiumconcentrationsetpoint(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmasodiumconcentrationsetpoint);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_plasmasodiumconcentrationsetpoint();

  // .pulse.cdm.bind.ScalarMassPerVolumeData PeritubularPotassiumConcentrationSetPoint = 3;
  bool has_peritubularpotassiumconcentrationsetpoint() const;
  private:
  bool _internal_has_peritubularpotassiumconcentrationsetpoint() const;
  public:
  void clear_peritubularpotassiumconcentrationsetpoint();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& peritubularpotassiumconcentrationsetpoint() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_peritubularpotassiumconcentrationsetpoint();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_peritubularpotassiumconcentrationsetpoint();
  void set_allocated_peritubularpotassiumconcentrationsetpoint(::pulse::cdm::bind::ScalarMassPerVolumeData* peritubularpotassiumconcentrationsetpoint);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_peritubularpotassiumconcentrationsetpoint() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_peritubularpotassiumconcentrationsetpoint();
  public:
  void unsafe_arena_set_allocated_peritubularpotassiumconcentrationsetpoint(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* peritubularpotassiumconcentrationsetpoint);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_peritubularpotassiumconcentrationsetpoint();

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline = 4;
  bool has_leftglomerularfilteringsurfaceareabaseline() const;
  private:
  bool _internal_has_leftglomerularfilteringsurfaceareabaseline() const;
  public:
  void clear_leftglomerularfilteringsurfaceareabaseline();
  const ::pulse::cdm::bind::ScalarAreaData& leftglomerularfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* release_leftglomerularfilteringsurfaceareabaseline();
  ::pulse::cdm::bind::ScalarAreaData* mutable_leftglomerularfilteringsurfaceareabaseline();
  void set_allocated_leftglomerularfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* leftglomerularfilteringsurfaceareabaseline);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_leftglomerularfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_leftglomerularfilteringsurfaceareabaseline();
  public:
  void unsafe_arena_set_allocated_leftglomerularfilteringsurfaceareabaseline(
      ::pulse::cdm::bind::ScalarAreaData* leftglomerularfilteringsurfaceareabaseline);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_leftglomerularfilteringsurfaceareabaseline();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeabilityBaseline = 5;
  bool has_leftglomerularfluidpermeabilitybaseline() const;
  private:
  bool _internal_has_leftglomerularfluidpermeabilitybaseline() const;
  public:
  void clear_leftglomerularfluidpermeabilitybaseline();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& leftglomerularfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_leftglomerularfluidpermeabilitybaseline();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_leftglomerularfluidpermeabilitybaseline();
  void set_allocated_leftglomerularfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeabilitybaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_leftglomerularfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_leftglomerularfluidpermeabilitybaseline();
  public:
  void unsafe_arena_set_allocated_leftglomerularfluidpermeabilitybaseline(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeabilitybaseline);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_leftglomerularfluidpermeabilitybaseline();

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline = 6;
  bool has_lefttubularreabsorptionfilteringsurfaceareabaseline() const;
  private:
  bool _internal_has_lefttubularreabsorptionfilteringsurfaceareabaseline() const;
  public:
  void clear_lefttubularreabsorptionfilteringsurfaceareabaseline();
  const ::pulse::cdm::bind::ScalarAreaData& lefttubularreabsorptionfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* release_lefttubularreabsorptionfilteringsurfaceareabaseline();
  ::pulse::cdm::bind::ScalarAreaData* mutable_lefttubularreabsorptionfilteringsurfaceareabaseline();
  void set_allocated_lefttubularreabsorptionfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfilteringsurfaceareabaseline);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_lefttubularreabsorptionfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_lefttubularreabsorptionfilteringsurfaceareabaseline();
  public:
  void unsafe_arena_set_allocated_lefttubularreabsorptionfilteringsurfaceareabaseline(
      ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfilteringsurfaceareabaseline);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_lefttubularreabsorptionfilteringsurfaceareabaseline();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeabilityBaseline = 7;
  bool has_lefttubularreabsorptionfluidpermeabilitybaseline() const;
  private:
  bool _internal_has_lefttubularreabsorptionfluidpermeabilitybaseline() const;
  public:
  void clear_lefttubularreabsorptionfluidpermeabilitybaseline();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& lefttubularreabsorptionfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_lefttubularreabsorptionfluidpermeabilitybaseline();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_lefttubularreabsorptionfluidpermeabilitybaseline();
  void set_allocated_lefttubularreabsorptionfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeabilitybaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_lefttubularreabsorptionfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_lefttubularreabsorptionfluidpermeabilitybaseline();
  public:
  void unsafe_arena_set_allocated_lefttubularreabsorptionfluidpermeabilitybaseline(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeabilitybaseline);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_lefttubularreabsorptionfluidpermeabilitybaseline();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MaximumAfferentResistance = 8;
  bool has_maximumafferentresistance() const;
  private:
  bool _internal_has_maximumafferentresistance() const;
  public:
  void clear_maximumafferentresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& maximumafferentresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_maximumafferentresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_maximumafferentresistance();
  void set_allocated_maximumafferentresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* maximumafferentresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_maximumafferentresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_maximumafferentresistance();
  public:
  void unsafe_arena_set_allocated_maximumafferentresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* maximumafferentresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_maximumafferentresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData MinimumAfferentResistance = 9;
  bool has_minimumafferentresistance() const;
  private:
  bool _internal_has_minimumafferentresistance() const;
  public:
  void clear_minimumafferentresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& minimumafferentresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_minimumafferentresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_minimumafferentresistance();
  void set_allocated_minimumafferentresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* minimumafferentresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_minimumafferentresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_minimumafferentresistance();
  public:
  void unsafe_arena_set_allocated_minimumafferentresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* minimumafferentresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_minimumafferentresistance();

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline = 10;
  bool has_rightglomerularfilteringsurfaceareabaseline() const;
  private:
  bool _internal_has_rightglomerularfilteringsurfaceareabaseline() const;
  public:
  void clear_rightglomerularfilteringsurfaceareabaseline();
  const ::pulse::cdm::bind::ScalarAreaData& rightglomerularfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* release_rightglomerularfilteringsurfaceareabaseline();
  ::pulse::cdm::bind::ScalarAreaData* mutable_rightglomerularfilteringsurfaceareabaseline();
  void set_allocated_rightglomerularfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* rightglomerularfilteringsurfaceareabaseline);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_rightglomerularfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_rightglomerularfilteringsurfaceareabaseline();
  public:
  void unsafe_arena_set_allocated_rightglomerularfilteringsurfaceareabaseline(
      ::pulse::cdm::bind::ScalarAreaData* rightglomerularfilteringsurfaceareabaseline);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_rightglomerularfilteringsurfaceareabaseline();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeabilityBaseline = 11;
  bool has_rightglomerularfluidpermeabilitybaseline() const;
  private:
  bool _internal_has_rightglomerularfluidpermeabilitybaseline() const;
  public:
  void clear_rightglomerularfluidpermeabilitybaseline();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& rightglomerularfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_rightglomerularfluidpermeabilitybaseline();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_rightglomerularfluidpermeabilitybaseline();
  void set_allocated_rightglomerularfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeabilitybaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_rightglomerularfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_rightglomerularfluidpermeabilitybaseline();
  public:
  void unsafe_arena_set_allocated_rightglomerularfluidpermeabilitybaseline(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeabilitybaseline);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_rightglomerularfluidpermeabilitybaseline();

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline = 12;
  bool has_righttubularreabsorptionfilteringsurfaceareabaseline() const;
  private:
  bool _internal_has_righttubularreabsorptionfilteringsurfaceareabaseline() const;
  public:
  void clear_righttubularreabsorptionfilteringsurfaceareabaseline();
  const ::pulse::cdm::bind::ScalarAreaData& righttubularreabsorptionfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* release_righttubularreabsorptionfilteringsurfaceareabaseline();
  ::pulse::cdm::bind::ScalarAreaData* mutable_righttubularreabsorptionfilteringsurfaceareabaseline();
  void set_allocated_righttubularreabsorptionfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfilteringsurfaceareabaseline);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_righttubularreabsorptionfilteringsurfaceareabaseline() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_righttubularreabsorptionfilteringsurfaceareabaseline();
  public:
  void unsafe_arena_set_allocated_righttubularreabsorptionfilteringsurfaceareabaseline(
      ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfilteringsurfaceareabaseline);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_righttubularreabsorptionfilteringsurfaceareabaseline();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeabilityBaseline = 13;
  bool has_righttubularreabsorptionfluidpermeabilitybaseline() const;
  private:
  bool _internal_has_righttubularreabsorptionfluidpermeabilitybaseline() const;
  public:
  void clear_righttubularreabsorptionfluidpermeabilitybaseline();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& righttubularreabsorptionfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_righttubularreabsorptionfluidpermeabilitybaseline();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_righttubularreabsorptionfluidpermeabilitybaseline();
  void set_allocated_righttubularreabsorptionfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeabilitybaseline);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_righttubularreabsorptionfluidpermeabilitybaseline() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_righttubularreabsorptionfluidpermeabilitybaseline();
  public:
  void unsafe_arena_set_allocated_righttubularreabsorptionfluidpermeabilitybaseline(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeabilitybaseline);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_righttubularreabsorptionfluidpermeabilitybaseline();

  // .pulse.cdm.bind.ScalarMassPerTimeData TargetSodiumDelivery = 14;
  bool has_targetsodiumdelivery() const;
  private:
  bool _internal_has_targetsodiumdelivery() const;
  public:
  void clear_targetsodiumdelivery();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& targetsodiumdelivery() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_targetsodiumdelivery();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_targetsodiumdelivery();
  void set_allocated_targetsodiumdelivery(::pulse::cdm::bind::ScalarMassPerTimeData* targetsodiumdelivery);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_targetsodiumdelivery() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_targetsodiumdelivery();
  public:
  void unsafe_arena_set_allocated_targetsodiumdelivery(
      ::pulse::cdm::bind::ScalarMassPerTimeData* targetsodiumdelivery);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_targetsodiumdelivery();

  // .pulse.cdm.bind.eSwitch EnableRenal = 1;
  void clear_enablerenal();
  ::pulse::cdm::bind::eSwitch enablerenal() const;
  void set_enablerenal(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_enablerenal() const;
  void _internal_set_enablerenal(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.RenalConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmasodiumconcentrationsetpoint_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* peritubularpotassiumconcentrationsetpoint_;
  ::pulse::cdm::bind::ScalarAreaData* leftglomerularfilteringsurfaceareabaseline_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeabilitybaseline_;
  ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfilteringsurfaceareabaseline_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeabilitybaseline_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* maximumafferentresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* minimumafferentresistance_;
  ::pulse::cdm::bind::ScalarAreaData* rightglomerularfilteringsurfaceareabaseline_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeabilitybaseline_;
  ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfilteringsurfaceareabaseline_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeabilitybaseline_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* targetsodiumdelivery_;
  int enablerenal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_RespiratoryConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData) */ {
 public:
  inline ConfigurationData_RespiratoryConfigurationData() : ConfigurationData_RespiratoryConfigurationData(nullptr) {}
  virtual ~ConfigurationData_RespiratoryConfigurationData();

  ConfigurationData_RespiratoryConfigurationData(const ConfigurationData_RespiratoryConfigurationData& from);
  ConfigurationData_RespiratoryConfigurationData(ConfigurationData_RespiratoryConfigurationData&& from) noexcept
    : ConfigurationData_RespiratoryConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_RespiratoryConfigurationData& operator=(const ConfigurationData_RespiratoryConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_RespiratoryConfigurationData& operator=(ConfigurationData_RespiratoryConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_RespiratoryConfigurationData& default_instance();

  static inline const ConfigurationData_RespiratoryConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_RespiratoryConfigurationData*>(
               &_ConfigurationData_RespiratoryConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ConfigurationData_RespiratoryConfigurationData& a, ConfigurationData_RespiratoryConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_RespiratoryConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_RespiratoryConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_RespiratoryConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_RespiratoryConfigurationData>(nullptr);
  }

  ConfigurationData_RespiratoryConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_RespiratoryConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_RespiratoryConfigurationData& from);
  void MergeFrom(const ConfigurationData_RespiratoryConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_RespiratoryConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData";
  }
  protected:
  explicit ConfigurationData_RespiratoryConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentralControllerCO2PressureSetPointFieldNumber = 1,
    kCentralVentilatoryControllerGainFieldNumber = 2,
    kMinimumAllowableTidalVolumeFieldNumber = 3,
    kMinimumAllowableInspiratoryAndExpiratoryPeriodFieldNumber = 4,
    kPeripheralControllerCO2PressureSetPointFieldNumber = 5,
    kPeripheralVentilatoryControllerGainFieldNumber = 6,
    kPulmonaryVentilationRateMaximumFieldNumber = 7,
    kVentilationTidalVolumeInterceptFieldNumber = 8,
    kVentilatoryOcclusionPressureFieldNumber = 9,
  };
  // .pulse.cdm.bind.ScalarPressureData CentralControllerCO2PressureSetPoint = 1;
  bool has_centralcontrollerco2pressuresetpoint() const;
  private:
  bool _internal_has_centralcontrollerco2pressuresetpoint() const;
  public:
  void clear_centralcontrollerco2pressuresetpoint();
  const ::pulse::cdm::bind::ScalarPressureData& centralcontrollerco2pressuresetpoint() const;
  ::pulse::cdm::bind::ScalarPressureData* release_centralcontrollerco2pressuresetpoint();
  ::pulse::cdm::bind::ScalarPressureData* mutable_centralcontrollerco2pressuresetpoint();
  void set_allocated_centralcontrollerco2pressuresetpoint(::pulse::cdm::bind::ScalarPressureData* centralcontrollerco2pressuresetpoint);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_centralcontrollerco2pressuresetpoint() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_centralcontrollerco2pressuresetpoint();
  public:
  void unsafe_arena_set_allocated_centralcontrollerco2pressuresetpoint(
      ::pulse::cdm::bind::ScalarPressureData* centralcontrollerco2pressuresetpoint);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_centralcontrollerco2pressuresetpoint();

  // .pulse.cdm.bind.ScalarData CentralVentilatoryControllerGain = 2;
  bool has_centralventilatorycontrollergain() const;
  private:
  bool _internal_has_centralventilatorycontrollergain() const;
  public:
  void clear_centralventilatorycontrollergain();
  const ::pulse::cdm::bind::ScalarData& centralventilatorycontrollergain() const;
  ::pulse::cdm::bind::ScalarData* release_centralventilatorycontrollergain();
  ::pulse::cdm::bind::ScalarData* mutable_centralventilatorycontrollergain();
  void set_allocated_centralventilatorycontrollergain(::pulse::cdm::bind::ScalarData* centralventilatorycontrollergain);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_centralventilatorycontrollergain() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_centralventilatorycontrollergain();
  public:
  void unsafe_arena_set_allocated_centralventilatorycontrollergain(
      ::pulse::cdm::bind::ScalarData* centralventilatorycontrollergain);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_centralventilatorycontrollergain();

  // .pulse.cdm.bind.ScalarVolumeData MinimumAllowableTidalVolume = 3;
  bool has_minimumallowabletidalvolume() const;
  private:
  bool _internal_has_minimumallowabletidalvolume() const;
  public:
  void clear_minimumallowabletidalvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& minimumallowabletidalvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_minimumallowabletidalvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_minimumallowabletidalvolume();
  void set_allocated_minimumallowabletidalvolume(::pulse::cdm::bind::ScalarVolumeData* minimumallowabletidalvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_minimumallowabletidalvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_minimumallowabletidalvolume();
  public:
  void unsafe_arena_set_allocated_minimumallowabletidalvolume(
      ::pulse::cdm::bind::ScalarVolumeData* minimumallowabletidalvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_minimumallowabletidalvolume();

  // .pulse.cdm.bind.ScalarTimeData MinimumAllowableInspiratoryAndExpiratoryPeriod = 4;
  bool has_minimumallowableinspiratoryandexpiratoryperiod() const;
  private:
  bool _internal_has_minimumallowableinspiratoryandexpiratoryperiod() const;
  public:
  void clear_minimumallowableinspiratoryandexpiratoryperiod();
  const ::pulse::cdm::bind::ScalarTimeData& minimumallowableinspiratoryandexpiratoryperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_minimumallowableinspiratoryandexpiratoryperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_minimumallowableinspiratoryandexpiratoryperiod();
  void set_allocated_minimumallowableinspiratoryandexpiratoryperiod(::pulse::cdm::bind::ScalarTimeData* minimumallowableinspiratoryandexpiratoryperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_minimumallowableinspiratoryandexpiratoryperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_minimumallowableinspiratoryandexpiratoryperiod();
  public:
  void unsafe_arena_set_allocated_minimumallowableinspiratoryandexpiratoryperiod(
      ::pulse::cdm::bind::ScalarTimeData* minimumallowableinspiratoryandexpiratoryperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_minimumallowableinspiratoryandexpiratoryperiod();

  // .pulse.cdm.bind.ScalarPressureData PeripheralControllerCO2PressureSetPoint = 5;
  bool has_peripheralcontrollerco2pressuresetpoint() const;
  private:
  bool _internal_has_peripheralcontrollerco2pressuresetpoint() const;
  public:
  void clear_peripheralcontrollerco2pressuresetpoint();
  const ::pulse::cdm::bind::ScalarPressureData& peripheralcontrollerco2pressuresetpoint() const;
  ::pulse::cdm::bind::ScalarPressureData* release_peripheralcontrollerco2pressuresetpoint();
  ::pulse::cdm::bind::ScalarPressureData* mutable_peripheralcontrollerco2pressuresetpoint();
  void set_allocated_peripheralcontrollerco2pressuresetpoint(::pulse::cdm::bind::ScalarPressureData* peripheralcontrollerco2pressuresetpoint);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_peripheralcontrollerco2pressuresetpoint() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_peripheralcontrollerco2pressuresetpoint();
  public:
  void unsafe_arena_set_allocated_peripheralcontrollerco2pressuresetpoint(
      ::pulse::cdm::bind::ScalarPressureData* peripheralcontrollerco2pressuresetpoint);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_peripheralcontrollerco2pressuresetpoint();

  // .pulse.cdm.bind.ScalarData PeripheralVentilatoryControllerGain = 6;
  bool has_peripheralventilatorycontrollergain() const;
  private:
  bool _internal_has_peripheralventilatorycontrollergain() const;
  public:
  void clear_peripheralventilatorycontrollergain();
  const ::pulse::cdm::bind::ScalarData& peripheralventilatorycontrollergain() const;
  ::pulse::cdm::bind::ScalarData* release_peripheralventilatorycontrollergain();
  ::pulse::cdm::bind::ScalarData* mutable_peripheralventilatorycontrollergain();
  void set_allocated_peripheralventilatorycontrollergain(::pulse::cdm::bind::ScalarData* peripheralventilatorycontrollergain);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_peripheralventilatorycontrollergain() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_peripheralventilatorycontrollergain();
  public:
  void unsafe_arena_set_allocated_peripheralventilatorycontrollergain(
      ::pulse::cdm::bind::ScalarData* peripheralventilatorycontrollergain);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_peripheralventilatorycontrollergain();

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryVentilationRateMaximum = 7;
  bool has_pulmonaryventilationratemaximum() const;
  private:
  bool _internal_has_pulmonaryventilationratemaximum() const;
  public:
  void clear_pulmonaryventilationratemaximum();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonaryventilationratemaximum() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_pulmonaryventilationratemaximum();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_pulmonaryventilationratemaximum();
  void set_allocated_pulmonaryventilationratemaximum(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonaryventilationratemaximum);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_pulmonaryventilationratemaximum() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_pulmonaryventilationratemaximum();
  public:
  void unsafe_arena_set_allocated_pulmonaryventilationratemaximum(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonaryventilationratemaximum);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_pulmonaryventilationratemaximum();

  // .pulse.cdm.bind.ScalarVolumeData VentilationTidalVolumeIntercept = 8;
  bool has_ventilationtidalvolumeintercept() const;
  private:
  bool _internal_has_ventilationtidalvolumeintercept() const;
  public:
  void clear_ventilationtidalvolumeintercept();
  const ::pulse::cdm::bind::ScalarVolumeData& ventilationtidalvolumeintercept() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_ventilationtidalvolumeintercept();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_ventilationtidalvolumeintercept();
  void set_allocated_ventilationtidalvolumeintercept(::pulse::cdm::bind::ScalarVolumeData* ventilationtidalvolumeintercept);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_ventilationtidalvolumeintercept() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_ventilationtidalvolumeintercept();
  public:
  void unsafe_arena_set_allocated_ventilationtidalvolumeintercept(
      ::pulse::cdm::bind::ScalarVolumeData* ventilationtidalvolumeintercept);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_ventilationtidalvolumeintercept();

  // .pulse.cdm.bind.ScalarPressureData VentilatoryOcclusionPressure = 9;
  bool has_ventilatoryocclusionpressure() const;
  private:
  bool _internal_has_ventilatoryocclusionpressure() const;
  public:
  void clear_ventilatoryocclusionpressure();
  const ::pulse::cdm::bind::ScalarPressureData& ventilatoryocclusionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_ventilatoryocclusionpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_ventilatoryocclusionpressure();
  void set_allocated_ventilatoryocclusionpressure(::pulse::cdm::bind::ScalarPressureData* ventilatoryocclusionpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_ventilatoryocclusionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_ventilatoryocclusionpressure();
  public:
  void unsafe_arena_set_allocated_ventilatoryocclusionpressure(
      ::pulse::cdm::bind::ScalarPressureData* ventilatoryocclusionpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_ventilatoryocclusionpressure();

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPressureData* centralcontrollerco2pressuresetpoint_;
  ::pulse::cdm::bind::ScalarData* centralventilatorycontrollergain_;
  ::pulse::cdm::bind::ScalarVolumeData* minimumallowabletidalvolume_;
  ::pulse::cdm::bind::ScalarTimeData* minimumallowableinspiratoryandexpiratoryperiod_;
  ::pulse::cdm::bind::ScalarPressureData* peripheralcontrollerco2pressuresetpoint_;
  ::pulse::cdm::bind::ScalarData* peripheralventilatorycontrollergain_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonaryventilationratemaximum_;
  ::pulse::cdm::bind::ScalarVolumeData* ventilationtidalvolumeintercept_;
  ::pulse::cdm::bind::ScalarPressureData* ventilatoryocclusionpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData_TissueConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData.TissueConfigurationData) */ {
 public:
  inline ConfigurationData_TissueConfigurationData() : ConfigurationData_TissueConfigurationData(nullptr) {}
  virtual ~ConfigurationData_TissueConfigurationData();

  ConfigurationData_TissueConfigurationData(const ConfigurationData_TissueConfigurationData& from);
  ConfigurationData_TissueConfigurationData(ConfigurationData_TissueConfigurationData&& from) noexcept
    : ConfigurationData_TissueConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData_TissueConfigurationData& operator=(const ConfigurationData_TissueConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData_TissueConfigurationData& operator=(ConfigurationData_TissueConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData_TissueConfigurationData& default_instance();

  static inline const ConfigurationData_TissueConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData_TissueConfigurationData*>(
               &_ConfigurationData_TissueConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ConfigurationData_TissueConfigurationData& a, ConfigurationData_TissueConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData_TissueConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData_TissueConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData_TissueConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData_TissueConfigurationData>(nullptr);
  }

  ConfigurationData_TissueConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData_TissueConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData_TissueConfigurationData& from);
  void MergeFrom(const ConfigurationData_TissueConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData_TissueConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData.TissueConfigurationData";
  }
  protected:
  explicit ConfigurationData_TissueConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableTissueFieldNumber = 1,
  };
  // .pulse.cdm.bind.eSwitch EnableTissue = 1;
  void clear_enabletissue();
  ::pulse::cdm::bind::eSwitch enabletissue() const;
  void set_enabletissue(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_enabletissue() const;
  void _internal_set_enabletissue(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData.TissueConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int enabletissue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cpm.bind.ConfigurationData) */ {
 public:
  inline ConfigurationData() : ConfigurationData(nullptr) {}
  virtual ~ConfigurationData();

  ConfigurationData(const ConfigurationData& from);
  ConfigurationData(ConfigurationData&& from) noexcept
    : ConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData& operator=(const ConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData& operator=(ConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData& default_instance();

  enum StabilizationCriteriaCase {
    kStabilizationFileName = 3,
    kTimedStabilization = 4,
    kDynamicStabilization = 5,
    STABILIZATIONCRITERIA_NOT_SET = 0,
  };

  static inline const ConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData*>(
               &_ConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ConfigurationData& a, ConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData>(nullptr);
  }

  ConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData& from);
  void MergeFrom(const ConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cpm.bind.ConfigurationData";
  }
  protected:
  explicit ConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto);
    return ::descriptor_table_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConfigurationData_BloodChemistryConfigurationData BloodChemistryConfigurationData;
  typedef ConfigurationData_CardiovascularConfigurationData CardiovascularConfigurationData;
  typedef ConfigurationData_CircuitConfigurationData CircuitConfigurationData;
  typedef ConfigurationData_ConstantsConfigurationData ConstantsConfigurationData;
  typedef ConfigurationData_DrugsConfigurationData DrugsConfigurationData;
  typedef ConfigurationData_ECGConfigurationData ECGConfigurationData;
  typedef ConfigurationData_EnergyConfigurationData EnergyConfigurationData;
  typedef ConfigurationData_EnvironmentConfigurationData EnvironmentConfigurationData;
  typedef ConfigurationData_GastrointestinalConfigurationData GastrointestinalConfigurationData;
  typedef ConfigurationData_NervousConfigurationData NervousConfigurationData;
  typedef ConfigurationData_RenalConfigurationData RenalConfigurationData;
  typedef ConfigurationData_RespiratoryConfigurationData RespiratoryConfigurationData;
  typedef ConfigurationData_TissueConfigurationData TissueConfigurationData;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStepFieldNumber = 1,
    kBloodChemistryConfigurationFieldNumber = 7,
    kCardiovascularConfigurationFieldNumber = 8,
    kCircuitConfigurationFieldNumber = 9,
    kConstantsConfigurationFieldNumber = 10,
    kDrugsConfigurationFieldNumber = 11,
    kECGConfigurationFieldNumber = 12,
    kEnergyConfigurationFieldNumber = 13,
    kEnvironmentConfigurationFieldNumber = 14,
    kGastrointestinalConfigurationFieldNumber = 15,
    kNervousConfigurationFieldNumber = 16,
    kRenalConfigurationFieldNumber = 17,
    kRespiratoryConfigurationFieldNumber = 18,
    kTissueConfigurationFieldNumber = 19,
    kInitialOverridesFieldNumber = 20,
    kAllowDynamicTimeStepFieldNumber = 2,
    kWritePatientBaselineFileFieldNumber = 6,
    kStabilizationFileNameFieldNumber = 3,
    kTimedStabilizationFieldNumber = 4,
    kDynamicStabilizationFieldNumber = 5,
  };
  // .pulse.cdm.bind.ScalarTimeData TimeStep = 1;
  bool has_timestep() const;
  private:
  bool _internal_has_timestep() const;
  public:
  void clear_timestep();
  const ::pulse::cdm::bind::ScalarTimeData& timestep() const;
  ::pulse::cdm::bind::ScalarTimeData* release_timestep();
  ::pulse::cdm::bind::ScalarTimeData* mutable_timestep();
  void set_allocated_timestep(::pulse::cdm::bind::ScalarTimeData* timestep);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_timestep() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_timestep();
  public:
  void unsafe_arena_set_allocated_timestep(
      ::pulse::cdm::bind::ScalarTimeData* timestep);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_timestep();

  // .pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData BloodChemistryConfiguration = 7;
  bool has_bloodchemistryconfiguration() const;
  private:
  bool _internal_has_bloodchemistryconfiguration() const;
  public:
  void clear_bloodchemistryconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData& bloodchemistryconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* release_bloodchemistryconfiguration();
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* mutable_bloodchemistryconfiguration();
  void set_allocated_bloodchemistryconfiguration(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* bloodchemistryconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData& _internal_bloodchemistryconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* _internal_mutable_bloodchemistryconfiguration();
  public:
  void unsafe_arena_set_allocated_bloodchemistryconfiguration(
      ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* bloodchemistryconfiguration);
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* unsafe_arena_release_bloodchemistryconfiguration();

  // .pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData CardiovascularConfiguration = 8;
  bool has_cardiovascularconfiguration() const;
  private:
  bool _internal_has_cardiovascularconfiguration() const;
  public:
  void clear_cardiovascularconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData& cardiovascularconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* release_cardiovascularconfiguration();
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* mutable_cardiovascularconfiguration();
  void set_allocated_cardiovascularconfiguration(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* cardiovascularconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData& _internal_cardiovascularconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* _internal_mutable_cardiovascularconfiguration();
  public:
  void unsafe_arena_set_allocated_cardiovascularconfiguration(
      ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* cardiovascularconfiguration);
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* unsafe_arena_release_cardiovascularconfiguration();

  // .pulse.cpm.bind.ConfigurationData.CircuitConfigurationData CircuitConfiguration = 9;
  bool has_circuitconfiguration() const;
  private:
  bool _internal_has_circuitconfiguration() const;
  public:
  void clear_circuitconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData& circuitconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* release_circuitconfiguration();
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* mutable_circuitconfiguration();
  void set_allocated_circuitconfiguration(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* circuitconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData& _internal_circuitconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* _internal_mutable_circuitconfiguration();
  public:
  void unsafe_arena_set_allocated_circuitconfiguration(
      ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* circuitconfiguration);
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* unsafe_arena_release_circuitconfiguration();

  // .pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData ConstantsConfiguration = 10;
  bool has_constantsconfiguration() const;
  private:
  bool _internal_has_constantsconfiguration() const;
  public:
  void clear_constantsconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData& constantsconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* release_constantsconfiguration();
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* mutable_constantsconfiguration();
  void set_allocated_constantsconfiguration(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* constantsconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData& _internal_constantsconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* _internal_mutable_constantsconfiguration();
  public:
  void unsafe_arena_set_allocated_constantsconfiguration(
      ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* constantsconfiguration);
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* unsafe_arena_release_constantsconfiguration();

  // .pulse.cpm.bind.ConfigurationData.DrugsConfigurationData DrugsConfiguration = 11;
  bool has_drugsconfiguration() const;
  private:
  bool _internal_has_drugsconfiguration() const;
  public:
  void clear_drugsconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData& drugsconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* release_drugsconfiguration();
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* mutable_drugsconfiguration();
  void set_allocated_drugsconfiguration(::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* drugsconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData& _internal_drugsconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* _internal_mutable_drugsconfiguration();
  public:
  void unsafe_arena_set_allocated_drugsconfiguration(
      ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* drugsconfiguration);
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* unsafe_arena_release_drugsconfiguration();

  // .pulse.cpm.bind.ConfigurationData.ECGConfigurationData ECGConfiguration = 12;
  bool has_ecgconfiguration() const;
  private:
  bool _internal_has_ecgconfiguration() const;
  public:
  void clear_ecgconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData& ecgconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* release_ecgconfiguration();
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* mutable_ecgconfiguration();
  void set_allocated_ecgconfiguration(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ecgconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData& _internal_ecgconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* _internal_mutable_ecgconfiguration();
  public:
  void unsafe_arena_set_allocated_ecgconfiguration(
      ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ecgconfiguration);
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* unsafe_arena_release_ecgconfiguration();

  // .pulse.cpm.bind.ConfigurationData.EnergyConfigurationData EnergyConfiguration = 13;
  bool has_energyconfiguration() const;
  private:
  bool _internal_has_energyconfiguration() const;
  public:
  void clear_energyconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData& energyconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* release_energyconfiguration();
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* mutable_energyconfiguration();
  void set_allocated_energyconfiguration(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* energyconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData& _internal_energyconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* _internal_mutable_energyconfiguration();
  public:
  void unsafe_arena_set_allocated_energyconfiguration(
      ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* energyconfiguration);
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* unsafe_arena_release_energyconfiguration();

  // .pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData EnvironmentConfiguration = 14;
  bool has_environmentconfiguration() const;
  private:
  bool _internal_has_environmentconfiguration() const;
  public:
  void clear_environmentconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData& environmentconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* release_environmentconfiguration();
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* mutable_environmentconfiguration();
  void set_allocated_environmentconfiguration(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* environmentconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData& _internal_environmentconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* _internal_mutable_environmentconfiguration();
  public:
  void unsafe_arena_set_allocated_environmentconfiguration(
      ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* environmentconfiguration);
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* unsafe_arena_release_environmentconfiguration();

  // .pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData GastrointestinalConfiguration = 15;
  bool has_gastrointestinalconfiguration() const;
  private:
  bool _internal_has_gastrointestinalconfiguration() const;
  public:
  void clear_gastrointestinalconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData& gastrointestinalconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* release_gastrointestinalconfiguration();
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* mutable_gastrointestinalconfiguration();
  void set_allocated_gastrointestinalconfiguration(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* gastrointestinalconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData& _internal_gastrointestinalconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* _internal_mutable_gastrointestinalconfiguration();
  public:
  void unsafe_arena_set_allocated_gastrointestinalconfiguration(
      ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* gastrointestinalconfiguration);
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* unsafe_arena_release_gastrointestinalconfiguration();

  // .pulse.cpm.bind.ConfigurationData.NervousConfigurationData NervousConfiguration = 16;
  bool has_nervousconfiguration() const;
  private:
  bool _internal_has_nervousconfiguration() const;
  public:
  void clear_nervousconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData& nervousconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* release_nervousconfiguration();
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* mutable_nervousconfiguration();
  void set_allocated_nervousconfiguration(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* nervousconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData& _internal_nervousconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* _internal_mutable_nervousconfiguration();
  public:
  void unsafe_arena_set_allocated_nervousconfiguration(
      ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* nervousconfiguration);
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* unsafe_arena_release_nervousconfiguration();

  // .pulse.cpm.bind.ConfigurationData.RenalConfigurationData RenalConfiguration = 17;
  bool has_renalconfiguration() const;
  private:
  bool _internal_has_renalconfiguration() const;
  public:
  void clear_renalconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData& renalconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* release_renalconfiguration();
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* mutable_renalconfiguration();
  void set_allocated_renalconfiguration(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* renalconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData& _internal_renalconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* _internal_mutable_renalconfiguration();
  public:
  void unsafe_arena_set_allocated_renalconfiguration(
      ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* renalconfiguration);
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* unsafe_arena_release_renalconfiguration();

  // .pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData RespiratoryConfiguration = 18;
  bool has_respiratoryconfiguration() const;
  private:
  bool _internal_has_respiratoryconfiguration() const;
  public:
  void clear_respiratoryconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData& respiratoryconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* release_respiratoryconfiguration();
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* mutable_respiratoryconfiguration();
  void set_allocated_respiratoryconfiguration(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* respiratoryconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData& _internal_respiratoryconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* _internal_mutable_respiratoryconfiguration();
  public:
  void unsafe_arena_set_allocated_respiratoryconfiguration(
      ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* respiratoryconfiguration);
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* unsafe_arena_release_respiratoryconfiguration();

  // .pulse.cpm.bind.ConfigurationData.TissueConfigurationData TissueConfiguration = 19;
  bool has_tissueconfiguration() const;
  private:
  bool _internal_has_tissueconfiguration() const;
  public:
  void clear_tissueconfiguration();
  const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData& tissueconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* release_tissueconfiguration();
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* mutable_tissueconfiguration();
  void set_allocated_tissueconfiguration(::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* tissueconfiguration);
  private:
  const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData& _internal_tissueconfiguration() const;
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* _internal_mutable_tissueconfiguration();
  public:
  void unsafe_arena_set_allocated_tissueconfiguration(
      ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* tissueconfiguration);
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* unsafe_arena_release_tissueconfiguration();

  // .pulse.cdm.bind.OverridesData InitialOverrides = 20;
  bool has_initialoverrides() const;
  private:
  bool _internal_has_initialoverrides() const;
  public:
  void clear_initialoverrides();
  const ::pulse::cdm::bind::OverridesData& initialoverrides() const;
  ::pulse::cdm::bind::OverridesData* release_initialoverrides();
  ::pulse::cdm::bind::OverridesData* mutable_initialoverrides();
  void set_allocated_initialoverrides(::pulse::cdm::bind::OverridesData* initialoverrides);
  private:
  const ::pulse::cdm::bind::OverridesData& _internal_initialoverrides() const;
  ::pulse::cdm::bind::OverridesData* _internal_mutable_initialoverrides();
  public:
  void unsafe_arena_set_allocated_initialoverrides(
      ::pulse::cdm::bind::OverridesData* initialoverrides);
  ::pulse::cdm::bind::OverridesData* unsafe_arena_release_initialoverrides();

  // .pulse.cdm.bind.eSwitch AllowDynamicTimeStep = 2;
  void clear_allowdynamictimestep();
  ::pulse::cdm::bind::eSwitch allowdynamictimestep() const;
  void set_allowdynamictimestep(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_allowdynamictimestep() const;
  void _internal_set_allowdynamictimestep(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch WritePatientBaselineFile = 6;
  void clear_writepatientbaselinefile();
  ::pulse::cdm::bind::eSwitch writepatientbaselinefile() const;
  void set_writepatientbaselinefile(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_writepatientbaselinefile() const;
  void _internal_set_writepatientbaselinefile(::pulse::cdm::bind::eSwitch value);
  public:

  // string StabilizationFileName = 3;
  private:
  bool _internal_has_stabilizationfilename() const;
  public:
  void clear_stabilizationfilename();
  const std::string& stabilizationfilename() const;
  void set_stabilizationfilename(const std::string& value);
  void set_stabilizationfilename(std::string&& value);
  void set_stabilizationfilename(const char* value);
  void set_stabilizationfilename(const char* value, size_t size);
  std::string* mutable_stabilizationfilename();
  std::string* release_stabilizationfilename();
  void set_allocated_stabilizationfilename(std::string* stabilizationfilename);
  private:
  const std::string& _internal_stabilizationfilename() const;
  void _internal_set_stabilizationfilename(const std::string& value);
  std::string* _internal_mutable_stabilizationfilename();
  public:

  // .pulse.cdm.bind.TimedStabilizationData TimedStabilization = 4;
  bool has_timedstabilization() const;
  private:
  bool _internal_has_timedstabilization() const;
  public:
  void clear_timedstabilization();
  const ::pulse::cdm::bind::TimedStabilizationData& timedstabilization() const;
  ::pulse::cdm::bind::TimedStabilizationData* release_timedstabilization();
  ::pulse::cdm::bind::TimedStabilizationData* mutable_timedstabilization();
  void set_allocated_timedstabilization(::pulse::cdm::bind::TimedStabilizationData* timedstabilization);
  private:
  const ::pulse::cdm::bind::TimedStabilizationData& _internal_timedstabilization() const;
  ::pulse::cdm::bind::TimedStabilizationData* _internal_mutable_timedstabilization();
  public:
  void unsafe_arena_set_allocated_timedstabilization(
      ::pulse::cdm::bind::TimedStabilizationData* timedstabilization);
  ::pulse::cdm::bind::TimedStabilizationData* unsafe_arena_release_timedstabilization();

  // .pulse.cdm.bind.DynamicStabilizationData DynamicStabilization = 5;
  bool has_dynamicstabilization() const;
  private:
  bool _internal_has_dynamicstabilization() const;
  public:
  void clear_dynamicstabilization();
  const ::pulse::cdm::bind::DynamicStabilizationData& dynamicstabilization() const;
  ::pulse::cdm::bind::DynamicStabilizationData* release_dynamicstabilization();
  ::pulse::cdm::bind::DynamicStabilizationData* mutable_dynamicstabilization();
  void set_allocated_dynamicstabilization(::pulse::cdm::bind::DynamicStabilizationData* dynamicstabilization);
  private:
  const ::pulse::cdm::bind::DynamicStabilizationData& _internal_dynamicstabilization() const;
  ::pulse::cdm::bind::DynamicStabilizationData* _internal_mutable_dynamicstabilization();
  public:
  void unsafe_arena_set_allocated_dynamicstabilization(
      ::pulse::cdm::bind::DynamicStabilizationData* dynamicstabilization);
  ::pulse::cdm::bind::DynamicStabilizationData* unsafe_arena_release_dynamicstabilization();

  void clear_StabilizationCriteria();
  StabilizationCriteriaCase StabilizationCriteria_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cpm.bind.ConfigurationData)
 private:
  class _Internal;
  void set_has_stabilizationfilename();
  void set_has_timedstabilization();
  void set_has_dynamicstabilization();

  inline bool has_StabilizationCriteria() const;
  inline void clear_has_StabilizationCriteria();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTimeData* timestep_;
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* bloodchemistryconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* cardiovascularconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* circuitconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* constantsconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* drugsconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ecgconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* energyconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* environmentconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* gastrointestinalconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* nervousconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* renalconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* respiratoryconfiguration_;
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* tissueconfiguration_;
  ::pulse::cdm::bind::OverridesData* initialoverrides_;
  int allowdynamictimestep_;
  int writepatientbaselinefile_;
  union StabilizationCriteriaUnion {
    StabilizationCriteriaUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stabilizationfilename_;
    ::pulse::cdm::bind::TimedStabilizationData* timedstabilization_;
    ::pulse::cdm::bind::DynamicStabilizationData* dynamicstabilization_;
  } StabilizationCriteria_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigurationData_BloodChemistryConfigurationData

// .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 1;
inline bool ConfigurationData_BloodChemistryConfigurationData::_internal_has_meancorpuscularhemoglobin() const {
  return this != internal_default_instance() && meancorpuscularhemoglobin_ != nullptr;
}
inline bool ConfigurationData_BloodChemistryConfigurationData::has_meancorpuscularhemoglobin() const {
  return _internal_has_meancorpuscularhemoglobin();
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_BloodChemistryConfigurationData::_internal_meancorpuscularhemoglobin() const {
  const ::pulse::cdm::bind::ScalarMassPerAmountData* p = meancorpuscularhemoglobin_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAmountData&>(
      ::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_BloodChemistryConfigurationData::meancorpuscularhemoglobin() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularHemoglobin)
  return _internal_meancorpuscularhemoglobin();
}
inline void ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_set_allocated_meancorpuscularhemoglobin(
    ::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin_);
  }
  meancorpuscularhemoglobin_ = meancorpuscularhemoglobin;
  if (meancorpuscularhemoglobin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularHemoglobin)
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_BloodChemistryConfigurationData::release_meancorpuscularhemoglobin() {
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = meancorpuscularhemoglobin_;
  meancorpuscularhemoglobin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_release_meancorpuscularhemoglobin() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularHemoglobin)
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = meancorpuscularhemoglobin_;
  meancorpuscularhemoglobin_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_BloodChemistryConfigurationData::_internal_mutable_meancorpuscularhemoglobin() {
  
  if (meancorpuscularhemoglobin_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(GetArena());
    meancorpuscularhemoglobin_ = p;
  }
  return meancorpuscularhemoglobin_;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_BloodChemistryConfigurationData::mutable_meancorpuscularhemoglobin() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularHemoglobin)
  return _internal_mutable_meancorpuscularhemoglobin();
}
inline void ConfigurationData_BloodChemistryConfigurationData::set_allocated_meancorpuscularhemoglobin(::pulse::cdm::bind::ScalarMassPerAmountData* meancorpuscularhemoglobin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin_);
  }
  if (meancorpuscularhemoglobin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularhemoglobin)->GetArena();
    if (message_arena != submessage_arena) {
      meancorpuscularhemoglobin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancorpuscularhemoglobin, submessage_arena);
    }
    
  } else {
    
  }
  meancorpuscularhemoglobin_ = meancorpuscularhemoglobin;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularHemoglobin)
}

// .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 2;
inline bool ConfigurationData_BloodChemistryConfigurationData::_internal_has_meancorpuscularvolume() const {
  return this != internal_default_instance() && meancorpuscularvolume_ != nullptr;
}
inline bool ConfigurationData_BloodChemistryConfigurationData::has_meancorpuscularvolume() const {
  return _internal_has_meancorpuscularvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_BloodChemistryConfigurationData::_internal_meancorpuscularvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = meancorpuscularvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_BloodChemistryConfigurationData::meancorpuscularvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularVolume)
  return _internal_meancorpuscularvolume();
}
inline void ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_set_allocated_meancorpuscularvolume(
    ::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume_);
  }
  meancorpuscularvolume_ = meancorpuscularvolume;
  if (meancorpuscularvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_BloodChemistryConfigurationData::release_meancorpuscularvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = meancorpuscularvolume_;
  meancorpuscularvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_release_meancorpuscularvolume() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = meancorpuscularvolume_;
  meancorpuscularvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_BloodChemistryConfigurationData::_internal_mutable_meancorpuscularvolume() {
  
  if (meancorpuscularvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    meancorpuscularvolume_ = p;
  }
  return meancorpuscularvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_BloodChemistryConfigurationData::mutable_meancorpuscularvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularVolume)
  return _internal_mutable_meancorpuscularvolume();
}
inline void ConfigurationData_BloodChemistryConfigurationData::set_allocated_meancorpuscularvolume(::pulse::cdm::bind::ScalarVolumeData* meancorpuscularvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume_);
  }
  if (meancorpuscularvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancorpuscularvolume)->GetArena();
    if (message_arena != submessage_arena) {
      meancorpuscularvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancorpuscularvolume, submessage_arena);
    }
    
  } else {
    
  }
  meancorpuscularvolume_ = meancorpuscularvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.MeanCorpuscularVolume)
}

// .pulse.cdm.bind.ScalarLengthData StandardDiffusionDistance = 3;
inline bool ConfigurationData_BloodChemistryConfigurationData::_internal_has_standarddiffusiondistance() const {
  return this != internal_default_instance() && standarddiffusiondistance_ != nullptr;
}
inline bool ConfigurationData_BloodChemistryConfigurationData::has_standarddiffusiondistance() const {
  return _internal_has_standarddiffusiondistance();
}
inline const ::pulse::cdm::bind::ScalarLengthData& ConfigurationData_BloodChemistryConfigurationData::_internal_standarddiffusiondistance() const {
  const ::pulse::cdm::bind::ScalarLengthData* p = standarddiffusiondistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarLengthData&>(
      ::pulse::cdm::bind::_ScalarLengthData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarLengthData& ConfigurationData_BloodChemistryConfigurationData::standarddiffusiondistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardDiffusionDistance)
  return _internal_standarddiffusiondistance();
}
inline void ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_set_allocated_standarddiffusiondistance(
    ::pulse::cdm::bind::ScalarLengthData* standarddiffusiondistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standarddiffusiondistance_);
  }
  standarddiffusiondistance_ = standarddiffusiondistance;
  if (standarddiffusiondistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardDiffusionDistance)
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_BloodChemistryConfigurationData::release_standarddiffusiondistance() {
  
  ::pulse::cdm::bind::ScalarLengthData* temp = standarddiffusiondistance_;
  standarddiffusiondistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_release_standarddiffusiondistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardDiffusionDistance)
  
  ::pulse::cdm::bind::ScalarLengthData* temp = standarddiffusiondistance_;
  standarddiffusiondistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_BloodChemistryConfigurationData::_internal_mutable_standarddiffusiondistance() {
  
  if (standarddiffusiondistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthData>(GetArena());
    standarddiffusiondistance_ = p;
  }
  return standarddiffusiondistance_;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_BloodChemistryConfigurationData::mutable_standarddiffusiondistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardDiffusionDistance)
  return _internal_mutable_standarddiffusiondistance();
}
inline void ConfigurationData_BloodChemistryConfigurationData::set_allocated_standarddiffusiondistance(::pulse::cdm::bind::ScalarLengthData* standarddiffusiondistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(standarddiffusiondistance_);
  }
  if (standarddiffusiondistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standarddiffusiondistance)->GetArena();
    if (message_arena != submessage_arena) {
      standarddiffusiondistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standarddiffusiondistance, submessage_arena);
    }
    
  } else {
    
  }
  standarddiffusiondistance_ = standarddiffusiondistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardDiffusionDistance)
}

// .pulse.cdm.bind.ScalarAreaPerTimePressureData StandardOxygenDiffusionCoefficient = 4;
inline bool ConfigurationData_BloodChemistryConfigurationData::_internal_has_standardoxygendiffusioncoefficient() const {
  return this != internal_default_instance() && standardoxygendiffusioncoefficient_ != nullptr;
}
inline bool ConfigurationData_BloodChemistryConfigurationData::has_standardoxygendiffusioncoefficient() const {
  return _internal_has_standardoxygendiffusioncoefficient();
}
inline const ::pulse::cdm::bind::ScalarAreaPerTimePressureData& ConfigurationData_BloodChemistryConfigurationData::_internal_standardoxygendiffusioncoefficient() const {
  const ::pulse::cdm::bind::ScalarAreaPerTimePressureData* p = standardoxygendiffusioncoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaPerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarAreaPerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaPerTimePressureData& ConfigurationData_BloodChemistryConfigurationData::standardoxygendiffusioncoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardOxygenDiffusionCoefficient)
  return _internal_standardoxygendiffusioncoefficient();
}
inline void ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_set_allocated_standardoxygendiffusioncoefficient(
    ::pulse::cdm::bind::ScalarAreaPerTimePressureData* standardoxygendiffusioncoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardoxygendiffusioncoefficient_);
  }
  standardoxygendiffusioncoefficient_ = standardoxygendiffusioncoefficient;
  if (standardoxygendiffusioncoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardOxygenDiffusionCoefficient)
}
inline ::pulse::cdm::bind::ScalarAreaPerTimePressureData* ConfigurationData_BloodChemistryConfigurationData::release_standardoxygendiffusioncoefficient() {
  
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* temp = standardoxygendiffusioncoefficient_;
  standardoxygendiffusioncoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaPerTimePressureData* ConfigurationData_BloodChemistryConfigurationData::unsafe_arena_release_standardoxygendiffusioncoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardOxygenDiffusionCoefficient)
  
  ::pulse::cdm::bind::ScalarAreaPerTimePressureData* temp = standardoxygendiffusioncoefficient_;
  standardoxygendiffusioncoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaPerTimePressureData* ConfigurationData_BloodChemistryConfigurationData::_internal_mutable_standardoxygendiffusioncoefficient() {
  
  if (standardoxygendiffusioncoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaPerTimePressureData>(GetArena());
    standardoxygendiffusioncoefficient_ = p;
  }
  return standardoxygendiffusioncoefficient_;
}
inline ::pulse::cdm::bind::ScalarAreaPerTimePressureData* ConfigurationData_BloodChemistryConfigurationData::mutable_standardoxygendiffusioncoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardOxygenDiffusionCoefficient)
  return _internal_mutable_standardoxygendiffusioncoefficient();
}
inline void ConfigurationData_BloodChemistryConfigurationData::set_allocated_standardoxygendiffusioncoefficient(::pulse::cdm::bind::ScalarAreaPerTimePressureData* standardoxygendiffusioncoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardoxygendiffusioncoefficient_);
  }
  if (standardoxygendiffusioncoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardoxygendiffusioncoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      standardoxygendiffusioncoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standardoxygendiffusioncoefficient, submessage_arena);
    }
    
  } else {
    
  }
  standardoxygendiffusioncoefficient_ = standardoxygendiffusioncoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData.StandardOxygenDiffusionCoefficient)
}

// -------------------------------------------------------------------

// ConfigurationData_CardiovascularConfigurationData

// .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMaximum = 1;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_leftheartelastancemaximum() const {
  return this != internal_default_instance() && leftheartelastancemaximum_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_leftheartelastancemaximum() const {
  return _internal_has_leftheartelastancemaximum();
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::_internal_leftheartelastancemaximum() const {
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData* p = leftheartelastancemaximum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressurePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::leftheartelastancemaximum() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMaximum)
  return _internal_leftheartelastancemaximum();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_leftheartelastancemaximum(
    ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastancemaximum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastancemaximum_);
  }
  leftheartelastancemaximum_ = leftheartelastancemaximum;
  if (leftheartelastancemaximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMaximum)
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::release_leftheartelastancemaximum() {
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = leftheartelastancemaximum_;
  leftheartelastancemaximum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_leftheartelastancemaximum() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMaximum)
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = leftheartelastancemaximum_;
  leftheartelastancemaximum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_leftheartelastancemaximum() {
  
  if (leftheartelastancemaximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(GetArena());
    leftheartelastancemaximum_ = p;
  }
  return leftheartelastancemaximum_;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::mutable_leftheartelastancemaximum() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMaximum)
  return _internal_mutable_leftheartelastancemaximum();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_leftheartelastancemaximum(::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastancemaximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastancemaximum_);
  }
  if (leftheartelastancemaximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastancemaximum)->GetArena();
    if (message_arena != submessage_arena) {
      leftheartelastancemaximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftheartelastancemaximum, submessage_arena);
    }
    
  } else {
    
  }
  leftheartelastancemaximum_ = leftheartelastancemaximum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMaximum)
}

// .pulse.cdm.bind.ScalarPressurePerVolumeData LeftHeartElastanceMinimum = 2;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_leftheartelastanceminimum() const {
  return this != internal_default_instance() && leftheartelastanceminimum_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_leftheartelastanceminimum() const {
  return _internal_has_leftheartelastanceminimum();
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::_internal_leftheartelastanceminimum() const {
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData* p = leftheartelastanceminimum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressurePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::leftheartelastanceminimum() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMinimum)
  return _internal_leftheartelastanceminimum();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_leftheartelastanceminimum(
    ::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastanceminimum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastanceminimum_);
  }
  leftheartelastanceminimum_ = leftheartelastanceminimum;
  if (leftheartelastanceminimum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMinimum)
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::release_leftheartelastanceminimum() {
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = leftheartelastanceminimum_;
  leftheartelastanceminimum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_leftheartelastanceminimum() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMinimum)
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = leftheartelastanceminimum_;
  leftheartelastanceminimum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_leftheartelastanceminimum() {
  
  if (leftheartelastanceminimum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(GetArena());
    leftheartelastanceminimum_ = p;
  }
  return leftheartelastanceminimum_;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::mutable_leftheartelastanceminimum() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMinimum)
  return _internal_mutable_leftheartelastanceminimum();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_leftheartelastanceminimum(::pulse::cdm::bind::ScalarPressurePerVolumeData* leftheartelastanceminimum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastanceminimum_);
  }
  if (leftheartelastanceminimum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftheartelastanceminimum)->GetArena();
    if (message_arena != submessage_arena) {
      leftheartelastanceminimum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftheartelastanceminimum, submessage_arena);
    }
    
  } else {
    
  }
  leftheartelastanceminimum_ = leftheartelastanceminimum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.LeftHeartElastanceMinimum)
}

// .pulse.cdm.bind.Scalar0To1Data MinimumBloodVolumeFraction = 3;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_minimumbloodvolumefraction() const {
  return this != internal_default_instance() && minimumbloodvolumefraction_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_minimumbloodvolumefraction() const {
  return _internal_has_minimumbloodvolumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_CardiovascularConfigurationData::_internal_minimumbloodvolumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = minimumbloodvolumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_CardiovascularConfigurationData::minimumbloodvolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.MinimumBloodVolumeFraction)
  return _internal_minimumbloodvolumefraction();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_minimumbloodvolumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* minimumbloodvolumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumbloodvolumefraction_);
  }
  minimumbloodvolumefraction_ = minimumbloodvolumefraction;
  if (minimumbloodvolumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.MinimumBloodVolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_CardiovascularConfigurationData::release_minimumbloodvolumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = minimumbloodvolumefraction_;
  minimumbloodvolumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_minimumbloodvolumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.MinimumBloodVolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = minimumbloodvolumefraction_;
  minimumbloodvolumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_minimumbloodvolumefraction() {
  
  if (minimumbloodvolumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    minimumbloodvolumefraction_ = p;
  }
  return minimumbloodvolumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_CardiovascularConfigurationData::mutable_minimumbloodvolumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.MinimumBloodVolumeFraction)
  return _internal_mutable_minimumbloodvolumefraction();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_minimumbloodvolumefraction(::pulse::cdm::bind::Scalar0To1Data* minimumbloodvolumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumbloodvolumefraction_);
  }
  if (minimumbloodvolumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumbloodvolumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      minimumbloodvolumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimumbloodvolumefraction, submessage_arena);
    }
    
  } else {
    
  }
  minimumbloodvolumefraction_ = minimumbloodvolumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.MinimumBloodVolumeFraction)
}

// .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMaximum = 4;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_rightheartelastancemaximum() const {
  return this != internal_default_instance() && rightheartelastancemaximum_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_rightheartelastancemaximum() const {
  return _internal_has_rightheartelastancemaximum();
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::_internal_rightheartelastancemaximum() const {
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData* p = rightheartelastancemaximum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressurePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::rightheartelastancemaximum() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMaximum)
  return _internal_rightheartelastancemaximum();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_rightheartelastancemaximum(
    ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastancemaximum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastancemaximum_);
  }
  rightheartelastancemaximum_ = rightheartelastancemaximum;
  if (rightheartelastancemaximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMaximum)
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::release_rightheartelastancemaximum() {
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = rightheartelastancemaximum_;
  rightheartelastancemaximum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_rightheartelastancemaximum() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMaximum)
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = rightheartelastancemaximum_;
  rightheartelastancemaximum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_rightheartelastancemaximum() {
  
  if (rightheartelastancemaximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(GetArena());
    rightheartelastancemaximum_ = p;
  }
  return rightheartelastancemaximum_;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::mutable_rightheartelastancemaximum() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMaximum)
  return _internal_mutable_rightheartelastancemaximum();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_rightheartelastancemaximum(::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastancemaximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastancemaximum_);
  }
  if (rightheartelastancemaximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastancemaximum)->GetArena();
    if (message_arena != submessage_arena) {
      rightheartelastancemaximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightheartelastancemaximum, submessage_arena);
    }
    
  } else {
    
  }
  rightheartelastancemaximum_ = rightheartelastancemaximum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMaximum)
}

// .pulse.cdm.bind.ScalarPressurePerVolumeData RightHeartElastanceMinimum = 5;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_rightheartelastanceminimum() const {
  return this != internal_default_instance() && rightheartelastanceminimum_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_rightheartelastanceminimum() const {
  return _internal_has_rightheartelastanceminimum();
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::_internal_rightheartelastanceminimum() const {
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData* p = rightheartelastanceminimum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressurePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& ConfigurationData_CardiovascularConfigurationData::rightheartelastanceminimum() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMinimum)
  return _internal_rightheartelastanceminimum();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_rightheartelastanceminimum(
    ::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastanceminimum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastanceminimum_);
  }
  rightheartelastanceminimum_ = rightheartelastanceminimum;
  if (rightheartelastanceminimum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMinimum)
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::release_rightheartelastanceminimum() {
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = rightheartelastanceminimum_;
  rightheartelastanceminimum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_rightheartelastanceminimum() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMinimum)
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = rightheartelastanceminimum_;
  rightheartelastanceminimum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_rightheartelastanceminimum() {
  
  if (rightheartelastanceminimum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(GetArena());
    rightheartelastanceminimum_ = p;
  }
  return rightheartelastanceminimum_;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* ConfigurationData_CardiovascularConfigurationData::mutable_rightheartelastanceminimum() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMinimum)
  return _internal_mutable_rightheartelastanceminimum();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_rightheartelastanceminimum(::pulse::cdm::bind::ScalarPressurePerVolumeData* rightheartelastanceminimum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastanceminimum_);
  }
  if (rightheartelastanceminimum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightheartelastanceminimum)->GetArena();
    if (message_arena != submessage_arena) {
      rightheartelastanceminimum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightheartelastanceminimum, submessage_arena);
    }
    
  } else {
    
  }
  rightheartelastanceminimum_ = rightheartelastanceminimum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.RightHeartElastanceMinimum)
}

// .pulse.cdm.bind.ScalarData StandardPulmonaryCapillaryCoverage = 6;
inline bool ConfigurationData_CardiovascularConfigurationData::_internal_has_standardpulmonarycapillarycoverage() const {
  return this != internal_default_instance() && standardpulmonarycapillarycoverage_ != nullptr;
}
inline bool ConfigurationData_CardiovascularConfigurationData::has_standardpulmonarycapillarycoverage() const {
  return _internal_has_standardpulmonarycapillarycoverage();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_CardiovascularConfigurationData::_internal_standardpulmonarycapillarycoverage() const {
  const ::pulse::cdm::bind::ScalarData* p = standardpulmonarycapillarycoverage_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_CardiovascularConfigurationData::standardpulmonarycapillarycoverage() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.StandardPulmonaryCapillaryCoverage)
  return _internal_standardpulmonarycapillarycoverage();
}
inline void ConfigurationData_CardiovascularConfigurationData::unsafe_arena_set_allocated_standardpulmonarycapillarycoverage(
    ::pulse::cdm::bind::ScalarData* standardpulmonarycapillarycoverage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardpulmonarycapillarycoverage_);
  }
  standardpulmonarycapillarycoverage_ = standardpulmonarycapillarycoverage;
  if (standardpulmonarycapillarycoverage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.StandardPulmonaryCapillaryCoverage)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_CardiovascularConfigurationData::release_standardpulmonarycapillarycoverage() {
  
  ::pulse::cdm::bind::ScalarData* temp = standardpulmonarycapillarycoverage_;
  standardpulmonarycapillarycoverage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_CardiovascularConfigurationData::unsafe_arena_release_standardpulmonarycapillarycoverage() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.StandardPulmonaryCapillaryCoverage)
  
  ::pulse::cdm::bind::ScalarData* temp = standardpulmonarycapillarycoverage_;
  standardpulmonarycapillarycoverage_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_CardiovascularConfigurationData::_internal_mutable_standardpulmonarycapillarycoverage() {
  
  if (standardpulmonarycapillarycoverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    standardpulmonarycapillarycoverage_ = p;
  }
  return standardpulmonarycapillarycoverage_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_CardiovascularConfigurationData::mutable_standardpulmonarycapillarycoverage() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.StandardPulmonaryCapillaryCoverage)
  return _internal_mutable_standardpulmonarycapillarycoverage();
}
inline void ConfigurationData_CardiovascularConfigurationData::set_allocated_standardpulmonarycapillarycoverage(::pulse::cdm::bind::ScalarData* standardpulmonarycapillarycoverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardpulmonarycapillarycoverage_);
  }
  if (standardpulmonarycapillarycoverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardpulmonarycapillarycoverage)->GetArena();
    if (message_arena != submessage_arena) {
      standardpulmonarycapillarycoverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standardpulmonarycapillarycoverage, submessage_arena);
    }
    
  } else {
    
  }
  standardpulmonarycapillarycoverage_ = standardpulmonarycapillarycoverage;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData.StandardPulmonaryCapillaryCoverage)
}

// -------------------------------------------------------------------

// ConfigurationData_CircuitConfigurationData

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData CardiovascularOpenResistance = 1;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_cardiovascularopenresistance() const {
  return this != internal_default_instance() && cardiovascularopenresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_cardiovascularopenresistance() const {
  return _internal_has_cardiovascularopenresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_cardiovascularopenresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = cardiovascularopenresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::cardiovascularopenresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.CardiovascularOpenResistance)
  return _internal_cardiovascularopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_cardiovascularopenresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* cardiovascularopenresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiovascularopenresistance_);
  }
  cardiovascularopenresistance_ = cardiovascularopenresistance;
  if (cardiovascularopenresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.CardiovascularOpenResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_cardiovascularopenresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = cardiovascularopenresistance_;
  cardiovascularopenresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_cardiovascularopenresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.CardiovascularOpenResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = cardiovascularopenresistance_;
  cardiovascularopenresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_cardiovascularopenresistance() {
  
  if (cardiovascularopenresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    cardiovascularopenresistance_ = p;
  }
  return cardiovascularopenresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_cardiovascularopenresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.CardiovascularOpenResistance)
  return _internal_mutable_cardiovascularopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_cardiovascularopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* cardiovascularopenresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiovascularopenresistance_);
  }
  if (cardiovascularopenresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiovascularopenresistance)->GetArena();
    if (message_arena != submessage_arena) {
      cardiovascularopenresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiovascularopenresistance, submessage_arena);
    }
    
  } else {
    
  }
  cardiovascularopenresistance_ = cardiovascularopenresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.CardiovascularOpenResistance)
}

// .pulse.cdm.bind.ScalarElectricResistanceData DefaultClosedElectricResistance = 2;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultclosedelectricresistance() const {
  return this != internal_default_instance() && defaultclosedelectricresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultclosedelectricresistance() const {
  return _internal_has_defaultclosedelectricresistance();
}
inline const ::pulse::cdm::bind::ScalarElectricResistanceData& ConfigurationData_CircuitConfigurationData::_internal_defaultclosedelectricresistance() const {
  const ::pulse::cdm::bind::ScalarElectricResistanceData* p = defaultclosedelectricresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricResistanceData&>(
      ::pulse::cdm::bind::_ScalarElectricResistanceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricResistanceData& ConfigurationData_CircuitConfigurationData::defaultclosedelectricresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedElectricResistance)
  return _internal_defaultclosedelectricresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultclosedelectricresistance(
    ::pulse::cdm::bind::ScalarElectricResistanceData* defaultclosedelectricresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedelectricresistance_);
  }
  defaultclosedelectricresistance_ = defaultclosedelectricresistance;
  if (defaultclosedelectricresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedElectricResistance)
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::release_defaultclosedelectricresistance() {
  
  ::pulse::cdm::bind::ScalarElectricResistanceData* temp = defaultclosedelectricresistance_;
  defaultclosedelectricresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultclosedelectricresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedElectricResistance)
  
  ::pulse::cdm::bind::ScalarElectricResistanceData* temp = defaultclosedelectricresistance_;
  defaultclosedelectricresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultclosedelectricresistance() {
  
  if (defaultclosedelectricresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricResistanceData>(GetArena());
    defaultclosedelectricresistance_ = p;
  }
  return defaultclosedelectricresistance_;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::mutable_defaultclosedelectricresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedElectricResistance)
  return _internal_mutable_defaultclosedelectricresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultclosedelectricresistance(::pulse::cdm::bind::ScalarElectricResistanceData* defaultclosedelectricresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedelectricresistance_);
  }
  if (defaultclosedelectricresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedelectricresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultclosedelectricresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultclosedelectricresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultclosedelectricresistance_ = defaultclosedelectricresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedElectricResistance)
}

// .pulse.cdm.bind.ScalarElectricResistanceData DefaultOpenElectricResistance = 3;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultopenelectricresistance() const {
  return this != internal_default_instance() && defaultopenelectricresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultopenelectricresistance() const {
  return _internal_has_defaultopenelectricresistance();
}
inline const ::pulse::cdm::bind::ScalarElectricResistanceData& ConfigurationData_CircuitConfigurationData::_internal_defaultopenelectricresistance() const {
  const ::pulse::cdm::bind::ScalarElectricResistanceData* p = defaultopenelectricresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricResistanceData&>(
      ::pulse::cdm::bind::_ScalarElectricResistanceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricResistanceData& ConfigurationData_CircuitConfigurationData::defaultopenelectricresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenElectricResistance)
  return _internal_defaultopenelectricresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultopenelectricresistance(
    ::pulse::cdm::bind::ScalarElectricResistanceData* defaultopenelectricresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenelectricresistance_);
  }
  defaultopenelectricresistance_ = defaultopenelectricresistance;
  if (defaultopenelectricresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenElectricResistance)
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::release_defaultopenelectricresistance() {
  
  ::pulse::cdm::bind::ScalarElectricResistanceData* temp = defaultopenelectricresistance_;
  defaultopenelectricresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultopenelectricresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenElectricResistance)
  
  ::pulse::cdm::bind::ScalarElectricResistanceData* temp = defaultopenelectricresistance_;
  defaultopenelectricresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultopenelectricresistance() {
  
  if (defaultopenelectricresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricResistanceData>(GetArena());
    defaultopenelectricresistance_ = p;
  }
  return defaultopenelectricresistance_;
}
inline ::pulse::cdm::bind::ScalarElectricResistanceData* ConfigurationData_CircuitConfigurationData::mutable_defaultopenelectricresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenElectricResistance)
  return _internal_mutable_defaultopenelectricresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultopenelectricresistance(::pulse::cdm::bind::ScalarElectricResistanceData* defaultopenelectricresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenelectricresistance_);
  }
  if (defaultopenelectricresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenelectricresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultopenelectricresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultopenelectricresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultopenelectricresistance_ = defaultopenelectricresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenElectricResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultClosedFlowResistance = 4;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultclosedflowresistance() const {
  return this != internal_default_instance() && defaultclosedflowresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultclosedflowresistance() const {
  return _internal_has_defaultclosedflowresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_defaultclosedflowresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = defaultclosedflowresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::defaultclosedflowresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedFlowResistance)
  return _internal_defaultclosedflowresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultclosedflowresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultclosedflowresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedflowresistance_);
  }
  defaultclosedflowresistance_ = defaultclosedflowresistance;
  if (defaultclosedflowresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedFlowResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_defaultclosedflowresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = defaultclosedflowresistance_;
  defaultclosedflowresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultclosedflowresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedFlowResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = defaultclosedflowresistance_;
  defaultclosedflowresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultclosedflowresistance() {
  
  if (defaultclosedflowresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    defaultclosedflowresistance_ = p;
  }
  return defaultclosedflowresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_defaultclosedflowresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedFlowResistance)
  return _internal_mutable_defaultclosedflowresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultclosedflowresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultclosedflowresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedflowresistance_);
  }
  if (defaultclosedflowresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedflowresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultclosedflowresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultclosedflowresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultclosedflowresistance_ = defaultclosedflowresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedFlowResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData DefaultOpenFlowResistance = 5;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultopenflowresistance() const {
  return this != internal_default_instance() && defaultopenflowresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultopenflowresistance() const {
  return _internal_has_defaultopenflowresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_defaultopenflowresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = defaultopenflowresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::defaultopenflowresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenFlowResistance)
  return _internal_defaultopenflowresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultopenflowresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultopenflowresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenflowresistance_);
  }
  defaultopenflowresistance_ = defaultopenflowresistance;
  if (defaultopenflowresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenFlowResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_defaultopenflowresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = defaultopenflowresistance_;
  defaultopenflowresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultopenflowresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenFlowResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = defaultopenflowresistance_;
  defaultopenflowresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultopenflowresistance() {
  
  if (defaultopenflowresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    defaultopenflowresistance_ = p;
  }
  return defaultopenflowresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_defaultopenflowresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenFlowResistance)
  return _internal_mutable_defaultopenflowresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultopenflowresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* defaultopenflowresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenflowresistance_);
  }
  if (defaultopenflowresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenflowresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultopenflowresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultopenflowresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultopenflowresistance_ = defaultopenflowresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenFlowResistance)
}

// .pulse.cdm.bind.ScalarHeatResistanceData DefaultClosedHeatResistance = 6;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultclosedheatresistance() const {
  return this != internal_default_instance() && defaultclosedheatresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultclosedheatresistance() const {
  return _internal_has_defaultclosedheatresistance();
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceData& ConfigurationData_CircuitConfigurationData::_internal_defaultclosedheatresistance() const {
  const ::pulse::cdm::bind::ScalarHeatResistanceData* p = defaultclosedheatresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatResistanceData&>(
      ::pulse::cdm::bind::_ScalarHeatResistanceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceData& ConfigurationData_CircuitConfigurationData::defaultclosedheatresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedHeatResistance)
  return _internal_defaultclosedheatresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultclosedheatresistance(
    ::pulse::cdm::bind::ScalarHeatResistanceData* defaultclosedheatresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedheatresistance_);
  }
  defaultclosedheatresistance_ = defaultclosedheatresistance;
  if (defaultclosedheatresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedHeatResistance)
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::release_defaultclosedheatresistance() {
  
  ::pulse::cdm::bind::ScalarHeatResistanceData* temp = defaultclosedheatresistance_;
  defaultclosedheatresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultclosedheatresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedHeatResistance)
  
  ::pulse::cdm::bind::ScalarHeatResistanceData* temp = defaultclosedheatresistance_;
  defaultclosedheatresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultclosedheatresistance() {
  
  if (defaultclosedheatresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatResistanceData>(GetArena());
    defaultclosedheatresistance_ = p;
  }
  return defaultclosedheatresistance_;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::mutable_defaultclosedheatresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedHeatResistance)
  return _internal_mutable_defaultclosedheatresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultclosedheatresistance(::pulse::cdm::bind::ScalarHeatResistanceData* defaultclosedheatresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedheatresistance_);
  }
  if (defaultclosedheatresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultclosedheatresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultclosedheatresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultclosedheatresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultclosedheatresistance_ = defaultclosedheatresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultClosedHeatResistance)
}

// .pulse.cdm.bind.ScalarHeatResistanceData DefaultOpenHeatResistance = 7;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_defaultopenheatresistance() const {
  return this != internal_default_instance() && defaultopenheatresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_defaultopenheatresistance() const {
  return _internal_has_defaultopenheatresistance();
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceData& ConfigurationData_CircuitConfigurationData::_internal_defaultopenheatresistance() const {
  const ::pulse::cdm::bind::ScalarHeatResistanceData* p = defaultopenheatresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatResistanceData&>(
      ::pulse::cdm::bind::_ScalarHeatResistanceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceData& ConfigurationData_CircuitConfigurationData::defaultopenheatresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenHeatResistance)
  return _internal_defaultopenheatresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_defaultopenheatresistance(
    ::pulse::cdm::bind::ScalarHeatResistanceData* defaultopenheatresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenheatresistance_);
  }
  defaultopenheatresistance_ = defaultopenheatresistance;
  if (defaultopenheatresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenHeatResistance)
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::release_defaultopenheatresistance() {
  
  ::pulse::cdm::bind::ScalarHeatResistanceData* temp = defaultopenheatresistance_;
  defaultopenheatresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_defaultopenheatresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenHeatResistance)
  
  ::pulse::cdm::bind::ScalarHeatResistanceData* temp = defaultopenheatresistance_;
  defaultopenheatresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::_internal_mutable_defaultopenheatresistance() {
  
  if (defaultopenheatresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatResistanceData>(GetArena());
    defaultopenheatresistance_ = p;
  }
  return defaultopenheatresistance_;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceData* ConfigurationData_CircuitConfigurationData::mutable_defaultopenheatresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenHeatResistance)
  return _internal_mutable_defaultopenheatresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_defaultopenheatresistance(::pulse::cdm::bind::ScalarHeatResistanceData* defaultopenheatresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenheatresistance_);
  }
  if (defaultopenheatresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultopenheatresistance)->GetArena();
    if (message_arena != submessage_arena) {
      defaultopenheatresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultopenheatresistance, submessage_arena);
    }
    
  } else {
    
  }
  defaultopenheatresistance_ = defaultopenheatresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.DefaultOpenHeatResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineClosedResistance = 8;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_machineclosedresistance() const {
  return this != internal_default_instance() && machineclosedresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_machineclosedresistance() const {
  return _internal_has_machineclosedresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_machineclosedresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = machineclosedresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::machineclosedresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineClosedResistance)
  return _internal_machineclosedresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_machineclosedresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineclosedresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineclosedresistance_);
  }
  machineclosedresistance_ = machineclosedresistance;
  if (machineclosedresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineClosedResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_machineclosedresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = machineclosedresistance_;
  machineclosedresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_machineclosedresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineClosedResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = machineclosedresistance_;
  machineclosedresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_machineclosedresistance() {
  
  if (machineclosedresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    machineclosedresistance_ = p;
  }
  return machineclosedresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_machineclosedresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineClosedResistance)
  return _internal_mutable_machineclosedresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_machineclosedresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineclosedresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineclosedresistance_);
  }
  if (machineclosedresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineclosedresistance)->GetArena();
    if (message_arena != submessage_arena) {
      machineclosedresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machineclosedresistance, submessage_arena);
    }
    
  } else {
    
  }
  machineclosedresistance_ = machineclosedresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineClosedResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData MachineOpenResistance = 9;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_machineopenresistance() const {
  return this != internal_default_instance() && machineopenresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_machineopenresistance() const {
  return _internal_has_machineopenresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_machineopenresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = machineopenresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::machineopenresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineOpenResistance)
  return _internal_machineopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_machineopenresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineopenresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineopenresistance_);
  }
  machineopenresistance_ = machineopenresistance;
  if (machineopenresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineOpenResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_machineopenresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = machineopenresistance_;
  machineopenresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_machineopenresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineOpenResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = machineopenresistance_;
  machineopenresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_machineopenresistance() {
  
  if (machineopenresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    machineopenresistance_ = p;
  }
  return machineopenresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_machineopenresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineOpenResistance)
  return _internal_mutable_machineopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_machineopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* machineopenresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineopenresistance_);
  }
  if (machineopenresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineopenresistance)->GetArena();
    if (message_arena != submessage_arena) {
      machineopenresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machineopenresistance, submessage_arena);
    }
    
  } else {
    
  }
  machineopenresistance_ = machineopenresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.MachineOpenResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryClosedResistance = 10;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_respiratoryclosedresistance() const {
  return this != internal_default_instance() && respiratoryclosedresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_respiratoryclosedresistance() const {
  return _internal_has_respiratoryclosedresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_respiratoryclosedresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = respiratoryclosedresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::respiratoryclosedresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryClosedResistance)
  return _internal_respiratoryclosedresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_respiratoryclosedresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryclosedresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryclosedresistance_);
  }
  respiratoryclosedresistance_ = respiratoryclosedresistance;
  if (respiratoryclosedresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryClosedResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_respiratoryclosedresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = respiratoryclosedresistance_;
  respiratoryclosedresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_respiratoryclosedresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryClosedResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = respiratoryclosedresistance_;
  respiratoryclosedresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_respiratoryclosedresistance() {
  
  if (respiratoryclosedresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    respiratoryclosedresistance_ = p;
  }
  return respiratoryclosedresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_respiratoryclosedresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryClosedResistance)
  return _internal_mutable_respiratoryclosedresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_respiratoryclosedresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryclosedresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryclosedresistance_);
  }
  if (respiratoryclosedresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryclosedresistance)->GetArena();
    if (message_arena != submessage_arena) {
      respiratoryclosedresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryclosedresistance, submessage_arena);
    }
    
  } else {
    
  }
  respiratoryclosedresistance_ = respiratoryclosedresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryClosedResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData RespiratoryOpenResistance = 11;
inline bool ConfigurationData_CircuitConfigurationData::_internal_has_respiratoryopenresistance() const {
  return this != internal_default_instance() && respiratoryopenresistance_ != nullptr;
}
inline bool ConfigurationData_CircuitConfigurationData::has_respiratoryopenresistance() const {
  return _internal_has_respiratoryopenresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::_internal_respiratoryopenresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = respiratoryopenresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_CircuitConfigurationData::respiratoryopenresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryOpenResistance)
  return _internal_respiratoryopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::unsafe_arena_set_allocated_respiratoryopenresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryopenresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryopenresistance_);
  }
  respiratoryopenresistance_ = respiratoryopenresistance;
  if (respiratoryopenresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryOpenResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::release_respiratoryopenresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = respiratoryopenresistance_;
  respiratoryopenresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::unsafe_arena_release_respiratoryopenresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryOpenResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = respiratoryopenresistance_;
  respiratoryopenresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::_internal_mutable_respiratoryopenresistance() {
  
  if (respiratoryopenresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    respiratoryopenresistance_ = p;
  }
  return respiratoryopenresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_CircuitConfigurationData::mutable_respiratoryopenresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryOpenResistance)
  return _internal_mutable_respiratoryopenresistance();
}
inline void ConfigurationData_CircuitConfigurationData::set_allocated_respiratoryopenresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* respiratoryopenresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryopenresistance_);
  }
  if (respiratoryopenresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryopenresistance)->GetArena();
    if (message_arena != submessage_arena) {
      respiratoryopenresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryopenresistance, submessage_arena);
    }
    
  } else {
    
  }
  respiratoryopenresistance_ = respiratoryopenresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfigurationData.RespiratoryOpenResistance)
}

// -------------------------------------------------------------------

// ConfigurationData_ConstantsConfigurationData

// .pulse.cdm.bind.ScalarData OxygenMetabolicConstant = 1;
inline bool ConfigurationData_ConstantsConfigurationData::_internal_has_oxygenmetabolicconstant() const {
  return this != internal_default_instance() && oxygenmetabolicconstant_ != nullptr;
}
inline bool ConfigurationData_ConstantsConfigurationData::has_oxygenmetabolicconstant() const {
  return _internal_has_oxygenmetabolicconstant();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_ConstantsConfigurationData::_internal_oxygenmetabolicconstant() const {
  const ::pulse::cdm::bind::ScalarData* p = oxygenmetabolicconstant_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_ConstantsConfigurationData::oxygenmetabolicconstant() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.OxygenMetabolicConstant)
  return _internal_oxygenmetabolicconstant();
}
inline void ConfigurationData_ConstantsConfigurationData::unsafe_arena_set_allocated_oxygenmetabolicconstant(
    ::pulse::cdm::bind::ScalarData* oxygenmetabolicconstant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenmetabolicconstant_);
  }
  oxygenmetabolicconstant_ = oxygenmetabolicconstant;
  if (oxygenmetabolicconstant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.OxygenMetabolicConstant)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_ConstantsConfigurationData::release_oxygenmetabolicconstant() {
  
  ::pulse::cdm::bind::ScalarData* temp = oxygenmetabolicconstant_;
  oxygenmetabolicconstant_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_ConstantsConfigurationData::unsafe_arena_release_oxygenmetabolicconstant() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.OxygenMetabolicConstant)
  
  ::pulse::cdm::bind::ScalarData* temp = oxygenmetabolicconstant_;
  oxygenmetabolicconstant_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_ConstantsConfigurationData::_internal_mutable_oxygenmetabolicconstant() {
  
  if (oxygenmetabolicconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    oxygenmetabolicconstant_ = p;
  }
  return oxygenmetabolicconstant_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_ConstantsConfigurationData::mutable_oxygenmetabolicconstant() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.OxygenMetabolicConstant)
  return _internal_mutable_oxygenmetabolicconstant();
}
inline void ConfigurationData_ConstantsConfigurationData::set_allocated_oxygenmetabolicconstant(::pulse::cdm::bind::ScalarData* oxygenmetabolicconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenmetabolicconstant_);
  }
  if (oxygenmetabolicconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenmetabolicconstant)->GetArena();
    if (message_arena != submessage_arena) {
      oxygenmetabolicconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenmetabolicconstant, submessage_arena);
    }
    
  } else {
    
  }
  oxygenmetabolicconstant_ = oxygenmetabolicconstant;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.OxygenMetabolicConstant)
}

// .pulse.cdm.bind.ScalarPowerPerAreaTemperatureToTheFourthData StefanBoltzmann = 2;
inline bool ConfigurationData_ConstantsConfigurationData::_internal_has_stefanboltzmann() const {
  return this != internal_default_instance() && stefanboltzmann_ != nullptr;
}
inline bool ConfigurationData_ConstantsConfigurationData::has_stefanboltzmann() const {
  return _internal_has_stefanboltzmann();
}
inline const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData& ConfigurationData_ConstantsConfigurationData::_internal_stefanboltzmann() const {
  const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* p = stefanboltzmann_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData&>(
      ::pulse::cdm::bind::_ScalarPowerPerAreaTemperatureToTheFourthData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData& ConfigurationData_ConstantsConfigurationData::stefanboltzmann() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.StefanBoltzmann)
  return _internal_stefanboltzmann();
}
inline void ConfigurationData_ConstantsConfigurationData::unsafe_arena_set_allocated_stefanboltzmann(
    ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* stefanboltzmann) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stefanboltzmann_);
  }
  stefanboltzmann_ = stefanboltzmann;
  if (stefanboltzmann) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.StefanBoltzmann)
}
inline ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* ConfigurationData_ConstantsConfigurationData::release_stefanboltzmann() {
  
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* temp = stefanboltzmann_;
  stefanboltzmann_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* ConfigurationData_ConstantsConfigurationData::unsafe_arena_release_stefanboltzmann() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.StefanBoltzmann)
  
  ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* temp = stefanboltzmann_;
  stefanboltzmann_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* ConfigurationData_ConstantsConfigurationData::_internal_mutable_stefanboltzmann() {
  
  if (stefanboltzmann_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData>(GetArena());
    stefanboltzmann_ = p;
  }
  return stefanboltzmann_;
}
inline ::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* ConfigurationData_ConstantsConfigurationData::mutable_stefanboltzmann() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.StefanBoltzmann)
  return _internal_mutable_stefanboltzmann();
}
inline void ConfigurationData_ConstantsConfigurationData::set_allocated_stefanboltzmann(::pulse::cdm::bind::ScalarPowerPerAreaTemperatureToTheFourthData* stefanboltzmann) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stefanboltzmann_);
  }
  if (stefanboltzmann) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stefanboltzmann)->GetArena();
    if (message_arena != submessage_arena) {
      stefanboltzmann = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stefanboltzmann, submessage_arena);
    }
    
  } else {
    
  }
  stefanboltzmann_ = stefanboltzmann;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.StefanBoltzmann)
}

// .pulse.cdm.bind.ScalarHeatCapacitancePerAmountData UniversalGasConstant = 3;
inline bool ConfigurationData_ConstantsConfigurationData::_internal_has_universalgasconstant() const {
  return this != internal_default_instance() && universalgasconstant_ != nullptr;
}
inline bool ConfigurationData_ConstantsConfigurationData::has_universalgasconstant() const {
  return _internal_has_universalgasconstant();
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData& ConfigurationData_ConstantsConfigurationData::_internal_universalgasconstant() const {
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* p = universalgasconstant_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData&>(
      ::pulse::cdm::bind::_ScalarHeatCapacitancePerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData& ConfigurationData_ConstantsConfigurationData::universalgasconstant() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.UniversalGasConstant)
  return _internal_universalgasconstant();
}
inline void ConfigurationData_ConstantsConfigurationData::unsafe_arena_set_allocated_universalgasconstant(
    ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* universalgasconstant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(universalgasconstant_);
  }
  universalgasconstant_ = universalgasconstant;
  if (universalgasconstant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.UniversalGasConstant)
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* ConfigurationData_ConstantsConfigurationData::release_universalgasconstant() {
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* temp = universalgasconstant_;
  universalgasconstant_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* ConfigurationData_ConstantsConfigurationData::unsafe_arena_release_universalgasconstant() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.UniversalGasConstant)
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* temp = universalgasconstant_;
  universalgasconstant_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* ConfigurationData_ConstantsConfigurationData::_internal_mutable_universalgasconstant() {
  
  if (universalgasconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData>(GetArena());
    universalgasconstant_ = p;
  }
  return universalgasconstant_;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* ConfigurationData_ConstantsConfigurationData::mutable_universalgasconstant() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.UniversalGasConstant)
  return _internal_mutable_universalgasconstant();
}
inline void ConfigurationData_ConstantsConfigurationData::set_allocated_universalgasconstant(::pulse::cdm::bind::ScalarHeatCapacitancePerAmountData* universalgasconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(universalgasconstant_);
  }
  if (universalgasconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(universalgasconstant)->GetArena();
    if (message_arena != submessage_arena) {
      universalgasconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, universalgasconstant, submessage_arena);
    }
    
  } else {
    
  }
  universalgasconstant_ = universalgasconstant;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData.UniversalGasConstant)
}

// -------------------------------------------------------------------

// ConfigurationData_DrugsConfigurationData

// .pulse.cdm.bind.eSwitch PDModel = 1;
inline void ConfigurationData_DrugsConfigurationData::clear_pdmodel() {
  pdmodel_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_DrugsConfigurationData::_internal_pdmodel() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(pdmodel_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_DrugsConfigurationData::pdmodel() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData.PDModel)
  return _internal_pdmodel();
}
inline void ConfigurationData_DrugsConfigurationData::_internal_set_pdmodel(::pulse::cdm::bind::eSwitch value) {
  
  pdmodel_ = value;
}
inline void ConfigurationData_DrugsConfigurationData::set_pdmodel(::pulse::cdm::bind::eSwitch value) {
  _internal_set_pdmodel(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.DrugsConfigurationData.PDModel)
}

// -------------------------------------------------------------------

// ConfigurationData_ECGConfigurationData

// string InterpolatorFileName = 1;
inline bool ConfigurationData_ECGConfigurationData::_internal_has_interpolatorfilename() const {
  return ElectroCardioGramInterpolator_case() == kInterpolatorFileName;
}
inline void ConfigurationData_ECGConfigurationData::set_has_interpolatorfilename() {
  _oneof_case_[0] = kInterpolatorFileName;
}
inline void ConfigurationData_ECGConfigurationData::clear_interpolatorfilename() {
  if (_internal_has_interpolatorfilename()) {
    ElectroCardioGramInterpolator_.interpolatorfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_ElectroCardioGramInterpolator();
  }
}
inline const std::string& ConfigurationData_ECGConfigurationData::interpolatorfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
  return _internal_interpolatorfilename();
}
inline void ConfigurationData_ECGConfigurationData::set_interpolatorfilename(const std::string& value) {
  _internal_set_interpolatorfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
}
inline std::string* ConfigurationData_ECGConfigurationData::mutable_interpolatorfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
  return _internal_mutable_interpolatorfilename();
}
inline const std::string& ConfigurationData_ECGConfigurationData::_internal_interpolatorfilename() const {
  if (_internal_has_interpolatorfilename()) {
    return ElectroCardioGramInterpolator_.interpolatorfilename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigurationData_ECGConfigurationData::_internal_set_interpolatorfilename(const std::string& value) {
  if (!_internal_has_interpolatorfilename()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElectroCardioGramInterpolator_.interpolatorfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationData_ECGConfigurationData::set_interpolatorfilename(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
  if (!_internal_has_interpolatorfilename()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElectroCardioGramInterpolator_.interpolatorfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
}
inline void ConfigurationData_ECGConfigurationData::set_interpolatorfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_interpolatorfilename()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElectroCardioGramInterpolator_.interpolatorfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
}
inline void ConfigurationData_ECGConfigurationData::set_interpolatorfilename(const char* value,
                             size_t size) {
  if (!_internal_has_interpolatorfilename()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ElectroCardioGramInterpolator_.interpolatorfilename_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
}
inline std::string* ConfigurationData_ECGConfigurationData::_internal_mutable_interpolatorfilename() {
  if (!_internal_has_interpolatorfilename()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ElectroCardioGramInterpolator_.interpolatorfilename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationData_ECGConfigurationData::release_interpolatorfilename() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
  if (_internal_has_interpolatorfilename()) {
    clear_has_ElectroCardioGramInterpolator();
    return ElectroCardioGramInterpolator_.interpolatorfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_ECGConfigurationData::set_allocated_interpolatorfilename(std::string* interpolatorfilename) {
  if (has_ElectroCardioGramInterpolator()) {
    clear_ElectroCardioGramInterpolator();
  }
  if (interpolatorfilename != nullptr) {
    set_has_interpolatorfilename();
    ElectroCardioGramInterpolator_.interpolatorfilename_.UnsafeSetDefault(interpolatorfilename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(interpolatorfilename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.InterpolatorFileName)
}

// .pulse.cdm.bind.ElectroCardioGramWaveformListData Interpolator = 2;
inline bool ConfigurationData_ECGConfigurationData::_internal_has_interpolator() const {
  return ElectroCardioGramInterpolator_case() == kInterpolator;
}
inline bool ConfigurationData_ECGConfigurationData::has_interpolator() const {
  return _internal_has_interpolator();
}
inline void ConfigurationData_ECGConfigurationData::set_has_interpolator() {
  _oneof_case_[0] = kInterpolator;
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ConfigurationData_ECGConfigurationData::release_interpolator() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
  if (_internal_has_interpolator()) {
    clear_has_ElectroCardioGramInterpolator();
      ::pulse::cdm::bind::ElectroCardioGramWaveformListData* temp = ElectroCardioGramInterpolator_.interpolator_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ElectroCardioGramInterpolator_.interpolator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& ConfigurationData_ECGConfigurationData::_internal_interpolator() const {
  return _internal_has_interpolator()
      ? *ElectroCardioGramInterpolator_.interpolator_
      : reinterpret_cast< ::pulse::cdm::bind::ElectroCardioGramWaveformListData&>(::pulse::cdm::bind::_ElectroCardioGramWaveformListData_default_instance_);
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformListData& ConfigurationData_ECGConfigurationData::interpolator() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
  return _internal_interpolator();
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ConfigurationData_ECGConfigurationData::unsafe_arena_release_interpolator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
  if (_internal_has_interpolator()) {
    clear_has_ElectroCardioGramInterpolator();
    ::pulse::cdm::bind::ElectroCardioGramWaveformListData* temp = ElectroCardioGramInterpolator_.interpolator_;
    ElectroCardioGramInterpolator_.interpolator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_ECGConfigurationData::unsafe_arena_set_allocated_interpolator(::pulse::cdm::bind::ElectroCardioGramWaveformListData* interpolator) {
  clear_ElectroCardioGramInterpolator();
  if (interpolator) {
    set_has_interpolator();
    ElectroCardioGramInterpolator_.interpolator_ = interpolator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ConfigurationData_ECGConfigurationData::_internal_mutable_interpolator() {
  if (!_internal_has_interpolator()) {
    clear_ElectroCardioGramInterpolator();
    set_has_interpolator();
    ElectroCardioGramInterpolator_.interpolator_ = CreateMaybeMessage< ::pulse::cdm::bind::ElectroCardioGramWaveformListData >(GetArena());
  }
  return ElectroCardioGramInterpolator_.interpolator_;
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformListData* ConfigurationData_ECGConfigurationData::mutable_interpolator() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ECGConfigurationData.Interpolator)
  return _internal_mutable_interpolator();
}

inline bool ConfigurationData_ECGConfigurationData::has_ElectroCardioGramInterpolator() const {
  return ElectroCardioGramInterpolator_case() != ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET;
}
inline void ConfigurationData_ECGConfigurationData::clear_has_ElectroCardioGramInterpolator() {
  _oneof_case_[0] = ELECTROCARDIOGRAMINTERPOLATOR_NOT_SET;
}
inline ConfigurationData_ECGConfigurationData::ElectroCardioGramInterpolatorCase ConfigurationData_ECGConfigurationData::ElectroCardioGramInterpolator_case() const {
  return ConfigurationData_ECGConfigurationData::ElectroCardioGramInterpolatorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigurationData_EnergyConfigurationData

// .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BodySpecificHeat = 1;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_bodyspecificheat() const {
  return this != internal_default_instance() && bodyspecificheat_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_bodyspecificheat() const {
  return _internal_has_bodyspecificheat();
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnergyConfigurationData::_internal_bodyspecificheat() const {
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* p = bodyspecificheat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&>(
      ::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnergyConfigurationData::bodyspecificheat() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.BodySpecificHeat)
  return _internal_bodyspecificheat();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_bodyspecificheat(
    ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bodyspecificheat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyspecificheat_);
  }
  bodyspecificheat_ = bodyspecificheat;
  if (bodyspecificheat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.BodySpecificHeat)
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::release_bodyspecificheat() {
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = bodyspecificheat_;
  bodyspecificheat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_bodyspecificheat() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.BodySpecificHeat)
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = bodyspecificheat_;
  bodyspecificheat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::_internal_mutable_bodyspecificheat() {
  
  if (bodyspecificheat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerMassData>(GetArena());
    bodyspecificheat_ = p;
  }
  return bodyspecificheat_;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::mutable_bodyspecificheat() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.BodySpecificHeat)
  return _internal_mutable_bodyspecificheat();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_bodyspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bodyspecificheat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyspecificheat_);
  }
  if (bodyspecificheat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodyspecificheat)->GetArena();
    if (message_arena != submessage_arena) {
      bodyspecificheat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodyspecificheat, submessage_arena);
    }
    
  } else {
    
  }
  bodyspecificheat_ = bodyspecificheat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.BodySpecificHeat)
}

// .pulse.cdm.bind.ScalarData CarbonDioxideProductionFromOxygenConsumptionConstant = 2;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_carbondioxideproductionfromoxygenconsumptionconstant() const {
  return this != internal_default_instance() && carbondioxideproductionfromoxygenconsumptionconstant_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_carbondioxideproductionfromoxygenconsumptionconstant() const {
  return _internal_has_carbondioxideproductionfromoxygenconsumptionconstant();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_EnergyConfigurationData::_internal_carbondioxideproductionfromoxygenconsumptionconstant() const {
  const ::pulse::cdm::bind::ScalarData* p = carbondioxideproductionfromoxygenconsumptionconstant_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_EnergyConfigurationData::carbondioxideproductionfromoxygenconsumptionconstant() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CarbonDioxideProductionFromOxygenConsumptionConstant)
  return _internal_carbondioxideproductionfromoxygenconsumptionconstant();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_carbondioxideproductionfromoxygenconsumptionconstant(
    ::pulse::cdm::bind::ScalarData* carbondioxideproductionfromoxygenconsumptionconstant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionfromoxygenconsumptionconstant_);
  }
  carbondioxideproductionfromoxygenconsumptionconstant_ = carbondioxideproductionfromoxygenconsumptionconstant;
  if (carbondioxideproductionfromoxygenconsumptionconstant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CarbonDioxideProductionFromOxygenConsumptionConstant)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_EnergyConfigurationData::release_carbondioxideproductionfromoxygenconsumptionconstant() {
  
  ::pulse::cdm::bind::ScalarData* temp = carbondioxideproductionfromoxygenconsumptionconstant_;
  carbondioxideproductionfromoxygenconsumptionconstant_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_carbondioxideproductionfromoxygenconsumptionconstant() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CarbonDioxideProductionFromOxygenConsumptionConstant)
  
  ::pulse::cdm::bind::ScalarData* temp = carbondioxideproductionfromoxygenconsumptionconstant_;
  carbondioxideproductionfromoxygenconsumptionconstant_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_EnergyConfigurationData::_internal_mutable_carbondioxideproductionfromoxygenconsumptionconstant() {
  
  if (carbondioxideproductionfromoxygenconsumptionconstant_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    carbondioxideproductionfromoxygenconsumptionconstant_ = p;
  }
  return carbondioxideproductionfromoxygenconsumptionconstant_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_EnergyConfigurationData::mutable_carbondioxideproductionfromoxygenconsumptionconstant() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CarbonDioxideProductionFromOxygenConsumptionConstant)
  return _internal_mutable_carbondioxideproductionfromoxygenconsumptionconstant();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_carbondioxideproductionfromoxygenconsumptionconstant(::pulse::cdm::bind::ScalarData* carbondioxideproductionfromoxygenconsumptionconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionfromoxygenconsumptionconstant_);
  }
  if (carbondioxideproductionfromoxygenconsumptionconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionfromoxygenconsumptionconstant)->GetArena();
    if (message_arena != submessage_arena) {
      carbondioxideproductionfromoxygenconsumptionconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbondioxideproductionfromoxygenconsumptionconstant, submessage_arena);
    }
    
  } else {
    
  }
  carbondioxideproductionfromoxygenconsumptionconstant_ = carbondioxideproductionfromoxygenconsumptionconstant;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CarbonDioxideProductionFromOxygenConsumptionConstant)
}

// .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureLow = 3;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_coretemperaturelow() const {
  return this != internal_default_instance() && coretemperaturelow_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_coretemperaturelow() const {
  return _internal_has_coretemperaturelow();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::_internal_coretemperaturelow() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = coretemperaturelow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::coretemperaturelow() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureLow)
  return _internal_coretemperaturelow();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_coretemperaturelow(
    ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturelow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturelow_);
  }
  coretemperaturelow_ = coretemperaturelow;
  if (coretemperaturelow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureLow)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::release_coretemperaturelow() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperaturelow_;
  coretemperaturelow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_coretemperaturelow() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureLow)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperaturelow_;
  coretemperaturelow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::_internal_mutable_coretemperaturelow() {
  
  if (coretemperaturelow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    coretemperaturelow_ = p;
  }
  return coretemperaturelow_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::mutable_coretemperaturelow() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureLow)
  return _internal_mutable_coretemperaturelow();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_coretemperaturelow(::pulse::cdm::bind::ScalarTemperatureData* coretemperaturelow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturelow_);
  }
  if (coretemperaturelow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturelow)->GetArena();
    if (message_arena != submessage_arena) {
      coretemperaturelow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coretemperaturelow, submessage_arena);
    }
    
  } else {
    
  }
  coretemperaturelow_ = coretemperaturelow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureLow)
}

// .pulse.cdm.bind.ScalarTemperatureData CoreTemperatureHigh = 4;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_coretemperaturehigh() const {
  return this != internal_default_instance() && coretemperaturehigh_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_coretemperaturehigh() const {
  return _internal_has_coretemperaturehigh();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::_internal_coretemperaturehigh() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = coretemperaturehigh_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::coretemperaturehigh() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureHigh)
  return _internal_coretemperaturehigh();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_coretemperaturehigh(
    ::pulse::cdm::bind::ScalarTemperatureData* coretemperaturehigh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturehigh_);
  }
  coretemperaturehigh_ = coretemperaturehigh;
  if (coretemperaturehigh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureHigh)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::release_coretemperaturehigh() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperaturehigh_;
  coretemperaturehigh_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_coretemperaturehigh() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureHigh)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperaturehigh_;
  coretemperaturehigh_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::_internal_mutable_coretemperaturehigh() {
  
  if (coretemperaturehigh_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    coretemperaturehigh_ = p;
  }
  return coretemperaturehigh_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::mutable_coretemperaturehigh() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureHigh)
  return _internal_mutable_coretemperaturehigh();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_coretemperaturehigh(::pulse::cdm::bind::ScalarTemperatureData* coretemperaturehigh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturehigh_);
  }
  if (coretemperaturehigh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperaturehigh)->GetArena();
    if (message_arena != submessage_arena) {
      coretemperaturehigh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coretemperaturehigh, submessage_arena);
    }
    
  } else {
    
  }
  coretemperaturehigh_ = coretemperaturehigh;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.CoreTemperatureHigh)
}

// .pulse.cdm.bind.ScalarTemperatureData DeltaCoreTemperatureLow = 5;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_deltacoretemperaturelow() const {
  return this != internal_default_instance() && deltacoretemperaturelow_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_deltacoretemperaturelow() const {
  return _internal_has_deltacoretemperaturelow();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::_internal_deltacoretemperaturelow() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = deltacoretemperaturelow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& ConfigurationData_EnergyConfigurationData::deltacoretemperaturelow() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.DeltaCoreTemperatureLow)
  return _internal_deltacoretemperaturelow();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_deltacoretemperaturelow(
    ::pulse::cdm::bind::ScalarTemperatureData* deltacoretemperaturelow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deltacoretemperaturelow_);
  }
  deltacoretemperaturelow_ = deltacoretemperaturelow;
  if (deltacoretemperaturelow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.DeltaCoreTemperatureLow)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::release_deltacoretemperaturelow() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = deltacoretemperaturelow_;
  deltacoretemperaturelow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_deltacoretemperaturelow() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.DeltaCoreTemperatureLow)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = deltacoretemperaturelow_;
  deltacoretemperaturelow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::_internal_mutable_deltacoretemperaturelow() {
  
  if (deltacoretemperaturelow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    deltacoretemperaturelow_ = p;
  }
  return deltacoretemperaturelow_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* ConfigurationData_EnergyConfigurationData::mutable_deltacoretemperaturelow() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.DeltaCoreTemperatureLow)
  return _internal_mutable_deltacoretemperaturelow();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_deltacoretemperaturelow(::pulse::cdm::bind::ScalarTemperatureData* deltacoretemperaturelow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deltacoretemperaturelow_);
  }
  if (deltacoretemperaturelow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deltacoretemperaturelow)->GetArena();
    if (message_arena != submessage_arena) {
      deltacoretemperaturelow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deltacoretemperaturelow, submessage_arena);
    }
    
  } else {
    
  }
  deltacoretemperaturelow_ = deltacoretemperaturelow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.DeltaCoreTemperatureLow)
}

// .pulse.cdm.bind.ScalarEnergyPerAmountData EnergyPerATP = 6;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_energyperatp() const {
  return this != internal_default_instance() && energyperatp_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_energyperatp() const {
  return _internal_has_energyperatp();
}
inline const ::pulse::cdm::bind::ScalarEnergyPerAmountData& ConfigurationData_EnergyConfigurationData::_internal_energyperatp() const {
  const ::pulse::cdm::bind::ScalarEnergyPerAmountData* p = energyperatp_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyPerAmountData&>(
      ::pulse::cdm::bind::_ScalarEnergyPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyPerAmountData& ConfigurationData_EnergyConfigurationData::energyperatp() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.EnergyPerATP)
  return _internal_energyperatp();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_energyperatp(
    ::pulse::cdm::bind::ScalarEnergyPerAmountData* energyperatp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(energyperatp_);
  }
  energyperatp_ = energyperatp;
  if (energyperatp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.EnergyPerATP)
}
inline ::pulse::cdm::bind::ScalarEnergyPerAmountData* ConfigurationData_EnergyConfigurationData::release_energyperatp() {
  
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* temp = energyperatp_;
  energyperatp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyPerAmountData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_energyperatp() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.EnergyPerATP)
  
  ::pulse::cdm::bind::ScalarEnergyPerAmountData* temp = energyperatp_;
  energyperatp_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyPerAmountData* ConfigurationData_EnergyConfigurationData::_internal_mutable_energyperatp() {
  
  if (energyperatp_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyPerAmountData>(GetArena());
    energyperatp_ = p;
  }
  return energyperatp_;
}
inline ::pulse::cdm::bind::ScalarEnergyPerAmountData* ConfigurationData_EnergyConfigurationData::mutable_energyperatp() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.EnergyPerATP)
  return _internal_mutable_energyperatp();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_energyperatp(::pulse::cdm::bind::ScalarEnergyPerAmountData* energyperatp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(energyperatp_);
  }
  if (energyperatp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(energyperatp)->GetArena();
    if (message_arena != submessage_arena) {
      energyperatp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, energyperatp, submessage_arena);
    }
    
  } else {
    
  }
  energyperatp_ = energyperatp;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.EnergyPerATP)
}

// .pulse.cdm.bind.ScalarHeatConductanceData SweatHeatTransfer = 7;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_sweatheattransfer() const {
  return this != internal_default_instance() && sweatheattransfer_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_sweatheattransfer() const {
  return _internal_has_sweatheattransfer();
}
inline const ::pulse::cdm::bind::ScalarHeatConductanceData& ConfigurationData_EnergyConfigurationData::_internal_sweatheattransfer() const {
  const ::pulse::cdm::bind::ScalarHeatConductanceData* p = sweatheattransfer_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatConductanceData&>(
      ::pulse::cdm::bind::_ScalarHeatConductanceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatConductanceData& ConfigurationData_EnergyConfigurationData::sweatheattransfer() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.SweatHeatTransfer)
  return _internal_sweatheattransfer();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_sweatheattransfer(
    ::pulse::cdm::bind::ScalarHeatConductanceData* sweatheattransfer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatheattransfer_);
  }
  sweatheattransfer_ = sweatheattransfer;
  if (sweatheattransfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.SweatHeatTransfer)
}
inline ::pulse::cdm::bind::ScalarHeatConductanceData* ConfigurationData_EnergyConfigurationData::release_sweatheattransfer() {
  
  ::pulse::cdm::bind::ScalarHeatConductanceData* temp = sweatheattransfer_;
  sweatheattransfer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductanceData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_sweatheattransfer() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.SweatHeatTransfer)
  
  ::pulse::cdm::bind::ScalarHeatConductanceData* temp = sweatheattransfer_;
  sweatheattransfer_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductanceData* ConfigurationData_EnergyConfigurationData::_internal_mutable_sweatheattransfer() {
  
  if (sweatheattransfer_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductanceData>(GetArena());
    sweatheattransfer_ = p;
  }
  return sweatheattransfer_;
}
inline ::pulse::cdm::bind::ScalarHeatConductanceData* ConfigurationData_EnergyConfigurationData::mutable_sweatheattransfer() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.SweatHeatTransfer)
  return _internal_mutable_sweatheattransfer();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_sweatheattransfer(::pulse::cdm::bind::ScalarHeatConductanceData* sweatheattransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatheattransfer_);
  }
  if (sweatheattransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatheattransfer)->GetArena();
    if (message_arena != submessage_arena) {
      sweatheattransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sweatheattransfer, submessage_arena);
    }
    
  } else {
    
  }
  sweatheattransfer_ = sweatheattransfer;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.SweatHeatTransfer)
}

// .pulse.cdm.bind.ScalarEnergyPerMassData VaporizationEnergy = 8;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_vaporizationenergy() const {
  return this != internal_default_instance() && vaporizationenergy_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_vaporizationenergy() const {
  return _internal_has_vaporizationenergy();
}
inline const ::pulse::cdm::bind::ScalarEnergyPerMassData& ConfigurationData_EnergyConfigurationData::_internal_vaporizationenergy() const {
  const ::pulse::cdm::bind::ScalarEnergyPerMassData* p = vaporizationenergy_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyPerMassData&>(
      ::pulse::cdm::bind::_ScalarEnergyPerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyPerMassData& ConfigurationData_EnergyConfigurationData::vaporizationenergy() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporizationEnergy)
  return _internal_vaporizationenergy();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_vaporizationenergy(
    ::pulse::cdm::bind::ScalarEnergyPerMassData* vaporizationenergy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporizationenergy_);
  }
  vaporizationenergy_ = vaporizationenergy;
  if (vaporizationenergy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporizationEnergy)
}
inline ::pulse::cdm::bind::ScalarEnergyPerMassData* ConfigurationData_EnergyConfigurationData::release_vaporizationenergy() {
  
  ::pulse::cdm::bind::ScalarEnergyPerMassData* temp = vaporizationenergy_;
  vaporizationenergy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyPerMassData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_vaporizationenergy() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporizationEnergy)
  
  ::pulse::cdm::bind::ScalarEnergyPerMassData* temp = vaporizationenergy_;
  vaporizationenergy_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyPerMassData* ConfigurationData_EnergyConfigurationData::_internal_mutable_vaporizationenergy() {
  
  if (vaporizationenergy_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyPerMassData>(GetArena());
    vaporizationenergy_ = p;
  }
  return vaporizationenergy_;
}
inline ::pulse::cdm::bind::ScalarEnergyPerMassData* ConfigurationData_EnergyConfigurationData::mutable_vaporizationenergy() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporizationEnergy)
  return _internal_mutable_vaporizationenergy();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_vaporizationenergy(::pulse::cdm::bind::ScalarEnergyPerMassData* vaporizationenergy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporizationenergy_);
  }
  if (vaporizationenergy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporizationenergy)->GetArena();
    if (message_arena != submessage_arena) {
      vaporizationenergy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vaporizationenergy, submessage_arena);
    }
    
  } else {
    
  }
  vaporizationenergy_ = vaporizationenergy;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporizationEnergy)
}

// .pulse.cdm.bind.ScalarHeatCapacitancePerMassData VaporSpecificHeat = 9;
inline bool ConfigurationData_EnergyConfigurationData::_internal_has_vaporspecificheat() const {
  return this != internal_default_instance() && vaporspecificheat_ != nullptr;
}
inline bool ConfigurationData_EnergyConfigurationData::has_vaporspecificheat() const {
  return _internal_has_vaporspecificheat();
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnergyConfigurationData::_internal_vaporspecificheat() const {
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* p = vaporspecificheat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&>(
      ::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnergyConfigurationData::vaporspecificheat() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporSpecificHeat)
  return _internal_vaporspecificheat();
}
inline void ConfigurationData_EnergyConfigurationData::unsafe_arena_set_allocated_vaporspecificheat(
    ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* vaporspecificheat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporspecificheat_);
  }
  vaporspecificheat_ = vaporspecificheat;
  if (vaporspecificheat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporSpecificHeat)
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::release_vaporspecificheat() {
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = vaporspecificheat_;
  vaporspecificheat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::unsafe_arena_release_vaporspecificheat() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporSpecificHeat)
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = vaporspecificheat_;
  vaporspecificheat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::_internal_mutable_vaporspecificheat() {
  
  if (vaporspecificheat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerMassData>(GetArena());
    vaporspecificheat_ = p;
  }
  return vaporspecificheat_;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnergyConfigurationData::mutable_vaporspecificheat() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporSpecificHeat)
  return _internal_mutable_vaporspecificheat();
}
inline void ConfigurationData_EnergyConfigurationData::set_allocated_vaporspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* vaporspecificheat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporspecificheat_);
  }
  if (vaporspecificheat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vaporspecificheat)->GetArena();
    if (message_arena != submessage_arena) {
      vaporspecificheat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vaporspecificheat, submessage_arena);
    }
    
  } else {
    
  }
  vaporspecificheat_ = vaporspecificheat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfigurationData.VaporSpecificHeat)
}

// -------------------------------------------------------------------

// ConfigurationData_EnvironmentConfigurationData

// .pulse.cdm.bind.EnvironmentalConditionsData InitialConditions = 1;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_initialconditions() const {
  return Option_case() == kInitialConditions;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_initialconditions() const {
  return _internal_has_initialconditions();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_has_initialconditions() {
  _oneof_case_[0] = kInitialConditions;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ConfigurationData_EnvironmentConfigurationData::release_initialconditions() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
  if (_internal_has_initialconditions()) {
    clear_has_Option();
      ::pulse::cdm::bind::EnvironmentalConditionsData* temp = Option_.initialconditions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.initialconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& ConfigurationData_EnvironmentConfigurationData::_internal_initialconditions() const {
  return _internal_has_initialconditions()
      ? *Option_.initialconditions_
      : reinterpret_cast< ::pulse::cdm::bind::EnvironmentalConditionsData&>(::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& ConfigurationData_EnvironmentConfigurationData::initialconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
  return _internal_initialconditions();
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_initialconditions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
  if (_internal_has_initialconditions()) {
    clear_has_Option();
    ::pulse::cdm::bind::EnvironmentalConditionsData* temp = Option_.initialconditions_;
    Option_.initialconditions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_initialconditions(::pulse::cdm::bind::EnvironmentalConditionsData* initialconditions) {
  clear_Option();
  if (initialconditions) {
    set_has_initialconditions();
    Option_.initialconditions_ = initialconditions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_initialconditions() {
  if (!_internal_has_initialconditions()) {
    clear_Option();
    set_has_initialconditions();
    Option_.initialconditions_ = CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentalConditionsData >(GetArena());
  }
  return Option_.initialconditions_;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* ConfigurationData_EnvironmentConfigurationData::mutable_initialconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditions)
  return _internal_mutable_initialconditions();
}

// string InitialConditionsFile = 2;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_initialconditionsfile() const {
  return Option_case() == kInitialConditionsFile;
}
inline void ConfigurationData_EnvironmentConfigurationData::set_has_initialconditionsfile() {
  _oneof_case_[0] = kInitialConditionsFile;
}
inline void ConfigurationData_EnvironmentConfigurationData::clear_initialconditionsfile() {
  if (_internal_has_initialconditionsfile()) {
    Option_.initialconditionsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& ConfigurationData_EnvironmentConfigurationData::initialconditionsfile() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
  return _internal_initialconditionsfile();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_initialconditionsfile(const std::string& value) {
  _internal_set_initialconditionsfile(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
}
inline std::string* ConfigurationData_EnvironmentConfigurationData::mutable_initialconditionsfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
  return _internal_mutable_initialconditionsfile();
}
inline const std::string& ConfigurationData_EnvironmentConfigurationData::_internal_initialconditionsfile() const {
  if (_internal_has_initialconditionsfile()) {
    return Option_.initialconditionsfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigurationData_EnvironmentConfigurationData::_internal_set_initialconditionsfile(const std::string& value) {
  if (!_internal_has_initialconditionsfile()) {
    clear_Option();
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialconditionsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationData_EnvironmentConfigurationData::set_initialconditionsfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
  if (!_internal_has_initialconditionsfile()) {
    clear_Option();
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialconditionsfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
}
inline void ConfigurationData_EnvironmentConfigurationData::set_initialconditionsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_initialconditionsfile()) {
    clear_Option();
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialconditionsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
}
inline void ConfigurationData_EnvironmentConfigurationData::set_initialconditionsfile(const char* value,
                             size_t size) {
  if (!_internal_has_initialconditionsfile()) {
    clear_Option();
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialconditionsfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
}
inline std::string* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_initialconditionsfile() {
  if (!_internal_has_initialconditionsfile()) {
    clear_Option();
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.initialconditionsfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationData_EnvironmentConfigurationData::release_initialconditionsfile() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
  if (_internal_has_initialconditionsfile()) {
    clear_has_Option();
    return Option_.initialconditionsfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_initialconditionsfile(std::string* initialconditionsfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (initialconditionsfile != nullptr) {
    set_has_initialconditionsfile();
    Option_.initialconditionsfile_.UnsafeSetDefault(initialconditionsfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(initialconditionsfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.InitialConditionsFile)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 3;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_airdensity() const {
  return this != internal_default_instance() && airdensity_ != nullptr;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_airdensity() const {
  return _internal_has_airdensity();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_EnvironmentConfigurationData::_internal_airdensity() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = airdensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_EnvironmentConfigurationData::airdensity() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirDensity)
  return _internal_airdensity();
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_airdensity(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity_);
  }
  airdensity_ = airdensity;
  if (airdensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirDensity)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::release_airdensity() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = airdensity_;
  airdensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_airdensity() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirDensity)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = airdensity_;
  airdensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_airdensity() {
  
  if (airdensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    airdensity_ = p;
  }
  return airdensity_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::mutable_airdensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirDensity)
  return _internal_mutable_airdensity();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_airdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity_);
  }
  if (airdensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity)->GetArena();
    if (message_arena != submessage_arena) {
      airdensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airdensity, submessage_arena);
    }
    
  } else {
    
  }
  airdensity_ = airdensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirDensity)
}

// .pulse.cdm.bind.ScalarHeatCapacitancePerMassData AirSpecificHeat = 4;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_airspecificheat() const {
  return this != internal_default_instance() && airspecificheat_ != nullptr;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_airspecificheat() const {
  return _internal_has_airspecificheat();
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnvironmentConfigurationData::_internal_airspecificheat() const {
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* p = airspecificheat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&>(
      ::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& ConfigurationData_EnvironmentConfigurationData::airspecificheat() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirSpecificHeat)
  return _internal_airspecificheat();
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_airspecificheat(
    ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* airspecificheat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airspecificheat_);
  }
  airspecificheat_ = airspecificheat;
  if (airspecificheat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirSpecificHeat)
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnvironmentConfigurationData::release_airspecificheat() {
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = airspecificheat_;
  airspecificheat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_airspecificheat() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirSpecificHeat)
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = airspecificheat_;
  airspecificheat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_airspecificheat() {
  
  if (airspecificheat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerMassData>(GetArena());
    airspecificheat_ = p;
  }
  return airspecificheat_;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* ConfigurationData_EnvironmentConfigurationData::mutable_airspecificheat() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirSpecificHeat)
  return _internal_mutable_airspecificheat();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_airspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* airspecificheat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(airspecificheat_);
  }
  if (airspecificheat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airspecificheat)->GetArena();
    if (message_arena != submessage_arena) {
      airspecificheat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airspecificheat, submessage_arena);
    }
    
  } else {
    
  }
  airspecificheat_ = airspecificheat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.AirSpecificHeat)
}

// .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfDryAir = 5;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_molarmassofdryair() const {
  return this != internal_default_instance() && molarmassofdryair_ != nullptr;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_molarmassofdryair() const {
  return _internal_has_molarmassofdryair();
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_EnvironmentConfigurationData::_internal_molarmassofdryair() const {
  const ::pulse::cdm::bind::ScalarMassPerAmountData* p = molarmassofdryair_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAmountData&>(
      ::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_EnvironmentConfigurationData::molarmassofdryair() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfDryAir)
  return _internal_molarmassofdryair();
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_molarmassofdryair(
    ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofdryair) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofdryair_);
  }
  molarmassofdryair_ = molarmassofdryair;
  if (molarmassofdryair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfDryAir)
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::release_molarmassofdryair() {
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmassofdryair_;
  molarmassofdryair_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_molarmassofdryair() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfDryAir)
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmassofdryair_;
  molarmassofdryair_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_molarmassofdryair() {
  
  if (molarmassofdryair_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(GetArena());
    molarmassofdryair_ = p;
  }
  return molarmassofdryair_;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::mutable_molarmassofdryair() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfDryAir)
  return _internal_mutable_molarmassofdryair();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_molarmassofdryair(::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofdryair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofdryair_);
  }
  if (molarmassofdryair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofdryair)->GetArena();
    if (message_arena != submessage_arena) {
      molarmassofdryair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, molarmassofdryair, submessage_arena);
    }
    
  } else {
    
  }
  molarmassofdryair_ = molarmassofdryair;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfDryAir)
}

// .pulse.cdm.bind.ScalarMassPerAmountData MolarMassOfWaterVapor = 6;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_molarmassofwatervapor() const {
  return this != internal_default_instance() && molarmassofwatervapor_ != nullptr;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_molarmassofwatervapor() const {
  return _internal_has_molarmassofwatervapor();
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_EnvironmentConfigurationData::_internal_molarmassofwatervapor() const {
  const ::pulse::cdm::bind::ScalarMassPerAmountData* p = molarmassofwatervapor_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerAmountData&>(
      ::pulse::cdm::bind::_ScalarMassPerAmountData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerAmountData& ConfigurationData_EnvironmentConfigurationData::molarmassofwatervapor() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfWaterVapor)
  return _internal_molarmassofwatervapor();
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_molarmassofwatervapor(
    ::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofwatervapor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofwatervapor_);
  }
  molarmassofwatervapor_ = molarmassofwatervapor;
  if (molarmassofwatervapor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfWaterVapor)
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::release_molarmassofwatervapor() {
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmassofwatervapor_;
  molarmassofwatervapor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_molarmassofwatervapor() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfWaterVapor)
  
  ::pulse::cdm::bind::ScalarMassPerAmountData* temp = molarmassofwatervapor_;
  molarmassofwatervapor_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_molarmassofwatervapor() {
  
  if (molarmassofwatervapor_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerAmountData>(GetArena());
    molarmassofwatervapor_ = p;
  }
  return molarmassofwatervapor_;
}
inline ::pulse::cdm::bind::ScalarMassPerAmountData* ConfigurationData_EnvironmentConfigurationData::mutable_molarmassofwatervapor() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfWaterVapor)
  return _internal_mutable_molarmassofwatervapor();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_molarmassofwatervapor(::pulse::cdm::bind::ScalarMassPerAmountData* molarmassofwatervapor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofwatervapor_);
  }
  if (molarmassofwatervapor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(molarmassofwatervapor)->GetArena();
    if (message_arena != submessage_arena) {
      molarmassofwatervapor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, molarmassofwatervapor, submessage_arena);
    }
    
  } else {
    
  }
  molarmassofwatervapor_ = molarmassofwatervapor;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.MolarMassOfWaterVapor)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData WaterDensity = 7;
inline bool ConfigurationData_EnvironmentConfigurationData::_internal_has_waterdensity() const {
  return this != internal_default_instance() && waterdensity_ != nullptr;
}
inline bool ConfigurationData_EnvironmentConfigurationData::has_waterdensity() const {
  return _internal_has_waterdensity();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_EnvironmentConfigurationData::_internal_waterdensity() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = waterdensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_EnvironmentConfigurationData::waterdensity() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.WaterDensity)
  return _internal_waterdensity();
}
inline void ConfigurationData_EnvironmentConfigurationData::unsafe_arena_set_allocated_waterdensity(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* waterdensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdensity_);
  }
  waterdensity_ = waterdensity;
  if (waterdensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.WaterDensity)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::release_waterdensity() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = waterdensity_;
  waterdensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::unsafe_arena_release_waterdensity() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.WaterDensity)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = waterdensity_;
  waterdensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::_internal_mutable_waterdensity() {
  
  if (waterdensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    waterdensity_ = p;
  }
  return waterdensity_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_EnvironmentConfigurationData::mutable_waterdensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.WaterDensity)
  return _internal_mutable_waterdensity();
}
inline void ConfigurationData_EnvironmentConfigurationData::set_allocated_waterdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* waterdensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdensity_);
  }
  if (waterdensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdensity)->GetArena();
    if (message_arena != submessage_arena) {
      waterdensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waterdensity, submessage_arena);
    }
    
  } else {
    
  }
  waterdensity_ = waterdensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData.WaterDensity)
}

inline bool ConfigurationData_EnvironmentConfigurationData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void ConfigurationData_EnvironmentConfigurationData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline ConfigurationData_EnvironmentConfigurationData::OptionCase ConfigurationData_EnvironmentConfigurationData::Option_case() const {
  return ConfigurationData_EnvironmentConfigurationData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigurationData_GastrointestinalConfigurationData

// .pulse.cdm.bind.NutritionData InitialStomachContents = 1;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_initialstomachcontents() const {
  return Option_case() == kInitialStomachContents;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_initialstomachcontents() const {
  return _internal_has_initialstomachcontents();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_has_initialstomachcontents() {
  _oneof_case_[0] = kInitialStomachContents;
}
inline ::pulse::cdm::bind::NutritionData* ConfigurationData_GastrointestinalConfigurationData::release_initialstomachcontents() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
  if (_internal_has_initialstomachcontents()) {
    clear_has_Option();
      ::pulse::cdm::bind::NutritionData* temp = Option_.initialstomachcontents_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.initialstomachcontents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::NutritionData& ConfigurationData_GastrointestinalConfigurationData::_internal_initialstomachcontents() const {
  return _internal_has_initialstomachcontents()
      ? *Option_.initialstomachcontents_
      : reinterpret_cast< ::pulse::cdm::bind::NutritionData&>(::pulse::cdm::bind::_NutritionData_default_instance_);
}
inline const ::pulse::cdm::bind::NutritionData& ConfigurationData_GastrointestinalConfigurationData::initialstomachcontents() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
  return _internal_initialstomachcontents();
}
inline ::pulse::cdm::bind::NutritionData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_initialstomachcontents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
  if (_internal_has_initialstomachcontents()) {
    clear_has_Option();
    ::pulse::cdm::bind::NutritionData* temp = Option_.initialstomachcontents_;
    Option_.initialstomachcontents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_initialstomachcontents(::pulse::cdm::bind::NutritionData* initialstomachcontents) {
  clear_Option();
  if (initialstomachcontents) {
    set_has_initialstomachcontents();
    Option_.initialstomachcontents_ = initialstomachcontents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
}
inline ::pulse::cdm::bind::NutritionData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_initialstomachcontents() {
  if (!_internal_has_initialstomachcontents()) {
    clear_Option();
    set_has_initialstomachcontents();
    Option_.initialstomachcontents_ = CreateMaybeMessage< ::pulse::cdm::bind::NutritionData >(GetArena());
  }
  return Option_.initialstomachcontents_;
}
inline ::pulse::cdm::bind::NutritionData* ConfigurationData_GastrointestinalConfigurationData::mutable_initialstomachcontents() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContents)
  return _internal_mutable_initialstomachcontents();
}

// string InitialStomachContentsFile = 2;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_initialstomachcontentsfile() const {
  return Option_case() == kInitialStomachContentsFile;
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_has_initialstomachcontentsfile() {
  _oneof_case_[0] = kInitialStomachContentsFile;
}
inline void ConfigurationData_GastrointestinalConfigurationData::clear_initialstomachcontentsfile() {
  if (_internal_has_initialstomachcontentsfile()) {
    Option_.initialstomachcontentsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& ConfigurationData_GastrointestinalConfigurationData::initialstomachcontentsfile() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
  return _internal_initialstomachcontentsfile();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_initialstomachcontentsfile(const std::string& value) {
  _internal_set_initialstomachcontentsfile(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
}
inline std::string* ConfigurationData_GastrointestinalConfigurationData::mutable_initialstomachcontentsfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
  return _internal_mutable_initialstomachcontentsfile();
}
inline const std::string& ConfigurationData_GastrointestinalConfigurationData::_internal_initialstomachcontentsfile() const {
  if (_internal_has_initialstomachcontentsfile()) {
    return Option_.initialstomachcontentsfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigurationData_GastrointestinalConfigurationData::_internal_set_initialstomachcontentsfile(const std::string& value) {
  if (!_internal_has_initialstomachcontentsfile()) {
    clear_Option();
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialstomachcontentsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_initialstomachcontentsfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
  if (!_internal_has_initialstomachcontentsfile()) {
    clear_Option();
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialstomachcontentsfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_initialstomachcontentsfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_initialstomachcontentsfile()) {
    clear_Option();
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialstomachcontentsfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_initialstomachcontentsfile(const char* value,
                             size_t size) {
  if (!_internal_has_initialstomachcontentsfile()) {
    clear_Option();
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.initialstomachcontentsfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
}
inline std::string* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_initialstomachcontentsfile() {
  if (!_internal_has_initialstomachcontentsfile()) {
    clear_Option();
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.initialstomachcontentsfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationData_GastrointestinalConfigurationData::release_initialstomachcontentsfile() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
  if (_internal_has_initialstomachcontentsfile()) {
    clear_has_Option();
    return Option_.initialstomachcontentsfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_initialstomachcontentsfile(std::string* initialstomachcontentsfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (initialstomachcontentsfile != nullptr) {
    set_has_initialstomachcontentsfile();
    Option_.initialstomachcontentsfile_.UnsafeSetDefault(initialstomachcontentsfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(initialstomachcontentsfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.InitialStomachContentsFile)
}

// .pulse.cdm.bind.Scalar0To1Data CalciumAbsorptionFraction = 3;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_calciumabsorptionfraction() const {
  return this != internal_default_instance() && calciumabsorptionfraction_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_calciumabsorptionfraction() const {
  return _internal_has_calciumabsorptionfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::_internal_calciumabsorptionfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = calciumabsorptionfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::calciumabsorptionfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumAbsorptionFraction)
  return _internal_calciumabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_calciumabsorptionfraction(
    ::pulse::cdm::bind::Scalar0To1Data* calciumabsorptionfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumabsorptionfraction_);
  }
  calciumabsorptionfraction_ = calciumabsorptionfraction;
  if (calciumabsorptionfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumAbsorptionFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::release_calciumabsorptionfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = calciumabsorptionfraction_;
  calciumabsorptionfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_calciumabsorptionfraction() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumAbsorptionFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = calciumabsorptionfraction_;
  calciumabsorptionfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_calciumabsorptionfraction() {
  
  if (calciumabsorptionfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    calciumabsorptionfraction_ = p;
  }
  return calciumabsorptionfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::mutable_calciumabsorptionfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumAbsorptionFraction)
  return _internal_mutable_calciumabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_calciumabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* calciumabsorptionfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumabsorptionfraction_);
  }
  if (calciumabsorptionfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumabsorptionfraction)->GetArena();
    if (message_arena != submessage_arena) {
      calciumabsorptionfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calciumabsorptionfraction, submessage_arena);
    }
    
  } else {
    
  }
  calciumabsorptionfraction_ = calciumabsorptionfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumAbsorptionFraction)
}

// .pulse.cdm.bind.ScalarMassPerTimeData CalciumDigestionRate = 4;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_calciumdigestionrate() const {
  return this != internal_default_instance() && calciumdigestionrate_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_calciumdigestionrate() const {
  return _internal_has_calciumdigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::_internal_calciumdigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = calciumdigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::calciumdigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumDigestionRate)
  return _internal_calciumdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_calciumdigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* calciumdigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumdigestionrate_);
  }
  calciumdigestionrate_ = calciumdigestionrate;
  if (calciumdigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::release_calciumdigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = calciumdigestionrate_;
  calciumdigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_calciumdigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = calciumdigestionrate_;
  calciumdigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_calciumdigestionrate() {
  
  if (calciumdigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    calciumdigestionrate_ = p;
  }
  return calciumdigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::mutable_calciumdigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumDigestionRate)
  return _internal_mutable_calciumdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_calciumdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* calciumdigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumdigestionrate_);
  }
  if (calciumdigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calciumdigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      calciumdigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calciumdigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  calciumdigestionrate_ = calciumdigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CalciumDigestionRate)
}

// .pulse.cdm.bind.Scalar0To1Data CarbohydrateAbsorptionFraction = 5;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_carbohydrateabsorptionfraction() const {
  return this != internal_default_instance() && carbohydrateabsorptionfraction_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_carbohydrateabsorptionfraction() const {
  return _internal_has_carbohydrateabsorptionfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::_internal_carbohydrateabsorptionfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = carbohydrateabsorptionfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::carbohydrateabsorptionfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CarbohydrateAbsorptionFraction)
  return _internal_carbohydrateabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_carbohydrateabsorptionfraction(
    ::pulse::cdm::bind::Scalar0To1Data* carbohydrateabsorptionfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrateabsorptionfraction_);
  }
  carbohydrateabsorptionfraction_ = carbohydrateabsorptionfraction;
  if (carbohydrateabsorptionfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CarbohydrateAbsorptionFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::release_carbohydrateabsorptionfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbohydrateabsorptionfraction_;
  carbohydrateabsorptionfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_carbohydrateabsorptionfraction() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CarbohydrateAbsorptionFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbohydrateabsorptionfraction_;
  carbohydrateabsorptionfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_carbohydrateabsorptionfraction() {
  
  if (carbohydrateabsorptionfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    carbohydrateabsorptionfraction_ = p;
  }
  return carbohydrateabsorptionfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::mutable_carbohydrateabsorptionfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CarbohydrateAbsorptionFraction)
  return _internal_mutable_carbohydrateabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_carbohydrateabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* carbohydrateabsorptionfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrateabsorptionfraction_);
  }
  if (carbohydrateabsorptionfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrateabsorptionfraction)->GetArena();
    if (message_arena != submessage_arena) {
      carbohydrateabsorptionfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbohydrateabsorptionfraction, submessage_arena);
    }
    
  } else {
    
  }
  carbohydrateabsorptionfraction_ = carbohydrateabsorptionfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.CarbohydrateAbsorptionFraction)
}

// .pulse.cdm.bind.ScalarMassPerTimeData DefaultCarbohydrateDigestionRate = 6;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_defaultcarbohydratedigestionrate() const {
  return this != internal_default_instance() && defaultcarbohydratedigestionrate_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_defaultcarbohydratedigestionrate() const {
  return _internal_has_defaultcarbohydratedigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::_internal_defaultcarbohydratedigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = defaultcarbohydratedigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::defaultcarbohydratedigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultCarbohydrateDigestionRate)
  return _internal_defaultcarbohydratedigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_defaultcarbohydratedigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* defaultcarbohydratedigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultcarbohydratedigestionrate_);
  }
  defaultcarbohydratedigestionrate_ = defaultcarbohydratedigestionrate;
  if (defaultcarbohydratedigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultCarbohydrateDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::release_defaultcarbohydratedigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultcarbohydratedigestionrate_;
  defaultcarbohydratedigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_defaultcarbohydratedigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultCarbohydrateDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultcarbohydratedigestionrate_;
  defaultcarbohydratedigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_defaultcarbohydratedigestionrate() {
  
  if (defaultcarbohydratedigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    defaultcarbohydratedigestionrate_ = p;
  }
  return defaultcarbohydratedigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::mutable_defaultcarbohydratedigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultCarbohydrateDigestionRate)
  return _internal_mutable_defaultcarbohydratedigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_defaultcarbohydratedigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultcarbohydratedigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultcarbohydratedigestionrate_);
  }
  if (defaultcarbohydratedigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultcarbohydratedigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      defaultcarbohydratedigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultcarbohydratedigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  defaultcarbohydratedigestionrate_ = defaultcarbohydratedigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultCarbohydrateDigestionRate)
}

// .pulse.cdm.bind.ScalarMassPerTimeData DefaultFatDigestionRate = 7;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_defaultfatdigestionrate() const {
  return this != internal_default_instance() && defaultfatdigestionrate_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_defaultfatdigestionrate() const {
  return _internal_has_defaultfatdigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::_internal_defaultfatdigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = defaultfatdigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::defaultfatdigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultFatDigestionRate)
  return _internal_defaultfatdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_defaultfatdigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* defaultfatdigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultfatdigestionrate_);
  }
  defaultfatdigestionrate_ = defaultfatdigestionrate;
  if (defaultfatdigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultFatDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::release_defaultfatdigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultfatdigestionrate_;
  defaultfatdigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_defaultfatdigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultFatDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultfatdigestionrate_;
  defaultfatdigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_defaultfatdigestionrate() {
  
  if (defaultfatdigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    defaultfatdigestionrate_ = p;
  }
  return defaultfatdigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::mutable_defaultfatdigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultFatDigestionRate)
  return _internal_mutable_defaultfatdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_defaultfatdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultfatdigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultfatdigestionrate_);
  }
  if (defaultfatdigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultfatdigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      defaultfatdigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultfatdigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  defaultfatdigestionrate_ = defaultfatdigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultFatDigestionRate)
}

// .pulse.cdm.bind.ScalarMassPerTimeData DefaultProteinDigestionRate = 8;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_defaultproteindigestionrate() const {
  return this != internal_default_instance() && defaultproteindigestionrate_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_defaultproteindigestionrate() const {
  return _internal_has_defaultproteindigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::_internal_defaultproteindigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = defaultproteindigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_GastrointestinalConfigurationData::defaultproteindigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultProteinDigestionRate)
  return _internal_defaultproteindigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_defaultproteindigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* defaultproteindigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultproteindigestionrate_);
  }
  defaultproteindigestionrate_ = defaultproteindigestionrate;
  if (defaultproteindigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultProteinDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::release_defaultproteindigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultproteindigestionrate_;
  defaultproteindigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_defaultproteindigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultProteinDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = defaultproteindigestionrate_;
  defaultproteindigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_defaultproteindigestionrate() {
  
  if (defaultproteindigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    defaultproteindigestionrate_ = p;
  }
  return defaultproteindigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_GastrointestinalConfigurationData::mutable_defaultproteindigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultProteinDigestionRate)
  return _internal_mutable_defaultproteindigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_defaultproteindigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* defaultproteindigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultproteindigestionrate_);
  }
  if (defaultproteindigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultproteindigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      defaultproteindigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultproteindigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  defaultproteindigestionrate_ = defaultproteindigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.DefaultProteinDigestionRate)
}

// .pulse.cdm.bind.Scalar0To1Data FatAbsorptionFraction = 9;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_fatabsorptionfraction() const {
  return this != internal_default_instance() && fatabsorptionfraction_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_fatabsorptionfraction() const {
  return _internal_has_fatabsorptionfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::_internal_fatabsorptionfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fatabsorptionfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::fatabsorptionfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.FatAbsorptionFraction)
  return _internal_fatabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_fatabsorptionfraction(
    ::pulse::cdm::bind::Scalar0To1Data* fatabsorptionfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatabsorptionfraction_);
  }
  fatabsorptionfraction_ = fatabsorptionfraction;
  if (fatabsorptionfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.FatAbsorptionFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::release_fatabsorptionfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fatabsorptionfraction_;
  fatabsorptionfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_fatabsorptionfraction() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.FatAbsorptionFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fatabsorptionfraction_;
  fatabsorptionfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_fatabsorptionfraction() {
  
  if (fatabsorptionfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fatabsorptionfraction_ = p;
  }
  return fatabsorptionfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::mutable_fatabsorptionfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.FatAbsorptionFraction)
  return _internal_mutable_fatabsorptionfraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_fatabsorptionfraction(::pulse::cdm::bind::Scalar0To1Data* fatabsorptionfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatabsorptionfraction_);
  }
  if (fatabsorptionfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatabsorptionfraction)->GetArena();
    if (message_arena != submessage_arena) {
      fatabsorptionfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fatabsorptionfraction, submessage_arena);
    }
    
  } else {
    
  }
  fatabsorptionfraction_ = fatabsorptionfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.FatAbsorptionFraction)
}

// .pulse.cdm.bind.Scalar0To1Data ProteinToUreaFraction = 10;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_proteintoureafraction() const {
  return this != internal_default_instance() && proteintoureafraction_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_proteintoureafraction() const {
  return _internal_has_proteintoureafraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::_internal_proteintoureafraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = proteintoureafraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ConfigurationData_GastrointestinalConfigurationData::proteintoureafraction() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.ProteinToUreaFraction)
  return _internal_proteintoureafraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_proteintoureafraction(
    ::pulse::cdm::bind::Scalar0To1Data* proteintoureafraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteintoureafraction_);
  }
  proteintoureafraction_ = proteintoureafraction;
  if (proteintoureafraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.ProteinToUreaFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::release_proteintoureafraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = proteintoureafraction_;
  proteintoureafraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_proteintoureafraction() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.ProteinToUreaFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = proteintoureafraction_;
  proteintoureafraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_proteintoureafraction() {
  
  if (proteintoureafraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    proteintoureafraction_ = p;
  }
  return proteintoureafraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ConfigurationData_GastrointestinalConfigurationData::mutable_proteintoureafraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.ProteinToUreaFraction)
  return _internal_mutable_proteintoureafraction();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_proteintoureafraction(::pulse::cdm::bind::Scalar0To1Data* proteintoureafraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteintoureafraction_);
  }
  if (proteintoureafraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteintoureafraction)->GetArena();
    if (message_arena != submessage_arena) {
      proteintoureafraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proteintoureafraction, submessage_arena);
    }
    
  } else {
    
  }
  proteintoureafraction_ = proteintoureafraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.ProteinToUreaFraction)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData WaterDigestionRate = 11;
inline bool ConfigurationData_GastrointestinalConfigurationData::_internal_has_waterdigestionrate() const {
  return this != internal_default_instance() && waterdigestionrate_ != nullptr;
}
inline bool ConfigurationData_GastrointestinalConfigurationData::has_waterdigestionrate() const {
  return _internal_has_waterdigestionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& ConfigurationData_GastrointestinalConfigurationData::_internal_waterdigestionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = waterdigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& ConfigurationData_GastrointestinalConfigurationData::waterdigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.WaterDigestionRate)
  return _internal_waterdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_set_allocated_waterdigestionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* waterdigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdigestionrate_);
  }
  waterdigestionrate_ = waterdigestionrate;
  if (waterdigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.WaterDigestionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_GastrointestinalConfigurationData::release_waterdigestionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = waterdigestionrate_;
  waterdigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_GastrointestinalConfigurationData::unsafe_arena_release_waterdigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.WaterDigestionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = waterdigestionrate_;
  waterdigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_GastrointestinalConfigurationData::_internal_mutable_waterdigestionrate() {
  
  if (waterdigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    waterdigestionrate_ = p;
  }
  return waterdigestionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_GastrointestinalConfigurationData::mutable_waterdigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.WaterDigestionRate)
  return _internal_mutable_waterdigestionrate();
}
inline void ConfigurationData_GastrointestinalConfigurationData::set_allocated_waterdigestionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* waterdigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdigestionrate_);
  }
  if (waterdigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterdigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      waterdigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waterdigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  waterdigestionrate_ = waterdigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData.WaterDigestionRate)
}

inline bool ConfigurationData_GastrointestinalConfigurationData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void ConfigurationData_GastrointestinalConfigurationData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline ConfigurationData_GastrointestinalConfigurationData::OptionCase ConfigurationData_GastrointestinalConfigurationData::Option_case() const {
  return ConfigurationData_GastrointestinalConfigurationData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigurationData_NervousConfigurationData

// .pulse.cdm.bind.eSwitch EnableCerebrospinalFluid = 1;
inline void ConfigurationData_NervousConfigurationData::clear_enablecerebrospinalfluid() {
  enablecerebrospinalfluid_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::_internal_enablecerebrospinalfluid() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(enablecerebrospinalfluid_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::enablecerebrospinalfluid() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.EnableCerebrospinalFluid)
  return _internal_enablecerebrospinalfluid();
}
inline void ConfigurationData_NervousConfigurationData::_internal_set_enablecerebrospinalfluid(::pulse::cdm::bind::eSwitch value) {
  
  enablecerebrospinalfluid_ = value;
}
inline void ConfigurationData_NervousConfigurationData::set_enablecerebrospinalfluid(::pulse::cdm::bind::eSwitch value) {
  _internal_set_enablecerebrospinalfluid(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.EnableCerebrospinalFluid)
}

// .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 2;
inline void ConfigurationData_NervousConfigurationData::clear_chemoreceptorfeedback() {
  chemoreceptorfeedback_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::_internal_chemoreceptorfeedback() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(chemoreceptorfeedback_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::chemoreceptorfeedback() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ChemoreceptorFeedback)
  return _internal_chemoreceptorfeedback();
}
inline void ConfigurationData_NervousConfigurationData::_internal_set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  
  chemoreceptorfeedback_ = value;
}
inline void ConfigurationData_NervousConfigurationData::set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  _internal_set_chemoreceptorfeedback(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ChemoreceptorFeedback)
}

// .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 3;
inline void ConfigurationData_NervousConfigurationData::clear_baroreceptorfeedback() {
  baroreceptorfeedback_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::_internal_baroreceptorfeedback() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(baroreceptorfeedback_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_NervousConfigurationData::baroreceptorfeedback() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.BaroreceptorFeedback)
  return _internal_baroreceptorfeedback();
}
inline void ConfigurationData_NervousConfigurationData::_internal_set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  
  baroreceptorfeedback_ = value;
}
inline void ConfigurationData_NervousConfigurationData::set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  _internal_set_baroreceptorfeedback(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.BaroreceptorFeedback)
}

// .pulse.cdm.bind.ScalarTimeData HeartElastanceDistributedTimeDelay = 4;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_heartelastancedistributedtimedelay() const {
  return this != internal_default_instance() && heartelastancedistributedtimedelay_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_heartelastancedistributedtimedelay() const {
  return _internal_has_heartelastancedistributedtimedelay();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::_internal_heartelastancedistributedtimedelay() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = heartelastancedistributedtimedelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::heartelastancedistributedtimedelay() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartElastanceDistributedTimeDelay)
  return _internal_heartelastancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_heartelastancedistributedtimedelay(
    ::pulse::cdm::bind::ScalarTimeData* heartelastancedistributedtimedelay) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartelastancedistributedtimedelay_);
  }
  heartelastancedistributedtimedelay_ = heartelastancedistributedtimedelay;
  if (heartelastancedistributedtimedelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartElastanceDistributedTimeDelay)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::release_heartelastancedistributedtimedelay() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = heartelastancedistributedtimedelay_;
  heartelastancedistributedtimedelay_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_heartelastancedistributedtimedelay() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartElastanceDistributedTimeDelay)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = heartelastancedistributedtimedelay_;
  heartelastancedistributedtimedelay_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::_internal_mutable_heartelastancedistributedtimedelay() {
  
  if (heartelastancedistributedtimedelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    heartelastancedistributedtimedelay_ = p;
  }
  return heartelastancedistributedtimedelay_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::mutable_heartelastancedistributedtimedelay() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartElastanceDistributedTimeDelay)
  return _internal_mutable_heartelastancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_heartelastancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* heartelastancedistributedtimedelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartelastancedistributedtimedelay_);
  }
  if (heartelastancedistributedtimedelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartelastancedistributedtimedelay)->GetArena();
    if (message_arena != submessage_arena) {
      heartelastancedistributedtimedelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartelastancedistributedtimedelay, submessage_arena);
    }
    
  } else {
    
  }
  heartelastancedistributedtimedelay_ = heartelastancedistributedtimedelay;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartElastanceDistributedTimeDelay)
}

// .pulse.cdm.bind.ScalarTimeData HeartRateDistributedTimeDelay = 5;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_heartratedistributedtimedelay() const {
  return this != internal_default_instance() && heartratedistributedtimedelay_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_heartratedistributedtimedelay() const {
  return _internal_has_heartratedistributedtimedelay();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::_internal_heartratedistributedtimedelay() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = heartratedistributedtimedelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::heartratedistributedtimedelay() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartRateDistributedTimeDelay)
  return _internal_heartratedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_heartratedistributedtimedelay(
    ::pulse::cdm::bind::ScalarTimeData* heartratedistributedtimedelay) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratedistributedtimedelay_);
  }
  heartratedistributedtimedelay_ = heartratedistributedtimedelay;
  if (heartratedistributedtimedelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartRateDistributedTimeDelay)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::release_heartratedistributedtimedelay() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = heartratedistributedtimedelay_;
  heartratedistributedtimedelay_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_heartratedistributedtimedelay() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartRateDistributedTimeDelay)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = heartratedistributedtimedelay_;
  heartratedistributedtimedelay_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::_internal_mutable_heartratedistributedtimedelay() {
  
  if (heartratedistributedtimedelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    heartratedistributedtimedelay_ = p;
  }
  return heartratedistributedtimedelay_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::mutable_heartratedistributedtimedelay() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartRateDistributedTimeDelay)
  return _internal_mutable_heartratedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_heartratedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* heartratedistributedtimedelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratedistributedtimedelay_);
  }
  if (heartratedistributedtimedelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratedistributedtimedelay)->GetArena();
    if (message_arena != submessage_arena) {
      heartratedistributedtimedelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartratedistributedtimedelay, submessage_arena);
    }
    
  } else {
    
  }
  heartratedistributedtimedelay_ = heartratedistributedtimedelay;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.HeartRateDistributedTimeDelay)
}

// .pulse.cdm.bind.ScalarData NormalizedHeartRateIntercept = 6;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedheartrateintercept() const {
  return this != internal_default_instance() && normalizedheartrateintercept_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedheartrateintercept() const {
  return _internal_has_normalizedheartrateintercept();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedheartrateintercept() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedheartrateintercept_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedheartrateintercept() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateIntercept)
  return _internal_normalizedheartrateintercept();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedheartrateintercept(
    ::pulse::cdm::bind::ScalarData* normalizedheartrateintercept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateintercept_);
  }
  normalizedheartrateintercept_ = normalizedheartrateintercept;
  if (normalizedheartrateintercept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateIntercept)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedheartrateintercept() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartrateintercept_;
  normalizedheartrateintercept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedheartrateintercept() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateIntercept)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartrateintercept_;
  normalizedheartrateintercept_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedheartrateintercept() {
  
  if (normalizedheartrateintercept_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedheartrateintercept_ = p;
  }
  return normalizedheartrateintercept_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedheartrateintercept() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateIntercept)
  return _internal_mutable_normalizedheartrateintercept();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedheartrateintercept(::pulse::cdm::bind::ScalarData* normalizedheartrateintercept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateintercept_);
  }
  if (normalizedheartrateintercept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateintercept)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedheartrateintercept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedheartrateintercept, submessage_arena);
    }
    
  } else {
    
  }
  normalizedheartrateintercept_ = normalizedheartrateintercept;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateIntercept)
}

// .pulse.cdm.bind.ScalarData NormalizedHeartRateSympatheticSlope = 7;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedheartratesympatheticslope() const {
  return this != internal_default_instance() && normalizedheartratesympatheticslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedheartratesympatheticslope() const {
  return _internal_has_normalizedheartratesympatheticslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedheartratesympatheticslope() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedheartratesympatheticslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedheartratesympatheticslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateSympatheticSlope)
  return _internal_normalizedheartratesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedheartratesympatheticslope(
    ::pulse::cdm::bind::ScalarData* normalizedheartratesympatheticslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartratesympatheticslope_);
  }
  normalizedheartratesympatheticslope_ = normalizedheartratesympatheticslope;
  if (normalizedheartratesympatheticslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateSympatheticSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedheartratesympatheticslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartratesympatheticslope_;
  normalizedheartratesympatheticslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedheartratesympatheticslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateSympatheticSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartratesympatheticslope_;
  normalizedheartratesympatheticslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedheartratesympatheticslope() {
  
  if (normalizedheartratesympatheticslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedheartratesympatheticslope_ = p;
  }
  return normalizedheartratesympatheticslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedheartratesympatheticslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateSympatheticSlope)
  return _internal_mutable_normalizedheartratesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedheartratesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartratesympatheticslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartratesympatheticslope_);
  }
  if (normalizedheartratesympatheticslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartratesympatheticslope)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedheartratesympatheticslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedheartratesympatheticslope, submessage_arena);
    }
    
  } else {
    
  }
  normalizedheartratesympatheticslope_ = normalizedheartratesympatheticslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateSympatheticSlope)
}

// .pulse.cdm.bind.ScalarData NormalizedHeartRateParasympatheticSlope = 8;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedheartrateparasympatheticslope() const {
  return this != internal_default_instance() && normalizedheartrateparasympatheticslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedheartrateparasympatheticslope() const {
  return _internal_has_normalizedheartrateparasympatheticslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedheartrateparasympatheticslope() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedheartrateparasympatheticslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedheartrateparasympatheticslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateParasympatheticSlope)
  return _internal_normalizedheartrateparasympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedheartrateparasympatheticslope(
    ::pulse::cdm::bind::ScalarData* normalizedheartrateparasympatheticslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateparasympatheticslope_);
  }
  normalizedheartrateparasympatheticslope_ = normalizedheartrateparasympatheticslope;
  if (normalizedheartrateparasympatheticslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateParasympatheticSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedheartrateparasympatheticslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartrateparasympatheticslope_;
  normalizedheartrateparasympatheticslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedheartrateparasympatheticslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateParasympatheticSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartrateparasympatheticslope_;
  normalizedheartrateparasympatheticslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedheartrateparasympatheticslope() {
  
  if (normalizedheartrateparasympatheticslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedheartrateparasympatheticslope_ = p;
  }
  return normalizedheartrateparasympatheticslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedheartrateparasympatheticslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateParasympatheticSlope)
  return _internal_mutable_normalizedheartrateparasympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedheartrateparasympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartrateparasympatheticslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateparasympatheticslope_);
  }
  if (normalizedheartrateparasympatheticslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartrateparasympatheticslope)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedheartrateparasympatheticslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedheartrateparasympatheticslope, submessage_arena);
    }
    
  } else {
    
  }
  normalizedheartrateparasympatheticslope_ = normalizedheartrateparasympatheticslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartRateParasympatheticSlope)
}

// .pulse.cdm.bind.ScalarData NormalizedHeartElastanceIntercept = 9;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedheartelastanceintercept() const {
  return this != internal_default_instance() && normalizedheartelastanceintercept_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedheartelastanceintercept() const {
  return _internal_has_normalizedheartelastanceintercept();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedheartelastanceintercept() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedheartelastanceintercept_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedheartelastanceintercept() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceIntercept)
  return _internal_normalizedheartelastanceintercept();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedheartelastanceintercept(
    ::pulse::cdm::bind::ScalarData* normalizedheartelastanceintercept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastanceintercept_);
  }
  normalizedheartelastanceintercept_ = normalizedheartelastanceintercept;
  if (normalizedheartelastanceintercept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceIntercept)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedheartelastanceintercept() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartelastanceintercept_;
  normalizedheartelastanceintercept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedheartelastanceintercept() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceIntercept)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartelastanceintercept_;
  normalizedheartelastanceintercept_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedheartelastanceintercept() {
  
  if (normalizedheartelastanceintercept_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedheartelastanceintercept_ = p;
  }
  return normalizedheartelastanceintercept_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedheartelastanceintercept() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceIntercept)
  return _internal_mutable_normalizedheartelastanceintercept();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedheartelastanceintercept(::pulse::cdm::bind::ScalarData* normalizedheartelastanceintercept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastanceintercept_);
  }
  if (normalizedheartelastanceintercept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastanceintercept)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedheartelastanceintercept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedheartelastanceintercept, submessage_arena);
    }
    
  } else {
    
  }
  normalizedheartelastanceintercept_ = normalizedheartelastanceintercept;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceIntercept)
}

// .pulse.cdm.bind.ScalarData NormalizedHeartElastanceSympatheticSlope = 10;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedheartelastancesympatheticslope() const {
  return this != internal_default_instance() && normalizedheartelastancesympatheticslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedheartelastancesympatheticslope() const {
  return _internal_has_normalizedheartelastancesympatheticslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedheartelastancesympatheticslope() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedheartelastancesympatheticslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedheartelastancesympatheticslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceSympatheticSlope)
  return _internal_normalizedheartelastancesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedheartelastancesympatheticslope(
    ::pulse::cdm::bind::ScalarData* normalizedheartelastancesympatheticslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastancesympatheticslope_);
  }
  normalizedheartelastancesympatheticslope_ = normalizedheartelastancesympatheticslope;
  if (normalizedheartelastancesympatheticslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceSympatheticSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedheartelastancesympatheticslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartelastancesympatheticslope_;
  normalizedheartelastancesympatheticslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedheartelastancesympatheticslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceSympatheticSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedheartelastancesympatheticslope_;
  normalizedheartelastancesympatheticslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedheartelastancesympatheticslope() {
  
  if (normalizedheartelastancesympatheticslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedheartelastancesympatheticslope_ = p;
  }
  return normalizedheartelastancesympatheticslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedheartelastancesympatheticslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceSympatheticSlope)
  return _internal_mutable_normalizedheartelastancesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedheartelastancesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedheartelastancesympatheticslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastancesympatheticslope_);
  }
  if (normalizedheartelastancesympatheticslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedheartelastancesympatheticslope)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedheartelastancesympatheticslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedheartelastancesympatheticslope, submessage_arena);
    }
    
  } else {
    
  }
  normalizedheartelastancesympatheticslope_ = normalizedheartelastancesympatheticslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedHeartElastanceSympatheticSlope)
}

// .pulse.cdm.bind.ScalarData NormalizedResistanceIntercept = 11;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedresistanceintercept() const {
  return this != internal_default_instance() && normalizedresistanceintercept_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedresistanceintercept() const {
  return _internal_has_normalizedresistanceintercept();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedresistanceintercept() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedresistanceintercept_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedresistanceintercept() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceIntercept)
  return _internal_normalizedresistanceintercept();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedresistanceintercept(
    ::pulse::cdm::bind::ScalarData* normalizedresistanceintercept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistanceintercept_);
  }
  normalizedresistanceintercept_ = normalizedresistanceintercept;
  if (normalizedresistanceintercept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceIntercept)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedresistanceintercept() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedresistanceintercept_;
  normalizedresistanceintercept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedresistanceintercept() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceIntercept)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedresistanceintercept_;
  normalizedresistanceintercept_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedresistanceintercept() {
  
  if (normalizedresistanceintercept_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedresistanceintercept_ = p;
  }
  return normalizedresistanceintercept_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedresistanceintercept() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceIntercept)
  return _internal_mutable_normalizedresistanceintercept();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedresistanceintercept(::pulse::cdm::bind::ScalarData* normalizedresistanceintercept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistanceintercept_);
  }
  if (normalizedresistanceintercept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistanceintercept)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedresistanceintercept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedresistanceintercept, submessage_arena);
    }
    
  } else {
    
  }
  normalizedresistanceintercept_ = normalizedresistanceintercept;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceIntercept)
}

// .pulse.cdm.bind.ScalarData NormalizedResistanceSympatheticSlope = 12;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedresistancesympatheticslope() const {
  return this != internal_default_instance() && normalizedresistancesympatheticslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedresistancesympatheticslope() const {
  return _internal_has_normalizedresistancesympatheticslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedresistancesympatheticslope() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedresistancesympatheticslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedresistancesympatheticslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceSympatheticSlope)
  return _internal_normalizedresistancesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedresistancesympatheticslope(
    ::pulse::cdm::bind::ScalarData* normalizedresistancesympatheticslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistancesympatheticslope_);
  }
  normalizedresistancesympatheticslope_ = normalizedresistancesympatheticslope;
  if (normalizedresistancesympatheticslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceSympatheticSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedresistancesympatheticslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedresistancesympatheticslope_;
  normalizedresistancesympatheticslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedresistancesympatheticslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceSympatheticSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedresistancesympatheticslope_;
  normalizedresistancesympatheticslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedresistancesympatheticslope() {
  
  if (normalizedresistancesympatheticslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedresistancesympatheticslope_ = p;
  }
  return normalizedresistancesympatheticslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedresistancesympatheticslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceSympatheticSlope)
  return _internal_mutable_normalizedresistancesympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedresistancesympatheticslope(::pulse::cdm::bind::ScalarData* normalizedresistancesympatheticslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistancesympatheticslope_);
  }
  if (normalizedresistancesympatheticslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedresistancesympatheticslope)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedresistancesympatheticslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedresistancesympatheticslope, submessage_arena);
    }
    
  } else {
    
  }
  normalizedresistancesympatheticslope_ = normalizedresistancesympatheticslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedResistanceSympatheticSlope)
}

// .pulse.cdm.bind.ScalarData NormalizedComplianceIntercept = 13;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedcomplianceintercept() const {
  return this != internal_default_instance() && normalizedcomplianceintercept_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedcomplianceintercept() const {
  return _internal_has_normalizedcomplianceintercept();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedcomplianceintercept() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedcomplianceintercept_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedcomplianceintercept() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceIntercept)
  return _internal_normalizedcomplianceintercept();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedcomplianceintercept(
    ::pulse::cdm::bind::ScalarData* normalizedcomplianceintercept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceintercept_);
  }
  normalizedcomplianceintercept_ = normalizedcomplianceintercept;
  if (normalizedcomplianceintercept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceIntercept)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedcomplianceintercept() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedcomplianceintercept_;
  normalizedcomplianceintercept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedcomplianceintercept() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceIntercept)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedcomplianceintercept_;
  normalizedcomplianceintercept_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedcomplianceintercept() {
  
  if (normalizedcomplianceintercept_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedcomplianceintercept_ = p;
  }
  return normalizedcomplianceintercept_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedcomplianceintercept() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceIntercept)
  return _internal_mutable_normalizedcomplianceintercept();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedcomplianceintercept(::pulse::cdm::bind::ScalarData* normalizedcomplianceintercept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceintercept_);
  }
  if (normalizedcomplianceintercept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceintercept)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedcomplianceintercept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedcomplianceintercept, submessage_arena);
    }
    
  } else {
    
  }
  normalizedcomplianceintercept_ = normalizedcomplianceintercept;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceIntercept)
}

// .pulse.cdm.bind.ScalarData NormalizedComplianceParasympatheticSlope = 14;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_normalizedcomplianceparasympatheticslope() const {
  return this != internal_default_instance() && normalizedcomplianceparasympatheticslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_normalizedcomplianceparasympatheticslope() const {
  return _internal_has_normalizedcomplianceparasympatheticslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_normalizedcomplianceparasympatheticslope() const {
  const ::pulse::cdm::bind::ScalarData* p = normalizedcomplianceparasympatheticslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::normalizedcomplianceparasympatheticslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceParasympatheticSlope)
  return _internal_normalizedcomplianceparasympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_normalizedcomplianceparasympatheticslope(
    ::pulse::cdm::bind::ScalarData* normalizedcomplianceparasympatheticslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceparasympatheticslope_);
  }
  normalizedcomplianceparasympatheticslope_ = normalizedcomplianceparasympatheticslope;
  if (normalizedcomplianceparasympatheticslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceParasympatheticSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_normalizedcomplianceparasympatheticslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedcomplianceparasympatheticslope_;
  normalizedcomplianceparasympatheticslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_normalizedcomplianceparasympatheticslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceParasympatheticSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = normalizedcomplianceparasympatheticslope_;
  normalizedcomplianceparasympatheticslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_normalizedcomplianceparasympatheticslope() {
  
  if (normalizedcomplianceparasympatheticslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    normalizedcomplianceparasympatheticslope_ = p;
  }
  return normalizedcomplianceparasympatheticslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_normalizedcomplianceparasympatheticslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceParasympatheticSlope)
  return _internal_mutable_normalizedcomplianceparasympatheticslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_normalizedcomplianceparasympatheticslope(::pulse::cdm::bind::ScalarData* normalizedcomplianceparasympatheticslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceparasympatheticslope_);
  }
  if (normalizedcomplianceparasympatheticslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normalizedcomplianceparasympatheticslope)->GetArena();
    if (message_arena != submessage_arena) {
      normalizedcomplianceparasympatheticslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalizedcomplianceparasympatheticslope, submessage_arena);
    }
    
  } else {
    
  }
  normalizedcomplianceparasympatheticslope_ = normalizedcomplianceparasympatheticslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.NormalizedComplianceParasympatheticSlope)
}

// .pulse.cdm.bind.ScalarLengthData PupilDiameterBaseline = 15;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_pupildiameterbaseline() const {
  return this != internal_default_instance() && pupildiameterbaseline_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_pupildiameterbaseline() const {
  return _internal_has_pupildiameterbaseline();
}
inline const ::pulse::cdm::bind::ScalarLengthData& ConfigurationData_NervousConfigurationData::_internal_pupildiameterbaseline() const {
  const ::pulse::cdm::bind::ScalarLengthData* p = pupildiameterbaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarLengthData&>(
      ::pulse::cdm::bind::_ScalarLengthData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarLengthData& ConfigurationData_NervousConfigurationData::pupildiameterbaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.PupilDiameterBaseline)
  return _internal_pupildiameterbaseline();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_pupildiameterbaseline(
    ::pulse::cdm::bind::ScalarLengthData* pupildiameterbaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupildiameterbaseline_);
  }
  pupildiameterbaseline_ = pupildiameterbaseline;
  if (pupildiameterbaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.PupilDiameterBaseline)
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_NervousConfigurationData::release_pupildiameterbaseline() {
  
  ::pulse::cdm::bind::ScalarLengthData* temp = pupildiameterbaseline_;
  pupildiameterbaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_pupildiameterbaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.PupilDiameterBaseline)
  
  ::pulse::cdm::bind::ScalarLengthData* temp = pupildiameterbaseline_;
  pupildiameterbaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_NervousConfigurationData::_internal_mutable_pupildiameterbaseline() {
  
  if (pupildiameterbaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthData>(GetArena());
    pupildiameterbaseline_ = p;
  }
  return pupildiameterbaseline_;
}
inline ::pulse::cdm::bind::ScalarLengthData* ConfigurationData_NervousConfigurationData::mutable_pupildiameterbaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.PupilDiameterBaseline)
  return _internal_mutable_pupildiameterbaseline();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_pupildiameterbaseline(::pulse::cdm::bind::ScalarLengthData* pupildiameterbaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupildiameterbaseline_);
  }
  if (pupildiameterbaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupildiameterbaseline)->GetArena();
    if (message_arena != submessage_arena) {
      pupildiameterbaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pupildiameterbaseline, submessage_arena);
    }
    
  } else {
    
  }
  pupildiameterbaseline_ = pupildiameterbaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.PupilDiameterBaseline)
}

// .pulse.cdm.bind.ScalarData ResponseSlope = 16;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_responseslope() const {
  return this != internal_default_instance() && responseslope_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_responseslope() const {
  return _internal_has_responseslope();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::_internal_responseslope() const {
  const ::pulse::cdm::bind::ScalarData* p = responseslope_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_NervousConfigurationData::responseslope() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ResponseSlope)
  return _internal_responseslope();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_responseslope(
    ::pulse::cdm::bind::ScalarData* responseslope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responseslope_);
  }
  responseslope_ = responseslope;
  if (responseslope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ResponseSlope)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::release_responseslope() {
  
  ::pulse::cdm::bind::ScalarData* temp = responseslope_;
  responseslope_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_responseslope() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ResponseSlope)
  
  ::pulse::cdm::bind::ScalarData* temp = responseslope_;
  responseslope_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::_internal_mutable_responseslope() {
  
  if (responseslope_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    responseslope_ = p;
  }
  return responseslope_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_NervousConfigurationData::mutable_responseslope() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ResponseSlope)
  return _internal_mutable_responseslope();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_responseslope(::pulse::cdm::bind::ScalarData* responseslope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responseslope_);
  }
  if (responseslope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responseslope)->GetArena();
    if (message_arena != submessage_arena) {
      responseslope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responseslope, submessage_arena);
    }
    
  } else {
    
  }
  responseslope_ = responseslope;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.ResponseSlope)
}

// .pulse.cdm.bind.ScalarTimeData SystemicResistanceDistributedTimeDelay = 17;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_systemicresistancedistributedtimedelay() const {
  return this != internal_default_instance() && systemicresistancedistributedtimedelay_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_systemicresistancedistributedtimedelay() const {
  return _internal_has_systemicresistancedistributedtimedelay();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::_internal_systemicresistancedistributedtimedelay() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = systemicresistancedistributedtimedelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::systemicresistancedistributedtimedelay() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.SystemicResistanceDistributedTimeDelay)
  return _internal_systemicresistancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_systemicresistancedistributedtimedelay(
    ::pulse::cdm::bind::ScalarTimeData* systemicresistancedistributedtimedelay) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicresistancedistributedtimedelay_);
  }
  systemicresistancedistributedtimedelay_ = systemicresistancedistributedtimedelay;
  if (systemicresistancedistributedtimedelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.SystemicResistanceDistributedTimeDelay)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::release_systemicresistancedistributedtimedelay() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = systemicresistancedistributedtimedelay_;
  systemicresistancedistributedtimedelay_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_systemicresistancedistributedtimedelay() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.SystemicResistanceDistributedTimeDelay)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = systemicresistancedistributedtimedelay_;
  systemicresistancedistributedtimedelay_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::_internal_mutable_systemicresistancedistributedtimedelay() {
  
  if (systemicresistancedistributedtimedelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    systemicresistancedistributedtimedelay_ = p;
  }
  return systemicresistancedistributedtimedelay_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::mutable_systemicresistancedistributedtimedelay() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.SystemicResistanceDistributedTimeDelay)
  return _internal_mutable_systemicresistancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_systemicresistancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* systemicresistancedistributedtimedelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicresistancedistributedtimedelay_);
  }
  if (systemicresistancedistributedtimedelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicresistancedistributedtimedelay)->GetArena();
    if (message_arena != submessage_arena) {
      systemicresistancedistributedtimedelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemicresistancedistributedtimedelay, submessage_arena);
    }
    
  } else {
    
  }
  systemicresistancedistributedtimedelay_ = systemicresistancedistributedtimedelay;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.SystemicResistanceDistributedTimeDelay)
}

// .pulse.cdm.bind.ScalarTimeData VenousComplianceDistributedTimeDelay = 18;
inline bool ConfigurationData_NervousConfigurationData::_internal_has_venouscompliancedistributedtimedelay() const {
  return this != internal_default_instance() && venouscompliancedistributedtimedelay_ != nullptr;
}
inline bool ConfigurationData_NervousConfigurationData::has_venouscompliancedistributedtimedelay() const {
  return _internal_has_venouscompliancedistributedtimedelay();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::_internal_venouscompliancedistributedtimedelay() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = venouscompliancedistributedtimedelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_NervousConfigurationData::venouscompliancedistributedtimedelay() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.VenousComplianceDistributedTimeDelay)
  return _internal_venouscompliancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::unsafe_arena_set_allocated_venouscompliancedistributedtimedelay(
    ::pulse::cdm::bind::ScalarTimeData* venouscompliancedistributedtimedelay) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscompliancedistributedtimedelay_);
  }
  venouscompliancedistributedtimedelay_ = venouscompliancedistributedtimedelay;
  if (venouscompliancedistributedtimedelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.VenousComplianceDistributedTimeDelay)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::release_venouscompliancedistributedtimedelay() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = venouscompliancedistributedtimedelay_;
  venouscompliancedistributedtimedelay_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::unsafe_arena_release_venouscompliancedistributedtimedelay() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.VenousComplianceDistributedTimeDelay)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = venouscompliancedistributedtimedelay_;
  venouscompliancedistributedtimedelay_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::_internal_mutable_venouscompliancedistributedtimedelay() {
  
  if (venouscompliancedistributedtimedelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    venouscompliancedistributedtimedelay_ = p;
  }
  return venouscompliancedistributedtimedelay_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_NervousConfigurationData::mutable_venouscompliancedistributedtimedelay() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.VenousComplianceDistributedTimeDelay)
  return _internal_mutable_venouscompliancedistributedtimedelay();
}
inline void ConfigurationData_NervousConfigurationData::set_allocated_venouscompliancedistributedtimedelay(::pulse::cdm::bind::ScalarTimeData* venouscompliancedistributedtimedelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscompliancedistributedtimedelay_);
  }
  if (venouscompliancedistributedtimedelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscompliancedistributedtimedelay)->GetArena();
    if (message_arena != submessage_arena) {
      venouscompliancedistributedtimedelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, venouscompliancedistributedtimedelay, submessage_arena);
    }
    
  } else {
    
  }
  venouscompliancedistributedtimedelay_ = venouscompliancedistributedtimedelay;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfigurationData.VenousComplianceDistributedTimeDelay)
}

// -------------------------------------------------------------------

// ConfigurationData_RenalConfigurationData

// .pulse.cdm.bind.eSwitch EnableRenal = 1;
inline void ConfigurationData_RenalConfigurationData::clear_enablerenal() {
  enablerenal_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_RenalConfigurationData::_internal_enablerenal() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(enablerenal_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_RenalConfigurationData::enablerenal() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.EnableRenal)
  return _internal_enablerenal();
}
inline void ConfigurationData_RenalConfigurationData::_internal_set_enablerenal(::pulse::cdm::bind::eSwitch value) {
  
  enablerenal_ = value;
}
inline void ConfigurationData_RenalConfigurationData::set_enablerenal(::pulse::cdm::bind::eSwitch value) {
  _internal_set_enablerenal(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.EnableRenal)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData PlasmaSodiumConcentrationSetPoint = 2;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_plasmasodiumconcentrationsetpoint() const {
  return this != internal_default_instance() && plasmasodiumconcentrationsetpoint_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_plasmasodiumconcentrationsetpoint() const {
  return _internal_has_plasmasodiumconcentrationsetpoint();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_RenalConfigurationData::_internal_plasmasodiumconcentrationsetpoint() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = plasmasodiumconcentrationsetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_RenalConfigurationData::plasmasodiumconcentrationsetpoint() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PlasmaSodiumConcentrationSetPoint)
  return _internal_plasmasodiumconcentrationsetpoint();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_plasmasodiumconcentrationsetpoint(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* plasmasodiumconcentrationsetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmasodiumconcentrationsetpoint_);
  }
  plasmasodiumconcentrationsetpoint_ = plasmasodiumconcentrationsetpoint;
  if (plasmasodiumconcentrationsetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PlasmaSodiumConcentrationSetPoint)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::release_plasmasodiumconcentrationsetpoint() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = plasmasodiumconcentrationsetpoint_;
  plasmasodiumconcentrationsetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_plasmasodiumconcentrationsetpoint() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PlasmaSodiumConcentrationSetPoint)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = plasmasodiumconcentrationsetpoint_;
  plasmasodiumconcentrationsetpoint_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::_internal_mutable_plasmasodiumconcentrationsetpoint() {
  
  if (plasmasodiumconcentrationsetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    plasmasodiumconcentrationsetpoint_ = p;
  }
  return plasmasodiumconcentrationsetpoint_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::mutable_plasmasodiumconcentrationsetpoint() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PlasmaSodiumConcentrationSetPoint)
  return _internal_mutable_plasmasodiumconcentrationsetpoint();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_plasmasodiumconcentrationsetpoint(::pulse::cdm::bind::ScalarMassPerVolumeData* plasmasodiumconcentrationsetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmasodiumconcentrationsetpoint_);
  }
  if (plasmasodiumconcentrationsetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmasodiumconcentrationsetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      plasmasodiumconcentrationsetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plasmasodiumconcentrationsetpoint, submessage_arena);
    }
    
  } else {
    
  }
  plasmasodiumconcentrationsetpoint_ = plasmasodiumconcentrationsetpoint;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PlasmaSodiumConcentrationSetPoint)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData PeritubularPotassiumConcentrationSetPoint = 3;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_peritubularpotassiumconcentrationsetpoint() const {
  return this != internal_default_instance() && peritubularpotassiumconcentrationsetpoint_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_peritubularpotassiumconcentrationsetpoint() const {
  return _internal_has_peritubularpotassiumconcentrationsetpoint();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_RenalConfigurationData::_internal_peritubularpotassiumconcentrationsetpoint() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = peritubularpotassiumconcentrationsetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& ConfigurationData_RenalConfigurationData::peritubularpotassiumconcentrationsetpoint() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PeritubularPotassiumConcentrationSetPoint)
  return _internal_peritubularpotassiumconcentrationsetpoint();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_peritubularpotassiumconcentrationsetpoint(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* peritubularpotassiumconcentrationsetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peritubularpotassiumconcentrationsetpoint_);
  }
  peritubularpotassiumconcentrationsetpoint_ = peritubularpotassiumconcentrationsetpoint;
  if (peritubularpotassiumconcentrationsetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PeritubularPotassiumConcentrationSetPoint)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::release_peritubularpotassiumconcentrationsetpoint() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = peritubularpotassiumconcentrationsetpoint_;
  peritubularpotassiumconcentrationsetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_peritubularpotassiumconcentrationsetpoint() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PeritubularPotassiumConcentrationSetPoint)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = peritubularpotassiumconcentrationsetpoint_;
  peritubularpotassiumconcentrationsetpoint_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::_internal_mutable_peritubularpotassiumconcentrationsetpoint() {
  
  if (peritubularpotassiumconcentrationsetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    peritubularpotassiumconcentrationsetpoint_ = p;
  }
  return peritubularpotassiumconcentrationsetpoint_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* ConfigurationData_RenalConfigurationData::mutable_peritubularpotassiumconcentrationsetpoint() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PeritubularPotassiumConcentrationSetPoint)
  return _internal_mutable_peritubularpotassiumconcentrationsetpoint();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_peritubularpotassiumconcentrationsetpoint(::pulse::cdm::bind::ScalarMassPerVolumeData* peritubularpotassiumconcentrationsetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peritubularpotassiumconcentrationsetpoint_);
  }
  if (peritubularpotassiumconcentrationsetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peritubularpotassiumconcentrationsetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      peritubularpotassiumconcentrationsetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peritubularpotassiumconcentrationsetpoint, submessage_arena);
    }
    
  } else {
    
  }
  peritubularpotassiumconcentrationsetpoint_ = peritubularpotassiumconcentrationsetpoint;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.PeritubularPotassiumConcentrationSetPoint)
}

// .pulse.cdm.bind.ScalarAreaData LeftGlomerularFilteringSurfaceAreaBaseline = 4;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_leftglomerularfilteringsurfaceareabaseline() const {
  return this != internal_default_instance() && leftglomerularfilteringsurfaceareabaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_leftglomerularfilteringsurfaceareabaseline() const {
  return _internal_has_leftglomerularfilteringsurfaceareabaseline();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::_internal_leftglomerularfilteringsurfaceareabaseline() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = leftglomerularfilteringsurfaceareabaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::leftglomerularfilteringsurfaceareabaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFilteringSurfaceAreaBaseline)
  return _internal_leftglomerularfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_leftglomerularfilteringsurfaceareabaseline(
    ::pulse::cdm::bind::ScalarAreaData* leftglomerularfilteringsurfaceareabaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfilteringsurfaceareabaseline_);
  }
  leftglomerularfilteringsurfaceareabaseline_ = leftglomerularfilteringsurfaceareabaseline;
  if (leftglomerularfilteringsurfaceareabaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFilteringSurfaceAreaBaseline)
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::release_leftglomerularfilteringsurfaceareabaseline() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = leftglomerularfilteringsurfaceareabaseline_;
  leftglomerularfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_leftglomerularfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFilteringSurfaceAreaBaseline)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = leftglomerularfilteringsurfaceareabaseline_;
  leftglomerularfilteringsurfaceareabaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_leftglomerularfilteringsurfaceareabaseline() {
  
  if (leftglomerularfilteringsurfaceareabaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    leftglomerularfilteringsurfaceareabaseline_ = p;
  }
  return leftglomerularfilteringsurfaceareabaseline_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::mutable_leftglomerularfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFilteringSurfaceAreaBaseline)
  return _internal_mutable_leftglomerularfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_leftglomerularfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* leftglomerularfilteringsurfaceareabaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfilteringsurfaceareabaseline_);
  }
  if (leftglomerularfilteringsurfaceareabaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfilteringsurfaceareabaseline)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfilteringsurfaceareabaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfilteringsurfaceareabaseline, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfilteringsurfaceareabaseline_ = leftglomerularfilteringsurfaceareabaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFilteringSurfaceAreaBaseline)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeabilityBaseline = 5;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_leftglomerularfluidpermeabilitybaseline() const {
  return this != internal_default_instance() && leftglomerularfluidpermeabilitybaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_leftglomerularfluidpermeabilitybaseline() const {
  return _internal_has_leftglomerularfluidpermeabilitybaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::_internal_leftglomerularfluidpermeabilitybaseline() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = leftglomerularfluidpermeabilitybaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::leftglomerularfluidpermeabilitybaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFluidPermeabilityBaseline)
  return _internal_leftglomerularfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_leftglomerularfluidpermeabilitybaseline(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeabilitybaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeabilitybaseline_);
  }
  leftglomerularfluidpermeabilitybaseline_ = leftglomerularfluidpermeabilitybaseline;
  if (leftglomerularfluidpermeabilitybaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFluidPermeabilityBaseline)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::release_leftglomerularfluidpermeabilitybaseline() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = leftglomerularfluidpermeabilitybaseline_;
  leftglomerularfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_leftglomerularfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFluidPermeabilityBaseline)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = leftglomerularfluidpermeabilitybaseline_;
  leftglomerularfluidpermeabilitybaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_leftglomerularfluidpermeabilitybaseline() {
  
  if (leftglomerularfluidpermeabilitybaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    leftglomerularfluidpermeabilitybaseline_ = p;
  }
  return leftglomerularfluidpermeabilitybaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::mutable_leftglomerularfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFluidPermeabilityBaseline)
  return _internal_mutable_leftglomerularfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_leftglomerularfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeabilitybaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeabilitybaseline_);
  }
  if (leftglomerularfluidpermeabilitybaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeabilitybaseline)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfluidpermeabilitybaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfluidpermeabilitybaseline, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfluidpermeabilitybaseline_ = leftglomerularfluidpermeabilitybaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftGlomerularFluidPermeabilityBaseline)
}

// .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFilteringSurfaceAreaBaseline = 6;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_lefttubularreabsorptionfilteringsurfaceareabaseline() const {
  return this != internal_default_instance() && lefttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_lefttubularreabsorptionfilteringsurfaceareabaseline() const {
  return _internal_has_lefttubularreabsorptionfilteringsurfaceareabaseline();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::_internal_lefttubularreabsorptionfilteringsurfaceareabaseline() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = lefttubularreabsorptionfilteringsurfaceareabaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::lefttubularreabsorptionfilteringsurfaceareabaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFilteringSurfaceAreaBaseline)
  return _internal_lefttubularreabsorptionfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_lefttubularreabsorptionfilteringsurfaceareabaseline(
    ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfilteringsurfaceareabaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfilteringsurfaceareabaseline_);
  }
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = lefttubularreabsorptionfilteringsurfaceareabaseline;
  if (lefttubularreabsorptionfilteringsurfaceareabaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFilteringSurfaceAreaBaseline)
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::release_lefttubularreabsorptionfilteringsurfaceareabaseline() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = lefttubularreabsorptionfilteringsurfaceareabaseline_;
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_lefttubularreabsorptionfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFilteringSurfaceAreaBaseline)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = lefttubularreabsorptionfilteringsurfaceareabaseline_;
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_lefttubularreabsorptionfilteringsurfaceareabaseline() {
  
  if (lefttubularreabsorptionfilteringsurfaceareabaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    lefttubularreabsorptionfilteringsurfaceareabaseline_ = p;
  }
  return lefttubularreabsorptionfilteringsurfaceareabaseline_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::mutable_lefttubularreabsorptionfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFilteringSurfaceAreaBaseline)
  return _internal_mutable_lefttubularreabsorptionfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_lefttubularreabsorptionfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfilteringsurfaceareabaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfilteringsurfaceareabaseline_);
  }
  if (lefttubularreabsorptionfilteringsurfaceareabaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfilteringsurfaceareabaseline)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularreabsorptionfilteringsurfaceareabaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularreabsorptionfilteringsurfaceareabaseline, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularreabsorptionfilteringsurfaceareabaseline_ = lefttubularreabsorptionfilteringsurfaceareabaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFilteringSurfaceAreaBaseline)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeabilityBaseline = 7;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_lefttubularreabsorptionfluidpermeabilitybaseline() const {
  return this != internal_default_instance() && lefttubularreabsorptionfluidpermeabilitybaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_lefttubularreabsorptionfluidpermeabilitybaseline() const {
  return _internal_has_lefttubularreabsorptionfluidpermeabilitybaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::_internal_lefttubularreabsorptionfluidpermeabilitybaseline() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = lefttubularreabsorptionfluidpermeabilitybaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::lefttubularreabsorptionfluidpermeabilitybaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFluidPermeabilityBaseline)
  return _internal_lefttubularreabsorptionfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_lefttubularreabsorptionfluidpermeabilitybaseline(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeabilitybaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeabilitybaseline_);
  }
  lefttubularreabsorptionfluidpermeabilitybaseline_ = lefttubularreabsorptionfluidpermeabilitybaseline;
  if (lefttubularreabsorptionfluidpermeabilitybaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFluidPermeabilityBaseline)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::release_lefttubularreabsorptionfluidpermeabilitybaseline() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = lefttubularreabsorptionfluidpermeabilitybaseline_;
  lefttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_lefttubularreabsorptionfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFluidPermeabilityBaseline)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = lefttubularreabsorptionfluidpermeabilitybaseline_;
  lefttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_lefttubularreabsorptionfluidpermeabilitybaseline() {
  
  if (lefttubularreabsorptionfluidpermeabilitybaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    lefttubularreabsorptionfluidpermeabilitybaseline_ = p;
  }
  return lefttubularreabsorptionfluidpermeabilitybaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::mutable_lefttubularreabsorptionfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFluidPermeabilityBaseline)
  return _internal_mutable_lefttubularreabsorptionfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_lefttubularreabsorptionfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeabilitybaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeabilitybaseline_);
  }
  if (lefttubularreabsorptionfluidpermeabilitybaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeabilitybaseline)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularreabsorptionfluidpermeabilitybaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularreabsorptionfluidpermeabilitybaseline, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularreabsorptionfluidpermeabilitybaseline_ = lefttubularreabsorptionfluidpermeabilitybaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.LeftTubularReabsorptionFluidPermeabilityBaseline)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData MaximumAfferentResistance = 8;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_maximumafferentresistance() const {
  return this != internal_default_instance() && maximumafferentresistance_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_maximumafferentresistance() const {
  return _internal_has_maximumafferentresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_RenalConfigurationData::_internal_maximumafferentresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = maximumafferentresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_RenalConfigurationData::maximumafferentresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MaximumAfferentResistance)
  return _internal_maximumafferentresistance();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_maximumafferentresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* maximumafferentresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumafferentresistance_);
  }
  maximumafferentresistance_ = maximumafferentresistance;
  if (maximumafferentresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MaximumAfferentResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::release_maximumafferentresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = maximumafferentresistance_;
  maximumafferentresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_maximumafferentresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MaximumAfferentResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = maximumafferentresistance_;
  maximumafferentresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::_internal_mutable_maximumafferentresistance() {
  
  if (maximumafferentresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    maximumafferentresistance_ = p;
  }
  return maximumafferentresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::mutable_maximumafferentresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MaximumAfferentResistance)
  return _internal_mutable_maximumafferentresistance();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_maximumafferentresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* maximumafferentresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumafferentresistance_);
  }
  if (maximumafferentresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximumafferentresistance)->GetArena();
    if (message_arena != submessage_arena) {
      maximumafferentresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximumafferentresistance, submessage_arena);
    }
    
  } else {
    
  }
  maximumafferentresistance_ = maximumafferentresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MaximumAfferentResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData MinimumAfferentResistance = 9;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_minimumafferentresistance() const {
  return this != internal_default_instance() && minimumafferentresistance_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_minimumafferentresistance() const {
  return _internal_has_minimumafferentresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_RenalConfigurationData::_internal_minimumafferentresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = minimumafferentresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& ConfigurationData_RenalConfigurationData::minimumafferentresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MinimumAfferentResistance)
  return _internal_minimumafferentresistance();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_minimumafferentresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* minimumafferentresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumafferentresistance_);
  }
  minimumafferentresistance_ = minimumafferentresistance;
  if (minimumafferentresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MinimumAfferentResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::release_minimumafferentresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = minimumafferentresistance_;
  minimumafferentresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_minimumafferentresistance() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MinimumAfferentResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = minimumafferentresistance_;
  minimumafferentresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::_internal_mutable_minimumafferentresistance() {
  
  if (minimumafferentresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    minimumafferentresistance_ = p;
  }
  return minimumafferentresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* ConfigurationData_RenalConfigurationData::mutable_minimumafferentresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MinimumAfferentResistance)
  return _internal_mutable_minimumafferentresistance();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_minimumafferentresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* minimumafferentresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumafferentresistance_);
  }
  if (minimumafferentresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumafferentresistance)->GetArena();
    if (message_arena != submessage_arena) {
      minimumafferentresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimumafferentresistance, submessage_arena);
    }
    
  } else {
    
  }
  minimumafferentresistance_ = minimumafferentresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.MinimumAfferentResistance)
}

// .pulse.cdm.bind.ScalarAreaData RightGlomerularFilteringSurfaceAreaBaseline = 10;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_rightglomerularfilteringsurfaceareabaseline() const {
  return this != internal_default_instance() && rightglomerularfilteringsurfaceareabaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_rightglomerularfilteringsurfaceareabaseline() const {
  return _internal_has_rightglomerularfilteringsurfaceareabaseline();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::_internal_rightglomerularfilteringsurfaceareabaseline() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = rightglomerularfilteringsurfaceareabaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::rightglomerularfilteringsurfaceareabaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFilteringSurfaceAreaBaseline)
  return _internal_rightglomerularfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_rightglomerularfilteringsurfaceareabaseline(
    ::pulse::cdm::bind::ScalarAreaData* rightglomerularfilteringsurfaceareabaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfilteringsurfaceareabaseline_);
  }
  rightglomerularfilteringsurfaceareabaseline_ = rightglomerularfilteringsurfaceareabaseline;
  if (rightglomerularfilteringsurfaceareabaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFilteringSurfaceAreaBaseline)
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::release_rightglomerularfilteringsurfaceareabaseline() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = rightglomerularfilteringsurfaceareabaseline_;
  rightglomerularfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_rightglomerularfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFilteringSurfaceAreaBaseline)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = rightglomerularfilteringsurfaceareabaseline_;
  rightglomerularfilteringsurfaceareabaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_rightglomerularfilteringsurfaceareabaseline() {
  
  if (rightglomerularfilteringsurfaceareabaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    rightglomerularfilteringsurfaceareabaseline_ = p;
  }
  return rightglomerularfilteringsurfaceareabaseline_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::mutable_rightglomerularfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFilteringSurfaceAreaBaseline)
  return _internal_mutable_rightglomerularfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_rightglomerularfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* rightglomerularfilteringsurfaceareabaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfilteringsurfaceareabaseline_);
  }
  if (rightglomerularfilteringsurfaceareabaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfilteringsurfaceareabaseline)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfilteringsurfaceareabaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfilteringsurfaceareabaseline, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfilteringsurfaceareabaseline_ = rightglomerularfilteringsurfaceareabaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFilteringSurfaceAreaBaseline)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeabilityBaseline = 11;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_rightglomerularfluidpermeabilitybaseline() const {
  return this != internal_default_instance() && rightglomerularfluidpermeabilitybaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_rightglomerularfluidpermeabilitybaseline() const {
  return _internal_has_rightglomerularfluidpermeabilitybaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::_internal_rightglomerularfluidpermeabilitybaseline() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = rightglomerularfluidpermeabilitybaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::rightglomerularfluidpermeabilitybaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFluidPermeabilityBaseline)
  return _internal_rightglomerularfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_rightglomerularfluidpermeabilitybaseline(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeabilitybaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeabilitybaseline_);
  }
  rightglomerularfluidpermeabilitybaseline_ = rightglomerularfluidpermeabilitybaseline;
  if (rightglomerularfluidpermeabilitybaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFluidPermeabilityBaseline)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::release_rightglomerularfluidpermeabilitybaseline() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = rightglomerularfluidpermeabilitybaseline_;
  rightglomerularfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_rightglomerularfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFluidPermeabilityBaseline)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = rightglomerularfluidpermeabilitybaseline_;
  rightglomerularfluidpermeabilitybaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_rightglomerularfluidpermeabilitybaseline() {
  
  if (rightglomerularfluidpermeabilitybaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    rightglomerularfluidpermeabilitybaseline_ = p;
  }
  return rightglomerularfluidpermeabilitybaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::mutable_rightglomerularfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFluidPermeabilityBaseline)
  return _internal_mutable_rightglomerularfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_rightglomerularfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeabilitybaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeabilitybaseline_);
  }
  if (rightglomerularfluidpermeabilitybaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeabilitybaseline)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfluidpermeabilitybaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfluidpermeabilitybaseline, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfluidpermeabilitybaseline_ = rightglomerularfluidpermeabilitybaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightGlomerularFluidPermeabilityBaseline)
}

// .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFilteringSurfaceAreaBaseline = 12;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_righttubularreabsorptionfilteringsurfaceareabaseline() const {
  return this != internal_default_instance() && righttubularreabsorptionfilteringsurfaceareabaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_righttubularreabsorptionfilteringsurfaceareabaseline() const {
  return _internal_has_righttubularreabsorptionfilteringsurfaceareabaseline();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::_internal_righttubularreabsorptionfilteringsurfaceareabaseline() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = righttubularreabsorptionfilteringsurfaceareabaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ConfigurationData_RenalConfigurationData::righttubularreabsorptionfilteringsurfaceareabaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFilteringSurfaceAreaBaseline)
  return _internal_righttubularreabsorptionfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_righttubularreabsorptionfilteringsurfaceareabaseline(
    ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfilteringsurfaceareabaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfilteringsurfaceareabaseline_);
  }
  righttubularreabsorptionfilteringsurfaceareabaseline_ = righttubularreabsorptionfilteringsurfaceareabaseline;
  if (righttubularreabsorptionfilteringsurfaceareabaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFilteringSurfaceAreaBaseline)
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::release_righttubularreabsorptionfilteringsurfaceareabaseline() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = righttubularreabsorptionfilteringsurfaceareabaseline_;
  righttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_righttubularreabsorptionfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFilteringSurfaceAreaBaseline)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = righttubularreabsorptionfilteringsurfaceareabaseline_;
  righttubularreabsorptionfilteringsurfaceareabaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_righttubularreabsorptionfilteringsurfaceareabaseline() {
  
  if (righttubularreabsorptionfilteringsurfaceareabaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    righttubularreabsorptionfilteringsurfaceareabaseline_ = p;
  }
  return righttubularreabsorptionfilteringsurfaceareabaseline_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ConfigurationData_RenalConfigurationData::mutable_righttubularreabsorptionfilteringsurfaceareabaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFilteringSurfaceAreaBaseline)
  return _internal_mutable_righttubularreabsorptionfilteringsurfaceareabaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_righttubularreabsorptionfilteringsurfaceareabaseline(::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfilteringsurfaceareabaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfilteringsurfaceareabaseline_);
  }
  if (righttubularreabsorptionfilteringsurfaceareabaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfilteringsurfaceareabaseline)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularreabsorptionfilteringsurfaceareabaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularreabsorptionfilteringsurfaceareabaseline, submessage_arena);
    }
    
  } else {
    
  }
  righttubularreabsorptionfilteringsurfaceareabaseline_ = righttubularreabsorptionfilteringsurfaceareabaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFilteringSurfaceAreaBaseline)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeabilityBaseline = 13;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_righttubularreabsorptionfluidpermeabilitybaseline() const {
  return this != internal_default_instance() && righttubularreabsorptionfluidpermeabilitybaseline_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_righttubularreabsorptionfluidpermeabilitybaseline() const {
  return _internal_has_righttubularreabsorptionfluidpermeabilitybaseline();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::_internal_righttubularreabsorptionfluidpermeabilitybaseline() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = righttubularreabsorptionfluidpermeabilitybaseline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& ConfigurationData_RenalConfigurationData::righttubularreabsorptionfluidpermeabilitybaseline() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFluidPermeabilityBaseline)
  return _internal_righttubularreabsorptionfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_righttubularreabsorptionfluidpermeabilitybaseline(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeabilitybaseline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeabilitybaseline_);
  }
  righttubularreabsorptionfluidpermeabilitybaseline_ = righttubularreabsorptionfluidpermeabilitybaseline;
  if (righttubularreabsorptionfluidpermeabilitybaseline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFluidPermeabilityBaseline)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::release_righttubularreabsorptionfluidpermeabilitybaseline() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = righttubularreabsorptionfluidpermeabilitybaseline_;
  righttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_righttubularreabsorptionfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFluidPermeabilityBaseline)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = righttubularreabsorptionfluidpermeabilitybaseline_;
  righttubularreabsorptionfluidpermeabilitybaseline_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::_internal_mutable_righttubularreabsorptionfluidpermeabilitybaseline() {
  
  if (righttubularreabsorptionfluidpermeabilitybaseline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    righttubularreabsorptionfluidpermeabilitybaseline_ = p;
  }
  return righttubularreabsorptionfluidpermeabilitybaseline_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* ConfigurationData_RenalConfigurationData::mutable_righttubularreabsorptionfluidpermeabilitybaseline() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFluidPermeabilityBaseline)
  return _internal_mutable_righttubularreabsorptionfluidpermeabilitybaseline();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_righttubularreabsorptionfluidpermeabilitybaseline(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeabilitybaseline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeabilitybaseline_);
  }
  if (righttubularreabsorptionfluidpermeabilitybaseline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeabilitybaseline)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularreabsorptionfluidpermeabilitybaseline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularreabsorptionfluidpermeabilitybaseline, submessage_arena);
    }
    
  } else {
    
  }
  righttubularreabsorptionfluidpermeabilitybaseline_ = righttubularreabsorptionfluidpermeabilitybaseline;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.RightTubularReabsorptionFluidPermeabilityBaseline)
}

// .pulse.cdm.bind.ScalarMassPerTimeData TargetSodiumDelivery = 14;
inline bool ConfigurationData_RenalConfigurationData::_internal_has_targetsodiumdelivery() const {
  return this != internal_default_instance() && targetsodiumdelivery_ != nullptr;
}
inline bool ConfigurationData_RenalConfigurationData::has_targetsodiumdelivery() const {
  return _internal_has_targetsodiumdelivery();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_RenalConfigurationData::_internal_targetsodiumdelivery() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = targetsodiumdelivery_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& ConfigurationData_RenalConfigurationData::targetsodiumdelivery() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.TargetSodiumDelivery)
  return _internal_targetsodiumdelivery();
}
inline void ConfigurationData_RenalConfigurationData::unsafe_arena_set_allocated_targetsodiumdelivery(
    ::pulse::cdm::bind::ScalarMassPerTimeData* targetsodiumdelivery) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetsodiumdelivery_);
  }
  targetsodiumdelivery_ = targetsodiumdelivery;
  if (targetsodiumdelivery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.TargetSodiumDelivery)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_RenalConfigurationData::release_targetsodiumdelivery() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = targetsodiumdelivery_;
  targetsodiumdelivery_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_RenalConfigurationData::unsafe_arena_release_targetsodiumdelivery() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.TargetSodiumDelivery)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = targetsodiumdelivery_;
  targetsodiumdelivery_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_RenalConfigurationData::_internal_mutable_targetsodiumdelivery() {
  
  if (targetsodiumdelivery_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    targetsodiumdelivery_ = p;
  }
  return targetsodiumdelivery_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* ConfigurationData_RenalConfigurationData::mutable_targetsodiumdelivery() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.TargetSodiumDelivery)
  return _internal_mutable_targetsodiumdelivery();
}
inline void ConfigurationData_RenalConfigurationData::set_allocated_targetsodiumdelivery(::pulse::cdm::bind::ScalarMassPerTimeData* targetsodiumdelivery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetsodiumdelivery_);
  }
  if (targetsodiumdelivery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetsodiumdelivery)->GetArena();
    if (message_arena != submessage_arena) {
      targetsodiumdelivery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetsodiumdelivery, submessage_arena);
    }
    
  } else {
    
  }
  targetsodiumdelivery_ = targetsodiumdelivery;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfigurationData.TargetSodiumDelivery)
}

// -------------------------------------------------------------------

// ConfigurationData_RespiratoryConfigurationData

// .pulse.cdm.bind.ScalarPressureData CentralControllerCO2PressureSetPoint = 1;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_centralcontrollerco2pressuresetpoint() const {
  return this != internal_default_instance() && centralcontrollerco2pressuresetpoint_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_centralcontrollerco2pressuresetpoint() const {
  return _internal_has_centralcontrollerco2pressuresetpoint();
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::_internal_centralcontrollerco2pressuresetpoint() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = centralcontrollerco2pressuresetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::centralcontrollerco2pressuresetpoint() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralControllerCO2PressureSetPoint)
  return _internal_centralcontrollerco2pressuresetpoint();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_centralcontrollerco2pressuresetpoint(
    ::pulse::cdm::bind::ScalarPressureData* centralcontrollerco2pressuresetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralcontrollerco2pressuresetpoint_);
  }
  centralcontrollerco2pressuresetpoint_ = centralcontrollerco2pressuresetpoint;
  if (centralcontrollerco2pressuresetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralControllerCO2PressureSetPoint)
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::release_centralcontrollerco2pressuresetpoint() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = centralcontrollerco2pressuresetpoint_;
  centralcontrollerco2pressuresetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_centralcontrollerco2pressuresetpoint() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralControllerCO2PressureSetPoint)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = centralcontrollerco2pressuresetpoint_;
  centralcontrollerco2pressuresetpoint_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_centralcontrollerco2pressuresetpoint() {
  
  if (centralcontrollerco2pressuresetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    centralcontrollerco2pressuresetpoint_ = p;
  }
  return centralcontrollerco2pressuresetpoint_;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::mutable_centralcontrollerco2pressuresetpoint() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralControllerCO2PressureSetPoint)
  return _internal_mutable_centralcontrollerco2pressuresetpoint();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_centralcontrollerco2pressuresetpoint(::pulse::cdm::bind::ScalarPressureData* centralcontrollerco2pressuresetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralcontrollerco2pressuresetpoint_);
  }
  if (centralcontrollerco2pressuresetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralcontrollerco2pressuresetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      centralcontrollerco2pressuresetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centralcontrollerco2pressuresetpoint, submessage_arena);
    }
    
  } else {
    
  }
  centralcontrollerco2pressuresetpoint_ = centralcontrollerco2pressuresetpoint;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralControllerCO2PressureSetPoint)
}

// .pulse.cdm.bind.ScalarData CentralVentilatoryControllerGain = 2;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_centralventilatorycontrollergain() const {
  return this != internal_default_instance() && centralventilatorycontrollergain_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_centralventilatorycontrollergain() const {
  return _internal_has_centralventilatorycontrollergain();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_RespiratoryConfigurationData::_internal_centralventilatorycontrollergain() const {
  const ::pulse::cdm::bind::ScalarData* p = centralventilatorycontrollergain_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_RespiratoryConfigurationData::centralventilatorycontrollergain() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralVentilatoryControllerGain)
  return _internal_centralventilatorycontrollergain();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_centralventilatorycontrollergain(
    ::pulse::cdm::bind::ScalarData* centralventilatorycontrollergain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralventilatorycontrollergain_);
  }
  centralventilatorycontrollergain_ = centralventilatorycontrollergain;
  if (centralventilatorycontrollergain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralVentilatoryControllerGain)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::release_centralventilatorycontrollergain() {
  
  ::pulse::cdm::bind::ScalarData* temp = centralventilatorycontrollergain_;
  centralventilatorycontrollergain_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_centralventilatorycontrollergain() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralVentilatoryControllerGain)
  
  ::pulse::cdm::bind::ScalarData* temp = centralventilatorycontrollergain_;
  centralventilatorycontrollergain_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_centralventilatorycontrollergain() {
  
  if (centralventilatorycontrollergain_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    centralventilatorycontrollergain_ = p;
  }
  return centralventilatorycontrollergain_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::mutable_centralventilatorycontrollergain() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralVentilatoryControllerGain)
  return _internal_mutable_centralventilatorycontrollergain();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_centralventilatorycontrollergain(::pulse::cdm::bind::ScalarData* centralventilatorycontrollergain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralventilatorycontrollergain_);
  }
  if (centralventilatorycontrollergain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralventilatorycontrollergain)->GetArena();
    if (message_arena != submessage_arena) {
      centralventilatorycontrollergain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centralventilatorycontrollergain, submessage_arena);
    }
    
  } else {
    
  }
  centralventilatorycontrollergain_ = centralventilatorycontrollergain;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.CentralVentilatoryControllerGain)
}

// .pulse.cdm.bind.ScalarVolumeData MinimumAllowableTidalVolume = 3;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_minimumallowabletidalvolume() const {
  return this != internal_default_instance() && minimumallowabletidalvolume_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_minimumallowabletidalvolume() const {
  return _internal_has_minimumallowabletidalvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_RespiratoryConfigurationData::_internal_minimumallowabletidalvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = minimumallowabletidalvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_RespiratoryConfigurationData::minimumallowabletidalvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableTidalVolume)
  return _internal_minimumallowabletidalvolume();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_minimumallowabletidalvolume(
    ::pulse::cdm::bind::ScalarVolumeData* minimumallowabletidalvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowabletidalvolume_);
  }
  minimumallowabletidalvolume_ = minimumallowabletidalvolume;
  if (minimumallowabletidalvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableTidalVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::release_minimumallowabletidalvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = minimumallowabletidalvolume_;
  minimumallowabletidalvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_minimumallowabletidalvolume() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableTidalVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = minimumallowabletidalvolume_;
  minimumallowabletidalvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_minimumallowabletidalvolume() {
  
  if (minimumallowabletidalvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    minimumallowabletidalvolume_ = p;
  }
  return minimumallowabletidalvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::mutable_minimumallowabletidalvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableTidalVolume)
  return _internal_mutable_minimumallowabletidalvolume();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_minimumallowabletidalvolume(::pulse::cdm::bind::ScalarVolumeData* minimumallowabletidalvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowabletidalvolume_);
  }
  if (minimumallowabletidalvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowabletidalvolume)->GetArena();
    if (message_arena != submessage_arena) {
      minimumallowabletidalvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimumallowabletidalvolume, submessage_arena);
    }
    
  } else {
    
  }
  minimumallowabletidalvolume_ = minimumallowabletidalvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableTidalVolume)
}

// .pulse.cdm.bind.ScalarTimeData MinimumAllowableInspiratoryAndExpiratoryPeriod = 4;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_minimumallowableinspiratoryandexpiratoryperiod() const {
  return this != internal_default_instance() && minimumallowableinspiratoryandexpiratoryperiod_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_minimumallowableinspiratoryandexpiratoryperiod() const {
  return _internal_has_minimumallowableinspiratoryandexpiratoryperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_RespiratoryConfigurationData::_internal_minimumallowableinspiratoryandexpiratoryperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = minimumallowableinspiratoryandexpiratoryperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData_RespiratoryConfigurationData::minimumallowableinspiratoryandexpiratoryperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableInspiratoryAndExpiratoryPeriod)
  return _internal_minimumallowableinspiratoryandexpiratoryperiod();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_minimumallowableinspiratoryandexpiratoryperiod(
    ::pulse::cdm::bind::ScalarTimeData* minimumallowableinspiratoryandexpiratoryperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowableinspiratoryandexpiratoryperiod_);
  }
  minimumallowableinspiratoryandexpiratoryperiod_ = minimumallowableinspiratoryandexpiratoryperiod;
  if (minimumallowableinspiratoryandexpiratoryperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableInspiratoryAndExpiratoryPeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_RespiratoryConfigurationData::release_minimumallowableinspiratoryandexpiratoryperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = minimumallowableinspiratoryandexpiratoryperiod_;
  minimumallowableinspiratoryandexpiratoryperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_minimumallowableinspiratoryandexpiratoryperiod() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableInspiratoryAndExpiratoryPeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = minimumallowableinspiratoryandexpiratoryperiod_;
  minimumallowableinspiratoryandexpiratoryperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_minimumallowableinspiratoryandexpiratoryperiod() {
  
  if (minimumallowableinspiratoryandexpiratoryperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    minimumallowableinspiratoryandexpiratoryperiod_ = p;
  }
  return minimumallowableinspiratoryandexpiratoryperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData_RespiratoryConfigurationData::mutable_minimumallowableinspiratoryandexpiratoryperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableInspiratoryAndExpiratoryPeriod)
  return _internal_mutable_minimumallowableinspiratoryandexpiratoryperiod();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_minimumallowableinspiratoryandexpiratoryperiod(::pulse::cdm::bind::ScalarTimeData* minimumallowableinspiratoryandexpiratoryperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowableinspiratoryandexpiratoryperiod_);
  }
  if (minimumallowableinspiratoryandexpiratoryperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimumallowableinspiratoryandexpiratoryperiod)->GetArena();
    if (message_arena != submessage_arena) {
      minimumallowableinspiratoryandexpiratoryperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimumallowableinspiratoryandexpiratoryperiod, submessage_arena);
    }
    
  } else {
    
  }
  minimumallowableinspiratoryandexpiratoryperiod_ = minimumallowableinspiratoryandexpiratoryperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.MinimumAllowableInspiratoryAndExpiratoryPeriod)
}

// .pulse.cdm.bind.ScalarPressureData PeripheralControllerCO2PressureSetPoint = 5;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_peripheralcontrollerco2pressuresetpoint() const {
  return this != internal_default_instance() && peripheralcontrollerco2pressuresetpoint_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_peripheralcontrollerco2pressuresetpoint() const {
  return _internal_has_peripheralcontrollerco2pressuresetpoint();
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::_internal_peripheralcontrollerco2pressuresetpoint() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = peripheralcontrollerco2pressuresetpoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::peripheralcontrollerco2pressuresetpoint() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralControllerCO2PressureSetPoint)
  return _internal_peripheralcontrollerco2pressuresetpoint();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_peripheralcontrollerco2pressuresetpoint(
    ::pulse::cdm::bind::ScalarPressureData* peripheralcontrollerco2pressuresetpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralcontrollerco2pressuresetpoint_);
  }
  peripheralcontrollerco2pressuresetpoint_ = peripheralcontrollerco2pressuresetpoint;
  if (peripheralcontrollerco2pressuresetpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralControllerCO2PressureSetPoint)
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::release_peripheralcontrollerco2pressuresetpoint() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peripheralcontrollerco2pressuresetpoint_;
  peripheralcontrollerco2pressuresetpoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_peripheralcontrollerco2pressuresetpoint() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralControllerCO2PressureSetPoint)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peripheralcontrollerco2pressuresetpoint_;
  peripheralcontrollerco2pressuresetpoint_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_peripheralcontrollerco2pressuresetpoint() {
  
  if (peripheralcontrollerco2pressuresetpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    peripheralcontrollerco2pressuresetpoint_ = p;
  }
  return peripheralcontrollerco2pressuresetpoint_;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::mutable_peripheralcontrollerco2pressuresetpoint() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralControllerCO2PressureSetPoint)
  return _internal_mutable_peripheralcontrollerco2pressuresetpoint();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_peripheralcontrollerco2pressuresetpoint(::pulse::cdm::bind::ScalarPressureData* peripheralcontrollerco2pressuresetpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralcontrollerco2pressuresetpoint_);
  }
  if (peripheralcontrollerco2pressuresetpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralcontrollerco2pressuresetpoint)->GetArena();
    if (message_arena != submessage_arena) {
      peripheralcontrollerco2pressuresetpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peripheralcontrollerco2pressuresetpoint, submessage_arena);
    }
    
  } else {
    
  }
  peripheralcontrollerco2pressuresetpoint_ = peripheralcontrollerco2pressuresetpoint;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralControllerCO2PressureSetPoint)
}

// .pulse.cdm.bind.ScalarData PeripheralVentilatoryControllerGain = 6;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_peripheralventilatorycontrollergain() const {
  return this != internal_default_instance() && peripheralventilatorycontrollergain_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_peripheralventilatorycontrollergain() const {
  return _internal_has_peripheralventilatorycontrollergain();
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_RespiratoryConfigurationData::_internal_peripheralventilatorycontrollergain() const {
  const ::pulse::cdm::bind::ScalarData* p = peripheralventilatorycontrollergain_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& ConfigurationData_RespiratoryConfigurationData::peripheralventilatorycontrollergain() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralVentilatoryControllerGain)
  return _internal_peripheralventilatorycontrollergain();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_peripheralventilatorycontrollergain(
    ::pulse::cdm::bind::ScalarData* peripheralventilatorycontrollergain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralventilatorycontrollergain_);
  }
  peripheralventilatorycontrollergain_ = peripheralventilatorycontrollergain;
  if (peripheralventilatorycontrollergain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralVentilatoryControllerGain)
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::release_peripheralventilatorycontrollergain() {
  
  ::pulse::cdm::bind::ScalarData* temp = peripheralventilatorycontrollergain_;
  peripheralventilatorycontrollergain_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_peripheralventilatorycontrollergain() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralVentilatoryControllerGain)
  
  ::pulse::cdm::bind::ScalarData* temp = peripheralventilatorycontrollergain_;
  peripheralventilatorycontrollergain_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_peripheralventilatorycontrollergain() {
  
  if (peripheralventilatorycontrollergain_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    peripheralventilatorycontrollergain_ = p;
  }
  return peripheralventilatorycontrollergain_;
}
inline ::pulse::cdm::bind::ScalarData* ConfigurationData_RespiratoryConfigurationData::mutable_peripheralventilatorycontrollergain() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralVentilatoryControllerGain)
  return _internal_mutable_peripheralventilatorycontrollergain();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_peripheralventilatorycontrollergain(::pulse::cdm::bind::ScalarData* peripheralventilatorycontrollergain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralventilatorycontrollergain_);
  }
  if (peripheralventilatorycontrollergain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peripheralventilatorycontrollergain)->GetArena();
    if (message_arena != submessage_arena) {
      peripheralventilatorycontrollergain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peripheralventilatorycontrollergain, submessage_arena);
    }
    
  } else {
    
  }
  peripheralventilatorycontrollergain_ = peripheralventilatorycontrollergain;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PeripheralVentilatoryControllerGain)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryVentilationRateMaximum = 7;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_pulmonaryventilationratemaximum() const {
  return this != internal_default_instance() && pulmonaryventilationratemaximum_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_pulmonaryventilationratemaximum() const {
  return _internal_has_pulmonaryventilationratemaximum();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& ConfigurationData_RespiratoryConfigurationData::_internal_pulmonaryventilationratemaximum() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = pulmonaryventilationratemaximum_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& ConfigurationData_RespiratoryConfigurationData::pulmonaryventilationratemaximum() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PulmonaryVentilationRateMaximum)
  return _internal_pulmonaryventilationratemaximum();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_pulmonaryventilationratemaximum(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonaryventilationratemaximum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryventilationratemaximum_);
  }
  pulmonaryventilationratemaximum_ = pulmonaryventilationratemaximum;
  if (pulmonaryventilationratemaximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PulmonaryVentilationRateMaximum)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_RespiratoryConfigurationData::release_pulmonaryventilationratemaximum() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonaryventilationratemaximum_;
  pulmonaryventilationratemaximum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_pulmonaryventilationratemaximum() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PulmonaryVentilationRateMaximum)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonaryventilationratemaximum_;
  pulmonaryventilationratemaximum_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_pulmonaryventilationratemaximum() {
  
  if (pulmonaryventilationratemaximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    pulmonaryventilationratemaximum_ = p;
  }
  return pulmonaryventilationratemaximum_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* ConfigurationData_RespiratoryConfigurationData::mutable_pulmonaryventilationratemaximum() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PulmonaryVentilationRateMaximum)
  return _internal_mutable_pulmonaryventilationratemaximum();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_pulmonaryventilationratemaximum(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonaryventilationratemaximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryventilationratemaximum_);
  }
  if (pulmonaryventilationratemaximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryventilationratemaximum)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryventilationratemaximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryventilationratemaximum, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryventilationratemaximum_ = pulmonaryventilationratemaximum;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.PulmonaryVentilationRateMaximum)
}

// .pulse.cdm.bind.ScalarVolumeData VentilationTidalVolumeIntercept = 8;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_ventilationtidalvolumeintercept() const {
  return this != internal_default_instance() && ventilationtidalvolumeintercept_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_ventilationtidalvolumeintercept() const {
  return _internal_has_ventilationtidalvolumeintercept();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_RespiratoryConfigurationData::_internal_ventilationtidalvolumeintercept() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = ventilationtidalvolumeintercept_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& ConfigurationData_RespiratoryConfigurationData::ventilationtidalvolumeintercept() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilationTidalVolumeIntercept)
  return _internal_ventilationtidalvolumeintercept();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_ventilationtidalvolumeintercept(
    ::pulse::cdm::bind::ScalarVolumeData* ventilationtidalvolumeintercept) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilationtidalvolumeintercept_);
  }
  ventilationtidalvolumeintercept_ = ventilationtidalvolumeintercept;
  if (ventilationtidalvolumeintercept) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilationTidalVolumeIntercept)
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::release_ventilationtidalvolumeintercept() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = ventilationtidalvolumeintercept_;
  ventilationtidalvolumeintercept_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_ventilationtidalvolumeintercept() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilationTidalVolumeIntercept)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = ventilationtidalvolumeintercept_;
  ventilationtidalvolumeintercept_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_ventilationtidalvolumeintercept() {
  
  if (ventilationtidalvolumeintercept_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    ventilationtidalvolumeintercept_ = p;
  }
  return ventilationtidalvolumeintercept_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* ConfigurationData_RespiratoryConfigurationData::mutable_ventilationtidalvolumeintercept() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilationTidalVolumeIntercept)
  return _internal_mutable_ventilationtidalvolumeintercept();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_ventilationtidalvolumeintercept(::pulse::cdm::bind::ScalarVolumeData* ventilationtidalvolumeintercept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilationtidalvolumeintercept_);
  }
  if (ventilationtidalvolumeintercept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilationtidalvolumeintercept)->GetArena();
    if (message_arena != submessage_arena) {
      ventilationtidalvolumeintercept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ventilationtidalvolumeintercept, submessage_arena);
    }
    
  } else {
    
  }
  ventilationtidalvolumeintercept_ = ventilationtidalvolumeintercept;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilationTidalVolumeIntercept)
}

// .pulse.cdm.bind.ScalarPressureData VentilatoryOcclusionPressure = 9;
inline bool ConfigurationData_RespiratoryConfigurationData::_internal_has_ventilatoryocclusionpressure() const {
  return this != internal_default_instance() && ventilatoryocclusionpressure_ != nullptr;
}
inline bool ConfigurationData_RespiratoryConfigurationData::has_ventilatoryocclusionpressure() const {
  return _internal_has_ventilatoryocclusionpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::_internal_ventilatoryocclusionpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = ventilatoryocclusionpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& ConfigurationData_RespiratoryConfigurationData::ventilatoryocclusionpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilatoryOcclusionPressure)
  return _internal_ventilatoryocclusionpressure();
}
inline void ConfigurationData_RespiratoryConfigurationData::unsafe_arena_set_allocated_ventilatoryocclusionpressure(
    ::pulse::cdm::bind::ScalarPressureData* ventilatoryocclusionpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilatoryocclusionpressure_);
  }
  ventilatoryocclusionpressure_ = ventilatoryocclusionpressure;
  if (ventilatoryocclusionpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilatoryOcclusionPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::release_ventilatoryocclusionpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = ventilatoryocclusionpressure_;
  ventilatoryocclusionpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::unsafe_arena_release_ventilatoryocclusionpressure() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilatoryOcclusionPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = ventilatoryocclusionpressure_;
  ventilatoryocclusionpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::_internal_mutable_ventilatoryocclusionpressure() {
  
  if (ventilatoryocclusionpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    ventilatoryocclusionpressure_ = p;
  }
  return ventilatoryocclusionpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* ConfigurationData_RespiratoryConfigurationData::mutable_ventilatoryocclusionpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilatoryOcclusionPressure)
  return _internal_mutable_ventilatoryocclusionpressure();
}
inline void ConfigurationData_RespiratoryConfigurationData::set_allocated_ventilatoryocclusionpressure(::pulse::cdm::bind::ScalarPressureData* ventilatoryocclusionpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilatoryocclusionpressure_);
  }
  if (ventilatoryocclusionpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ventilatoryocclusionpressure)->GetArena();
    if (message_arena != submessage_arena) {
      ventilatoryocclusionpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ventilatoryocclusionpressure, submessage_arena);
    }
    
  } else {
    
  }
  ventilatoryocclusionpressure_ = ventilatoryocclusionpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData.VentilatoryOcclusionPressure)
}

// -------------------------------------------------------------------

// ConfigurationData_TissueConfigurationData

// .pulse.cdm.bind.eSwitch EnableTissue = 1;
inline void ConfigurationData_TissueConfigurationData::clear_enabletissue() {
  enabletissue_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_TissueConfigurationData::_internal_enabletissue() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(enabletissue_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData_TissueConfigurationData::enabletissue() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.TissueConfigurationData.EnableTissue)
  return _internal_enabletissue();
}
inline void ConfigurationData_TissueConfigurationData::_internal_set_enabletissue(::pulse::cdm::bind::eSwitch value) {
  
  enabletissue_ = value;
}
inline void ConfigurationData_TissueConfigurationData::set_enabletissue(::pulse::cdm::bind::eSwitch value) {
  _internal_set_enabletissue(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.TissueConfigurationData.EnableTissue)
}

// -------------------------------------------------------------------

// ConfigurationData

// .pulse.cdm.bind.ScalarTimeData TimeStep = 1;
inline bool ConfigurationData::_internal_has_timestep() const {
  return this != internal_default_instance() && timestep_ != nullptr;
}
inline bool ConfigurationData::has_timestep() const {
  return _internal_has_timestep();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData::_internal_timestep() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = timestep_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ConfigurationData::timestep() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.TimeStep)
  return _internal_timestep();
}
inline void ConfigurationData::unsafe_arena_set_allocated_timestep(
    ::pulse::cdm::bind::ScalarTimeData* timestep) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep_);
  }
  timestep_ = timestep;
  if (timestep) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.TimeStep)
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData::release_timestep() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = timestep_;
  timestep_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData::unsafe_arena_release_timestep() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.TimeStep)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = timestep_;
  timestep_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData::_internal_mutable_timestep() {
  
  if (timestep_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    timestep_ = p;
  }
  return timestep_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ConfigurationData::mutable_timestep() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.TimeStep)
  return _internal_mutable_timestep();
}
inline void ConfigurationData::set_allocated_timestep(::pulse::cdm::bind::ScalarTimeData* timestep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep_);
  }
  if (timestep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep)->GetArena();
    if (message_arena != submessage_arena) {
      timestep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestep, submessage_arena);
    }
    
  } else {
    
  }
  timestep_ = timestep;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.TimeStep)
}

// .pulse.cdm.bind.eSwitch AllowDynamicTimeStep = 2;
inline void ConfigurationData::clear_allowdynamictimestep() {
  allowdynamictimestep_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData::_internal_allowdynamictimestep() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(allowdynamictimestep_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData::allowdynamictimestep() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.AllowDynamicTimeStep)
  return _internal_allowdynamictimestep();
}
inline void ConfigurationData::_internal_set_allowdynamictimestep(::pulse::cdm::bind::eSwitch value) {
  
  allowdynamictimestep_ = value;
}
inline void ConfigurationData::set_allowdynamictimestep(::pulse::cdm::bind::eSwitch value) {
  _internal_set_allowdynamictimestep(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.AllowDynamicTimeStep)
}

// string StabilizationFileName = 3;
inline bool ConfigurationData::_internal_has_stabilizationfilename() const {
  return StabilizationCriteria_case() == kStabilizationFileName;
}
inline void ConfigurationData::set_has_stabilizationfilename() {
  _oneof_case_[0] = kStabilizationFileName;
}
inline void ConfigurationData::clear_stabilizationfilename() {
  if (_internal_has_stabilizationfilename()) {
    StabilizationCriteria_.stabilizationfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_StabilizationCriteria();
  }
}
inline const std::string& ConfigurationData::stabilizationfilename() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
  return _internal_stabilizationfilename();
}
inline void ConfigurationData::set_stabilizationfilename(const std::string& value) {
  _internal_set_stabilizationfilename(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
}
inline std::string* ConfigurationData::mutable_stabilizationfilename() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
  return _internal_mutable_stabilizationfilename();
}
inline const std::string& ConfigurationData::_internal_stabilizationfilename() const {
  if (_internal_has_stabilizationfilename()) {
    return StabilizationCriteria_.stabilizationfilename_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigurationData::_internal_set_stabilizationfilename(const std::string& value) {
  if (!_internal_has_stabilizationfilename()) {
    clear_StabilizationCriteria();
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StabilizationCriteria_.stabilizationfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigurationData::set_stabilizationfilename(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
  if (!_internal_has_stabilizationfilename()) {
    clear_StabilizationCriteria();
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StabilizationCriteria_.stabilizationfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
}
inline void ConfigurationData::set_stabilizationfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_stabilizationfilename()) {
    clear_StabilizationCriteria();
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StabilizationCriteria_.stabilizationfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
}
inline void ConfigurationData::set_stabilizationfilename(const char* value,
                             size_t size) {
  if (!_internal_has_stabilizationfilename()) {
    clear_StabilizationCriteria();
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  StabilizationCriteria_.stabilizationfilename_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
}
inline std::string* ConfigurationData::_internal_mutable_stabilizationfilename() {
  if (!_internal_has_stabilizationfilename()) {
    clear_StabilizationCriteria();
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return StabilizationCriteria_.stabilizationfilename_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigurationData::release_stabilizationfilename() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
  if (_internal_has_stabilizationfilename()) {
    clear_has_StabilizationCriteria();
    return StabilizationCriteria_.stabilizationfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConfigurationData::set_allocated_stabilizationfilename(std::string* stabilizationfilename) {
  if (has_StabilizationCriteria()) {
    clear_StabilizationCriteria();
  }
  if (stabilizationfilename != nullptr) {
    set_has_stabilizationfilename();
    StabilizationCriteria_.stabilizationfilename_.UnsafeSetDefault(stabilizationfilename);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(stabilizationfilename);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.StabilizationFileName)
}

// .pulse.cdm.bind.TimedStabilizationData TimedStabilization = 4;
inline bool ConfigurationData::_internal_has_timedstabilization() const {
  return StabilizationCriteria_case() == kTimedStabilization;
}
inline bool ConfigurationData::has_timedstabilization() const {
  return _internal_has_timedstabilization();
}
inline void ConfigurationData::set_has_timedstabilization() {
  _oneof_case_[0] = kTimedStabilization;
}
inline ::pulse::cdm::bind::TimedStabilizationData* ConfigurationData::release_timedstabilization() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.TimedStabilization)
  if (_internal_has_timedstabilization()) {
    clear_has_StabilizationCriteria();
      ::pulse::cdm::bind::TimedStabilizationData* temp = StabilizationCriteria_.timedstabilization_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StabilizationCriteria_.timedstabilization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::TimedStabilizationData& ConfigurationData::_internal_timedstabilization() const {
  return _internal_has_timedstabilization()
      ? *StabilizationCriteria_.timedstabilization_
      : reinterpret_cast< ::pulse::cdm::bind::TimedStabilizationData&>(::pulse::cdm::bind::_TimedStabilizationData_default_instance_);
}
inline const ::pulse::cdm::bind::TimedStabilizationData& ConfigurationData::timedstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.TimedStabilization)
  return _internal_timedstabilization();
}
inline ::pulse::cdm::bind::TimedStabilizationData* ConfigurationData::unsafe_arena_release_timedstabilization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cpm.bind.ConfigurationData.TimedStabilization)
  if (_internal_has_timedstabilization()) {
    clear_has_StabilizationCriteria();
    ::pulse::cdm::bind::TimedStabilizationData* temp = StabilizationCriteria_.timedstabilization_;
    StabilizationCriteria_.timedstabilization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigurationData::unsafe_arena_set_allocated_timedstabilization(::pulse::cdm::bind::TimedStabilizationData* timedstabilization) {
  clear_StabilizationCriteria();
  if (timedstabilization) {
    set_has_timedstabilization();
    StabilizationCriteria_.timedstabilization_ = timedstabilization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.TimedStabilization)
}
inline ::pulse::cdm::bind::TimedStabilizationData* ConfigurationData::_internal_mutable_timedstabilization() {
  if (!_internal_has_timedstabilization()) {
    clear_StabilizationCriteria();
    set_has_timedstabilization();
    StabilizationCriteria_.timedstabilization_ = CreateMaybeMessage< ::pulse::cdm::bind::TimedStabilizationData >(GetArena());
  }
  return StabilizationCriteria_.timedstabilization_;
}
inline ::pulse::cdm::bind::TimedStabilizationData* ConfigurationData::mutable_timedstabilization() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.TimedStabilization)
  return _internal_mutable_timedstabilization();
}

// .pulse.cdm.bind.DynamicStabilizationData DynamicStabilization = 5;
inline bool ConfigurationData::_internal_has_dynamicstabilization() const {
  return StabilizationCriteria_case() == kDynamicStabilization;
}
inline bool ConfigurationData::has_dynamicstabilization() const {
  return _internal_has_dynamicstabilization();
}
inline void ConfigurationData::set_has_dynamicstabilization() {
  _oneof_case_[0] = kDynamicStabilization;
}
inline ::pulse::cdm::bind::DynamicStabilizationData* ConfigurationData::release_dynamicstabilization() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
  if (_internal_has_dynamicstabilization()) {
    clear_has_StabilizationCriteria();
      ::pulse::cdm::bind::DynamicStabilizationData* temp = StabilizationCriteria_.dynamicstabilization_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StabilizationCriteria_.dynamicstabilization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::DynamicStabilizationData& ConfigurationData::_internal_dynamicstabilization() const {
  return _internal_has_dynamicstabilization()
      ? *StabilizationCriteria_.dynamicstabilization_
      : reinterpret_cast< ::pulse::cdm::bind::DynamicStabilizationData&>(::pulse::cdm::bind::_DynamicStabilizationData_default_instance_);
}
inline const ::pulse::cdm::bind::DynamicStabilizationData& ConfigurationData::dynamicstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
  return _internal_dynamicstabilization();
}
inline ::pulse::cdm::bind::DynamicStabilizationData* ConfigurationData::unsafe_arena_release_dynamicstabilization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
  if (_internal_has_dynamicstabilization()) {
    clear_has_StabilizationCriteria();
    ::pulse::cdm::bind::DynamicStabilizationData* temp = StabilizationCriteria_.dynamicstabilization_;
    StabilizationCriteria_.dynamicstabilization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConfigurationData::unsafe_arena_set_allocated_dynamicstabilization(::pulse::cdm::bind::DynamicStabilizationData* dynamicstabilization) {
  clear_StabilizationCriteria();
  if (dynamicstabilization) {
    set_has_dynamicstabilization();
    StabilizationCriteria_.dynamicstabilization_ = dynamicstabilization;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
}
inline ::pulse::cdm::bind::DynamicStabilizationData* ConfigurationData::_internal_mutable_dynamicstabilization() {
  if (!_internal_has_dynamicstabilization()) {
    clear_StabilizationCriteria();
    set_has_dynamicstabilization();
    StabilizationCriteria_.dynamicstabilization_ = CreateMaybeMessage< ::pulse::cdm::bind::DynamicStabilizationData >(GetArena());
  }
  return StabilizationCriteria_.dynamicstabilization_;
}
inline ::pulse::cdm::bind::DynamicStabilizationData* ConfigurationData::mutable_dynamicstabilization() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.DynamicStabilization)
  return _internal_mutable_dynamicstabilization();
}

// .pulse.cdm.bind.eSwitch WritePatientBaselineFile = 6;
inline void ConfigurationData::clear_writepatientbaselinefile() {
  writepatientbaselinefile_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData::_internal_writepatientbaselinefile() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(writepatientbaselinefile_);
}
inline ::pulse::cdm::bind::eSwitch ConfigurationData::writepatientbaselinefile() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.WritePatientBaselineFile)
  return _internal_writepatientbaselinefile();
}
inline void ConfigurationData::_internal_set_writepatientbaselinefile(::pulse::cdm::bind::eSwitch value) {
  
  writepatientbaselinefile_ = value;
}
inline void ConfigurationData::set_writepatientbaselinefile(::pulse::cdm::bind::eSwitch value) {
  _internal_set_writepatientbaselinefile(value);
  // @@protoc_insertion_point(field_set:pulse.cpm.bind.ConfigurationData.WritePatientBaselineFile)
}

// .pulse.cpm.bind.ConfigurationData.BloodChemistryConfigurationData BloodChemistryConfiguration = 7;
inline bool ConfigurationData::_internal_has_bloodchemistryconfiguration() const {
  return this != internal_default_instance() && bloodchemistryconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_bloodchemistryconfiguration() const {
  return _internal_has_bloodchemistryconfiguration();
}
inline void ConfigurationData::clear_bloodchemistryconfiguration() {
  if (GetArena() == nullptr && bloodchemistryconfiguration_ != nullptr) {
    delete bloodchemistryconfiguration_;
  }
  bloodchemistryconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData& ConfigurationData::_internal_bloodchemistryconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* p = bloodchemistryconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_BloodChemistryConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData& ConfigurationData::bloodchemistryconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.BloodChemistryConfiguration)
  return _internal_bloodchemistryconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_bloodchemistryconfiguration(
    ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* bloodchemistryconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodchemistryconfiguration_);
  }
  bloodchemistryconfiguration_ = bloodchemistryconfiguration;
  if (bloodchemistryconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* ConfigurationData::release_bloodchemistryconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* temp = bloodchemistryconfiguration_;
  bloodchemistryconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* ConfigurationData::unsafe_arena_release_bloodchemistryconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.BloodChemistryConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* temp = bloodchemistryconfiguration_;
  bloodchemistryconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* ConfigurationData::_internal_mutable_bloodchemistryconfiguration() {
  
  if (bloodchemistryconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData>(GetArena());
    bloodchemistryconfiguration_ = p;
  }
  return bloodchemistryconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* ConfigurationData::mutable_bloodchemistryconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.BloodChemistryConfiguration)
  return _internal_mutable_bloodchemistryconfiguration();
}
inline void ConfigurationData::set_allocated_bloodchemistryconfiguration(::pulse::cpm::bind::ConfigurationData_BloodChemistryConfigurationData* bloodchemistryconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bloodchemistryconfiguration_;
  }
  if (bloodchemistryconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bloodchemistryconfiguration);
    if (message_arena != submessage_arena) {
      bloodchemistryconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodchemistryconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  bloodchemistryconfiguration_ = bloodchemistryconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.BloodChemistryConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.CardiovascularConfigurationData CardiovascularConfiguration = 8;
inline bool ConfigurationData::_internal_has_cardiovascularconfiguration() const {
  return this != internal_default_instance() && cardiovascularconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_cardiovascularconfiguration() const {
  return _internal_has_cardiovascularconfiguration();
}
inline void ConfigurationData::clear_cardiovascularconfiguration() {
  if (GetArena() == nullptr && cardiovascularconfiguration_ != nullptr) {
    delete cardiovascularconfiguration_;
  }
  cardiovascularconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData& ConfigurationData::_internal_cardiovascularconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* p = cardiovascularconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_CardiovascularConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData& ConfigurationData::cardiovascularconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CardiovascularConfiguration)
  return _internal_cardiovascularconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_cardiovascularconfiguration(
    ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* cardiovascularconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiovascularconfiguration_);
  }
  cardiovascularconfiguration_ = cardiovascularconfiguration;
  if (cardiovascularconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* ConfigurationData::release_cardiovascularconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* temp = cardiovascularconfiguration_;
  cardiovascularconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* ConfigurationData::unsafe_arena_release_cardiovascularconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CardiovascularConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* temp = cardiovascularconfiguration_;
  cardiovascularconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* ConfigurationData::_internal_mutable_cardiovascularconfiguration() {
  
  if (cardiovascularconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData>(GetArena());
    cardiovascularconfiguration_ = p;
  }
  return cardiovascularconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* ConfigurationData::mutable_cardiovascularconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CardiovascularConfiguration)
  return _internal_mutable_cardiovascularconfiguration();
}
inline void ConfigurationData::set_allocated_cardiovascularconfiguration(::pulse::cpm::bind::ConfigurationData_CardiovascularConfigurationData* cardiovascularconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cardiovascularconfiguration_;
  }
  if (cardiovascularconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cardiovascularconfiguration);
    if (message_arena != submessage_arena) {
      cardiovascularconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiovascularconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  cardiovascularconfiguration_ = cardiovascularconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CardiovascularConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.CircuitConfigurationData CircuitConfiguration = 9;
inline bool ConfigurationData::_internal_has_circuitconfiguration() const {
  return this != internal_default_instance() && circuitconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_circuitconfiguration() const {
  return _internal_has_circuitconfiguration();
}
inline void ConfigurationData::clear_circuitconfiguration() {
  if (GetArena() == nullptr && circuitconfiguration_ != nullptr) {
    delete circuitconfiguration_;
  }
  circuitconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData& ConfigurationData::_internal_circuitconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* p = circuitconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_CircuitConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData& ConfigurationData::circuitconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.CircuitConfiguration)
  return _internal_circuitconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_circuitconfiguration(
    ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* circuitconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(circuitconfiguration_);
  }
  circuitconfiguration_ = circuitconfiguration;
  if (circuitconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* ConfigurationData::release_circuitconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* temp = circuitconfiguration_;
  circuitconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* ConfigurationData::unsafe_arena_release_circuitconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.CircuitConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* temp = circuitconfiguration_;
  circuitconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* ConfigurationData::_internal_mutable_circuitconfiguration() {
  
  if (circuitconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData>(GetArena());
    circuitconfiguration_ = p;
  }
  return circuitconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* ConfigurationData::mutable_circuitconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.CircuitConfiguration)
  return _internal_mutable_circuitconfiguration();
}
inline void ConfigurationData::set_allocated_circuitconfiguration(::pulse::cpm::bind::ConfigurationData_CircuitConfigurationData* circuitconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete circuitconfiguration_;
  }
  if (circuitconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(circuitconfiguration);
    if (message_arena != submessage_arena) {
      circuitconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circuitconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  circuitconfiguration_ = circuitconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.CircuitConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.ConstantsConfigurationData ConstantsConfiguration = 10;
inline bool ConfigurationData::_internal_has_constantsconfiguration() const {
  return this != internal_default_instance() && constantsconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_constantsconfiguration() const {
  return _internal_has_constantsconfiguration();
}
inline void ConfigurationData::clear_constantsconfiguration() {
  if (GetArena() == nullptr && constantsconfiguration_ != nullptr) {
    delete constantsconfiguration_;
  }
  constantsconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData& ConfigurationData::_internal_constantsconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* p = constantsconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_ConstantsConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData& ConfigurationData::constantsconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ConstantsConfiguration)
  return _internal_constantsconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_constantsconfiguration(
    ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* constantsconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constantsconfiguration_);
  }
  constantsconfiguration_ = constantsconfiguration;
  if (constantsconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* ConfigurationData::release_constantsconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* temp = constantsconfiguration_;
  constantsconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* ConfigurationData::unsafe_arena_release_constantsconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ConstantsConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* temp = constantsconfiguration_;
  constantsconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* ConfigurationData::_internal_mutable_constantsconfiguration() {
  
  if (constantsconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData>(GetArena());
    constantsconfiguration_ = p;
  }
  return constantsconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* ConfigurationData::mutable_constantsconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ConstantsConfiguration)
  return _internal_mutable_constantsconfiguration();
}
inline void ConfigurationData::set_allocated_constantsconfiguration(::pulse::cpm::bind::ConfigurationData_ConstantsConfigurationData* constantsconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete constantsconfiguration_;
  }
  if (constantsconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(constantsconfiguration);
    if (message_arena != submessage_arena) {
      constantsconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constantsconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  constantsconfiguration_ = constantsconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ConstantsConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.DrugsConfigurationData DrugsConfiguration = 11;
inline bool ConfigurationData::_internal_has_drugsconfiguration() const {
  return this != internal_default_instance() && drugsconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_drugsconfiguration() const {
  return _internal_has_drugsconfiguration();
}
inline void ConfigurationData::clear_drugsconfiguration() {
  if (GetArena() == nullptr && drugsconfiguration_ != nullptr) {
    delete drugsconfiguration_;
  }
  drugsconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData& ConfigurationData::_internal_drugsconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* p = drugsconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_DrugsConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData& ConfigurationData::drugsconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.DrugsConfiguration)
  return _internal_drugsconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_drugsconfiguration(
    ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* drugsconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drugsconfiguration_);
  }
  drugsconfiguration_ = drugsconfiguration;
  if (drugsconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.DrugsConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* ConfigurationData::release_drugsconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* temp = drugsconfiguration_;
  drugsconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* ConfigurationData::unsafe_arena_release_drugsconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.DrugsConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* temp = drugsconfiguration_;
  drugsconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* ConfigurationData::_internal_mutable_drugsconfiguration() {
  
  if (drugsconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData>(GetArena());
    drugsconfiguration_ = p;
  }
  return drugsconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* ConfigurationData::mutable_drugsconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.DrugsConfiguration)
  return _internal_mutable_drugsconfiguration();
}
inline void ConfigurationData::set_allocated_drugsconfiguration(::pulse::cpm::bind::ConfigurationData_DrugsConfigurationData* drugsconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete drugsconfiguration_;
  }
  if (drugsconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(drugsconfiguration);
    if (message_arena != submessage_arena) {
      drugsconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drugsconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  drugsconfiguration_ = drugsconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.DrugsConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.ECGConfigurationData ECGConfiguration = 12;
inline bool ConfigurationData::_internal_has_ecgconfiguration() const {
  return this != internal_default_instance() && ecgconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_ecgconfiguration() const {
  return _internal_has_ecgconfiguration();
}
inline void ConfigurationData::clear_ecgconfiguration() {
  if (GetArena() == nullptr && ecgconfiguration_ != nullptr) {
    delete ecgconfiguration_;
  }
  ecgconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData& ConfigurationData::_internal_ecgconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* p = ecgconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_ECGConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData& ConfigurationData::ecgconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.ECGConfiguration)
  return _internal_ecgconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_ecgconfiguration(
    ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ecgconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecgconfiguration_);
  }
  ecgconfiguration_ = ecgconfiguration;
  if (ecgconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.ECGConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ConfigurationData::release_ecgconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* temp = ecgconfiguration_;
  ecgconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ConfigurationData::unsafe_arena_release_ecgconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.ECGConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* temp = ecgconfiguration_;
  ecgconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ConfigurationData::_internal_mutable_ecgconfiguration() {
  
  if (ecgconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_ECGConfigurationData>(GetArena());
    ecgconfiguration_ = p;
  }
  return ecgconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ConfigurationData::mutable_ecgconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.ECGConfiguration)
  return _internal_mutable_ecgconfiguration();
}
inline void ConfigurationData::set_allocated_ecgconfiguration(::pulse::cpm::bind::ConfigurationData_ECGConfigurationData* ecgconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ecgconfiguration_;
  }
  if (ecgconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ecgconfiguration);
    if (message_arena != submessage_arena) {
      ecgconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecgconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  ecgconfiguration_ = ecgconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.ECGConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.EnergyConfigurationData EnergyConfiguration = 13;
inline bool ConfigurationData::_internal_has_energyconfiguration() const {
  return this != internal_default_instance() && energyconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_energyconfiguration() const {
  return _internal_has_energyconfiguration();
}
inline void ConfigurationData::clear_energyconfiguration() {
  if (GetArena() == nullptr && energyconfiguration_ != nullptr) {
    delete energyconfiguration_;
  }
  energyconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData& ConfigurationData::_internal_energyconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* p = energyconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_EnergyConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData& ConfigurationData::energyconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnergyConfiguration)
  return _internal_energyconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_energyconfiguration(
    ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* energyconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(energyconfiguration_);
  }
  energyconfiguration_ = energyconfiguration;
  if (energyconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* ConfigurationData::release_energyconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* temp = energyconfiguration_;
  energyconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* ConfigurationData::unsafe_arena_release_energyconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnergyConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* temp = energyconfiguration_;
  energyconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* ConfigurationData::_internal_mutable_energyconfiguration() {
  
  if (energyconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData>(GetArena());
    energyconfiguration_ = p;
  }
  return energyconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* ConfigurationData::mutable_energyconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnergyConfiguration)
  return _internal_mutable_energyconfiguration();
}
inline void ConfigurationData::set_allocated_energyconfiguration(::pulse::cpm::bind::ConfigurationData_EnergyConfigurationData* energyconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete energyconfiguration_;
  }
  if (energyconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(energyconfiguration);
    if (message_arena != submessage_arena) {
      energyconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, energyconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  energyconfiguration_ = energyconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnergyConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.EnvironmentConfigurationData EnvironmentConfiguration = 14;
inline bool ConfigurationData::_internal_has_environmentconfiguration() const {
  return this != internal_default_instance() && environmentconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_environmentconfiguration() const {
  return _internal_has_environmentconfiguration();
}
inline void ConfigurationData::clear_environmentconfiguration() {
  if (GetArena() == nullptr && environmentconfiguration_ != nullptr) {
    delete environmentconfiguration_;
  }
  environmentconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData& ConfigurationData::_internal_environmentconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* p = environmentconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_EnvironmentConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData& ConfigurationData::environmentconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.EnvironmentConfiguration)
  return _internal_environmentconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_environmentconfiguration(
    ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* environmentconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmentconfiguration_);
  }
  environmentconfiguration_ = environmentconfiguration;
  if (environmentconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* ConfigurationData::release_environmentconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* temp = environmentconfiguration_;
  environmentconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* ConfigurationData::unsafe_arena_release_environmentconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.EnvironmentConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* temp = environmentconfiguration_;
  environmentconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* ConfigurationData::_internal_mutable_environmentconfiguration() {
  
  if (environmentconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData>(GetArena());
    environmentconfiguration_ = p;
  }
  return environmentconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* ConfigurationData::mutable_environmentconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.EnvironmentConfiguration)
  return _internal_mutable_environmentconfiguration();
}
inline void ConfigurationData::set_allocated_environmentconfiguration(::pulse::cpm::bind::ConfigurationData_EnvironmentConfigurationData* environmentconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environmentconfiguration_;
  }
  if (environmentconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environmentconfiguration);
    if (message_arena != submessage_arena) {
      environmentconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  environmentconfiguration_ = environmentconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.EnvironmentConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.GastrointestinalConfigurationData GastrointestinalConfiguration = 15;
inline bool ConfigurationData::_internal_has_gastrointestinalconfiguration() const {
  return this != internal_default_instance() && gastrointestinalconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_gastrointestinalconfiguration() const {
  return _internal_has_gastrointestinalconfiguration();
}
inline void ConfigurationData::clear_gastrointestinalconfiguration() {
  if (GetArena() == nullptr && gastrointestinalconfiguration_ != nullptr) {
    delete gastrointestinalconfiguration_;
  }
  gastrointestinalconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData& ConfigurationData::_internal_gastrointestinalconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* p = gastrointestinalconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_GastrointestinalConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData& ConfigurationData::gastrointestinalconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.GastrointestinalConfiguration)
  return _internal_gastrointestinalconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_gastrointestinalconfiguration(
    ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* gastrointestinalconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gastrointestinalconfiguration_);
  }
  gastrointestinalconfiguration_ = gastrointestinalconfiguration;
  if (gastrointestinalconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* ConfigurationData::release_gastrointestinalconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* temp = gastrointestinalconfiguration_;
  gastrointestinalconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* ConfigurationData::unsafe_arena_release_gastrointestinalconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.GastrointestinalConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* temp = gastrointestinalconfiguration_;
  gastrointestinalconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* ConfigurationData::_internal_mutable_gastrointestinalconfiguration() {
  
  if (gastrointestinalconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData>(GetArena());
    gastrointestinalconfiguration_ = p;
  }
  return gastrointestinalconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* ConfigurationData::mutable_gastrointestinalconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.GastrointestinalConfiguration)
  return _internal_mutable_gastrointestinalconfiguration();
}
inline void ConfigurationData::set_allocated_gastrointestinalconfiguration(::pulse::cpm::bind::ConfigurationData_GastrointestinalConfigurationData* gastrointestinalconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gastrointestinalconfiguration_;
  }
  if (gastrointestinalconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gastrointestinalconfiguration);
    if (message_arena != submessage_arena) {
      gastrointestinalconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gastrointestinalconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  gastrointestinalconfiguration_ = gastrointestinalconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.GastrointestinalConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.NervousConfigurationData NervousConfiguration = 16;
inline bool ConfigurationData::_internal_has_nervousconfiguration() const {
  return this != internal_default_instance() && nervousconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_nervousconfiguration() const {
  return _internal_has_nervousconfiguration();
}
inline void ConfigurationData::clear_nervousconfiguration() {
  if (GetArena() == nullptr && nervousconfiguration_ != nullptr) {
    delete nervousconfiguration_;
  }
  nervousconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData& ConfigurationData::_internal_nervousconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* p = nervousconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_NervousConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData& ConfigurationData::nervousconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.NervousConfiguration)
  return _internal_nervousconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_nervousconfiguration(
    ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* nervousconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nervousconfiguration_);
  }
  nervousconfiguration_ = nervousconfiguration;
  if (nervousconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* ConfigurationData::release_nervousconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* temp = nervousconfiguration_;
  nervousconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* ConfigurationData::unsafe_arena_release_nervousconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.NervousConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* temp = nervousconfiguration_;
  nervousconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* ConfigurationData::_internal_mutable_nervousconfiguration() {
  
  if (nervousconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_NervousConfigurationData>(GetArena());
    nervousconfiguration_ = p;
  }
  return nervousconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* ConfigurationData::mutable_nervousconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.NervousConfiguration)
  return _internal_mutable_nervousconfiguration();
}
inline void ConfigurationData::set_allocated_nervousconfiguration(::pulse::cpm::bind::ConfigurationData_NervousConfigurationData* nervousconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nervousconfiguration_;
  }
  if (nervousconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nervousconfiguration);
    if (message_arena != submessage_arena) {
      nervousconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nervousconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  nervousconfiguration_ = nervousconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.NervousConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.RenalConfigurationData RenalConfiguration = 17;
inline bool ConfigurationData::_internal_has_renalconfiguration() const {
  return this != internal_default_instance() && renalconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_renalconfiguration() const {
  return _internal_has_renalconfiguration();
}
inline void ConfigurationData::clear_renalconfiguration() {
  if (GetArena() == nullptr && renalconfiguration_ != nullptr) {
    delete renalconfiguration_;
  }
  renalconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData& ConfigurationData::_internal_renalconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* p = renalconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_RenalConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData& ConfigurationData::renalconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RenalConfiguration)
  return _internal_renalconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_renalconfiguration(
    ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* renalconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalconfiguration_);
  }
  renalconfiguration_ = renalconfiguration;
  if (renalconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* ConfigurationData::release_renalconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* temp = renalconfiguration_;
  renalconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* ConfigurationData::unsafe_arena_release_renalconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RenalConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* temp = renalconfiguration_;
  renalconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* ConfigurationData::_internal_mutable_renalconfiguration() {
  
  if (renalconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_RenalConfigurationData>(GetArena());
    renalconfiguration_ = p;
  }
  return renalconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* ConfigurationData::mutable_renalconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RenalConfiguration)
  return _internal_mutable_renalconfiguration();
}
inline void ConfigurationData::set_allocated_renalconfiguration(::pulse::cpm::bind::ConfigurationData_RenalConfigurationData* renalconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete renalconfiguration_;
  }
  if (renalconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(renalconfiguration);
    if (message_arena != submessage_arena) {
      renalconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  renalconfiguration_ = renalconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RenalConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.RespiratoryConfigurationData RespiratoryConfiguration = 18;
inline bool ConfigurationData::_internal_has_respiratoryconfiguration() const {
  return this != internal_default_instance() && respiratoryconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_respiratoryconfiguration() const {
  return _internal_has_respiratoryconfiguration();
}
inline void ConfigurationData::clear_respiratoryconfiguration() {
  if (GetArena() == nullptr && respiratoryconfiguration_ != nullptr) {
    delete respiratoryconfiguration_;
  }
  respiratoryconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData& ConfigurationData::_internal_respiratoryconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* p = respiratoryconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_RespiratoryConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData& ConfigurationData::respiratoryconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.RespiratoryConfiguration)
  return _internal_respiratoryconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_respiratoryconfiguration(
    ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* respiratoryconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryconfiguration_);
  }
  respiratoryconfiguration_ = respiratoryconfiguration;
  if (respiratoryconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* ConfigurationData::release_respiratoryconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* temp = respiratoryconfiguration_;
  respiratoryconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* ConfigurationData::unsafe_arena_release_respiratoryconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.RespiratoryConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* temp = respiratoryconfiguration_;
  respiratoryconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* ConfigurationData::_internal_mutable_respiratoryconfiguration() {
  
  if (respiratoryconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData>(GetArena());
    respiratoryconfiguration_ = p;
  }
  return respiratoryconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* ConfigurationData::mutable_respiratoryconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.RespiratoryConfiguration)
  return _internal_mutable_respiratoryconfiguration();
}
inline void ConfigurationData::set_allocated_respiratoryconfiguration(::pulse::cpm::bind::ConfigurationData_RespiratoryConfigurationData* respiratoryconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete respiratoryconfiguration_;
  }
  if (respiratoryconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(respiratoryconfiguration);
    if (message_arena != submessage_arena) {
      respiratoryconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  respiratoryconfiguration_ = respiratoryconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.RespiratoryConfiguration)
}

// .pulse.cpm.bind.ConfigurationData.TissueConfigurationData TissueConfiguration = 19;
inline bool ConfigurationData::_internal_has_tissueconfiguration() const {
  return this != internal_default_instance() && tissueconfiguration_ != nullptr;
}
inline bool ConfigurationData::has_tissueconfiguration() const {
  return _internal_has_tissueconfiguration();
}
inline void ConfigurationData::clear_tissueconfiguration() {
  if (GetArena() == nullptr && tissueconfiguration_ != nullptr) {
    delete tissueconfiguration_;
  }
  tissueconfiguration_ = nullptr;
}
inline const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData& ConfigurationData::_internal_tissueconfiguration() const {
  const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* p = tissueconfiguration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData&>(
      ::pulse::cpm::bind::_ConfigurationData_TissueConfigurationData_default_instance_);
}
inline const ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData& ConfigurationData::tissueconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.TissueConfiguration)
  return _internal_tissueconfiguration();
}
inline void ConfigurationData::unsafe_arena_set_allocated_tissueconfiguration(
    ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* tissueconfiguration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tissueconfiguration_);
  }
  tissueconfiguration_ = tissueconfiguration;
  if (tissueconfiguration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.TissueConfiguration)
}
inline ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* ConfigurationData::release_tissueconfiguration() {
  
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* temp = tissueconfiguration_;
  tissueconfiguration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* ConfigurationData::unsafe_arena_release_tissueconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.TissueConfiguration)
  
  ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* temp = tissueconfiguration_;
  tissueconfiguration_ = nullptr;
  return temp;
}
inline ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* ConfigurationData::_internal_mutable_tissueconfiguration() {
  
  if (tissueconfiguration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cpm::bind::ConfigurationData_TissueConfigurationData>(GetArena());
    tissueconfiguration_ = p;
  }
  return tissueconfiguration_;
}
inline ::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* ConfigurationData::mutable_tissueconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.TissueConfiguration)
  return _internal_mutable_tissueconfiguration();
}
inline void ConfigurationData::set_allocated_tissueconfiguration(::pulse::cpm::bind::ConfigurationData_TissueConfigurationData* tissueconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tissueconfiguration_;
  }
  if (tissueconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tissueconfiguration);
    if (message_arena != submessage_arena) {
      tissueconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tissueconfiguration, submessage_arena);
    }
    
  } else {
    
  }
  tissueconfiguration_ = tissueconfiguration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.TissueConfiguration)
}

// .pulse.cdm.bind.OverridesData InitialOverrides = 20;
inline bool ConfigurationData::_internal_has_initialoverrides() const {
  return this != internal_default_instance() && initialoverrides_ != nullptr;
}
inline bool ConfigurationData::has_initialoverrides() const {
  return _internal_has_initialoverrides();
}
inline const ::pulse::cdm::bind::OverridesData& ConfigurationData::_internal_initialoverrides() const {
  const ::pulse::cdm::bind::OverridesData* p = initialoverrides_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::OverridesData&>(
      ::pulse::cdm::bind::_OverridesData_default_instance_);
}
inline const ::pulse::cdm::bind::OverridesData& ConfigurationData::initialoverrides() const {
  // @@protoc_insertion_point(field_get:pulse.cpm.bind.ConfigurationData.InitialOverrides)
  return _internal_initialoverrides();
}
inline void ConfigurationData::unsafe_arena_set_allocated_initialoverrides(
    ::pulse::cdm::bind::OverridesData* initialoverrides) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialoverrides_);
  }
  initialoverrides_ = initialoverrides;
  if (initialoverrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cpm.bind.ConfigurationData.InitialOverrides)
}
inline ::pulse::cdm::bind::OverridesData* ConfigurationData::release_initialoverrides() {
  
  ::pulse::cdm::bind::OverridesData* temp = initialoverrides_;
  initialoverrides_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::OverridesData* ConfigurationData::unsafe_arena_release_initialoverrides() {
  // @@protoc_insertion_point(field_release:pulse.cpm.bind.ConfigurationData.InitialOverrides)
  
  ::pulse::cdm::bind::OverridesData* temp = initialoverrides_;
  initialoverrides_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::OverridesData* ConfigurationData::_internal_mutable_initialoverrides() {
  
  if (initialoverrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::OverridesData>(GetArena());
    initialoverrides_ = p;
  }
  return initialoverrides_;
}
inline ::pulse::cdm::bind::OverridesData* ConfigurationData::mutable_initialoverrides() {
  // @@protoc_insertion_point(field_mutable:pulse.cpm.bind.ConfigurationData.InitialOverrides)
  return _internal_mutable_initialoverrides();
}
inline void ConfigurationData::set_allocated_initialoverrides(::pulse::cdm::bind::OverridesData* initialoverrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialoverrides_);
  }
  if (initialoverrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialoverrides)->GetArena();
    if (message_arena != submessage_arena) {
      initialoverrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialoverrides, submessage_arena);
    }
    
  } else {
    
  }
  initialoverrides_ = initialoverrides;
  // @@protoc_insertion_point(field_set_allocated:pulse.cpm.bind.ConfigurationData.InitialOverrides)
}

inline bool ConfigurationData::has_StabilizationCriteria() const {
  return StabilizationCriteria_case() != STABILIZATIONCRITERIA_NOT_SET;
}
inline void ConfigurationData::clear_has_StabilizationCriteria() {
  _oneof_case_[0] = STABILIZATIONCRITERIA_NOT_SET;
}
inline ConfigurationData::StabilizationCriteriaCase ConfigurationData::StabilizationCriteria_case() const {
  return ConfigurationData::StabilizationCriteriaCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cpm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcpm_2fbind_2fPulseConfiguration_2eproto
