// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/study/bind/Hydrocephalus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto;
namespace pulse {
namespace study {
namespace bind {
namespace hydrocephalus {
class SimulationData;
class SimulationDataDefaultTypeInternal;
extern SimulationDataDefaultTypeInternal _SimulationData_default_instance_;
class SimulationListData;
class SimulationListDataDefaultTypeInternal;
extern SimulationListDataDefaultTypeInternal _SimulationListData_default_instance_;
}  // namespace hydrocephalus
}  // namespace bind
}  // namespace study
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::study::bind::hydrocephalus::SimulationData* Arena::CreateMaybeMessage<::pulse::study::bind::hydrocephalus::SimulationData>(Arena*);
template<> ::pulse::study::bind::hydrocephalus::SimulationListData* Arena::CreateMaybeMessage<::pulse::study::bind::hydrocephalus::SimulationListData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace study {
namespace bind {
namespace hydrocephalus {

// ===================================================================

class SimulationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.hydrocephalus.SimulationData) */ {
 public:
  inline SimulationData() : SimulationData(nullptr) {}
  virtual ~SimulationData();

  SimulationData(const SimulationData& from);
  SimulationData(SimulationData&& from) noexcept
    : SimulationData() {
    *this = ::std::move(from);
  }

  inline SimulationData& operator=(const SimulationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationData& operator=(SimulationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationData& default_instance();

  static inline const SimulationData* internal_default_instance() {
    return reinterpret_cast<const SimulationData*>(
               &_SimulationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimulationData& a, SimulationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationData* New() const final {
    return CreateMaybeMessage<SimulationData>(nullptr);
  }

  SimulationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationData& from);
  void MergeFrom(const SimulationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.hydrocephalus.SimulationData";
  }
  protected:
  explicit SimulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIntracranialSpaceVolumeBaselineMLFieldNumber = 3,
    kIntracranialSpaceComplianceMLPerMmHgFieldNumber = 4,
    kCerebrospinalFluidAbsorptionRateMLPerMinFieldNumber = 5,
    kCerebrospinalFluidProductionRateMLPerMinFieldNumber = 6,
    kBrainVolumeMLFieldNumber = 7,
    kIntracranialSpaceVolumeMLFieldNumber = 8,
    kMeanBrainPressureMmHgFieldNumber = 9,
    kMeanBrainVasculatureInFlowMLPerSFieldNumber = 10,
    kMeanBrainVasculatureOutFlowMLPerSFieldNumber = 11,
    kMeanBrainCarbonDioxidePartialPressureMmHgFieldNumber = 12,
    kMeanBrainOxygenPartialPressureMmHgFieldNumber = 13,
    kMeanIntracranialSpacePressureMmHgFieldNumber = 14,
    kCardiacOutputMLPerMinFieldNumber = 15,
    kCerebralBloodFlowMLPerMinFieldNumber = 16,
    kIDFieldNumber = 1,
    kAchievedStabilizationFieldNumber = 31,
    kCerebralPerfusionPressureMmHgFieldNumber = 17,
    kDiastolicArterialPressureMmHgFieldNumber = 18,
    kHeartEjectionFractionFieldNumber = 19,
    kHeartRateBpmFieldNumber = 20,
    kHeartStrokeVolumeMLFieldNumber = 21,
    kIntracranialPressureMmHgFieldNumber = 22,
    kMeanArterialPressureMmHgFieldNumber = 23,
    kMeanCentralVenousPressureMmHgFieldNumber = 24,
    kPulmonaryDiastolicArterialPressureMmHgFieldNumber = 25,
    kPulmonaryMeanArterialPressureMmHgFieldNumber = 26,
    kPulmonaryMeanCapillaryFlowMLPerSFieldNumber = 27,
    kPulmonarySystolicArterialPressureMmHgFieldNumber = 28,
    kSystolicArterialPressureMmHgFieldNumber = 29,
    kSystemicVascularResistanceMmHgSPerLFieldNumber = 30,
    kStabilizationTimeSFieldNumber = 32,
    kTotalSimulationTimeSFieldNumber = 33,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double IntracranialSpaceVolumeBaseline_mL = 3;
  void clear_intracranialspacevolumebaseline_ml();
  double intracranialspacevolumebaseline_ml() const;
  void set_intracranialspacevolumebaseline_ml(double value);
  private:
  double _internal_intracranialspacevolumebaseline_ml() const;
  void _internal_set_intracranialspacevolumebaseline_ml(double value);
  public:

  // double IntracranialSpaceCompliance_mL_Per_mmHg = 4;
  void clear_intracranialspacecompliance_ml_per_mmhg();
  double intracranialspacecompliance_ml_per_mmhg() const;
  void set_intracranialspacecompliance_ml_per_mmhg(double value);
  private:
  double _internal_intracranialspacecompliance_ml_per_mmhg() const;
  void _internal_set_intracranialspacecompliance_ml_per_mmhg(double value);
  public:

  // double CerebrospinalFluidAbsorptionRate_mL_Per_min = 5;
  void clear_cerebrospinalfluidabsorptionrate_ml_per_min();
  double cerebrospinalfluidabsorptionrate_ml_per_min() const;
  void set_cerebrospinalfluidabsorptionrate_ml_per_min(double value);
  private:
  double _internal_cerebrospinalfluidabsorptionrate_ml_per_min() const;
  void _internal_set_cerebrospinalfluidabsorptionrate_ml_per_min(double value);
  public:

  // double CerebrospinalFluidProductionRate_mL_Per_min = 6;
  void clear_cerebrospinalfluidproductionrate_ml_per_min();
  double cerebrospinalfluidproductionrate_ml_per_min() const;
  void set_cerebrospinalfluidproductionrate_ml_per_min(double value);
  private:
  double _internal_cerebrospinalfluidproductionrate_ml_per_min() const;
  void _internal_set_cerebrospinalfluidproductionrate_ml_per_min(double value);
  public:

  // double BrainVolume_mL = 7;
  void clear_brainvolume_ml();
  double brainvolume_ml() const;
  void set_brainvolume_ml(double value);
  private:
  double _internal_brainvolume_ml() const;
  void _internal_set_brainvolume_ml(double value);
  public:

  // double IntracranialSpaceVolume_mL = 8;
  void clear_intracranialspacevolume_ml();
  double intracranialspacevolume_ml() const;
  void set_intracranialspacevolume_ml(double value);
  private:
  double _internal_intracranialspacevolume_ml() const;
  void _internal_set_intracranialspacevolume_ml(double value);
  public:

  // double MeanBrainPressure_mmHg = 9;
  void clear_meanbrainpressure_mmhg();
  double meanbrainpressure_mmhg() const;
  void set_meanbrainpressure_mmhg(double value);
  private:
  double _internal_meanbrainpressure_mmhg() const;
  void _internal_set_meanbrainpressure_mmhg(double value);
  public:

  // double MeanBrainVasculatureInFlow_mL_Per_s = 10;
  void clear_meanbrainvasculatureinflow_ml_per_s();
  double meanbrainvasculatureinflow_ml_per_s() const;
  void set_meanbrainvasculatureinflow_ml_per_s(double value);
  private:
  double _internal_meanbrainvasculatureinflow_ml_per_s() const;
  void _internal_set_meanbrainvasculatureinflow_ml_per_s(double value);
  public:

  // double MeanBrainVasculatureOutFlow_mL_Per_s = 11;
  void clear_meanbrainvasculatureoutflow_ml_per_s();
  double meanbrainvasculatureoutflow_ml_per_s() const;
  void set_meanbrainvasculatureoutflow_ml_per_s(double value);
  private:
  double _internal_meanbrainvasculatureoutflow_ml_per_s() const;
  void _internal_set_meanbrainvasculatureoutflow_ml_per_s(double value);
  public:

  // double MeanBrainCarbonDioxidePartialPressure_mmHg = 12;
  void clear_meanbraincarbondioxidepartialpressure_mmhg();
  double meanbraincarbondioxidepartialpressure_mmhg() const;
  void set_meanbraincarbondioxidepartialpressure_mmhg(double value);
  private:
  double _internal_meanbraincarbondioxidepartialpressure_mmhg() const;
  void _internal_set_meanbraincarbondioxidepartialpressure_mmhg(double value);
  public:

  // double MeanBrainOxygenPartialPressure_mmHg = 13;
  void clear_meanbrainoxygenpartialpressure_mmhg();
  double meanbrainoxygenpartialpressure_mmhg() const;
  void set_meanbrainoxygenpartialpressure_mmhg(double value);
  private:
  double _internal_meanbrainoxygenpartialpressure_mmhg() const;
  void _internal_set_meanbrainoxygenpartialpressure_mmhg(double value);
  public:

  // double MeanIntracranialSpacePressure_mmHg = 14;
  void clear_meanintracranialspacepressure_mmhg();
  double meanintracranialspacepressure_mmhg() const;
  void set_meanintracranialspacepressure_mmhg(double value);
  private:
  double _internal_meanintracranialspacepressure_mmhg() const;
  void _internal_set_meanintracranialspacepressure_mmhg(double value);
  public:

  // double CardiacOutput_mL_Per_min = 15;
  void clear_cardiacoutput_ml_per_min();
  double cardiacoutput_ml_per_min() const;
  void set_cardiacoutput_ml_per_min(double value);
  private:
  double _internal_cardiacoutput_ml_per_min() const;
  void _internal_set_cardiacoutput_ml_per_min(double value);
  public:

  // double CerebralBloodFlow_mL_Per_min = 16;
  void clear_cerebralbloodflow_ml_per_min();
  double cerebralbloodflow_ml_per_min() const;
  void set_cerebralbloodflow_ml_per_min(double value);
  private:
  double _internal_cerebralbloodflow_ml_per_min() const;
  void _internal_set_cerebralbloodflow_ml_per_min(double value);
  public:

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool AchievedStabilization = 31;
  void clear_achievedstabilization();
  bool achievedstabilization() const;
  void set_achievedstabilization(bool value);
  private:
  bool _internal_achievedstabilization() const;
  void _internal_set_achievedstabilization(bool value);
  public:

  // double CerebralPerfusionPressure_mmHg = 17;
  void clear_cerebralperfusionpressure_mmhg();
  double cerebralperfusionpressure_mmhg() const;
  void set_cerebralperfusionpressure_mmhg(double value);
  private:
  double _internal_cerebralperfusionpressure_mmhg() const;
  void _internal_set_cerebralperfusionpressure_mmhg(double value);
  public:

  // double DiastolicArterialPressure_mmHg = 18;
  void clear_diastolicarterialpressure_mmhg();
  double diastolicarterialpressure_mmhg() const;
  void set_diastolicarterialpressure_mmhg(double value);
  private:
  double _internal_diastolicarterialpressure_mmhg() const;
  void _internal_set_diastolicarterialpressure_mmhg(double value);
  public:

  // double HeartEjectionFraction = 19;
  void clear_heartejectionfraction();
  double heartejectionfraction() const;
  void set_heartejectionfraction(double value);
  private:
  double _internal_heartejectionfraction() const;
  void _internal_set_heartejectionfraction(double value);
  public:

  // double HeartRate_bpm = 20;
  void clear_heartrate_bpm();
  double heartrate_bpm() const;
  void set_heartrate_bpm(double value);
  private:
  double _internal_heartrate_bpm() const;
  void _internal_set_heartrate_bpm(double value);
  public:

  // double HeartStrokeVolume_mL = 21;
  void clear_heartstrokevolume_ml();
  double heartstrokevolume_ml() const;
  void set_heartstrokevolume_ml(double value);
  private:
  double _internal_heartstrokevolume_ml() const;
  void _internal_set_heartstrokevolume_ml(double value);
  public:

  // double IntracranialPressure_mmHg = 22;
  void clear_intracranialpressure_mmhg();
  double intracranialpressure_mmhg() const;
  void set_intracranialpressure_mmhg(double value);
  private:
  double _internal_intracranialpressure_mmhg() const;
  void _internal_set_intracranialpressure_mmhg(double value);
  public:

  // double MeanArterialPressure_mmHg = 23;
  void clear_meanarterialpressure_mmhg();
  double meanarterialpressure_mmhg() const;
  void set_meanarterialpressure_mmhg(double value);
  private:
  double _internal_meanarterialpressure_mmhg() const;
  void _internal_set_meanarterialpressure_mmhg(double value);
  public:

  // double MeanCentralVenousPressure_mmHg = 24;
  void clear_meancentralvenouspressure_mmhg();
  double meancentralvenouspressure_mmhg() const;
  void set_meancentralvenouspressure_mmhg(double value);
  private:
  double _internal_meancentralvenouspressure_mmhg() const;
  void _internal_set_meancentralvenouspressure_mmhg(double value);
  public:

  // double PulmonaryDiastolicArterialPressure_mmHg = 25;
  void clear_pulmonarydiastolicarterialpressure_mmhg();
  double pulmonarydiastolicarterialpressure_mmhg() const;
  void set_pulmonarydiastolicarterialpressure_mmhg(double value);
  private:
  double _internal_pulmonarydiastolicarterialpressure_mmhg() const;
  void _internal_set_pulmonarydiastolicarterialpressure_mmhg(double value);
  public:

  // double PulmonaryMeanArterialPressure_mmHg = 26;
  void clear_pulmonarymeanarterialpressure_mmhg();
  double pulmonarymeanarterialpressure_mmhg() const;
  void set_pulmonarymeanarterialpressure_mmhg(double value);
  private:
  double _internal_pulmonarymeanarterialpressure_mmhg() const;
  void _internal_set_pulmonarymeanarterialpressure_mmhg(double value);
  public:

  // double PulmonaryMeanCapillaryFlow_mL_Per_s = 27;
  void clear_pulmonarymeancapillaryflow_ml_per_s();
  double pulmonarymeancapillaryflow_ml_per_s() const;
  void set_pulmonarymeancapillaryflow_ml_per_s(double value);
  private:
  double _internal_pulmonarymeancapillaryflow_ml_per_s() const;
  void _internal_set_pulmonarymeancapillaryflow_ml_per_s(double value);
  public:

  // double PulmonarySystolicArterialPressure_mmHg = 28;
  void clear_pulmonarysystolicarterialpressure_mmhg();
  double pulmonarysystolicarterialpressure_mmhg() const;
  void set_pulmonarysystolicarterialpressure_mmhg(double value);
  private:
  double _internal_pulmonarysystolicarterialpressure_mmhg() const;
  void _internal_set_pulmonarysystolicarterialpressure_mmhg(double value);
  public:

  // double SystolicArterialPressure_mmHg = 29;
  void clear_systolicarterialpressure_mmhg();
  double systolicarterialpressure_mmhg() const;
  void set_systolicarterialpressure_mmhg(double value);
  private:
  double _internal_systolicarterialpressure_mmhg() const;
  void _internal_set_systolicarterialpressure_mmhg(double value);
  public:

  // double SystemicVascularResistance_mmHg_s_Per_L = 30;
  void clear_systemicvascularresistance_mmhg_s_per_l();
  double systemicvascularresistance_mmhg_s_per_l() const;
  void set_systemicvascularresistance_mmhg_s_per_l(double value);
  private:
  double _internal_systemicvascularresistance_mmhg_s_per_l() const;
  void _internal_set_systemicvascularresistance_mmhg_s_per_l(double value);
  public:

  // double StabilizationTime_s = 32;
  void clear_stabilizationtime_s();
  double stabilizationtime_s() const;
  void set_stabilizationtime_s(double value);
  private:
  double _internal_stabilizationtime_s() const;
  void _internal_set_stabilizationtime_s(double value);
  public:

  // double TotalSimulationTime_s = 33;
  void clear_totalsimulationtime_s();
  double totalsimulationtime_s() const;
  void set_totalsimulationtime_s(double value);
  private:
  double _internal_totalsimulationtime_s() const;
  void _internal_set_totalsimulationtime_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.hydrocephalus.SimulationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double intracranialspacevolumebaseline_ml_;
  double intracranialspacecompliance_ml_per_mmhg_;
  double cerebrospinalfluidabsorptionrate_ml_per_min_;
  double cerebrospinalfluidproductionrate_ml_per_min_;
  double brainvolume_ml_;
  double intracranialspacevolume_ml_;
  double meanbrainpressure_mmhg_;
  double meanbrainvasculatureinflow_ml_per_s_;
  double meanbrainvasculatureoutflow_ml_per_s_;
  double meanbraincarbondioxidepartialpressure_mmhg_;
  double meanbrainoxygenpartialpressure_mmhg_;
  double meanintracranialspacepressure_mmhg_;
  double cardiacoutput_ml_per_min_;
  double cerebralbloodflow_ml_per_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool achievedstabilization_;
  double cerebralperfusionpressure_mmhg_;
  double diastolicarterialpressure_mmhg_;
  double heartejectionfraction_;
  double heartrate_bpm_;
  double heartstrokevolume_ml_;
  double intracranialpressure_mmhg_;
  double meanarterialpressure_mmhg_;
  double meancentralvenouspressure_mmhg_;
  double pulmonarydiastolicarterialpressure_mmhg_;
  double pulmonarymeanarterialpressure_mmhg_;
  double pulmonarymeancapillaryflow_ml_per_s_;
  double pulmonarysystolicarterialpressure_mmhg_;
  double systolicarterialpressure_mmhg_;
  double systemicvascularresistance_mmhg_s_per_l_;
  double stabilizationtime_s_;
  double totalsimulationtime_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto;
};
// -------------------------------------------------------------------

class SimulationListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.hydrocephalus.SimulationListData) */ {
 public:
  inline SimulationListData() : SimulationListData(nullptr) {}
  virtual ~SimulationListData();

  SimulationListData(const SimulationListData& from);
  SimulationListData(SimulationListData&& from) noexcept
    : SimulationListData() {
    *this = ::std::move(from);
  }

  inline SimulationListData& operator=(const SimulationListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationListData& operator=(SimulationListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationListData& default_instance();

  static inline const SimulationListData* internal_default_instance() {
    return reinterpret_cast<const SimulationListData*>(
               &_SimulationListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimulationListData& a, SimulationListData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationListData* New() const final {
    return CreateMaybeMessage<SimulationListData>(nullptr);
  }

  SimulationListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationListData& from);
  void MergeFrom(const SimulationListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.hydrocephalus.SimulationListData";
  }
  protected:
  explicit SimulationListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationFieldNumber = 2,
    kOutputRootDirFieldNumber = 1,
  };
  // repeated .pulse.study.bind.hydrocephalus.SimulationData Simulation = 2;
  int simulation_size() const;
  private:
  int _internal_simulation_size() const;
  public:
  void clear_simulation();
  ::pulse::study::bind::hydrocephalus::SimulationData* mutable_simulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::hydrocephalus::SimulationData >*
      mutable_simulation();
  private:
  const ::pulse::study::bind::hydrocephalus::SimulationData& _internal_simulation(int index) const;
  ::pulse::study::bind::hydrocephalus::SimulationData* _internal_add_simulation();
  public:
  const ::pulse::study::bind::hydrocephalus::SimulationData& simulation(int index) const;
  ::pulse::study::bind::hydrocephalus::SimulationData* add_simulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::hydrocephalus::SimulationData >&
      simulation() const;

  // string OutputRootDir = 1;
  void clear_outputrootdir();
  const std::string& outputrootdir() const;
  void set_outputrootdir(const std::string& value);
  void set_outputrootdir(std::string&& value);
  void set_outputrootdir(const char* value);
  void set_outputrootdir(const char* value, size_t size);
  std::string* mutable_outputrootdir();
  std::string* release_outputrootdir();
  void set_allocated_outputrootdir(std::string* outputrootdir);
  private:
  const std::string& _internal_outputrootdir() const;
  void _internal_set_outputrootdir(const std::string& value);
  std::string* _internal_mutable_outputrootdir();
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.hydrocephalus.SimulationListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::hydrocephalus::SimulationData > simulation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputrootdir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimulationData

// uint32 ID = 1;
inline void SimulationData::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::id() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.ID)
  return _internal_id();
}
inline void SimulationData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void SimulationData::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.ID)
}

// string Name = 2;
inline void SimulationData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SimulationData::name() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.Name)
  return _internal_name();
}
inline void SimulationData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.Name)
}
inline std::string* SimulationData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.hydrocephalus.SimulationData.Name)
  return _internal_mutable_name();
}
inline const std::string& SimulationData::_internal_name() const {
  return name_.Get();
}
inline void SimulationData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimulationData::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.study.bind.hydrocephalus.SimulationData.Name)
}
inline void SimulationData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.hydrocephalus.SimulationData.Name)
}
inline void SimulationData::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.hydrocephalus.SimulationData.Name)
}
inline std::string* SimulationData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimulationData::release_name() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.hydrocephalus.SimulationData.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimulationData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.hydrocephalus.SimulationData.Name)
}

// double IntracranialSpaceVolumeBaseline_mL = 3;
inline void SimulationData::clear_intracranialspacevolumebaseline_ml() {
  intracranialspacevolumebaseline_ml_ = 0;
}
inline double SimulationData::_internal_intracranialspacevolumebaseline_ml() const {
  return intracranialspacevolumebaseline_ml_;
}
inline double SimulationData::intracranialspacevolumebaseline_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceVolumeBaseline_mL)
  return _internal_intracranialspacevolumebaseline_ml();
}
inline void SimulationData::_internal_set_intracranialspacevolumebaseline_ml(double value) {
  
  intracranialspacevolumebaseline_ml_ = value;
}
inline void SimulationData::set_intracranialspacevolumebaseline_ml(double value) {
  _internal_set_intracranialspacevolumebaseline_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceVolumeBaseline_mL)
}

// double IntracranialSpaceCompliance_mL_Per_mmHg = 4;
inline void SimulationData::clear_intracranialspacecompliance_ml_per_mmhg() {
  intracranialspacecompliance_ml_per_mmhg_ = 0;
}
inline double SimulationData::_internal_intracranialspacecompliance_ml_per_mmhg() const {
  return intracranialspacecompliance_ml_per_mmhg_;
}
inline double SimulationData::intracranialspacecompliance_ml_per_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceCompliance_mL_Per_mmHg)
  return _internal_intracranialspacecompliance_ml_per_mmhg();
}
inline void SimulationData::_internal_set_intracranialspacecompliance_ml_per_mmhg(double value) {
  
  intracranialspacecompliance_ml_per_mmhg_ = value;
}
inline void SimulationData::set_intracranialspacecompliance_ml_per_mmhg(double value) {
  _internal_set_intracranialspacecompliance_ml_per_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceCompliance_mL_Per_mmHg)
}

// double CerebrospinalFluidAbsorptionRate_mL_Per_min = 5;
inline void SimulationData::clear_cerebrospinalfluidabsorptionrate_ml_per_min() {
  cerebrospinalfluidabsorptionrate_ml_per_min_ = 0;
}
inline double SimulationData::_internal_cerebrospinalfluidabsorptionrate_ml_per_min() const {
  return cerebrospinalfluidabsorptionrate_ml_per_min_;
}
inline double SimulationData::cerebrospinalfluidabsorptionrate_ml_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.CerebrospinalFluidAbsorptionRate_mL_Per_min)
  return _internal_cerebrospinalfluidabsorptionrate_ml_per_min();
}
inline void SimulationData::_internal_set_cerebrospinalfluidabsorptionrate_ml_per_min(double value) {
  
  cerebrospinalfluidabsorptionrate_ml_per_min_ = value;
}
inline void SimulationData::set_cerebrospinalfluidabsorptionrate_ml_per_min(double value) {
  _internal_set_cerebrospinalfluidabsorptionrate_ml_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.CerebrospinalFluidAbsorptionRate_mL_Per_min)
}

// double CerebrospinalFluidProductionRate_mL_Per_min = 6;
inline void SimulationData::clear_cerebrospinalfluidproductionrate_ml_per_min() {
  cerebrospinalfluidproductionrate_ml_per_min_ = 0;
}
inline double SimulationData::_internal_cerebrospinalfluidproductionrate_ml_per_min() const {
  return cerebrospinalfluidproductionrate_ml_per_min_;
}
inline double SimulationData::cerebrospinalfluidproductionrate_ml_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.CerebrospinalFluidProductionRate_mL_Per_min)
  return _internal_cerebrospinalfluidproductionrate_ml_per_min();
}
inline void SimulationData::_internal_set_cerebrospinalfluidproductionrate_ml_per_min(double value) {
  
  cerebrospinalfluidproductionrate_ml_per_min_ = value;
}
inline void SimulationData::set_cerebrospinalfluidproductionrate_ml_per_min(double value) {
  _internal_set_cerebrospinalfluidproductionrate_ml_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.CerebrospinalFluidProductionRate_mL_Per_min)
}

// double BrainVolume_mL = 7;
inline void SimulationData::clear_brainvolume_ml() {
  brainvolume_ml_ = 0;
}
inline double SimulationData::_internal_brainvolume_ml() const {
  return brainvolume_ml_;
}
inline double SimulationData::brainvolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.BrainVolume_mL)
  return _internal_brainvolume_ml();
}
inline void SimulationData::_internal_set_brainvolume_ml(double value) {
  
  brainvolume_ml_ = value;
}
inline void SimulationData::set_brainvolume_ml(double value) {
  _internal_set_brainvolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.BrainVolume_mL)
}

// double IntracranialSpaceVolume_mL = 8;
inline void SimulationData::clear_intracranialspacevolume_ml() {
  intracranialspacevolume_ml_ = 0;
}
inline double SimulationData::_internal_intracranialspacevolume_ml() const {
  return intracranialspacevolume_ml_;
}
inline double SimulationData::intracranialspacevolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceVolume_mL)
  return _internal_intracranialspacevolume_ml();
}
inline void SimulationData::_internal_set_intracranialspacevolume_ml(double value) {
  
  intracranialspacevolume_ml_ = value;
}
inline void SimulationData::set_intracranialspacevolume_ml(double value) {
  _internal_set_intracranialspacevolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.IntracranialSpaceVolume_mL)
}

// double MeanBrainPressure_mmHg = 9;
inline void SimulationData::clear_meanbrainpressure_mmhg() {
  meanbrainpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meanbrainpressure_mmhg() const {
  return meanbrainpressure_mmhg_;
}
inline double SimulationData::meanbrainpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainPressure_mmHg)
  return _internal_meanbrainpressure_mmhg();
}
inline void SimulationData::_internal_set_meanbrainpressure_mmhg(double value) {
  
  meanbrainpressure_mmhg_ = value;
}
inline void SimulationData::set_meanbrainpressure_mmhg(double value) {
  _internal_set_meanbrainpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainPressure_mmHg)
}

// double MeanBrainVasculatureInFlow_mL_Per_s = 10;
inline void SimulationData::clear_meanbrainvasculatureinflow_ml_per_s() {
  meanbrainvasculatureinflow_ml_per_s_ = 0;
}
inline double SimulationData::_internal_meanbrainvasculatureinflow_ml_per_s() const {
  return meanbrainvasculatureinflow_ml_per_s_;
}
inline double SimulationData::meanbrainvasculatureinflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainVasculatureInFlow_mL_Per_s)
  return _internal_meanbrainvasculatureinflow_ml_per_s();
}
inline void SimulationData::_internal_set_meanbrainvasculatureinflow_ml_per_s(double value) {
  
  meanbrainvasculatureinflow_ml_per_s_ = value;
}
inline void SimulationData::set_meanbrainvasculatureinflow_ml_per_s(double value) {
  _internal_set_meanbrainvasculatureinflow_ml_per_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainVasculatureInFlow_mL_Per_s)
}

// double MeanBrainVasculatureOutFlow_mL_Per_s = 11;
inline void SimulationData::clear_meanbrainvasculatureoutflow_ml_per_s() {
  meanbrainvasculatureoutflow_ml_per_s_ = 0;
}
inline double SimulationData::_internal_meanbrainvasculatureoutflow_ml_per_s() const {
  return meanbrainvasculatureoutflow_ml_per_s_;
}
inline double SimulationData::meanbrainvasculatureoutflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainVasculatureOutFlow_mL_Per_s)
  return _internal_meanbrainvasculatureoutflow_ml_per_s();
}
inline void SimulationData::_internal_set_meanbrainvasculatureoutflow_ml_per_s(double value) {
  
  meanbrainvasculatureoutflow_ml_per_s_ = value;
}
inline void SimulationData::set_meanbrainvasculatureoutflow_ml_per_s(double value) {
  _internal_set_meanbrainvasculatureoutflow_ml_per_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainVasculatureOutFlow_mL_Per_s)
}

// double MeanBrainCarbonDioxidePartialPressure_mmHg = 12;
inline void SimulationData::clear_meanbraincarbondioxidepartialpressure_mmhg() {
  meanbraincarbondioxidepartialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meanbraincarbondioxidepartialpressure_mmhg() const {
  return meanbraincarbondioxidepartialpressure_mmhg_;
}
inline double SimulationData::meanbraincarbondioxidepartialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainCarbonDioxidePartialPressure_mmHg)
  return _internal_meanbraincarbondioxidepartialpressure_mmhg();
}
inline void SimulationData::_internal_set_meanbraincarbondioxidepartialpressure_mmhg(double value) {
  
  meanbraincarbondioxidepartialpressure_mmhg_ = value;
}
inline void SimulationData::set_meanbraincarbondioxidepartialpressure_mmhg(double value) {
  _internal_set_meanbraincarbondioxidepartialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainCarbonDioxidePartialPressure_mmHg)
}

// double MeanBrainOxygenPartialPressure_mmHg = 13;
inline void SimulationData::clear_meanbrainoxygenpartialpressure_mmhg() {
  meanbrainoxygenpartialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meanbrainoxygenpartialpressure_mmhg() const {
  return meanbrainoxygenpartialpressure_mmhg_;
}
inline double SimulationData::meanbrainoxygenpartialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainOxygenPartialPressure_mmHg)
  return _internal_meanbrainoxygenpartialpressure_mmhg();
}
inline void SimulationData::_internal_set_meanbrainoxygenpartialpressure_mmhg(double value) {
  
  meanbrainoxygenpartialpressure_mmhg_ = value;
}
inline void SimulationData::set_meanbrainoxygenpartialpressure_mmhg(double value) {
  _internal_set_meanbrainoxygenpartialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanBrainOxygenPartialPressure_mmHg)
}

// double MeanIntracranialSpacePressure_mmHg = 14;
inline void SimulationData::clear_meanintracranialspacepressure_mmhg() {
  meanintracranialspacepressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meanintracranialspacepressure_mmhg() const {
  return meanintracranialspacepressure_mmhg_;
}
inline double SimulationData::meanintracranialspacepressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanIntracranialSpacePressure_mmHg)
  return _internal_meanintracranialspacepressure_mmhg();
}
inline void SimulationData::_internal_set_meanintracranialspacepressure_mmhg(double value) {
  
  meanintracranialspacepressure_mmhg_ = value;
}
inline void SimulationData::set_meanintracranialspacepressure_mmhg(double value) {
  _internal_set_meanintracranialspacepressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanIntracranialSpacePressure_mmHg)
}

// double CardiacOutput_mL_Per_min = 15;
inline void SimulationData::clear_cardiacoutput_ml_per_min() {
  cardiacoutput_ml_per_min_ = 0;
}
inline double SimulationData::_internal_cardiacoutput_ml_per_min() const {
  return cardiacoutput_ml_per_min_;
}
inline double SimulationData::cardiacoutput_ml_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.CardiacOutput_mL_Per_min)
  return _internal_cardiacoutput_ml_per_min();
}
inline void SimulationData::_internal_set_cardiacoutput_ml_per_min(double value) {
  
  cardiacoutput_ml_per_min_ = value;
}
inline void SimulationData::set_cardiacoutput_ml_per_min(double value) {
  _internal_set_cardiacoutput_ml_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.CardiacOutput_mL_Per_min)
}

// double CerebralBloodFlow_mL_Per_min = 16;
inline void SimulationData::clear_cerebralbloodflow_ml_per_min() {
  cerebralbloodflow_ml_per_min_ = 0;
}
inline double SimulationData::_internal_cerebralbloodflow_ml_per_min() const {
  return cerebralbloodflow_ml_per_min_;
}
inline double SimulationData::cerebralbloodflow_ml_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.CerebralBloodFlow_mL_Per_min)
  return _internal_cerebralbloodflow_ml_per_min();
}
inline void SimulationData::_internal_set_cerebralbloodflow_ml_per_min(double value) {
  
  cerebralbloodflow_ml_per_min_ = value;
}
inline void SimulationData::set_cerebralbloodflow_ml_per_min(double value) {
  _internal_set_cerebralbloodflow_ml_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.CerebralBloodFlow_mL_Per_min)
}

// double CerebralPerfusionPressure_mmHg = 17;
inline void SimulationData::clear_cerebralperfusionpressure_mmhg() {
  cerebralperfusionpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_cerebralperfusionpressure_mmhg() const {
  return cerebralperfusionpressure_mmhg_;
}
inline double SimulationData::cerebralperfusionpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.CerebralPerfusionPressure_mmHg)
  return _internal_cerebralperfusionpressure_mmhg();
}
inline void SimulationData::_internal_set_cerebralperfusionpressure_mmhg(double value) {
  
  cerebralperfusionpressure_mmhg_ = value;
}
inline void SimulationData::set_cerebralperfusionpressure_mmhg(double value) {
  _internal_set_cerebralperfusionpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.CerebralPerfusionPressure_mmHg)
}

// double DiastolicArterialPressure_mmHg = 18;
inline void SimulationData::clear_diastolicarterialpressure_mmhg() {
  diastolicarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_diastolicarterialpressure_mmhg() const {
  return diastolicarterialpressure_mmhg_;
}
inline double SimulationData::diastolicarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.DiastolicArterialPressure_mmHg)
  return _internal_diastolicarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_diastolicarterialpressure_mmhg(double value) {
  
  diastolicarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_diastolicarterialpressure_mmhg(double value) {
  _internal_set_diastolicarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.DiastolicArterialPressure_mmHg)
}

// double HeartEjectionFraction = 19;
inline void SimulationData::clear_heartejectionfraction() {
  heartejectionfraction_ = 0;
}
inline double SimulationData::_internal_heartejectionfraction() const {
  return heartejectionfraction_;
}
inline double SimulationData::heartejectionfraction() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.HeartEjectionFraction)
  return _internal_heartejectionfraction();
}
inline void SimulationData::_internal_set_heartejectionfraction(double value) {
  
  heartejectionfraction_ = value;
}
inline void SimulationData::set_heartejectionfraction(double value) {
  _internal_set_heartejectionfraction(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.HeartEjectionFraction)
}

// double HeartRate_bpm = 20;
inline void SimulationData::clear_heartrate_bpm() {
  heartrate_bpm_ = 0;
}
inline double SimulationData::_internal_heartrate_bpm() const {
  return heartrate_bpm_;
}
inline double SimulationData::heartrate_bpm() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.HeartRate_bpm)
  return _internal_heartrate_bpm();
}
inline void SimulationData::_internal_set_heartrate_bpm(double value) {
  
  heartrate_bpm_ = value;
}
inline void SimulationData::set_heartrate_bpm(double value) {
  _internal_set_heartrate_bpm(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.HeartRate_bpm)
}

// double HeartStrokeVolume_mL = 21;
inline void SimulationData::clear_heartstrokevolume_ml() {
  heartstrokevolume_ml_ = 0;
}
inline double SimulationData::_internal_heartstrokevolume_ml() const {
  return heartstrokevolume_ml_;
}
inline double SimulationData::heartstrokevolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.HeartStrokeVolume_mL)
  return _internal_heartstrokevolume_ml();
}
inline void SimulationData::_internal_set_heartstrokevolume_ml(double value) {
  
  heartstrokevolume_ml_ = value;
}
inline void SimulationData::set_heartstrokevolume_ml(double value) {
  _internal_set_heartstrokevolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.HeartStrokeVolume_mL)
}

// double IntracranialPressure_mmHg = 22;
inline void SimulationData::clear_intracranialpressure_mmhg() {
  intracranialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_intracranialpressure_mmhg() const {
  return intracranialpressure_mmhg_;
}
inline double SimulationData::intracranialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.IntracranialPressure_mmHg)
  return _internal_intracranialpressure_mmhg();
}
inline void SimulationData::_internal_set_intracranialpressure_mmhg(double value) {
  
  intracranialpressure_mmhg_ = value;
}
inline void SimulationData::set_intracranialpressure_mmhg(double value) {
  _internal_set_intracranialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.IntracranialPressure_mmHg)
}

// double MeanArterialPressure_mmHg = 23;
inline void SimulationData::clear_meanarterialpressure_mmhg() {
  meanarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meanarterialpressure_mmhg() const {
  return meanarterialpressure_mmhg_;
}
inline double SimulationData::meanarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanArterialPressure_mmHg)
  return _internal_meanarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_meanarterialpressure_mmhg(double value) {
  
  meanarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_meanarterialpressure_mmhg(double value) {
  _internal_set_meanarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanArterialPressure_mmHg)
}

// double MeanCentralVenousPressure_mmHg = 24;
inline void SimulationData::clear_meancentralvenouspressure_mmhg() {
  meancentralvenouspressure_mmhg_ = 0;
}
inline double SimulationData::_internal_meancentralvenouspressure_mmhg() const {
  return meancentralvenouspressure_mmhg_;
}
inline double SimulationData::meancentralvenouspressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.MeanCentralVenousPressure_mmHg)
  return _internal_meancentralvenouspressure_mmhg();
}
inline void SimulationData::_internal_set_meancentralvenouspressure_mmhg(double value) {
  
  meancentralvenouspressure_mmhg_ = value;
}
inline void SimulationData::set_meancentralvenouspressure_mmhg(double value) {
  _internal_set_meancentralvenouspressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.MeanCentralVenousPressure_mmHg)
}

// double PulmonaryDiastolicArterialPressure_mmHg = 25;
inline void SimulationData::clear_pulmonarydiastolicarterialpressure_mmhg() {
  pulmonarydiastolicarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_pulmonarydiastolicarterialpressure_mmhg() const {
  return pulmonarydiastolicarterialpressure_mmhg_;
}
inline double SimulationData::pulmonarydiastolicarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryDiastolicArterialPressure_mmHg)
  return _internal_pulmonarydiastolicarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_pulmonarydiastolicarterialpressure_mmhg(double value) {
  
  pulmonarydiastolicarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_pulmonarydiastolicarterialpressure_mmhg(double value) {
  _internal_set_pulmonarydiastolicarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryDiastolicArterialPressure_mmHg)
}

// double PulmonaryMeanArterialPressure_mmHg = 26;
inline void SimulationData::clear_pulmonarymeanarterialpressure_mmhg() {
  pulmonarymeanarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_pulmonarymeanarterialpressure_mmhg() const {
  return pulmonarymeanarterialpressure_mmhg_;
}
inline double SimulationData::pulmonarymeanarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryMeanArterialPressure_mmHg)
  return _internal_pulmonarymeanarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_pulmonarymeanarterialpressure_mmhg(double value) {
  
  pulmonarymeanarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_pulmonarymeanarterialpressure_mmhg(double value) {
  _internal_set_pulmonarymeanarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryMeanArterialPressure_mmHg)
}

// double PulmonaryMeanCapillaryFlow_mL_Per_s = 27;
inline void SimulationData::clear_pulmonarymeancapillaryflow_ml_per_s() {
  pulmonarymeancapillaryflow_ml_per_s_ = 0;
}
inline double SimulationData::_internal_pulmonarymeancapillaryflow_ml_per_s() const {
  return pulmonarymeancapillaryflow_ml_per_s_;
}
inline double SimulationData::pulmonarymeancapillaryflow_ml_per_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryMeanCapillaryFlow_mL_Per_s)
  return _internal_pulmonarymeancapillaryflow_ml_per_s();
}
inline void SimulationData::_internal_set_pulmonarymeancapillaryflow_ml_per_s(double value) {
  
  pulmonarymeancapillaryflow_ml_per_s_ = value;
}
inline void SimulationData::set_pulmonarymeancapillaryflow_ml_per_s(double value) {
  _internal_set_pulmonarymeancapillaryflow_ml_per_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.PulmonaryMeanCapillaryFlow_mL_Per_s)
}

// double PulmonarySystolicArterialPressure_mmHg = 28;
inline void SimulationData::clear_pulmonarysystolicarterialpressure_mmhg() {
  pulmonarysystolicarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_pulmonarysystolicarterialpressure_mmhg() const {
  return pulmonarysystolicarterialpressure_mmhg_;
}
inline double SimulationData::pulmonarysystolicarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.PulmonarySystolicArterialPressure_mmHg)
  return _internal_pulmonarysystolicarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_pulmonarysystolicarterialpressure_mmhg(double value) {
  
  pulmonarysystolicarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_pulmonarysystolicarterialpressure_mmhg(double value) {
  _internal_set_pulmonarysystolicarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.PulmonarySystolicArterialPressure_mmHg)
}

// double SystolicArterialPressure_mmHg = 29;
inline void SimulationData::clear_systolicarterialpressure_mmhg() {
  systolicarterialpressure_mmhg_ = 0;
}
inline double SimulationData::_internal_systolicarterialpressure_mmhg() const {
  return systolicarterialpressure_mmhg_;
}
inline double SimulationData::systolicarterialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.SystolicArterialPressure_mmHg)
  return _internal_systolicarterialpressure_mmhg();
}
inline void SimulationData::_internal_set_systolicarterialpressure_mmhg(double value) {
  
  systolicarterialpressure_mmhg_ = value;
}
inline void SimulationData::set_systolicarterialpressure_mmhg(double value) {
  _internal_set_systolicarterialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.SystolicArterialPressure_mmHg)
}

// double SystemicVascularResistance_mmHg_s_Per_L = 30;
inline void SimulationData::clear_systemicvascularresistance_mmhg_s_per_l() {
  systemicvascularresistance_mmhg_s_per_l_ = 0;
}
inline double SimulationData::_internal_systemicvascularresistance_mmhg_s_per_l() const {
  return systemicvascularresistance_mmhg_s_per_l_;
}
inline double SimulationData::systemicvascularresistance_mmhg_s_per_l() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.SystemicVascularResistance_mmHg_s_Per_L)
  return _internal_systemicvascularresistance_mmhg_s_per_l();
}
inline void SimulationData::_internal_set_systemicvascularresistance_mmhg_s_per_l(double value) {
  
  systemicvascularresistance_mmhg_s_per_l_ = value;
}
inline void SimulationData::set_systemicvascularresistance_mmhg_s_per_l(double value) {
  _internal_set_systemicvascularresistance_mmhg_s_per_l(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.SystemicVascularResistance_mmHg_s_Per_L)
}

// bool AchievedStabilization = 31;
inline void SimulationData::clear_achievedstabilization() {
  achievedstabilization_ = false;
}
inline bool SimulationData::_internal_achievedstabilization() const {
  return achievedstabilization_;
}
inline bool SimulationData::achievedstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.AchievedStabilization)
  return _internal_achievedstabilization();
}
inline void SimulationData::_internal_set_achievedstabilization(bool value) {
  
  achievedstabilization_ = value;
}
inline void SimulationData::set_achievedstabilization(bool value) {
  _internal_set_achievedstabilization(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.AchievedStabilization)
}

// double StabilizationTime_s = 32;
inline void SimulationData::clear_stabilizationtime_s() {
  stabilizationtime_s_ = 0;
}
inline double SimulationData::_internal_stabilizationtime_s() const {
  return stabilizationtime_s_;
}
inline double SimulationData::stabilizationtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.StabilizationTime_s)
  return _internal_stabilizationtime_s();
}
inline void SimulationData::_internal_set_stabilizationtime_s(double value) {
  
  stabilizationtime_s_ = value;
}
inline void SimulationData::set_stabilizationtime_s(double value) {
  _internal_set_stabilizationtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.StabilizationTime_s)
}

// double TotalSimulationTime_s = 33;
inline void SimulationData::clear_totalsimulationtime_s() {
  totalsimulationtime_s_ = 0;
}
inline double SimulationData::_internal_totalsimulationtime_s() const {
  return totalsimulationtime_s_;
}
inline double SimulationData::totalsimulationtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationData.TotalSimulationTime_s)
  return _internal_totalsimulationtime_s();
}
inline void SimulationData::_internal_set_totalsimulationtime_s(double value) {
  
  totalsimulationtime_s_ = value;
}
inline void SimulationData::set_totalsimulationtime_s(double value) {
  _internal_set_totalsimulationtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationData.TotalSimulationTime_s)
}

// -------------------------------------------------------------------

// SimulationListData

// string OutputRootDir = 1;
inline void SimulationListData::clear_outputrootdir() {
  outputrootdir_.ClearToEmpty();
}
inline const std::string& SimulationListData::outputrootdir() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
  return _internal_outputrootdir();
}
inline void SimulationListData::set_outputrootdir(const std::string& value) {
  _internal_set_outputrootdir(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
}
inline std::string* SimulationListData::mutable_outputrootdir() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
  return _internal_mutable_outputrootdir();
}
inline const std::string& SimulationListData::_internal_outputrootdir() const {
  return outputrootdir_.Get();
}
inline void SimulationListData::_internal_set_outputrootdir(const std::string& value) {
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimulationListData::set_outputrootdir(std::string&& value) {
  
  outputrootdir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
}
inline void SimulationListData::set_outputrootdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
}
inline void SimulationListData::set_outputrootdir(const char* value,
    size_t size) {
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
}
inline std::string* SimulationListData::_internal_mutable_outputrootdir() {
  
  return outputrootdir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimulationListData::release_outputrootdir() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
  return outputrootdir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimulationListData::set_allocated_outputrootdir(std::string* outputrootdir) {
  if (outputrootdir != nullptr) {
    
  } else {
    
  }
  outputrootdir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputrootdir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir)
}

// repeated .pulse.study.bind.hydrocephalus.SimulationData Simulation = 2;
inline int SimulationListData::_internal_simulation_size() const {
  return simulation_.size();
}
inline int SimulationListData::simulation_size() const {
  return _internal_simulation_size();
}
inline void SimulationListData::clear_simulation() {
  simulation_.Clear();
}
inline ::pulse::study::bind::hydrocephalus::SimulationData* SimulationListData::mutable_simulation(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.hydrocephalus.SimulationListData.Simulation)
  return simulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::hydrocephalus::SimulationData >*
SimulationListData::mutable_simulation() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.hydrocephalus.SimulationListData.Simulation)
  return &simulation_;
}
inline const ::pulse::study::bind::hydrocephalus::SimulationData& SimulationListData::_internal_simulation(int index) const {
  return simulation_.Get(index);
}
inline const ::pulse::study::bind::hydrocephalus::SimulationData& SimulationListData::simulation(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.hydrocephalus.SimulationListData.Simulation)
  return _internal_simulation(index);
}
inline ::pulse::study::bind::hydrocephalus::SimulationData* SimulationListData::_internal_add_simulation() {
  return simulation_.Add();
}
inline ::pulse::study::bind::hydrocephalus::SimulationData* SimulationListData::add_simulation() {
  // @@protoc_insertion_point(field_add:pulse.study.bind.hydrocephalus.SimulationListData.Simulation)
  return _internal_add_simulation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::hydrocephalus::SimulationData >&
SimulationListData::simulation() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.hydrocephalus.SimulationListData.Simulation)
  return simulation_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hydrocephalus
}  // namespace bind
}  // namespace study
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto
