// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/study/bind/Hydrocephalus.proto

#include "pulse/study/bind/Hydrocephalus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto;
namespace pulse {
namespace study {
namespace bind {
namespace hydrocephalus {
class SimulationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationData> _instance;
} _SimulationData_default_instance_;
class SimulationListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationListData> _instance;
} _SimulationListData_default_instance_;
}  // namespace hydrocephalus
}  // namespace bind
}  // namespace study
}  // namespace pulse
static void InitDefaultsscc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::hydrocephalus::_SimulationData_default_instance_;
    new (ptr) ::pulse::study::bind::hydrocephalus::SimulationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto}, {}};

static void InitDefaultsscc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::hydrocephalus::_SimulationListData_default_instance_;
    new (ptr) ::pulse::study::bind::hydrocephalus::SimulationListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto}, {
      &scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, id_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, intracranialspacevolumebaseline_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, intracranialspacecompliance_ml_per_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, cerebrospinalfluidabsorptionrate_ml_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, cerebrospinalfluidproductionrate_ml_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, brainvolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, intracranialspacevolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanbrainpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanbrainvasculatureinflow_ml_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanbrainvasculatureoutflow_ml_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanbraincarbondioxidepartialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanbrainoxygenpartialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanintracranialspacepressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, cardiacoutput_ml_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, cerebralbloodflow_ml_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, cerebralperfusionpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, diastolicarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, heartejectionfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, heartrate_bpm_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, heartstrokevolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, intracranialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meanarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, meancentralvenouspressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, pulmonarydiastolicarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, pulmonarymeanarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, pulmonarymeancapillaryflow_ml_per_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, pulmonarysystolicarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, systolicarterialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, systemicvascularresistance_mmhg_s_per_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, achievedstabilization_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, stabilizationtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationData, totalsimulationtime_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationListData, outputrootdir_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::hydrocephalus::SimulationListData, simulation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::study::bind::hydrocephalus::SimulationData)},
  { 38, -1, sizeof(::pulse::study::bind::hydrocephalus::SimulationListData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::hydrocephalus::_SimulationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::hydrocephalus::_SimulationListData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$pulse/study/bind/Hydrocephalus.proto\022\036"
  "pulse.study.bind.hydrocephalus\"\374\t\n\016Simul"
  "ationData\022\n\n\002ID\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022*\n\"I"
  "ntracranialSpaceVolumeBaseline_mL\030\003 \001(\001\022"
  "/\n\'IntracranialSpaceCompliance_mL_Per_mm"
  "Hg\030\004 \001(\001\0223\n+CerebrospinalFluidAbsorption"
  "Rate_mL_Per_min\030\005 \001(\001\0223\n+CerebrospinalFl"
  "uidProductionRate_mL_Per_min\030\006 \001(\001\022\026\n\016Br"
  "ainVolume_mL\030\007 \001(\001\022\"\n\032IntracranialSpaceV"
  "olume_mL\030\010 \001(\001\022\036\n\026MeanBrainPressure_mmHg"
  "\030\t \001(\001\022+\n#MeanBrainVasculatureInFlow_mL_"
  "Per_s\030\n \001(\001\022,\n$MeanBrainVasculatureOutFl"
  "ow_mL_Per_s\030\013 \001(\001\0222\n*MeanBrainCarbonDiox"
  "idePartialPressure_mmHg\030\014 \001(\001\022+\n#MeanBra"
  "inOxygenPartialPressure_mmHg\030\r \001(\001\022*\n\"Me"
  "anIntracranialSpacePressure_mmHg\030\016 \001(\001\022 "
  "\n\030CardiacOutput_mL_Per_min\030\017 \001(\001\022$\n\034Cere"
  "bralBloodFlow_mL_Per_min\030\020 \001(\001\022&\n\036Cerebr"
  "alPerfusionPressure_mmHg\030\021 \001(\001\022&\n\036Diasto"
  "licArterialPressure_mmHg\030\022 \001(\001\022\035\n\025HeartE"
  "jectionFraction\030\023 \001(\001\022\025\n\rHeartRate_bpm\030\024"
  " \001(\001\022\034\n\024HeartStrokeVolume_mL\030\025 \001(\001\022!\n\031In"
  "tracranialPressure_mmHg\030\026 \001(\001\022!\n\031MeanArt"
  "erialPressure_mmHg\030\027 \001(\001\022&\n\036MeanCentralV"
  "enousPressure_mmHg\030\030 \001(\001\022/\n\'PulmonaryDia"
  "stolicArterialPressure_mmHg\030\031 \001(\001\022*\n\"Pul"
  "monaryMeanArterialPressure_mmHg\030\032 \001(\001\022+\n"
  "#PulmonaryMeanCapillaryFlow_mL_Per_s\030\033 \001"
  "(\001\022.\n&PulmonarySystolicArterialPressure_"
  "mmHg\030\034 \001(\001\022%\n\035SystolicArterialPressure_m"
  "mHg\030\035 \001(\001\022/\n\'SystemicVascularResistance_"
  "mmHg_s_Per_L\030\036 \001(\001\022\035\n\025AchievedStabilizat"
  "ion\030\037 \001(\010\022\033\n\023StabilizationTime_s\030  \001(\001\022\035"
  "\n\025TotalSimulationTime_s\030! \001(\001\"o\n\022Simulat"
  "ionListData\022\025\n\rOutputRootDir\030\001 \001(\t\022B\n\nSi"
  "mulation\030\002 \003(\0132..pulse.study.bind.hydroc"
  "ephalus.SimulationDataBO\n*com.kitware.pu"
  "lse.study.bind.hydrocephalusH\001\252\002\036pulse.s"
  "tudy.bind.hydrocephalusb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_sccs[2] = {
  &scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base,
  &scc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto, "pulse/study/bind/Hydrocephalus.proto", 1551,
  &descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_once, descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_sccs, descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto::offsets,
  file_level_metadata_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto, 2, file_level_enum_descriptors_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto, file_level_service_descriptors_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto)), true);
namespace pulse {
namespace study {
namespace bind {
namespace hydrocephalus {

// ===================================================================

class SimulationData::_Internal {
 public:
};

SimulationData::SimulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.hydrocephalus.SimulationData)
}
SimulationData::SimulationData(const SimulationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&intracranialspacevolumebaseline_ml_, &from.intracranialspacevolumebaseline_ml_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalsimulationtime_s_) -
    reinterpret_cast<char*>(&intracranialspacevolumebaseline_ml_)) + sizeof(totalsimulationtime_s_));
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.hydrocephalus.SimulationData)
}

void SimulationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&intracranialspacevolumebaseline_ml_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalsimulationtime_s_) -
      reinterpret_cast<char*>(&intracranialspacevolumebaseline_ml_)) + sizeof(totalsimulationtime_s_));
}

SimulationData::~SimulationData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.hydrocephalus.SimulationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulationData::ArenaDtor(void* object) {
  SimulationData* _this = reinterpret_cast< SimulationData* >(object);
  (void)_this;
}
void SimulationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationData& SimulationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base);
  return *internal_default_instance();
}


void SimulationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.hydrocephalus.SimulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&intracranialspacevolumebaseline_ml_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalsimulationtime_s_) -
      reinterpret_cast<char*>(&intracranialspacevolumebaseline_ml_)) + sizeof(totalsimulationtime_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.hydrocephalus.SimulationData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double IntracranialSpaceVolumeBaseline_mL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          intracranialspacevolumebaseline_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IntracranialSpaceCompliance_mL_Per_mmHg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          intracranialspacecompliance_ml_per_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CerebrospinalFluidAbsorptionRate_mL_Per_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cerebrospinalfluidabsorptionrate_ml_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CerebrospinalFluidProductionRate_mL_Per_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cerebrospinalfluidproductionrate_ml_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BrainVolume_mL = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          brainvolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IntracranialSpaceVolume_mL = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          intracranialspacevolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanBrainPressure_mmHg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          meanbrainpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanBrainVasculatureInFlow_mL_Per_s = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          meanbrainvasculatureinflow_ml_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanBrainVasculatureOutFlow_mL_Per_s = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          meanbrainvasculatureoutflow_ml_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanBrainCarbonDioxidePartialPressure_mmHg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          meanbraincarbondioxidepartialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanBrainOxygenPartialPressure_mmHg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          meanbrainoxygenpartialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanIntracranialSpacePressure_mmHg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          meanintracranialspacepressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CardiacOutput_mL_Per_min = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          cardiacoutput_ml_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CerebralBloodFlow_mL_Per_min = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          cerebralbloodflow_ml_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CerebralPerfusionPressure_mmHg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          cerebralperfusionpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double DiastolicArterialPressure_mmHg = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          diastolicarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HeartEjectionFraction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          heartejectionfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HeartRate_bpm = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          heartrate_bpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HeartStrokeVolume_mL = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          heartstrokevolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IntracranialPressure_mmHg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          intracranialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanArterialPressure_mmHg = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          meanarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanCentralVenousPressure_mmHg = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          meancentralvenouspressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PulmonaryDiastolicArterialPressure_mmHg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          pulmonarydiastolicarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PulmonaryMeanArterialPressure_mmHg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          pulmonarymeanarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PulmonaryMeanCapillaryFlow_mL_Per_s = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          pulmonarymeancapillaryflow_ml_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PulmonarySystolicArterialPressure_mmHg = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          pulmonarysystolicarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double SystolicArterialPressure_mmHg = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          systolicarterialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double SystemicVascularResistance_mmHg_s_Per_L = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          systemicvascularresistance_mmhg_s_per_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool AchievedStabilization = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          achievedstabilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double StabilizationTime_s = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          stabilizationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalSimulationTime_s = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          totalsimulationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.hydrocephalus.SimulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.hydrocephalus.SimulationData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double IntracranialSpaceVolumeBaseline_mL = 3;
  if (!(this->intracranialspacevolumebaseline_ml() <= 0 && this->intracranialspacevolumebaseline_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_intracranialspacevolumebaseline_ml(), target);
  }

  // double IntracranialSpaceCompliance_mL_Per_mmHg = 4;
  if (!(this->intracranialspacecompliance_ml_per_mmhg() <= 0 && this->intracranialspacecompliance_ml_per_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_intracranialspacecompliance_ml_per_mmhg(), target);
  }

  // double CerebrospinalFluidAbsorptionRate_mL_Per_min = 5;
  if (!(this->cerebrospinalfluidabsorptionrate_ml_per_min() <= 0 && this->cerebrospinalfluidabsorptionrate_ml_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cerebrospinalfluidabsorptionrate_ml_per_min(), target);
  }

  // double CerebrospinalFluidProductionRate_mL_Per_min = 6;
  if (!(this->cerebrospinalfluidproductionrate_ml_per_min() <= 0 && this->cerebrospinalfluidproductionrate_ml_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cerebrospinalfluidproductionrate_ml_per_min(), target);
  }

  // double BrainVolume_mL = 7;
  if (!(this->brainvolume_ml() <= 0 && this->brainvolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_brainvolume_ml(), target);
  }

  // double IntracranialSpaceVolume_mL = 8;
  if (!(this->intracranialspacevolume_ml() <= 0 && this->intracranialspacevolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_intracranialspacevolume_ml(), target);
  }

  // double MeanBrainPressure_mmHg = 9;
  if (!(this->meanbrainpressure_mmhg() <= 0 && this->meanbrainpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_meanbrainpressure_mmhg(), target);
  }

  // double MeanBrainVasculatureInFlow_mL_Per_s = 10;
  if (!(this->meanbrainvasculatureinflow_ml_per_s() <= 0 && this->meanbrainvasculatureinflow_ml_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_meanbrainvasculatureinflow_ml_per_s(), target);
  }

  // double MeanBrainVasculatureOutFlow_mL_Per_s = 11;
  if (!(this->meanbrainvasculatureoutflow_ml_per_s() <= 0 && this->meanbrainvasculatureoutflow_ml_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_meanbrainvasculatureoutflow_ml_per_s(), target);
  }

  // double MeanBrainCarbonDioxidePartialPressure_mmHg = 12;
  if (!(this->meanbraincarbondioxidepartialpressure_mmhg() <= 0 && this->meanbraincarbondioxidepartialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_meanbraincarbondioxidepartialpressure_mmhg(), target);
  }

  // double MeanBrainOxygenPartialPressure_mmHg = 13;
  if (!(this->meanbrainoxygenpartialpressure_mmhg() <= 0 && this->meanbrainoxygenpartialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_meanbrainoxygenpartialpressure_mmhg(), target);
  }

  // double MeanIntracranialSpacePressure_mmHg = 14;
  if (!(this->meanintracranialspacepressure_mmhg() <= 0 && this->meanintracranialspacepressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_meanintracranialspacepressure_mmhg(), target);
  }

  // double CardiacOutput_mL_Per_min = 15;
  if (!(this->cardiacoutput_ml_per_min() <= 0 && this->cardiacoutput_ml_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_cardiacoutput_ml_per_min(), target);
  }

  // double CerebralBloodFlow_mL_Per_min = 16;
  if (!(this->cerebralbloodflow_ml_per_min() <= 0 && this->cerebralbloodflow_ml_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_cerebralbloodflow_ml_per_min(), target);
  }

  // double CerebralPerfusionPressure_mmHg = 17;
  if (!(this->cerebralperfusionpressure_mmhg() <= 0 && this->cerebralperfusionpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_cerebralperfusionpressure_mmhg(), target);
  }

  // double DiastolicArterialPressure_mmHg = 18;
  if (!(this->diastolicarterialpressure_mmhg() <= 0 && this->diastolicarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_diastolicarterialpressure_mmhg(), target);
  }

  // double HeartEjectionFraction = 19;
  if (!(this->heartejectionfraction() <= 0 && this->heartejectionfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_heartejectionfraction(), target);
  }

  // double HeartRate_bpm = 20;
  if (!(this->heartrate_bpm() <= 0 && this->heartrate_bpm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_heartrate_bpm(), target);
  }

  // double HeartStrokeVolume_mL = 21;
  if (!(this->heartstrokevolume_ml() <= 0 && this->heartstrokevolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_heartstrokevolume_ml(), target);
  }

  // double IntracranialPressure_mmHg = 22;
  if (!(this->intracranialpressure_mmhg() <= 0 && this->intracranialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_intracranialpressure_mmhg(), target);
  }

  // double MeanArterialPressure_mmHg = 23;
  if (!(this->meanarterialpressure_mmhg() <= 0 && this->meanarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_meanarterialpressure_mmhg(), target);
  }

  // double MeanCentralVenousPressure_mmHg = 24;
  if (!(this->meancentralvenouspressure_mmhg() <= 0 && this->meancentralvenouspressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_meancentralvenouspressure_mmhg(), target);
  }

  // double PulmonaryDiastolicArterialPressure_mmHg = 25;
  if (!(this->pulmonarydiastolicarterialpressure_mmhg() <= 0 && this->pulmonarydiastolicarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_pulmonarydiastolicarterialpressure_mmhg(), target);
  }

  // double PulmonaryMeanArterialPressure_mmHg = 26;
  if (!(this->pulmonarymeanarterialpressure_mmhg() <= 0 && this->pulmonarymeanarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_pulmonarymeanarterialpressure_mmhg(), target);
  }

  // double PulmonaryMeanCapillaryFlow_mL_Per_s = 27;
  if (!(this->pulmonarymeancapillaryflow_ml_per_s() <= 0 && this->pulmonarymeancapillaryflow_ml_per_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_pulmonarymeancapillaryflow_ml_per_s(), target);
  }

  // double PulmonarySystolicArterialPressure_mmHg = 28;
  if (!(this->pulmonarysystolicarterialpressure_mmhg() <= 0 && this->pulmonarysystolicarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_pulmonarysystolicarterialpressure_mmhg(), target);
  }

  // double SystolicArterialPressure_mmHg = 29;
  if (!(this->systolicarterialpressure_mmhg() <= 0 && this->systolicarterialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_systolicarterialpressure_mmhg(), target);
  }

  // double SystemicVascularResistance_mmHg_s_Per_L = 30;
  if (!(this->systemicvascularresistance_mmhg_s_per_l() <= 0 && this->systemicvascularresistance_mmhg_s_per_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_systemicvascularresistance_mmhg_s_per_l(), target);
  }

  // bool AchievedStabilization = 31;
  if (this->achievedstabilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_achievedstabilization(), target);
  }

  // double StabilizationTime_s = 32;
  if (!(this->stabilizationtime_s() <= 0 && this->stabilizationtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_stabilizationtime_s(), target);
  }

  // double TotalSimulationTime_s = 33;
  if (!(this->totalsimulationtime_s() <= 0 && this->totalsimulationtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_totalsimulationtime_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.hydrocephalus.SimulationData)
  return target;
}

size_t SimulationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.hydrocephalus.SimulationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double IntracranialSpaceVolumeBaseline_mL = 3;
  if (!(this->intracranialspacevolumebaseline_ml() <= 0 && this->intracranialspacevolumebaseline_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double IntracranialSpaceCompliance_mL_Per_mmHg = 4;
  if (!(this->intracranialspacecompliance_ml_per_mmhg() <= 0 && this->intracranialspacecompliance_ml_per_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double CerebrospinalFluidAbsorptionRate_mL_Per_min = 5;
  if (!(this->cerebrospinalfluidabsorptionrate_ml_per_min() <= 0 && this->cerebrospinalfluidabsorptionrate_ml_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double CerebrospinalFluidProductionRate_mL_Per_min = 6;
  if (!(this->cerebrospinalfluidproductionrate_ml_per_min() <= 0 && this->cerebrospinalfluidproductionrate_ml_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double BrainVolume_mL = 7;
  if (!(this->brainvolume_ml() <= 0 && this->brainvolume_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double IntracranialSpaceVolume_mL = 8;
  if (!(this->intracranialspacevolume_ml() <= 0 && this->intracranialspacevolume_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanBrainPressure_mmHg = 9;
  if (!(this->meanbrainpressure_mmhg() <= 0 && this->meanbrainpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanBrainVasculatureInFlow_mL_Per_s = 10;
  if (!(this->meanbrainvasculatureinflow_ml_per_s() <= 0 && this->meanbrainvasculatureinflow_ml_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanBrainVasculatureOutFlow_mL_Per_s = 11;
  if (!(this->meanbrainvasculatureoutflow_ml_per_s() <= 0 && this->meanbrainvasculatureoutflow_ml_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanBrainCarbonDioxidePartialPressure_mmHg = 12;
  if (!(this->meanbraincarbondioxidepartialpressure_mmhg() <= 0 && this->meanbraincarbondioxidepartialpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanBrainOxygenPartialPressure_mmHg = 13;
  if (!(this->meanbrainoxygenpartialpressure_mmhg() <= 0 && this->meanbrainoxygenpartialpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double MeanIntracranialSpacePressure_mmHg = 14;
  if (!(this->meanintracranialspacepressure_mmhg() <= 0 && this->meanintracranialspacepressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double CardiacOutput_mL_Per_min = 15;
  if (!(this->cardiacoutput_ml_per_min() <= 0 && this->cardiacoutput_ml_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double CerebralBloodFlow_mL_Per_min = 16;
  if (!(this->cerebralbloodflow_ml_per_min() <= 0 && this->cerebralbloodflow_ml_per_min() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool AchievedStabilization = 31;
  if (this->achievedstabilization() != 0) {
    total_size += 2 + 1;
  }

  // double CerebralPerfusionPressure_mmHg = 17;
  if (!(this->cerebralperfusionpressure_mmhg() <= 0 && this->cerebralperfusionpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double DiastolicArterialPressure_mmHg = 18;
  if (!(this->diastolicarterialpressure_mmhg() <= 0 && this->diastolicarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double HeartEjectionFraction = 19;
  if (!(this->heartejectionfraction() <= 0 && this->heartejectionfraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double HeartRate_bpm = 20;
  if (!(this->heartrate_bpm() <= 0 && this->heartrate_bpm() >= 0)) {
    total_size += 2 + 8;
  }

  // double HeartStrokeVolume_mL = 21;
  if (!(this->heartstrokevolume_ml() <= 0 && this->heartstrokevolume_ml() >= 0)) {
    total_size += 2 + 8;
  }

  // double IntracranialPressure_mmHg = 22;
  if (!(this->intracranialpressure_mmhg() <= 0 && this->intracranialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double MeanArterialPressure_mmHg = 23;
  if (!(this->meanarterialpressure_mmhg() <= 0 && this->meanarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double MeanCentralVenousPressure_mmHg = 24;
  if (!(this->meancentralvenouspressure_mmhg() <= 0 && this->meancentralvenouspressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double PulmonaryDiastolicArterialPressure_mmHg = 25;
  if (!(this->pulmonarydiastolicarterialpressure_mmhg() <= 0 && this->pulmonarydiastolicarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double PulmonaryMeanArterialPressure_mmHg = 26;
  if (!(this->pulmonarymeanarterialpressure_mmhg() <= 0 && this->pulmonarymeanarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double PulmonaryMeanCapillaryFlow_mL_Per_s = 27;
  if (!(this->pulmonarymeancapillaryflow_ml_per_s() <= 0 && this->pulmonarymeancapillaryflow_ml_per_s() >= 0)) {
    total_size += 2 + 8;
  }

  // double PulmonarySystolicArterialPressure_mmHg = 28;
  if (!(this->pulmonarysystolicarterialpressure_mmhg() <= 0 && this->pulmonarysystolicarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double SystolicArterialPressure_mmHg = 29;
  if (!(this->systolicarterialpressure_mmhg() <= 0 && this->systolicarterialpressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double SystemicVascularResistance_mmHg_s_Per_L = 30;
  if (!(this->systemicvascularresistance_mmhg_s_per_l() <= 0 && this->systemicvascularresistance_mmhg_s_per_l() >= 0)) {
    total_size += 2 + 8;
  }

  // double StabilizationTime_s = 32;
  if (!(this->stabilizationtime_s() <= 0 && this->stabilizationtime_s() >= 0)) {
    total_size += 2 + 8;
  }

  // double TotalSimulationTime_s = 33;
  if (!(this->totalsimulationtime_s() <= 0 && this->totalsimulationtime_s() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.hydrocephalus.SimulationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.hydrocephalus.SimulationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.hydrocephalus.SimulationData)
    MergeFrom(*source);
  }
}

void SimulationData::MergeFrom(const SimulationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.hydrocephalus.SimulationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.intracranialspacevolumebaseline_ml() <= 0 && from.intracranialspacevolumebaseline_ml() >= 0)) {
    _internal_set_intracranialspacevolumebaseline_ml(from._internal_intracranialspacevolumebaseline_ml());
  }
  if (!(from.intracranialspacecompliance_ml_per_mmhg() <= 0 && from.intracranialspacecompliance_ml_per_mmhg() >= 0)) {
    _internal_set_intracranialspacecompliance_ml_per_mmhg(from._internal_intracranialspacecompliance_ml_per_mmhg());
  }
  if (!(from.cerebrospinalfluidabsorptionrate_ml_per_min() <= 0 && from.cerebrospinalfluidabsorptionrate_ml_per_min() >= 0)) {
    _internal_set_cerebrospinalfluidabsorptionrate_ml_per_min(from._internal_cerebrospinalfluidabsorptionrate_ml_per_min());
  }
  if (!(from.cerebrospinalfluidproductionrate_ml_per_min() <= 0 && from.cerebrospinalfluidproductionrate_ml_per_min() >= 0)) {
    _internal_set_cerebrospinalfluidproductionrate_ml_per_min(from._internal_cerebrospinalfluidproductionrate_ml_per_min());
  }
  if (!(from.brainvolume_ml() <= 0 && from.brainvolume_ml() >= 0)) {
    _internal_set_brainvolume_ml(from._internal_brainvolume_ml());
  }
  if (!(from.intracranialspacevolume_ml() <= 0 && from.intracranialspacevolume_ml() >= 0)) {
    _internal_set_intracranialspacevolume_ml(from._internal_intracranialspacevolume_ml());
  }
  if (!(from.meanbrainpressure_mmhg() <= 0 && from.meanbrainpressure_mmhg() >= 0)) {
    _internal_set_meanbrainpressure_mmhg(from._internal_meanbrainpressure_mmhg());
  }
  if (!(from.meanbrainvasculatureinflow_ml_per_s() <= 0 && from.meanbrainvasculatureinflow_ml_per_s() >= 0)) {
    _internal_set_meanbrainvasculatureinflow_ml_per_s(from._internal_meanbrainvasculatureinflow_ml_per_s());
  }
  if (!(from.meanbrainvasculatureoutflow_ml_per_s() <= 0 && from.meanbrainvasculatureoutflow_ml_per_s() >= 0)) {
    _internal_set_meanbrainvasculatureoutflow_ml_per_s(from._internal_meanbrainvasculatureoutflow_ml_per_s());
  }
  if (!(from.meanbraincarbondioxidepartialpressure_mmhg() <= 0 && from.meanbraincarbondioxidepartialpressure_mmhg() >= 0)) {
    _internal_set_meanbraincarbondioxidepartialpressure_mmhg(from._internal_meanbraincarbondioxidepartialpressure_mmhg());
  }
  if (!(from.meanbrainoxygenpartialpressure_mmhg() <= 0 && from.meanbrainoxygenpartialpressure_mmhg() >= 0)) {
    _internal_set_meanbrainoxygenpartialpressure_mmhg(from._internal_meanbrainoxygenpartialpressure_mmhg());
  }
  if (!(from.meanintracranialspacepressure_mmhg() <= 0 && from.meanintracranialspacepressure_mmhg() >= 0)) {
    _internal_set_meanintracranialspacepressure_mmhg(from._internal_meanintracranialspacepressure_mmhg());
  }
  if (!(from.cardiacoutput_ml_per_min() <= 0 && from.cardiacoutput_ml_per_min() >= 0)) {
    _internal_set_cardiacoutput_ml_per_min(from._internal_cardiacoutput_ml_per_min());
  }
  if (!(from.cerebralbloodflow_ml_per_min() <= 0 && from.cerebralbloodflow_ml_per_min() >= 0)) {
    _internal_set_cerebralbloodflow_ml_per_min(from._internal_cerebralbloodflow_ml_per_min());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.achievedstabilization() != 0) {
    _internal_set_achievedstabilization(from._internal_achievedstabilization());
  }
  if (!(from.cerebralperfusionpressure_mmhg() <= 0 && from.cerebralperfusionpressure_mmhg() >= 0)) {
    _internal_set_cerebralperfusionpressure_mmhg(from._internal_cerebralperfusionpressure_mmhg());
  }
  if (!(from.diastolicarterialpressure_mmhg() <= 0 && from.diastolicarterialpressure_mmhg() >= 0)) {
    _internal_set_diastolicarterialpressure_mmhg(from._internal_diastolicarterialpressure_mmhg());
  }
  if (!(from.heartejectionfraction() <= 0 && from.heartejectionfraction() >= 0)) {
    _internal_set_heartejectionfraction(from._internal_heartejectionfraction());
  }
  if (!(from.heartrate_bpm() <= 0 && from.heartrate_bpm() >= 0)) {
    _internal_set_heartrate_bpm(from._internal_heartrate_bpm());
  }
  if (!(from.heartstrokevolume_ml() <= 0 && from.heartstrokevolume_ml() >= 0)) {
    _internal_set_heartstrokevolume_ml(from._internal_heartstrokevolume_ml());
  }
  if (!(from.intracranialpressure_mmhg() <= 0 && from.intracranialpressure_mmhg() >= 0)) {
    _internal_set_intracranialpressure_mmhg(from._internal_intracranialpressure_mmhg());
  }
  if (!(from.meanarterialpressure_mmhg() <= 0 && from.meanarterialpressure_mmhg() >= 0)) {
    _internal_set_meanarterialpressure_mmhg(from._internal_meanarterialpressure_mmhg());
  }
  if (!(from.meancentralvenouspressure_mmhg() <= 0 && from.meancentralvenouspressure_mmhg() >= 0)) {
    _internal_set_meancentralvenouspressure_mmhg(from._internal_meancentralvenouspressure_mmhg());
  }
  if (!(from.pulmonarydiastolicarterialpressure_mmhg() <= 0 && from.pulmonarydiastolicarterialpressure_mmhg() >= 0)) {
    _internal_set_pulmonarydiastolicarterialpressure_mmhg(from._internal_pulmonarydiastolicarterialpressure_mmhg());
  }
  if (!(from.pulmonarymeanarterialpressure_mmhg() <= 0 && from.pulmonarymeanarterialpressure_mmhg() >= 0)) {
    _internal_set_pulmonarymeanarterialpressure_mmhg(from._internal_pulmonarymeanarterialpressure_mmhg());
  }
  if (!(from.pulmonarymeancapillaryflow_ml_per_s() <= 0 && from.pulmonarymeancapillaryflow_ml_per_s() >= 0)) {
    _internal_set_pulmonarymeancapillaryflow_ml_per_s(from._internal_pulmonarymeancapillaryflow_ml_per_s());
  }
  if (!(from.pulmonarysystolicarterialpressure_mmhg() <= 0 && from.pulmonarysystolicarterialpressure_mmhg() >= 0)) {
    _internal_set_pulmonarysystolicarterialpressure_mmhg(from._internal_pulmonarysystolicarterialpressure_mmhg());
  }
  if (!(from.systolicarterialpressure_mmhg() <= 0 && from.systolicarterialpressure_mmhg() >= 0)) {
    _internal_set_systolicarterialpressure_mmhg(from._internal_systolicarterialpressure_mmhg());
  }
  if (!(from.systemicvascularresistance_mmhg_s_per_l() <= 0 && from.systemicvascularresistance_mmhg_s_per_l() >= 0)) {
    _internal_set_systemicvascularresistance_mmhg_s_per_l(from._internal_systemicvascularresistance_mmhg_s_per_l());
  }
  if (!(from.stabilizationtime_s() <= 0 && from.stabilizationtime_s() >= 0)) {
    _internal_set_stabilizationtime_s(from._internal_stabilizationtime_s());
  }
  if (!(from.totalsimulationtime_s() <= 0 && from.totalsimulationtime_s() >= 0)) {
    _internal_set_totalsimulationtime_s(from._internal_totalsimulationtime_s());
  }
}

void SimulationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.hydrocephalus.SimulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationData::CopyFrom(const SimulationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.hydrocephalus.SimulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationData::IsInitialized() const {
  return true;
}

void SimulationData::InternalSwap(SimulationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationData, totalsimulationtime_s_)
      + sizeof(SimulationData::totalsimulationtime_s_)
      - PROTOBUF_FIELD_OFFSET(SimulationData, intracranialspacevolumebaseline_ml_)>(
          reinterpret_cast<char*>(&intracranialspacevolumebaseline_ml_),
          reinterpret_cast<char*>(&other->intracranialspacevolumebaseline_ml_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationListData::_Internal {
 public:
};

SimulationListData::SimulationListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  simulation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.hydrocephalus.SimulationListData)
}
SimulationListData::SimulationListData(const SimulationListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      simulation_(from.simulation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputrootdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputrootdir().empty()) {
    outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputrootdir(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.hydrocephalus.SimulationListData)
}

void SimulationListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base);
  outputrootdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SimulationListData::~SimulationListData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.hydrocephalus.SimulationListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  outputrootdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulationListData::ArenaDtor(void* object) {
  SimulationListData* _this = reinterpret_cast< SimulationListData* >(object);
  (void)_this;
}
void SimulationListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationListData& SimulationListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationListData_pulse_2fstudy_2fbind_2fHydrocephalus_2eproto.base);
  return *internal_default_instance();
}


void SimulationListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.hydrocephalus.SimulationListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  simulation_.Clear();
  outputrootdir_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string OutputRootDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_outputrootdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.study.bind.hydrocephalus.SimulationData Simulation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simulation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.hydrocephalus.SimulationListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string OutputRootDir = 1;
  if (this->outputrootdir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputrootdir().data(), static_cast<int>(this->_internal_outputrootdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.hydrocephalus.SimulationListData.OutputRootDir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_outputrootdir(), target);
  }

  // repeated .pulse.study.bind.hydrocephalus.SimulationData Simulation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simulation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_simulation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.hydrocephalus.SimulationListData)
  return target;
}

size_t SimulationListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.hydrocephalus.SimulationListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.study.bind.hydrocephalus.SimulationData Simulation = 2;
  total_size += 1UL * this->_internal_simulation_size();
  for (const auto& msg : this->simulation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string OutputRootDir = 1;
  if (this->outputrootdir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputrootdir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.hydrocephalus.SimulationListData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.hydrocephalus.SimulationListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.hydrocephalus.SimulationListData)
    MergeFrom(*source);
  }
}

void SimulationListData::MergeFrom(const SimulationListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.hydrocephalus.SimulationListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  simulation_.MergeFrom(from.simulation_);
  if (from.outputrootdir().size() > 0) {
    _internal_set_outputrootdir(from._internal_outputrootdir());
  }
}

void SimulationListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.hydrocephalus.SimulationListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationListData::CopyFrom(const SimulationListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.hydrocephalus.SimulationListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationListData::IsInitialized() const {
  return true;
}

void SimulationListData::InternalSwap(SimulationListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  simulation_.InternalSwap(&other->simulation_);
  outputrootdir_.Swap(&other->outputrootdir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationListData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hydrocephalus
}  // namespace bind
}  // namespace study
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::study::bind::hydrocephalus::SimulationData* Arena::CreateMaybeMessage< ::pulse::study::bind::hydrocephalus::SimulationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::hydrocephalus::SimulationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::hydrocephalus::SimulationListData* Arena::CreateMaybeMessage< ::pulse::study::bind::hydrocephalus::SimulationListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::hydrocephalus::SimulationListData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
