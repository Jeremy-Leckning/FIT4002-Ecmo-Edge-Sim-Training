// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/study/bind/MultiplexVentilation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
namespace pulse {
namespace study {
namespace bind {
namespace multiplex_ventilation {
class LogData;
class LogDataDefaultTypeInternal;
extern LogDataDefaultTypeInternal _LogData_default_instance_;
class PatientComparisonData;
class PatientComparisonDataDefaultTypeInternal;
extern PatientComparisonDataDefaultTypeInternal _PatientComparisonData_default_instance_;
class PatientStateData;
class PatientStateDataDefaultTypeInternal;
extern PatientStateDataDefaultTypeInternal _PatientStateData_default_instance_;
class PatientStateListData;
class PatientStateListDataDefaultTypeInternal;
extern PatientStateListDataDefaultTypeInternal _PatientStateListData_default_instance_;
class SimulationData;
class SimulationDataDefaultTypeInternal;
extern SimulationDataDefaultTypeInternal _SimulationData_default_instance_;
class SimulationListData;
class SimulationListDataDefaultTypeInternal;
extern SimulationListDataDefaultTypeInternal _SimulationListData_default_instance_;
}  // namespace multiplex_ventilation
}  // namespace bind
}  // namespace study
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::study::bind::multiplex_ventilation::LogData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::LogData>(Arena*);
template<> ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::PatientComparisonData>(Arena*);
template<> ::pulse::study::bind::multiplex_ventilation::PatientStateData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::PatientStateData>(Arena*);
template<> ::pulse::study::bind::multiplex_ventilation::PatientStateListData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::PatientStateListData>(Arena*);
template<> ::pulse::study::bind::multiplex_ventilation::SimulationData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::SimulationData>(Arena*);
template<> ::pulse::study::bind::multiplex_ventilation::SimulationListData* Arena::CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::SimulationListData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace study {
namespace bind {
namespace multiplex_ventilation {

// ===================================================================

class PatientStateData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.PatientStateData) */ {
 public:
  inline PatientStateData() : PatientStateData(nullptr) {}
  virtual ~PatientStateData();

  PatientStateData(const PatientStateData& from);
  PatientStateData(PatientStateData&& from) noexcept
    : PatientStateData() {
    *this = ::std::move(from);
  }

  inline PatientStateData& operator=(const PatientStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientStateData& operator=(PatientStateData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientStateData& default_instance();

  static inline const PatientStateData* internal_default_instance() {
    return reinterpret_cast<const PatientStateData*>(
               &_PatientStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PatientStateData& a, PatientStateData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientStateData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientStateData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientStateData* New() const final {
    return CreateMaybeMessage<PatientStateData>(nullptr);
  }

  PatientStateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientStateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientStateData& from);
  void MergeFrom(const PatientStateData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientStateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.PatientStateData";
  }
  protected:
  explicit PatientStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFileFieldNumber = 2,
    kComplianceMLPerCmH2OFieldNumber = 3,
    kResistanceCmH2OSPerLFieldNumber = 4,
    kImpairmentFractionFieldNumber = 5,
    kRespirationRatePerMinFieldNumber = 6,
    kIERatioFieldNumber = 7,
    kPEEPCmH2OFieldNumber = 8,
    kPIPCmH2OFieldNumber = 9,
    kFiO2FieldNumber = 10,
    kAirwayFlowLPerMinFieldNumber = 11,
    kAirwayPressureCmH2OFieldNumber = 12,
    kAlveolarArterialGradientMmHgFieldNumber = 13,
    kArterialCarbonDioxidePartialPressureMmHgFieldNumber = 14,
    kIDFieldNumber = 1,
    kAchievedStabilizationFieldNumber = 27,
    kArterialOxygenPartialPressureMmHgFieldNumber = 15,
    kCarricoIndexMmHgFieldNumber = 16,
    kEndTidalCarbonDioxidePressureMmHgFieldNumber = 17,
    kIdealBodyWeightKgFieldNumber = 18,
    kMeanAirwayPressureCmH2OFieldNumber = 19,
    kOxygenationIndexFieldNumber = 20,
    kOxygenSaturationFieldNumber = 21,
    kOxygenSaturationIndexMmHgFieldNumber = 22,
    kSFRatioFieldNumber = 23,
    kShuntFractionFieldNumber = 24,
    kTidalVolumeMLFieldNumber = 25,
    kTotalLungVolumeMLFieldNumber = 26,
    kOxygenSaturationStabilizationTrendFieldNumber = 28,
  };
  // string StateFile = 2;
  void clear_statefile();
  const std::string& statefile() const;
  void set_statefile(const std::string& value);
  void set_statefile(std::string&& value);
  void set_statefile(const char* value);
  void set_statefile(const char* value, size_t size);
  std::string* mutable_statefile();
  std::string* release_statefile();
  void set_allocated_statefile(std::string* statefile);
  private:
  const std::string& _internal_statefile() const;
  void _internal_set_statefile(const std::string& value);
  std::string* _internal_mutable_statefile();
  public:

  // double Compliance_mL_Per_cmH2O = 3;
  void clear_compliance_ml_per_cmh2o();
  double compliance_ml_per_cmh2o() const;
  void set_compliance_ml_per_cmh2o(double value);
  private:
  double _internal_compliance_ml_per_cmh2o() const;
  void _internal_set_compliance_ml_per_cmh2o(double value);
  public:

  // double Resistance_cmH2O_s_Per_L = 4;
  void clear_resistance_cmh2o_s_per_l();
  double resistance_cmh2o_s_per_l() const;
  void set_resistance_cmh2o_s_per_l(double value);
  private:
  double _internal_resistance_cmh2o_s_per_l() const;
  void _internal_set_resistance_cmh2o_s_per_l(double value);
  public:

  // double ImpairmentFraction = 5;
  void clear_impairmentfraction();
  double impairmentfraction() const;
  void set_impairmentfraction(double value);
  private:
  double _internal_impairmentfraction() const;
  void _internal_set_impairmentfraction(double value);
  public:

  // double RespirationRate_Per_min = 6;
  void clear_respirationrate_per_min();
  double respirationrate_per_min() const;
  void set_respirationrate_per_min(double value);
  private:
  double _internal_respirationrate_per_min() const;
  void _internal_set_respirationrate_per_min(double value);
  public:

  // double IERatio = 7;
  void clear_ieratio();
  double ieratio() const;
  void set_ieratio(double value);
  private:
  double _internal_ieratio() const;
  void _internal_set_ieratio(double value);
  public:

  // double PEEP_cmH2O = 8;
  void clear_peep_cmh2o();
  double peep_cmh2o() const;
  void set_peep_cmh2o(double value);
  private:
  double _internal_peep_cmh2o() const;
  void _internal_set_peep_cmh2o(double value);
  public:

  // double PIP_cmH2O = 9;
  void clear_pip_cmh2o();
  double pip_cmh2o() const;
  void set_pip_cmh2o(double value);
  private:
  double _internal_pip_cmh2o() const;
  void _internal_set_pip_cmh2o(double value);
  public:

  // double FiO2 = 10;
  void clear_fio2();
  double fio2() const;
  void set_fio2(double value);
  private:
  double _internal_fio2() const;
  void _internal_set_fio2(double value);
  public:

  // double AirwayFlow_L_Per_min = 11;
  void clear_airwayflow_l_per_min();
  double airwayflow_l_per_min() const;
  void set_airwayflow_l_per_min(double value);
  private:
  double _internal_airwayflow_l_per_min() const;
  void _internal_set_airwayflow_l_per_min(double value);
  public:

  // double AirwayPressure_cmH2O = 12;
  void clear_airwaypressure_cmh2o();
  double airwaypressure_cmh2o() const;
  void set_airwaypressure_cmh2o(double value);
  private:
  double _internal_airwaypressure_cmh2o() const;
  void _internal_set_airwaypressure_cmh2o(double value);
  public:

  // double AlveolarArterialGradient_mmHg = 13;
  void clear_alveolararterialgradient_mmhg();
  double alveolararterialgradient_mmhg() const;
  void set_alveolararterialgradient_mmhg(double value);
  private:
  double _internal_alveolararterialgradient_mmhg() const;
  void _internal_set_alveolararterialgradient_mmhg(double value);
  public:

  // double ArterialCarbonDioxidePartialPressure_mmHg = 14;
  void clear_arterialcarbondioxidepartialpressure_mmhg();
  double arterialcarbondioxidepartialpressure_mmhg() const;
  void set_arterialcarbondioxidepartialpressure_mmhg(double value);
  private:
  double _internal_arterialcarbondioxidepartialpressure_mmhg() const;
  void _internal_set_arterialcarbondioxidepartialpressure_mmhg(double value);
  public:

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool AchievedStabilization = 27;
  void clear_achievedstabilization();
  bool achievedstabilization() const;
  void set_achievedstabilization(bool value);
  private:
  bool _internal_achievedstabilization() const;
  void _internal_set_achievedstabilization(bool value);
  public:

  // double ArterialOxygenPartialPressure_mmHg = 15;
  void clear_arterialoxygenpartialpressure_mmhg();
  double arterialoxygenpartialpressure_mmhg() const;
  void set_arterialoxygenpartialpressure_mmhg(double value);
  private:
  double _internal_arterialoxygenpartialpressure_mmhg() const;
  void _internal_set_arterialoxygenpartialpressure_mmhg(double value);
  public:

  // double CarricoIndex_mmHg = 16;
  void clear_carricoindex_mmhg();
  double carricoindex_mmhg() const;
  void set_carricoindex_mmhg(double value);
  private:
  double _internal_carricoindex_mmhg() const;
  void _internal_set_carricoindex_mmhg(double value);
  public:

  // double EndTidalCarbonDioxidePressure_mmHg = 17;
  void clear_endtidalcarbondioxidepressure_mmhg();
  double endtidalcarbondioxidepressure_mmhg() const;
  void set_endtidalcarbondioxidepressure_mmhg(double value);
  private:
  double _internal_endtidalcarbondioxidepressure_mmhg() const;
  void _internal_set_endtidalcarbondioxidepressure_mmhg(double value);
  public:

  // double IdealBodyWeight_kg = 18;
  void clear_idealbodyweight_kg();
  double idealbodyweight_kg() const;
  void set_idealbodyweight_kg(double value);
  private:
  double _internal_idealbodyweight_kg() const;
  void _internal_set_idealbodyweight_kg(double value);
  public:

  // double MeanAirwayPressure_cmH2O = 19;
  void clear_meanairwaypressure_cmh2o();
  double meanairwaypressure_cmh2o() const;
  void set_meanairwaypressure_cmh2o(double value);
  private:
  double _internal_meanairwaypressure_cmh2o() const;
  void _internal_set_meanairwaypressure_cmh2o(double value);
  public:

  // double OxygenationIndex = 20;
  void clear_oxygenationindex();
  double oxygenationindex() const;
  void set_oxygenationindex(double value);
  private:
  double _internal_oxygenationindex() const;
  void _internal_set_oxygenationindex(double value);
  public:

  // double OxygenSaturation = 21;
  void clear_oxygensaturation();
  double oxygensaturation() const;
  void set_oxygensaturation(double value);
  private:
  double _internal_oxygensaturation() const;
  void _internal_set_oxygensaturation(double value);
  public:

  // double OxygenSaturationIndex_mmHg = 22;
  void clear_oxygensaturationindex_mmhg();
  double oxygensaturationindex_mmhg() const;
  void set_oxygensaturationindex_mmhg(double value);
  private:
  double _internal_oxygensaturationindex_mmhg() const;
  void _internal_set_oxygensaturationindex_mmhg(double value);
  public:

  // double SFRatio = 23;
  void clear_sfratio();
  double sfratio() const;
  void set_sfratio(double value);
  private:
  double _internal_sfratio() const;
  void _internal_set_sfratio(double value);
  public:

  // double ShuntFraction = 24;
  void clear_shuntfraction();
  double shuntfraction() const;
  void set_shuntfraction(double value);
  private:
  double _internal_shuntfraction() const;
  void _internal_set_shuntfraction(double value);
  public:

  // double TidalVolume_mL = 25;
  void clear_tidalvolume_ml();
  double tidalvolume_ml() const;
  void set_tidalvolume_ml(double value);
  private:
  double _internal_tidalvolume_ml() const;
  void _internal_set_tidalvolume_ml(double value);
  public:

  // double TotalLungVolume_mL = 26;
  void clear_totallungvolume_ml();
  double totallungvolume_ml() const;
  void set_totallungvolume_ml(double value);
  private:
  double _internal_totallungvolume_ml() const;
  void _internal_set_totallungvolume_ml(double value);
  public:

  // double OxygenSaturationStabilizationTrend = 28;
  void clear_oxygensaturationstabilizationtrend();
  double oxygensaturationstabilizationtrend() const;
  void set_oxygensaturationstabilizationtrend(double value);
  private:
  double _internal_oxygensaturationstabilizationtrend() const;
  void _internal_set_oxygensaturationstabilizationtrend(double value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.PatientStateData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statefile_;
  double compliance_ml_per_cmh2o_;
  double resistance_cmh2o_s_per_l_;
  double impairmentfraction_;
  double respirationrate_per_min_;
  double ieratio_;
  double peep_cmh2o_;
  double pip_cmh2o_;
  double fio2_;
  double airwayflow_l_per_min_;
  double airwaypressure_cmh2o_;
  double alveolararterialgradient_mmhg_;
  double arterialcarbondioxidepartialpressure_mmhg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool achievedstabilization_;
  double arterialoxygenpartialpressure_mmhg_;
  double carricoindex_mmhg_;
  double endtidalcarbondioxidepressure_mmhg_;
  double idealbodyweight_kg_;
  double meanairwaypressure_cmh2o_;
  double oxygenationindex_;
  double oxygensaturation_;
  double oxygensaturationindex_mmhg_;
  double sfratio_;
  double shuntfraction_;
  double tidalvolume_ml_;
  double totallungvolume_ml_;
  double oxygensaturationstabilizationtrend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// -------------------------------------------------------------------

class PatientStateListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.PatientStateListData) */ {
 public:
  inline PatientStateListData() : PatientStateListData(nullptr) {}
  virtual ~PatientStateListData();

  PatientStateListData(const PatientStateListData& from);
  PatientStateListData(PatientStateListData&& from) noexcept
    : PatientStateListData() {
    *this = ::std::move(from);
  }

  inline PatientStateListData& operator=(const PatientStateListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientStateListData& operator=(PatientStateListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientStateListData& default_instance();

  static inline const PatientStateListData* internal_default_instance() {
    return reinterpret_cast<const PatientStateListData*>(
               &_PatientStateListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PatientStateListData& a, PatientStateListData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientStateListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientStateListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientStateListData* New() const final {
    return CreateMaybeMessage<PatientStateListData>(nullptr);
  }

  PatientStateListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientStateListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientStateListData& from);
  void MergeFrom(const PatientStateListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientStateListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.PatientStateListData";
  }
  protected:
  explicit PatientStateListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientsFieldNumber = 1,
  };
  // repeated .pulse.study.bind.multiplex_ventilation.PatientStateData Patients = 1;
  int patients_size() const;
  private:
  int _internal_patients_size() const;
  public:
  void clear_patients();
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* mutable_patients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientStateData >*
      mutable_patients();
  private:
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& _internal_patients(int index) const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* _internal_add_patients();
  public:
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& patients(int index) const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* add_patients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientStateData >&
      patients() const;

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.PatientStateListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientStateData > patients_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// -------------------------------------------------------------------

class PatientComparisonData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.PatientComparisonData) */ {
 public:
  inline PatientComparisonData() : PatientComparisonData(nullptr) {}
  virtual ~PatientComparisonData();

  PatientComparisonData(const PatientComparisonData& from);
  PatientComparisonData(PatientComparisonData&& from) noexcept
    : PatientComparisonData() {
    *this = ::std::move(from);
  }

  inline PatientComparisonData& operator=(const PatientComparisonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientComparisonData& operator=(PatientComparisonData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientComparisonData& default_instance();

  static inline const PatientComparisonData* internal_default_instance() {
    return reinterpret_cast<const PatientComparisonData*>(
               &_PatientComparisonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PatientComparisonData& a, PatientComparisonData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientComparisonData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientComparisonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientComparisonData* New() const final {
    return CreateMaybeMessage<PatientComparisonData>(nullptr);
  }

  PatientComparisonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientComparisonData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientComparisonData& from);
  void MergeFrom(const PatientComparisonData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientComparisonData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.PatientComparisonData";
  }
  protected:
  explicit PatientComparisonData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoloVentilationFieldNumber = 1,
    kMultiplexVentilationFieldNumber = 2,
  };
  // .pulse.study.bind.multiplex_ventilation.PatientStateData SoloVentilation = 1;
  bool has_soloventilation() const;
  private:
  bool _internal_has_soloventilation() const;
  public:
  void clear_soloventilation();
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& soloventilation() const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* release_soloventilation();
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* mutable_soloventilation();
  void set_allocated_soloventilation(::pulse::study::bind::multiplex_ventilation::PatientStateData* soloventilation);
  private:
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& _internal_soloventilation() const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* _internal_mutable_soloventilation();
  public:
  void unsafe_arena_set_allocated_soloventilation(
      ::pulse::study::bind::multiplex_ventilation::PatientStateData* soloventilation);
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* unsafe_arena_release_soloventilation();

  // .pulse.study.bind.multiplex_ventilation.PatientStateData MultiplexVentilation = 2;
  bool has_multiplexventilation() const;
  private:
  bool _internal_has_multiplexventilation() const;
  public:
  void clear_multiplexventilation();
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& multiplexventilation() const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* release_multiplexventilation();
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* mutable_multiplexventilation();
  void set_allocated_multiplexventilation(::pulse::study::bind::multiplex_ventilation::PatientStateData* multiplexventilation);
  private:
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData& _internal_multiplexventilation() const;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* _internal_mutable_multiplexventilation();
  public:
  void unsafe_arena_set_allocated_multiplexventilation(
      ::pulse::study::bind::multiplex_ventilation::PatientStateData* multiplexventilation);
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* unsafe_arena_release_multiplexventilation();

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* soloventilation_;
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* multiplexventilation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// -------------------------------------------------------------------

class LogData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.LogData) */ {
 public:
  inline LogData() : LogData(nullptr) {}
  virtual ~LogData();

  LogData(const LogData& from);
  LogData(LogData&& from) noexcept
    : LogData() {
    *this = ::std::move(from);
  }

  inline LogData& operator=(const LogData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogData& operator=(LogData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogData& default_instance();

  static inline const LogData* internal_default_instance() {
    return reinterpret_cast<const LogData*>(
               &_LogData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogData& a, LogData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogData* New() const final {
    return CreateMaybeMessage<LogData>(nullptr);
  }

  LogData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogData& from);
  void MergeFrom(const LogData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.LogData";
  }
  protected:
  explicit LogData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kWarningFieldNumber = 2,
    kErrorFieldNumber = 3,
    kFatalFieldNumber = 4,
  };
  // repeated string Info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  const std::string& info(int index) const;
  std::string* mutable_info(int index);
  void set_info(int index, const std::string& value);
  void set_info(int index, std::string&& value);
  void set_info(int index, const char* value);
  void set_info(int index, const char* value, size_t size);
  std::string* add_info();
  void add_info(const std::string& value);
  void add_info(std::string&& value);
  void add_info(const char* value);
  void add_info(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_info();
  private:
  const std::string& _internal_info(int index) const;
  std::string* _internal_add_info();
  public:

  // repeated string Warning = 2;
  int warning_size() const;
  private:
  int _internal_warning_size() const;
  public:
  void clear_warning();
  const std::string& warning(int index) const;
  std::string* mutable_warning(int index);
  void set_warning(int index, const std::string& value);
  void set_warning(int index, std::string&& value);
  void set_warning(int index, const char* value);
  void set_warning(int index, const char* value, size_t size);
  std::string* add_warning();
  void add_warning(const std::string& value);
  void add_warning(std::string&& value);
  void add_warning(const char* value);
  void add_warning(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& warning() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_warning();
  private:
  const std::string& _internal_warning(int index) const;
  std::string* _internal_add_warning();
  public:

  // repeated string Error = 3;
  int error_size() const;
  private:
  int _internal_error_size() const;
  public:
  void clear_error();
  const std::string& error(int index) const;
  std::string* mutable_error(int index);
  void set_error(int index, const std::string& value);
  void set_error(int index, std::string&& value);
  void set_error(int index, const char* value);
  void set_error(int index, const char* value, size_t size);
  std::string* add_error();
  void add_error(const std::string& value);
  void add_error(std::string&& value);
  void add_error(const char* value);
  void add_error(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error();
  private:
  const std::string& _internal_error(int index) const;
  std::string* _internal_add_error();
  public:

  // repeated string Fatal = 4;
  int fatal_size() const;
  private:
  int _internal_fatal_size() const;
  public:
  void clear_fatal();
  const std::string& fatal(int index) const;
  std::string* mutable_fatal(int index);
  void set_fatal(int index, const std::string& value);
  void set_fatal(int index, std::string&& value);
  void set_fatal(int index, const char* value);
  void set_fatal(int index, const char* value, size_t size);
  std::string* add_fatal();
  void add_fatal(const std::string& value);
  void add_fatal(std::string&& value);
  void add_fatal(const char* value);
  void add_fatal(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fatal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fatal();
  private:
  const std::string& _internal_fatal(int index) const;
  std::string* _internal_add_fatal();
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.LogData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> warning_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fatal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// -------------------------------------------------------------------

class SimulationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.SimulationData) */ {
 public:
  inline SimulationData() : SimulationData(nullptr) {}
  virtual ~SimulationData();

  SimulationData(const SimulationData& from);
  SimulationData(SimulationData&& from) noexcept
    : SimulationData() {
    *this = ::std::move(from);
  }

  inline SimulationData& operator=(const SimulationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationData& operator=(SimulationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationData& default_instance();

  static inline const SimulationData* internal_default_instance() {
    return reinterpret_cast<const SimulationData*>(
               &_SimulationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimulationData& a, SimulationData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationData* New() const final {
    return CreateMaybeMessage<SimulationData>(nullptr);
  }

  SimulationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationData& from);
  void MergeFrom(const SimulationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.SimulationData";
  }
  protected:
  explicit SimulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientComparisonsFieldNumber = 12,
    kOutputBaseFilenameFieldNumber = 3,
    kLogFieldNumber = 11,
    kIDFieldNumber = 1,
    kGroupIDFieldNumber = 2,
    kStabilizationTimeSFieldNumber = 5,
    kRespirationRatePerMinFieldNumber = 6,
    kIERatioFieldNumber = 7,
    kPIPCmH2OFieldNumber = 8,
    kPEEPCmH2OFieldNumber = 9,
    kFiO2FieldNumber = 10,
    kAchievedStabilizationFieldNumber = 4,
  };
  // repeated .pulse.study.bind.multiplex_ventilation.PatientComparisonData PatientComparisons = 12;
  int patientcomparisons_size() const;
  private:
  int _internal_patientcomparisons_size() const;
  public:
  void clear_patientcomparisons();
  ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* mutable_patientcomparisons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >*
      mutable_patientcomparisons();
  private:
  const ::pulse::study::bind::multiplex_ventilation::PatientComparisonData& _internal_patientcomparisons(int index) const;
  ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* _internal_add_patientcomparisons();
  public:
  const ::pulse::study::bind::multiplex_ventilation::PatientComparisonData& patientcomparisons(int index) const;
  ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* add_patientcomparisons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >&
      patientcomparisons() const;

  // string OutputBaseFilename = 3;
  void clear_outputbasefilename();
  const std::string& outputbasefilename() const;
  void set_outputbasefilename(const std::string& value);
  void set_outputbasefilename(std::string&& value);
  void set_outputbasefilename(const char* value);
  void set_outputbasefilename(const char* value, size_t size);
  std::string* mutable_outputbasefilename();
  std::string* release_outputbasefilename();
  void set_allocated_outputbasefilename(std::string* outputbasefilename);
  private:
  const std::string& _internal_outputbasefilename() const;
  void _internal_set_outputbasefilename(const std::string& value);
  std::string* _internal_mutable_outputbasefilename();
  public:

  // .pulse.study.bind.multiplex_ventilation.LogData Log = 11;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::pulse::study::bind::multiplex_ventilation::LogData& log() const;
  ::pulse::study::bind::multiplex_ventilation::LogData* release_log();
  ::pulse::study::bind::multiplex_ventilation::LogData* mutable_log();
  void set_allocated_log(::pulse::study::bind::multiplex_ventilation::LogData* log);
  private:
  const ::pulse::study::bind::multiplex_ventilation::LogData& _internal_log() const;
  ::pulse::study::bind::multiplex_ventilation::LogData* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::pulse::study::bind::multiplex_ventilation::LogData* log);
  ::pulse::study::bind::multiplex_ventilation::LogData* unsafe_arena_release_log();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 GroupID = 2;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double StabilizationTime_s = 5;
  void clear_stabilizationtime_s();
  double stabilizationtime_s() const;
  void set_stabilizationtime_s(double value);
  private:
  double _internal_stabilizationtime_s() const;
  void _internal_set_stabilizationtime_s(double value);
  public:

  // double RespirationRate_Per_min = 6;
  void clear_respirationrate_per_min();
  double respirationrate_per_min() const;
  void set_respirationrate_per_min(double value);
  private:
  double _internal_respirationrate_per_min() const;
  void _internal_set_respirationrate_per_min(double value);
  public:

  // double IERatio = 7;
  void clear_ieratio();
  double ieratio() const;
  void set_ieratio(double value);
  private:
  double _internal_ieratio() const;
  void _internal_set_ieratio(double value);
  public:

  // double PIP_cmH2O = 8;
  void clear_pip_cmh2o();
  double pip_cmh2o() const;
  void set_pip_cmh2o(double value);
  private:
  double _internal_pip_cmh2o() const;
  void _internal_set_pip_cmh2o(double value);
  public:

  // double PEEP_cmH2O = 9;
  void clear_peep_cmh2o();
  double peep_cmh2o() const;
  void set_peep_cmh2o(double value);
  private:
  double _internal_peep_cmh2o() const;
  void _internal_set_peep_cmh2o(double value);
  public:

  // double FiO2 = 10;
  void clear_fio2();
  double fio2() const;
  void set_fio2(double value);
  private:
  double _internal_fio2() const;
  void _internal_set_fio2(double value);
  public:

  // bool AchievedStabilization = 4;
  void clear_achievedstabilization();
  bool achievedstabilization() const;
  void set_achievedstabilization(bool value);
  private:
  bool _internal_achievedstabilization() const;
  void _internal_set_achievedstabilization(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.SimulationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData > patientcomparisons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputbasefilename_;
  ::pulse::study::bind::multiplex_ventilation::LogData* log_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  double stabilizationtime_s_;
  double respirationrate_per_min_;
  double ieratio_;
  double pip_cmh2o_;
  double peep_cmh2o_;
  double fio2_;
  bool achievedstabilization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// -------------------------------------------------------------------

class SimulationListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.study.bind.multiplex_ventilation.SimulationListData) */ {
 public:
  inline SimulationListData() : SimulationListData(nullptr) {}
  virtual ~SimulationListData();

  SimulationListData(const SimulationListData& from);
  SimulationListData(SimulationListData&& from) noexcept
    : SimulationListData() {
    *this = ::std::move(from);
  }

  inline SimulationListData& operator=(const SimulationListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationListData& operator=(SimulationListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationListData& default_instance();

  static inline const SimulationListData* internal_default_instance() {
    return reinterpret_cast<const SimulationListData*>(
               &_SimulationListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimulationListData& a, SimulationListData& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationListData* New() const final {
    return CreateMaybeMessage<SimulationListData>(nullptr);
  }

  SimulationListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationListData& from);
  void MergeFrom(const SimulationListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.study.bind.multiplex_ventilation.SimulationListData";
  }
  protected:
  explicit SimulationListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto);
    return ::descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulationsFieldNumber = 2,
    kOutputRootDirFieldNumber = 1,
  };
  // repeated .pulse.study.bind.multiplex_ventilation.SimulationData Simulations = 2;
  int simulations_size() const;
  private:
  int _internal_simulations_size() const;
  public:
  void clear_simulations();
  ::pulse::study::bind::multiplex_ventilation::SimulationData* mutable_simulations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::SimulationData >*
      mutable_simulations();
  private:
  const ::pulse::study::bind::multiplex_ventilation::SimulationData& _internal_simulations(int index) const;
  ::pulse::study::bind::multiplex_ventilation::SimulationData* _internal_add_simulations();
  public:
  const ::pulse::study::bind::multiplex_ventilation::SimulationData& simulations(int index) const;
  ::pulse::study::bind::multiplex_ventilation::SimulationData* add_simulations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::SimulationData >&
      simulations() const;

  // string OutputRootDir = 1;
  void clear_outputrootdir();
  const std::string& outputrootdir() const;
  void set_outputrootdir(const std::string& value);
  void set_outputrootdir(std::string&& value);
  void set_outputrootdir(const char* value);
  void set_outputrootdir(const char* value, size_t size);
  std::string* mutable_outputrootdir();
  std::string* release_outputrootdir();
  void set_allocated_outputrootdir(std::string* outputrootdir);
  private:
  const std::string& _internal_outputrootdir() const;
  void _internal_set_outputrootdir(const std::string& value);
  std::string* _internal_mutable_outputrootdir();
  public:

  // @@protoc_insertion_point(class_scope:pulse.study.bind.multiplex_ventilation.SimulationListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::SimulationData > simulations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputrootdir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatientStateData

// uint32 ID = 1;
inline void PatientStateData::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PatientStateData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PatientStateData::id() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.ID)
  return _internal_id();
}
inline void PatientStateData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void PatientStateData::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.ID)
}

// string StateFile = 2;
inline void PatientStateData::clear_statefile() {
  statefile_.ClearToEmpty();
}
inline const std::string& PatientStateData::statefile() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
  return _internal_statefile();
}
inline void PatientStateData::set_statefile(const std::string& value) {
  _internal_set_statefile(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
}
inline std::string* PatientStateData::mutable_statefile() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
  return _internal_mutable_statefile();
}
inline const std::string& PatientStateData::_internal_statefile() const {
  return statefile_.Get();
}
inline void PatientStateData::_internal_set_statefile(const std::string& value) {
  
  statefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PatientStateData::set_statefile(std::string&& value) {
  
  statefile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
}
inline void PatientStateData::set_statefile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
}
inline void PatientStateData::set_statefile(const char* value,
    size_t size) {
  
  statefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
}
inline std::string* PatientStateData::_internal_mutable_statefile() {
  
  return statefile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PatientStateData::release_statefile() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
  return statefile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PatientStateData::set_allocated_statefile(std::string* statefile) {
  if (statefile != nullptr) {
    
  } else {
    
  }
  statefile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statefile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile)
}

// double Compliance_mL_Per_cmH2O = 3;
inline void PatientStateData::clear_compliance_ml_per_cmh2o() {
  compliance_ml_per_cmh2o_ = 0;
}
inline double PatientStateData::_internal_compliance_ml_per_cmh2o() const {
  return compliance_ml_per_cmh2o_;
}
inline double PatientStateData::compliance_ml_per_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.Compliance_mL_Per_cmH2O)
  return _internal_compliance_ml_per_cmh2o();
}
inline void PatientStateData::_internal_set_compliance_ml_per_cmh2o(double value) {
  
  compliance_ml_per_cmh2o_ = value;
}
inline void PatientStateData::set_compliance_ml_per_cmh2o(double value) {
  _internal_set_compliance_ml_per_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.Compliance_mL_Per_cmH2O)
}

// double Resistance_cmH2O_s_Per_L = 4;
inline void PatientStateData::clear_resistance_cmh2o_s_per_l() {
  resistance_cmh2o_s_per_l_ = 0;
}
inline double PatientStateData::_internal_resistance_cmh2o_s_per_l() const {
  return resistance_cmh2o_s_per_l_;
}
inline double PatientStateData::resistance_cmh2o_s_per_l() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.Resistance_cmH2O_s_Per_L)
  return _internal_resistance_cmh2o_s_per_l();
}
inline void PatientStateData::_internal_set_resistance_cmh2o_s_per_l(double value) {
  
  resistance_cmh2o_s_per_l_ = value;
}
inline void PatientStateData::set_resistance_cmh2o_s_per_l(double value) {
  _internal_set_resistance_cmh2o_s_per_l(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.Resistance_cmH2O_s_Per_L)
}

// double ImpairmentFraction = 5;
inline void PatientStateData::clear_impairmentfraction() {
  impairmentfraction_ = 0;
}
inline double PatientStateData::_internal_impairmentfraction() const {
  return impairmentfraction_;
}
inline double PatientStateData::impairmentfraction() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.ImpairmentFraction)
  return _internal_impairmentfraction();
}
inline void PatientStateData::_internal_set_impairmentfraction(double value) {
  
  impairmentfraction_ = value;
}
inline void PatientStateData::set_impairmentfraction(double value) {
  _internal_set_impairmentfraction(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.ImpairmentFraction)
}

// double RespirationRate_Per_min = 6;
inline void PatientStateData::clear_respirationrate_per_min() {
  respirationrate_per_min_ = 0;
}
inline double PatientStateData::_internal_respirationrate_per_min() const {
  return respirationrate_per_min_;
}
inline double PatientStateData::respirationrate_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.RespirationRate_Per_min)
  return _internal_respirationrate_per_min();
}
inline void PatientStateData::_internal_set_respirationrate_per_min(double value) {
  
  respirationrate_per_min_ = value;
}
inline void PatientStateData::set_respirationrate_per_min(double value) {
  _internal_set_respirationrate_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.RespirationRate_Per_min)
}

// double IERatio = 7;
inline void PatientStateData::clear_ieratio() {
  ieratio_ = 0;
}
inline double PatientStateData::_internal_ieratio() const {
  return ieratio_;
}
inline double PatientStateData::ieratio() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.IERatio)
  return _internal_ieratio();
}
inline void PatientStateData::_internal_set_ieratio(double value) {
  
  ieratio_ = value;
}
inline void PatientStateData::set_ieratio(double value) {
  _internal_set_ieratio(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.IERatio)
}

// double PEEP_cmH2O = 8;
inline void PatientStateData::clear_peep_cmh2o() {
  peep_cmh2o_ = 0;
}
inline double PatientStateData::_internal_peep_cmh2o() const {
  return peep_cmh2o_;
}
inline double PatientStateData::peep_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.PEEP_cmH2O)
  return _internal_peep_cmh2o();
}
inline void PatientStateData::_internal_set_peep_cmh2o(double value) {
  
  peep_cmh2o_ = value;
}
inline void PatientStateData::set_peep_cmh2o(double value) {
  _internal_set_peep_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.PEEP_cmH2O)
}

// double PIP_cmH2O = 9;
inline void PatientStateData::clear_pip_cmh2o() {
  pip_cmh2o_ = 0;
}
inline double PatientStateData::_internal_pip_cmh2o() const {
  return pip_cmh2o_;
}
inline double PatientStateData::pip_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.PIP_cmH2O)
  return _internal_pip_cmh2o();
}
inline void PatientStateData::_internal_set_pip_cmh2o(double value) {
  
  pip_cmh2o_ = value;
}
inline void PatientStateData::set_pip_cmh2o(double value) {
  _internal_set_pip_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.PIP_cmH2O)
}

// double FiO2 = 10;
inline void PatientStateData::clear_fio2() {
  fio2_ = 0;
}
inline double PatientStateData::_internal_fio2() const {
  return fio2_;
}
inline double PatientStateData::fio2() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.FiO2)
  return _internal_fio2();
}
inline void PatientStateData::_internal_set_fio2(double value) {
  
  fio2_ = value;
}
inline void PatientStateData::set_fio2(double value) {
  _internal_set_fio2(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.FiO2)
}

// double AirwayFlow_L_Per_min = 11;
inline void PatientStateData::clear_airwayflow_l_per_min() {
  airwayflow_l_per_min_ = 0;
}
inline double PatientStateData::_internal_airwayflow_l_per_min() const {
  return airwayflow_l_per_min_;
}
inline double PatientStateData::airwayflow_l_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.AirwayFlow_L_Per_min)
  return _internal_airwayflow_l_per_min();
}
inline void PatientStateData::_internal_set_airwayflow_l_per_min(double value) {
  
  airwayflow_l_per_min_ = value;
}
inline void PatientStateData::set_airwayflow_l_per_min(double value) {
  _internal_set_airwayflow_l_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.AirwayFlow_L_Per_min)
}

// double AirwayPressure_cmH2O = 12;
inline void PatientStateData::clear_airwaypressure_cmh2o() {
  airwaypressure_cmh2o_ = 0;
}
inline double PatientStateData::_internal_airwaypressure_cmh2o() const {
  return airwaypressure_cmh2o_;
}
inline double PatientStateData::airwaypressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.AirwayPressure_cmH2O)
  return _internal_airwaypressure_cmh2o();
}
inline void PatientStateData::_internal_set_airwaypressure_cmh2o(double value) {
  
  airwaypressure_cmh2o_ = value;
}
inline void PatientStateData::set_airwaypressure_cmh2o(double value) {
  _internal_set_airwaypressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.AirwayPressure_cmH2O)
}

// double AlveolarArterialGradient_mmHg = 13;
inline void PatientStateData::clear_alveolararterialgradient_mmhg() {
  alveolararterialgradient_mmhg_ = 0;
}
inline double PatientStateData::_internal_alveolararterialgradient_mmhg() const {
  return alveolararterialgradient_mmhg_;
}
inline double PatientStateData::alveolararterialgradient_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.AlveolarArterialGradient_mmHg)
  return _internal_alveolararterialgradient_mmhg();
}
inline void PatientStateData::_internal_set_alveolararterialgradient_mmhg(double value) {
  
  alveolararterialgradient_mmhg_ = value;
}
inline void PatientStateData::set_alveolararterialgradient_mmhg(double value) {
  _internal_set_alveolararterialgradient_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.AlveolarArterialGradient_mmHg)
}

// double ArterialCarbonDioxidePartialPressure_mmHg = 14;
inline void PatientStateData::clear_arterialcarbondioxidepartialpressure_mmhg() {
  arterialcarbondioxidepartialpressure_mmhg_ = 0;
}
inline double PatientStateData::_internal_arterialcarbondioxidepartialpressure_mmhg() const {
  return arterialcarbondioxidepartialpressure_mmhg_;
}
inline double PatientStateData::arterialcarbondioxidepartialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.ArterialCarbonDioxidePartialPressure_mmHg)
  return _internal_arterialcarbondioxidepartialpressure_mmhg();
}
inline void PatientStateData::_internal_set_arterialcarbondioxidepartialpressure_mmhg(double value) {
  
  arterialcarbondioxidepartialpressure_mmhg_ = value;
}
inline void PatientStateData::set_arterialcarbondioxidepartialpressure_mmhg(double value) {
  _internal_set_arterialcarbondioxidepartialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.ArterialCarbonDioxidePartialPressure_mmHg)
}

// double ArterialOxygenPartialPressure_mmHg = 15;
inline void PatientStateData::clear_arterialoxygenpartialpressure_mmhg() {
  arterialoxygenpartialpressure_mmhg_ = 0;
}
inline double PatientStateData::_internal_arterialoxygenpartialpressure_mmhg() const {
  return arterialoxygenpartialpressure_mmhg_;
}
inline double PatientStateData::arterialoxygenpartialpressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.ArterialOxygenPartialPressure_mmHg)
  return _internal_arterialoxygenpartialpressure_mmhg();
}
inline void PatientStateData::_internal_set_arterialoxygenpartialpressure_mmhg(double value) {
  
  arterialoxygenpartialpressure_mmhg_ = value;
}
inline void PatientStateData::set_arterialoxygenpartialpressure_mmhg(double value) {
  _internal_set_arterialoxygenpartialpressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.ArterialOxygenPartialPressure_mmHg)
}

// double CarricoIndex_mmHg = 16;
inline void PatientStateData::clear_carricoindex_mmhg() {
  carricoindex_mmhg_ = 0;
}
inline double PatientStateData::_internal_carricoindex_mmhg() const {
  return carricoindex_mmhg_;
}
inline double PatientStateData::carricoindex_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.CarricoIndex_mmHg)
  return _internal_carricoindex_mmhg();
}
inline void PatientStateData::_internal_set_carricoindex_mmhg(double value) {
  
  carricoindex_mmhg_ = value;
}
inline void PatientStateData::set_carricoindex_mmhg(double value) {
  _internal_set_carricoindex_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.CarricoIndex_mmHg)
}

// double EndTidalCarbonDioxidePressure_mmHg = 17;
inline void PatientStateData::clear_endtidalcarbondioxidepressure_mmhg() {
  endtidalcarbondioxidepressure_mmhg_ = 0;
}
inline double PatientStateData::_internal_endtidalcarbondioxidepressure_mmhg() const {
  return endtidalcarbondioxidepressure_mmhg_;
}
inline double PatientStateData::endtidalcarbondioxidepressure_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.EndTidalCarbonDioxidePressure_mmHg)
  return _internal_endtidalcarbondioxidepressure_mmhg();
}
inline void PatientStateData::_internal_set_endtidalcarbondioxidepressure_mmhg(double value) {
  
  endtidalcarbondioxidepressure_mmhg_ = value;
}
inline void PatientStateData::set_endtidalcarbondioxidepressure_mmhg(double value) {
  _internal_set_endtidalcarbondioxidepressure_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.EndTidalCarbonDioxidePressure_mmHg)
}

// double IdealBodyWeight_kg = 18;
inline void PatientStateData::clear_idealbodyweight_kg() {
  idealbodyweight_kg_ = 0;
}
inline double PatientStateData::_internal_idealbodyweight_kg() const {
  return idealbodyweight_kg_;
}
inline double PatientStateData::idealbodyweight_kg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.IdealBodyWeight_kg)
  return _internal_idealbodyweight_kg();
}
inline void PatientStateData::_internal_set_idealbodyweight_kg(double value) {
  
  idealbodyweight_kg_ = value;
}
inline void PatientStateData::set_idealbodyweight_kg(double value) {
  _internal_set_idealbodyweight_kg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.IdealBodyWeight_kg)
}

// double MeanAirwayPressure_cmH2O = 19;
inline void PatientStateData::clear_meanairwaypressure_cmh2o() {
  meanairwaypressure_cmh2o_ = 0;
}
inline double PatientStateData::_internal_meanairwaypressure_cmh2o() const {
  return meanairwaypressure_cmh2o_;
}
inline double PatientStateData::meanairwaypressure_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.MeanAirwayPressure_cmH2O)
  return _internal_meanairwaypressure_cmh2o();
}
inline void PatientStateData::_internal_set_meanairwaypressure_cmh2o(double value) {
  
  meanairwaypressure_cmh2o_ = value;
}
inline void PatientStateData::set_meanairwaypressure_cmh2o(double value) {
  _internal_set_meanairwaypressure_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.MeanAirwayPressure_cmH2O)
}

// double OxygenationIndex = 20;
inline void PatientStateData::clear_oxygenationindex() {
  oxygenationindex_ = 0;
}
inline double PatientStateData::_internal_oxygenationindex() const {
  return oxygenationindex_;
}
inline double PatientStateData::oxygenationindex() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenationIndex)
  return _internal_oxygenationindex();
}
inline void PatientStateData::_internal_set_oxygenationindex(double value) {
  
  oxygenationindex_ = value;
}
inline void PatientStateData::set_oxygenationindex(double value) {
  _internal_set_oxygenationindex(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenationIndex)
}

// double OxygenSaturation = 21;
inline void PatientStateData::clear_oxygensaturation() {
  oxygensaturation_ = 0;
}
inline double PatientStateData::_internal_oxygensaturation() const {
  return oxygensaturation_;
}
inline double PatientStateData::oxygensaturation() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturation)
  return _internal_oxygensaturation();
}
inline void PatientStateData::_internal_set_oxygensaturation(double value) {
  
  oxygensaturation_ = value;
}
inline void PatientStateData::set_oxygensaturation(double value) {
  _internal_set_oxygensaturation(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturation)
}

// double OxygenSaturationIndex_mmHg = 22;
inline void PatientStateData::clear_oxygensaturationindex_mmhg() {
  oxygensaturationindex_mmhg_ = 0;
}
inline double PatientStateData::_internal_oxygensaturationindex_mmhg() const {
  return oxygensaturationindex_mmhg_;
}
inline double PatientStateData::oxygensaturationindex_mmhg() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturationIndex_mmHg)
  return _internal_oxygensaturationindex_mmhg();
}
inline void PatientStateData::_internal_set_oxygensaturationindex_mmhg(double value) {
  
  oxygensaturationindex_mmhg_ = value;
}
inline void PatientStateData::set_oxygensaturationindex_mmhg(double value) {
  _internal_set_oxygensaturationindex_mmhg(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturationIndex_mmHg)
}

// double SFRatio = 23;
inline void PatientStateData::clear_sfratio() {
  sfratio_ = 0;
}
inline double PatientStateData::_internal_sfratio() const {
  return sfratio_;
}
inline double PatientStateData::sfratio() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.SFRatio)
  return _internal_sfratio();
}
inline void PatientStateData::_internal_set_sfratio(double value) {
  
  sfratio_ = value;
}
inline void PatientStateData::set_sfratio(double value) {
  _internal_set_sfratio(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.SFRatio)
}

// double ShuntFraction = 24;
inline void PatientStateData::clear_shuntfraction() {
  shuntfraction_ = 0;
}
inline double PatientStateData::_internal_shuntfraction() const {
  return shuntfraction_;
}
inline double PatientStateData::shuntfraction() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.ShuntFraction)
  return _internal_shuntfraction();
}
inline void PatientStateData::_internal_set_shuntfraction(double value) {
  
  shuntfraction_ = value;
}
inline void PatientStateData::set_shuntfraction(double value) {
  _internal_set_shuntfraction(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.ShuntFraction)
}

// double TidalVolume_mL = 25;
inline void PatientStateData::clear_tidalvolume_ml() {
  tidalvolume_ml_ = 0;
}
inline double PatientStateData::_internal_tidalvolume_ml() const {
  return tidalvolume_ml_;
}
inline double PatientStateData::tidalvolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.TidalVolume_mL)
  return _internal_tidalvolume_ml();
}
inline void PatientStateData::_internal_set_tidalvolume_ml(double value) {
  
  tidalvolume_ml_ = value;
}
inline void PatientStateData::set_tidalvolume_ml(double value) {
  _internal_set_tidalvolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.TidalVolume_mL)
}

// double TotalLungVolume_mL = 26;
inline void PatientStateData::clear_totallungvolume_ml() {
  totallungvolume_ml_ = 0;
}
inline double PatientStateData::_internal_totallungvolume_ml() const {
  return totallungvolume_ml_;
}
inline double PatientStateData::totallungvolume_ml() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.TotalLungVolume_mL)
  return _internal_totallungvolume_ml();
}
inline void PatientStateData::_internal_set_totallungvolume_ml(double value) {
  
  totallungvolume_ml_ = value;
}
inline void PatientStateData::set_totallungvolume_ml(double value) {
  _internal_set_totallungvolume_ml(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.TotalLungVolume_mL)
}

// bool AchievedStabilization = 27;
inline void PatientStateData::clear_achievedstabilization() {
  achievedstabilization_ = false;
}
inline bool PatientStateData::_internal_achievedstabilization() const {
  return achievedstabilization_;
}
inline bool PatientStateData::achievedstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.AchievedStabilization)
  return _internal_achievedstabilization();
}
inline void PatientStateData::_internal_set_achievedstabilization(bool value) {
  
  achievedstabilization_ = value;
}
inline void PatientStateData::set_achievedstabilization(bool value) {
  _internal_set_achievedstabilization(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.AchievedStabilization)
}

// double OxygenSaturationStabilizationTrend = 28;
inline void PatientStateData::clear_oxygensaturationstabilizationtrend() {
  oxygensaturationstabilizationtrend_ = 0;
}
inline double PatientStateData::_internal_oxygensaturationstabilizationtrend() const {
  return oxygensaturationstabilizationtrend_;
}
inline double PatientStateData::oxygensaturationstabilizationtrend() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturationStabilizationTrend)
  return _internal_oxygensaturationstabilizationtrend();
}
inline void PatientStateData::_internal_set_oxygensaturationstabilizationtrend(double value) {
  
  oxygensaturationstabilizationtrend_ = value;
}
inline void PatientStateData::set_oxygensaturationstabilizationtrend(double value) {
  _internal_set_oxygensaturationstabilizationtrend(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.PatientStateData.OxygenSaturationStabilizationTrend)
}

// -------------------------------------------------------------------

// PatientStateListData

// repeated .pulse.study.bind.multiplex_ventilation.PatientStateData Patients = 1;
inline int PatientStateListData::_internal_patients_size() const {
  return patients_.size();
}
inline int PatientStateListData::patients_size() const {
  return _internal_patients_size();
}
inline void PatientStateListData::clear_patients() {
  patients_.Clear();
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientStateListData::mutable_patients(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.PatientStateListData.Patients)
  return patients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientStateData >*
PatientStateListData::mutable_patients() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.PatientStateListData.Patients)
  return &patients_;
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientStateListData::_internal_patients(int index) const {
  return patients_.Get(index);
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientStateListData::patients(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientStateListData.Patients)
  return _internal_patients(index);
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientStateListData::_internal_add_patients() {
  return patients_.Add();
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientStateListData::add_patients() {
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.PatientStateListData.Patients)
  return _internal_add_patients();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientStateData >&
PatientStateListData::patients() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.PatientStateListData.Patients)
  return patients_;
}

// -------------------------------------------------------------------

// PatientComparisonData

// .pulse.study.bind.multiplex_ventilation.PatientStateData SoloVentilation = 1;
inline bool PatientComparisonData::_internal_has_soloventilation() const {
  return this != internal_default_instance() && soloventilation_ != nullptr;
}
inline bool PatientComparisonData::has_soloventilation() const {
  return _internal_has_soloventilation();
}
inline void PatientComparisonData::clear_soloventilation() {
  if (GetArena() == nullptr && soloventilation_ != nullptr) {
    delete soloventilation_;
  }
  soloventilation_ = nullptr;
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientComparisonData::_internal_soloventilation() const {
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData* p = soloventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::study::bind::multiplex_ventilation::PatientStateData&>(
      ::pulse::study::bind::multiplex_ventilation::_PatientStateData_default_instance_);
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientComparisonData::soloventilation() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientComparisonData.SoloVentilation)
  return _internal_soloventilation();
}
inline void PatientComparisonData::unsafe_arena_set_allocated_soloventilation(
    ::pulse::study::bind::multiplex_ventilation::PatientStateData* soloventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soloventilation_);
  }
  soloventilation_ = soloventilation;
  if (soloventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.study.bind.multiplex_ventilation.PatientComparisonData.SoloVentilation)
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::release_soloventilation() {
  
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* temp = soloventilation_;
  soloventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::unsafe_arena_release_soloventilation() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.PatientComparisonData.SoloVentilation)
  
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* temp = soloventilation_;
  soloventilation_ = nullptr;
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::_internal_mutable_soloventilation() {
  
  if (soloventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::PatientStateData>(GetArena());
    soloventilation_ = p;
  }
  return soloventilation_;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::mutable_soloventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.PatientComparisonData.SoloVentilation)
  return _internal_mutable_soloventilation();
}
inline void PatientComparisonData::set_allocated_soloventilation(::pulse::study::bind::multiplex_ventilation::PatientStateData* soloventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete soloventilation_;
  }
  if (soloventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(soloventilation);
    if (message_arena != submessage_arena) {
      soloventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soloventilation, submessage_arena);
    }
    
  } else {
    
  }
  soloventilation_ = soloventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.PatientComparisonData.SoloVentilation)
}

// .pulse.study.bind.multiplex_ventilation.PatientStateData MultiplexVentilation = 2;
inline bool PatientComparisonData::_internal_has_multiplexventilation() const {
  return this != internal_default_instance() && multiplexventilation_ != nullptr;
}
inline bool PatientComparisonData::has_multiplexventilation() const {
  return _internal_has_multiplexventilation();
}
inline void PatientComparisonData::clear_multiplexventilation() {
  if (GetArena() == nullptr && multiplexventilation_ != nullptr) {
    delete multiplexventilation_;
  }
  multiplexventilation_ = nullptr;
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientComparisonData::_internal_multiplexventilation() const {
  const ::pulse::study::bind::multiplex_ventilation::PatientStateData* p = multiplexventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::study::bind::multiplex_ventilation::PatientStateData&>(
      ::pulse::study::bind::multiplex_ventilation::_PatientStateData_default_instance_);
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientStateData& PatientComparisonData::multiplexventilation() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.PatientComparisonData.MultiplexVentilation)
  return _internal_multiplexventilation();
}
inline void PatientComparisonData::unsafe_arena_set_allocated_multiplexventilation(
    ::pulse::study::bind::multiplex_ventilation::PatientStateData* multiplexventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiplexventilation_);
  }
  multiplexventilation_ = multiplexventilation;
  if (multiplexventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.study.bind.multiplex_ventilation.PatientComparisonData.MultiplexVentilation)
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::release_multiplexventilation() {
  
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* temp = multiplexventilation_;
  multiplexventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::unsafe_arena_release_multiplexventilation() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.PatientComparisonData.MultiplexVentilation)
  
  ::pulse::study::bind::multiplex_ventilation::PatientStateData* temp = multiplexventilation_;
  multiplexventilation_ = nullptr;
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::_internal_mutable_multiplexventilation() {
  
  if (multiplexventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::PatientStateData>(GetArena());
    multiplexventilation_ = p;
  }
  return multiplexventilation_;
}
inline ::pulse::study::bind::multiplex_ventilation::PatientStateData* PatientComparisonData::mutable_multiplexventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.PatientComparisonData.MultiplexVentilation)
  return _internal_mutable_multiplexventilation();
}
inline void PatientComparisonData::set_allocated_multiplexventilation(::pulse::study::bind::multiplex_ventilation::PatientStateData* multiplexventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete multiplexventilation_;
  }
  if (multiplexventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(multiplexventilation);
    if (message_arena != submessage_arena) {
      multiplexventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiplexventilation, submessage_arena);
    }
    
  } else {
    
  }
  multiplexventilation_ = multiplexventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.PatientComparisonData.MultiplexVentilation)
}

// -------------------------------------------------------------------

// LogData

// repeated string Info = 1;
inline int LogData::_internal_info_size() const {
  return info_.size();
}
inline int LogData::info_size() const {
  return _internal_info_size();
}
inline void LogData::clear_info() {
  info_.Clear();
}
inline std::string* LogData::add_info() {
  // @@protoc_insertion_point(field_add_mutable:pulse.study.bind.multiplex_ventilation.LogData.Info)
  return _internal_add_info();
}
inline const std::string& LogData::_internal_info(int index) const {
  return info_.Get(index);
}
inline const std::string& LogData::info(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.LogData.Info)
  return _internal_info(index);
}
inline std::string* LogData::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.LogData.Info)
  return info_.Mutable(index);
}
inline void LogData::set_info(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Info)
  info_.Mutable(index)->assign(value);
}
inline void LogData::set_info(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Info)
  info_.Mutable(index)->assign(std::move(value));
}
inline void LogData::set_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline void LogData::set_info(int index, const char* value, size_t size) {
  info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline std::string* LogData::_internal_add_info() {
  return info_.Add();
}
inline void LogData::add_info(const std::string& value) {
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline void LogData::add_info(std::string&& value) {
  info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline void LogData::add_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline void LogData::add_info(const char* value, size_t size) {
  info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.study.bind.multiplex_ventilation.LogData.Info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogData::info() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.LogData.Info)
  return info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogData::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.LogData.Info)
  return &info_;
}

// repeated string Warning = 2;
inline int LogData::_internal_warning_size() const {
  return warning_.size();
}
inline int LogData::warning_size() const {
  return _internal_warning_size();
}
inline void LogData::clear_warning() {
  warning_.Clear();
}
inline std::string* LogData::add_warning() {
  // @@protoc_insertion_point(field_add_mutable:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  return _internal_add_warning();
}
inline const std::string& LogData::_internal_warning(int index) const {
  return warning_.Get(index);
}
inline const std::string& LogData::warning(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  return _internal_warning(index);
}
inline std::string* LogData::mutable_warning(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  return warning_.Mutable(index);
}
inline void LogData::set_warning(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  warning_.Mutable(index)->assign(value);
}
inline void LogData::set_warning(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  warning_.Mutable(index)->assign(std::move(value));
}
inline void LogData::set_warning(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warning_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline void LogData::set_warning(int index, const char* value, size_t size) {
  warning_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline std::string* LogData::_internal_add_warning() {
  return warning_.Add();
}
inline void LogData::add_warning(const std::string& value) {
  warning_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline void LogData::add_warning(std::string&& value) {
  warning_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline void LogData::add_warning(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  warning_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline void LogData::add_warning(const char* value, size_t size) {
  warning_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.study.bind.multiplex_ventilation.LogData.Warning)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogData::warning() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  return warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogData::mutable_warning() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.LogData.Warning)
  return &warning_;
}

// repeated string Error = 3;
inline int LogData::_internal_error_size() const {
  return error_.size();
}
inline int LogData::error_size() const {
  return _internal_error_size();
}
inline void LogData::clear_error() {
  error_.Clear();
}
inline std::string* LogData::add_error() {
  // @@protoc_insertion_point(field_add_mutable:pulse.study.bind.multiplex_ventilation.LogData.Error)
  return _internal_add_error();
}
inline const std::string& LogData::_internal_error(int index) const {
  return error_.Get(index);
}
inline const std::string& LogData::error(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.LogData.Error)
  return _internal_error(index);
}
inline std::string* LogData::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.LogData.Error)
  return error_.Mutable(index);
}
inline void LogData::set_error(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Error)
  error_.Mutable(index)->assign(value);
}
inline void LogData::set_error(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Error)
  error_.Mutable(index)->assign(std::move(value));
}
inline void LogData::set_error(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline void LogData::set_error(int index, const char* value, size_t size) {
  error_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline std::string* LogData::_internal_add_error() {
  return error_.Add();
}
inline void LogData::add_error(const std::string& value) {
  error_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline void LogData::add_error(std::string&& value) {
  error_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline void LogData::add_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline void LogData::add_error(const char* value, size_t size) {
  error_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.study.bind.multiplex_ventilation.LogData.Error)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogData::error() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.LogData.Error)
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogData::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.LogData.Error)
  return &error_;
}

// repeated string Fatal = 4;
inline int LogData::_internal_fatal_size() const {
  return fatal_.size();
}
inline int LogData::fatal_size() const {
  return _internal_fatal_size();
}
inline void LogData::clear_fatal() {
  fatal_.Clear();
}
inline std::string* LogData::add_fatal() {
  // @@protoc_insertion_point(field_add_mutable:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  return _internal_add_fatal();
}
inline const std::string& LogData::_internal_fatal(int index) const {
  return fatal_.Get(index);
}
inline const std::string& LogData::fatal(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  return _internal_fatal(index);
}
inline std::string* LogData::mutable_fatal(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  return fatal_.Mutable(index);
}
inline void LogData::set_fatal(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  fatal_.Mutable(index)->assign(value);
}
inline void LogData::set_fatal(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  fatal_.Mutable(index)->assign(std::move(value));
}
inline void LogData::set_fatal(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fatal_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline void LogData::set_fatal(int index, const char* value, size_t size) {
  fatal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline std::string* LogData::_internal_add_fatal() {
  return fatal_.Add();
}
inline void LogData::add_fatal(const std::string& value) {
  fatal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline void LogData::add_fatal(std::string&& value) {
  fatal_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline void LogData::add_fatal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fatal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline void LogData::add_fatal(const char* value, size_t size) {
  fatal_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LogData::fatal() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  return fatal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LogData::mutable_fatal() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.LogData.Fatal)
  return &fatal_;
}

// -------------------------------------------------------------------

// SimulationData

// uint32 ID = 1;
inline void SimulationData::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::id() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.ID)
  return _internal_id();
}
inline void SimulationData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void SimulationData::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.ID)
}

// uint32 GroupID = 2;
inline void SimulationData::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationData::groupid() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.GroupID)
  return _internal_groupid();
}
inline void SimulationData::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void SimulationData::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.GroupID)
}

// string OutputBaseFilename = 3;
inline void SimulationData::clear_outputbasefilename() {
  outputbasefilename_.ClearToEmpty();
}
inline const std::string& SimulationData::outputbasefilename() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
  return _internal_outputbasefilename();
}
inline void SimulationData::set_outputbasefilename(const std::string& value) {
  _internal_set_outputbasefilename(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
}
inline std::string* SimulationData::mutable_outputbasefilename() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
  return _internal_mutable_outputbasefilename();
}
inline const std::string& SimulationData::_internal_outputbasefilename() const {
  return outputbasefilename_.Get();
}
inline void SimulationData::_internal_set_outputbasefilename(const std::string& value) {
  
  outputbasefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimulationData::set_outputbasefilename(std::string&& value) {
  
  outputbasefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
}
inline void SimulationData::set_outputbasefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputbasefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
}
inline void SimulationData::set_outputbasefilename(const char* value,
    size_t size) {
  
  outputbasefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
}
inline std::string* SimulationData::_internal_mutable_outputbasefilename() {
  
  return outputbasefilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimulationData::release_outputbasefilename() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
  return outputbasefilename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimulationData::set_allocated_outputbasefilename(std::string* outputbasefilename) {
  if (outputbasefilename != nullptr) {
    
  } else {
    
  }
  outputbasefilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputbasefilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename)
}

// bool AchievedStabilization = 4;
inline void SimulationData::clear_achievedstabilization() {
  achievedstabilization_ = false;
}
inline bool SimulationData::_internal_achievedstabilization() const {
  return achievedstabilization_;
}
inline bool SimulationData::achievedstabilization() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.AchievedStabilization)
  return _internal_achievedstabilization();
}
inline void SimulationData::_internal_set_achievedstabilization(bool value) {
  
  achievedstabilization_ = value;
}
inline void SimulationData::set_achievedstabilization(bool value) {
  _internal_set_achievedstabilization(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.AchievedStabilization)
}

// double StabilizationTime_s = 5;
inline void SimulationData::clear_stabilizationtime_s() {
  stabilizationtime_s_ = 0;
}
inline double SimulationData::_internal_stabilizationtime_s() const {
  return stabilizationtime_s_;
}
inline double SimulationData::stabilizationtime_s() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.StabilizationTime_s)
  return _internal_stabilizationtime_s();
}
inline void SimulationData::_internal_set_stabilizationtime_s(double value) {
  
  stabilizationtime_s_ = value;
}
inline void SimulationData::set_stabilizationtime_s(double value) {
  _internal_set_stabilizationtime_s(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.StabilizationTime_s)
}

// double RespirationRate_Per_min = 6;
inline void SimulationData::clear_respirationrate_per_min() {
  respirationrate_per_min_ = 0;
}
inline double SimulationData::_internal_respirationrate_per_min() const {
  return respirationrate_per_min_;
}
inline double SimulationData::respirationrate_per_min() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.RespirationRate_Per_min)
  return _internal_respirationrate_per_min();
}
inline void SimulationData::_internal_set_respirationrate_per_min(double value) {
  
  respirationrate_per_min_ = value;
}
inline void SimulationData::set_respirationrate_per_min(double value) {
  _internal_set_respirationrate_per_min(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.RespirationRate_Per_min)
}

// double IERatio = 7;
inline void SimulationData::clear_ieratio() {
  ieratio_ = 0;
}
inline double SimulationData::_internal_ieratio() const {
  return ieratio_;
}
inline double SimulationData::ieratio() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.IERatio)
  return _internal_ieratio();
}
inline void SimulationData::_internal_set_ieratio(double value) {
  
  ieratio_ = value;
}
inline void SimulationData::set_ieratio(double value) {
  _internal_set_ieratio(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.IERatio)
}

// double PIP_cmH2O = 8;
inline void SimulationData::clear_pip_cmh2o() {
  pip_cmh2o_ = 0;
}
inline double SimulationData::_internal_pip_cmh2o() const {
  return pip_cmh2o_;
}
inline double SimulationData::pip_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.PIP_cmH2O)
  return _internal_pip_cmh2o();
}
inline void SimulationData::_internal_set_pip_cmh2o(double value) {
  
  pip_cmh2o_ = value;
}
inline void SimulationData::set_pip_cmh2o(double value) {
  _internal_set_pip_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.PIP_cmH2O)
}

// double PEEP_cmH2O = 9;
inline void SimulationData::clear_peep_cmh2o() {
  peep_cmh2o_ = 0;
}
inline double SimulationData::_internal_peep_cmh2o() const {
  return peep_cmh2o_;
}
inline double SimulationData::peep_cmh2o() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.PEEP_cmH2O)
  return _internal_peep_cmh2o();
}
inline void SimulationData::_internal_set_peep_cmh2o(double value) {
  
  peep_cmh2o_ = value;
}
inline void SimulationData::set_peep_cmh2o(double value) {
  _internal_set_peep_cmh2o(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.PEEP_cmH2O)
}

// double FiO2 = 10;
inline void SimulationData::clear_fio2() {
  fio2_ = 0;
}
inline double SimulationData::_internal_fio2() const {
  return fio2_;
}
inline double SimulationData::fio2() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.FiO2)
  return _internal_fio2();
}
inline void SimulationData::_internal_set_fio2(double value) {
  
  fio2_ = value;
}
inline void SimulationData::set_fio2(double value) {
  _internal_set_fio2(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationData.FiO2)
}

// .pulse.study.bind.multiplex_ventilation.LogData Log = 11;
inline bool SimulationData::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool SimulationData::has_log() const {
  return _internal_has_log();
}
inline void SimulationData::clear_log() {
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::pulse::study::bind::multiplex_ventilation::LogData& SimulationData::_internal_log() const {
  const ::pulse::study::bind::multiplex_ventilation::LogData* p = log_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::study::bind::multiplex_ventilation::LogData&>(
      ::pulse::study::bind::multiplex_ventilation::_LogData_default_instance_);
}
inline const ::pulse::study::bind::multiplex_ventilation::LogData& SimulationData::log() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.Log)
  return _internal_log();
}
inline void SimulationData::unsafe_arena_set_allocated_log(
    ::pulse::study::bind::multiplex_ventilation::LogData* log) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_);
  }
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.study.bind.multiplex_ventilation.SimulationData.Log)
}
inline ::pulse::study::bind::multiplex_ventilation::LogData* SimulationData::release_log() {
  
  ::pulse::study::bind::multiplex_ventilation::LogData* temp = log_;
  log_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::LogData* SimulationData::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.SimulationData.Log)
  
  ::pulse::study::bind::multiplex_ventilation::LogData* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::pulse::study::bind::multiplex_ventilation::LogData* SimulationData::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::study::bind::multiplex_ventilation::LogData>(GetArena());
    log_ = p;
  }
  return log_;
}
inline ::pulse::study::bind::multiplex_ventilation::LogData* SimulationData::mutable_log() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.SimulationData.Log)
  return _internal_mutable_log();
}
inline void SimulationData::set_allocated_log(::pulse::study::bind::multiplex_ventilation::LogData* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.SimulationData.Log)
}

// repeated .pulse.study.bind.multiplex_ventilation.PatientComparisonData PatientComparisons = 12;
inline int SimulationData::_internal_patientcomparisons_size() const {
  return patientcomparisons_.size();
}
inline int SimulationData::patientcomparisons_size() const {
  return _internal_patientcomparisons_size();
}
inline void SimulationData::clear_patientcomparisons() {
  patientcomparisons_.Clear();
}
inline ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* SimulationData::mutable_patientcomparisons(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.SimulationData.PatientComparisons)
  return patientcomparisons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >*
SimulationData::mutable_patientcomparisons() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.SimulationData.PatientComparisons)
  return &patientcomparisons_;
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientComparisonData& SimulationData::_internal_patientcomparisons(int index) const {
  return patientcomparisons_.Get(index);
}
inline const ::pulse::study::bind::multiplex_ventilation::PatientComparisonData& SimulationData::patientcomparisons(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationData.PatientComparisons)
  return _internal_patientcomparisons(index);
}
inline ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* SimulationData::_internal_add_patientcomparisons() {
  return patientcomparisons_.Add();
}
inline ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* SimulationData::add_patientcomparisons() {
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.SimulationData.PatientComparisons)
  return _internal_add_patientcomparisons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >&
SimulationData::patientcomparisons() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.SimulationData.PatientComparisons)
  return patientcomparisons_;
}

// -------------------------------------------------------------------

// SimulationListData

// string OutputRootDir = 1;
inline void SimulationListData::clear_outputrootdir() {
  outputrootdir_.ClearToEmpty();
}
inline const std::string& SimulationListData::outputrootdir() const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
  return _internal_outputrootdir();
}
inline void SimulationListData::set_outputrootdir(const std::string& value) {
  _internal_set_outputrootdir(value);
  // @@protoc_insertion_point(field_set:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
}
inline std::string* SimulationListData::mutable_outputrootdir() {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
  return _internal_mutable_outputrootdir();
}
inline const std::string& SimulationListData::_internal_outputrootdir() const {
  return outputrootdir_.Get();
}
inline void SimulationListData::_internal_set_outputrootdir(const std::string& value) {
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimulationListData::set_outputrootdir(std::string&& value) {
  
  outputrootdir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
}
inline void SimulationListData::set_outputrootdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
}
inline void SimulationListData::set_outputrootdir(const char* value,
    size_t size) {
  
  outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
}
inline std::string* SimulationListData::_internal_mutable_outputrootdir() {
  
  return outputrootdir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimulationListData::release_outputrootdir() {
  // @@protoc_insertion_point(field_release:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
  return outputrootdir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimulationListData::set_allocated_outputrootdir(std::string* outputrootdir) {
  if (outputrootdir != nullptr) {
    
  } else {
    
  }
  outputrootdir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputrootdir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir)
}

// repeated .pulse.study.bind.multiplex_ventilation.SimulationData Simulations = 2;
inline int SimulationListData::_internal_simulations_size() const {
  return simulations_.size();
}
inline int SimulationListData::simulations_size() const {
  return _internal_simulations_size();
}
inline void SimulationListData::clear_simulations() {
  simulations_.Clear();
}
inline ::pulse::study::bind::multiplex_ventilation::SimulationData* SimulationListData::mutable_simulations(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.study.bind.multiplex_ventilation.SimulationListData.Simulations)
  return simulations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::SimulationData >*
SimulationListData::mutable_simulations() {
  // @@protoc_insertion_point(field_mutable_list:pulse.study.bind.multiplex_ventilation.SimulationListData.Simulations)
  return &simulations_;
}
inline const ::pulse::study::bind::multiplex_ventilation::SimulationData& SimulationListData::_internal_simulations(int index) const {
  return simulations_.Get(index);
}
inline const ::pulse::study::bind::multiplex_ventilation::SimulationData& SimulationListData::simulations(int index) const {
  // @@protoc_insertion_point(field_get:pulse.study.bind.multiplex_ventilation.SimulationListData.Simulations)
  return _internal_simulations(index);
}
inline ::pulse::study::bind::multiplex_ventilation::SimulationData* SimulationListData::_internal_add_simulations() {
  return simulations_.Add();
}
inline ::pulse::study::bind::multiplex_ventilation::SimulationData* SimulationListData::add_simulations() {
  // @@protoc_insertion_point(field_add:pulse.study.bind.multiplex_ventilation.SimulationListData.Simulations)
  return _internal_add_simulations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::study::bind::multiplex_ventilation::SimulationData >&
SimulationListData::simulations() const {
  // @@protoc_insertion_point(field_list:pulse.study.bind.multiplex_ventilation.SimulationListData.Simulations)
  return simulations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multiplex_ventilation
}  // namespace bind
}  // namespace study
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto
