// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/study/bind/MultiplexVentilation.proto

#include "pulse/study/bind/MultiplexVentilation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto;
namespace pulse {
namespace study {
namespace bind {
namespace multiplex_ventilation {
class PatientStateDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientStateData> _instance;
} _PatientStateData_default_instance_;
class PatientStateListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientStateListData> _instance;
} _PatientStateListData_default_instance_;
class PatientComparisonDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientComparisonData> _instance;
} _PatientComparisonData_default_instance_;
class LogDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogData> _instance;
} _LogData_default_instance_;
class SimulationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationData> _instance;
} _SimulationData_default_instance_;
class SimulationListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationListData> _instance;
} _SimulationListData_default_instance_;
}  // namespace multiplex_ventilation
}  // namespace bind
}  // namespace study
}  // namespace pulse
static void InitDefaultsscc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_LogData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::LogData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {}};

static void InitDefaultsscc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_PatientComparisonData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::PatientComparisonData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {
      &scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,}};

static void InitDefaultsscc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_PatientStateData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::PatientStateData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {}};

static void InitDefaultsscc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_PatientStateListData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::PatientStateListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {
      &scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,}};

static void InitDefaultsscc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_SimulationData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::SimulationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {
      &scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
      &scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,}};

static void InitDefaultsscc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::study::bind::multiplex_ventilation::_SimulationListData_default_instance_;
    new (ptr) ::pulse::study::bind::multiplex_ventilation::SimulationListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto}, {
      &scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, id_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, statefile_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, compliance_ml_per_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, resistance_cmh2o_s_per_l_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, impairmentfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, respirationrate_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, ieratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, peep_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, pip_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, fio2_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, airwayflow_l_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, airwaypressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, alveolararterialgradient_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, arterialcarbondioxidepartialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, arterialoxygenpartialpressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, carricoindex_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, endtidalcarbondioxidepressure_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, idealbodyweight_kg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, meanairwaypressure_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, oxygenationindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, oxygensaturation_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, oxygensaturationindex_mmhg_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, sfratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, shuntfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, tidalvolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, totallungvolume_ml_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, achievedstabilization_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateData, oxygensaturationstabilizationtrend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientStateListData, patients_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientComparisonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientComparisonData, soloventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::PatientComparisonData, multiplexventilation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::LogData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::LogData, info_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::LogData, warning_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::LogData, error_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::LogData, fatal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, id_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, groupid_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, outputbasefilename_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, achievedstabilization_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, stabilizationtime_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, respirationrate_per_min_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, ieratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, pip_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, peep_cmh2o_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, fio2_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, log_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationData, patientcomparisons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationListData, outputrootdir_),
  PROTOBUF_FIELD_OFFSET(::pulse::study::bind::multiplex_ventilation::SimulationListData, simulations_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::study::bind::multiplex_ventilation::PatientStateData)},
  { 33, -1, sizeof(::pulse::study::bind::multiplex_ventilation::PatientStateListData)},
  { 39, -1, sizeof(::pulse::study::bind::multiplex_ventilation::PatientComparisonData)},
  { 46, -1, sizeof(::pulse::study::bind::multiplex_ventilation::LogData)},
  { 55, -1, sizeof(::pulse::study::bind::multiplex_ventilation::SimulationData)},
  { 72, -1, sizeof(::pulse::study::bind::multiplex_ventilation::SimulationListData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_PatientStateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_PatientStateListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_PatientComparisonData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_LogData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_SimulationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::study::bind::multiplex_ventilation::_SimulationListData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+pulse/study/bind/MultiplexVentilation."
  "proto\022&pulse.study.bind.multiplex_ventil"
  "ation\"\275\006\n\020PatientStateData\022\n\n\002ID\030\001 \001(\r\022\021"
  "\n\tStateFile\030\002 \001(\t\022\037\n\027Compliance_mL_Per_c"
  "mH2O\030\003 \001(\001\022 \n\030Resistance_cmH2O_s_Per_L\030\004"
  " \001(\001\022\032\n\022ImpairmentFraction\030\005 \001(\001\022\037\n\027Resp"
  "irationRate_Per_min\030\006 \001(\001\022\017\n\007IERatio\030\007 \001"
  "(\001\022\022\n\nPEEP_cmH2O\030\010 \001(\001\022\021\n\tPIP_cmH2O\030\t \001("
  "\001\022\014\n\004FiO2\030\n \001(\001\022\034\n\024AirwayFlow_L_Per_min\030"
  "\013 \001(\001\022\034\n\024AirwayPressure_cmH2O\030\014 \001(\001\022%\n\035A"
  "lveolarArterialGradient_mmHg\030\r \001(\001\0221\n)Ar"
  "terialCarbonDioxidePartialPressure_mmHg\030"
  "\016 \001(\001\022*\n\"ArterialOxygenPartialPressure_m"
  "mHg\030\017 \001(\001\022\031\n\021CarricoIndex_mmHg\030\020 \001(\001\022*\n\""
  "EndTidalCarbonDioxidePressure_mmHg\030\021 \001(\001"
  "\022\032\n\022IdealBodyWeight_kg\030\022 \001(\001\022 \n\030MeanAirw"
  "ayPressure_cmH2O\030\023 \001(\001\022\030\n\020OxygenationInd"
  "ex\030\024 \001(\001\022\030\n\020OxygenSaturation\030\025 \001(\001\022\"\n\032Ox"
  "ygenSaturationIndex_mmHg\030\026 \001(\001\022\017\n\007SFRati"
  "o\030\027 \001(\001\022\025\n\rShuntFraction\030\030 \001(\001\022\026\n\016TidalV"
  "olume_mL\030\031 \001(\001\022\032\n\022TotalLungVolume_mL\030\032 \001"
  "(\001\022\035\n\025AchievedStabilization\030\033 \001(\010\022*\n\"Oxy"
  "genSaturationStabilizationTrend\030\034 \001(\001\"b\n"
  "\024PatientStateListData\022J\n\010Patients\030\001 \003(\0132"
  "8.pulse.study.bind.multiplex_ventilation"
  ".PatientStateData\"\302\001\n\025PatientComparisonD"
  "ata\022Q\n\017SoloVentilation\030\001 \001(\01328.pulse.stu"
  "dy.bind.multiplex_ventilation.PatientSta"
  "teData\022V\n\024MultiplexVentilation\030\002 \001(\01328.p"
  "ulse.study.bind.multiplex_ventilation.Pa"
  "tientStateData\"F\n\007LogData\022\014\n\004Info\030\001 \003(\t\022"
  "\017\n\007Warning\030\002 \003(\t\022\r\n\005Error\030\003 \003(\t\022\r\n\005Fatal"
  "\030\004 \003(\t\"\205\003\n\016SimulationData\022\n\n\002ID\030\001 \001(\r\022\017\n"
  "\007GroupID\030\002 \001(\r\022\032\n\022OutputBaseFilename\030\003 \001"
  "(\t\022\035\n\025AchievedStabilization\030\004 \001(\010\022\033\n\023Sta"
  "bilizationTime_s\030\005 \001(\001\022\037\n\027RespirationRat"
  "e_Per_min\030\006 \001(\001\022\017\n\007IERatio\030\007 \001(\001\022\021\n\tPIP_"
  "cmH2O\030\010 \001(\001\022\022\n\nPEEP_cmH2O\030\t \001(\001\022\014\n\004FiO2\030"
  "\n \001(\001\022<\n\003Log\030\013 \001(\0132/.pulse.study.bind.mu"
  "ltiplex_ventilation.LogData\022Y\n\022PatientCo"
  "mparisons\030\014 \003(\0132=.pulse.study.bind.multi"
  "plex_ventilation.PatientComparisonData\"x"
  "\n\022SimulationListData\022\025\n\rOutputRootDir\030\001 "
  "\001(\t\022K\n\013Simulations\030\002 \003(\01326.pulse.study.b"
  "ind.multiplex_ventilation.SimulationData"
  "B_\n2com.kitware.pulse.study.bind.multipl"
  "ex_ventilationH\001\252\002&pulse.study.bind.mult"
  "iplex_ventilationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_sccs[6] = {
  &scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
  &scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
  &scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
  &scc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
  &scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
  &scc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto, "pulse/study/bind/MultiplexVentilation.proto", 1905,
  &descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_once, descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_sccs, descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto::offsets,
  file_level_metadata_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto, 6, file_level_enum_descriptors_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto, file_level_service_descriptors_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto)), true);
namespace pulse {
namespace study {
namespace bind {
namespace multiplex_ventilation {

// ===================================================================

class PatientStateData::_Internal {
 public:
};

PatientStateData::PatientStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.PatientStateData)
}
PatientStateData::PatientStateData(const PatientStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statefile().empty()) {
    statefile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statefile(), 
      GetArena());
  }
  ::memcpy(&compliance_ml_per_cmh2o_, &from.compliance_ml_per_cmh2o_,
    static_cast<size_t>(reinterpret_cast<char*>(&oxygensaturationstabilizationtrend_) -
    reinterpret_cast<char*>(&compliance_ml_per_cmh2o_)) + sizeof(oxygensaturationstabilizationtrend_));
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.PatientStateData)
}

void PatientStateData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  statefile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compliance_ml_per_cmh2o_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&oxygensaturationstabilizationtrend_) -
      reinterpret_cast<char*>(&compliance_ml_per_cmh2o_)) + sizeof(oxygensaturationstabilizationtrend_));
}

PatientStateData::~PatientStateData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.PatientStateData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientStateData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  statefile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatientStateData::ArenaDtor(void* object) {
  PatientStateData* _this = reinterpret_cast< PatientStateData* >(object);
  (void)_this;
}
void PatientStateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientStateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientStateData& PatientStateData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientStateData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void PatientStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statefile_.ClearToEmpty();
  ::memset(&compliance_ml_per_cmh2o_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oxygensaturationstabilizationtrend_) -
      reinterpret_cast<char*>(&compliance_ml_per_cmh2o_)) + sizeof(oxygensaturationstabilizationtrend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientStateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string StateFile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_statefile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Compliance_mL_Per_cmH2O = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          compliance_ml_per_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Resistance_cmH2O_s_Per_L = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          resistance_cmh2o_s_per_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ImpairmentFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          impairmentfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RespirationRate_Per_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          respirationrate_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IERatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ieratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PEEP_cmH2O = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          peep_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PIP_cmH2O = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          pip_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FiO2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fio2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AirwayFlow_L_Per_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          airwayflow_l_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AirwayPressure_cmH2O = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          airwaypressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AlveolarArterialGradient_mmHg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          alveolararterialgradient_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ArterialCarbonDioxidePartialPressure_mmHg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          arterialcarbondioxidepartialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ArterialOxygenPartialPressure_mmHg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          arterialoxygenpartialpressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CarricoIndex_mmHg = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          carricoindex_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double EndTidalCarbonDioxidePressure_mmHg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          endtidalcarbondioxidepressure_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IdealBodyWeight_kg = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          idealbodyweight_kg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MeanAirwayPressure_cmH2O = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          meanairwaypressure_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OxygenationIndex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          oxygenationindex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OxygenSaturation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          oxygensaturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double OxygenSaturationIndex_mmHg = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          oxygensaturationindex_mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double SFRatio = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          sfratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ShuntFraction = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          shuntfraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TidalVolume_mL = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          tidalvolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TotalLungVolume_mL = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          totallungvolume_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool AchievedStabilization = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          achievedstabilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double OxygenSaturationStabilizationTrend = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          oxygensaturationstabilizationtrend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientStateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string StateFile = 2;
  if (this->statefile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statefile().data(), static_cast<int>(this->_internal_statefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.PatientStateData.StateFile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_statefile(), target);
  }

  // double Compliance_mL_Per_cmH2O = 3;
  if (!(this->compliance_ml_per_cmh2o() <= 0 && this->compliance_ml_per_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_compliance_ml_per_cmh2o(), target);
  }

  // double Resistance_cmH2O_s_Per_L = 4;
  if (!(this->resistance_cmh2o_s_per_l() <= 0 && this->resistance_cmh2o_s_per_l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_resistance_cmh2o_s_per_l(), target);
  }

  // double ImpairmentFraction = 5;
  if (!(this->impairmentfraction() <= 0 && this->impairmentfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_impairmentfraction(), target);
  }

  // double RespirationRate_Per_min = 6;
  if (!(this->respirationrate_per_min() <= 0 && this->respirationrate_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_respirationrate_per_min(), target);
  }

  // double IERatio = 7;
  if (!(this->ieratio() <= 0 && this->ieratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ieratio(), target);
  }

  // double PEEP_cmH2O = 8;
  if (!(this->peep_cmh2o() <= 0 && this->peep_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_peep_cmh2o(), target);
  }

  // double PIP_cmH2O = 9;
  if (!(this->pip_cmh2o() <= 0 && this->pip_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_pip_cmh2o(), target);
  }

  // double FiO2 = 10;
  if (!(this->fio2() <= 0 && this->fio2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_fio2(), target);
  }

  // double AirwayFlow_L_Per_min = 11;
  if (!(this->airwayflow_l_per_min() <= 0 && this->airwayflow_l_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_airwayflow_l_per_min(), target);
  }

  // double AirwayPressure_cmH2O = 12;
  if (!(this->airwaypressure_cmh2o() <= 0 && this->airwaypressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_airwaypressure_cmh2o(), target);
  }

  // double AlveolarArterialGradient_mmHg = 13;
  if (!(this->alveolararterialgradient_mmhg() <= 0 && this->alveolararterialgradient_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_alveolararterialgradient_mmhg(), target);
  }

  // double ArterialCarbonDioxidePartialPressure_mmHg = 14;
  if (!(this->arterialcarbondioxidepartialpressure_mmhg() <= 0 && this->arterialcarbondioxidepartialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_arterialcarbondioxidepartialpressure_mmhg(), target);
  }

  // double ArterialOxygenPartialPressure_mmHg = 15;
  if (!(this->arterialoxygenpartialpressure_mmhg() <= 0 && this->arterialoxygenpartialpressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_arterialoxygenpartialpressure_mmhg(), target);
  }

  // double CarricoIndex_mmHg = 16;
  if (!(this->carricoindex_mmhg() <= 0 && this->carricoindex_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_carricoindex_mmhg(), target);
  }

  // double EndTidalCarbonDioxidePressure_mmHg = 17;
  if (!(this->endtidalcarbondioxidepressure_mmhg() <= 0 && this->endtidalcarbondioxidepressure_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_endtidalcarbondioxidepressure_mmhg(), target);
  }

  // double IdealBodyWeight_kg = 18;
  if (!(this->idealbodyweight_kg() <= 0 && this->idealbodyweight_kg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_idealbodyweight_kg(), target);
  }

  // double MeanAirwayPressure_cmH2O = 19;
  if (!(this->meanairwaypressure_cmh2o() <= 0 && this->meanairwaypressure_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_meanairwaypressure_cmh2o(), target);
  }

  // double OxygenationIndex = 20;
  if (!(this->oxygenationindex() <= 0 && this->oxygenationindex() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_oxygenationindex(), target);
  }

  // double OxygenSaturation = 21;
  if (!(this->oxygensaturation() <= 0 && this->oxygensaturation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_oxygensaturation(), target);
  }

  // double OxygenSaturationIndex_mmHg = 22;
  if (!(this->oxygensaturationindex_mmhg() <= 0 && this->oxygensaturationindex_mmhg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_oxygensaturationindex_mmhg(), target);
  }

  // double SFRatio = 23;
  if (!(this->sfratio() <= 0 && this->sfratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_sfratio(), target);
  }

  // double ShuntFraction = 24;
  if (!(this->shuntfraction() <= 0 && this->shuntfraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_shuntfraction(), target);
  }

  // double TidalVolume_mL = 25;
  if (!(this->tidalvolume_ml() <= 0 && this->tidalvolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_tidalvolume_ml(), target);
  }

  // double TotalLungVolume_mL = 26;
  if (!(this->totallungvolume_ml() <= 0 && this->totallungvolume_ml() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_totallungvolume_ml(), target);
  }

  // bool AchievedStabilization = 27;
  if (this->achievedstabilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_achievedstabilization(), target);
  }

  // double OxygenSaturationStabilizationTrend = 28;
  if (!(this->oxygensaturationstabilizationtrend() <= 0 && this->oxygensaturationstabilizationtrend() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_oxygensaturationstabilizationtrend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.PatientStateData)
  return target;
}

size_t PatientStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string StateFile = 2;
  if (this->statefile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statefile());
  }

  // double Compliance_mL_Per_cmH2O = 3;
  if (!(this->compliance_ml_per_cmh2o() <= 0 && this->compliance_ml_per_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double Resistance_cmH2O_s_Per_L = 4;
  if (!(this->resistance_cmh2o_s_per_l() <= 0 && this->resistance_cmh2o_s_per_l() >= 0)) {
    total_size += 1 + 8;
  }

  // double ImpairmentFraction = 5;
  if (!(this->impairmentfraction() <= 0 && this->impairmentfraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double RespirationRate_Per_min = 6;
  if (!(this->respirationrate_per_min() <= 0 && this->respirationrate_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double IERatio = 7;
  if (!(this->ieratio() <= 0 && this->ieratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double PEEP_cmH2O = 8;
  if (!(this->peep_cmh2o() <= 0 && this->peep_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double PIP_cmH2O = 9;
  if (!(this->pip_cmh2o() <= 0 && this->pip_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double FiO2 = 10;
  if (!(this->fio2() <= 0 && this->fio2() >= 0)) {
    total_size += 1 + 8;
  }

  // double AirwayFlow_L_Per_min = 11;
  if (!(this->airwayflow_l_per_min() <= 0 && this->airwayflow_l_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double AirwayPressure_cmH2O = 12;
  if (!(this->airwaypressure_cmh2o() <= 0 && this->airwaypressure_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double AlveolarArterialGradient_mmHg = 13;
  if (!(this->alveolararterialgradient_mmhg() <= 0 && this->alveolararterialgradient_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double ArterialCarbonDioxidePartialPressure_mmHg = 14;
  if (!(this->arterialcarbondioxidepartialpressure_mmhg() <= 0 && this->arterialcarbondioxidepartialpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool AchievedStabilization = 27;
  if (this->achievedstabilization() != 0) {
    total_size += 2 + 1;
  }

  // double ArterialOxygenPartialPressure_mmHg = 15;
  if (!(this->arterialoxygenpartialpressure_mmhg() <= 0 && this->arterialoxygenpartialpressure_mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // double CarricoIndex_mmHg = 16;
  if (!(this->carricoindex_mmhg() <= 0 && this->carricoindex_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double EndTidalCarbonDioxidePressure_mmHg = 17;
  if (!(this->endtidalcarbondioxidepressure_mmhg() <= 0 && this->endtidalcarbondioxidepressure_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double IdealBodyWeight_kg = 18;
  if (!(this->idealbodyweight_kg() <= 0 && this->idealbodyweight_kg() >= 0)) {
    total_size += 2 + 8;
  }

  // double MeanAirwayPressure_cmH2O = 19;
  if (!(this->meanairwaypressure_cmh2o() <= 0 && this->meanairwaypressure_cmh2o() >= 0)) {
    total_size += 2 + 8;
  }

  // double OxygenationIndex = 20;
  if (!(this->oxygenationindex() <= 0 && this->oxygenationindex() >= 0)) {
    total_size += 2 + 8;
  }

  // double OxygenSaturation = 21;
  if (!(this->oxygensaturation() <= 0 && this->oxygensaturation() >= 0)) {
    total_size += 2 + 8;
  }

  // double OxygenSaturationIndex_mmHg = 22;
  if (!(this->oxygensaturationindex_mmhg() <= 0 && this->oxygensaturationindex_mmhg() >= 0)) {
    total_size += 2 + 8;
  }

  // double SFRatio = 23;
  if (!(this->sfratio() <= 0 && this->sfratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double ShuntFraction = 24;
  if (!(this->shuntfraction() <= 0 && this->shuntfraction() >= 0)) {
    total_size += 2 + 8;
  }

  // double TidalVolume_mL = 25;
  if (!(this->tidalvolume_ml() <= 0 && this->tidalvolume_ml() >= 0)) {
    total_size += 2 + 8;
  }

  // double TotalLungVolume_mL = 26;
  if (!(this->totallungvolume_ml() <= 0 && this->totallungvolume_ml() >= 0)) {
    total_size += 2 + 8;
  }

  // double OxygenSaturationStabilizationTrend = 28;
  if (!(this->oxygensaturationstabilizationtrend() <= 0 && this->oxygensaturationstabilizationtrend() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientStateData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientStateData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientStateData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.PatientStateData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.PatientStateData)
    MergeFrom(*source);
  }
}

void PatientStateData::MergeFrom(const PatientStateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statefile().size() > 0) {
    _internal_set_statefile(from._internal_statefile());
  }
  if (!(from.compliance_ml_per_cmh2o() <= 0 && from.compliance_ml_per_cmh2o() >= 0)) {
    _internal_set_compliance_ml_per_cmh2o(from._internal_compliance_ml_per_cmh2o());
  }
  if (!(from.resistance_cmh2o_s_per_l() <= 0 && from.resistance_cmh2o_s_per_l() >= 0)) {
    _internal_set_resistance_cmh2o_s_per_l(from._internal_resistance_cmh2o_s_per_l());
  }
  if (!(from.impairmentfraction() <= 0 && from.impairmentfraction() >= 0)) {
    _internal_set_impairmentfraction(from._internal_impairmentfraction());
  }
  if (!(from.respirationrate_per_min() <= 0 && from.respirationrate_per_min() >= 0)) {
    _internal_set_respirationrate_per_min(from._internal_respirationrate_per_min());
  }
  if (!(from.ieratio() <= 0 && from.ieratio() >= 0)) {
    _internal_set_ieratio(from._internal_ieratio());
  }
  if (!(from.peep_cmh2o() <= 0 && from.peep_cmh2o() >= 0)) {
    _internal_set_peep_cmh2o(from._internal_peep_cmh2o());
  }
  if (!(from.pip_cmh2o() <= 0 && from.pip_cmh2o() >= 0)) {
    _internal_set_pip_cmh2o(from._internal_pip_cmh2o());
  }
  if (!(from.fio2() <= 0 && from.fio2() >= 0)) {
    _internal_set_fio2(from._internal_fio2());
  }
  if (!(from.airwayflow_l_per_min() <= 0 && from.airwayflow_l_per_min() >= 0)) {
    _internal_set_airwayflow_l_per_min(from._internal_airwayflow_l_per_min());
  }
  if (!(from.airwaypressure_cmh2o() <= 0 && from.airwaypressure_cmh2o() >= 0)) {
    _internal_set_airwaypressure_cmh2o(from._internal_airwaypressure_cmh2o());
  }
  if (!(from.alveolararterialgradient_mmhg() <= 0 && from.alveolararterialgradient_mmhg() >= 0)) {
    _internal_set_alveolararterialgradient_mmhg(from._internal_alveolararterialgradient_mmhg());
  }
  if (!(from.arterialcarbondioxidepartialpressure_mmhg() <= 0 && from.arterialcarbondioxidepartialpressure_mmhg() >= 0)) {
    _internal_set_arterialcarbondioxidepartialpressure_mmhg(from._internal_arterialcarbondioxidepartialpressure_mmhg());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.achievedstabilization() != 0) {
    _internal_set_achievedstabilization(from._internal_achievedstabilization());
  }
  if (!(from.arterialoxygenpartialpressure_mmhg() <= 0 && from.arterialoxygenpartialpressure_mmhg() >= 0)) {
    _internal_set_arterialoxygenpartialpressure_mmhg(from._internal_arterialoxygenpartialpressure_mmhg());
  }
  if (!(from.carricoindex_mmhg() <= 0 && from.carricoindex_mmhg() >= 0)) {
    _internal_set_carricoindex_mmhg(from._internal_carricoindex_mmhg());
  }
  if (!(from.endtidalcarbondioxidepressure_mmhg() <= 0 && from.endtidalcarbondioxidepressure_mmhg() >= 0)) {
    _internal_set_endtidalcarbondioxidepressure_mmhg(from._internal_endtidalcarbondioxidepressure_mmhg());
  }
  if (!(from.idealbodyweight_kg() <= 0 && from.idealbodyweight_kg() >= 0)) {
    _internal_set_idealbodyweight_kg(from._internal_idealbodyweight_kg());
  }
  if (!(from.meanairwaypressure_cmh2o() <= 0 && from.meanairwaypressure_cmh2o() >= 0)) {
    _internal_set_meanairwaypressure_cmh2o(from._internal_meanairwaypressure_cmh2o());
  }
  if (!(from.oxygenationindex() <= 0 && from.oxygenationindex() >= 0)) {
    _internal_set_oxygenationindex(from._internal_oxygenationindex());
  }
  if (!(from.oxygensaturation() <= 0 && from.oxygensaturation() >= 0)) {
    _internal_set_oxygensaturation(from._internal_oxygensaturation());
  }
  if (!(from.oxygensaturationindex_mmhg() <= 0 && from.oxygensaturationindex_mmhg() >= 0)) {
    _internal_set_oxygensaturationindex_mmhg(from._internal_oxygensaturationindex_mmhg());
  }
  if (!(from.sfratio() <= 0 && from.sfratio() >= 0)) {
    _internal_set_sfratio(from._internal_sfratio());
  }
  if (!(from.shuntfraction() <= 0 && from.shuntfraction() >= 0)) {
    _internal_set_shuntfraction(from._internal_shuntfraction());
  }
  if (!(from.tidalvolume_ml() <= 0 && from.tidalvolume_ml() >= 0)) {
    _internal_set_tidalvolume_ml(from._internal_tidalvolume_ml());
  }
  if (!(from.totallungvolume_ml() <= 0 && from.totallungvolume_ml() >= 0)) {
    _internal_set_totallungvolume_ml(from._internal_totallungvolume_ml());
  }
  if (!(from.oxygensaturationstabilizationtrend() <= 0 && from.oxygensaturationstabilizationtrend() >= 0)) {
    _internal_set_oxygensaturationstabilizationtrend(from._internal_oxygensaturationstabilizationtrend());
  }
}

void PatientStateData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientStateData::CopyFrom(const PatientStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientStateData::IsInitialized() const {
  return true;
}

void PatientStateData::InternalSwap(PatientStateData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  statefile_.Swap(&other->statefile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatientStateData, oxygensaturationstabilizationtrend_)
      + sizeof(PatientStateData::oxygensaturationstabilizationtrend_)
      - PROTOBUF_FIELD_OFFSET(PatientStateData, compliance_ml_per_cmh2o_)>(
          reinterpret_cast<char*>(&compliance_ml_per_cmh2o_),
          reinterpret_cast<char*>(&other->compliance_ml_per_cmh2o_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientStateData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PatientStateListData::_Internal {
 public:
};

PatientStateListData::PatientStateListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.PatientStateListData)
}
PatientStateListData::PatientStateListData(const PatientStateListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      patients_(from.patients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.PatientStateListData)
}

void PatientStateListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
}

PatientStateListData::~PatientStateListData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientStateListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PatientStateListData::ArenaDtor(void* object) {
  PatientStateListData* _this = reinterpret_cast< PatientStateListData* >(object);
  (void)_this;
}
void PatientStateListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientStateListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientStateListData& PatientStateListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientStateListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void PatientStateListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patients_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientStateListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.study.bind.multiplex_ventilation.PatientStateData Patients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientStateListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.study.bind.multiplex_ventilation.PatientStateData Patients = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patients_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_patients(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  return target;
}

size_t PatientStateListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.study.bind.multiplex_ventilation.PatientStateData Patients = 1;
  total_size += 1UL * this->_internal_patients_size();
  for (const auto& msg : this->patients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientStateListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientStateListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientStateListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.PatientStateListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.PatientStateListData)
    MergeFrom(*source);
  }
}

void PatientStateListData::MergeFrom(const PatientStateListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patients_.MergeFrom(from.patients_);
}

void PatientStateListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientStateListData::CopyFrom(const PatientStateListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientStateListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientStateListData::IsInitialized() const {
  return true;
}

void PatientStateListData::InternalSwap(PatientStateListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  patients_.InternalSwap(&other->patients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientStateListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PatientComparisonData::_Internal {
 public:
  static const ::pulse::study::bind::multiplex_ventilation::PatientStateData& soloventilation(const PatientComparisonData* msg);
  static const ::pulse::study::bind::multiplex_ventilation::PatientStateData& multiplexventilation(const PatientComparisonData* msg);
};

const ::pulse::study::bind::multiplex_ventilation::PatientStateData&
PatientComparisonData::_Internal::soloventilation(const PatientComparisonData* msg) {
  return *msg->soloventilation_;
}
const ::pulse::study::bind::multiplex_ventilation::PatientStateData&
PatientComparisonData::_Internal::multiplexventilation(const PatientComparisonData* msg) {
  return *msg->multiplexventilation_;
}
PatientComparisonData::PatientComparisonData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
}
PatientComparisonData::PatientComparisonData(const PatientComparisonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_soloventilation()) {
    soloventilation_ = new ::pulse::study::bind::multiplex_ventilation::PatientStateData(*from.soloventilation_);
  } else {
    soloventilation_ = nullptr;
  }
  if (from._internal_has_multiplexventilation()) {
    multiplexventilation_ = new ::pulse::study::bind::multiplex_ventilation::PatientStateData(*from.multiplexventilation_);
  } else {
    multiplexventilation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
}

void PatientComparisonData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&soloventilation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&multiplexventilation_) -
      reinterpret_cast<char*>(&soloventilation_)) + sizeof(multiplexventilation_));
}

PatientComparisonData::~PatientComparisonData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientComparisonData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete soloventilation_;
  if (this != internal_default_instance()) delete multiplexventilation_;
}

void PatientComparisonData::ArenaDtor(void* object) {
  PatientComparisonData* _this = reinterpret_cast< PatientComparisonData* >(object);
  (void)_this;
}
void PatientComparisonData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientComparisonData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientComparisonData& PatientComparisonData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientComparisonData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void PatientComparisonData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && soloventilation_ != nullptr) {
    delete soloventilation_;
  }
  soloventilation_ = nullptr;
  if (GetArena() == nullptr && multiplexventilation_ != nullptr) {
    delete multiplexventilation_;
  }
  multiplexventilation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientComparisonData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.study.bind.multiplex_ventilation.PatientStateData SoloVentilation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_soloventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.study.bind.multiplex_ventilation.PatientStateData MultiplexVentilation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplexventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientComparisonData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.study.bind.multiplex_ventilation.PatientStateData SoloVentilation = 1;
  if (this->has_soloventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::soloventilation(this), target, stream);
  }

  // .pulse.study.bind.multiplex_ventilation.PatientStateData MultiplexVentilation = 2;
  if (this->has_multiplexventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multiplexventilation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  return target;
}

size_t PatientComparisonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.study.bind.multiplex_ventilation.PatientStateData SoloVentilation = 1;
  if (this->has_soloventilation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soloventilation_);
  }

  // .pulse.study.bind.multiplex_ventilation.PatientStateData MultiplexVentilation = 2;
  if (this->has_multiplexventilation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiplexventilation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientComparisonData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientComparisonData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientComparisonData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
    MergeFrom(*source);
  }
}

void PatientComparisonData::MergeFrom(const PatientComparisonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_soloventilation()) {
    _internal_mutable_soloventilation()->::pulse::study::bind::multiplex_ventilation::PatientStateData::MergeFrom(from._internal_soloventilation());
  }
  if (from.has_multiplexventilation()) {
    _internal_mutable_multiplexventilation()->::pulse::study::bind::multiplex_ventilation::PatientStateData::MergeFrom(from._internal_multiplexventilation());
  }
}

void PatientComparisonData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientComparisonData::CopyFrom(const PatientComparisonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.PatientComparisonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientComparisonData::IsInitialized() const {
  return true;
}

void PatientComparisonData::InternalSwap(PatientComparisonData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatientComparisonData, multiplexventilation_)
      + sizeof(PatientComparisonData::multiplexventilation_)
      - PROTOBUF_FIELD_OFFSET(PatientComparisonData, soloventilation_)>(
          reinterpret_cast<char*>(&soloventilation_),
          reinterpret_cast<char*>(&other->soloventilation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientComparisonData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogData::_Internal {
 public:
};

LogData::LogData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena),
  warning_(arena),
  error_(arena),
  fatal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.LogData)
}
LogData::LogData(const LogData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_),
      warning_(from.warning_),
      error_(from.error_),
      fatal_(from.fatal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.LogData)
}

void LogData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
}

LogData::~LogData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.LogData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogData::ArenaDtor(void* object) {
  LogData* _this = reinterpret_cast< LogData* >(object);
  (void)_this;
}
void LogData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogData& LogData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void LogData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.LogData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  warning_.Clear();
  error_.Clear();
  fatal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string Info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_info();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.LogData.Info"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Warning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warning();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.LogData.Warning"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.LogData.Error"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Fatal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fatal();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.LogData.Fatal"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.LogData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string Info = 1;
  for (int i = 0, n = this->_internal_info_size(); i < n; i++) {
    const auto& s = this->_internal_info(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.LogData.Info");
    target = stream->WriteString(1, s, target);
  }

  // repeated string Warning = 2;
  for (int i = 0, n = this->_internal_warning_size(); i < n; i++) {
    const auto& s = this->_internal_warning(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.LogData.Warning");
    target = stream->WriteString(2, s, target);
  }

  // repeated string Error = 3;
  for (int i = 0, n = this->_internal_error_size(); i < n; i++) {
    const auto& s = this->_internal_error(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.LogData.Error");
    target = stream->WriteString(3, s, target);
  }

  // repeated string Fatal = 4;
  for (int i = 0, n = this->_internal_fatal_size(); i < n; i++) {
    const auto& s = this->_internal_fatal(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.LogData.Fatal");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.LogData)
  return target;
}

size_t LogData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.LogData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(info_.size());
  for (int i = 0, n = info_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      info_.Get(i));
  }

  // repeated string Warning = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(warning_.size());
  for (int i = 0, n = warning_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      warning_.Get(i));
  }

  // repeated string Error = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_.size());
  for (int i = 0, n = error_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_.Get(i));
  }

  // repeated string Fatal = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fatal_.size());
  for (int i = 0, n = fatal_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fatal_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.LogData)
  GOOGLE_DCHECK_NE(&from, this);
  const LogData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.LogData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.LogData)
    MergeFrom(*source);
  }
}

void LogData::MergeFrom(const LogData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.LogData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  warning_.MergeFrom(from.warning_);
  error_.MergeFrom(from.error_);
  fatal_.MergeFrom(from.fatal_);
}

void LogData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.LogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogData::CopyFrom(const LogData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.LogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogData::IsInitialized() const {
  return true;
}

void LogData::InternalSwap(LogData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
  warning_.InternalSwap(&other->warning_);
  error_.InternalSwap(&other->error_);
  fatal_.InternalSwap(&other->fatal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationData::_Internal {
 public:
  static const ::pulse::study::bind::multiplex_ventilation::LogData& log(const SimulationData* msg);
};

const ::pulse::study::bind::multiplex_ventilation::LogData&
SimulationData::_Internal::log(const SimulationData* msg) {
  return *msg->log_;
}
SimulationData::SimulationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patientcomparisons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.SimulationData)
}
SimulationData::SimulationData(const SimulationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      patientcomparisons_(from.patientcomparisons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputbasefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputbasefilename().empty()) {
    outputbasefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputbasefilename(), 
      GetArena());
  }
  if (from._internal_has_log()) {
    log_ = new ::pulse::study::bind::multiplex_ventilation::LogData(*from.log_);
  } else {
    log_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&achievedstabilization_) -
    reinterpret_cast<char*>(&id_)) + sizeof(achievedstabilization_));
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.SimulationData)
}

void SimulationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  outputbasefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&achievedstabilization_) -
      reinterpret_cast<char*>(&log_)) + sizeof(achievedstabilization_));
}

SimulationData::~SimulationData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.SimulationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  outputbasefilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
}

void SimulationData::ArenaDtor(void* object) {
  SimulationData* _this = reinterpret_cast< SimulationData* >(object);
  (void)_this;
}
void SimulationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationData& SimulationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void SimulationData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patientcomparisons_.Clear();
  outputbasefilename_.ClearToEmpty();
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&achievedstabilization_) -
      reinterpret_cast<char*>(&id_)) + sizeof(achievedstabilization_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 GroupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OutputBaseFilename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_outputbasefilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AchievedStabilization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          achievedstabilization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double StabilizationTime_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          stabilizationtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RespirationRate_Per_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          respirationrate_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double IERatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ieratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PIP_cmH2O = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pip_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PEEP_cmH2O = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          peep_cmh2o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FiO2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fio2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.study.bind.multiplex_ventilation.LogData Log = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.study.bind.multiplex_ventilation.PatientComparisonData PatientComparisons = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patientcomparisons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 GroupID = 2;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_groupid(), target);
  }

  // string OutputBaseFilename = 3;
  if (this->outputbasefilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputbasefilename().data(), static_cast<int>(this->_internal_outputbasefilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.SimulationData.OutputBaseFilename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outputbasefilename(), target);
  }

  // bool AchievedStabilization = 4;
  if (this->achievedstabilization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_achievedstabilization(), target);
  }

  // double StabilizationTime_s = 5;
  if (!(this->stabilizationtime_s() <= 0 && this->stabilizationtime_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_stabilizationtime_s(), target);
  }

  // double RespirationRate_Per_min = 6;
  if (!(this->respirationrate_per_min() <= 0 && this->respirationrate_per_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_respirationrate_per_min(), target);
  }

  // double IERatio = 7;
  if (!(this->ieratio() <= 0 && this->ieratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ieratio(), target);
  }

  // double PIP_cmH2O = 8;
  if (!(this->pip_cmh2o() <= 0 && this->pip_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pip_cmh2o(), target);
  }

  // double PEEP_cmH2O = 9;
  if (!(this->peep_cmh2o() <= 0 && this->peep_cmh2o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_peep_cmh2o(), target);
  }

  // double FiO2 = 10;
  if (!(this->fio2() <= 0 && this->fio2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_fio2(), target);
  }

  // .pulse.study.bind.multiplex_ventilation.LogData Log = 11;
  if (this->has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::log(this), target, stream);
  }

  // repeated .pulse.study.bind.multiplex_ventilation.PatientComparisonData PatientComparisons = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patientcomparisons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_patientcomparisons(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.SimulationData)
  return target;
}

size_t SimulationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.study.bind.multiplex_ventilation.PatientComparisonData PatientComparisons = 12;
  total_size += 1UL * this->_internal_patientcomparisons_size();
  for (const auto& msg : this->patientcomparisons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string OutputBaseFilename = 3;
  if (this->outputbasefilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputbasefilename());
  }

  // .pulse.study.bind.multiplex_ventilation.LogData Log = 11;
  if (this->has_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 GroupID = 2;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  // double StabilizationTime_s = 5;
  if (!(this->stabilizationtime_s() <= 0 && this->stabilizationtime_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double RespirationRate_Per_min = 6;
  if (!(this->respirationrate_per_min() <= 0 && this->respirationrate_per_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double IERatio = 7;
  if (!(this->ieratio() <= 0 && this->ieratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double PIP_cmH2O = 8;
  if (!(this->pip_cmh2o() <= 0 && this->pip_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double PEEP_cmH2O = 9;
  if (!(this->peep_cmh2o() <= 0 && this->peep_cmh2o() >= 0)) {
    total_size += 1 + 8;
  }

  // double FiO2 = 10;
  if (!(this->fio2() <= 0 && this->fio2() >= 0)) {
    total_size += 1 + 8;
  }

  // bool AchievedStabilization = 4;
  if (this->achievedstabilization() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.SimulationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.SimulationData)
    MergeFrom(*source);
  }
}

void SimulationData::MergeFrom(const SimulationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patientcomparisons_.MergeFrom(from.patientcomparisons_);
  if (from.outputbasefilename().size() > 0) {
    _internal_set_outputbasefilename(from._internal_outputbasefilename());
  }
  if (from.has_log()) {
    _internal_mutable_log()->::pulse::study::bind::multiplex_ventilation::LogData::MergeFrom(from._internal_log());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (!(from.stabilizationtime_s() <= 0 && from.stabilizationtime_s() >= 0)) {
    _internal_set_stabilizationtime_s(from._internal_stabilizationtime_s());
  }
  if (!(from.respirationrate_per_min() <= 0 && from.respirationrate_per_min() >= 0)) {
    _internal_set_respirationrate_per_min(from._internal_respirationrate_per_min());
  }
  if (!(from.ieratio() <= 0 && from.ieratio() >= 0)) {
    _internal_set_ieratio(from._internal_ieratio());
  }
  if (!(from.pip_cmh2o() <= 0 && from.pip_cmh2o() >= 0)) {
    _internal_set_pip_cmh2o(from._internal_pip_cmh2o());
  }
  if (!(from.peep_cmh2o() <= 0 && from.peep_cmh2o() >= 0)) {
    _internal_set_peep_cmh2o(from._internal_peep_cmh2o());
  }
  if (!(from.fio2() <= 0 && from.fio2() >= 0)) {
    _internal_set_fio2(from._internal_fio2());
  }
  if (from.achievedstabilization() != 0) {
    _internal_set_achievedstabilization(from._internal_achievedstabilization());
  }
}

void SimulationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationData::CopyFrom(const SimulationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.SimulationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationData::IsInitialized() const {
  return true;
}

void SimulationData::InternalSwap(SimulationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  patientcomparisons_.InternalSwap(&other->patientcomparisons_);
  outputbasefilename_.Swap(&other->outputbasefilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationData, achievedstabilization_)
      + sizeof(SimulationData::achievedstabilization_)
      - PROTOBUF_FIELD_OFFSET(SimulationData, log_)>(
          reinterpret_cast<char*>(&log_),
          reinterpret_cast<char*>(&other->log_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationListData::_Internal {
 public:
};

SimulationListData::SimulationListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  simulations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.study.bind.multiplex_ventilation.SimulationListData)
}
SimulationListData::SimulationListData(const SimulationListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      simulations_(from.simulations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputrootdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputrootdir().empty()) {
    outputrootdir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputrootdir(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.study.bind.multiplex_ventilation.SimulationListData)
}

void SimulationListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  outputrootdir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SimulationListData::~SimulationListData() {
  // @@protoc_insertion_point(destructor:pulse.study.bind.multiplex_ventilation.SimulationListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  outputrootdir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulationListData::ArenaDtor(void* object) {
  SimulationListData* _this = reinterpret_cast< SimulationListData* >(object);
  (void)_this;
}
void SimulationListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationListData& SimulationListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationListData_pulse_2fstudy_2fbind_2fMultiplexVentilation_2eproto.base);
  return *internal_default_instance();
}


void SimulationListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  simulations_.Clear();
  outputrootdir_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string OutputRootDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_outputrootdir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.study.bind.multiplex_ventilation.SimulationData Simulations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simulations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string OutputRootDir = 1;
  if (this->outputrootdir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputrootdir().data(), static_cast<int>(this->_internal_outputrootdir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.study.bind.multiplex_ventilation.SimulationListData.OutputRootDir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_outputrootdir(), target);
  }

  // repeated .pulse.study.bind.multiplex_ventilation.SimulationData Simulations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_simulations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_simulations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.study.bind.multiplex_ventilation.SimulationListData)
  return target;
}

size_t SimulationListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.study.bind.multiplex_ventilation.SimulationData Simulations = 2;
  total_size += 1UL * this->_internal_simulations_size();
  for (const auto& msg : this->simulations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string OutputRootDir = 1;
  if (this->outputrootdir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputrootdir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.study.bind.multiplex_ventilation.SimulationListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.study.bind.multiplex_ventilation.SimulationListData)
    MergeFrom(*source);
  }
}

void SimulationListData::MergeFrom(const SimulationListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  simulations_.MergeFrom(from.simulations_);
  if (from.outputrootdir().size() > 0) {
    _internal_set_outputrootdir(from._internal_outputrootdir());
  }
}

void SimulationListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationListData::CopyFrom(const SimulationListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.study.bind.multiplex_ventilation.SimulationListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationListData::IsInitialized() const {
  return true;
}

void SimulationListData::InternalSwap(SimulationListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  simulations_.InternalSwap(&other->simulations_);
  outputrootdir_.Swap(&other->outputrootdir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationListData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace multiplex_ventilation
}  // namespace bind
}  // namespace study
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::PatientStateData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::PatientStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::PatientStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::PatientStateListData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::PatientStateListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::PatientStateListData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::PatientComparisonData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::PatientComparisonData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::LogData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::LogData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::LogData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::SimulationData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::SimulationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::SimulationData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::study::bind::multiplex_ventilation::SimulationListData* Arena::CreateMaybeMessage< ::pulse::study::bind::multiplex_ventilation::SimulationListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::study::bind::multiplex_ventilation::SimulationListData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
