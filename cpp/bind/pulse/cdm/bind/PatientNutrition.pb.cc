// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientNutrition.proto

#include "pulse/cdm/bind/PatientNutrition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class NutritionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NutritionData> _instance;
} _NutritionData_default_instance_;
class MealDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MealData> _instance;
} _MealData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_MealData_default_instance_;
    new (ptr) ::pulse::cdm::bind::MealData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto}, {
      &scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_NutritionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::NutritionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto}, {
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, carbohydrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, carbohydratedigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, fat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, fatdigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, protein_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, proteindigestionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, calcium_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, sodium_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NutritionData, water_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MealData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MealData, nutrition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::MealData, elapsedtime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::NutritionData)},
  { 14, -1, sizeof(::pulse::cdm::bind::MealData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_NutritionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_MealData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%pulse/cdm/bind/PatientNutrition.proto\022"
  "\016pulse.cdm.bind\032\037pulse/cdm/bind/Properti"
  "es.proto\"\205\004\n\rNutritionData\0224\n\014Carbohydra"
  "te\030\001 \001(\0132\036.pulse.cdm.bind.ScalarMassData"
  "\022H\n\031CarbohydrateDigestionRate\030\002 \001(\0132%.pu"
  "lse.cdm.bind.ScalarMassPerTimeData\022+\n\003Fa"
  "t\030\003 \001(\0132\036.pulse.cdm.bind.ScalarMassData\022"
  "\?\n\020FatDigestionRate\030\004 \001(\0132%.pulse.cdm.bi"
  "nd.ScalarMassPerTimeData\022/\n\007Protein\030\005 \001("
  "\0132\036.pulse.cdm.bind.ScalarMassData\022C\n\024Pro"
  "teinDigestionRate\030\006 \001(\0132%.pulse.cdm.bind"
  ".ScalarMassPerTimeData\022/\n\007Calcium\030\007 \001(\0132"
  "\036.pulse.cdm.bind.ScalarMassData\022.\n\006Sodiu"
  "m\030\010 \001(\0132\036.pulse.cdm.bind.ScalarMassData\022"
  "/\n\005Water\030\t \001(\0132 .pulse.cdm.bind.ScalarVo"
  "lumeData\"q\n\010MealData\0220\n\tNutrition\030\001 \001(\0132"
  "\035.pulse.cdm.bind.NutritionData\0223\n\013Elapse"
  "dTime\030\002 \001(\0132\036.pulse.cdm.bind.ScalarTimeD"
  "ataB/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pu"
  "lse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_sccs[2] = {
  &scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,
  &scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto, "pulse/cdm/bind/PatientNutrition.proto", 780,
  &descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto, 2, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class NutritionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassData& carbohydrate(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& carbohydratedigestionrate(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& fat(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& fatdigestionrate(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& protein(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& proteindigestionrate(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& calcium(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& sodium(const NutritionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& water(const NutritionData* msg);
};

const ::pulse::cdm::bind::ScalarMassData&
NutritionData::_Internal::carbohydrate(const NutritionData* msg) {
  return *msg->carbohydrate_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
NutritionData::_Internal::carbohydratedigestionrate(const NutritionData* msg) {
  return *msg->carbohydratedigestionrate_;
}
const ::pulse::cdm::bind::ScalarMassData&
NutritionData::_Internal::fat(const NutritionData* msg) {
  return *msg->fat_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
NutritionData::_Internal::fatdigestionrate(const NutritionData* msg) {
  return *msg->fatdigestionrate_;
}
const ::pulse::cdm::bind::ScalarMassData&
NutritionData::_Internal::protein(const NutritionData* msg) {
  return *msg->protein_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
NutritionData::_Internal::proteindigestionrate(const NutritionData* msg) {
  return *msg->proteindigestionrate_;
}
const ::pulse::cdm::bind::ScalarMassData&
NutritionData::_Internal::calcium(const NutritionData* msg) {
  return *msg->calcium_;
}
const ::pulse::cdm::bind::ScalarMassData&
NutritionData::_Internal::sodium(const NutritionData* msg) {
  return *msg->sodium_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
NutritionData::_Internal::water(const NutritionData* msg) {
  return *msg->water_;
}
void NutritionData::clear_carbohydrate() {
  if (GetArena() == nullptr && carbohydrate_ != nullptr) {
    delete carbohydrate_;
  }
  carbohydrate_ = nullptr;
}
void NutritionData::clear_carbohydratedigestionrate() {
  if (GetArena() == nullptr && carbohydratedigestionrate_ != nullptr) {
    delete carbohydratedigestionrate_;
  }
  carbohydratedigestionrate_ = nullptr;
}
void NutritionData::clear_fat() {
  if (GetArena() == nullptr && fat_ != nullptr) {
    delete fat_;
  }
  fat_ = nullptr;
}
void NutritionData::clear_fatdigestionrate() {
  if (GetArena() == nullptr && fatdigestionrate_ != nullptr) {
    delete fatdigestionrate_;
  }
  fatdigestionrate_ = nullptr;
}
void NutritionData::clear_protein() {
  if (GetArena() == nullptr && protein_ != nullptr) {
    delete protein_;
  }
  protein_ = nullptr;
}
void NutritionData::clear_proteindigestionrate() {
  if (GetArena() == nullptr && proteindigestionrate_ != nullptr) {
    delete proteindigestionrate_;
  }
  proteindigestionrate_ = nullptr;
}
void NutritionData::clear_calcium() {
  if (GetArena() == nullptr && calcium_ != nullptr) {
    delete calcium_;
  }
  calcium_ = nullptr;
}
void NutritionData::clear_sodium() {
  if (GetArena() == nullptr && sodium_ != nullptr) {
    delete sodium_;
  }
  sodium_ = nullptr;
}
void NutritionData::clear_water() {
  if (GetArena() == nullptr && water_ != nullptr) {
    delete water_;
  }
  water_ = nullptr;
}
NutritionData::NutritionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.NutritionData)
}
NutritionData::NutritionData(const NutritionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_carbohydrate()) {
    carbohydrate_ = new ::pulse::cdm::bind::ScalarMassData(*from.carbohydrate_);
  } else {
    carbohydrate_ = nullptr;
  }
  if (from._internal_has_carbohydratedigestionrate()) {
    carbohydratedigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.carbohydratedigestionrate_);
  } else {
    carbohydratedigestionrate_ = nullptr;
  }
  if (from._internal_has_fat()) {
    fat_ = new ::pulse::cdm::bind::ScalarMassData(*from.fat_);
  } else {
    fat_ = nullptr;
  }
  if (from._internal_has_fatdigestionrate()) {
    fatdigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.fatdigestionrate_);
  } else {
    fatdigestionrate_ = nullptr;
  }
  if (from._internal_has_protein()) {
    protein_ = new ::pulse::cdm::bind::ScalarMassData(*from.protein_);
  } else {
    protein_ = nullptr;
  }
  if (from._internal_has_proteindigestionrate()) {
    proteindigestionrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.proteindigestionrate_);
  } else {
    proteindigestionrate_ = nullptr;
  }
  if (from._internal_has_calcium()) {
    calcium_ = new ::pulse::cdm::bind::ScalarMassData(*from.calcium_);
  } else {
    calcium_ = nullptr;
  }
  if (from._internal_has_sodium()) {
    sodium_ = new ::pulse::cdm::bind::ScalarMassData(*from.sodium_);
  } else {
    sodium_ = nullptr;
  }
  if (from._internal_has_water()) {
    water_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.water_);
  } else {
    water_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.NutritionData)
}

void NutritionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&carbohydrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&water_) -
      reinterpret_cast<char*>(&carbohydrate_)) + sizeof(water_));
}

NutritionData::~NutritionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.NutritionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NutritionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete carbohydrate_;
  if (this != internal_default_instance()) delete carbohydratedigestionrate_;
  if (this != internal_default_instance()) delete fat_;
  if (this != internal_default_instance()) delete fatdigestionrate_;
  if (this != internal_default_instance()) delete protein_;
  if (this != internal_default_instance()) delete proteindigestionrate_;
  if (this != internal_default_instance()) delete calcium_;
  if (this != internal_default_instance()) delete sodium_;
  if (this != internal_default_instance()) delete water_;
}

void NutritionData::ArenaDtor(void* object) {
  NutritionData* _this = reinterpret_cast< NutritionData* >(object);
  (void)_this;
}
void NutritionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NutritionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NutritionData& NutritionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base);
  return *internal_default_instance();
}


void NutritionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.NutritionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && carbohydrate_ != nullptr) {
    delete carbohydrate_;
  }
  carbohydrate_ = nullptr;
  if (GetArena() == nullptr && carbohydratedigestionrate_ != nullptr) {
    delete carbohydratedigestionrate_;
  }
  carbohydratedigestionrate_ = nullptr;
  if (GetArena() == nullptr && fat_ != nullptr) {
    delete fat_;
  }
  fat_ = nullptr;
  if (GetArena() == nullptr && fatdigestionrate_ != nullptr) {
    delete fatdigestionrate_;
  }
  fatdigestionrate_ = nullptr;
  if (GetArena() == nullptr && protein_ != nullptr) {
    delete protein_;
  }
  protein_ = nullptr;
  if (GetArena() == nullptr && proteindigestionrate_ != nullptr) {
    delete proteindigestionrate_;
  }
  proteindigestionrate_ = nullptr;
  if (GetArena() == nullptr && calcium_ != nullptr) {
    delete calcium_;
  }
  calcium_ = nullptr;
  if (GetArena() == nullptr && sodium_ != nullptr) {
    delete sodium_;
  }
  sodium_ = nullptr;
  if (GetArena() == nullptr && water_ != nullptr) {
    delete water_;
  }
  water_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NutritionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarMassData Carbohydrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbohydrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData CarbohydrateDigestionRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbohydratedigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Fat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData FatDigestionRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fatdigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Protein = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_protein(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData ProteinDigestionRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proteindigestionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Calcium = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_calcium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Sodium = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sodium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Water = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_water(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NutritionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.NutritionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassData Carbohydrate = 1;
  if (this->has_carbohydrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::carbohydrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData CarbohydrateDigestionRate = 2;
  if (this->has_carbohydratedigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::carbohydratedigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Fat = 3;
  if (this->has_fat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fat(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData FatDigestionRate = 4;
  if (this->has_fatdigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fatdigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Protein = 5;
  if (this->has_protein()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::protein(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ProteinDigestionRate = 6;
  if (this->has_proteindigestionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::proteindigestionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Calcium = 7;
  if (this->has_calcium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::calcium(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Sodium = 8;
  if (this->has_sodium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sodium(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Water = 9;
  if (this->has_water()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::water(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.NutritionData)
  return target;
}

size_t NutritionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.NutritionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassData Carbohydrate = 1;
  if (this->has_carbohydrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbohydrate_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData CarbohydrateDigestionRate = 2;
  if (this->has_carbohydratedigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbohydratedigestionrate_);
  }

  // .pulse.cdm.bind.ScalarMassData Fat = 3;
  if (this->has_fat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fat_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData FatDigestionRate = 4;
  if (this->has_fatdigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fatdigestionrate_);
  }

  // .pulse.cdm.bind.ScalarMassData Protein = 5;
  if (this->has_protein()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protein_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData ProteinDigestionRate = 6;
  if (this->has_proteindigestionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proteindigestionrate_);
  }

  // .pulse.cdm.bind.ScalarMassData Calcium = 7;
  if (this->has_calcium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calcium_);
  }

  // .pulse.cdm.bind.ScalarMassData Sodium = 8;
  if (this->has_sodium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sodium_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Water = 9;
  if (this->has_water()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *water_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NutritionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.NutritionData)
  GOOGLE_DCHECK_NE(&from, this);
  const NutritionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NutritionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.NutritionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.NutritionData)
    MergeFrom(*source);
  }
}

void NutritionData::MergeFrom(const NutritionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.NutritionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_carbohydrate()) {
    _internal_mutable_carbohydrate()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_carbohydrate());
  }
  if (from.has_carbohydratedigestionrate()) {
    _internal_mutable_carbohydratedigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_carbohydratedigestionrate());
  }
  if (from.has_fat()) {
    _internal_mutable_fat()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_fat());
  }
  if (from.has_fatdigestionrate()) {
    _internal_mutable_fatdigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_fatdigestionrate());
  }
  if (from.has_protein()) {
    _internal_mutable_protein()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_protein());
  }
  if (from.has_proteindigestionrate()) {
    _internal_mutable_proteindigestionrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_proteindigestionrate());
  }
  if (from.has_calcium()) {
    _internal_mutable_calcium()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_calcium());
  }
  if (from.has_sodium()) {
    _internal_mutable_sodium()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_sodium());
  }
  if (from.has_water()) {
    _internal_mutable_water()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_water());
  }
}

void NutritionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.NutritionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NutritionData::CopyFrom(const NutritionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.NutritionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NutritionData::IsInitialized() const {
  return true;
}

void NutritionData::InternalSwap(NutritionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NutritionData, water_)
      + sizeof(NutritionData::water_)
      - PROTOBUF_FIELD_OFFSET(NutritionData, carbohydrate_)>(
          reinterpret_cast<char*>(&carbohydrate_),
          reinterpret_cast<char*>(&other->carbohydrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NutritionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MealData::_Internal {
 public:
  static const ::pulse::cdm::bind::NutritionData& nutrition(const MealData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& elapsedtime(const MealData* msg);
};

const ::pulse::cdm::bind::NutritionData&
MealData::_Internal::nutrition(const MealData* msg) {
  return *msg->nutrition_;
}
const ::pulse::cdm::bind::ScalarTimeData&
MealData::_Internal::elapsedtime(const MealData* msg) {
  return *msg->elapsedtime_;
}
void MealData::clear_elapsedtime() {
  if (GetArena() == nullptr && elapsedtime_ != nullptr) {
    delete elapsedtime_;
  }
  elapsedtime_ = nullptr;
}
MealData::MealData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.MealData)
}
MealData::MealData(const MealData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nutrition()) {
    nutrition_ = new ::pulse::cdm::bind::NutritionData(*from.nutrition_);
  } else {
    nutrition_ = nullptr;
  }
  if (from._internal_has_elapsedtime()) {
    elapsedtime_ = new ::pulse::cdm::bind::ScalarTimeData(*from.elapsedtime_);
  } else {
    elapsedtime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.MealData)
}

void MealData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nutrition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&elapsedtime_) -
      reinterpret_cast<char*>(&nutrition_)) + sizeof(elapsedtime_));
}

MealData::~MealData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.MealData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MealData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nutrition_;
  if (this != internal_default_instance()) delete elapsedtime_;
}

void MealData::ArenaDtor(void* object) {
  MealData* _this = reinterpret_cast< MealData* >(object);
  (void)_this;
}
void MealData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MealData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MealData& MealData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base);
  return *internal_default_instance();
}


void MealData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.MealData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && nutrition_ != nullptr) {
    delete nutrition_;
  }
  nutrition_ = nullptr;
  if (GetArena() == nullptr && elapsedtime_ != nullptr) {
    delete elapsedtime_;
  }
  elapsedtime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MealData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.NutritionData Nutrition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nutrition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData ElapsedTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_elapsedtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MealData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.MealData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.NutritionData Nutrition = 1;
  if (this->has_nutrition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nutrition(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData ElapsedTime = 2;
  if (this->has_elapsedtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::elapsedtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.MealData)
  return target;
}

size_t MealData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.MealData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.NutritionData Nutrition = 1;
  if (this->has_nutrition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nutrition_);
  }

  // .pulse.cdm.bind.ScalarTimeData ElapsedTime = 2;
  if (this->has_elapsedtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elapsedtime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MealData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.MealData)
  GOOGLE_DCHECK_NE(&from, this);
  const MealData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MealData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.MealData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.MealData)
    MergeFrom(*source);
  }
}

void MealData::MergeFrom(const MealData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.MealData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nutrition()) {
    _internal_mutable_nutrition()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_nutrition());
  }
  if (from.has_elapsedtime()) {
    _internal_mutable_elapsedtime()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_elapsedtime());
  }
}

void MealData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.MealData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MealData::CopyFrom(const MealData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.MealData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MealData::IsInitialized() const {
  return true;
}

void MealData::InternalSwap(MealData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MealData, elapsedtime_)
      + sizeof(MealData::elapsedtime_)
      - PROTOBUF_FIELD_OFFSET(MealData, nutrition_)>(
          reinterpret_cast<char*>(&nutrition_),
          reinterpret_cast<char*>(&other->nutrition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MealData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::NutritionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::NutritionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::NutritionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::MealData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::MealData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::MealData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
