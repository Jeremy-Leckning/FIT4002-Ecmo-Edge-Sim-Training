// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/SubstanceQuantity.proto

#include "pulse/cdm/bind/SubstanceQuantity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class SubstanceQuantityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceQuantityData> _instance;
} _SubstanceQuantityData_default_instance_;
class GasSubstanceQuantityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasSubstanceQuantityData> _instance;
} _GasSubstanceQuantityData_default_instance_;
class LiquidSubstanceQuantityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidSubstanceQuantityData> _instance;
} _LiquidSubstanceQuantityData_default_instance_;
class TissueSubstanceQuantityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TissueSubstanceQuantityData> _instance;
} _TissueSubstanceQuantityData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasSubstanceQuantityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasSubstanceQuantityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto}, {
      &scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidSubstanceQuantityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidSubstanceQuantityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto}, {
      &scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SubstanceQuantityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SubstanceQuantityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto}, {}};

static void InitDefaultsscc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TissueSubstanceQuantityData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TissueSubstanceQuantityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto}, {
      &scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceQuantityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SubstanceQuantityData, substance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasSubstanceQuantityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasSubstanceQuantityData, substancequantity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasSubstanceQuantityData, partialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasSubstanceQuantityData, volume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasSubstanceQuantityData, volumefraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, substancequantity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, concentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, mass_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, masscleared_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, massdeposited_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, massexcreted_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, molarity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, partialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidSubstanceQuantityData, saturation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, substancequantity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, tissueconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, tissuemolarity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, extravascularconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, extravascularmolarity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, extravascularpartialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSubstanceQuantityData, extravascularsaturation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::SubstanceQuantityData)},
  { 6, -1, sizeof(::pulse::cdm::bind::GasSubstanceQuantityData)},
  { 15, -1, sizeof(::pulse::cdm::bind::LiquidSubstanceQuantityData)},
  { 29, -1, sizeof(::pulse::cdm::bind::TissueSubstanceQuantityData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SubstanceQuantityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasSubstanceQuantityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidSubstanceQuantityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TissueSubstanceQuantityData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pulse/cdm/bind/SubstanceQuantity.proto"
  "\022\016pulse.cdm.bind\032\037pulse/cdm/bind/Propert"
  "ies.proto\"*\n\025SubstanceQuantityData\022\021\n\tSu"
  "bstance\030\001 \001(\t\"\203\002\n\030GasSubstanceQuantityDa"
  "ta\022@\n\021SubstanceQuantity\030\001 \001(\0132%.pulse.cd"
  "m.bind.SubstanceQuantityData\022;\n\017PartialP"
  "ressure\030\002 \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\0220\n\006Volume\030\003 \001(\0132 .pulse.cdm.bi"
  "nd.ScalarVolumeData\0226\n\016VolumeFraction\030\004 "
  "\001(\0132\036.pulse.cdm.bind.Scalar0To1Data\"\235\004\n\033"
  "LiquidSubstanceQuantityData\022@\n\021Substance"
  "Quantity\030\001 \001(\0132%.pulse.cdm.bind.Substanc"
  "eQuantityData\022>\n\rConcentration\030\002 \001(\0132\'.p"
  "ulse.cdm.bind.ScalarMassPerVolumeData\022,\n"
  "\004Mass\030\003 \001(\0132\036.pulse.cdm.bind.ScalarMassD"
  "ata\0223\n\013MassCleared\030\004 \001(\0132\036.pulse.cdm.bin"
  "d.ScalarMassData\0225\n\rMassDeposited\030\005 \001(\0132"
  "\036.pulse.cdm.bind.ScalarMassData\0224\n\014MassE"
  "xcreted\030\006 \001(\0132\036.pulse.cdm.bind.ScalarMas"
  "sData\022;\n\010Molarity\030\007 \001(\0132).pulse.cdm.bind"
  ".ScalarAmountPerVolumeData\022;\n\017PartialPre"
  "ssure\030\010 \001(\0132\".pulse.cdm.bind.ScalarPress"
  "ureData\0222\n\nSaturation\030\t \001(\0132\036.pulse.cdm."
  "bind.Scalar0To1Data\"\212\004\n\033TissueSubstanceQ"
  "uantityData\022@\n\021SubstanceQuantity\030\001 \001(\0132%"
  ".pulse.cdm.bind.SubstanceQuantityData\022D\n"
  "\023TissueConcentration\030\002 \001(\0132\'.pulse.cdm.b"
  "ind.ScalarMassPerVolumeData\022A\n\016TissueMol"
  "arity\030\003 \001(\0132).pulse.cdm.bind.ScalarAmoun"
  "tPerVolumeData\022K\n\032ExtravascularConcentra"
  "tion\030\004 \001(\0132\'.pulse.cdm.bind.ScalarMassPe"
  "rVolumeData\022H\n\025ExtravascularMolarity\030\005 \001"
  "(\0132).pulse.cdm.bind.ScalarAmountPerVolum"
  "eData\022H\n\034ExtravascularPartialPressure\030\006 "
  "\001(\0132\".pulse.cdm.bind.ScalarPressureData\022"
  "\?\n\027ExtravascularSaturation\030\007 \001(\0132\036.pulse"
  ".cdm.bind.Scalar0To1DataB/\n\032com.kitware."
  "pulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_sccs[4] = {
  &scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
  &scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
  &scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
  &scc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto, "pulse/cdm/bind/SubstanceQuantity.proto", 1521,
  &descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto, 4, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class SubstanceQuantityData::_Internal {
 public:
};

SubstanceQuantityData::SubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SubstanceQuantityData)
}
SubstanceQuantityData::SubstanceQuantityData(const SubstanceQuantityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_substance().empty()) {
    substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_substance(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SubstanceQuantityData)
}

void SubstanceQuantityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  substance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubstanceQuantityData::~SubstanceQuantityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SubstanceQuantityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubstanceQuantityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  substance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubstanceQuantityData::ArenaDtor(void* object) {
  SubstanceQuantityData* _this = reinterpret_cast< SubstanceQuantityData* >(object);
  (void)_this;
}
void SubstanceQuantityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubstanceQuantityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceQuantityData& SubstanceQuantityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  return *internal_default_instance();
}


void SubstanceQuantityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substance_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubstanceQuantityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Substance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_substance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.SubstanceQuantityData.Substance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceQuantityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Substance = 1;
  if (this->substance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_substance().data(), static_cast<int>(this->_internal_substance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.SubstanceQuantityData.Substance");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_substance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SubstanceQuantityData)
  return target;
}

size_t SubstanceQuantityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SubstanceQuantityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Substance = 1;
  if (this->substance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_substance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceQuantityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceQuantityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceQuantityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SubstanceQuantityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SubstanceQuantityData)
    MergeFrom(*source);
  }
}

void SubstanceQuantityData::MergeFrom(const SubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.substance().size() > 0) {
    _internal_set_substance(from._internal_substance());
  }
}

void SubstanceQuantityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceQuantityData::CopyFrom(const SubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceQuantityData::IsInitialized() const {
  return true;
}

void SubstanceQuantityData::InternalSwap(SubstanceQuantityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substance_.Swap(&other->substance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceQuantityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasSubstanceQuantityData::_Internal {
 public:
  static const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity(const GasSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& partialpressure(const GasSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& volume(const GasSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& volumefraction(const GasSubstanceQuantityData* msg);
};

const ::pulse::cdm::bind::SubstanceQuantityData&
GasSubstanceQuantityData::_Internal::substancequantity(const GasSubstanceQuantityData* msg) {
  return *msg->substancequantity_;
}
const ::pulse::cdm::bind::ScalarPressureData&
GasSubstanceQuantityData::_Internal::partialpressure(const GasSubstanceQuantityData* msg) {
  return *msg->partialpressure_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
GasSubstanceQuantityData::_Internal::volume(const GasSubstanceQuantityData* msg) {
  return *msg->volume_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
GasSubstanceQuantityData::_Internal::volumefraction(const GasSubstanceQuantityData* msg) {
  return *msg->volumefraction_;
}
void GasSubstanceQuantityData::clear_partialpressure() {
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
}
void GasSubstanceQuantityData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
void GasSubstanceQuantityData::clear_volumefraction() {
  if (GetArena() == nullptr && volumefraction_ != nullptr) {
    delete volumefraction_;
  }
  volumefraction_ = nullptr;
}
GasSubstanceQuantityData::GasSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasSubstanceQuantityData)
}
GasSubstanceQuantityData::GasSubstanceQuantityData(const GasSubstanceQuantityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_substancequantity()) {
    substancequantity_ = new ::pulse::cdm::bind::SubstanceQuantityData(*from.substancequantity_);
  } else {
    substancequantity_ = nullptr;
  }
  if (from._internal_has_partialpressure()) {
    partialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.partialpressure_);
  } else {
    partialpressure_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  if (from._internal_has_volumefraction()) {
    volumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.volumefraction_);
  } else {
    volumefraction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasSubstanceQuantityData)
}

void GasSubstanceQuantityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&substancequantity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volumefraction_) -
      reinterpret_cast<char*>(&substancequantity_)) + sizeof(volumefraction_));
}

GasSubstanceQuantityData::~GasSubstanceQuantityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasSubstanceQuantityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasSubstanceQuantityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete substancequantity_;
  if (this != internal_default_instance()) delete partialpressure_;
  if (this != internal_default_instance()) delete volume_;
  if (this != internal_default_instance()) delete volumefraction_;
}

void GasSubstanceQuantityData::ArenaDtor(void* object) {
  GasSubstanceQuantityData* _this = reinterpret_cast< GasSubstanceQuantityData* >(object);
  (void)_this;
}
void GasSubstanceQuantityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasSubstanceQuantityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasSubstanceQuantityData& GasSubstanceQuantityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  return *internal_default_instance();
}


void GasSubstanceQuantityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  if (GetArena() == nullptr && volumefraction_ != nullptr) {
    delete volumefraction_;
  }
  volumefraction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasSubstanceQuantityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PartialPressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data VolumeFraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasSubstanceQuantityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::substancequantity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 2;
  if (this->has_partialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 3;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::volume(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFraction = 4;
  if (this->has_volumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volumefraction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasSubstanceQuantityData)
  return target;
}

size_t GasSubstanceQuantityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasSubstanceQuantityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *substancequantity_);
  }

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 2;
  if (this->has_partialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partialpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 3;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFraction = 4;
  if (this->has_volumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volumefraction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasSubstanceQuantityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasSubstanceQuantityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasSubstanceQuantityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasSubstanceQuantityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasSubstanceQuantityData)
    MergeFrom(*source);
  }
}

void GasSubstanceQuantityData::MergeFrom(const GasSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_substancequantity()) {
    _internal_mutable_substancequantity()->::pulse::cdm::bind::SubstanceQuantityData::MergeFrom(from._internal_substancequantity());
  }
  if (from.has_partialpressure()) {
    _internal_mutable_partialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_partialpressure());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_volume());
  }
  if (from.has_volumefraction()) {
    _internal_mutable_volumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_volumefraction());
  }
}

void GasSubstanceQuantityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasSubstanceQuantityData::CopyFrom(const GasSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasSubstanceQuantityData::IsInitialized() const {
  return true;
}

void GasSubstanceQuantityData::InternalSwap(GasSubstanceQuantityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GasSubstanceQuantityData, volumefraction_)
      + sizeof(GasSubstanceQuantityData::volumefraction_)
      - PROTOBUF_FIELD_OFFSET(GasSubstanceQuantityData, substancequantity_)>(
          reinterpret_cast<char*>(&substancequantity_),
          reinterpret_cast<char*>(&other->substancequantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GasSubstanceQuantityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidSubstanceQuantityData::_Internal {
 public:
  static const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& mass(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& masscleared(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& massdeposited(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& massexcreted(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& molarity(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& partialpressure(const LiquidSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& saturation(const LiquidSubstanceQuantityData* msg);
};

const ::pulse::cdm::bind::SubstanceQuantityData&
LiquidSubstanceQuantityData::_Internal::substancequantity(const LiquidSubstanceQuantityData* msg) {
  return *msg->substancequantity_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
LiquidSubstanceQuantityData::_Internal::concentration(const LiquidSubstanceQuantityData* msg) {
  return *msg->concentration_;
}
const ::pulse::cdm::bind::ScalarMassData&
LiquidSubstanceQuantityData::_Internal::mass(const LiquidSubstanceQuantityData* msg) {
  return *msg->mass_;
}
const ::pulse::cdm::bind::ScalarMassData&
LiquidSubstanceQuantityData::_Internal::masscleared(const LiquidSubstanceQuantityData* msg) {
  return *msg->masscleared_;
}
const ::pulse::cdm::bind::ScalarMassData&
LiquidSubstanceQuantityData::_Internal::massdeposited(const LiquidSubstanceQuantityData* msg) {
  return *msg->massdeposited_;
}
const ::pulse::cdm::bind::ScalarMassData&
LiquidSubstanceQuantityData::_Internal::massexcreted(const LiquidSubstanceQuantityData* msg) {
  return *msg->massexcreted_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
LiquidSubstanceQuantityData::_Internal::molarity(const LiquidSubstanceQuantityData* msg) {
  return *msg->molarity_;
}
const ::pulse::cdm::bind::ScalarPressureData&
LiquidSubstanceQuantityData::_Internal::partialpressure(const LiquidSubstanceQuantityData* msg) {
  return *msg->partialpressure_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LiquidSubstanceQuantityData::_Internal::saturation(const LiquidSubstanceQuantityData* msg) {
  return *msg->saturation_;
}
void LiquidSubstanceQuantityData::clear_concentration() {
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_mass() {
  if (GetArena() == nullptr && mass_ != nullptr) {
    delete mass_;
  }
  mass_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_masscleared() {
  if (GetArena() == nullptr && masscleared_ != nullptr) {
    delete masscleared_;
  }
  masscleared_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_massdeposited() {
  if (GetArena() == nullptr && massdeposited_ != nullptr) {
    delete massdeposited_;
  }
  massdeposited_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_massexcreted() {
  if (GetArena() == nullptr && massexcreted_ != nullptr) {
    delete massexcreted_;
  }
  massexcreted_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_molarity() {
  if (GetArena() == nullptr && molarity_ != nullptr) {
    delete molarity_;
  }
  molarity_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_partialpressure() {
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
}
void LiquidSubstanceQuantityData::clear_saturation() {
  if (GetArena() == nullptr && saturation_ != nullptr) {
    delete saturation_;
  }
  saturation_ = nullptr;
}
LiquidSubstanceQuantityData::LiquidSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidSubstanceQuantityData)
}
LiquidSubstanceQuantityData::LiquidSubstanceQuantityData(const LiquidSubstanceQuantityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_substancequantity()) {
    substancequantity_ = new ::pulse::cdm::bind::SubstanceQuantityData(*from.substancequantity_);
  } else {
    substancequantity_ = nullptr;
  }
  if (from._internal_has_concentration()) {
    concentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  if (from._internal_has_mass()) {
    mass_ = new ::pulse::cdm::bind::ScalarMassData(*from.mass_);
  } else {
    mass_ = nullptr;
  }
  if (from._internal_has_masscleared()) {
    masscleared_ = new ::pulse::cdm::bind::ScalarMassData(*from.masscleared_);
  } else {
    masscleared_ = nullptr;
  }
  if (from._internal_has_massdeposited()) {
    massdeposited_ = new ::pulse::cdm::bind::ScalarMassData(*from.massdeposited_);
  } else {
    massdeposited_ = nullptr;
  }
  if (from._internal_has_massexcreted()) {
    massexcreted_ = new ::pulse::cdm::bind::ScalarMassData(*from.massexcreted_);
  } else {
    massexcreted_ = nullptr;
  }
  if (from._internal_has_molarity()) {
    molarity_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.molarity_);
  } else {
    molarity_ = nullptr;
  }
  if (from._internal_has_partialpressure()) {
    partialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.partialpressure_);
  } else {
    partialpressure_ = nullptr;
  }
  if (from._internal_has_saturation()) {
    saturation_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.saturation_);
  } else {
    saturation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidSubstanceQuantityData)
}

void LiquidSubstanceQuantityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&substancequantity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&saturation_) -
      reinterpret_cast<char*>(&substancequantity_)) + sizeof(saturation_));
}

LiquidSubstanceQuantityData::~LiquidSubstanceQuantityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidSubstanceQuantityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidSubstanceQuantityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete substancequantity_;
  if (this != internal_default_instance()) delete concentration_;
  if (this != internal_default_instance()) delete mass_;
  if (this != internal_default_instance()) delete masscleared_;
  if (this != internal_default_instance()) delete massdeposited_;
  if (this != internal_default_instance()) delete massexcreted_;
  if (this != internal_default_instance()) delete molarity_;
  if (this != internal_default_instance()) delete partialpressure_;
  if (this != internal_default_instance()) delete saturation_;
}

void LiquidSubstanceQuantityData::ArenaDtor(void* object) {
  LiquidSubstanceQuantityData* _this = reinterpret_cast< LiquidSubstanceQuantityData* >(object);
  (void)_this;
}
void LiquidSubstanceQuantityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidSubstanceQuantityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidSubstanceQuantityData& LiquidSubstanceQuantityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  return *internal_default_instance();
}


void LiquidSubstanceQuantityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
  if (GetArena() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  if (GetArena() == nullptr && mass_ != nullptr) {
    delete mass_;
  }
  mass_ = nullptr;
  if (GetArena() == nullptr && masscleared_ != nullptr) {
    delete masscleared_;
  }
  masscleared_ = nullptr;
  if (GetArena() == nullptr && massdeposited_ != nullptr) {
    delete massdeposited_;
  }
  massdeposited_ = nullptr;
  if (GetArena() == nullptr && massexcreted_ != nullptr) {
    delete massexcreted_;
  }
  massexcreted_ = nullptr;
  if (GetArena() == nullptr && molarity_ != nullptr) {
    delete molarity_;
  }
  molarity_ = nullptr;
  if (GetArena() == nullptr && partialpressure_ != nullptr) {
    delete partialpressure_;
  }
  partialpressure_ = nullptr;
  if (GetArena() == nullptr && saturation_ != nullptr) {
    delete saturation_;
  }
  saturation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidSubstanceQuantityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Mass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassCleared = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_masscleared(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassDeposited = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_massdeposited(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData MassExcreted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_massexcreted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData Molarity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_molarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PartialPressure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_partialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Saturation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_saturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidSubstanceQuantityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::substancequantity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::concentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Mass = 3;
  if (this->has_mass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mass(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassCleared = 4;
  if (this->has_masscleared()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::masscleared(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassDeposited = 5;
  if (this->has_massdeposited()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::massdeposited(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData MassExcreted = 6;
  if (this->has_massexcreted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::massexcreted(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Molarity = 7;
  if (this->has_molarity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::molarity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 8;
  if (this->has_partialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::partialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Saturation = 9;
  if (this->has_saturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::saturation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidSubstanceQuantityData)
  return target;
}

size_t LiquidSubstanceQuantityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *substancequantity_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 2;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  // .pulse.cdm.bind.ScalarMassData Mass = 3;
  if (this->has_mass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mass_);
  }

  // .pulse.cdm.bind.ScalarMassData MassCleared = 4;
  if (this->has_masscleared()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *masscleared_);
  }

  // .pulse.cdm.bind.ScalarMassData MassDeposited = 5;
  if (this->has_massdeposited()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *massdeposited_);
  }

  // .pulse.cdm.bind.ScalarMassData MassExcreted = 6;
  if (this->has_massexcreted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *massexcreted_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Molarity = 7;
  if (this->has_molarity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *molarity_);
  }

  // .pulse.cdm.bind.ScalarPressureData PartialPressure = 8;
  if (this->has_partialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partialpressure_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Saturation = 9;
  if (this->has_saturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saturation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidSubstanceQuantityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidSubstanceQuantityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidSubstanceQuantityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidSubstanceQuantityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidSubstanceQuantityData)
    MergeFrom(*source);
  }
}

void LiquidSubstanceQuantityData::MergeFrom(const LiquidSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_substancequantity()) {
    _internal_mutable_substancequantity()->::pulse::cdm::bind::SubstanceQuantityData::MergeFrom(from._internal_substancequantity());
  }
  if (from.has_concentration()) {
    _internal_mutable_concentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_concentration());
  }
  if (from.has_mass()) {
    _internal_mutable_mass()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_mass());
  }
  if (from.has_masscleared()) {
    _internal_mutable_masscleared()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_masscleared());
  }
  if (from.has_massdeposited()) {
    _internal_mutable_massdeposited()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_massdeposited());
  }
  if (from.has_massexcreted()) {
    _internal_mutable_massexcreted()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_massexcreted());
  }
  if (from.has_molarity()) {
    _internal_mutable_molarity()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_molarity());
  }
  if (from.has_partialpressure()) {
    _internal_mutable_partialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_partialpressure());
  }
  if (from.has_saturation()) {
    _internal_mutable_saturation()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_saturation());
  }
}

void LiquidSubstanceQuantityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidSubstanceQuantityData::CopyFrom(const LiquidSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidSubstanceQuantityData::IsInitialized() const {
  return true;
}

void LiquidSubstanceQuantityData::InternalSwap(LiquidSubstanceQuantityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidSubstanceQuantityData, saturation_)
      + sizeof(LiquidSubstanceQuantityData::saturation_)
      - PROTOBUF_FIELD_OFFSET(LiquidSubstanceQuantityData, substancequantity_)>(
          reinterpret_cast<char*>(&substancequantity_),
          reinterpret_cast<char*>(&other->substancequantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidSubstanceQuantityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TissueSubstanceQuantityData::_Internal {
 public:
  static const ::pulse::cdm::bind::SubstanceQuantityData& substancequantity(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& tissueconcentration(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& tissuemolarity(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& extravascularconcentration(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& extravascularmolarity(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& extravascularpartialpressure(const TissueSubstanceQuantityData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& extravascularsaturation(const TissueSubstanceQuantityData* msg);
};

const ::pulse::cdm::bind::SubstanceQuantityData&
TissueSubstanceQuantityData::_Internal::substancequantity(const TissueSubstanceQuantityData* msg) {
  return *msg->substancequantity_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
TissueSubstanceQuantityData::_Internal::tissueconcentration(const TissueSubstanceQuantityData* msg) {
  return *msg->tissueconcentration_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
TissueSubstanceQuantityData::_Internal::tissuemolarity(const TissueSubstanceQuantityData* msg) {
  return *msg->tissuemolarity_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
TissueSubstanceQuantityData::_Internal::extravascularconcentration(const TissueSubstanceQuantityData* msg) {
  return *msg->extravascularconcentration_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
TissueSubstanceQuantityData::_Internal::extravascularmolarity(const TissueSubstanceQuantityData* msg) {
  return *msg->extravascularmolarity_;
}
const ::pulse::cdm::bind::ScalarPressureData&
TissueSubstanceQuantityData::_Internal::extravascularpartialpressure(const TissueSubstanceQuantityData* msg) {
  return *msg->extravascularpartialpressure_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
TissueSubstanceQuantityData::_Internal::extravascularsaturation(const TissueSubstanceQuantityData* msg) {
  return *msg->extravascularsaturation_;
}
void TissueSubstanceQuantityData::clear_tissueconcentration() {
  if (GetArena() == nullptr && tissueconcentration_ != nullptr) {
    delete tissueconcentration_;
  }
  tissueconcentration_ = nullptr;
}
void TissueSubstanceQuantityData::clear_tissuemolarity() {
  if (GetArena() == nullptr && tissuemolarity_ != nullptr) {
    delete tissuemolarity_;
  }
  tissuemolarity_ = nullptr;
}
void TissueSubstanceQuantityData::clear_extravascularconcentration() {
  if (GetArena() == nullptr && extravascularconcentration_ != nullptr) {
    delete extravascularconcentration_;
  }
  extravascularconcentration_ = nullptr;
}
void TissueSubstanceQuantityData::clear_extravascularmolarity() {
  if (GetArena() == nullptr && extravascularmolarity_ != nullptr) {
    delete extravascularmolarity_;
  }
  extravascularmolarity_ = nullptr;
}
void TissueSubstanceQuantityData::clear_extravascularpartialpressure() {
  if (GetArena() == nullptr && extravascularpartialpressure_ != nullptr) {
    delete extravascularpartialpressure_;
  }
  extravascularpartialpressure_ = nullptr;
}
void TissueSubstanceQuantityData::clear_extravascularsaturation() {
  if (GetArena() == nullptr && extravascularsaturation_ != nullptr) {
    delete extravascularsaturation_;
  }
  extravascularsaturation_ = nullptr;
}
TissueSubstanceQuantityData::TissueSubstanceQuantityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TissueSubstanceQuantityData)
}
TissueSubstanceQuantityData::TissueSubstanceQuantityData(const TissueSubstanceQuantityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_substancequantity()) {
    substancequantity_ = new ::pulse::cdm::bind::SubstanceQuantityData(*from.substancequantity_);
  } else {
    substancequantity_ = nullptr;
  }
  if (from._internal_has_tissueconcentration()) {
    tissueconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.tissueconcentration_);
  } else {
    tissueconcentration_ = nullptr;
  }
  if (from._internal_has_tissuemolarity()) {
    tissuemolarity_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.tissuemolarity_);
  } else {
    tissuemolarity_ = nullptr;
  }
  if (from._internal_has_extravascularconcentration()) {
    extravascularconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.extravascularconcentration_);
  } else {
    extravascularconcentration_ = nullptr;
  }
  if (from._internal_has_extravascularmolarity()) {
    extravascularmolarity_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.extravascularmolarity_);
  } else {
    extravascularmolarity_ = nullptr;
  }
  if (from._internal_has_extravascularpartialpressure()) {
    extravascularpartialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.extravascularpartialpressure_);
  } else {
    extravascularpartialpressure_ = nullptr;
  }
  if (from._internal_has_extravascularsaturation()) {
    extravascularsaturation_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.extravascularsaturation_);
  } else {
    extravascularsaturation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TissueSubstanceQuantityData)
}

void TissueSubstanceQuantityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&substancequantity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&extravascularsaturation_) -
      reinterpret_cast<char*>(&substancequantity_)) + sizeof(extravascularsaturation_));
}

TissueSubstanceQuantityData::~TissueSubstanceQuantityData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TissueSubstanceQuantityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TissueSubstanceQuantityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete substancequantity_;
  if (this != internal_default_instance()) delete tissueconcentration_;
  if (this != internal_default_instance()) delete tissuemolarity_;
  if (this != internal_default_instance()) delete extravascularconcentration_;
  if (this != internal_default_instance()) delete extravascularmolarity_;
  if (this != internal_default_instance()) delete extravascularpartialpressure_;
  if (this != internal_default_instance()) delete extravascularsaturation_;
}

void TissueSubstanceQuantityData::ArenaDtor(void* object) {
  TissueSubstanceQuantityData* _this = reinterpret_cast< TissueSubstanceQuantityData* >(object);
  (void)_this;
}
void TissueSubstanceQuantityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TissueSubstanceQuantityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TissueSubstanceQuantityData& TissueSubstanceQuantityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TissueSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base);
  return *internal_default_instance();
}


void TissueSubstanceQuantityData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && substancequantity_ != nullptr) {
    delete substancequantity_;
  }
  substancequantity_ = nullptr;
  if (GetArena() == nullptr && tissueconcentration_ != nullptr) {
    delete tissueconcentration_;
  }
  tissueconcentration_ = nullptr;
  if (GetArena() == nullptr && tissuemolarity_ != nullptr) {
    delete tissuemolarity_;
  }
  tissuemolarity_ = nullptr;
  if (GetArena() == nullptr && extravascularconcentration_ != nullptr) {
    delete extravascularconcentration_;
  }
  extravascularconcentration_ = nullptr;
  if (GetArena() == nullptr && extravascularmolarity_ != nullptr) {
    delete extravascularmolarity_;
  }
  extravascularmolarity_ = nullptr;
  if (GetArena() == nullptr && extravascularpartialpressure_ != nullptr) {
    delete extravascularpartialpressure_;
  }
  extravascularpartialpressure_ = nullptr;
  if (GetArena() == nullptr && extravascularsaturation_ != nullptr) {
    delete extravascularsaturation_;
  }
  extravascularsaturation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TissueSubstanceQuantityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_substancequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissueconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData TissueMolarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissuemolarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData ExtravascularConcentration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extravascularconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData ExtravascularMolarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_extravascularmolarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ExtravascularPartialPressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_extravascularpartialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ExtravascularSaturation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extravascularsaturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TissueSubstanceQuantityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::substancequantity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 2;
  if (this->has_tissueconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tissueconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData TissueMolarity = 3;
  if (this->has_tissuemolarity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tissuemolarity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ExtravascularConcentration = 4;
  if (this->has_extravascularconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extravascularconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData ExtravascularMolarity = 5;
  if (this->has_extravascularmolarity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::extravascularmolarity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData ExtravascularPartialPressure = 6;
  if (this->has_extravascularpartialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::extravascularpartialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ExtravascularSaturation = 7;
  if (this->has_extravascularsaturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::extravascularsaturation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TissueSubstanceQuantityData)
  return target;
}

size_t TissueSubstanceQuantityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.SubstanceQuantityData SubstanceQuantity = 1;
  if (this->has_substancequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *substancequantity_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TissueConcentration = 2;
  if (this->has_tissueconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissueconcentration_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData TissueMolarity = 3;
  if (this->has_tissuemolarity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissuemolarity_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ExtravascularConcentration = 4;
  if (this->has_extravascularconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extravascularconcentration_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData ExtravascularMolarity = 5;
  if (this->has_extravascularmolarity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extravascularmolarity_);
  }

  // .pulse.cdm.bind.ScalarPressureData ExtravascularPartialPressure = 6;
  if (this->has_extravascularpartialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extravascularpartialpressure_);
  }

  // .pulse.cdm.bind.Scalar0To1Data ExtravascularSaturation = 7;
  if (this->has_extravascularsaturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extravascularsaturation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TissueSubstanceQuantityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  const TissueSubstanceQuantityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TissueSubstanceQuantityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TissueSubstanceQuantityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TissueSubstanceQuantityData)
    MergeFrom(*source);
  }
}

void TissueSubstanceQuantityData::MergeFrom(const TissueSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_substancequantity()) {
    _internal_mutable_substancequantity()->::pulse::cdm::bind::SubstanceQuantityData::MergeFrom(from._internal_substancequantity());
  }
  if (from.has_tissueconcentration()) {
    _internal_mutable_tissueconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_tissueconcentration());
  }
  if (from.has_tissuemolarity()) {
    _internal_mutable_tissuemolarity()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_tissuemolarity());
  }
  if (from.has_extravascularconcentration()) {
    _internal_mutable_extravascularconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_extravascularconcentration());
  }
  if (from.has_extravascularmolarity()) {
    _internal_mutable_extravascularmolarity()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_extravascularmolarity());
  }
  if (from.has_extravascularpartialpressure()) {
    _internal_mutable_extravascularpartialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_extravascularpartialpressure());
  }
  if (from.has_extravascularsaturation()) {
    _internal_mutable_extravascularsaturation()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_extravascularsaturation());
  }
}

void TissueSubstanceQuantityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TissueSubstanceQuantityData::CopyFrom(const TissueSubstanceQuantityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TissueSubstanceQuantityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TissueSubstanceQuantityData::IsInitialized() const {
  return true;
}

void TissueSubstanceQuantityData::InternalSwap(TissueSubstanceQuantityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TissueSubstanceQuantityData, extravascularsaturation_)
      + sizeof(TissueSubstanceQuantityData::extravascularsaturation_)
      - PROTOBUF_FIELD_OFFSET(TissueSubstanceQuantityData, substancequantity_)>(
          reinterpret_cast<char*>(&substancequantity_),
          reinterpret_cast<char*>(&other->substancequantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TissueSubstanceQuantityData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SubstanceQuantityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SubstanceQuantityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SubstanceQuantityData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasSubstanceQuantityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasSubstanceQuantityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasSubstanceQuantityData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidSubstanceQuantityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidSubstanceQuantityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidSubstanceQuantityData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TissueSubstanceQuantityData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TissueSubstanceQuantityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TissueSubstanceQuantityData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
