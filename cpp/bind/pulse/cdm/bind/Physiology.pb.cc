// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Physiology.proto

#include "pulse/cdm/bind/Physiology.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class PupillaryResponseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PupillaryResponseData> _instance;
} _PupillaryResponseData_default_instance_;
class BloodChemistrySystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BloodChemistrySystemData> _instance;
} _BloodChemistrySystemData_default_instance_;
class CardiovascularSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardiovascularSystemData> _instance;
} _CardiovascularSystemData_default_instance_;
class DrugSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrugSystemData> _instance;
} _DrugSystemData_default_instance_;
class EndocrineSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndocrineSystemData> _instance;
} _EndocrineSystemData_default_instance_;
class EnergySystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnergySystemData> _instance;
} _EnergySystemData_default_instance_;
class GastrointestinalSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GastrointestinalSystemData> _instance;
} _GastrointestinalSystemData_default_instance_;
class HepaticSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HepaticSystemData> _instance;
} _HepaticSystemData_default_instance_;
class NervousSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NervousSystemData> _instance;
} _NervousSystemData_default_instance_;
class RenalSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenalSystemData> _instance;
} _RenalSystemData_default_instance_;
class RespiratorySystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RespiratorySystemData> _instance;
} _RespiratorySystemData_default_instance_;
class TissueSystemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TissueSystemData> _instance;
} _TissueSystemData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_BloodChemistrySystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::BloodChemistrySystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatCapacitancePerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CardiovascularSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CardiovascularSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureTimePerVolumeAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_DrugSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::DrugSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EndocrineSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EndocrineSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EnergySystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EnergySystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GastrointestinalSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GastrointestinalSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_NutritionData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,}};

static void InitDefaultsscc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_HepaticSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::HepaticSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {}};

static void InitDefaultsscc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_NervousSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::NervousSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,}};

static void InitDefaultsscc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PupillaryResponseData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PupillaryResponseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarNegative1To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_RenalSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::RenalSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimePressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimePressureAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarOsmolalityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarOsmolarityData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_RespiratorySystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::RespiratorySystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureTimePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressurePerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TissueSystemData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TissueSystemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto}, {
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPhysiology_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PupillaryResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PupillaryResponseData, reactivitymodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PupillaryResponseData, shapemodifier_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PupillaryResponseData, sizemodifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, blooddensity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, bloodph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, bloodspecificheat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, bloodureanitrogenconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, carbondioxidesaturation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, carbonmonoxidesaturation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, hematocrit_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, hemoglobincontent_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, oxygensaturation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, phosphate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, plasmavolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, pulseoximetry_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, redbloodcellcount_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, shuntfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, strongiondifference_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, totalproteinconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, volumefractionneutrallipidinplasma_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, volumefractionneutralphospholipidinplasma_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, whitebloodcellcount_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, arterialcarbondioxidepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, arterialoxygenpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, pulmonaryarterialcarbondioxidepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, pulmonaryarterialoxygenpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, pulmonaryvenouscarbondioxidepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, pulmonaryvenousoxygenpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, venouscarbondioxidepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::BloodChemistrySystemData, venousoxygenpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, arterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, bloodvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, cardiacindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, cardiacoutput_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, centralvenouspressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, cerebralbloodflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, cerebralperfusionpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, diastolicarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, heartejectionfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, heartrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, heartrhythm_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, heartstrokevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, intracranialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, meanarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, meanarterialcarbondioxidepartialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, meanarterialcarbondioxidepartialpressuredelta_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, meancentralvenouspressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, meanskinflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonaryarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarycapillarieswedgepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarydiastolicarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarymeanarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarymeancapillaryflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarymeanshuntflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonarysystolicarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonaryvascularresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulmonaryvascularresistanceindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, pulsepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, systemicvascularresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, systolicarterialpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, totalhemorrhagerate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CardiovascularSystemData, totalhemorrhagedvolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, bronchodilationlevel_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, heartratechange_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, meanbloodpressurechange_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, neuromuscularblocklevel_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, pulsepressurechange_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, pupillaryresponse_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, respirationratechange_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, sedationlevel_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, tidalvolumechange_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::DrugSystemData, tubularpermeabilitychange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EndocrineSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EndocrineSystemData, insulinsynthesisrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, achievedexerciselevel_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, coretemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, creatinineproductionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, exercisemeanarterialpressuredelta_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, fatiguelevel_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, ketoneproductionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, lactateproductionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, skintemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, sweatrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, totalmetabolicrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnergySystemData, totalworkratelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GastrointestinalSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GastrointestinalSystemData, waterabsorptionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GastrointestinalSystemData, stomachcontents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::HepaticSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, chemoreceptorfeedback_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, chemoreceptorheartratescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, chemoreceptorheartelastancescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, baroreceptorfeedback_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, baroreceptorheartratescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, baroreceptorheartelastancescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, baroreceptorresistancescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, baroreceptorcompliancescale_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, lefteyepupillaryresponse_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::NervousSystemData, righteyepupillaryresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, filtrationfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, glomerularfiltrationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftafferentarterioleresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftbowmanscapsuleshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftbowmanscapsulesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftefferentarterioleresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularcapillarieshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularcapillariesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularfiltrationcoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularfiltrationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularfiltrationsurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftglomerularfluidpermeability_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftfiltrationfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftnetfiltrationpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftnetreabsorptionpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftperitubularcapillarieshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftperitubularcapillariesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftreabsorptionfiltrationcoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, leftreabsorptionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, lefttubularosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, lefttubularhydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, lefttubularreabsorptionfiltrationsurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, lefttubularreabsorptionfluidpermeability_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, renalbloodflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, renalplasmaflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, renalvascularresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightafferentarterioleresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightbowmanscapsuleshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightbowmanscapsulesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightefferentarterioleresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularcapillarieshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularcapillariesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularfiltrationcoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularfiltrationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularfiltrationsurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightglomerularfluidpermeability_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightfiltrationfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightnetfiltrationpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightnetreabsorptionpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightperitubularcapillarieshydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightperitubularcapillariesosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightreabsorptionfiltrationcoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, rightreabsorptionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, righttubularosmoticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, righttubularhydrostaticpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, righttubularreabsorptionfiltrationsurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, righttubularreabsorptionfluidpermeability_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urinationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urineosmolality_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urineosmolarity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urineproductionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urinespecificgravity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urinevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RenalSystemData, urineureanitrogenconcentration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, alveolararterialgradient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, alveolardeadspace_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, anatomicdeadspace_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, carricoindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, chestwallcompliance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, elasticworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, endtidalcarbondioxidefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, endtidalcarbondioxidepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, endtidaloxygenfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, endtidaloxygenpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, expiratoryflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, expiratorypulmonaryresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, fractionofinsipredoxygen_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, imposedpowerofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, imposedworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, inspiratoryexpiratoryratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, inspiratoryflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, inspiratorypulmonaryresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, intrapleuralpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, intrapulmonarypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, lungcompliance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, maximalinspiratorypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, meanairwaypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, oxygenationindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, oxygensaturationindex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, patientpowerofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, patientworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, peakinspiratorypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, physiologicdeadspace_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, positiveendexpiratorypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, pulmonarycompliance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, pulmonaryelastance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, resistiveexpiratoryworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, resistiveinspiratoryworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, respirationrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, respiratorymusclefatigue_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, respiratorymusclepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, saturationandfractionofinspiredoxygenratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, specificventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, tidalvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totalalveolarventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totaldeadspaceventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totallungvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totalpowerofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totalpulmonaryventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, totalworkofbreathing_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transairwaypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transalveolarpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transchestwallpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transmusclepressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transpulmonarypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transrespiratorypressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::RespiratorySystemData, transthoracicpressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, carbondioxideproductionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, extracellularfluidvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, extravascularfluidvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, intracellularfluidph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, intracellularfluidvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, oxygenconsumptionrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueSystemData, respiratoryexchangeratio_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::PupillaryResponseData)},
  { 8, -1, sizeof(::pulse::cdm::bind::BloodChemistrySystemData)},
  { 40, -1, sizeof(::pulse::cdm::bind::CardiovascularSystemData)},
  { 77, -1, sizeof(::pulse::cdm::bind::DrugSystemData)},
  { 92, -1, sizeof(::pulse::cdm::bind::EndocrineSystemData)},
  { 98, -1, sizeof(::pulse::cdm::bind::EnergySystemData)},
  { 114, -1, sizeof(::pulse::cdm::bind::GastrointestinalSystemData)},
  { 121, -1, sizeof(::pulse::cdm::bind::HepaticSystemData)},
  { 126, -1, sizeof(::pulse::cdm::bind::NervousSystemData)},
  { 141, -1, sizeof(::pulse::cdm::bind::RenalSystemData)},
  { 200, -1, sizeof(::pulse::cdm::bind::RespiratorySystemData)},
  { 258, -1, sizeof(::pulse::cdm::bind::TissueSystemData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PupillaryResponseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_BloodChemistrySystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CardiovascularSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_DrugSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EndocrineSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EnergySystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GastrointestinalSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_HepaticSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_NervousSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_RenalSystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_RespiratorySystemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TissueSystemData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPhysiology_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037pulse/cdm/bind/Physiology.proto\022\016pulse"
  ".cdm.bind\032\032pulse/cdm/bind/Enums.proto\032\037p"
  "ulse/cdm/bind/Properties.proto\032%pulse/cd"
  "m/bind/PatientNutrition.proto\"\330\001\n\025Pupill"
  "aryResponseData\022B\n\022ReactivityModifier\030\001 "
  "\001(\0132&.pulse.cdm.bind.ScalarNegative1To1D"
  "ata\022=\n\rShapeModifier\030\002 \001(\0132&.pulse.cdm.b"
  "ind.ScalarNegative1To1Data\022<\n\014SizeModifi"
  "er\030\003 \001(\0132&.pulse.cdm.bind.ScalarNegative"
  "1To1Data\"\315\016\n\030BloodChemistrySystemData\022=\n"
  "\014BloodDensity\030\001 \001(\0132\'.pulse.cdm.bind.Sca"
  "larMassPerVolumeData\022+\n\007BloodPH\030\002 \001(\0132\032."
  "pulse.cdm.bind.ScalarData\022K\n\021BloodSpecif"
  "icHeat\030\003 \001(\01320.pulse.cdm.bind.ScalarHeat"
  "CapacitancePerMassData\022O\n\036BloodUreaNitro"
  "genConcentration\030\004 \001(\0132\'.pulse.cdm.bind."
  "ScalarMassPerVolumeData\022\?\n\027CarbonDioxide"
  "Saturation\030\005 \001(\0132\036.pulse.cdm.bind.Scalar"
  "0To1Data\022@\n\030CarbonMonoxideSaturation\030\006 \001"
  "(\0132\036.pulse.cdm.bind.Scalar0To1Data\0222\n\nHe"
  "matocrit\030\007 \001(\0132\036.pulse.cdm.bind.Scalar0T"
  "o1Data\0229\n\021HemoglobinContent\030\010 \001(\0132\036.puls"
  "e.cdm.bind.ScalarMassData\0228\n\020OxygenSatur"
  "ation\030\t \001(\0132\036.pulse.cdm.bind.Scalar0To1D"
  "ata\022<\n\tPhosphate\030\n \001(\0132).pulse.cdm.bind."
  "ScalarAmountPerVolumeData\0226\n\014PlasmaVolum"
  "e\030\013 \001(\0132 .pulse.cdm.bind.ScalarVolumeDat"
  "a\0225\n\rPulseOximetry\030\014 \001(\0132\036.pulse.cdm.bin"
  "d.Scalar0To1Data\022D\n\021RedBloodCellCount\030\r "
  "\001(\0132).pulse.cdm.bind.ScalarAmountPerVolu"
  "meData\0225\n\rShuntFraction\030\016 \001(\0132\036.pulse.cd"
  "m.bind.Scalar0To1Data\022F\n\023StrongIonDiffer"
  "ence\030\017 \001(\0132).pulse.cdm.bind.ScalarAmount"
  "PerVolumeData\022J\n\031TotalProteinConcentrati"
  "on\030\020 \001(\0132\'.pulse.cdm.bind.ScalarMassPerV"
  "olumeData\022J\n\"VolumeFractionNeutralLipidI"
  "nPlasma\030\021 \001(\0132\036.pulse.cdm.bind.Scalar0To"
  "1Data\022Q\n)VolumeFractionNeutralPhospholip"
  "idInPlasma\030\022 \001(\0132\036.pulse.cdm.bind.Scalar"
  "0To1Data\022F\n\023WhiteBloodCellCount\030\023 \001(\0132)."
  "pulse.cdm.bind.ScalarAmountPerVolumeData"
  "\022I\n\035ArterialCarbonDioxidePressure\030\024 \001(\0132"
  "\".pulse.cdm.bind.ScalarPressureData\022B\n\026A"
  "rterialOxygenPressure\030\025 \001(\0132\".pulse.cdm."
  "bind.ScalarPressureData\022R\n&PulmonaryArte"
  "rialCarbonDioxidePressure\030\026 \001(\0132\".pulse."
  "cdm.bind.ScalarPressureData\022K\n\037Pulmonary"
  "ArterialOxygenPressure\030\027 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureData\022P\n$PulmonaryVen"
  "ousCarbonDioxidePressure\030\030 \001(\0132\".pulse.c"
  "dm.bind.ScalarPressureData\022I\n\035PulmonaryV"
  "enousOxygenPressure\030\031 \001(\0132\".pulse.cdm.bi"
  "nd.ScalarPressureData\022G\n\033VenousCarbonDio"
  "xidePressure\030\032 \001(\0132\".pulse.cdm.bind.Scal"
  "arPressureData\022@\n\024VenousOxygenPressure\030\033"
  " \001(\0132\".pulse.cdm.bind.ScalarPressureData"
  "\"\362\021\n\030CardiovascularSystemData\022<\n\020Arteria"
  "lPressure\030\001 \001(\0132\".pulse.cdm.bind.ScalarP"
  "ressureData\0225\n\013BloodVolume\030\002 \001(\0132 .pulse"
  ".cdm.bind.ScalarVolumeData\022A\n\014CardiacInd"
  "ex\030\003 \001(\0132+.pulse.cdm.bind.ScalarVolumePe"
  "rTimeAreaData\022>\n\rCardiacOutput\030\004 \001(\0132\'.p"
  "ulse.cdm.bind.ScalarVolumePerTimeData\022A\n"
  "\025CentralVenousPressure\030\005 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureData\022B\n\021CerebralBloo"
  "dFlow\030\006 \001(\0132\'.pulse.cdm.bind.ScalarVolum"
  "ePerTimeData\022E\n\031CerebralPerfusionPressur"
  "e\030\007 \001(\0132\".pulse.cdm.bind.ScalarPressureD"
  "ata\022E\n\031DiastolicArterialPressure\030\010 \001(\0132\""
  ".pulse.cdm.bind.ScalarPressureData\022=\n\025He"
  "artEjectionFraction\030\t \001(\0132\036.pulse.cdm.bi"
  "nd.Scalar0To1Data\0226\n\tHeartRate\030\n \001(\0132#.p"
  "ulse.cdm.bind.ScalarFrequencyData\0221\n\013Hea"
  "rtRhythm\030\013 \001(\0162\034.pulse.cdm.bind.eHeartRh"
  "ythm\022;\n\021HeartStrokeVolume\030\014 \001(\0132 .pulse."
  "cdm.bind.ScalarVolumeData\022@\n\024Intracrania"
  "lPressure\030\r \001(\0132\".pulse.cdm.bind.ScalarP"
  "ressureData\022@\n\024MeanArterialPressure\030\016 \001("
  "\0132\".pulse.cdm.bind.ScalarPressureData\022T\n"
  "(MeanArterialCarbonDioxidePartialPressur"
  "e\030\017 \001(\0132\".pulse.cdm.bind.ScalarPressureD"
  "ata\022Y\n-MeanArterialCarbonDioxidePartialP"
  "ressureDelta\030\020 \001(\0132\".pulse.cdm.bind.Scal"
  "arPressureData\022E\n\031MeanCentralVenousPress"
  "ure\030\021 \001(\0132\".pulse.cdm.bind.ScalarPressur"
  "eData\022=\n\014MeanSkinFlow\030\022 \001(\0132\'.pulse.cdm."
  "bind.ScalarVolumePerTimeData\022E\n\031Pulmonar"
  "yArterialPressure\030\023 \001(\0132\".pulse.cdm.bind"
  ".ScalarPressureData\022M\n!PulmonaryCapillar"
  "iesWedgePressure\030\024 \001(\0132\".pulse.cdm.bind."
  "ScalarPressureData\022N\n\"PulmonaryDiastolic"
  "ArterialPressure\030\025 \001(\0132\".pulse.cdm.bind."
  "ScalarPressureData\022I\n\035PulmonaryMeanArter"
  "ialPressure\030\026 \001(\0132\".pulse.cdm.bind.Scala"
  "rPressureData\022K\n\032PulmonaryMeanCapillaryF"
  "low\030\027 \001(\0132\'.pulse.cdm.bind.ScalarVolumeP"
  "erTimeData\022G\n\026PulmonaryMeanShuntFlow\030\030 \001"
  "(\0132\'.pulse.cdm.bind.ScalarVolumePerTimeD"
  "ata\022M\n!PulmonarySystolicArterialPressure"
  "\030\031 \001(\0132\".pulse.cdm.bind.ScalarPressureDa"
  "ta\022T\n\033PulmonaryVascularResistance\030\032 \001(\0132"
  "/.pulse.cdm.bind.ScalarPressureTimePerVo"
  "lumeData\022]\n PulmonaryVascularResistanceI"
  "ndex\030\033 \001(\01323.pulse.cdm.bind.ScalarPressu"
  "reTimePerVolumeAreaData\0229\n\rPulsePressure"
  "\030\034 \001(\0132\".pulse.cdm.bind.ScalarPressureDa"
  "ta\022S\n\032SystemicVascularResistance\030\035 \001(\0132/"
  ".pulse.cdm.bind.ScalarPressureTimePerVol"
  "umeData\022D\n\030SystolicArterialPressure\030\036 \001("
  "\0132\".pulse.cdm.bind.ScalarPressureData\022D\n"
  "\023TotalHemorrhageRate\030\037 \001(\0132\'.pulse.cdm.b"
  "ind.ScalarVolumePerTimeData\022@\n\026TotalHemo"
  "rrhagedVolume\030  \001(\0132 .pulse.cdm.bind.Sca"
  "larVolumeData\"\240\005\n\016DrugSystemData\022D\n\024Bron"
  "chodilationLevel\030\001 \001(\0132&.pulse.cdm.bind."
  "ScalarNegative1To1Data\022<\n\017HeartRateChang"
  "e\030\002 \001(\0132#.pulse.cdm.bind.ScalarFrequency"
  "Data\022C\n\027MeanBloodPressureChange\030\003 \001(\0132\"."
  "pulse.cdm.bind.ScalarPressureData\022\?\n\027Neu"
  "romuscularBlockLevel\030\004 \001(\0132\036.pulse.cdm.b"
  "ind.Scalar0To1Data\022\?\n\023PulsePressureChang"
  "e\030\005 \001(\0132\".pulse.cdm.bind.ScalarPressureD"
  "ata\022@\n\021PupillaryResponse\030\006 \001(\0132%.pulse.c"
  "dm.bind.PupillaryResponseData\022B\n\025Respira"
  "tionRateChange\030\007 \001(\0132#.pulse.cdm.bind.Sc"
  "alarFrequencyData\0225\n\rSedationLevel\030\010 \001(\013"
  "2\036.pulse.cdm.bind.Scalar0To1Data\022;\n\021Tida"
  "lVolumeChange\030\t \001(\0132 .pulse.cdm.bind.Sca"
  "larVolumeData\022I\n\031TubularPermeabilityChan"
  "ge\030\n \001(\0132&.pulse.cdm.bind.ScalarNegative"
  "1To1Data\"\\\n\023EndocrineSystemData\022E\n\024Insul"
  "inSynthesisRate\030\001 \001(\0132\'.pulse.cdm.bind.S"
  "calarAmountPerTimeData\"\343\005\n\020EnergySystemD"
  "ata\022=\n\025AchievedExerciseLevel\030\001 \001(\0132\036.pul"
  "se.cdm.bind.Scalar0To1Data\022>\n\017CoreTemper"
  "ature\030\002 \001(\0132%.pulse.cdm.bind.ScalarTempe"
  "ratureData\022I\n\030CreatinineProductionRate\030\003"
  " \001(\0132\'.pulse.cdm.bind.ScalarAmountPerTim"
  "eData\022M\n!ExerciseMeanArterialPressureDel"
  "ta\030\004 \001(\0132\".pulse.cdm.bind.ScalarPressure"
  "Data\0224\n\014FatigueLevel\030\005 \001(\0132\036.pulse.cdm.b"
  "ind.Scalar0To1Data\022E\n\024KetoneProductionRa"
  "te\030\006 \001(\0132\'.pulse.cdm.bind.ScalarAmountPe"
  "rTimeData\022F\n\025LactateProductionRate\030\007 \001(\013"
  "2\'.pulse.cdm.bind.ScalarAmountPerTimeDat"
  "a\022>\n\017SkinTemperature\030\010 \001(\0132%.pulse.cdm.b"
  "ind.ScalarTemperatureData\0228\n\tSweatRate\030\t"
  " \001(\0132%.pulse.cdm.bind.ScalarMassPerTimeD"
  "ata\022;\n\022TotalMetabolicRate\030\n \001(\0132\037.pulse."
  "cdm.bind.ScalarPowerData\022:\n\022TotalWorkRat"
  "eLevel\030\013 \001(\0132\036.pulse.cdm.bind.Scalar0To1"
  "Data\"\232\001\n\032GastrointestinalSystemData\022D\n\023W"
  "aterAbsorptionRate\030\001 \001(\0132\'.pulse.cdm.bin"
  "d.ScalarVolumePerTimeData\0226\n\017StomachCont"
  "ents\030\002 \001(\0132\035.pulse.cdm.bind.NutritionDat"
  "a\"\023\n\021HepaticSystemData\"\243\005\n\021NervousSystem"
  "Data\0226\n\025ChemoreceptorFeedback\030\001 \001(\0162\027.pu"
  "lse.cdm.bind.eSwitch\022\?\n\033ChemoreceptorHea"
  "rtRateScale\030\002 \001(\0132\032.pulse.cdm.bind.Scala"
  "rData\022D\n ChemoreceptorHeartElastanceScal"
  "e\030\003 \001(\0132\032.pulse.cdm.bind.ScalarData\0225\n\024B"
  "aroreceptorFeedback\030\004 \001(\0162\027.pulse.cdm.bi"
  "nd.eSwitch\022>\n\032BaroreceptorHeartRateScale"
  "\030\005 \001(\0132\032.pulse.cdm.bind.ScalarData\022C\n\037Ba"
  "roreceptorHeartElastanceScale\030\006 \001(\0132\032.pu"
  "lse.cdm.bind.ScalarData\022\?\n\033BaroreceptorR"
  "esistanceScale\030\007 \001(\0132\032.pulse.cdm.bind.Sc"
  "alarData\022\?\n\033BaroreceptorComplianceScale\030"
  "\010 \001(\0132\032.pulse.cdm.bind.ScalarData\022G\n\030Lef"
  "tEyePupillaryResponse\030\t \001(\0132%.pulse.cdm."
  "bind.PupillaryResponseData\022H\n\031RightEyePu"
  "pillaryResponse\030\n \001(\0132%.pulse.cdm.bind.P"
  "upillaryResponseData\"\374!\n\017RenalSystemData"
  "\022:\n\022FiltrationFraction\030\001 \001(\0132\036.pulse.cdm"
  ".bind.Scalar0To1Data\022I\n\030GlomerularFiltra"
  "tionRate\030\002 \001(\0132\'.pulse.cdm.bind.ScalarVo"
  "lumePerTimeData\022X\n\037LeftAfferentArteriole"
  "Resistance\030\003 \001(\0132/.pulse.cdm.bind.Scalar"
  "PressureTimePerVolumeData\022R\n&LeftBowmans"
  "CapsulesHydrostaticPressure\030\004 \001(\0132\".puls"
  "e.cdm.bind.ScalarPressureData\022N\n\"LeftBow"
  "mansCapsulesOsmoticPressure\030\005 \001(\0132\".puls"
  "e.cdm.bind.ScalarPressureData\022X\n\037LeftEff"
  "erentArterioleResistance\030\006 \001(\0132/.pulse.c"
  "dm.bind.ScalarPressureTimePerVolumeData\022"
  "X\n,LeftGlomerularCapillariesHydrostaticP"
  "ressure\030\007 \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\022T\n(LeftGlomerularCapillariesOs"
  "moticPressure\030\010 \001(\0132\".pulse.cdm.bind.Sca"
  "larPressureData\022\\\n#LeftGlomerularFiltrat"
  "ionCoefficient\030\t \001(\0132/.pulse.cdm.bind.Sc"
  "alarVolumePerTimePressureData\022M\n\034LeftGlo"
  "merularFiltrationRate\030\n \001(\0132\'.pulse.cdm."
  "bind.ScalarVolumePerTimeData\022K\n#LeftGlom"
  "erularFiltrationSurfaceArea\030\013 \001(\0132\036.puls"
  "e.cdm.bind.ScalarAreaData\022\\\n\037LeftGlomeru"
  "larFluidPermeability\030\014 \001(\01323.pulse.cdm.b"
  "ind.ScalarVolumePerTimePressureAreaData\022"
  ">\n\026LeftFiltrationFraction\030\r \001(\0132\036.pulse."
  "cdm.bind.Scalar0To1Data\022E\n\031LeftNetFiltra"
  "tionPressure\030\016 \001(\0132\".pulse.cdm.bind.Scal"
  "arPressureData\022G\n\033LeftNetReabsorptionPre"
  "ssure\030\017 \001(\0132\".pulse.cdm.bind.ScalarPress"
  "ureData\022Y\n-LeftPeritubularCapillariesHyd"
  "rostaticPressure\030\020 \001(\0132\".pulse.cdm.bind."
  "ScalarPressureData\022U\n)LeftPeritubularCap"
  "illariesOsmoticPressure\030\021 \001(\0132\".pulse.cd"
  "m.bind.ScalarPressureData\022^\n%LeftReabsor"
  "ptionFiltrationCoefficient\030\022 \001(\0132/.pulse"
  ".cdm.bind.ScalarVolumePerTimePressureDat"
  "a\022E\n\024LeftReabsorptionRate\030\023 \001(\0132\'.pulse."
  "cdm.bind.ScalarVolumePerTimeData\022F\n\032Left"
  "TubularOsmoticPressure\030\024 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureData\022J\n\036LeftTubularH"
  "ydrostaticPressure\030\025 \001(\0132\".pulse.cdm.bin"
  "d.ScalarPressureData\022T\n,LeftTubularReabs"
  "orptionFiltrationSurfaceArea\030\026 \001(\0132\036.pul"
  "se.cdm.bind.ScalarAreaData\022e\n(LeftTubula"
  "rReabsorptionFluidPermeability\030\027 \001(\01323.p"
  "ulse.cdm.bind.ScalarVolumePerTimePressur"
  "eAreaData\022\?\n\016RenalBloodFlow\030\030 \001(\0132\'.puls"
  "e.cdm.bind.ScalarVolumePerTimeData\022@\n\017Re"
  "nalPlasmaFlow\030\031 \001(\0132\'.pulse.cdm.bind.Sca"
  "larVolumePerTimeData\022P\n\027RenalVascularRes"
  "istance\030\032 \001(\0132/.pulse.cdm.bind.ScalarPre"
  "ssureTimePerVolumeData\022Y\n RightAfferentA"
  "rterioleResistance\030\033 \001(\0132/.pulse.cdm.bin"
  "d.ScalarPressureTimePerVolumeData\022S\n\'Rig"
  "htBowmansCapsulesHydrostaticPressure\030\034 \001"
  "(\0132\".pulse.cdm.bind.ScalarPressureData\022O"
  "\n#RightBowmansCapsulesOsmoticPressure\030\035 "
  "\001(\0132\".pulse.cdm.bind.ScalarPressureData\022"
  "Y\n RightEfferentArterioleResistance\030\036 \001("
  "\0132/.pulse.cdm.bind.ScalarPressureTimePer"
  "VolumeData\022Y\n-RightGlomerularCapillaries"
  "HydrostaticPressure\030\037 \001(\0132\".pulse.cdm.bi"
  "nd.ScalarPressureData\022U\n)RightGlomerular"
  "CapillariesOsmoticPressure\030  \001(\0132\".pulse"
  ".cdm.bind.ScalarPressureData\022]\n$RightGlo"
  "merularFiltrationCoefficient\030! \001(\0132/.pul"
  "se.cdm.bind.ScalarVolumePerTimePressureD"
  "ata\022N\n\035RightGlomerularFiltrationRate\030\" \001"
  "(\0132\'.pulse.cdm.bind.ScalarVolumePerTimeD"
  "ata\022L\n$RightGlomerularFiltrationSurfaceA"
  "rea\030# \001(\0132\036.pulse.cdm.bind.ScalarAreaDat"
  "a\022]\n RightGlomerularFluidPermeability\030$ "
  "\001(\01323.pulse.cdm.bind.ScalarVolumePerTime"
  "PressureAreaData\022\?\n\027RightFiltrationFract"
  "ion\030% \001(\0132\036.pulse.cdm.bind.Scalar0To1Dat"
  "a\022F\n\032RightNetFiltrationPressure\030& \001(\0132\"."
  "pulse.cdm.bind.ScalarPressureData\022H\n\034Rig"
  "htNetReabsorptionPressure\030\' \001(\0132\".pulse."
  "cdm.bind.ScalarPressureData\022Z\n.RightPeri"
  "tubularCapillariesHydrostaticPressure\030( "
  "\001(\0132\".pulse.cdm.bind.ScalarPressureData\022"
  "V\n*RightPeritubularCapillariesOsmoticPre"
  "ssure\030) \001(\0132\".pulse.cdm.bind.ScalarPress"
  "ureData\022_\n&RightReabsorptionFiltrationCo"
  "efficient\030* \001(\0132/.pulse.cdm.bind.ScalarV"
  "olumePerTimePressureData\022F\n\025RightReabsor"
  "ptionRate\030+ \001(\0132\'.pulse.cdm.bind.ScalarV"
  "olumePerTimeData\022G\n\033RightTubularOsmoticP"
  "ressure\030, \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\022K\n\037RightTubularHydrostaticPres"
  "sure\030- \001(\0132\".pulse.cdm.bind.ScalarPressu"
  "reData\022U\n-RightTubularReabsorptionFiltra"
  "tionSurfaceArea\030. \001(\0132\036.pulse.cdm.bind.S"
  "calarAreaData\022f\n)RightTubularReabsorptio"
  "nFluidPermeability\030/ \001(\01323.pulse.cdm.bin"
  "d.ScalarVolumePerTimePressureAreaData\022>\n"
  "\rUrinationRate\0300 \001(\0132\'.pulse.cdm.bind.Sc"
  "alarVolumePerTimeData\022=\n\017UrineOsmolality"
  "\0301 \001(\0132$.pulse.cdm.bind.ScalarOsmolality"
  "Data\022=\n\017UrineOsmolarity\0302 \001(\0132$.pulse.cd"
  "m.bind.ScalarOsmolarityData\022D\n\023UrineProd"
  "uctionRate\0303 \001(\0132\'.pulse.cdm.bind.Scalar"
  "VolumePerTimeData\0228\n\024UrineSpecificGravit"
  "y\0304 \001(\0132\032.pulse.cdm.bind.ScalarData\0225\n\013U"
  "rineVolume\0305 \001(\0132 .pulse.cdm.bind.Scalar"
  "VolumeData\022O\n\036UrineUreaNitrogenConcentra"
  "tion\0306 \001(\0132\'.pulse.cdm.bind.ScalarMassPe"
  "rVolumeData\"\270\034\n\025RespiratorySystemData\022D\n"
  "\030AlveolarArterialGradient\030\001 \001(\0132\".pulse."
  "cdm.bind.ScalarPressureData\022;\n\021AlveolarD"
  "eadSpace\030\002 \001(\0132 .pulse.cdm.bind.ScalarVo"
  "lumeData\022;\n\021AnatomicDeadSpace\030\003 \001(\0132 .pu"
  "lse.cdm.bind.ScalarVolumeData\0228\n\014Carrico"
  "Index\030\004 \001(\0132\".pulse.cdm.bind.ScalarPress"
  "ureData\022H\n\023ChestWallCompliance\030\005 \001(\0132+.p"
  "ulse.cdm.bind.ScalarVolumePerPressureDat"
  "a\022@\n\026ElasticWorkOfBreathing\030\006 \001(\0132 .puls"
  "e.cdm.bind.ScalarEnergyData\022E\n\035EndTidalC"
  "arbonDioxideFraction\030\007 \001(\0132\036.pulse.cdm.b"
  "ind.Scalar0To1Data\022I\n\035EndTidalCarbonDiox"
  "idePressure\030\010 \001(\0132\".pulse.cdm.bind.Scala"
  "rPressureData\022>\n\026EndTidalOxygenFraction\030"
  "\t \001(\0132\036.pulse.cdm.bind.Scalar0To1Data\022B\n"
  "\026EndTidalOxygenPressure\030\n \001(\0132\".pulse.cd"
  "m.bind.ScalarPressureData\022\?\n\016ExpiratoryF"
  "low\030\013 \001(\0132\'.pulse.cdm.bind.ScalarVolumeP"
  "erTimeData\022V\n\035ExpiratoryPulmonaryResista"
  "nce\030\014 \001(\0132/.pulse.cdm.bind.ScalarPressur"
  "eTimePerVolumeData\022@\n\030FractionOfInsipred"
  "Oxygen\030\r \001(\0132\036.pulse.cdm.bind.Scalar0To1"
  "Data\022@\n\027ImposedPowerOfBreathing\030\016 \001(\0132\037."
  "pulse.cdm.bind.ScalarPowerData\022@\n\026Impose"
  "dWorkOfBreathing\030\017 \001(\0132 .pulse.cdm.bind."
  "ScalarEnergyData\022>\n\032InspiratoryExpirator"
  "yRatio\030\020 \001(\0132\032.pulse.cdm.bind.ScalarData"
  "\022@\n\017InspiratoryFlow\030\021 \001(\0132\'.pulse.cdm.bi"
  "nd.ScalarVolumePerTimeData\022W\n\036Inspirator"
  "yPulmonaryResistance\030\022 \001(\0132/.pulse.cdm.b"
  "ind.ScalarPressureTimePerVolumeData\022@\n\024I"
  "ntrapleuralPressure\030\023 \001(\0132\".pulse.cdm.bi"
  "nd.ScalarPressureData\022B\n\026IntrapulmonaryP"
  "ressure\030\024 \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\022C\n\016LungCompliance\030\025 \001(\0132+.puls"
  "e.cdm.bind.ScalarVolumePerPressureData\022F"
  "\n\032MaximalInspiratoryPressure\030\026 \001(\0132\".pul"
  "se.cdm.bind.ScalarPressureData\022>\n\022MeanAi"
  "rwayPressure\030\027 \001(\0132\".pulse.cdm.bind.Scal"
  "arPressureData\0224\n\020OxygenationIndex\030\030 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\022A\n\025OxygenSa"
  "turationIndex\030\031 \001(\0132\".pulse.cdm.bind.Sca"
  "larPressureData\022@\n\027PatientPowerOfBreathi"
  "ng\030\032 \001(\0132\037.pulse.cdm.bind.ScalarPowerDat"
  "a\022@\n\026PatientWorkOfBreathing\030\033 \001(\0132 .puls"
  "e.cdm.bind.ScalarEnergyData\022C\n\027PeakInspi"
  "ratoryPressure\030\034 \001(\0132\".pulse.cdm.bind.Sc"
  "alarPressureData\022>\n\024PhysiologicDeadSpace"
  "\030\035 \001(\0132 .pulse.cdm.bind.ScalarVolumeData"
  "\022I\n\035PositiveEndExpiratoryPressure\030\036 \001(\0132"
  "\".pulse.cdm.bind.ScalarPressureData\022H\n\023P"
  "ulmonaryCompliance\030\037 \001(\0132+.pulse.cdm.bin"
  "d.ScalarVolumePerPressureData\022G\n\022Pulmona"
  "ryElastance\030  \001(\0132+.pulse.cdm.bind.Scala"
  "rPressurePerVolumeData\022L\n\"ResistiveExpir"
  "atoryWorkOfBreathing\030! \001(\0132 .pulse.cdm.b"
  "ind.ScalarEnergyData\022M\n#ResistiveInspira"
  "toryWorkOfBreathing\030\" \001(\0132 .pulse.cdm.bi"
  "nd.ScalarEnergyData\022<\n\017RespirationRate\030#"
  " \001(\0132#.pulse.cdm.bind.ScalarFrequencyDat"
  "a\022@\n\030RespiratoryMuscleFatigue\030$ \001(\0132\036.pu"
  "lse.cdm.bind.Scalar0To1Data\022E\n\031Respirato"
  "ryMusclePressure\030% \001(\0132\".pulse.cdm.bind."
  "ScalarPressureData\022N\n*SaturationAndFract"
  "ionOfInspiredOxygenRatio\030& \001(\0132\032.pulse.c"
  "dm.bind.ScalarData\0227\n\023SpecificVentilatio"
  "n\030\' \001(\0132\032.pulse.cdm.bind.ScalarData\0225\n\013T"
  "idalVolume\030( \001(\0132 .pulse.cdm.bind.Scalar"
  "VolumeData\022I\n\030TotalAlveolarVentilation\030)"
  " \001(\0132\'.pulse.cdm.bind.ScalarVolumePerTim"
  "eData\022J\n\031TotalDeadSpaceVentilation\030* \001(\013"
  "2\'.pulse.cdm.bind.ScalarVolumePerTimeDat"
  "a\0229\n\017TotalLungVolume\030+ \001(\0132 .pulse.cdm.b"
  "ind.ScalarVolumeData\022>\n\025TotalPowerOfBrea"
  "thing\030, \001(\0132\037.pulse.cdm.bind.ScalarPower"
  "Data\022J\n\031TotalPulmonaryVentilation\030- \001(\0132"
  "\'.pulse.cdm.bind.ScalarVolumePerTimeData"
  "\022>\n\024TotalWorkOfBreathing\030. \001(\0132 .pulse.c"
  "dm.bind.ScalarEnergyData\022\?\n\023TransairwayP"
  "ressure\030/ \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\022A\n\025TransalveolarPressure\0300 \001(\013"
  "2\".pulse.cdm.bind.ScalarPressureData\022B\n\026"
  "TransChestWallPressure\0301 \001(\0132\".pulse.cdm"
  ".bind.ScalarPressureData\022\?\n\023TransMuscleP"
  "ressure\0302 \001(\0132\".pulse.cdm.bind.ScalarPre"
  "ssureData\022B\n\026TranspulmonaryPressure\0303 \001("
  "\0132\".pulse.cdm.bind.ScalarPressureData\022D\n"
  "\030TransrespiratoryPressure\0304 \001(\0132\".pulse."
  "cdm.bind.ScalarPressureData\022A\n\025Transthor"
  "acicPressure\0305 \001(\0132\".pulse.cdm.bind.Scal"
  "arPressureData\"\354\003\n\020TissueSystemData\022L\n\033C"
  "arbonDioxideProductionRate\030\001 \001(\0132\'.pulse"
  ".cdm.bind.ScalarVolumePerTimeData\022B\n\030Ext"
  "racellularFluidVolume\030\002 \001(\0132 .pulse.cdm."
  "bind.ScalarVolumeData\022B\n\030ExtravascularFl"
  "uidVolume\030\003 \001(\0132 .pulse.cdm.bind.ScalarV"
  "olumeData\0228\n\024IntracellularFluidPH\030\004 \001(\0132"
  "\032.pulse.cdm.bind.ScalarData\022B\n\030Intracell"
  "ularFluidVolume\030\005 \001(\0132 .pulse.cdm.bind.S"
  "calarVolumeData\022F\n\025OxygenConsumptionRate"
  "\030\006 \001(\0132\'.pulse.cdm.bind.ScalarVolumePerT"
  "imeData\022<\n\030RespiratoryExchangeRatio\030\007 \001("
  "\0132\032.pulse.cdm.bind.ScalarData*.\n\014eHeartR"
  "hythm\022\017\n\013NormalSinus\020\000\022\r\n\tAsystolic\020\001*1\n"
  "\014eBreathState\022\n\n\006Inhale\020\000\022\t\n\005Pause\020\001\022\n\n\006"
  "Exhale\020\002B/\n\032com.kitware.pulse.cdm.bindH\001"
  "\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_sccs[12] = {
  &scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
  &scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPhysiology_2eproto, "pulse/cdm/bind/Physiology.proto", 15545,
  &descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPhysiology_2eproto, 12, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPhysiology_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eHeartRhythm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto[0];
}
bool eHeartRhythm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eBreathState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPhysiology_2eproto[1];
}
bool eBreathState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PupillaryResponseData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& reactivitymodifier(const PupillaryResponseData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& shapemodifier(const PupillaryResponseData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& sizemodifier(const PupillaryResponseData* msg);
};

const ::pulse::cdm::bind::ScalarNegative1To1Data&
PupillaryResponseData::_Internal::reactivitymodifier(const PupillaryResponseData* msg) {
  return *msg->reactivitymodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
PupillaryResponseData::_Internal::shapemodifier(const PupillaryResponseData* msg) {
  return *msg->shapemodifier_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
PupillaryResponseData::_Internal::sizemodifier(const PupillaryResponseData* msg) {
  return *msg->sizemodifier_;
}
void PupillaryResponseData::clear_reactivitymodifier() {
  if (GetArena() == nullptr && reactivitymodifier_ != nullptr) {
    delete reactivitymodifier_;
  }
  reactivitymodifier_ = nullptr;
}
void PupillaryResponseData::clear_shapemodifier() {
  if (GetArena() == nullptr && shapemodifier_ != nullptr) {
    delete shapemodifier_;
  }
  shapemodifier_ = nullptr;
}
void PupillaryResponseData::clear_sizemodifier() {
  if (GetArena() == nullptr && sizemodifier_ != nullptr) {
    delete sizemodifier_;
  }
  sizemodifier_ = nullptr;
}
PupillaryResponseData::PupillaryResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PupillaryResponseData)
}
PupillaryResponseData::PupillaryResponseData(const PupillaryResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reactivitymodifier()) {
    reactivitymodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.reactivitymodifier_);
  } else {
    reactivitymodifier_ = nullptr;
  }
  if (from._internal_has_shapemodifier()) {
    shapemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.shapemodifier_);
  } else {
    shapemodifier_ = nullptr;
  }
  if (from._internal_has_sizemodifier()) {
    sizemodifier_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.sizemodifier_);
  } else {
    sizemodifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PupillaryResponseData)
}

void PupillaryResponseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reactivitymodifier_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sizemodifier_) -
      reinterpret_cast<char*>(&reactivitymodifier_)) + sizeof(sizemodifier_));
}

PupillaryResponseData::~PupillaryResponseData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PupillaryResponseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PupillaryResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reactivitymodifier_;
  if (this != internal_default_instance()) delete shapemodifier_;
  if (this != internal_default_instance()) delete sizemodifier_;
}

void PupillaryResponseData::ArenaDtor(void* object) {
  PupillaryResponseData* _this = reinterpret_cast< PupillaryResponseData* >(object);
  (void)_this;
}
void PupillaryResponseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PupillaryResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PupillaryResponseData& PupillaryResponseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PupillaryResponseData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void PupillaryResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PupillaryResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reactivitymodifier_ != nullptr) {
    delete reactivitymodifier_;
  }
  reactivitymodifier_ = nullptr;
  if (GetArena() == nullptr && shapemodifier_ != nullptr) {
    delete shapemodifier_;
  }
  shapemodifier_ = nullptr;
  if (GetArena() == nullptr && sizemodifier_ != nullptr) {
    delete sizemodifier_;
  }
  sizemodifier_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PupillaryResponseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarNegative1To1Data ReactivityModifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reactivitymodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data ShapeModifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data SizeModifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sizemodifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PupillaryResponseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PupillaryResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data ReactivityModifier = 1;
  if (this->has_reactivitymodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reactivitymodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data ShapeModifier = 2;
  if (this->has_shapemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shapemodifier(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data SizeModifier = 3;
  if (this->has_sizemodifier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sizemodifier(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PupillaryResponseData)
  return target;
}

size_t PupillaryResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PupillaryResponseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data ReactivityModifier = 1;
  if (this->has_reactivitymodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reactivitymodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data ShapeModifier = 2;
  if (this->has_shapemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shapemodifier_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data SizeModifier = 3;
  if (this->has_sizemodifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sizemodifier_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PupillaryResponseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PupillaryResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const PupillaryResponseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PupillaryResponseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PupillaryResponseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PupillaryResponseData)
    MergeFrom(*source);
  }
}

void PupillaryResponseData::MergeFrom(const PupillaryResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PupillaryResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reactivitymodifier()) {
    _internal_mutable_reactivitymodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_reactivitymodifier());
  }
  if (from.has_shapemodifier()) {
    _internal_mutable_shapemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_shapemodifier());
  }
  if (from.has_sizemodifier()) {
    _internal_mutable_sizemodifier()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_sizemodifier());
  }
}

void PupillaryResponseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PupillaryResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PupillaryResponseData::CopyFrom(const PupillaryResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PupillaryResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PupillaryResponseData::IsInitialized() const {
  return true;
}

void PupillaryResponseData::InternalSwap(PupillaryResponseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PupillaryResponseData, sizemodifier_)
      + sizeof(PupillaryResponseData::sizemodifier_)
      - PROTOBUF_FIELD_OFFSET(PupillaryResponseData, reactivitymodifier_)>(
          reinterpret_cast<char*>(&reactivitymodifier_),
          reinterpret_cast<char*>(&other->reactivitymodifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PupillaryResponseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BloodChemistrySystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& blooddensity(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& bloodph(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& bloodspecificheat(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& bloodureanitrogenconcentration(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& carbondioxidesaturation(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& carbonmonoxidesaturation(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& hematocrit(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& hemoglobincontent(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& oxygensaturation(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& phosphate(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& plasmavolume(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& pulseoximetry(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& redbloodcellcount(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& shuntfraction(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& strongiondifference(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalproteinconcentration(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& volumefractionneutrallipidinplasma(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& volumefractionneutralphospholipidinplasma(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& whitebloodcellcount(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& arterialcarbondioxidepressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& arterialoxygenpressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialcarbondioxidepressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialoxygenpressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonaryvenouscarbondioxidepressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonaryvenousoxygenpressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& venouscarbondioxidepressure(const BloodChemistrySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& venousoxygenpressure(const BloodChemistrySystemData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerVolumeData&
BloodChemistrySystemData::_Internal::blooddensity(const BloodChemistrySystemData* msg) {
  return *msg->blooddensity_;
}
const ::pulse::cdm::bind::ScalarData&
BloodChemistrySystemData::_Internal::bloodph(const BloodChemistrySystemData* msg) {
  return *msg->bloodph_;
}
const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&
BloodChemistrySystemData::_Internal::bloodspecificheat(const BloodChemistrySystemData* msg) {
  return *msg->bloodspecificheat_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
BloodChemistrySystemData::_Internal::bloodureanitrogenconcentration(const BloodChemistrySystemData* msg) {
  return *msg->bloodureanitrogenconcentration_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::carbondioxidesaturation(const BloodChemistrySystemData* msg) {
  return *msg->carbondioxidesaturation_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::carbonmonoxidesaturation(const BloodChemistrySystemData* msg) {
  return *msg->carbonmonoxidesaturation_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::hematocrit(const BloodChemistrySystemData* msg) {
  return *msg->hematocrit_;
}
const ::pulse::cdm::bind::ScalarMassData&
BloodChemistrySystemData::_Internal::hemoglobincontent(const BloodChemistrySystemData* msg) {
  return *msg->hemoglobincontent_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::oxygensaturation(const BloodChemistrySystemData* msg) {
  return *msg->oxygensaturation_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
BloodChemistrySystemData::_Internal::phosphate(const BloodChemistrySystemData* msg) {
  return *msg->phosphate_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
BloodChemistrySystemData::_Internal::plasmavolume(const BloodChemistrySystemData* msg) {
  return *msg->plasmavolume_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::pulseoximetry(const BloodChemistrySystemData* msg) {
  return *msg->pulseoximetry_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
BloodChemistrySystemData::_Internal::redbloodcellcount(const BloodChemistrySystemData* msg) {
  return *msg->redbloodcellcount_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::shuntfraction(const BloodChemistrySystemData* msg) {
  return *msg->shuntfraction_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
BloodChemistrySystemData::_Internal::strongiondifference(const BloodChemistrySystemData* msg) {
  return *msg->strongiondifference_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
BloodChemistrySystemData::_Internal::totalproteinconcentration(const BloodChemistrySystemData* msg) {
  return *msg->totalproteinconcentration_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::volumefractionneutrallipidinplasma(const BloodChemistrySystemData* msg) {
  return *msg->volumefractionneutrallipidinplasma_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
BloodChemistrySystemData::_Internal::volumefractionneutralphospholipidinplasma(const BloodChemistrySystemData* msg) {
  return *msg->volumefractionneutralphospholipidinplasma_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
BloodChemistrySystemData::_Internal::whitebloodcellcount(const BloodChemistrySystemData* msg) {
  return *msg->whitebloodcellcount_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::arterialcarbondioxidepressure(const BloodChemistrySystemData* msg) {
  return *msg->arterialcarbondioxidepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::arterialoxygenpressure(const BloodChemistrySystemData* msg) {
  return *msg->arterialoxygenpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::pulmonaryarterialcarbondioxidepressure(const BloodChemistrySystemData* msg) {
  return *msg->pulmonaryarterialcarbondioxidepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::pulmonaryarterialoxygenpressure(const BloodChemistrySystemData* msg) {
  return *msg->pulmonaryarterialoxygenpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::pulmonaryvenouscarbondioxidepressure(const BloodChemistrySystemData* msg) {
  return *msg->pulmonaryvenouscarbondioxidepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::pulmonaryvenousoxygenpressure(const BloodChemistrySystemData* msg) {
  return *msg->pulmonaryvenousoxygenpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::venouscarbondioxidepressure(const BloodChemistrySystemData* msg) {
  return *msg->venouscarbondioxidepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
BloodChemistrySystemData::_Internal::venousoxygenpressure(const BloodChemistrySystemData* msg) {
  return *msg->venousoxygenpressure_;
}
void BloodChemistrySystemData::clear_blooddensity() {
  if (GetArena() == nullptr && blooddensity_ != nullptr) {
    delete blooddensity_;
  }
  blooddensity_ = nullptr;
}
void BloodChemistrySystemData::clear_bloodph() {
  if (GetArena() == nullptr && bloodph_ != nullptr) {
    delete bloodph_;
  }
  bloodph_ = nullptr;
}
void BloodChemistrySystemData::clear_bloodspecificheat() {
  if (GetArena() == nullptr && bloodspecificheat_ != nullptr) {
    delete bloodspecificheat_;
  }
  bloodspecificheat_ = nullptr;
}
void BloodChemistrySystemData::clear_bloodureanitrogenconcentration() {
  if (GetArena() == nullptr && bloodureanitrogenconcentration_ != nullptr) {
    delete bloodureanitrogenconcentration_;
  }
  bloodureanitrogenconcentration_ = nullptr;
}
void BloodChemistrySystemData::clear_carbondioxidesaturation() {
  if (GetArena() == nullptr && carbondioxidesaturation_ != nullptr) {
    delete carbondioxidesaturation_;
  }
  carbondioxidesaturation_ = nullptr;
}
void BloodChemistrySystemData::clear_carbonmonoxidesaturation() {
  if (GetArena() == nullptr && carbonmonoxidesaturation_ != nullptr) {
    delete carbonmonoxidesaturation_;
  }
  carbonmonoxidesaturation_ = nullptr;
}
void BloodChemistrySystemData::clear_hematocrit() {
  if (GetArena() == nullptr && hematocrit_ != nullptr) {
    delete hematocrit_;
  }
  hematocrit_ = nullptr;
}
void BloodChemistrySystemData::clear_hemoglobincontent() {
  if (GetArena() == nullptr && hemoglobincontent_ != nullptr) {
    delete hemoglobincontent_;
  }
  hemoglobincontent_ = nullptr;
}
void BloodChemistrySystemData::clear_oxygensaturation() {
  if (GetArena() == nullptr && oxygensaturation_ != nullptr) {
    delete oxygensaturation_;
  }
  oxygensaturation_ = nullptr;
}
void BloodChemistrySystemData::clear_phosphate() {
  if (GetArena() == nullptr && phosphate_ != nullptr) {
    delete phosphate_;
  }
  phosphate_ = nullptr;
}
void BloodChemistrySystemData::clear_plasmavolume() {
  if (GetArena() == nullptr && plasmavolume_ != nullptr) {
    delete plasmavolume_;
  }
  plasmavolume_ = nullptr;
}
void BloodChemistrySystemData::clear_pulseoximetry() {
  if (GetArena() == nullptr && pulseoximetry_ != nullptr) {
    delete pulseoximetry_;
  }
  pulseoximetry_ = nullptr;
}
void BloodChemistrySystemData::clear_redbloodcellcount() {
  if (GetArena() == nullptr && redbloodcellcount_ != nullptr) {
    delete redbloodcellcount_;
  }
  redbloodcellcount_ = nullptr;
}
void BloodChemistrySystemData::clear_shuntfraction() {
  if (GetArena() == nullptr && shuntfraction_ != nullptr) {
    delete shuntfraction_;
  }
  shuntfraction_ = nullptr;
}
void BloodChemistrySystemData::clear_strongiondifference() {
  if (GetArena() == nullptr && strongiondifference_ != nullptr) {
    delete strongiondifference_;
  }
  strongiondifference_ = nullptr;
}
void BloodChemistrySystemData::clear_totalproteinconcentration() {
  if (GetArena() == nullptr && totalproteinconcentration_ != nullptr) {
    delete totalproteinconcentration_;
  }
  totalproteinconcentration_ = nullptr;
}
void BloodChemistrySystemData::clear_volumefractionneutrallipidinplasma() {
  if (GetArena() == nullptr && volumefractionneutrallipidinplasma_ != nullptr) {
    delete volumefractionneutrallipidinplasma_;
  }
  volumefractionneutrallipidinplasma_ = nullptr;
}
void BloodChemistrySystemData::clear_volumefractionneutralphospholipidinplasma() {
  if (GetArena() == nullptr && volumefractionneutralphospholipidinplasma_ != nullptr) {
    delete volumefractionneutralphospholipidinplasma_;
  }
  volumefractionneutralphospholipidinplasma_ = nullptr;
}
void BloodChemistrySystemData::clear_whitebloodcellcount() {
  if (GetArena() == nullptr && whitebloodcellcount_ != nullptr) {
    delete whitebloodcellcount_;
  }
  whitebloodcellcount_ = nullptr;
}
void BloodChemistrySystemData::clear_arterialcarbondioxidepressure() {
  if (GetArena() == nullptr && arterialcarbondioxidepressure_ != nullptr) {
    delete arterialcarbondioxidepressure_;
  }
  arterialcarbondioxidepressure_ = nullptr;
}
void BloodChemistrySystemData::clear_arterialoxygenpressure() {
  if (GetArena() == nullptr && arterialoxygenpressure_ != nullptr) {
    delete arterialoxygenpressure_;
  }
  arterialoxygenpressure_ = nullptr;
}
void BloodChemistrySystemData::clear_pulmonaryarterialcarbondioxidepressure() {
  if (GetArena() == nullptr && pulmonaryarterialcarbondioxidepressure_ != nullptr) {
    delete pulmonaryarterialcarbondioxidepressure_;
  }
  pulmonaryarterialcarbondioxidepressure_ = nullptr;
}
void BloodChemistrySystemData::clear_pulmonaryarterialoxygenpressure() {
  if (GetArena() == nullptr && pulmonaryarterialoxygenpressure_ != nullptr) {
    delete pulmonaryarterialoxygenpressure_;
  }
  pulmonaryarterialoxygenpressure_ = nullptr;
}
void BloodChemistrySystemData::clear_pulmonaryvenouscarbondioxidepressure() {
  if (GetArena() == nullptr && pulmonaryvenouscarbondioxidepressure_ != nullptr) {
    delete pulmonaryvenouscarbondioxidepressure_;
  }
  pulmonaryvenouscarbondioxidepressure_ = nullptr;
}
void BloodChemistrySystemData::clear_pulmonaryvenousoxygenpressure() {
  if (GetArena() == nullptr && pulmonaryvenousoxygenpressure_ != nullptr) {
    delete pulmonaryvenousoxygenpressure_;
  }
  pulmonaryvenousoxygenpressure_ = nullptr;
}
void BloodChemistrySystemData::clear_venouscarbondioxidepressure() {
  if (GetArena() == nullptr && venouscarbondioxidepressure_ != nullptr) {
    delete venouscarbondioxidepressure_;
  }
  venouscarbondioxidepressure_ = nullptr;
}
void BloodChemistrySystemData::clear_venousoxygenpressure() {
  if (GetArena() == nullptr && venousoxygenpressure_ != nullptr) {
    delete venousoxygenpressure_;
  }
  venousoxygenpressure_ = nullptr;
}
BloodChemistrySystemData::BloodChemistrySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.BloodChemistrySystemData)
}
BloodChemistrySystemData::BloodChemistrySystemData(const BloodChemistrySystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_blooddensity()) {
    blooddensity_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.blooddensity_);
  } else {
    blooddensity_ = nullptr;
  }
  if (from._internal_has_bloodph()) {
    bloodph_ = new ::pulse::cdm::bind::ScalarData(*from.bloodph_);
  } else {
    bloodph_ = nullptr;
  }
  if (from._internal_has_bloodspecificheat()) {
    bloodspecificheat_ = new ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData(*from.bloodspecificheat_);
  } else {
    bloodspecificheat_ = nullptr;
  }
  if (from._internal_has_bloodureanitrogenconcentration()) {
    bloodureanitrogenconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.bloodureanitrogenconcentration_);
  } else {
    bloodureanitrogenconcentration_ = nullptr;
  }
  if (from._internal_has_carbondioxidesaturation()) {
    carbondioxidesaturation_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.carbondioxidesaturation_);
  } else {
    carbondioxidesaturation_ = nullptr;
  }
  if (from._internal_has_carbonmonoxidesaturation()) {
    carbonmonoxidesaturation_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.carbonmonoxidesaturation_);
  } else {
    carbonmonoxidesaturation_ = nullptr;
  }
  if (from._internal_has_hematocrit()) {
    hematocrit_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.hematocrit_);
  } else {
    hematocrit_ = nullptr;
  }
  if (from._internal_has_hemoglobincontent()) {
    hemoglobincontent_ = new ::pulse::cdm::bind::ScalarMassData(*from.hemoglobincontent_);
  } else {
    hemoglobincontent_ = nullptr;
  }
  if (from._internal_has_oxygensaturation()) {
    oxygensaturation_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.oxygensaturation_);
  } else {
    oxygensaturation_ = nullptr;
  }
  if (from._internal_has_phosphate()) {
    phosphate_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.phosphate_);
  } else {
    phosphate_ = nullptr;
  }
  if (from._internal_has_plasmavolume()) {
    plasmavolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.plasmavolume_);
  } else {
    plasmavolume_ = nullptr;
  }
  if (from._internal_has_pulseoximetry()) {
    pulseoximetry_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.pulseoximetry_);
  } else {
    pulseoximetry_ = nullptr;
  }
  if (from._internal_has_redbloodcellcount()) {
    redbloodcellcount_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.redbloodcellcount_);
  } else {
    redbloodcellcount_ = nullptr;
  }
  if (from._internal_has_shuntfraction()) {
    shuntfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.shuntfraction_);
  } else {
    shuntfraction_ = nullptr;
  }
  if (from._internal_has_strongiondifference()) {
    strongiondifference_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.strongiondifference_);
  } else {
    strongiondifference_ = nullptr;
  }
  if (from._internal_has_totalproteinconcentration()) {
    totalproteinconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.totalproteinconcentration_);
  } else {
    totalproteinconcentration_ = nullptr;
  }
  if (from._internal_has_volumefractionneutrallipidinplasma()) {
    volumefractionneutrallipidinplasma_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.volumefractionneutrallipidinplasma_);
  } else {
    volumefractionneutrallipidinplasma_ = nullptr;
  }
  if (from._internal_has_volumefractionneutralphospholipidinplasma()) {
    volumefractionneutralphospholipidinplasma_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.volumefractionneutralphospholipidinplasma_);
  } else {
    volumefractionneutralphospholipidinplasma_ = nullptr;
  }
  if (from._internal_has_whitebloodcellcount()) {
    whitebloodcellcount_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.whitebloodcellcount_);
  } else {
    whitebloodcellcount_ = nullptr;
  }
  if (from._internal_has_arterialcarbondioxidepressure()) {
    arterialcarbondioxidepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.arterialcarbondioxidepressure_);
  } else {
    arterialcarbondioxidepressure_ = nullptr;
  }
  if (from._internal_has_arterialoxygenpressure()) {
    arterialoxygenpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.arterialoxygenpressure_);
  } else {
    arterialoxygenpressure_ = nullptr;
  }
  if (from._internal_has_pulmonaryarterialcarbondioxidepressure()) {
    pulmonaryarterialcarbondioxidepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonaryarterialcarbondioxidepressure_);
  } else {
    pulmonaryarterialcarbondioxidepressure_ = nullptr;
  }
  if (from._internal_has_pulmonaryarterialoxygenpressure()) {
    pulmonaryarterialoxygenpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonaryarterialoxygenpressure_);
  } else {
    pulmonaryarterialoxygenpressure_ = nullptr;
  }
  if (from._internal_has_pulmonaryvenouscarbondioxidepressure()) {
    pulmonaryvenouscarbondioxidepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonaryvenouscarbondioxidepressure_);
  } else {
    pulmonaryvenouscarbondioxidepressure_ = nullptr;
  }
  if (from._internal_has_pulmonaryvenousoxygenpressure()) {
    pulmonaryvenousoxygenpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonaryvenousoxygenpressure_);
  } else {
    pulmonaryvenousoxygenpressure_ = nullptr;
  }
  if (from._internal_has_venouscarbondioxidepressure()) {
    venouscarbondioxidepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.venouscarbondioxidepressure_);
  } else {
    venouscarbondioxidepressure_ = nullptr;
  }
  if (from._internal_has_venousoxygenpressure()) {
    venousoxygenpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.venousoxygenpressure_);
  } else {
    venousoxygenpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.BloodChemistrySystemData)
}

void BloodChemistrySystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blooddensity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&venousoxygenpressure_) -
      reinterpret_cast<char*>(&blooddensity_)) + sizeof(venousoxygenpressure_));
}

BloodChemistrySystemData::~BloodChemistrySystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.BloodChemistrySystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BloodChemistrySystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete blooddensity_;
  if (this != internal_default_instance()) delete bloodph_;
  if (this != internal_default_instance()) delete bloodspecificheat_;
  if (this != internal_default_instance()) delete bloodureanitrogenconcentration_;
  if (this != internal_default_instance()) delete carbondioxidesaturation_;
  if (this != internal_default_instance()) delete carbonmonoxidesaturation_;
  if (this != internal_default_instance()) delete hematocrit_;
  if (this != internal_default_instance()) delete hemoglobincontent_;
  if (this != internal_default_instance()) delete oxygensaturation_;
  if (this != internal_default_instance()) delete phosphate_;
  if (this != internal_default_instance()) delete plasmavolume_;
  if (this != internal_default_instance()) delete pulseoximetry_;
  if (this != internal_default_instance()) delete redbloodcellcount_;
  if (this != internal_default_instance()) delete shuntfraction_;
  if (this != internal_default_instance()) delete strongiondifference_;
  if (this != internal_default_instance()) delete totalproteinconcentration_;
  if (this != internal_default_instance()) delete volumefractionneutrallipidinplasma_;
  if (this != internal_default_instance()) delete volumefractionneutralphospholipidinplasma_;
  if (this != internal_default_instance()) delete whitebloodcellcount_;
  if (this != internal_default_instance()) delete arterialcarbondioxidepressure_;
  if (this != internal_default_instance()) delete arterialoxygenpressure_;
  if (this != internal_default_instance()) delete pulmonaryarterialcarbondioxidepressure_;
  if (this != internal_default_instance()) delete pulmonaryarterialoxygenpressure_;
  if (this != internal_default_instance()) delete pulmonaryvenouscarbondioxidepressure_;
  if (this != internal_default_instance()) delete pulmonaryvenousoxygenpressure_;
  if (this != internal_default_instance()) delete venouscarbondioxidepressure_;
  if (this != internal_default_instance()) delete venousoxygenpressure_;
}

void BloodChemistrySystemData::ArenaDtor(void* object) {
  BloodChemistrySystemData* _this = reinterpret_cast< BloodChemistrySystemData* >(object);
  (void)_this;
}
void BloodChemistrySystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BloodChemistrySystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BloodChemistrySystemData& BloodChemistrySystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BloodChemistrySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void BloodChemistrySystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.BloodChemistrySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && blooddensity_ != nullptr) {
    delete blooddensity_;
  }
  blooddensity_ = nullptr;
  if (GetArena() == nullptr && bloodph_ != nullptr) {
    delete bloodph_;
  }
  bloodph_ = nullptr;
  if (GetArena() == nullptr && bloodspecificheat_ != nullptr) {
    delete bloodspecificheat_;
  }
  bloodspecificheat_ = nullptr;
  if (GetArena() == nullptr && bloodureanitrogenconcentration_ != nullptr) {
    delete bloodureanitrogenconcentration_;
  }
  bloodureanitrogenconcentration_ = nullptr;
  if (GetArena() == nullptr && carbondioxidesaturation_ != nullptr) {
    delete carbondioxidesaturation_;
  }
  carbondioxidesaturation_ = nullptr;
  if (GetArena() == nullptr && carbonmonoxidesaturation_ != nullptr) {
    delete carbonmonoxidesaturation_;
  }
  carbonmonoxidesaturation_ = nullptr;
  if (GetArena() == nullptr && hematocrit_ != nullptr) {
    delete hematocrit_;
  }
  hematocrit_ = nullptr;
  if (GetArena() == nullptr && hemoglobincontent_ != nullptr) {
    delete hemoglobincontent_;
  }
  hemoglobincontent_ = nullptr;
  if (GetArena() == nullptr && oxygensaturation_ != nullptr) {
    delete oxygensaturation_;
  }
  oxygensaturation_ = nullptr;
  if (GetArena() == nullptr && phosphate_ != nullptr) {
    delete phosphate_;
  }
  phosphate_ = nullptr;
  if (GetArena() == nullptr && plasmavolume_ != nullptr) {
    delete plasmavolume_;
  }
  plasmavolume_ = nullptr;
  if (GetArena() == nullptr && pulseoximetry_ != nullptr) {
    delete pulseoximetry_;
  }
  pulseoximetry_ = nullptr;
  if (GetArena() == nullptr && redbloodcellcount_ != nullptr) {
    delete redbloodcellcount_;
  }
  redbloodcellcount_ = nullptr;
  if (GetArena() == nullptr && shuntfraction_ != nullptr) {
    delete shuntfraction_;
  }
  shuntfraction_ = nullptr;
  if (GetArena() == nullptr && strongiondifference_ != nullptr) {
    delete strongiondifference_;
  }
  strongiondifference_ = nullptr;
  if (GetArena() == nullptr && totalproteinconcentration_ != nullptr) {
    delete totalproteinconcentration_;
  }
  totalproteinconcentration_ = nullptr;
  if (GetArena() == nullptr && volumefractionneutrallipidinplasma_ != nullptr) {
    delete volumefractionneutrallipidinplasma_;
  }
  volumefractionneutrallipidinplasma_ = nullptr;
  if (GetArena() == nullptr && volumefractionneutralphospholipidinplasma_ != nullptr) {
    delete volumefractionneutralphospholipidinplasma_;
  }
  volumefractionneutralphospholipidinplasma_ = nullptr;
  if (GetArena() == nullptr && whitebloodcellcount_ != nullptr) {
    delete whitebloodcellcount_;
  }
  whitebloodcellcount_ = nullptr;
  if (GetArena() == nullptr && arterialcarbondioxidepressure_ != nullptr) {
    delete arterialcarbondioxidepressure_;
  }
  arterialcarbondioxidepressure_ = nullptr;
  if (GetArena() == nullptr && arterialoxygenpressure_ != nullptr) {
    delete arterialoxygenpressure_;
  }
  arterialoxygenpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonaryarterialcarbondioxidepressure_ != nullptr) {
    delete pulmonaryarterialcarbondioxidepressure_;
  }
  pulmonaryarterialcarbondioxidepressure_ = nullptr;
  if (GetArena() == nullptr && pulmonaryarterialoxygenpressure_ != nullptr) {
    delete pulmonaryarterialoxygenpressure_;
  }
  pulmonaryarterialoxygenpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonaryvenouscarbondioxidepressure_ != nullptr) {
    delete pulmonaryvenouscarbondioxidepressure_;
  }
  pulmonaryvenouscarbondioxidepressure_ = nullptr;
  if (GetArena() == nullptr && pulmonaryvenousoxygenpressure_ != nullptr) {
    delete pulmonaryvenousoxygenpressure_;
  }
  pulmonaryvenousoxygenpressure_ = nullptr;
  if (GetArena() == nullptr && venouscarbondioxidepressure_ != nullptr) {
    delete venouscarbondioxidepressure_;
  }
  venouscarbondioxidepressure_ = nullptr;
  if (GetArena() == nullptr && venousoxygenpressure_ != nullptr) {
    delete venousoxygenpressure_;
  }
  venousoxygenpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BloodChemistrySystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarMassPerVolumeData BloodDensity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blooddensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BloodPH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BloodSpecificHeat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodspecificheat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData BloodUreaNitrogenConcentration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodureanitrogenconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data CarbonDioxideSaturation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbondioxidesaturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data CarbonMonoxideSaturation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbonmonoxidesaturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hematocrit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData HemoglobinContent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hemoglobincontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data OxygenSaturation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygensaturation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData Phosphate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_phosphate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData PlasmaVolume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_plasmavolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data PulseOximetry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulseoximetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbloodcellcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ShuntFraction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_shuntfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData StrongIonDifference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_strongiondifference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProteinConcentration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalproteinconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralLipidInPlasma = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_volumefractionneutrallipidinplasma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralPhospholipidInPlasma = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_volumefractionneutralphospholipidinplasma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_whitebloodcellcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ArterialCarbonDioxidePressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialcarbondioxidepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ArterialOxygenPressure = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialoxygenpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialCarbonDioxidePressure = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryarterialcarbondioxidepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialOxygenPressure = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryarterialoxygenpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousCarbonDioxidePressure = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryvenouscarbondioxidepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousOxygenPressure = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryvenousoxygenpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData VenousCarbonDioxidePressure = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_venouscarbondioxidepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData VenousOxygenPressure = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_venousoxygenpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BloodChemistrySystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.BloodChemistrySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodDensity = 1;
  if (this->has_blooddensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blooddensity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData BloodPH = 2;
  if (this->has_bloodph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bloodph(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BloodSpecificHeat = 3;
  if (this->has_bloodspecificheat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bloodspecificheat(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodUreaNitrogenConcentration = 4;
  if (this->has_bloodureanitrogenconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bloodureanitrogenconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbonDioxideSaturation = 5;
  if (this->has_carbondioxidesaturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::carbondioxidesaturation(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbonMonoxideSaturation = 6;
  if (this->has_carbonmonoxidesaturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::carbonmonoxidesaturation(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 7;
  if (this->has_hematocrit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hematocrit(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData HemoglobinContent = 8;
  if (this->has_hemoglobincontent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::hemoglobincontent(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data OxygenSaturation = 9;
  if (this->has_oxygensaturation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::oxygensaturation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Phosphate = 10;
  if (this->has_phosphate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::phosphate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData PlasmaVolume = 11;
  if (this->has_plasmavolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::plasmavolume(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data PulseOximetry = 12;
  if (this->has_pulseoximetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pulseoximetry(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 13;
  if (this->has_redbloodcellcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::redbloodcellcount(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ShuntFraction = 14;
  if (this->has_shuntfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::shuntfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData StrongIonDifference = 15;
  if (this->has_strongiondifference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::strongiondifference(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProteinConcentration = 16;
  if (this->has_totalproteinconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::totalproteinconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralLipidInPlasma = 17;
  if (this->has_volumefractionneutrallipidinplasma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::volumefractionneutrallipidinplasma(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralPhospholipidInPlasma = 18;
  if (this->has_volumefractionneutralphospholipidinplasma()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::volumefractionneutralphospholipidinplasma(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 19;
  if (this->has_whitebloodcellcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::whitebloodcellcount(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData ArterialCarbonDioxidePressure = 20;
  if (this->has_arterialcarbondioxidepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::arterialcarbondioxidepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData ArterialOxygenPressure = 21;
  if (this->has_arterialoxygenpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::arterialoxygenpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialCarbonDioxidePressure = 22;
  if (this->has_pulmonaryarterialcarbondioxidepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::pulmonaryarterialcarbondioxidepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialOxygenPressure = 23;
  if (this->has_pulmonaryarterialoxygenpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::pulmonaryarterialoxygenpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousCarbonDioxidePressure = 24;
  if (this->has_pulmonaryvenouscarbondioxidepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::pulmonaryvenouscarbondioxidepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousOxygenPressure = 25;
  if (this->has_pulmonaryvenousoxygenpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::pulmonaryvenousoxygenpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData VenousCarbonDioxidePressure = 26;
  if (this->has_venouscarbondioxidepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::venouscarbondioxidepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData VenousOxygenPressure = 27;
  if (this->has_venousoxygenpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::venousoxygenpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.BloodChemistrySystemData)
  return target;
}

size_t BloodChemistrySystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.BloodChemistrySystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodDensity = 1;
  if (this->has_blooddensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blooddensity_);
  }

  // .pulse.cdm.bind.ScalarData BloodPH = 2;
  if (this->has_bloodph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodph_);
  }

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BloodSpecificHeat = 3;
  if (this->has_bloodspecificheat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodspecificheat_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodUreaNitrogenConcentration = 4;
  if (this->has_bloodureanitrogenconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodureanitrogenconcentration_);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbonDioxideSaturation = 5;
  if (this->has_carbondioxidesaturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbondioxidesaturation_);
  }

  // .pulse.cdm.bind.Scalar0To1Data CarbonMonoxideSaturation = 6;
  if (this->has_carbonmonoxidesaturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbonmonoxidesaturation_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 7;
  if (this->has_hematocrit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hematocrit_);
  }

  // .pulse.cdm.bind.ScalarMassData HemoglobinContent = 8;
  if (this->has_hemoglobincontent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hemoglobincontent_);
  }

  // .pulse.cdm.bind.Scalar0To1Data OxygenSaturation = 9;
  if (this->has_oxygensaturation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygensaturation_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Phosphate = 10;
  if (this->has_phosphate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phosphate_);
  }

  // .pulse.cdm.bind.ScalarVolumeData PlasmaVolume = 11;
  if (this->has_plasmavolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plasmavolume_);
  }

  // .pulse.cdm.bind.Scalar0To1Data PulseOximetry = 12;
  if (this->has_pulseoximetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulseoximetry_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 13;
  if (this->has_redbloodcellcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redbloodcellcount_);
  }

  // .pulse.cdm.bind.Scalar0To1Data ShuntFraction = 14;
  if (this->has_shuntfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shuntfraction_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData StrongIonDifference = 15;
  if (this->has_strongiondifference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strongiondifference_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProteinConcentration = 16;
  if (this->has_totalproteinconcentration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalproteinconcentration_);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralLipidInPlasma = 17;
  if (this->has_volumefractionneutrallipidinplasma()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volumefractionneutrallipidinplasma_);
  }

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralPhospholipidInPlasma = 18;
  if (this->has_volumefractionneutralphospholipidinplasma()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volumefractionneutralphospholipidinplasma_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 19;
  if (this->has_whitebloodcellcount()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *whitebloodcellcount_);
  }

  // .pulse.cdm.bind.ScalarPressureData ArterialCarbonDioxidePressure = 20;
  if (this->has_arterialcarbondioxidepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialcarbondioxidepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData ArterialOxygenPressure = 21;
  if (this->has_arterialoxygenpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialoxygenpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialCarbonDioxidePressure = 22;
  if (this->has_pulmonaryarterialcarbondioxidepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryarterialcarbondioxidepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialOxygenPressure = 23;
  if (this->has_pulmonaryarterialoxygenpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryarterialoxygenpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousCarbonDioxidePressure = 24;
  if (this->has_pulmonaryvenouscarbondioxidepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryvenouscarbondioxidepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousOxygenPressure = 25;
  if (this->has_pulmonaryvenousoxygenpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryvenousoxygenpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData VenousCarbonDioxidePressure = 26;
  if (this->has_venouscarbondioxidepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *venouscarbondioxidepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData VenousOxygenPressure = 27;
  if (this->has_venousoxygenpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *venousoxygenpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BloodChemistrySystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.BloodChemistrySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const BloodChemistrySystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BloodChemistrySystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.BloodChemistrySystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.BloodChemistrySystemData)
    MergeFrom(*source);
  }
}

void BloodChemistrySystemData::MergeFrom(const BloodChemistrySystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.BloodChemistrySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blooddensity()) {
    _internal_mutable_blooddensity()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_blooddensity());
  }
  if (from.has_bloodph()) {
    _internal_mutable_bloodph()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_bloodph());
  }
  if (from.has_bloodspecificheat()) {
    _internal_mutable_bloodspecificheat()->::pulse::cdm::bind::ScalarHeatCapacitancePerMassData::MergeFrom(from._internal_bloodspecificheat());
  }
  if (from.has_bloodureanitrogenconcentration()) {
    _internal_mutable_bloodureanitrogenconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_bloodureanitrogenconcentration());
  }
  if (from.has_carbondioxidesaturation()) {
    _internal_mutable_carbondioxidesaturation()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_carbondioxidesaturation());
  }
  if (from.has_carbonmonoxidesaturation()) {
    _internal_mutable_carbonmonoxidesaturation()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_carbonmonoxidesaturation());
  }
  if (from.has_hematocrit()) {
    _internal_mutable_hematocrit()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_hematocrit());
  }
  if (from.has_hemoglobincontent()) {
    _internal_mutable_hemoglobincontent()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_hemoglobincontent());
  }
  if (from.has_oxygensaturation()) {
    _internal_mutable_oxygensaturation()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_oxygensaturation());
  }
  if (from.has_phosphate()) {
    _internal_mutable_phosphate()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_phosphate());
  }
  if (from.has_plasmavolume()) {
    _internal_mutable_plasmavolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_plasmavolume());
  }
  if (from.has_pulseoximetry()) {
    _internal_mutable_pulseoximetry()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_pulseoximetry());
  }
  if (from.has_redbloodcellcount()) {
    _internal_mutable_redbloodcellcount()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_redbloodcellcount());
  }
  if (from.has_shuntfraction()) {
    _internal_mutable_shuntfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_shuntfraction());
  }
  if (from.has_strongiondifference()) {
    _internal_mutable_strongiondifference()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_strongiondifference());
  }
  if (from.has_totalproteinconcentration()) {
    _internal_mutable_totalproteinconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_totalproteinconcentration());
  }
  if (from.has_volumefractionneutrallipidinplasma()) {
    _internal_mutable_volumefractionneutrallipidinplasma()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_volumefractionneutrallipidinplasma());
  }
  if (from.has_volumefractionneutralphospholipidinplasma()) {
    _internal_mutable_volumefractionneutralphospholipidinplasma()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_volumefractionneutralphospholipidinplasma());
  }
  if (from.has_whitebloodcellcount()) {
    _internal_mutable_whitebloodcellcount()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_whitebloodcellcount());
  }
  if (from.has_arterialcarbondioxidepressure()) {
    _internal_mutable_arterialcarbondioxidepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_arterialcarbondioxidepressure());
  }
  if (from.has_arterialoxygenpressure()) {
    _internal_mutable_arterialoxygenpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_arterialoxygenpressure());
  }
  if (from.has_pulmonaryarterialcarbondioxidepressure()) {
    _internal_mutable_pulmonaryarterialcarbondioxidepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonaryarterialcarbondioxidepressure());
  }
  if (from.has_pulmonaryarterialoxygenpressure()) {
    _internal_mutable_pulmonaryarterialoxygenpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonaryarterialoxygenpressure());
  }
  if (from.has_pulmonaryvenouscarbondioxidepressure()) {
    _internal_mutable_pulmonaryvenouscarbondioxidepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonaryvenouscarbondioxidepressure());
  }
  if (from.has_pulmonaryvenousoxygenpressure()) {
    _internal_mutable_pulmonaryvenousoxygenpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonaryvenousoxygenpressure());
  }
  if (from.has_venouscarbondioxidepressure()) {
    _internal_mutable_venouscarbondioxidepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_venouscarbondioxidepressure());
  }
  if (from.has_venousoxygenpressure()) {
    _internal_mutable_venousoxygenpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_venousoxygenpressure());
  }
}

void BloodChemistrySystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.BloodChemistrySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloodChemistrySystemData::CopyFrom(const BloodChemistrySystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.BloodChemistrySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloodChemistrySystemData::IsInitialized() const {
  return true;
}

void BloodChemistrySystemData::InternalSwap(BloodChemistrySystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BloodChemistrySystemData, venousoxygenpressure_)
      + sizeof(BloodChemistrySystemData::venousoxygenpressure_)
      - PROTOBUF_FIELD_OFFSET(BloodChemistrySystemData, blooddensity_)>(
          reinterpret_cast<char*>(&blooddensity_),
          reinterpret_cast<char*>(&other->blooddensity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BloodChemistrySystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CardiovascularSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressureData& arterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& bloodvolume(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData& cardiacindex(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& cardiacoutput(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& centralvenouspressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& cerebralbloodflow(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& cerebralperfusionpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& diastolicarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& heartejectionfraction(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& heartrate(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& heartstrokevolume(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& intracranialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanarterialcarbondioxidepartialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanarterialcarbondioxidepartialpressuredelta(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meancentralvenouspressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& meanskinflow(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonarycapillarieswedgepressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonarydiastolicarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonarymeanarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonarymeancapillaryflow(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonarymeanshuntflow(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulmonarysystolicarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& pulmonaryvascularresistance(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData& pulmonaryvascularresistanceindex(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulsepressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& systemicvascularresistance(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& systolicarterialpressure(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalhemorrhagerate(const CardiovascularSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totalhemorrhagedvolume(const CardiovascularSystemData* msg);
};

const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::arterialpressure(const CardiovascularSystemData* msg) {
  return *msg->arterialpressure_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
CardiovascularSystemData::_Internal::bloodvolume(const CardiovascularSystemData* msg) {
  return *msg->bloodvolume_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData&
CardiovascularSystemData::_Internal::cardiacindex(const CardiovascularSystemData* msg) {
  return *msg->cardiacindex_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::cardiacoutput(const CardiovascularSystemData* msg) {
  return *msg->cardiacoutput_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::centralvenouspressure(const CardiovascularSystemData* msg) {
  return *msg->centralvenouspressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::cerebralbloodflow(const CardiovascularSystemData* msg) {
  return *msg->cerebralbloodflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::cerebralperfusionpressure(const CardiovascularSystemData* msg) {
  return *msg->cerebralperfusionpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::diastolicarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->diastolicarterialpressure_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
CardiovascularSystemData::_Internal::heartejectionfraction(const CardiovascularSystemData* msg) {
  return *msg->heartejectionfraction_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
CardiovascularSystemData::_Internal::heartrate(const CardiovascularSystemData* msg) {
  return *msg->heartrate_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
CardiovascularSystemData::_Internal::heartstrokevolume(const CardiovascularSystemData* msg) {
  return *msg->heartstrokevolume_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::intracranialpressure(const CardiovascularSystemData* msg) {
  return *msg->intracranialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::meanarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->meanarterialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::meanarterialcarbondioxidepartialpressure(const CardiovascularSystemData* msg) {
  return *msg->meanarterialcarbondioxidepartialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::meanarterialcarbondioxidepartialpressuredelta(const CardiovascularSystemData* msg) {
  return *msg->meanarterialcarbondioxidepartialpressuredelta_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::meancentralvenouspressure(const CardiovascularSystemData* msg) {
  return *msg->meancentralvenouspressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::meanskinflow(const CardiovascularSystemData* msg) {
  return *msg->meanskinflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulmonaryarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->pulmonaryarterialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulmonarycapillarieswedgepressure(const CardiovascularSystemData* msg) {
  return *msg->pulmonarycapillarieswedgepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulmonarydiastolicarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->pulmonarydiastolicarterialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulmonarymeanarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->pulmonarymeanarterialpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::pulmonarymeancapillaryflow(const CardiovascularSystemData* msg) {
  return *msg->pulmonarymeancapillaryflow_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::pulmonarymeanshuntflow(const CardiovascularSystemData* msg) {
  return *msg->pulmonarymeanshuntflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulmonarysystolicarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->pulmonarysystolicarterialpressure_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
CardiovascularSystemData::_Internal::pulmonaryvascularresistance(const CardiovascularSystemData* msg) {
  return *msg->pulmonaryvascularresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData&
CardiovascularSystemData::_Internal::pulmonaryvascularresistanceindex(const CardiovascularSystemData* msg) {
  return *msg->pulmonaryvascularresistanceindex_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::pulsepressure(const CardiovascularSystemData* msg) {
  return *msg->pulsepressure_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
CardiovascularSystemData::_Internal::systemicvascularresistance(const CardiovascularSystemData* msg) {
  return *msg->systemicvascularresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
CardiovascularSystemData::_Internal::systolicarterialpressure(const CardiovascularSystemData* msg) {
  return *msg->systolicarterialpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
CardiovascularSystemData::_Internal::totalhemorrhagerate(const CardiovascularSystemData* msg) {
  return *msg->totalhemorrhagerate_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
CardiovascularSystemData::_Internal::totalhemorrhagedvolume(const CardiovascularSystemData* msg) {
  return *msg->totalhemorrhagedvolume_;
}
void CardiovascularSystemData::clear_arterialpressure() {
  if (GetArena() == nullptr && arterialpressure_ != nullptr) {
    delete arterialpressure_;
  }
  arterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_bloodvolume() {
  if (GetArena() == nullptr && bloodvolume_ != nullptr) {
    delete bloodvolume_;
  }
  bloodvolume_ = nullptr;
}
void CardiovascularSystemData::clear_cardiacindex() {
  if (GetArena() == nullptr && cardiacindex_ != nullptr) {
    delete cardiacindex_;
  }
  cardiacindex_ = nullptr;
}
void CardiovascularSystemData::clear_cardiacoutput() {
  if (GetArena() == nullptr && cardiacoutput_ != nullptr) {
    delete cardiacoutput_;
  }
  cardiacoutput_ = nullptr;
}
void CardiovascularSystemData::clear_centralvenouspressure() {
  if (GetArena() == nullptr && centralvenouspressure_ != nullptr) {
    delete centralvenouspressure_;
  }
  centralvenouspressure_ = nullptr;
}
void CardiovascularSystemData::clear_cerebralbloodflow() {
  if (GetArena() == nullptr && cerebralbloodflow_ != nullptr) {
    delete cerebralbloodflow_;
  }
  cerebralbloodflow_ = nullptr;
}
void CardiovascularSystemData::clear_cerebralperfusionpressure() {
  if (GetArena() == nullptr && cerebralperfusionpressure_ != nullptr) {
    delete cerebralperfusionpressure_;
  }
  cerebralperfusionpressure_ = nullptr;
}
void CardiovascularSystemData::clear_diastolicarterialpressure() {
  if (GetArena() == nullptr && diastolicarterialpressure_ != nullptr) {
    delete diastolicarterialpressure_;
  }
  diastolicarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_heartejectionfraction() {
  if (GetArena() == nullptr && heartejectionfraction_ != nullptr) {
    delete heartejectionfraction_;
  }
  heartejectionfraction_ = nullptr;
}
void CardiovascularSystemData::clear_heartrate() {
  if (GetArena() == nullptr && heartrate_ != nullptr) {
    delete heartrate_;
  }
  heartrate_ = nullptr;
}
void CardiovascularSystemData::clear_heartstrokevolume() {
  if (GetArena() == nullptr && heartstrokevolume_ != nullptr) {
    delete heartstrokevolume_;
  }
  heartstrokevolume_ = nullptr;
}
void CardiovascularSystemData::clear_intracranialpressure() {
  if (GetArena() == nullptr && intracranialpressure_ != nullptr) {
    delete intracranialpressure_;
  }
  intracranialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_meanarterialpressure() {
  if (GetArena() == nullptr && meanarterialpressure_ != nullptr) {
    delete meanarterialpressure_;
  }
  meanarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_meanarterialcarbondioxidepartialpressure() {
  if (GetArena() == nullptr && meanarterialcarbondioxidepartialpressure_ != nullptr) {
    delete meanarterialcarbondioxidepartialpressure_;
  }
  meanarterialcarbondioxidepartialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_meanarterialcarbondioxidepartialpressuredelta() {
  if (GetArena() == nullptr && meanarterialcarbondioxidepartialpressuredelta_ != nullptr) {
    delete meanarterialcarbondioxidepartialpressuredelta_;
  }
  meanarterialcarbondioxidepartialpressuredelta_ = nullptr;
}
void CardiovascularSystemData::clear_meancentralvenouspressure() {
  if (GetArena() == nullptr && meancentralvenouspressure_ != nullptr) {
    delete meancentralvenouspressure_;
  }
  meancentralvenouspressure_ = nullptr;
}
void CardiovascularSystemData::clear_meanskinflow() {
  if (GetArena() == nullptr && meanskinflow_ != nullptr) {
    delete meanskinflow_;
  }
  meanskinflow_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonaryarterialpressure() {
  if (GetArena() == nullptr && pulmonaryarterialpressure_ != nullptr) {
    delete pulmonaryarterialpressure_;
  }
  pulmonaryarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarycapillarieswedgepressure() {
  if (GetArena() == nullptr && pulmonarycapillarieswedgepressure_ != nullptr) {
    delete pulmonarycapillarieswedgepressure_;
  }
  pulmonarycapillarieswedgepressure_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarydiastolicarterialpressure() {
  if (GetArena() == nullptr && pulmonarydiastolicarterialpressure_ != nullptr) {
    delete pulmonarydiastolicarterialpressure_;
  }
  pulmonarydiastolicarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarymeanarterialpressure() {
  if (GetArena() == nullptr && pulmonarymeanarterialpressure_ != nullptr) {
    delete pulmonarymeanarterialpressure_;
  }
  pulmonarymeanarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarymeancapillaryflow() {
  if (GetArena() == nullptr && pulmonarymeancapillaryflow_ != nullptr) {
    delete pulmonarymeancapillaryflow_;
  }
  pulmonarymeancapillaryflow_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarymeanshuntflow() {
  if (GetArena() == nullptr && pulmonarymeanshuntflow_ != nullptr) {
    delete pulmonarymeanshuntflow_;
  }
  pulmonarymeanshuntflow_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonarysystolicarterialpressure() {
  if (GetArena() == nullptr && pulmonarysystolicarterialpressure_ != nullptr) {
    delete pulmonarysystolicarterialpressure_;
  }
  pulmonarysystolicarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonaryvascularresistance() {
  if (GetArena() == nullptr && pulmonaryvascularresistance_ != nullptr) {
    delete pulmonaryvascularresistance_;
  }
  pulmonaryvascularresistance_ = nullptr;
}
void CardiovascularSystemData::clear_pulmonaryvascularresistanceindex() {
  if (GetArena() == nullptr && pulmonaryvascularresistanceindex_ != nullptr) {
    delete pulmonaryvascularresistanceindex_;
  }
  pulmonaryvascularresistanceindex_ = nullptr;
}
void CardiovascularSystemData::clear_pulsepressure() {
  if (GetArena() == nullptr && pulsepressure_ != nullptr) {
    delete pulsepressure_;
  }
  pulsepressure_ = nullptr;
}
void CardiovascularSystemData::clear_systemicvascularresistance() {
  if (GetArena() == nullptr && systemicvascularresistance_ != nullptr) {
    delete systemicvascularresistance_;
  }
  systemicvascularresistance_ = nullptr;
}
void CardiovascularSystemData::clear_systolicarterialpressure() {
  if (GetArena() == nullptr && systolicarterialpressure_ != nullptr) {
    delete systolicarterialpressure_;
  }
  systolicarterialpressure_ = nullptr;
}
void CardiovascularSystemData::clear_totalhemorrhagerate() {
  if (GetArena() == nullptr && totalhemorrhagerate_ != nullptr) {
    delete totalhemorrhagerate_;
  }
  totalhemorrhagerate_ = nullptr;
}
void CardiovascularSystemData::clear_totalhemorrhagedvolume() {
  if (GetArena() == nullptr && totalhemorrhagedvolume_ != nullptr) {
    delete totalhemorrhagedvolume_;
  }
  totalhemorrhagedvolume_ = nullptr;
}
CardiovascularSystemData::CardiovascularSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CardiovascularSystemData)
}
CardiovascularSystemData::CardiovascularSystemData(const CardiovascularSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arterialpressure()) {
    arterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.arterialpressure_);
  } else {
    arterialpressure_ = nullptr;
  }
  if (from._internal_has_bloodvolume()) {
    bloodvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.bloodvolume_);
  } else {
    bloodvolume_ = nullptr;
  }
  if (from._internal_has_cardiacindex()) {
    cardiacindex_ = new ::pulse::cdm::bind::ScalarVolumePerTimeAreaData(*from.cardiacindex_);
  } else {
    cardiacindex_ = nullptr;
  }
  if (from._internal_has_cardiacoutput()) {
    cardiacoutput_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.cardiacoutput_);
  } else {
    cardiacoutput_ = nullptr;
  }
  if (from._internal_has_centralvenouspressure()) {
    centralvenouspressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.centralvenouspressure_);
  } else {
    centralvenouspressure_ = nullptr;
  }
  if (from._internal_has_cerebralbloodflow()) {
    cerebralbloodflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.cerebralbloodflow_);
  } else {
    cerebralbloodflow_ = nullptr;
  }
  if (from._internal_has_cerebralperfusionpressure()) {
    cerebralperfusionpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.cerebralperfusionpressure_);
  } else {
    cerebralperfusionpressure_ = nullptr;
  }
  if (from._internal_has_diastolicarterialpressure()) {
    diastolicarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.diastolicarterialpressure_);
  } else {
    diastolicarterialpressure_ = nullptr;
  }
  if (from._internal_has_heartejectionfraction()) {
    heartejectionfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.heartejectionfraction_);
  } else {
    heartejectionfraction_ = nullptr;
  }
  if (from._internal_has_heartrate()) {
    heartrate_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.heartrate_);
  } else {
    heartrate_ = nullptr;
  }
  if (from._internal_has_heartstrokevolume()) {
    heartstrokevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.heartstrokevolume_);
  } else {
    heartstrokevolume_ = nullptr;
  }
  if (from._internal_has_intracranialpressure()) {
    intracranialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.intracranialpressure_);
  } else {
    intracranialpressure_ = nullptr;
  }
  if (from._internal_has_meanarterialpressure()) {
    meanarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanarterialpressure_);
  } else {
    meanarterialpressure_ = nullptr;
  }
  if (from._internal_has_meanarterialcarbondioxidepartialpressure()) {
    meanarterialcarbondioxidepartialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanarterialcarbondioxidepartialpressure_);
  } else {
    meanarterialcarbondioxidepartialpressure_ = nullptr;
  }
  if (from._internal_has_meanarterialcarbondioxidepartialpressuredelta()) {
    meanarterialcarbondioxidepartialpressuredelta_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanarterialcarbondioxidepartialpressuredelta_);
  } else {
    meanarterialcarbondioxidepartialpressuredelta_ = nullptr;
  }
  if (from._internal_has_meancentralvenouspressure()) {
    meancentralvenouspressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meancentralvenouspressure_);
  } else {
    meancentralvenouspressure_ = nullptr;
  }
  if (from._internal_has_meanskinflow()) {
    meanskinflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.meanskinflow_);
  } else {
    meanskinflow_ = nullptr;
  }
  if (from._internal_has_pulmonaryarterialpressure()) {
    pulmonaryarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonaryarterialpressure_);
  } else {
    pulmonaryarterialpressure_ = nullptr;
  }
  if (from._internal_has_pulmonarycapillarieswedgepressure()) {
    pulmonarycapillarieswedgepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonarycapillarieswedgepressure_);
  } else {
    pulmonarycapillarieswedgepressure_ = nullptr;
  }
  if (from._internal_has_pulmonarydiastolicarterialpressure()) {
    pulmonarydiastolicarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonarydiastolicarterialpressure_);
  } else {
    pulmonarydiastolicarterialpressure_ = nullptr;
  }
  if (from._internal_has_pulmonarymeanarterialpressure()) {
    pulmonarymeanarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonarymeanarterialpressure_);
  } else {
    pulmonarymeanarterialpressure_ = nullptr;
  }
  if (from._internal_has_pulmonarymeancapillaryflow()) {
    pulmonarymeancapillaryflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.pulmonarymeancapillaryflow_);
  } else {
    pulmonarymeancapillaryflow_ = nullptr;
  }
  if (from._internal_has_pulmonarymeanshuntflow()) {
    pulmonarymeanshuntflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.pulmonarymeanshuntflow_);
  } else {
    pulmonarymeanshuntflow_ = nullptr;
  }
  if (from._internal_has_pulmonarysystolicarterialpressure()) {
    pulmonarysystolicarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulmonarysystolicarterialpressure_);
  } else {
    pulmonarysystolicarterialpressure_ = nullptr;
  }
  if (from._internal_has_pulmonaryvascularresistance()) {
    pulmonaryvascularresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.pulmonaryvascularresistance_);
  } else {
    pulmonaryvascularresistance_ = nullptr;
  }
  if (from._internal_has_pulmonaryvascularresistanceindex()) {
    pulmonaryvascularresistanceindex_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData(*from.pulmonaryvascularresistanceindex_);
  } else {
    pulmonaryvascularresistanceindex_ = nullptr;
  }
  if (from._internal_has_pulsepressure()) {
    pulsepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulsepressure_);
  } else {
    pulsepressure_ = nullptr;
  }
  if (from._internal_has_systemicvascularresistance()) {
    systemicvascularresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.systemicvascularresistance_);
  } else {
    systemicvascularresistance_ = nullptr;
  }
  if (from._internal_has_systolicarterialpressure()) {
    systolicarterialpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.systolicarterialpressure_);
  } else {
    systolicarterialpressure_ = nullptr;
  }
  if (from._internal_has_totalhemorrhagerate()) {
    totalhemorrhagerate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.totalhemorrhagerate_);
  } else {
    totalhemorrhagerate_ = nullptr;
  }
  if (from._internal_has_totalhemorrhagedvolume()) {
    totalhemorrhagedvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totalhemorrhagedvolume_);
  } else {
    totalhemorrhagedvolume_ = nullptr;
  }
  heartrhythm_ = from.heartrhythm_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CardiovascularSystemData)
}

void CardiovascularSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&arterialpressure_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heartrhythm_) -
      reinterpret_cast<char*>(&arterialpressure_)) + sizeof(heartrhythm_));
}

CardiovascularSystemData::~CardiovascularSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CardiovascularSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardiovascularSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete arterialpressure_;
  if (this != internal_default_instance()) delete bloodvolume_;
  if (this != internal_default_instance()) delete cardiacindex_;
  if (this != internal_default_instance()) delete cardiacoutput_;
  if (this != internal_default_instance()) delete centralvenouspressure_;
  if (this != internal_default_instance()) delete cerebralbloodflow_;
  if (this != internal_default_instance()) delete cerebralperfusionpressure_;
  if (this != internal_default_instance()) delete diastolicarterialpressure_;
  if (this != internal_default_instance()) delete heartejectionfraction_;
  if (this != internal_default_instance()) delete heartrate_;
  if (this != internal_default_instance()) delete heartstrokevolume_;
  if (this != internal_default_instance()) delete intracranialpressure_;
  if (this != internal_default_instance()) delete meanarterialpressure_;
  if (this != internal_default_instance()) delete meanarterialcarbondioxidepartialpressure_;
  if (this != internal_default_instance()) delete meanarterialcarbondioxidepartialpressuredelta_;
  if (this != internal_default_instance()) delete meancentralvenouspressure_;
  if (this != internal_default_instance()) delete meanskinflow_;
  if (this != internal_default_instance()) delete pulmonaryarterialpressure_;
  if (this != internal_default_instance()) delete pulmonarycapillarieswedgepressure_;
  if (this != internal_default_instance()) delete pulmonarydiastolicarterialpressure_;
  if (this != internal_default_instance()) delete pulmonarymeanarterialpressure_;
  if (this != internal_default_instance()) delete pulmonarymeancapillaryflow_;
  if (this != internal_default_instance()) delete pulmonarymeanshuntflow_;
  if (this != internal_default_instance()) delete pulmonarysystolicarterialpressure_;
  if (this != internal_default_instance()) delete pulmonaryvascularresistance_;
  if (this != internal_default_instance()) delete pulmonaryvascularresistanceindex_;
  if (this != internal_default_instance()) delete pulsepressure_;
  if (this != internal_default_instance()) delete systemicvascularresistance_;
  if (this != internal_default_instance()) delete systolicarterialpressure_;
  if (this != internal_default_instance()) delete totalhemorrhagerate_;
  if (this != internal_default_instance()) delete totalhemorrhagedvolume_;
}

void CardiovascularSystemData::ArenaDtor(void* object) {
  CardiovascularSystemData* _this = reinterpret_cast< CardiovascularSystemData* >(object);
  (void)_this;
}
void CardiovascularSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardiovascularSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardiovascularSystemData& CardiovascularSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardiovascularSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void CardiovascularSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CardiovascularSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && arterialpressure_ != nullptr) {
    delete arterialpressure_;
  }
  arterialpressure_ = nullptr;
  if (GetArena() == nullptr && bloodvolume_ != nullptr) {
    delete bloodvolume_;
  }
  bloodvolume_ = nullptr;
  if (GetArena() == nullptr && cardiacindex_ != nullptr) {
    delete cardiacindex_;
  }
  cardiacindex_ = nullptr;
  if (GetArena() == nullptr && cardiacoutput_ != nullptr) {
    delete cardiacoutput_;
  }
  cardiacoutput_ = nullptr;
  if (GetArena() == nullptr && centralvenouspressure_ != nullptr) {
    delete centralvenouspressure_;
  }
  centralvenouspressure_ = nullptr;
  if (GetArena() == nullptr && cerebralbloodflow_ != nullptr) {
    delete cerebralbloodflow_;
  }
  cerebralbloodflow_ = nullptr;
  if (GetArena() == nullptr && cerebralperfusionpressure_ != nullptr) {
    delete cerebralperfusionpressure_;
  }
  cerebralperfusionpressure_ = nullptr;
  if (GetArena() == nullptr && diastolicarterialpressure_ != nullptr) {
    delete diastolicarterialpressure_;
  }
  diastolicarterialpressure_ = nullptr;
  if (GetArena() == nullptr && heartejectionfraction_ != nullptr) {
    delete heartejectionfraction_;
  }
  heartejectionfraction_ = nullptr;
  if (GetArena() == nullptr && heartrate_ != nullptr) {
    delete heartrate_;
  }
  heartrate_ = nullptr;
  if (GetArena() == nullptr && heartstrokevolume_ != nullptr) {
    delete heartstrokevolume_;
  }
  heartstrokevolume_ = nullptr;
  if (GetArena() == nullptr && intracranialpressure_ != nullptr) {
    delete intracranialpressure_;
  }
  intracranialpressure_ = nullptr;
  if (GetArena() == nullptr && meanarterialpressure_ != nullptr) {
    delete meanarterialpressure_;
  }
  meanarterialpressure_ = nullptr;
  if (GetArena() == nullptr && meanarterialcarbondioxidepartialpressure_ != nullptr) {
    delete meanarterialcarbondioxidepartialpressure_;
  }
  meanarterialcarbondioxidepartialpressure_ = nullptr;
  if (GetArena() == nullptr && meanarterialcarbondioxidepartialpressuredelta_ != nullptr) {
    delete meanarterialcarbondioxidepartialpressuredelta_;
  }
  meanarterialcarbondioxidepartialpressuredelta_ = nullptr;
  if (GetArena() == nullptr && meancentralvenouspressure_ != nullptr) {
    delete meancentralvenouspressure_;
  }
  meancentralvenouspressure_ = nullptr;
  if (GetArena() == nullptr && meanskinflow_ != nullptr) {
    delete meanskinflow_;
  }
  meanskinflow_ = nullptr;
  if (GetArena() == nullptr && pulmonaryarterialpressure_ != nullptr) {
    delete pulmonaryarterialpressure_;
  }
  pulmonaryarterialpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonarycapillarieswedgepressure_ != nullptr) {
    delete pulmonarycapillarieswedgepressure_;
  }
  pulmonarycapillarieswedgepressure_ = nullptr;
  if (GetArena() == nullptr && pulmonarydiastolicarterialpressure_ != nullptr) {
    delete pulmonarydiastolicarterialpressure_;
  }
  pulmonarydiastolicarterialpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonarymeanarterialpressure_ != nullptr) {
    delete pulmonarymeanarterialpressure_;
  }
  pulmonarymeanarterialpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonarymeancapillaryflow_ != nullptr) {
    delete pulmonarymeancapillaryflow_;
  }
  pulmonarymeancapillaryflow_ = nullptr;
  if (GetArena() == nullptr && pulmonarymeanshuntflow_ != nullptr) {
    delete pulmonarymeanshuntflow_;
  }
  pulmonarymeanshuntflow_ = nullptr;
  if (GetArena() == nullptr && pulmonarysystolicarterialpressure_ != nullptr) {
    delete pulmonarysystolicarterialpressure_;
  }
  pulmonarysystolicarterialpressure_ = nullptr;
  if (GetArena() == nullptr && pulmonaryvascularresistance_ != nullptr) {
    delete pulmonaryvascularresistance_;
  }
  pulmonaryvascularresistance_ = nullptr;
  if (GetArena() == nullptr && pulmonaryvascularresistanceindex_ != nullptr) {
    delete pulmonaryvascularresistanceindex_;
  }
  pulmonaryvascularresistanceindex_ = nullptr;
  if (GetArena() == nullptr && pulsepressure_ != nullptr) {
    delete pulsepressure_;
  }
  pulsepressure_ = nullptr;
  if (GetArena() == nullptr && systemicvascularresistance_ != nullptr) {
    delete systemicvascularresistance_;
  }
  systemicvascularresistance_ = nullptr;
  if (GetArena() == nullptr && systolicarterialpressure_ != nullptr) {
    delete systolicarterialpressure_;
  }
  systolicarterialpressure_ = nullptr;
  if (GetArena() == nullptr && totalhemorrhagerate_ != nullptr) {
    delete totalhemorrhagerate_;
  }
  totalhemorrhagerate_ = nullptr;
  if (GetArena() == nullptr && totalhemorrhagedvolume_ != nullptr) {
    delete totalhemorrhagedvolume_;
  }
  totalhemorrhagedvolume_ = nullptr;
  heartrhythm_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardiovascularSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPressureData ArterialPressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_arterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData BloodVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeAreaData CardiacIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiacindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData CardiacOutput = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardiacoutput(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData CentralVenousPressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_centralvenouspressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData CerebralBloodFlow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cerebralbloodflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData CerebralPerfusionPressure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cerebralperfusionpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_diastolicarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data HeartEjectionFraction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartejectionfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData HeartRate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eHeartRhythm HeartRhythm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_heartrhythm(static_cast<::pulse::cdm::bind::eHeartRhythm>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData HeartStrokeVolume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartstrokevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData IntracranialPressure = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_intracranialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanArterialPressure = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanarterialcarbondioxidepartialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanarterialcarbondioxidepartialpressuredelta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanCentralVenousPressure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancentralvenouspressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData MeanSkinFlow = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanskinflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialPressure = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryCapillariesWedgePressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarycapillarieswedgepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryDiastolicArterialPressure = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarydiastolicarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonaryMeanArterialPressure = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarymeanarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarymeancapillaryflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanShuntFlow = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarymeanshuntflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulmonarySystolicArterialPressure = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarysystolicarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData PulmonaryVascularResistance = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryvascularresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryvascularresistanceindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulsePressure = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulsepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData SystemicVascularResistance = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemicvascularresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressure = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_systolicarterialpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData TotalHemorrhageRate = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalhemorrhagerate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalHemorrhagedVolume = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalhemorrhagedvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardiovascularSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CardiovascularSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData ArterialPressure = 1;
  if (this->has_arterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::arterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData BloodVolume = 2;
  if (this->has_bloodvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bloodvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeAreaData CardiacIndex = 3;
  if (this->has_cardiacindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cardiacindex(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData CardiacOutput = 4;
  if (this->has_cardiacoutput()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cardiacoutput(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData CentralVenousPressure = 5;
  if (this->has_centralvenouspressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::centralvenouspressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData CerebralBloodFlow = 6;
  if (this->has_cerebralbloodflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cerebralbloodflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData CerebralPerfusionPressure = 7;
  if (this->has_cerebralperfusionpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cerebralperfusionpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressure = 8;
  if (this->has_diastolicarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::diastolicarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data HeartEjectionFraction = 9;
  if (this->has_heartejectionfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::heartejectionfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRate = 10;
  if (this->has_heartrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::heartrate(this), target, stream);
  }

  // .pulse.cdm.bind.eHeartRhythm HeartRhythm = 11;
  if (this->heartrhythm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_heartrhythm(), target);
  }

  // .pulse.cdm.bind.ScalarVolumeData HeartStrokeVolume = 12;
  if (this->has_heartstrokevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::heartstrokevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData IntracranialPressure = 13;
  if (this->has_intracranialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::intracranialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressure = 14;
  if (this->has_meanarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::meanarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressure = 15;
  if (this->has_meanarterialcarbondioxidepartialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::meanarterialcarbondioxidepartialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta = 16;
  if (this->has_meanarterialcarbondioxidepartialpressuredelta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::meanarterialcarbondioxidepartialpressuredelta(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanCentralVenousPressure = 17;
  if (this->has_meancentralvenouspressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::meancentralvenouspressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData MeanSkinFlow = 18;
  if (this->has_meanskinflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::meanskinflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialPressure = 19;
  if (this->has_pulmonaryarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pulmonaryarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryCapillariesWedgePressure = 20;
  if (this->has_pulmonarycapillarieswedgepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::pulmonarycapillarieswedgepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryDiastolicArterialPressure = 21;
  if (this->has_pulmonarydiastolicarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::pulmonarydiastolicarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryMeanArterialPressure = 22;
  if (this->has_pulmonarymeanarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::pulmonarymeanarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow = 23;
  if (this->has_pulmonarymeancapillaryflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::pulmonarymeancapillaryflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanShuntFlow = 24;
  if (this->has_pulmonarymeanshuntflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::pulmonarymeanshuntflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonarySystolicArterialPressure = 25;
  if (this->has_pulmonarysystolicarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::pulmonarysystolicarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData PulmonaryVascularResistance = 26;
  if (this->has_pulmonaryvascularresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::pulmonaryvascularresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex = 27;
  if (this->has_pulmonaryvascularresistanceindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::pulmonaryvascularresistanceindex(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulsePressure = 28;
  if (this->has_pulsepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::pulsepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData SystemicVascularResistance = 29;
  if (this->has_systemicvascularresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::systemicvascularresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressure = 30;
  if (this->has_systolicarterialpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::systolicarterialpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalHemorrhageRate = 31;
  if (this->has_totalhemorrhagerate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::totalhemorrhagerate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalHemorrhagedVolume = 32;
  if (this->has_totalhemorrhagedvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::totalhemorrhagedvolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CardiovascularSystemData)
  return target;
}

size_t CardiovascularSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CardiovascularSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData ArterialPressure = 1;
  if (this->has_arterialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arterialpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumeData BloodVolume = 2;
  if (this->has_bloodvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeAreaData CardiacIndex = 3;
  if (this->has_cardiacindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiacindex_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData CardiacOutput = 4;
  if (this->has_cardiacoutput()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cardiacoutput_);
  }

  // .pulse.cdm.bind.ScalarPressureData CentralVenousPressure = 5;
  if (this->has_centralvenouspressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centralvenouspressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData CerebralBloodFlow = 6;
  if (this->has_cerebralbloodflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cerebralbloodflow_);
  }

  // .pulse.cdm.bind.ScalarPressureData CerebralPerfusionPressure = 7;
  if (this->has_cerebralperfusionpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cerebralperfusionpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressure = 8;
  if (this->has_diastolicarterialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diastolicarterialpressure_);
  }

  // .pulse.cdm.bind.Scalar0To1Data HeartEjectionFraction = 9;
  if (this->has_heartejectionfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartejectionfraction_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRate = 10;
  if (this->has_heartrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartrate_);
  }

  // .pulse.cdm.bind.ScalarVolumeData HeartStrokeVolume = 12;
  if (this->has_heartstrokevolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartstrokevolume_);
  }

  // .pulse.cdm.bind.ScalarPressureData IntracranialPressure = 13;
  if (this->has_intracranialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intracranialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressure = 14;
  if (this->has_meanarterialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressure = 15;
  if (this->has_meanarterialcarbondioxidepartialpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanarterialcarbondioxidepartialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta = 16;
  if (this->has_meanarterialcarbondioxidepartialpressuredelta()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanarterialcarbondioxidepartialpressuredelta_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanCentralVenousPressure = 17;
  if (this->has_meancentralvenouspressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancentralvenouspressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData MeanSkinFlow = 18;
  if (this->has_meanskinflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanskinflow_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialPressure = 19;
  if (this->has_pulmonaryarterialpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryCapillariesWedgePressure = 20;
  if (this->has_pulmonarycapillarieswedgepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarycapillarieswedgepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryDiastolicArterialPressure = 21;
  if (this->has_pulmonarydiastolicarterialpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarydiastolicarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonaryMeanArterialPressure = 22;
  if (this->has_pulmonarymeanarterialpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarymeanarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow = 23;
  if (this->has_pulmonarymeancapillaryflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarymeancapillaryflow_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanShuntFlow = 24;
  if (this->has_pulmonarymeanshuntflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarymeanshuntflow_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulmonarySystolicArterialPressure = 25;
  if (this->has_pulmonarysystolicarterialpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarysystolicarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData PulmonaryVascularResistance = 26;
  if (this->has_pulmonaryvascularresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryvascularresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex = 27;
  if (this->has_pulmonaryvascularresistanceindex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryvascularresistanceindex_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulsePressure = 28;
  if (this->has_pulsepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulsepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData SystemicVascularResistance = 29;
  if (this->has_systemicvascularresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemicvascularresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressure = 30;
  if (this->has_systolicarterialpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systolicarterialpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalHemorrhageRate = 31;
  if (this->has_totalhemorrhagerate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalhemorrhagerate_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalHemorrhagedVolume = 32;
  if (this->has_totalhemorrhagedvolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalhemorrhagedvolume_);
  }

  // .pulse.cdm.bind.eHeartRhythm HeartRhythm = 11;
  if (this->heartrhythm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_heartrhythm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardiovascularSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CardiovascularSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const CardiovascularSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardiovascularSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CardiovascularSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CardiovascularSystemData)
    MergeFrom(*source);
  }
}

void CardiovascularSystemData::MergeFrom(const CardiovascularSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CardiovascularSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arterialpressure()) {
    _internal_mutable_arterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_arterialpressure());
  }
  if (from.has_bloodvolume()) {
    _internal_mutable_bloodvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_bloodvolume());
  }
  if (from.has_cardiacindex()) {
    _internal_mutable_cardiacindex()->::pulse::cdm::bind::ScalarVolumePerTimeAreaData::MergeFrom(from._internal_cardiacindex());
  }
  if (from.has_cardiacoutput()) {
    _internal_mutable_cardiacoutput()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_cardiacoutput());
  }
  if (from.has_centralvenouspressure()) {
    _internal_mutable_centralvenouspressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_centralvenouspressure());
  }
  if (from.has_cerebralbloodflow()) {
    _internal_mutable_cerebralbloodflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_cerebralbloodflow());
  }
  if (from.has_cerebralperfusionpressure()) {
    _internal_mutable_cerebralperfusionpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_cerebralperfusionpressure());
  }
  if (from.has_diastolicarterialpressure()) {
    _internal_mutable_diastolicarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_diastolicarterialpressure());
  }
  if (from.has_heartejectionfraction()) {
    _internal_mutable_heartejectionfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_heartejectionfraction());
  }
  if (from.has_heartrate()) {
    _internal_mutable_heartrate()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_heartrate());
  }
  if (from.has_heartstrokevolume()) {
    _internal_mutable_heartstrokevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_heartstrokevolume());
  }
  if (from.has_intracranialpressure()) {
    _internal_mutable_intracranialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_intracranialpressure());
  }
  if (from.has_meanarterialpressure()) {
    _internal_mutable_meanarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanarterialpressure());
  }
  if (from.has_meanarterialcarbondioxidepartialpressure()) {
    _internal_mutable_meanarterialcarbondioxidepartialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanarterialcarbondioxidepartialpressure());
  }
  if (from.has_meanarterialcarbondioxidepartialpressuredelta()) {
    _internal_mutable_meanarterialcarbondioxidepartialpressuredelta()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanarterialcarbondioxidepartialpressuredelta());
  }
  if (from.has_meancentralvenouspressure()) {
    _internal_mutable_meancentralvenouspressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meancentralvenouspressure());
  }
  if (from.has_meanskinflow()) {
    _internal_mutable_meanskinflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_meanskinflow());
  }
  if (from.has_pulmonaryarterialpressure()) {
    _internal_mutable_pulmonaryarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonaryarterialpressure());
  }
  if (from.has_pulmonarycapillarieswedgepressure()) {
    _internal_mutable_pulmonarycapillarieswedgepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonarycapillarieswedgepressure());
  }
  if (from.has_pulmonarydiastolicarterialpressure()) {
    _internal_mutable_pulmonarydiastolicarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonarydiastolicarterialpressure());
  }
  if (from.has_pulmonarymeanarterialpressure()) {
    _internal_mutable_pulmonarymeanarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonarymeanarterialpressure());
  }
  if (from.has_pulmonarymeancapillaryflow()) {
    _internal_mutable_pulmonarymeancapillaryflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_pulmonarymeancapillaryflow());
  }
  if (from.has_pulmonarymeanshuntflow()) {
    _internal_mutable_pulmonarymeanshuntflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_pulmonarymeanshuntflow());
  }
  if (from.has_pulmonarysystolicarterialpressure()) {
    _internal_mutable_pulmonarysystolicarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulmonarysystolicarterialpressure());
  }
  if (from.has_pulmonaryvascularresistance()) {
    _internal_mutable_pulmonaryvascularresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_pulmonaryvascularresistance());
  }
  if (from.has_pulmonaryvascularresistanceindex()) {
    _internal_mutable_pulmonaryvascularresistanceindex()->::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData::MergeFrom(from._internal_pulmonaryvascularresistanceindex());
  }
  if (from.has_pulsepressure()) {
    _internal_mutable_pulsepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulsepressure());
  }
  if (from.has_systemicvascularresistance()) {
    _internal_mutable_systemicvascularresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_systemicvascularresistance());
  }
  if (from.has_systolicarterialpressure()) {
    _internal_mutable_systolicarterialpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_systolicarterialpressure());
  }
  if (from.has_totalhemorrhagerate()) {
    _internal_mutable_totalhemorrhagerate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_totalhemorrhagerate());
  }
  if (from.has_totalhemorrhagedvolume()) {
    _internal_mutable_totalhemorrhagedvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totalhemorrhagedvolume());
  }
  if (from.heartrhythm() != 0) {
    _internal_set_heartrhythm(from._internal_heartrhythm());
  }
}

void CardiovascularSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CardiovascularSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardiovascularSystemData::CopyFrom(const CardiovascularSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CardiovascularSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardiovascularSystemData::IsInitialized() const {
  return true;
}

void CardiovascularSystemData::InternalSwap(CardiovascularSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardiovascularSystemData, heartrhythm_)
      + sizeof(CardiovascularSystemData::heartrhythm_)
      - PROTOBUF_FIELD_OFFSET(CardiovascularSystemData, arterialpressure_)>(
          reinterpret_cast<char*>(&arterialpressure_),
          reinterpret_cast<char*>(&other->arterialpressure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardiovascularSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DrugSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchodilationlevel(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& heartratechange(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanbloodpressurechange(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& neuromuscularblocklevel(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pulsepressurechange(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::PupillaryResponseData& pupillaryresponse(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& respirationratechange(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& sedationlevel(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& tidalvolumechange(const DrugSystemData* msg);
  static const ::pulse::cdm::bind::ScalarNegative1To1Data& tubularpermeabilitychange(const DrugSystemData* msg);
};

const ::pulse::cdm::bind::ScalarNegative1To1Data&
DrugSystemData::_Internal::bronchodilationlevel(const DrugSystemData* msg) {
  return *msg->bronchodilationlevel_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
DrugSystemData::_Internal::heartratechange(const DrugSystemData* msg) {
  return *msg->heartratechange_;
}
const ::pulse::cdm::bind::ScalarPressureData&
DrugSystemData::_Internal::meanbloodpressurechange(const DrugSystemData* msg) {
  return *msg->meanbloodpressurechange_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
DrugSystemData::_Internal::neuromuscularblocklevel(const DrugSystemData* msg) {
  return *msg->neuromuscularblocklevel_;
}
const ::pulse::cdm::bind::ScalarPressureData&
DrugSystemData::_Internal::pulsepressurechange(const DrugSystemData* msg) {
  return *msg->pulsepressurechange_;
}
const ::pulse::cdm::bind::PupillaryResponseData&
DrugSystemData::_Internal::pupillaryresponse(const DrugSystemData* msg) {
  return *msg->pupillaryresponse_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
DrugSystemData::_Internal::respirationratechange(const DrugSystemData* msg) {
  return *msg->respirationratechange_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
DrugSystemData::_Internal::sedationlevel(const DrugSystemData* msg) {
  return *msg->sedationlevel_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
DrugSystemData::_Internal::tidalvolumechange(const DrugSystemData* msg) {
  return *msg->tidalvolumechange_;
}
const ::pulse::cdm::bind::ScalarNegative1To1Data&
DrugSystemData::_Internal::tubularpermeabilitychange(const DrugSystemData* msg) {
  return *msg->tubularpermeabilitychange_;
}
void DrugSystemData::clear_bronchodilationlevel() {
  if (GetArena() == nullptr && bronchodilationlevel_ != nullptr) {
    delete bronchodilationlevel_;
  }
  bronchodilationlevel_ = nullptr;
}
void DrugSystemData::clear_heartratechange() {
  if (GetArena() == nullptr && heartratechange_ != nullptr) {
    delete heartratechange_;
  }
  heartratechange_ = nullptr;
}
void DrugSystemData::clear_meanbloodpressurechange() {
  if (GetArena() == nullptr && meanbloodpressurechange_ != nullptr) {
    delete meanbloodpressurechange_;
  }
  meanbloodpressurechange_ = nullptr;
}
void DrugSystemData::clear_neuromuscularblocklevel() {
  if (GetArena() == nullptr && neuromuscularblocklevel_ != nullptr) {
    delete neuromuscularblocklevel_;
  }
  neuromuscularblocklevel_ = nullptr;
}
void DrugSystemData::clear_pulsepressurechange() {
  if (GetArena() == nullptr && pulsepressurechange_ != nullptr) {
    delete pulsepressurechange_;
  }
  pulsepressurechange_ = nullptr;
}
void DrugSystemData::clear_respirationratechange() {
  if (GetArena() == nullptr && respirationratechange_ != nullptr) {
    delete respirationratechange_;
  }
  respirationratechange_ = nullptr;
}
void DrugSystemData::clear_sedationlevel() {
  if (GetArena() == nullptr && sedationlevel_ != nullptr) {
    delete sedationlevel_;
  }
  sedationlevel_ = nullptr;
}
void DrugSystemData::clear_tidalvolumechange() {
  if (GetArena() == nullptr && tidalvolumechange_ != nullptr) {
    delete tidalvolumechange_;
  }
  tidalvolumechange_ = nullptr;
}
void DrugSystemData::clear_tubularpermeabilitychange() {
  if (GetArena() == nullptr && tubularpermeabilitychange_ != nullptr) {
    delete tubularpermeabilitychange_;
  }
  tubularpermeabilitychange_ = nullptr;
}
DrugSystemData::DrugSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.DrugSystemData)
}
DrugSystemData::DrugSystemData(const DrugSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bronchodilationlevel()) {
    bronchodilationlevel_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.bronchodilationlevel_);
  } else {
    bronchodilationlevel_ = nullptr;
  }
  if (from._internal_has_heartratechange()) {
    heartratechange_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.heartratechange_);
  } else {
    heartratechange_ = nullptr;
  }
  if (from._internal_has_meanbloodpressurechange()) {
    meanbloodpressurechange_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanbloodpressurechange_);
  } else {
    meanbloodpressurechange_ = nullptr;
  }
  if (from._internal_has_neuromuscularblocklevel()) {
    neuromuscularblocklevel_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.neuromuscularblocklevel_);
  } else {
    neuromuscularblocklevel_ = nullptr;
  }
  if (from._internal_has_pulsepressurechange()) {
    pulsepressurechange_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pulsepressurechange_);
  } else {
    pulsepressurechange_ = nullptr;
  }
  if (from._internal_has_pupillaryresponse()) {
    pupillaryresponse_ = new ::pulse::cdm::bind::PupillaryResponseData(*from.pupillaryresponse_);
  } else {
    pupillaryresponse_ = nullptr;
  }
  if (from._internal_has_respirationratechange()) {
    respirationratechange_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.respirationratechange_);
  } else {
    respirationratechange_ = nullptr;
  }
  if (from._internal_has_sedationlevel()) {
    sedationlevel_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.sedationlevel_);
  } else {
    sedationlevel_ = nullptr;
  }
  if (from._internal_has_tidalvolumechange()) {
    tidalvolumechange_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.tidalvolumechange_);
  } else {
    tidalvolumechange_ = nullptr;
  }
  if (from._internal_has_tubularpermeabilitychange()) {
    tubularpermeabilitychange_ = new ::pulse::cdm::bind::ScalarNegative1To1Data(*from.tubularpermeabilitychange_);
  } else {
    tubularpermeabilitychange_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.DrugSystemData)
}

void DrugSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bronchodilationlevel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tubularpermeabilitychange_) -
      reinterpret_cast<char*>(&bronchodilationlevel_)) + sizeof(tubularpermeabilitychange_));
}

DrugSystemData::~DrugSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.DrugSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrugSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bronchodilationlevel_;
  if (this != internal_default_instance()) delete heartratechange_;
  if (this != internal_default_instance()) delete meanbloodpressurechange_;
  if (this != internal_default_instance()) delete neuromuscularblocklevel_;
  if (this != internal_default_instance()) delete pulsepressurechange_;
  if (this != internal_default_instance()) delete pupillaryresponse_;
  if (this != internal_default_instance()) delete respirationratechange_;
  if (this != internal_default_instance()) delete sedationlevel_;
  if (this != internal_default_instance()) delete tidalvolumechange_;
  if (this != internal_default_instance()) delete tubularpermeabilitychange_;
}

void DrugSystemData::ArenaDtor(void* object) {
  DrugSystemData* _this = reinterpret_cast< DrugSystemData* >(object);
  (void)_this;
}
void DrugSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrugSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrugSystemData& DrugSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrugSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void DrugSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.DrugSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bronchodilationlevel_ != nullptr) {
    delete bronchodilationlevel_;
  }
  bronchodilationlevel_ = nullptr;
  if (GetArena() == nullptr && heartratechange_ != nullptr) {
    delete heartratechange_;
  }
  heartratechange_ = nullptr;
  if (GetArena() == nullptr && meanbloodpressurechange_ != nullptr) {
    delete meanbloodpressurechange_;
  }
  meanbloodpressurechange_ = nullptr;
  if (GetArena() == nullptr && neuromuscularblocklevel_ != nullptr) {
    delete neuromuscularblocklevel_;
  }
  neuromuscularblocklevel_ = nullptr;
  if (GetArena() == nullptr && pulsepressurechange_ != nullptr) {
    delete pulsepressurechange_;
  }
  pulsepressurechange_ = nullptr;
  if (GetArena() == nullptr && pupillaryresponse_ != nullptr) {
    delete pupillaryresponse_;
  }
  pupillaryresponse_ = nullptr;
  if (GetArena() == nullptr && respirationratechange_ != nullptr) {
    delete respirationratechange_;
  }
  respirationratechange_ = nullptr;
  if (GetArena() == nullptr && sedationlevel_ != nullptr) {
    delete sedationlevel_;
  }
  sedationlevel_ = nullptr;
  if (GetArena() == nullptr && tidalvolumechange_ != nullptr) {
    delete tidalvolumechange_;
  }
  tidalvolumechange_ = nullptr;
  if (GetArena() == nullptr && tubularpermeabilitychange_ != nullptr) {
    delete tubularpermeabilitychange_;
  }
  tubularpermeabilitychange_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrugSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarNegative1To1Data BronchodilationLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchodilationlevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData HeartRateChange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartratechange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanBloodPressureChange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanbloodpressurechange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data NeuromuscularBlockLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_neuromuscularblocklevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PulsePressureChange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulsepressurechange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pupillaryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData RespirationRateChange = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationratechange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data SedationLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sedationlevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TidalVolumeChange = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tidalvolumechange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityChange = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tubularpermeabilitychange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrugSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.DrugSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data BronchodilationLevel = 1;
  if (this->has_bronchodilationlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bronchodilationlevel(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateChange = 2;
  if (this->has_heartratechange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::heartratechange(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanBloodPressureChange = 3;
  if (this->has_meanbloodpressurechange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meanbloodpressurechange(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeuromuscularBlockLevel = 4;
  if (this->has_neuromuscularblocklevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::neuromuscularblocklevel(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PulsePressureChange = 5;
  if (this->has_pulsepressurechange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pulsepressurechange(this), target, stream);
  }

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 6;
  if (this->has_pupillaryresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pupillaryresponse(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateChange = 7;
  if (this->has_respirationratechange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::respirationratechange(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data SedationLevel = 8;
  if (this->has_sedationlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sedationlevel(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeChange = 9;
  if (this->has_tidalvolumechange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tidalvolumechange(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityChange = 10;
  if (this->has_tubularpermeabilitychange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tubularpermeabilitychange(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.DrugSystemData)
  return target;
}

size_t DrugSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.DrugSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarNegative1To1Data BronchodilationLevel = 1;
  if (this->has_bronchodilationlevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bronchodilationlevel_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateChange = 2;
  if (this->has_heartratechange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartratechange_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanBloodPressureChange = 3;
  if (this->has_meanbloodpressurechange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanbloodpressurechange_);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeuromuscularBlockLevel = 4;
  if (this->has_neuromuscularblocklevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neuromuscularblocklevel_);
  }

  // .pulse.cdm.bind.ScalarPressureData PulsePressureChange = 5;
  if (this->has_pulsepressurechange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulsepressurechange_);
  }

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 6;
  if (this->has_pupillaryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pupillaryresponse_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateChange = 7;
  if (this->has_respirationratechange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationratechange_);
  }

  // .pulse.cdm.bind.Scalar0To1Data SedationLevel = 8;
  if (this->has_sedationlevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sedationlevel_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeChange = 9;
  if (this->has_tidalvolumechange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tidalvolumechange_);
  }

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityChange = 10;
  if (this->has_tubularpermeabilitychange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tubularpermeabilitychange_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrugSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.DrugSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const DrugSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrugSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.DrugSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.DrugSystemData)
    MergeFrom(*source);
  }
}

void DrugSystemData::MergeFrom(const DrugSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.DrugSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bronchodilationlevel()) {
    _internal_mutable_bronchodilationlevel()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_bronchodilationlevel());
  }
  if (from.has_heartratechange()) {
    _internal_mutable_heartratechange()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_heartratechange());
  }
  if (from.has_meanbloodpressurechange()) {
    _internal_mutable_meanbloodpressurechange()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanbloodpressurechange());
  }
  if (from.has_neuromuscularblocklevel()) {
    _internal_mutable_neuromuscularblocklevel()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_neuromuscularblocklevel());
  }
  if (from.has_pulsepressurechange()) {
    _internal_mutable_pulsepressurechange()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pulsepressurechange());
  }
  if (from.has_pupillaryresponse()) {
    _internal_mutable_pupillaryresponse()->::pulse::cdm::bind::PupillaryResponseData::MergeFrom(from._internal_pupillaryresponse());
  }
  if (from.has_respirationratechange()) {
    _internal_mutable_respirationratechange()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_respirationratechange());
  }
  if (from.has_sedationlevel()) {
    _internal_mutable_sedationlevel()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_sedationlevel());
  }
  if (from.has_tidalvolumechange()) {
    _internal_mutable_tidalvolumechange()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_tidalvolumechange());
  }
  if (from.has_tubularpermeabilitychange()) {
    _internal_mutable_tubularpermeabilitychange()->::pulse::cdm::bind::ScalarNegative1To1Data::MergeFrom(from._internal_tubularpermeabilitychange());
  }
}

void DrugSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.DrugSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrugSystemData::CopyFrom(const DrugSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.DrugSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrugSystemData::IsInitialized() const {
  return true;
}

void DrugSystemData::InternalSwap(DrugSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrugSystemData, tubularpermeabilitychange_)
      + sizeof(DrugSystemData::tubularpermeabilitychange_)
      - PROTOBUF_FIELD_OFFSET(DrugSystemData, bronchodilationlevel_)>(
          reinterpret_cast<char*>(&bronchodilationlevel_),
          reinterpret_cast<char*>(&other->bronchodilationlevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrugSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndocrineSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarAmountPerTimeData& insulinsynthesisrate(const EndocrineSystemData* msg);
};

const ::pulse::cdm::bind::ScalarAmountPerTimeData&
EndocrineSystemData::_Internal::insulinsynthesisrate(const EndocrineSystemData* msg) {
  return *msg->insulinsynthesisrate_;
}
void EndocrineSystemData::clear_insulinsynthesisrate() {
  if (GetArena() == nullptr && insulinsynthesisrate_ != nullptr) {
    delete insulinsynthesisrate_;
  }
  insulinsynthesisrate_ = nullptr;
}
EndocrineSystemData::EndocrineSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EndocrineSystemData)
}
EndocrineSystemData::EndocrineSystemData(const EndocrineSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_insulinsynthesisrate()) {
    insulinsynthesisrate_ = new ::pulse::cdm::bind::ScalarAmountPerTimeData(*from.insulinsynthesisrate_);
  } else {
    insulinsynthesisrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EndocrineSystemData)
}

void EndocrineSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  insulinsynthesisrate_ = nullptr;
}

EndocrineSystemData::~EndocrineSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EndocrineSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndocrineSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete insulinsynthesisrate_;
}

void EndocrineSystemData::ArenaDtor(void* object) {
  EndocrineSystemData* _this = reinterpret_cast< EndocrineSystemData* >(object);
  (void)_this;
}
void EndocrineSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndocrineSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndocrineSystemData& EndocrineSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndocrineSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void EndocrineSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EndocrineSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && insulinsynthesisrate_ != nullptr) {
    delete insulinsynthesisrate_;
  }
  insulinsynthesisrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndocrineSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarAmountPerTimeData InsulinSynthesisRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_insulinsynthesisrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndocrineSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EndocrineSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarAmountPerTimeData InsulinSynthesisRate = 1;
  if (this->has_insulinsynthesisrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::insulinsynthesisrate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EndocrineSystemData)
  return target;
}

size_t EndocrineSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EndocrineSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarAmountPerTimeData InsulinSynthesisRate = 1;
  if (this->has_insulinsynthesisrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insulinsynthesisrate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndocrineSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EndocrineSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const EndocrineSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndocrineSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EndocrineSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EndocrineSystemData)
    MergeFrom(*source);
  }
}

void EndocrineSystemData::MergeFrom(const EndocrineSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EndocrineSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_insulinsynthesisrate()) {
    _internal_mutable_insulinsynthesisrate()->::pulse::cdm::bind::ScalarAmountPerTimeData::MergeFrom(from._internal_insulinsynthesisrate());
  }
}

void EndocrineSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EndocrineSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndocrineSystemData::CopyFrom(const EndocrineSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EndocrineSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndocrineSystemData::IsInitialized() const {
  return true;
}

void EndocrineSystemData::InternalSwap(EndocrineSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(insulinsynthesisrate_, other->insulinsynthesisrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndocrineSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnergySystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& achievedexerciselevel(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& coretemperature(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerTimeData& creatinineproductionrate(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& exercisemeanarterialpressuredelta(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fatiguelevel(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerTimeData& ketoneproductionrate(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerTimeData& lactateproductionrate(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& skintemperature(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerTimeData& sweatrate(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& totalmetabolicrate(const EnergySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& totalworkratelevel(const EnergySystemData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
EnergySystemData::_Internal::achievedexerciselevel(const EnergySystemData* msg) {
  return *msg->achievedexerciselevel_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
EnergySystemData::_Internal::coretemperature(const EnergySystemData* msg) {
  return *msg->coretemperature_;
}
const ::pulse::cdm::bind::ScalarAmountPerTimeData&
EnergySystemData::_Internal::creatinineproductionrate(const EnergySystemData* msg) {
  return *msg->creatinineproductionrate_;
}
const ::pulse::cdm::bind::ScalarPressureData&
EnergySystemData::_Internal::exercisemeanarterialpressuredelta(const EnergySystemData* msg) {
  return *msg->exercisemeanarterialpressuredelta_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
EnergySystemData::_Internal::fatiguelevel(const EnergySystemData* msg) {
  return *msg->fatiguelevel_;
}
const ::pulse::cdm::bind::ScalarAmountPerTimeData&
EnergySystemData::_Internal::ketoneproductionrate(const EnergySystemData* msg) {
  return *msg->ketoneproductionrate_;
}
const ::pulse::cdm::bind::ScalarAmountPerTimeData&
EnergySystemData::_Internal::lactateproductionrate(const EnergySystemData* msg) {
  return *msg->lactateproductionrate_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
EnergySystemData::_Internal::skintemperature(const EnergySystemData* msg) {
  return *msg->skintemperature_;
}
const ::pulse::cdm::bind::ScalarMassPerTimeData&
EnergySystemData::_Internal::sweatrate(const EnergySystemData* msg) {
  return *msg->sweatrate_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnergySystemData::_Internal::totalmetabolicrate(const EnergySystemData* msg) {
  return *msg->totalmetabolicrate_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
EnergySystemData::_Internal::totalworkratelevel(const EnergySystemData* msg) {
  return *msg->totalworkratelevel_;
}
void EnergySystemData::clear_achievedexerciselevel() {
  if (GetArena() == nullptr && achievedexerciselevel_ != nullptr) {
    delete achievedexerciselevel_;
  }
  achievedexerciselevel_ = nullptr;
}
void EnergySystemData::clear_coretemperature() {
  if (GetArena() == nullptr && coretemperature_ != nullptr) {
    delete coretemperature_;
  }
  coretemperature_ = nullptr;
}
void EnergySystemData::clear_creatinineproductionrate() {
  if (GetArena() == nullptr && creatinineproductionrate_ != nullptr) {
    delete creatinineproductionrate_;
  }
  creatinineproductionrate_ = nullptr;
}
void EnergySystemData::clear_exercisemeanarterialpressuredelta() {
  if (GetArena() == nullptr && exercisemeanarterialpressuredelta_ != nullptr) {
    delete exercisemeanarterialpressuredelta_;
  }
  exercisemeanarterialpressuredelta_ = nullptr;
}
void EnergySystemData::clear_fatiguelevel() {
  if (GetArena() == nullptr && fatiguelevel_ != nullptr) {
    delete fatiguelevel_;
  }
  fatiguelevel_ = nullptr;
}
void EnergySystemData::clear_ketoneproductionrate() {
  if (GetArena() == nullptr && ketoneproductionrate_ != nullptr) {
    delete ketoneproductionrate_;
  }
  ketoneproductionrate_ = nullptr;
}
void EnergySystemData::clear_lactateproductionrate() {
  if (GetArena() == nullptr && lactateproductionrate_ != nullptr) {
    delete lactateproductionrate_;
  }
  lactateproductionrate_ = nullptr;
}
void EnergySystemData::clear_skintemperature() {
  if (GetArena() == nullptr && skintemperature_ != nullptr) {
    delete skintemperature_;
  }
  skintemperature_ = nullptr;
}
void EnergySystemData::clear_sweatrate() {
  if (GetArena() == nullptr && sweatrate_ != nullptr) {
    delete sweatrate_;
  }
  sweatrate_ = nullptr;
}
void EnergySystemData::clear_totalmetabolicrate() {
  if (GetArena() == nullptr && totalmetabolicrate_ != nullptr) {
    delete totalmetabolicrate_;
  }
  totalmetabolicrate_ = nullptr;
}
void EnergySystemData::clear_totalworkratelevel() {
  if (GetArena() == nullptr && totalworkratelevel_ != nullptr) {
    delete totalworkratelevel_;
  }
  totalworkratelevel_ = nullptr;
}
EnergySystemData::EnergySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EnergySystemData)
}
EnergySystemData::EnergySystemData(const EnergySystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_achievedexerciselevel()) {
    achievedexerciselevel_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.achievedexerciselevel_);
  } else {
    achievedexerciselevel_ = nullptr;
  }
  if (from._internal_has_coretemperature()) {
    coretemperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.coretemperature_);
  } else {
    coretemperature_ = nullptr;
  }
  if (from._internal_has_creatinineproductionrate()) {
    creatinineproductionrate_ = new ::pulse::cdm::bind::ScalarAmountPerTimeData(*from.creatinineproductionrate_);
  } else {
    creatinineproductionrate_ = nullptr;
  }
  if (from._internal_has_exercisemeanarterialpressuredelta()) {
    exercisemeanarterialpressuredelta_ = new ::pulse::cdm::bind::ScalarPressureData(*from.exercisemeanarterialpressuredelta_);
  } else {
    exercisemeanarterialpressuredelta_ = nullptr;
  }
  if (from._internal_has_fatiguelevel()) {
    fatiguelevel_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fatiguelevel_);
  } else {
    fatiguelevel_ = nullptr;
  }
  if (from._internal_has_ketoneproductionrate()) {
    ketoneproductionrate_ = new ::pulse::cdm::bind::ScalarAmountPerTimeData(*from.ketoneproductionrate_);
  } else {
    ketoneproductionrate_ = nullptr;
  }
  if (from._internal_has_lactateproductionrate()) {
    lactateproductionrate_ = new ::pulse::cdm::bind::ScalarAmountPerTimeData(*from.lactateproductionrate_);
  } else {
    lactateproductionrate_ = nullptr;
  }
  if (from._internal_has_skintemperature()) {
    skintemperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.skintemperature_);
  } else {
    skintemperature_ = nullptr;
  }
  if (from._internal_has_sweatrate()) {
    sweatrate_ = new ::pulse::cdm::bind::ScalarMassPerTimeData(*from.sweatrate_);
  } else {
    sweatrate_ = nullptr;
  }
  if (from._internal_has_totalmetabolicrate()) {
    totalmetabolicrate_ = new ::pulse::cdm::bind::ScalarPowerData(*from.totalmetabolicrate_);
  } else {
    totalmetabolicrate_ = nullptr;
  }
  if (from._internal_has_totalworkratelevel()) {
    totalworkratelevel_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.totalworkratelevel_);
  } else {
    totalworkratelevel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EnergySystemData)
}

void EnergySystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&achievedexerciselevel_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalworkratelevel_) -
      reinterpret_cast<char*>(&achievedexerciselevel_)) + sizeof(totalworkratelevel_));
}

EnergySystemData::~EnergySystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EnergySystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnergySystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete achievedexerciselevel_;
  if (this != internal_default_instance()) delete coretemperature_;
  if (this != internal_default_instance()) delete creatinineproductionrate_;
  if (this != internal_default_instance()) delete exercisemeanarterialpressuredelta_;
  if (this != internal_default_instance()) delete fatiguelevel_;
  if (this != internal_default_instance()) delete ketoneproductionrate_;
  if (this != internal_default_instance()) delete lactateproductionrate_;
  if (this != internal_default_instance()) delete skintemperature_;
  if (this != internal_default_instance()) delete sweatrate_;
  if (this != internal_default_instance()) delete totalmetabolicrate_;
  if (this != internal_default_instance()) delete totalworkratelevel_;
}

void EnergySystemData::ArenaDtor(void* object) {
  EnergySystemData* _this = reinterpret_cast< EnergySystemData* >(object);
  (void)_this;
}
void EnergySystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnergySystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnergySystemData& EnergySystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnergySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void EnergySystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EnergySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && achievedexerciselevel_ != nullptr) {
    delete achievedexerciselevel_;
  }
  achievedexerciselevel_ = nullptr;
  if (GetArena() == nullptr && coretemperature_ != nullptr) {
    delete coretemperature_;
  }
  coretemperature_ = nullptr;
  if (GetArena() == nullptr && creatinineproductionrate_ != nullptr) {
    delete creatinineproductionrate_;
  }
  creatinineproductionrate_ = nullptr;
  if (GetArena() == nullptr && exercisemeanarterialpressuredelta_ != nullptr) {
    delete exercisemeanarterialpressuredelta_;
  }
  exercisemeanarterialpressuredelta_ = nullptr;
  if (GetArena() == nullptr && fatiguelevel_ != nullptr) {
    delete fatiguelevel_;
  }
  fatiguelevel_ = nullptr;
  if (GetArena() == nullptr && ketoneproductionrate_ != nullptr) {
    delete ketoneproductionrate_;
  }
  ketoneproductionrate_ = nullptr;
  if (GetArena() == nullptr && lactateproductionrate_ != nullptr) {
    delete lactateproductionrate_;
  }
  lactateproductionrate_ = nullptr;
  if (GetArena() == nullptr && skintemperature_ != nullptr) {
    delete skintemperature_;
  }
  skintemperature_ = nullptr;
  if (GetArena() == nullptr && sweatrate_ != nullptr) {
    delete sweatrate_;
  }
  sweatrate_ = nullptr;
  if (GetArena() == nullptr && totalmetabolicrate_ != nullptr) {
    delete totalmetabolicrate_;
  }
  totalmetabolicrate_ = nullptr;
  if (GetArena() == nullptr && totalworkratelevel_ != nullptr) {
    delete totalworkratelevel_;
  }
  totalworkratelevel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnergySystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.Scalar0To1Data AchievedExerciseLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_achievedexerciselevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData CoreTemperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coretemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerTimeData CreatinineProductionRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_creatinineproductionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData ExerciseMeanArterialPressureDelta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_exercisemeanarterialpressuredelta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FatigueLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fatiguelevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerTimeData KetoneProductionRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ketoneproductionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerTimeData LactateProductionRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lactateproductionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData SkinTemperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_skintemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerTimeData SweatRate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sweatrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData TotalMetabolicRate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalmetabolicrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data TotalWorkRateLevel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalworkratelevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnergySystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EnergySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data AchievedExerciseLevel = 1;
  if (this->has_achievedexerciselevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::achievedexerciselevel(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperature = 2;
  if (this->has_coretemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coretemperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData CreatinineProductionRate = 3;
  if (this->has_creatinineproductionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::creatinineproductionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData ExerciseMeanArterialPressureDelta = 4;
  if (this->has_exercisemeanarterialpressuredelta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::exercisemeanarterialpressuredelta(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FatigueLevel = 5;
  if (this->has_fatiguelevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fatiguelevel(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData KetoneProductionRate = 6;
  if (this->has_ketoneproductionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ketoneproductionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData LactateProductionRate = 7;
  if (this->has_lactateproductionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lactateproductionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData SkinTemperature = 8;
  if (this->has_skintemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::skintemperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData SweatRate = 9;
  if (this->has_sweatrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sweatrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData TotalMetabolicRate = 10;
  if (this->has_totalmetabolicrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::totalmetabolicrate(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data TotalWorkRateLevel = 11;
  if (this->has_totalworkratelevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::totalworkratelevel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EnergySystemData)
  return target;
}

size_t EnergySystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EnergySystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data AchievedExerciseLevel = 1;
  if (this->has_achievedexerciselevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *achievedexerciselevel_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperature = 2;
  if (this->has_coretemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coretemperature_);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData CreatinineProductionRate = 3;
  if (this->has_creatinineproductionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creatinineproductionrate_);
  }

  // .pulse.cdm.bind.ScalarPressureData ExerciseMeanArterialPressureDelta = 4;
  if (this->has_exercisemeanarterialpressuredelta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exercisemeanarterialpressuredelta_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FatigueLevel = 5;
  if (this->has_fatiguelevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fatiguelevel_);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData KetoneProductionRate = 6;
  if (this->has_ketoneproductionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ketoneproductionrate_);
  }

  // .pulse.cdm.bind.ScalarAmountPerTimeData LactateProductionRate = 7;
  if (this->has_lactateproductionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lactateproductionrate_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData SkinTemperature = 8;
  if (this->has_skintemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skintemperature_);
  }

  // .pulse.cdm.bind.ScalarMassPerTimeData SweatRate = 9;
  if (this->has_sweatrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sweatrate_);
  }

  // .pulse.cdm.bind.ScalarPowerData TotalMetabolicRate = 10;
  if (this->has_totalmetabolicrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalmetabolicrate_);
  }

  // .pulse.cdm.bind.Scalar0To1Data TotalWorkRateLevel = 11;
  if (this->has_totalworkratelevel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalworkratelevel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnergySystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EnergySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnergySystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnergySystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EnergySystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EnergySystemData)
    MergeFrom(*source);
  }
}

void EnergySystemData::MergeFrom(const EnergySystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EnergySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_achievedexerciselevel()) {
    _internal_mutable_achievedexerciselevel()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_achievedexerciselevel());
  }
  if (from.has_coretemperature()) {
    _internal_mutable_coretemperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_coretemperature());
  }
  if (from.has_creatinineproductionrate()) {
    _internal_mutable_creatinineproductionrate()->::pulse::cdm::bind::ScalarAmountPerTimeData::MergeFrom(from._internal_creatinineproductionrate());
  }
  if (from.has_exercisemeanarterialpressuredelta()) {
    _internal_mutable_exercisemeanarterialpressuredelta()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_exercisemeanarterialpressuredelta());
  }
  if (from.has_fatiguelevel()) {
    _internal_mutable_fatiguelevel()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fatiguelevel());
  }
  if (from.has_ketoneproductionrate()) {
    _internal_mutable_ketoneproductionrate()->::pulse::cdm::bind::ScalarAmountPerTimeData::MergeFrom(from._internal_ketoneproductionrate());
  }
  if (from.has_lactateproductionrate()) {
    _internal_mutable_lactateproductionrate()->::pulse::cdm::bind::ScalarAmountPerTimeData::MergeFrom(from._internal_lactateproductionrate());
  }
  if (from.has_skintemperature()) {
    _internal_mutable_skintemperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_skintemperature());
  }
  if (from.has_sweatrate()) {
    _internal_mutable_sweatrate()->::pulse::cdm::bind::ScalarMassPerTimeData::MergeFrom(from._internal_sweatrate());
  }
  if (from.has_totalmetabolicrate()) {
    _internal_mutable_totalmetabolicrate()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_totalmetabolicrate());
  }
  if (from.has_totalworkratelevel()) {
    _internal_mutable_totalworkratelevel()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_totalworkratelevel());
  }
}

void EnergySystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EnergySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergySystemData::CopyFrom(const EnergySystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EnergySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergySystemData::IsInitialized() const {
  return true;
}

void EnergySystemData::InternalSwap(EnergySystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnergySystemData, totalworkratelevel_)
      + sizeof(EnergySystemData::totalworkratelevel_)
      - PROTOBUF_FIELD_OFFSET(EnergySystemData, achievedexerciselevel_)>(
          reinterpret_cast<char*>(&achievedexerciselevel_),
          reinterpret_cast<char*>(&other->achievedexerciselevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnergySystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GastrointestinalSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& waterabsorptionrate(const GastrointestinalSystemData* msg);
  static const ::pulse::cdm::bind::NutritionData& stomachcontents(const GastrointestinalSystemData* msg);
};

const ::pulse::cdm::bind::ScalarVolumePerTimeData&
GastrointestinalSystemData::_Internal::waterabsorptionrate(const GastrointestinalSystemData* msg) {
  return *msg->waterabsorptionrate_;
}
const ::pulse::cdm::bind::NutritionData&
GastrointestinalSystemData::_Internal::stomachcontents(const GastrointestinalSystemData* msg) {
  return *msg->stomachcontents_;
}
void GastrointestinalSystemData::clear_waterabsorptionrate() {
  if (GetArena() == nullptr && waterabsorptionrate_ != nullptr) {
    delete waterabsorptionrate_;
  }
  waterabsorptionrate_ = nullptr;
}
void GastrointestinalSystemData::clear_stomachcontents() {
  if (GetArena() == nullptr && stomachcontents_ != nullptr) {
    delete stomachcontents_;
  }
  stomachcontents_ = nullptr;
}
GastrointestinalSystemData::GastrointestinalSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GastrointestinalSystemData)
}
GastrointestinalSystemData::GastrointestinalSystemData(const GastrointestinalSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_waterabsorptionrate()) {
    waterabsorptionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.waterabsorptionrate_);
  } else {
    waterabsorptionrate_ = nullptr;
  }
  if (from._internal_has_stomachcontents()) {
    stomachcontents_ = new ::pulse::cdm::bind::NutritionData(*from.stomachcontents_);
  } else {
    stomachcontents_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GastrointestinalSystemData)
}

void GastrointestinalSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&waterabsorptionrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stomachcontents_) -
      reinterpret_cast<char*>(&waterabsorptionrate_)) + sizeof(stomachcontents_));
}

GastrointestinalSystemData::~GastrointestinalSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GastrointestinalSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GastrointestinalSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete waterabsorptionrate_;
  if (this != internal_default_instance()) delete stomachcontents_;
}

void GastrointestinalSystemData::ArenaDtor(void* object) {
  GastrointestinalSystemData* _this = reinterpret_cast< GastrointestinalSystemData* >(object);
  (void)_this;
}
void GastrointestinalSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GastrointestinalSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GastrointestinalSystemData& GastrointestinalSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GastrointestinalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void GastrointestinalSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GastrointestinalSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && waterabsorptionrate_ != nullptr) {
    delete waterabsorptionrate_;
  }
  waterabsorptionrate_ = nullptr;
  if (GetArena() == nullptr && stomachcontents_ != nullptr) {
    delete stomachcontents_;
  }
  stomachcontents_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GastrointestinalSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarVolumePerTimeData WaterAbsorptionRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_waterabsorptionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.NutritionData StomachContents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stomachcontents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GastrointestinalSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GastrointestinalSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterAbsorptionRate = 1;
  if (this->has_waterabsorptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::waterabsorptionrate(this), target, stream);
  }

  // .pulse.cdm.bind.NutritionData StomachContents = 2;
  if (this->has_stomachcontents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stomachcontents(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GastrointestinalSystemData)
  return target;
}

size_t GastrointestinalSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GastrointestinalSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterAbsorptionRate = 1;
  if (this->has_waterabsorptionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waterabsorptionrate_);
  }

  // .pulse.cdm.bind.NutritionData StomachContents = 2;
  if (this->has_stomachcontents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stomachcontents_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GastrointestinalSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GastrointestinalSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const GastrointestinalSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GastrointestinalSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GastrointestinalSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GastrointestinalSystemData)
    MergeFrom(*source);
  }
}

void GastrointestinalSystemData::MergeFrom(const GastrointestinalSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GastrointestinalSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_waterabsorptionrate()) {
    _internal_mutable_waterabsorptionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_waterabsorptionrate());
  }
  if (from.has_stomachcontents()) {
    _internal_mutable_stomachcontents()->::pulse::cdm::bind::NutritionData::MergeFrom(from._internal_stomachcontents());
  }
}

void GastrointestinalSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GastrointestinalSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GastrointestinalSystemData::CopyFrom(const GastrointestinalSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GastrointestinalSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GastrointestinalSystemData::IsInitialized() const {
  return true;
}

void GastrointestinalSystemData::InternalSwap(GastrointestinalSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GastrointestinalSystemData, stomachcontents_)
      + sizeof(GastrointestinalSystemData::stomachcontents_)
      - PROTOBUF_FIELD_OFFSET(GastrointestinalSystemData, waterabsorptionrate_)>(
          reinterpret_cast<char*>(&waterabsorptionrate_),
          reinterpret_cast<char*>(&other->waterabsorptionrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GastrointestinalSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HepaticSystemData::_Internal {
 public:
};

HepaticSystemData::HepaticSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.HepaticSystemData)
}
HepaticSystemData::HepaticSystemData(const HepaticSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.HepaticSystemData)
}

void HepaticSystemData::SharedCtor() {
}

HepaticSystemData::~HepaticSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.HepaticSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HepaticSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HepaticSystemData::ArenaDtor(void* object) {
  HepaticSystemData* _this = reinterpret_cast< HepaticSystemData* >(object);
  (void)_this;
}
void HepaticSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HepaticSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HepaticSystemData& HepaticSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HepaticSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void HepaticSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.HepaticSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HepaticSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HepaticSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.HepaticSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.HepaticSystemData)
  return target;
}

size_t HepaticSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.HepaticSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HepaticSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.HepaticSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const HepaticSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HepaticSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.HepaticSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.HepaticSystemData)
    MergeFrom(*source);
  }
}

void HepaticSystemData::MergeFrom(const HepaticSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.HepaticSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HepaticSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.HepaticSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HepaticSystemData::CopyFrom(const HepaticSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.HepaticSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HepaticSystemData::IsInitialized() const {
  return true;
}

void HepaticSystemData::InternalSwap(HepaticSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HepaticSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NervousSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarData& chemoreceptorheartratescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& chemoreceptorheartelastancescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& baroreceptorheartratescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& baroreceptorheartelastancescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& baroreceptorresistancescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& baroreceptorcompliancescale(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::PupillaryResponseData& lefteyepupillaryresponse(const NervousSystemData* msg);
  static const ::pulse::cdm::bind::PupillaryResponseData& righteyepupillaryresponse(const NervousSystemData* msg);
};

const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::chemoreceptorheartratescale(const NervousSystemData* msg) {
  return *msg->chemoreceptorheartratescale_;
}
const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::chemoreceptorheartelastancescale(const NervousSystemData* msg) {
  return *msg->chemoreceptorheartelastancescale_;
}
const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::baroreceptorheartratescale(const NervousSystemData* msg) {
  return *msg->baroreceptorheartratescale_;
}
const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::baroreceptorheartelastancescale(const NervousSystemData* msg) {
  return *msg->baroreceptorheartelastancescale_;
}
const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::baroreceptorresistancescale(const NervousSystemData* msg) {
  return *msg->baroreceptorresistancescale_;
}
const ::pulse::cdm::bind::ScalarData&
NervousSystemData::_Internal::baroreceptorcompliancescale(const NervousSystemData* msg) {
  return *msg->baroreceptorcompliancescale_;
}
const ::pulse::cdm::bind::PupillaryResponseData&
NervousSystemData::_Internal::lefteyepupillaryresponse(const NervousSystemData* msg) {
  return *msg->lefteyepupillaryresponse_;
}
const ::pulse::cdm::bind::PupillaryResponseData&
NervousSystemData::_Internal::righteyepupillaryresponse(const NervousSystemData* msg) {
  return *msg->righteyepupillaryresponse_;
}
void NervousSystemData::clear_chemoreceptorheartratescale() {
  if (GetArena() == nullptr && chemoreceptorheartratescale_ != nullptr) {
    delete chemoreceptorheartratescale_;
  }
  chemoreceptorheartratescale_ = nullptr;
}
void NervousSystemData::clear_chemoreceptorheartelastancescale() {
  if (GetArena() == nullptr && chemoreceptorheartelastancescale_ != nullptr) {
    delete chemoreceptorheartelastancescale_;
  }
  chemoreceptorheartelastancescale_ = nullptr;
}
void NervousSystemData::clear_baroreceptorheartratescale() {
  if (GetArena() == nullptr && baroreceptorheartratescale_ != nullptr) {
    delete baroreceptorheartratescale_;
  }
  baroreceptorheartratescale_ = nullptr;
}
void NervousSystemData::clear_baroreceptorheartelastancescale() {
  if (GetArena() == nullptr && baroreceptorheartelastancescale_ != nullptr) {
    delete baroreceptorheartelastancescale_;
  }
  baroreceptorheartelastancescale_ = nullptr;
}
void NervousSystemData::clear_baroreceptorresistancescale() {
  if (GetArena() == nullptr && baroreceptorresistancescale_ != nullptr) {
    delete baroreceptorresistancescale_;
  }
  baroreceptorresistancescale_ = nullptr;
}
void NervousSystemData::clear_baroreceptorcompliancescale() {
  if (GetArena() == nullptr && baroreceptorcompliancescale_ != nullptr) {
    delete baroreceptorcompliancescale_;
  }
  baroreceptorcompliancescale_ = nullptr;
}
NervousSystemData::NervousSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.NervousSystemData)
}
NervousSystemData::NervousSystemData(const NervousSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chemoreceptorheartratescale()) {
    chemoreceptorheartratescale_ = new ::pulse::cdm::bind::ScalarData(*from.chemoreceptorheartratescale_);
  } else {
    chemoreceptorheartratescale_ = nullptr;
  }
  if (from._internal_has_chemoreceptorheartelastancescale()) {
    chemoreceptorheartelastancescale_ = new ::pulse::cdm::bind::ScalarData(*from.chemoreceptorheartelastancescale_);
  } else {
    chemoreceptorheartelastancescale_ = nullptr;
  }
  if (from._internal_has_baroreceptorheartratescale()) {
    baroreceptorheartratescale_ = new ::pulse::cdm::bind::ScalarData(*from.baroreceptorheartratescale_);
  } else {
    baroreceptorheartratescale_ = nullptr;
  }
  if (from._internal_has_baroreceptorheartelastancescale()) {
    baroreceptorheartelastancescale_ = new ::pulse::cdm::bind::ScalarData(*from.baroreceptorheartelastancescale_);
  } else {
    baroreceptorheartelastancescale_ = nullptr;
  }
  if (from._internal_has_baroreceptorresistancescale()) {
    baroreceptorresistancescale_ = new ::pulse::cdm::bind::ScalarData(*from.baroreceptorresistancescale_);
  } else {
    baroreceptorresistancescale_ = nullptr;
  }
  if (from._internal_has_baroreceptorcompliancescale()) {
    baroreceptorcompliancescale_ = new ::pulse::cdm::bind::ScalarData(*from.baroreceptorcompliancescale_);
  } else {
    baroreceptorcompliancescale_ = nullptr;
  }
  if (from._internal_has_lefteyepupillaryresponse()) {
    lefteyepupillaryresponse_ = new ::pulse::cdm::bind::PupillaryResponseData(*from.lefteyepupillaryresponse_);
  } else {
    lefteyepupillaryresponse_ = nullptr;
  }
  if (from._internal_has_righteyepupillaryresponse()) {
    righteyepupillaryresponse_ = new ::pulse::cdm::bind::PupillaryResponseData(*from.righteyepupillaryresponse_);
  } else {
    righteyepupillaryresponse_ = nullptr;
  }
  ::memcpy(&chemoreceptorfeedback_, &from.chemoreceptorfeedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorfeedback_) -
    reinterpret_cast<char*>(&chemoreceptorfeedback_)) + sizeof(baroreceptorfeedback_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.NervousSystemData)
}

void NervousSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&chemoreceptorheartratescale_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&baroreceptorfeedback_) -
      reinterpret_cast<char*>(&chemoreceptorheartratescale_)) + sizeof(baroreceptorfeedback_));
}

NervousSystemData::~NervousSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.NervousSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NervousSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chemoreceptorheartratescale_;
  if (this != internal_default_instance()) delete chemoreceptorheartelastancescale_;
  if (this != internal_default_instance()) delete baroreceptorheartratescale_;
  if (this != internal_default_instance()) delete baroreceptorheartelastancescale_;
  if (this != internal_default_instance()) delete baroreceptorresistancescale_;
  if (this != internal_default_instance()) delete baroreceptorcompliancescale_;
  if (this != internal_default_instance()) delete lefteyepupillaryresponse_;
  if (this != internal_default_instance()) delete righteyepupillaryresponse_;
}

void NervousSystemData::ArenaDtor(void* object) {
  NervousSystemData* _this = reinterpret_cast< NervousSystemData* >(object);
  (void)_this;
}
void NervousSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NervousSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NervousSystemData& NervousSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NervousSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void NervousSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.NervousSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && chemoreceptorheartratescale_ != nullptr) {
    delete chemoreceptorheartratescale_;
  }
  chemoreceptorheartratescale_ = nullptr;
  if (GetArena() == nullptr && chemoreceptorheartelastancescale_ != nullptr) {
    delete chemoreceptorheartelastancescale_;
  }
  chemoreceptorheartelastancescale_ = nullptr;
  if (GetArena() == nullptr && baroreceptorheartratescale_ != nullptr) {
    delete baroreceptorheartratescale_;
  }
  baroreceptorheartratescale_ = nullptr;
  if (GetArena() == nullptr && baroreceptorheartelastancescale_ != nullptr) {
    delete baroreceptorheartelastancescale_;
  }
  baroreceptorheartelastancescale_ = nullptr;
  if (GetArena() == nullptr && baroreceptorresistancescale_ != nullptr) {
    delete baroreceptorresistancescale_;
  }
  baroreceptorresistancescale_ = nullptr;
  if (GetArena() == nullptr && baroreceptorcompliancescale_ != nullptr) {
    delete baroreceptorcompliancescale_;
  }
  baroreceptorcompliancescale_ = nullptr;
  if (GetArena() == nullptr && lefteyepupillaryresponse_ != nullptr) {
    delete lefteyepupillaryresponse_;
  }
  lefteyepupillaryresponse_ = nullptr;
  if (GetArena() == nullptr && righteyepupillaryresponse_ != nullptr) {
    delete righteyepupillaryresponse_;
  }
  righteyepupillaryresponse_ = nullptr;
  ::memset(&chemoreceptorfeedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baroreceptorfeedback_) -
      reinterpret_cast<char*>(&chemoreceptorfeedback_)) + sizeof(baroreceptorfeedback_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NervousSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chemoreceptorfeedback(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData ChemoreceptorHeartRateScale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chemoreceptorheartratescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData ChemoreceptorHeartElastanceScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chemoreceptorheartelastancescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_baroreceptorfeedback(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BaroreceptorHeartRateScale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_baroreceptorheartratescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BaroreceptorHeartElastanceScale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_baroreceptorheartelastancescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BaroreceptorResistanceScale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_baroreceptorresistancescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData BaroreceptorComplianceScale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_baroreceptorcompliancescale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PupillaryResponseData LeftEyePupillaryResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefteyepupillaryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PupillaryResponseData RightEyePupillaryResponse = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_righteyepupillaryresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NervousSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.NervousSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 1;
  if (this->chemoreceptorfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chemoreceptorfeedback(), target);
  }

  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartRateScale = 2;
  if (this->has_chemoreceptorheartratescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chemoreceptorheartratescale(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartElastanceScale = 3;
  if (this->has_chemoreceptorheartelastancescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chemoreceptorheartelastancescale(this), target, stream);
  }

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 4;
  if (this->baroreceptorfeedback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_baroreceptorfeedback(), target);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartRateScale = 5;
  if (this->has_baroreceptorheartratescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::baroreceptorheartratescale(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartElastanceScale = 6;
  if (this->has_baroreceptorheartelastancescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::baroreceptorheartelastancescale(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorResistanceScale = 7;
  if (this->has_baroreceptorresistancescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::baroreceptorresistancescale(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorComplianceScale = 8;
  if (this->has_baroreceptorcompliancescale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::baroreceptorcompliancescale(this), target, stream);
  }

  // .pulse.cdm.bind.PupillaryResponseData LeftEyePupillaryResponse = 9;
  if (this->has_lefteyepupillaryresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lefteyepupillaryresponse(this), target, stream);
  }

  // .pulse.cdm.bind.PupillaryResponseData RightEyePupillaryResponse = 10;
  if (this->has_righteyepupillaryresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::righteyepupillaryresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.NervousSystemData)
  return target;
}

size_t NervousSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.NervousSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartRateScale = 2;
  if (this->has_chemoreceptorheartratescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chemoreceptorheartratescale_);
  }

  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartElastanceScale = 3;
  if (this->has_chemoreceptorheartelastancescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chemoreceptorheartelastancescale_);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartRateScale = 5;
  if (this->has_baroreceptorheartratescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baroreceptorheartratescale_);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartElastanceScale = 6;
  if (this->has_baroreceptorheartelastancescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baroreceptorheartelastancescale_);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorResistanceScale = 7;
  if (this->has_baroreceptorresistancescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baroreceptorresistancescale_);
  }

  // .pulse.cdm.bind.ScalarData BaroreceptorComplianceScale = 8;
  if (this->has_baroreceptorcompliancescale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baroreceptorcompliancescale_);
  }

  // .pulse.cdm.bind.PupillaryResponseData LeftEyePupillaryResponse = 9;
  if (this->has_lefteyepupillaryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefteyepupillaryresponse_);
  }

  // .pulse.cdm.bind.PupillaryResponseData RightEyePupillaryResponse = 10;
  if (this->has_righteyepupillaryresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righteyepupillaryresponse_);
  }

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 1;
  if (this->chemoreceptorfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chemoreceptorfeedback());
  }

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 4;
  if (this->baroreceptorfeedback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_baroreceptorfeedback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NervousSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.NervousSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const NervousSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NervousSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.NervousSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.NervousSystemData)
    MergeFrom(*source);
  }
}

void NervousSystemData::MergeFrom(const NervousSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.NervousSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chemoreceptorheartratescale()) {
    _internal_mutable_chemoreceptorheartratescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_chemoreceptorheartratescale());
  }
  if (from.has_chemoreceptorheartelastancescale()) {
    _internal_mutable_chemoreceptorheartelastancescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_chemoreceptorheartelastancescale());
  }
  if (from.has_baroreceptorheartratescale()) {
    _internal_mutable_baroreceptorheartratescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_baroreceptorheartratescale());
  }
  if (from.has_baroreceptorheartelastancescale()) {
    _internal_mutable_baroreceptorheartelastancescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_baroreceptorheartelastancescale());
  }
  if (from.has_baroreceptorresistancescale()) {
    _internal_mutable_baroreceptorresistancescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_baroreceptorresistancescale());
  }
  if (from.has_baroreceptorcompliancescale()) {
    _internal_mutable_baroreceptorcompliancescale()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_baroreceptorcompliancescale());
  }
  if (from.has_lefteyepupillaryresponse()) {
    _internal_mutable_lefteyepupillaryresponse()->::pulse::cdm::bind::PupillaryResponseData::MergeFrom(from._internal_lefteyepupillaryresponse());
  }
  if (from.has_righteyepupillaryresponse()) {
    _internal_mutable_righteyepupillaryresponse()->::pulse::cdm::bind::PupillaryResponseData::MergeFrom(from._internal_righteyepupillaryresponse());
  }
  if (from.chemoreceptorfeedback() != 0) {
    _internal_set_chemoreceptorfeedback(from._internal_chemoreceptorfeedback());
  }
  if (from.baroreceptorfeedback() != 0) {
    _internal_set_baroreceptorfeedback(from._internal_baroreceptorfeedback());
  }
}

void NervousSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.NervousSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NervousSystemData::CopyFrom(const NervousSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.NervousSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NervousSystemData::IsInitialized() const {
  return true;
}

void NervousSystemData::InternalSwap(NervousSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NervousSystemData, baroreceptorfeedback_)
      + sizeof(NervousSystemData::baroreceptorfeedback_)
      - PROTOBUF_FIELD_OFFSET(NervousSystemData, chemoreceptorheartratescale_)>(
          reinterpret_cast<char*>(&chemoreceptorheartratescale_),
          reinterpret_cast<char*>(&other->chemoreceptorheartratescale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NervousSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RenalSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::Scalar0To1Data& filtrationfraction(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& glomerularfiltrationrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& leftafferentarterioleresistance(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftbowmanscapsuleshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftbowmanscapsulesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& leftefferentarterioleresistance(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftglomerularcapillarieshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftglomerularcapillariesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& leftglomerularfiltrationcoefficient(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& leftglomerularfiltrationrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& leftglomerularfiltrationsurfacearea(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& leftglomerularfluidpermeability(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftfiltrationfraction(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftnetfiltrationpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftnetreabsorptionpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftperitubularcapillarieshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& leftperitubularcapillariesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& leftreabsorptionfiltrationcoefficient(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& leftreabsorptionrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& lefttubularosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& lefttubularhydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& lefttubularreabsorptionfiltrationsurfacearea(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& lefttubularreabsorptionfluidpermeability(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& renalbloodflow(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& renalplasmaflow(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& renalvascularresistance(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& rightafferentarterioleresistance(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightbowmanscapsuleshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightbowmanscapsulesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& rightefferentarterioleresistance(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightglomerularcapillarieshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightglomerularcapillariesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& rightglomerularfiltrationcoefficient(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& rightglomerularfiltrationrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& rightglomerularfiltrationsurfacearea(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& rightglomerularfluidpermeability(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightfiltrationfraction(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightnetfiltrationpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightnetreabsorptionpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightperitubularcapillarieshydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& rightperitubularcapillariesosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& rightreabsorptionfiltrationcoefficient(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& rightreabsorptionrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& righttubularosmoticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& righttubularhydrostaticpressure(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& righttubularreabsorptionfiltrationsurfacearea(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& righttubularreabsorptionfluidpermeability(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& urinationrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarOsmolalityData& urineosmolality(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarOsmolarityData& urineosmolarity(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& urineproductionrate(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& urinespecificgravity(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& urinevolume(const RenalSystemData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& urineureanitrogenconcentration(const RenalSystemData* msg);
};

const ::pulse::cdm::bind::Scalar0To1Data&
RenalSystemData::_Internal::filtrationfraction(const RenalSystemData* msg) {
  return *msg->filtrationfraction_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::glomerularfiltrationrate(const RenalSystemData* msg) {
  return *msg->glomerularfiltrationrate_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RenalSystemData::_Internal::leftafferentarterioleresistance(const RenalSystemData* msg) {
  return *msg->leftafferentarterioleresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftbowmanscapsuleshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->leftbowmanscapsuleshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftbowmanscapsulesosmoticpressure(const RenalSystemData* msg) {
  return *msg->leftbowmanscapsulesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RenalSystemData::_Internal::leftefferentarterioleresistance(const RenalSystemData* msg) {
  return *msg->leftefferentarterioleresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftglomerularcapillarieshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->leftglomerularcapillarieshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftglomerularcapillariesosmoticpressure(const RenalSystemData* msg) {
  return *msg->leftglomerularcapillariesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&
RenalSystemData::_Internal::leftglomerularfiltrationcoefficient(const RenalSystemData* msg) {
  return *msg->leftglomerularfiltrationcoefficient_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::leftglomerularfiltrationrate(const RenalSystemData* msg) {
  return *msg->leftglomerularfiltrationrate_;
}
const ::pulse::cdm::bind::ScalarAreaData&
RenalSystemData::_Internal::leftglomerularfiltrationsurfacearea(const RenalSystemData* msg) {
  return *msg->leftglomerularfiltrationsurfacearea_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
RenalSystemData::_Internal::leftglomerularfluidpermeability(const RenalSystemData* msg) {
  return *msg->leftglomerularfluidpermeability_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RenalSystemData::_Internal::leftfiltrationfraction(const RenalSystemData* msg) {
  return *msg->leftfiltrationfraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftnetfiltrationpressure(const RenalSystemData* msg) {
  return *msg->leftnetfiltrationpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftnetreabsorptionpressure(const RenalSystemData* msg) {
  return *msg->leftnetreabsorptionpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftperitubularcapillarieshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->leftperitubularcapillarieshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::leftperitubularcapillariesosmoticpressure(const RenalSystemData* msg) {
  return *msg->leftperitubularcapillariesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&
RenalSystemData::_Internal::leftreabsorptionfiltrationcoefficient(const RenalSystemData* msg) {
  return *msg->leftreabsorptionfiltrationcoefficient_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::leftreabsorptionrate(const RenalSystemData* msg) {
  return *msg->leftreabsorptionrate_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::lefttubularosmoticpressure(const RenalSystemData* msg) {
  return *msg->lefttubularosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::lefttubularhydrostaticpressure(const RenalSystemData* msg) {
  return *msg->lefttubularhydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarAreaData&
RenalSystemData::_Internal::lefttubularreabsorptionfiltrationsurfacearea(const RenalSystemData* msg) {
  return *msg->lefttubularreabsorptionfiltrationsurfacearea_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
RenalSystemData::_Internal::lefttubularreabsorptionfluidpermeability(const RenalSystemData* msg) {
  return *msg->lefttubularreabsorptionfluidpermeability_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::renalbloodflow(const RenalSystemData* msg) {
  return *msg->renalbloodflow_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::renalplasmaflow(const RenalSystemData* msg) {
  return *msg->renalplasmaflow_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RenalSystemData::_Internal::renalvascularresistance(const RenalSystemData* msg) {
  return *msg->renalvascularresistance_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RenalSystemData::_Internal::rightafferentarterioleresistance(const RenalSystemData* msg) {
  return *msg->rightafferentarterioleresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightbowmanscapsuleshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->rightbowmanscapsuleshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightbowmanscapsulesosmoticpressure(const RenalSystemData* msg) {
  return *msg->rightbowmanscapsulesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RenalSystemData::_Internal::rightefferentarterioleresistance(const RenalSystemData* msg) {
  return *msg->rightefferentarterioleresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightglomerularcapillarieshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->rightglomerularcapillarieshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightglomerularcapillariesosmoticpressure(const RenalSystemData* msg) {
  return *msg->rightglomerularcapillariesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&
RenalSystemData::_Internal::rightglomerularfiltrationcoefficient(const RenalSystemData* msg) {
  return *msg->rightglomerularfiltrationcoefficient_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::rightglomerularfiltrationrate(const RenalSystemData* msg) {
  return *msg->rightglomerularfiltrationrate_;
}
const ::pulse::cdm::bind::ScalarAreaData&
RenalSystemData::_Internal::rightglomerularfiltrationsurfacearea(const RenalSystemData* msg) {
  return *msg->rightglomerularfiltrationsurfacearea_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
RenalSystemData::_Internal::rightglomerularfluidpermeability(const RenalSystemData* msg) {
  return *msg->rightglomerularfluidpermeability_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RenalSystemData::_Internal::rightfiltrationfraction(const RenalSystemData* msg) {
  return *msg->rightfiltrationfraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightnetfiltrationpressure(const RenalSystemData* msg) {
  return *msg->rightnetfiltrationpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightnetreabsorptionpressure(const RenalSystemData* msg) {
  return *msg->rightnetreabsorptionpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightperitubularcapillarieshydrostaticpressure(const RenalSystemData* msg) {
  return *msg->rightperitubularcapillarieshydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::rightperitubularcapillariesosmoticpressure(const RenalSystemData* msg) {
  return *msg->rightperitubularcapillariesosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&
RenalSystemData::_Internal::rightreabsorptionfiltrationcoefficient(const RenalSystemData* msg) {
  return *msg->rightreabsorptionfiltrationcoefficient_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::rightreabsorptionrate(const RenalSystemData* msg) {
  return *msg->rightreabsorptionrate_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::righttubularosmoticpressure(const RenalSystemData* msg) {
  return *msg->righttubularosmoticpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RenalSystemData::_Internal::righttubularhydrostaticpressure(const RenalSystemData* msg) {
  return *msg->righttubularhydrostaticpressure_;
}
const ::pulse::cdm::bind::ScalarAreaData&
RenalSystemData::_Internal::righttubularreabsorptionfiltrationsurfacearea(const RenalSystemData* msg) {
  return *msg->righttubularreabsorptionfiltrationsurfacearea_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&
RenalSystemData::_Internal::righttubularreabsorptionfluidpermeability(const RenalSystemData* msg) {
  return *msg->righttubularreabsorptionfluidpermeability_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::urinationrate(const RenalSystemData* msg) {
  return *msg->urinationrate_;
}
const ::pulse::cdm::bind::ScalarOsmolalityData&
RenalSystemData::_Internal::urineosmolality(const RenalSystemData* msg) {
  return *msg->urineosmolality_;
}
const ::pulse::cdm::bind::ScalarOsmolarityData&
RenalSystemData::_Internal::urineosmolarity(const RenalSystemData* msg) {
  return *msg->urineosmolarity_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RenalSystemData::_Internal::urineproductionrate(const RenalSystemData* msg) {
  return *msg->urineproductionrate_;
}
const ::pulse::cdm::bind::ScalarData&
RenalSystemData::_Internal::urinespecificgravity(const RenalSystemData* msg) {
  return *msg->urinespecificgravity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RenalSystemData::_Internal::urinevolume(const RenalSystemData* msg) {
  return *msg->urinevolume_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
RenalSystemData::_Internal::urineureanitrogenconcentration(const RenalSystemData* msg) {
  return *msg->urineureanitrogenconcentration_;
}
void RenalSystemData::clear_filtrationfraction() {
  if (GetArena() == nullptr && filtrationfraction_ != nullptr) {
    delete filtrationfraction_;
  }
  filtrationfraction_ = nullptr;
}
void RenalSystemData::clear_glomerularfiltrationrate() {
  if (GetArena() == nullptr && glomerularfiltrationrate_ != nullptr) {
    delete glomerularfiltrationrate_;
  }
  glomerularfiltrationrate_ = nullptr;
}
void RenalSystemData::clear_leftafferentarterioleresistance() {
  if (GetArena() == nullptr && leftafferentarterioleresistance_ != nullptr) {
    delete leftafferentarterioleresistance_;
  }
  leftafferentarterioleresistance_ = nullptr;
}
void RenalSystemData::clear_leftbowmanscapsuleshydrostaticpressure() {
  if (GetArena() == nullptr && leftbowmanscapsuleshydrostaticpressure_ != nullptr) {
    delete leftbowmanscapsuleshydrostaticpressure_;
  }
  leftbowmanscapsuleshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_leftbowmanscapsulesosmoticpressure() {
  if (GetArena() == nullptr && leftbowmanscapsulesosmoticpressure_ != nullptr) {
    delete leftbowmanscapsulesosmoticpressure_;
  }
  leftbowmanscapsulesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_leftefferentarterioleresistance() {
  if (GetArena() == nullptr && leftefferentarterioleresistance_ != nullptr) {
    delete leftefferentarterioleresistance_;
  }
  leftefferentarterioleresistance_ = nullptr;
}
void RenalSystemData::clear_leftglomerularcapillarieshydrostaticpressure() {
  if (GetArena() == nullptr && leftglomerularcapillarieshydrostaticpressure_ != nullptr) {
    delete leftglomerularcapillarieshydrostaticpressure_;
  }
  leftglomerularcapillarieshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_leftglomerularcapillariesosmoticpressure() {
  if (GetArena() == nullptr && leftglomerularcapillariesosmoticpressure_ != nullptr) {
    delete leftglomerularcapillariesosmoticpressure_;
  }
  leftglomerularcapillariesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_leftglomerularfiltrationcoefficient() {
  if (GetArena() == nullptr && leftglomerularfiltrationcoefficient_ != nullptr) {
    delete leftglomerularfiltrationcoefficient_;
  }
  leftglomerularfiltrationcoefficient_ = nullptr;
}
void RenalSystemData::clear_leftglomerularfiltrationrate() {
  if (GetArena() == nullptr && leftglomerularfiltrationrate_ != nullptr) {
    delete leftglomerularfiltrationrate_;
  }
  leftglomerularfiltrationrate_ = nullptr;
}
void RenalSystemData::clear_leftglomerularfiltrationsurfacearea() {
  if (GetArena() == nullptr && leftglomerularfiltrationsurfacearea_ != nullptr) {
    delete leftglomerularfiltrationsurfacearea_;
  }
  leftglomerularfiltrationsurfacearea_ = nullptr;
}
void RenalSystemData::clear_leftglomerularfluidpermeability() {
  if (GetArena() == nullptr && leftglomerularfluidpermeability_ != nullptr) {
    delete leftglomerularfluidpermeability_;
  }
  leftglomerularfluidpermeability_ = nullptr;
}
void RenalSystemData::clear_leftfiltrationfraction() {
  if (GetArena() == nullptr && leftfiltrationfraction_ != nullptr) {
    delete leftfiltrationfraction_;
  }
  leftfiltrationfraction_ = nullptr;
}
void RenalSystemData::clear_leftnetfiltrationpressure() {
  if (GetArena() == nullptr && leftnetfiltrationpressure_ != nullptr) {
    delete leftnetfiltrationpressure_;
  }
  leftnetfiltrationpressure_ = nullptr;
}
void RenalSystemData::clear_leftnetreabsorptionpressure() {
  if (GetArena() == nullptr && leftnetreabsorptionpressure_ != nullptr) {
    delete leftnetreabsorptionpressure_;
  }
  leftnetreabsorptionpressure_ = nullptr;
}
void RenalSystemData::clear_leftperitubularcapillarieshydrostaticpressure() {
  if (GetArena() == nullptr && leftperitubularcapillarieshydrostaticpressure_ != nullptr) {
    delete leftperitubularcapillarieshydrostaticpressure_;
  }
  leftperitubularcapillarieshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_leftperitubularcapillariesosmoticpressure() {
  if (GetArena() == nullptr && leftperitubularcapillariesosmoticpressure_ != nullptr) {
    delete leftperitubularcapillariesosmoticpressure_;
  }
  leftperitubularcapillariesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_leftreabsorptionfiltrationcoefficient() {
  if (GetArena() == nullptr && leftreabsorptionfiltrationcoefficient_ != nullptr) {
    delete leftreabsorptionfiltrationcoefficient_;
  }
  leftreabsorptionfiltrationcoefficient_ = nullptr;
}
void RenalSystemData::clear_leftreabsorptionrate() {
  if (GetArena() == nullptr && leftreabsorptionrate_ != nullptr) {
    delete leftreabsorptionrate_;
  }
  leftreabsorptionrate_ = nullptr;
}
void RenalSystemData::clear_lefttubularosmoticpressure() {
  if (GetArena() == nullptr && lefttubularosmoticpressure_ != nullptr) {
    delete lefttubularosmoticpressure_;
  }
  lefttubularosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_lefttubularhydrostaticpressure() {
  if (GetArena() == nullptr && lefttubularhydrostaticpressure_ != nullptr) {
    delete lefttubularhydrostaticpressure_;
  }
  lefttubularhydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_lefttubularreabsorptionfiltrationsurfacearea() {
  if (GetArena() == nullptr && lefttubularreabsorptionfiltrationsurfacearea_ != nullptr) {
    delete lefttubularreabsorptionfiltrationsurfacearea_;
  }
  lefttubularreabsorptionfiltrationsurfacearea_ = nullptr;
}
void RenalSystemData::clear_lefttubularreabsorptionfluidpermeability() {
  if (GetArena() == nullptr && lefttubularreabsorptionfluidpermeability_ != nullptr) {
    delete lefttubularreabsorptionfluidpermeability_;
  }
  lefttubularreabsorptionfluidpermeability_ = nullptr;
}
void RenalSystemData::clear_renalbloodflow() {
  if (GetArena() == nullptr && renalbloodflow_ != nullptr) {
    delete renalbloodflow_;
  }
  renalbloodflow_ = nullptr;
}
void RenalSystemData::clear_renalplasmaflow() {
  if (GetArena() == nullptr && renalplasmaflow_ != nullptr) {
    delete renalplasmaflow_;
  }
  renalplasmaflow_ = nullptr;
}
void RenalSystemData::clear_renalvascularresistance() {
  if (GetArena() == nullptr && renalvascularresistance_ != nullptr) {
    delete renalvascularresistance_;
  }
  renalvascularresistance_ = nullptr;
}
void RenalSystemData::clear_rightafferentarterioleresistance() {
  if (GetArena() == nullptr && rightafferentarterioleresistance_ != nullptr) {
    delete rightafferentarterioleresistance_;
  }
  rightafferentarterioleresistance_ = nullptr;
}
void RenalSystemData::clear_rightbowmanscapsuleshydrostaticpressure() {
  if (GetArena() == nullptr && rightbowmanscapsuleshydrostaticpressure_ != nullptr) {
    delete rightbowmanscapsuleshydrostaticpressure_;
  }
  rightbowmanscapsuleshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_rightbowmanscapsulesosmoticpressure() {
  if (GetArena() == nullptr && rightbowmanscapsulesosmoticpressure_ != nullptr) {
    delete rightbowmanscapsulesosmoticpressure_;
  }
  rightbowmanscapsulesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_rightefferentarterioleresistance() {
  if (GetArena() == nullptr && rightefferentarterioleresistance_ != nullptr) {
    delete rightefferentarterioleresistance_;
  }
  rightefferentarterioleresistance_ = nullptr;
}
void RenalSystemData::clear_rightglomerularcapillarieshydrostaticpressure() {
  if (GetArena() == nullptr && rightglomerularcapillarieshydrostaticpressure_ != nullptr) {
    delete rightglomerularcapillarieshydrostaticpressure_;
  }
  rightglomerularcapillarieshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_rightglomerularcapillariesosmoticpressure() {
  if (GetArena() == nullptr && rightglomerularcapillariesosmoticpressure_ != nullptr) {
    delete rightglomerularcapillariesosmoticpressure_;
  }
  rightglomerularcapillariesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_rightglomerularfiltrationcoefficient() {
  if (GetArena() == nullptr && rightglomerularfiltrationcoefficient_ != nullptr) {
    delete rightglomerularfiltrationcoefficient_;
  }
  rightglomerularfiltrationcoefficient_ = nullptr;
}
void RenalSystemData::clear_rightglomerularfiltrationrate() {
  if (GetArena() == nullptr && rightglomerularfiltrationrate_ != nullptr) {
    delete rightglomerularfiltrationrate_;
  }
  rightglomerularfiltrationrate_ = nullptr;
}
void RenalSystemData::clear_rightglomerularfiltrationsurfacearea() {
  if (GetArena() == nullptr && rightglomerularfiltrationsurfacearea_ != nullptr) {
    delete rightglomerularfiltrationsurfacearea_;
  }
  rightglomerularfiltrationsurfacearea_ = nullptr;
}
void RenalSystemData::clear_rightglomerularfluidpermeability() {
  if (GetArena() == nullptr && rightglomerularfluidpermeability_ != nullptr) {
    delete rightglomerularfluidpermeability_;
  }
  rightglomerularfluidpermeability_ = nullptr;
}
void RenalSystemData::clear_rightfiltrationfraction() {
  if (GetArena() == nullptr && rightfiltrationfraction_ != nullptr) {
    delete rightfiltrationfraction_;
  }
  rightfiltrationfraction_ = nullptr;
}
void RenalSystemData::clear_rightnetfiltrationpressure() {
  if (GetArena() == nullptr && rightnetfiltrationpressure_ != nullptr) {
    delete rightnetfiltrationpressure_;
  }
  rightnetfiltrationpressure_ = nullptr;
}
void RenalSystemData::clear_rightnetreabsorptionpressure() {
  if (GetArena() == nullptr && rightnetreabsorptionpressure_ != nullptr) {
    delete rightnetreabsorptionpressure_;
  }
  rightnetreabsorptionpressure_ = nullptr;
}
void RenalSystemData::clear_rightperitubularcapillarieshydrostaticpressure() {
  if (GetArena() == nullptr && rightperitubularcapillarieshydrostaticpressure_ != nullptr) {
    delete rightperitubularcapillarieshydrostaticpressure_;
  }
  rightperitubularcapillarieshydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_rightperitubularcapillariesosmoticpressure() {
  if (GetArena() == nullptr && rightperitubularcapillariesosmoticpressure_ != nullptr) {
    delete rightperitubularcapillariesosmoticpressure_;
  }
  rightperitubularcapillariesosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_rightreabsorptionfiltrationcoefficient() {
  if (GetArena() == nullptr && rightreabsorptionfiltrationcoefficient_ != nullptr) {
    delete rightreabsorptionfiltrationcoefficient_;
  }
  rightreabsorptionfiltrationcoefficient_ = nullptr;
}
void RenalSystemData::clear_rightreabsorptionrate() {
  if (GetArena() == nullptr && rightreabsorptionrate_ != nullptr) {
    delete rightreabsorptionrate_;
  }
  rightreabsorptionrate_ = nullptr;
}
void RenalSystemData::clear_righttubularosmoticpressure() {
  if (GetArena() == nullptr && righttubularosmoticpressure_ != nullptr) {
    delete righttubularosmoticpressure_;
  }
  righttubularosmoticpressure_ = nullptr;
}
void RenalSystemData::clear_righttubularhydrostaticpressure() {
  if (GetArena() == nullptr && righttubularhydrostaticpressure_ != nullptr) {
    delete righttubularhydrostaticpressure_;
  }
  righttubularhydrostaticpressure_ = nullptr;
}
void RenalSystemData::clear_righttubularreabsorptionfiltrationsurfacearea() {
  if (GetArena() == nullptr && righttubularreabsorptionfiltrationsurfacearea_ != nullptr) {
    delete righttubularreabsorptionfiltrationsurfacearea_;
  }
  righttubularreabsorptionfiltrationsurfacearea_ = nullptr;
}
void RenalSystemData::clear_righttubularreabsorptionfluidpermeability() {
  if (GetArena() == nullptr && righttubularreabsorptionfluidpermeability_ != nullptr) {
    delete righttubularreabsorptionfluidpermeability_;
  }
  righttubularreabsorptionfluidpermeability_ = nullptr;
}
void RenalSystemData::clear_urinationrate() {
  if (GetArena() == nullptr && urinationrate_ != nullptr) {
    delete urinationrate_;
  }
  urinationrate_ = nullptr;
}
void RenalSystemData::clear_urineosmolality() {
  if (GetArena() == nullptr && urineosmolality_ != nullptr) {
    delete urineosmolality_;
  }
  urineosmolality_ = nullptr;
}
void RenalSystemData::clear_urineosmolarity() {
  if (GetArena() == nullptr && urineosmolarity_ != nullptr) {
    delete urineosmolarity_;
  }
  urineosmolarity_ = nullptr;
}
void RenalSystemData::clear_urineproductionrate() {
  if (GetArena() == nullptr && urineproductionrate_ != nullptr) {
    delete urineproductionrate_;
  }
  urineproductionrate_ = nullptr;
}
void RenalSystemData::clear_urinespecificgravity() {
  if (GetArena() == nullptr && urinespecificgravity_ != nullptr) {
    delete urinespecificgravity_;
  }
  urinespecificgravity_ = nullptr;
}
void RenalSystemData::clear_urinevolume() {
  if (GetArena() == nullptr && urinevolume_ != nullptr) {
    delete urinevolume_;
  }
  urinevolume_ = nullptr;
}
void RenalSystemData::clear_urineureanitrogenconcentration() {
  if (GetArena() == nullptr && urineureanitrogenconcentration_ != nullptr) {
    delete urineureanitrogenconcentration_;
  }
  urineureanitrogenconcentration_ = nullptr;
}
RenalSystemData::RenalSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.RenalSystemData)
}
RenalSystemData::RenalSystemData(const RenalSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filtrationfraction()) {
    filtrationfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.filtrationfraction_);
  } else {
    filtrationfraction_ = nullptr;
  }
  if (from._internal_has_glomerularfiltrationrate()) {
    glomerularfiltrationrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.glomerularfiltrationrate_);
  } else {
    glomerularfiltrationrate_ = nullptr;
  }
  if (from._internal_has_leftafferentarterioleresistance()) {
    leftafferentarterioleresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.leftafferentarterioleresistance_);
  } else {
    leftafferentarterioleresistance_ = nullptr;
  }
  if (from._internal_has_leftbowmanscapsuleshydrostaticpressure()) {
    leftbowmanscapsuleshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftbowmanscapsuleshydrostaticpressure_);
  } else {
    leftbowmanscapsuleshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_leftbowmanscapsulesosmoticpressure()) {
    leftbowmanscapsulesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftbowmanscapsulesosmoticpressure_);
  } else {
    leftbowmanscapsulesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_leftefferentarterioleresistance()) {
    leftefferentarterioleresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.leftefferentarterioleresistance_);
  } else {
    leftefferentarterioleresistance_ = nullptr;
  }
  if (from._internal_has_leftglomerularcapillarieshydrostaticpressure()) {
    leftglomerularcapillarieshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftglomerularcapillarieshydrostaticpressure_);
  } else {
    leftglomerularcapillarieshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_leftglomerularcapillariesosmoticpressure()) {
    leftglomerularcapillariesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftglomerularcapillariesosmoticpressure_);
  } else {
    leftglomerularcapillariesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_leftglomerularfiltrationcoefficient()) {
    leftglomerularfiltrationcoefficient_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureData(*from.leftglomerularfiltrationcoefficient_);
  } else {
    leftglomerularfiltrationcoefficient_ = nullptr;
  }
  if (from._internal_has_leftglomerularfiltrationrate()) {
    leftglomerularfiltrationrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.leftglomerularfiltrationrate_);
  } else {
    leftglomerularfiltrationrate_ = nullptr;
  }
  if (from._internal_has_leftglomerularfiltrationsurfacearea()) {
    leftglomerularfiltrationsurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.leftglomerularfiltrationsurfacearea_);
  } else {
    leftglomerularfiltrationsurfacearea_ = nullptr;
  }
  if (from._internal_has_leftglomerularfluidpermeability()) {
    leftglomerularfluidpermeability_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.leftglomerularfluidpermeability_);
  } else {
    leftglomerularfluidpermeability_ = nullptr;
  }
  if (from._internal_has_leftfiltrationfraction()) {
    leftfiltrationfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftfiltrationfraction_);
  } else {
    leftfiltrationfraction_ = nullptr;
  }
  if (from._internal_has_leftnetfiltrationpressure()) {
    leftnetfiltrationpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftnetfiltrationpressure_);
  } else {
    leftnetfiltrationpressure_ = nullptr;
  }
  if (from._internal_has_leftnetreabsorptionpressure()) {
    leftnetreabsorptionpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftnetreabsorptionpressure_);
  } else {
    leftnetreabsorptionpressure_ = nullptr;
  }
  if (from._internal_has_leftperitubularcapillarieshydrostaticpressure()) {
    leftperitubularcapillarieshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftperitubularcapillarieshydrostaticpressure_);
  } else {
    leftperitubularcapillarieshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_leftperitubularcapillariesosmoticpressure()) {
    leftperitubularcapillariesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.leftperitubularcapillariesosmoticpressure_);
  } else {
    leftperitubularcapillariesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_leftreabsorptionfiltrationcoefficient()) {
    leftreabsorptionfiltrationcoefficient_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureData(*from.leftreabsorptionfiltrationcoefficient_);
  } else {
    leftreabsorptionfiltrationcoefficient_ = nullptr;
  }
  if (from._internal_has_leftreabsorptionrate()) {
    leftreabsorptionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.leftreabsorptionrate_);
  } else {
    leftreabsorptionrate_ = nullptr;
  }
  if (from._internal_has_lefttubularosmoticpressure()) {
    lefttubularosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.lefttubularosmoticpressure_);
  } else {
    lefttubularosmoticpressure_ = nullptr;
  }
  if (from._internal_has_lefttubularhydrostaticpressure()) {
    lefttubularhydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.lefttubularhydrostaticpressure_);
  } else {
    lefttubularhydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_lefttubularreabsorptionfiltrationsurfacearea()) {
    lefttubularreabsorptionfiltrationsurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.lefttubularreabsorptionfiltrationsurfacearea_);
  } else {
    lefttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  }
  if (from._internal_has_lefttubularreabsorptionfluidpermeability()) {
    lefttubularreabsorptionfluidpermeability_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.lefttubularreabsorptionfluidpermeability_);
  } else {
    lefttubularreabsorptionfluidpermeability_ = nullptr;
  }
  if (from._internal_has_renalbloodflow()) {
    renalbloodflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.renalbloodflow_);
  } else {
    renalbloodflow_ = nullptr;
  }
  if (from._internal_has_renalplasmaflow()) {
    renalplasmaflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.renalplasmaflow_);
  } else {
    renalplasmaflow_ = nullptr;
  }
  if (from._internal_has_renalvascularresistance()) {
    renalvascularresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.renalvascularresistance_);
  } else {
    renalvascularresistance_ = nullptr;
  }
  if (from._internal_has_rightafferentarterioleresistance()) {
    rightafferentarterioleresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.rightafferentarterioleresistance_);
  } else {
    rightafferentarterioleresistance_ = nullptr;
  }
  if (from._internal_has_rightbowmanscapsuleshydrostaticpressure()) {
    rightbowmanscapsuleshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightbowmanscapsuleshydrostaticpressure_);
  } else {
    rightbowmanscapsuleshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_rightbowmanscapsulesosmoticpressure()) {
    rightbowmanscapsulesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightbowmanscapsulesosmoticpressure_);
  } else {
    rightbowmanscapsulesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_rightefferentarterioleresistance()) {
    rightefferentarterioleresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.rightefferentarterioleresistance_);
  } else {
    rightefferentarterioleresistance_ = nullptr;
  }
  if (from._internal_has_rightglomerularcapillarieshydrostaticpressure()) {
    rightglomerularcapillarieshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightglomerularcapillarieshydrostaticpressure_);
  } else {
    rightglomerularcapillarieshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_rightglomerularcapillariesosmoticpressure()) {
    rightglomerularcapillariesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightglomerularcapillariesosmoticpressure_);
  } else {
    rightglomerularcapillariesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_rightglomerularfiltrationcoefficient()) {
    rightglomerularfiltrationcoefficient_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureData(*from.rightglomerularfiltrationcoefficient_);
  } else {
    rightglomerularfiltrationcoefficient_ = nullptr;
  }
  if (from._internal_has_rightglomerularfiltrationrate()) {
    rightglomerularfiltrationrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.rightglomerularfiltrationrate_);
  } else {
    rightglomerularfiltrationrate_ = nullptr;
  }
  if (from._internal_has_rightglomerularfiltrationsurfacearea()) {
    rightglomerularfiltrationsurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.rightglomerularfiltrationsurfacearea_);
  } else {
    rightglomerularfiltrationsurfacearea_ = nullptr;
  }
  if (from._internal_has_rightglomerularfluidpermeability()) {
    rightglomerularfluidpermeability_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.rightglomerularfluidpermeability_);
  } else {
    rightglomerularfluidpermeability_ = nullptr;
  }
  if (from._internal_has_rightfiltrationfraction()) {
    rightfiltrationfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightfiltrationfraction_);
  } else {
    rightfiltrationfraction_ = nullptr;
  }
  if (from._internal_has_rightnetfiltrationpressure()) {
    rightnetfiltrationpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightnetfiltrationpressure_);
  } else {
    rightnetfiltrationpressure_ = nullptr;
  }
  if (from._internal_has_rightnetreabsorptionpressure()) {
    rightnetreabsorptionpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightnetreabsorptionpressure_);
  } else {
    rightnetreabsorptionpressure_ = nullptr;
  }
  if (from._internal_has_rightperitubularcapillarieshydrostaticpressure()) {
    rightperitubularcapillarieshydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightperitubularcapillarieshydrostaticpressure_);
  } else {
    rightperitubularcapillarieshydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_rightperitubularcapillariesosmoticpressure()) {
    rightperitubularcapillariesosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.rightperitubularcapillariesosmoticpressure_);
  } else {
    rightperitubularcapillariesosmoticpressure_ = nullptr;
  }
  if (from._internal_has_rightreabsorptionfiltrationcoefficient()) {
    rightreabsorptionfiltrationcoefficient_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureData(*from.rightreabsorptionfiltrationcoefficient_);
  } else {
    rightreabsorptionfiltrationcoefficient_ = nullptr;
  }
  if (from._internal_has_rightreabsorptionrate()) {
    rightreabsorptionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.rightreabsorptionrate_);
  } else {
    rightreabsorptionrate_ = nullptr;
  }
  if (from._internal_has_righttubularosmoticpressure()) {
    righttubularosmoticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.righttubularosmoticpressure_);
  } else {
    righttubularosmoticpressure_ = nullptr;
  }
  if (from._internal_has_righttubularhydrostaticpressure()) {
    righttubularhydrostaticpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.righttubularhydrostaticpressure_);
  } else {
    righttubularhydrostaticpressure_ = nullptr;
  }
  if (from._internal_has_righttubularreabsorptionfiltrationsurfacearea()) {
    righttubularreabsorptionfiltrationsurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.righttubularreabsorptionfiltrationsurfacearea_);
  } else {
    righttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  }
  if (from._internal_has_righttubularreabsorptionfluidpermeability()) {
    righttubularreabsorptionfluidpermeability_ = new ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData(*from.righttubularreabsorptionfluidpermeability_);
  } else {
    righttubularreabsorptionfluidpermeability_ = nullptr;
  }
  if (from._internal_has_urinationrate()) {
    urinationrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.urinationrate_);
  } else {
    urinationrate_ = nullptr;
  }
  if (from._internal_has_urineosmolality()) {
    urineosmolality_ = new ::pulse::cdm::bind::ScalarOsmolalityData(*from.urineosmolality_);
  } else {
    urineosmolality_ = nullptr;
  }
  if (from._internal_has_urineosmolarity()) {
    urineosmolarity_ = new ::pulse::cdm::bind::ScalarOsmolarityData(*from.urineosmolarity_);
  } else {
    urineosmolarity_ = nullptr;
  }
  if (from._internal_has_urineproductionrate()) {
    urineproductionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.urineproductionrate_);
  } else {
    urineproductionrate_ = nullptr;
  }
  if (from._internal_has_urinespecificgravity()) {
    urinespecificgravity_ = new ::pulse::cdm::bind::ScalarData(*from.urinespecificgravity_);
  } else {
    urinespecificgravity_ = nullptr;
  }
  if (from._internal_has_urinevolume()) {
    urinevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.urinevolume_);
  } else {
    urinevolume_ = nullptr;
  }
  if (from._internal_has_urineureanitrogenconcentration()) {
    urineureanitrogenconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.urineureanitrogenconcentration_);
  } else {
    urineureanitrogenconcentration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.RenalSystemData)
}

void RenalSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&filtrationfraction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&urineureanitrogenconcentration_) -
      reinterpret_cast<char*>(&filtrationfraction_)) + sizeof(urineureanitrogenconcentration_));
}

RenalSystemData::~RenalSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.RenalSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenalSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filtrationfraction_;
  if (this != internal_default_instance()) delete glomerularfiltrationrate_;
  if (this != internal_default_instance()) delete leftafferentarterioleresistance_;
  if (this != internal_default_instance()) delete leftbowmanscapsuleshydrostaticpressure_;
  if (this != internal_default_instance()) delete leftbowmanscapsulesosmoticpressure_;
  if (this != internal_default_instance()) delete leftefferentarterioleresistance_;
  if (this != internal_default_instance()) delete leftglomerularcapillarieshydrostaticpressure_;
  if (this != internal_default_instance()) delete leftglomerularcapillariesosmoticpressure_;
  if (this != internal_default_instance()) delete leftglomerularfiltrationcoefficient_;
  if (this != internal_default_instance()) delete leftglomerularfiltrationrate_;
  if (this != internal_default_instance()) delete leftglomerularfiltrationsurfacearea_;
  if (this != internal_default_instance()) delete leftglomerularfluidpermeability_;
  if (this != internal_default_instance()) delete leftfiltrationfraction_;
  if (this != internal_default_instance()) delete leftnetfiltrationpressure_;
  if (this != internal_default_instance()) delete leftnetreabsorptionpressure_;
  if (this != internal_default_instance()) delete leftperitubularcapillarieshydrostaticpressure_;
  if (this != internal_default_instance()) delete leftperitubularcapillariesosmoticpressure_;
  if (this != internal_default_instance()) delete leftreabsorptionfiltrationcoefficient_;
  if (this != internal_default_instance()) delete leftreabsorptionrate_;
  if (this != internal_default_instance()) delete lefttubularosmoticpressure_;
  if (this != internal_default_instance()) delete lefttubularhydrostaticpressure_;
  if (this != internal_default_instance()) delete lefttubularreabsorptionfiltrationsurfacearea_;
  if (this != internal_default_instance()) delete lefttubularreabsorptionfluidpermeability_;
  if (this != internal_default_instance()) delete renalbloodflow_;
  if (this != internal_default_instance()) delete renalplasmaflow_;
  if (this != internal_default_instance()) delete renalvascularresistance_;
  if (this != internal_default_instance()) delete rightafferentarterioleresistance_;
  if (this != internal_default_instance()) delete rightbowmanscapsuleshydrostaticpressure_;
  if (this != internal_default_instance()) delete rightbowmanscapsulesosmoticpressure_;
  if (this != internal_default_instance()) delete rightefferentarterioleresistance_;
  if (this != internal_default_instance()) delete rightglomerularcapillarieshydrostaticpressure_;
  if (this != internal_default_instance()) delete rightglomerularcapillariesosmoticpressure_;
  if (this != internal_default_instance()) delete rightglomerularfiltrationcoefficient_;
  if (this != internal_default_instance()) delete rightglomerularfiltrationrate_;
  if (this != internal_default_instance()) delete rightglomerularfiltrationsurfacearea_;
  if (this != internal_default_instance()) delete rightglomerularfluidpermeability_;
  if (this != internal_default_instance()) delete rightfiltrationfraction_;
  if (this != internal_default_instance()) delete rightnetfiltrationpressure_;
  if (this != internal_default_instance()) delete rightnetreabsorptionpressure_;
  if (this != internal_default_instance()) delete rightperitubularcapillarieshydrostaticpressure_;
  if (this != internal_default_instance()) delete rightperitubularcapillariesosmoticpressure_;
  if (this != internal_default_instance()) delete rightreabsorptionfiltrationcoefficient_;
  if (this != internal_default_instance()) delete rightreabsorptionrate_;
  if (this != internal_default_instance()) delete righttubularosmoticpressure_;
  if (this != internal_default_instance()) delete righttubularhydrostaticpressure_;
  if (this != internal_default_instance()) delete righttubularreabsorptionfiltrationsurfacearea_;
  if (this != internal_default_instance()) delete righttubularreabsorptionfluidpermeability_;
  if (this != internal_default_instance()) delete urinationrate_;
  if (this != internal_default_instance()) delete urineosmolality_;
  if (this != internal_default_instance()) delete urineosmolarity_;
  if (this != internal_default_instance()) delete urineproductionrate_;
  if (this != internal_default_instance()) delete urinespecificgravity_;
  if (this != internal_default_instance()) delete urinevolume_;
  if (this != internal_default_instance()) delete urineureanitrogenconcentration_;
}

void RenalSystemData::ArenaDtor(void* object) {
  RenalSystemData* _this = reinterpret_cast< RenalSystemData* >(object);
  (void)_this;
}
void RenalSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenalSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenalSystemData& RenalSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenalSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void RenalSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.RenalSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filtrationfraction_ != nullptr) {
    delete filtrationfraction_;
  }
  filtrationfraction_ = nullptr;
  if (GetArena() == nullptr && glomerularfiltrationrate_ != nullptr) {
    delete glomerularfiltrationrate_;
  }
  glomerularfiltrationrate_ = nullptr;
  if (GetArena() == nullptr && leftafferentarterioleresistance_ != nullptr) {
    delete leftafferentarterioleresistance_;
  }
  leftafferentarterioleresistance_ = nullptr;
  if (GetArena() == nullptr && leftbowmanscapsuleshydrostaticpressure_ != nullptr) {
    delete leftbowmanscapsuleshydrostaticpressure_;
  }
  leftbowmanscapsuleshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && leftbowmanscapsulesosmoticpressure_ != nullptr) {
    delete leftbowmanscapsulesosmoticpressure_;
  }
  leftbowmanscapsulesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && leftefferentarterioleresistance_ != nullptr) {
    delete leftefferentarterioleresistance_;
  }
  leftefferentarterioleresistance_ = nullptr;
  if (GetArena() == nullptr && leftglomerularcapillarieshydrostaticpressure_ != nullptr) {
    delete leftglomerularcapillarieshydrostaticpressure_;
  }
  leftglomerularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && leftglomerularcapillariesosmoticpressure_ != nullptr) {
    delete leftglomerularcapillariesosmoticpressure_;
  }
  leftglomerularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfiltrationcoefficient_ != nullptr) {
    delete leftglomerularfiltrationcoefficient_;
  }
  leftglomerularfiltrationcoefficient_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfiltrationrate_ != nullptr) {
    delete leftglomerularfiltrationrate_;
  }
  leftglomerularfiltrationrate_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfiltrationsurfacearea_ != nullptr) {
    delete leftglomerularfiltrationsurfacearea_;
  }
  leftglomerularfiltrationsurfacearea_ = nullptr;
  if (GetArena() == nullptr && leftglomerularfluidpermeability_ != nullptr) {
    delete leftglomerularfluidpermeability_;
  }
  leftglomerularfluidpermeability_ = nullptr;
  if (GetArena() == nullptr && leftfiltrationfraction_ != nullptr) {
    delete leftfiltrationfraction_;
  }
  leftfiltrationfraction_ = nullptr;
  if (GetArena() == nullptr && leftnetfiltrationpressure_ != nullptr) {
    delete leftnetfiltrationpressure_;
  }
  leftnetfiltrationpressure_ = nullptr;
  if (GetArena() == nullptr && leftnetreabsorptionpressure_ != nullptr) {
    delete leftnetreabsorptionpressure_;
  }
  leftnetreabsorptionpressure_ = nullptr;
  if (GetArena() == nullptr && leftperitubularcapillarieshydrostaticpressure_ != nullptr) {
    delete leftperitubularcapillarieshydrostaticpressure_;
  }
  leftperitubularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && leftperitubularcapillariesosmoticpressure_ != nullptr) {
    delete leftperitubularcapillariesosmoticpressure_;
  }
  leftperitubularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && leftreabsorptionfiltrationcoefficient_ != nullptr) {
    delete leftreabsorptionfiltrationcoefficient_;
  }
  leftreabsorptionfiltrationcoefficient_ = nullptr;
  if (GetArena() == nullptr && leftreabsorptionrate_ != nullptr) {
    delete leftreabsorptionrate_;
  }
  leftreabsorptionrate_ = nullptr;
  if (GetArena() == nullptr && lefttubularosmoticpressure_ != nullptr) {
    delete lefttubularosmoticpressure_;
  }
  lefttubularosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && lefttubularhydrostaticpressure_ != nullptr) {
    delete lefttubularhydrostaticpressure_;
  }
  lefttubularhydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && lefttubularreabsorptionfiltrationsurfacearea_ != nullptr) {
    delete lefttubularreabsorptionfiltrationsurfacearea_;
  }
  lefttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  if (GetArena() == nullptr && lefttubularreabsorptionfluidpermeability_ != nullptr) {
    delete lefttubularreabsorptionfluidpermeability_;
  }
  lefttubularreabsorptionfluidpermeability_ = nullptr;
  if (GetArena() == nullptr && renalbloodflow_ != nullptr) {
    delete renalbloodflow_;
  }
  renalbloodflow_ = nullptr;
  if (GetArena() == nullptr && renalplasmaflow_ != nullptr) {
    delete renalplasmaflow_;
  }
  renalplasmaflow_ = nullptr;
  if (GetArena() == nullptr && renalvascularresistance_ != nullptr) {
    delete renalvascularresistance_;
  }
  renalvascularresistance_ = nullptr;
  if (GetArena() == nullptr && rightafferentarterioleresistance_ != nullptr) {
    delete rightafferentarterioleresistance_;
  }
  rightafferentarterioleresistance_ = nullptr;
  if (GetArena() == nullptr && rightbowmanscapsuleshydrostaticpressure_ != nullptr) {
    delete rightbowmanscapsuleshydrostaticpressure_;
  }
  rightbowmanscapsuleshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && rightbowmanscapsulesosmoticpressure_ != nullptr) {
    delete rightbowmanscapsulesosmoticpressure_;
  }
  rightbowmanscapsulesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && rightefferentarterioleresistance_ != nullptr) {
    delete rightefferentarterioleresistance_;
  }
  rightefferentarterioleresistance_ = nullptr;
  if (GetArena() == nullptr && rightglomerularcapillarieshydrostaticpressure_ != nullptr) {
    delete rightglomerularcapillarieshydrostaticpressure_;
  }
  rightglomerularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && rightglomerularcapillariesosmoticpressure_ != nullptr) {
    delete rightglomerularcapillariesosmoticpressure_;
  }
  rightglomerularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfiltrationcoefficient_ != nullptr) {
    delete rightglomerularfiltrationcoefficient_;
  }
  rightglomerularfiltrationcoefficient_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfiltrationrate_ != nullptr) {
    delete rightglomerularfiltrationrate_;
  }
  rightglomerularfiltrationrate_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfiltrationsurfacearea_ != nullptr) {
    delete rightglomerularfiltrationsurfacearea_;
  }
  rightglomerularfiltrationsurfacearea_ = nullptr;
  if (GetArena() == nullptr && rightglomerularfluidpermeability_ != nullptr) {
    delete rightglomerularfluidpermeability_;
  }
  rightglomerularfluidpermeability_ = nullptr;
  if (GetArena() == nullptr && rightfiltrationfraction_ != nullptr) {
    delete rightfiltrationfraction_;
  }
  rightfiltrationfraction_ = nullptr;
  if (GetArena() == nullptr && rightnetfiltrationpressure_ != nullptr) {
    delete rightnetfiltrationpressure_;
  }
  rightnetfiltrationpressure_ = nullptr;
  if (GetArena() == nullptr && rightnetreabsorptionpressure_ != nullptr) {
    delete rightnetreabsorptionpressure_;
  }
  rightnetreabsorptionpressure_ = nullptr;
  if (GetArena() == nullptr && rightperitubularcapillarieshydrostaticpressure_ != nullptr) {
    delete rightperitubularcapillarieshydrostaticpressure_;
  }
  rightperitubularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && rightperitubularcapillariesosmoticpressure_ != nullptr) {
    delete rightperitubularcapillariesosmoticpressure_;
  }
  rightperitubularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && rightreabsorptionfiltrationcoefficient_ != nullptr) {
    delete rightreabsorptionfiltrationcoefficient_;
  }
  rightreabsorptionfiltrationcoefficient_ = nullptr;
  if (GetArena() == nullptr && rightreabsorptionrate_ != nullptr) {
    delete rightreabsorptionrate_;
  }
  rightreabsorptionrate_ = nullptr;
  if (GetArena() == nullptr && righttubularosmoticpressure_ != nullptr) {
    delete righttubularosmoticpressure_;
  }
  righttubularosmoticpressure_ = nullptr;
  if (GetArena() == nullptr && righttubularhydrostaticpressure_ != nullptr) {
    delete righttubularhydrostaticpressure_;
  }
  righttubularhydrostaticpressure_ = nullptr;
  if (GetArena() == nullptr && righttubularreabsorptionfiltrationsurfacearea_ != nullptr) {
    delete righttubularreabsorptionfiltrationsurfacearea_;
  }
  righttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  if (GetArena() == nullptr && righttubularreabsorptionfluidpermeability_ != nullptr) {
    delete righttubularreabsorptionfluidpermeability_;
  }
  righttubularreabsorptionfluidpermeability_ = nullptr;
  if (GetArena() == nullptr && urinationrate_ != nullptr) {
    delete urinationrate_;
  }
  urinationrate_ = nullptr;
  if (GetArena() == nullptr && urineosmolality_ != nullptr) {
    delete urineosmolality_;
  }
  urineosmolality_ = nullptr;
  if (GetArena() == nullptr && urineosmolarity_ != nullptr) {
    delete urineosmolarity_;
  }
  urineosmolarity_ = nullptr;
  if (GetArena() == nullptr && urineproductionrate_ != nullptr) {
    delete urineproductionrate_;
  }
  urineproductionrate_ = nullptr;
  if (GetArena() == nullptr && urinespecificgravity_ != nullptr) {
    delete urinespecificgravity_;
  }
  urinespecificgravity_ = nullptr;
  if (GetArena() == nullptr && urinevolume_ != nullptr) {
    delete urinevolume_;
  }
  urinevolume_ = nullptr;
  if (GetArena() == nullptr && urineureanitrogenconcentration_ != nullptr) {
    delete urineureanitrogenconcentration_;
  }
  urineureanitrogenconcentration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenalSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.Scalar0To1Data FiltrationFraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filtrationfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData GlomerularFiltrationRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_glomerularfiltrationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAfferentArterioleResistance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftafferentarterioleresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesHydrostaticPressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftbowmanscapsuleshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesOsmoticPressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftbowmanscapsulesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftEfferentArterioleResistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftefferentarterioleresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularcapillarieshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesOsmoticPressure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularcapillariesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfiltrationcoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData LeftGlomerularFiltrationRate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfiltrationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFiltrationSurfaceArea = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfiltrationsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftglomerularfluidpermeability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftFiltrationFraction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftfiltrationfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftNetFiltrationPressure = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftnetfiltrationpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftNetReabsorptionPressure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftnetreabsorptionpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftperitubularcapillarieshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesOsmoticPressure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftperitubularcapillariesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftreabsorptionfiltrationcoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData LeftReabsorptionRate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftreabsorptionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftTubularOsmoticPressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData LeftTubularHydrostaticPressure = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularhydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularreabsorptionfiltrationsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttubularreabsorptionfluidpermeability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData RenalBloodFlow = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalbloodflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData RenalPlasmaFlow = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalplasmaflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RenalVascularResistance = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_renalvascularresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAfferentArterioleResistance = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightafferentarterioleresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesHydrostaticPressure = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightbowmanscapsuleshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesOsmoticPressure = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightbowmanscapsulesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightEfferentArterioleResistance = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightefferentarterioleresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesHydrostaticPressure = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularcapillarieshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesOsmoticPressure = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularcapillariesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfiltrationcoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData RightGlomerularFiltrationRate = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfiltrationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData RightGlomerularFiltrationSurfaceArea = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfiltrationsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightglomerularfluidpermeability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightFiltrationFraction = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightfiltrationfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightNetFiltrationPressure = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightnetfiltrationpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightNetReabsorptionPressure = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightnetreabsorptionpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesHydrostaticPressure = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightperitubularcapillarieshydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesOsmoticPressure = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightperitubularcapillariesosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightreabsorptionfiltrationcoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData RightReabsorptionRate = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightreabsorptionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightTubularOsmoticPressure = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularosmoticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RightTubularHydrostaticPressure = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularhydrostaticpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularreabsorptionfiltrationsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttubularreabsorptionfluidpermeability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData UrinationRate = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_urinationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarOsmolalityData UrineOsmolality = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineosmolality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarOsmolarityData UrineOsmolarity = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineosmolarity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData UrineProductionRate = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineproductionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData UrineSpecificGravity = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_urinespecificgravity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData UrineVolume = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_urinevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData UrineUreaNitrogenConcentration = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_urineureanitrogenconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenalSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.RenalSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data FiltrationFraction = 1;
  if (this->has_filtrationfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filtrationfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData GlomerularFiltrationRate = 2;
  if (this->has_glomerularfiltrationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::glomerularfiltrationrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAfferentArterioleResistance = 3;
  if (this->has_leftafferentarterioleresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leftafferentarterioleresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesHydrostaticPressure = 4;
  if (this->has_leftbowmanscapsuleshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leftbowmanscapsuleshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesOsmoticPressure = 5;
  if (this->has_leftbowmanscapsulesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::leftbowmanscapsulesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftEfferentArterioleResistance = 6;
  if (this->has_leftefferentarterioleresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::leftefferentarterioleresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure = 7;
  if (this->has_leftglomerularcapillarieshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::leftglomerularcapillarieshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesOsmoticPressure = 8;
  if (this->has_leftglomerularcapillariesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leftglomerularcapillariesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient = 9;
  if (this->has_leftglomerularfiltrationcoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::leftglomerularfiltrationcoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftGlomerularFiltrationRate = 10;
  if (this->has_leftglomerularfiltrationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::leftglomerularfiltrationrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFiltrationSurfaceArea = 11;
  if (this->has_leftglomerularfiltrationsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::leftglomerularfiltrationsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability = 12;
  if (this->has_leftglomerularfluidpermeability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::leftglomerularfluidpermeability(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftFiltrationFraction = 13;
  if (this->has_leftfiltrationfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::leftfiltrationfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftNetFiltrationPressure = 14;
  if (this->has_leftnetfiltrationpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::leftnetfiltrationpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftNetReabsorptionPressure = 15;
  if (this->has_leftnetreabsorptionpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::leftnetreabsorptionpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure = 16;
  if (this->has_leftperitubularcapillarieshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::leftperitubularcapillarieshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesOsmoticPressure = 17;
  if (this->has_leftperitubularcapillariesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::leftperitubularcapillariesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient = 18;
  if (this->has_leftreabsorptionfiltrationcoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::leftreabsorptionfiltrationcoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftReabsorptionRate = 19;
  if (this->has_leftreabsorptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::leftreabsorptionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftTubularOsmoticPressure = 20;
  if (this->has_lefttubularosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::lefttubularosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftTubularHydrostaticPressure = 21;
  if (this->has_lefttubularhydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::lefttubularhydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea = 22;
  if (this->has_lefttubularreabsorptionfiltrationsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::lefttubularreabsorptionfiltrationsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability = 23;
  if (this->has_lefttubularreabsorptionfluidpermeability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::lefttubularreabsorptionfluidpermeability(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalBloodFlow = 24;
  if (this->has_renalbloodflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::renalbloodflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalPlasmaFlow = 25;
  if (this->has_renalplasmaflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::renalplasmaflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RenalVascularResistance = 26;
  if (this->has_renalvascularresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::renalvascularresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAfferentArterioleResistance = 27;
  if (this->has_rightafferentarterioleresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::rightafferentarterioleresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesHydrostaticPressure = 28;
  if (this->has_rightbowmanscapsuleshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::rightbowmanscapsuleshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesOsmoticPressure = 29;
  if (this->has_rightbowmanscapsulesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::rightbowmanscapsulesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightEfferentArterioleResistance = 30;
  if (this->has_rightefferentarterioleresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::rightefferentarterioleresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesHydrostaticPressure = 31;
  if (this->has_rightglomerularcapillarieshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::rightglomerularcapillarieshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesOsmoticPressure = 32;
  if (this->has_rightglomerularcapillariesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::rightglomerularcapillariesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient = 33;
  if (this->has_rightglomerularfiltrationcoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::rightglomerularfiltrationcoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightGlomerularFiltrationRate = 34;
  if (this->has_rightglomerularfiltrationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::rightglomerularfiltrationrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFiltrationSurfaceArea = 35;
  if (this->has_rightglomerularfiltrationsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::rightglomerularfiltrationsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability = 36;
  if (this->has_rightglomerularfluidpermeability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::rightglomerularfluidpermeability(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightFiltrationFraction = 37;
  if (this->has_rightfiltrationfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::rightfiltrationfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightNetFiltrationPressure = 38;
  if (this->has_rightnetfiltrationpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::rightnetfiltrationpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightNetReabsorptionPressure = 39;
  if (this->has_rightnetreabsorptionpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::rightnetreabsorptionpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesHydrostaticPressure = 40;
  if (this->has_rightperitubularcapillarieshydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::rightperitubularcapillarieshydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesOsmoticPressure = 41;
  if (this->has_rightperitubularcapillariesosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::rightperitubularcapillariesosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient = 42;
  if (this->has_rightreabsorptionfiltrationcoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::rightreabsorptionfiltrationcoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightReabsorptionRate = 43;
  if (this->has_rightreabsorptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::rightreabsorptionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightTubularOsmoticPressure = 44;
  if (this->has_righttubularosmoticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::righttubularosmoticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RightTubularHydrostaticPressure = 45;
  if (this->has_righttubularhydrostaticpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::righttubularhydrostaticpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea = 46;
  if (this->has_righttubularreabsorptionfiltrationsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::righttubularreabsorptionfiltrationsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability = 47;
  if (this->has_righttubularreabsorptionfluidpermeability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::righttubularreabsorptionfluidpermeability(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrinationRate = 48;
  if (this->has_urinationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::urinationrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarOsmolalityData UrineOsmolality = 49;
  if (this->has_urineosmolality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::urineosmolality(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarOsmolarityData UrineOsmolarity = 50;
  if (this->has_urineosmolarity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::urineosmolarity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrineProductionRate = 51;
  if (this->has_urineproductionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::urineproductionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData UrineSpecificGravity = 52;
  if (this->has_urinespecificgravity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::urinespecificgravity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData UrineVolume = 53;
  if (this->has_urinevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::urinevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData UrineUreaNitrogenConcentration = 54;
  if (this->has_urineureanitrogenconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::urineureanitrogenconcentration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.RenalSystemData)
  return target;
}

size_t RenalSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.RenalSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.Scalar0To1Data FiltrationFraction = 1;
  if (this->has_filtrationfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filtrationfraction_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData GlomerularFiltrationRate = 2;
  if (this->has_glomerularfiltrationrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *glomerularfiltrationrate_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAfferentArterioleResistance = 3;
  if (this->has_leftafferentarterioleresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftafferentarterioleresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesHydrostaticPressure = 4;
  if (this->has_leftbowmanscapsuleshydrostaticpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftbowmanscapsuleshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesOsmoticPressure = 5;
  if (this->has_leftbowmanscapsulesosmoticpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftbowmanscapsulesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftEfferentArterioleResistance = 6;
  if (this->has_leftefferentarterioleresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftefferentarterioleresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure = 7;
  if (this->has_leftglomerularcapillarieshydrostaticpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularcapillarieshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesOsmoticPressure = 8;
  if (this->has_leftglomerularcapillariesosmoticpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularcapillariesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient = 9;
  if (this->has_leftglomerularfiltrationcoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfiltrationcoefficient_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftGlomerularFiltrationRate = 10;
  if (this->has_leftglomerularfiltrationrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfiltrationrate_);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFiltrationSurfaceArea = 11;
  if (this->has_leftglomerularfiltrationsurfacearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfiltrationsurfacearea_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability = 12;
  if (this->has_leftglomerularfluidpermeability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftglomerularfluidpermeability_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftFiltrationFraction = 13;
  if (this->has_leftfiltrationfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftfiltrationfraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftNetFiltrationPressure = 14;
  if (this->has_leftnetfiltrationpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftnetfiltrationpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftNetReabsorptionPressure = 15;
  if (this->has_leftnetreabsorptionpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftnetreabsorptionpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure = 16;
  if (this->has_leftperitubularcapillarieshydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftperitubularcapillarieshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesOsmoticPressure = 17;
  if (this->has_leftperitubularcapillariesosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftperitubularcapillariesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient = 18;
  if (this->has_leftreabsorptionfiltrationcoefficient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftreabsorptionfiltrationcoefficient_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftReabsorptionRate = 19;
  if (this->has_leftreabsorptionrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftreabsorptionrate_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftTubularOsmoticPressure = 20;
  if (this->has_lefttubularosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData LeftTubularHydrostaticPressure = 21;
  if (this->has_lefttubularhydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularhydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea = 22;
  if (this->has_lefttubularreabsorptionfiltrationsurfacearea()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularreabsorptionfiltrationsurfacearea_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability = 23;
  if (this->has_lefttubularreabsorptionfluidpermeability()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttubularreabsorptionfluidpermeability_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalBloodFlow = 24;
  if (this->has_renalbloodflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalbloodflow_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalPlasmaFlow = 25;
  if (this->has_renalplasmaflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalplasmaflow_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RenalVascularResistance = 26;
  if (this->has_renalvascularresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *renalvascularresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAfferentArterioleResistance = 27;
  if (this->has_rightafferentarterioleresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightafferentarterioleresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesHydrostaticPressure = 28;
  if (this->has_rightbowmanscapsuleshydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightbowmanscapsuleshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesOsmoticPressure = 29;
  if (this->has_rightbowmanscapsulesosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightbowmanscapsulesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightEfferentArterioleResistance = 30;
  if (this->has_rightefferentarterioleresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightefferentarterioleresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesHydrostaticPressure = 31;
  if (this->has_rightglomerularcapillarieshydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularcapillarieshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesOsmoticPressure = 32;
  if (this->has_rightglomerularcapillariesosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularcapillariesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient = 33;
  if (this->has_rightglomerularfiltrationcoefficient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfiltrationcoefficient_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightGlomerularFiltrationRate = 34;
  if (this->has_rightglomerularfiltrationrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfiltrationrate_);
  }

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFiltrationSurfaceArea = 35;
  if (this->has_rightglomerularfiltrationsurfacearea()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfiltrationsurfacearea_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability = 36;
  if (this->has_rightglomerularfluidpermeability()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightglomerularfluidpermeability_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightFiltrationFraction = 37;
  if (this->has_rightfiltrationfraction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightfiltrationfraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightNetFiltrationPressure = 38;
  if (this->has_rightnetfiltrationpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightnetfiltrationpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightNetReabsorptionPressure = 39;
  if (this->has_rightnetreabsorptionpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightnetreabsorptionpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesHydrostaticPressure = 40;
  if (this->has_rightperitubularcapillarieshydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightperitubularcapillarieshydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesOsmoticPressure = 41;
  if (this->has_rightperitubularcapillariesosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightperitubularcapillariesosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient = 42;
  if (this->has_rightreabsorptionfiltrationcoefficient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightreabsorptionfiltrationcoefficient_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightReabsorptionRate = 43;
  if (this->has_rightreabsorptionrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightreabsorptionrate_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightTubularOsmoticPressure = 44;
  if (this->has_righttubularosmoticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularosmoticpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData RightTubularHydrostaticPressure = 45;
  if (this->has_righttubularhydrostaticpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularhydrostaticpressure_);
  }

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea = 46;
  if (this->has_righttubularreabsorptionfiltrationsurfacearea()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularreabsorptionfiltrationsurfacearea_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability = 47;
  if (this->has_righttubularreabsorptionfluidpermeability()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttubularreabsorptionfluidpermeability_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrinationRate = 48;
  if (this->has_urinationrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urinationrate_);
  }

  // .pulse.cdm.bind.ScalarOsmolalityData UrineOsmolality = 49;
  if (this->has_urineosmolality()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineosmolality_);
  }

  // .pulse.cdm.bind.ScalarOsmolarityData UrineOsmolarity = 50;
  if (this->has_urineosmolarity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineosmolarity_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrineProductionRate = 51;
  if (this->has_urineproductionrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineproductionrate_);
  }

  // .pulse.cdm.bind.ScalarData UrineSpecificGravity = 52;
  if (this->has_urinespecificgravity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urinespecificgravity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData UrineVolume = 53;
  if (this->has_urinevolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urinevolume_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData UrineUreaNitrogenConcentration = 54;
  if (this->has_urineureanitrogenconcentration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urineureanitrogenconcentration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenalSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.RenalSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const RenalSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenalSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.RenalSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.RenalSystemData)
    MergeFrom(*source);
  }
}

void RenalSystemData::MergeFrom(const RenalSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.RenalSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filtrationfraction()) {
    _internal_mutable_filtrationfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_filtrationfraction());
  }
  if (from.has_glomerularfiltrationrate()) {
    _internal_mutable_glomerularfiltrationrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_glomerularfiltrationrate());
  }
  if (from.has_leftafferentarterioleresistance()) {
    _internal_mutable_leftafferentarterioleresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_leftafferentarterioleresistance());
  }
  if (from.has_leftbowmanscapsuleshydrostaticpressure()) {
    _internal_mutable_leftbowmanscapsuleshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftbowmanscapsuleshydrostaticpressure());
  }
  if (from.has_leftbowmanscapsulesosmoticpressure()) {
    _internal_mutable_leftbowmanscapsulesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftbowmanscapsulesosmoticpressure());
  }
  if (from.has_leftefferentarterioleresistance()) {
    _internal_mutable_leftefferentarterioleresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_leftefferentarterioleresistance());
  }
  if (from.has_leftglomerularcapillarieshydrostaticpressure()) {
    _internal_mutable_leftglomerularcapillarieshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftglomerularcapillarieshydrostaticpressure());
  }
  if (from.has_leftglomerularcapillariesosmoticpressure()) {
    _internal_mutable_leftglomerularcapillariesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftglomerularcapillariesosmoticpressure());
  }
  if (from.has_leftglomerularfiltrationcoefficient()) {
    _internal_mutable_leftglomerularfiltrationcoefficient()->::pulse::cdm::bind::ScalarVolumePerTimePressureData::MergeFrom(from._internal_leftglomerularfiltrationcoefficient());
  }
  if (from.has_leftglomerularfiltrationrate()) {
    _internal_mutable_leftglomerularfiltrationrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_leftglomerularfiltrationrate());
  }
  if (from.has_leftglomerularfiltrationsurfacearea()) {
    _internal_mutable_leftglomerularfiltrationsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_leftglomerularfiltrationsurfacearea());
  }
  if (from.has_leftglomerularfluidpermeability()) {
    _internal_mutable_leftglomerularfluidpermeability()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_leftglomerularfluidpermeability());
  }
  if (from.has_leftfiltrationfraction()) {
    _internal_mutable_leftfiltrationfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftfiltrationfraction());
  }
  if (from.has_leftnetfiltrationpressure()) {
    _internal_mutable_leftnetfiltrationpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftnetfiltrationpressure());
  }
  if (from.has_leftnetreabsorptionpressure()) {
    _internal_mutable_leftnetreabsorptionpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftnetreabsorptionpressure());
  }
  if (from.has_leftperitubularcapillarieshydrostaticpressure()) {
    _internal_mutable_leftperitubularcapillarieshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftperitubularcapillarieshydrostaticpressure());
  }
  if (from.has_leftperitubularcapillariesosmoticpressure()) {
    _internal_mutable_leftperitubularcapillariesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_leftperitubularcapillariesosmoticpressure());
  }
  if (from.has_leftreabsorptionfiltrationcoefficient()) {
    _internal_mutable_leftreabsorptionfiltrationcoefficient()->::pulse::cdm::bind::ScalarVolumePerTimePressureData::MergeFrom(from._internal_leftreabsorptionfiltrationcoefficient());
  }
  if (from.has_leftreabsorptionrate()) {
    _internal_mutable_leftreabsorptionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_leftreabsorptionrate());
  }
  if (from.has_lefttubularosmoticpressure()) {
    _internal_mutable_lefttubularosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_lefttubularosmoticpressure());
  }
  if (from.has_lefttubularhydrostaticpressure()) {
    _internal_mutable_lefttubularhydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_lefttubularhydrostaticpressure());
  }
  if (from.has_lefttubularreabsorptionfiltrationsurfacearea()) {
    _internal_mutable_lefttubularreabsorptionfiltrationsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_lefttubularreabsorptionfiltrationsurfacearea());
  }
  if (from.has_lefttubularreabsorptionfluidpermeability()) {
    _internal_mutable_lefttubularreabsorptionfluidpermeability()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_lefttubularreabsorptionfluidpermeability());
  }
  if (from.has_renalbloodflow()) {
    _internal_mutable_renalbloodflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_renalbloodflow());
  }
  if (from.has_renalplasmaflow()) {
    _internal_mutable_renalplasmaflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_renalplasmaflow());
  }
  if (from.has_renalvascularresistance()) {
    _internal_mutable_renalvascularresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_renalvascularresistance());
  }
  if (from.has_rightafferentarterioleresistance()) {
    _internal_mutable_rightafferentarterioleresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_rightafferentarterioleresistance());
  }
  if (from.has_rightbowmanscapsuleshydrostaticpressure()) {
    _internal_mutable_rightbowmanscapsuleshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightbowmanscapsuleshydrostaticpressure());
  }
  if (from.has_rightbowmanscapsulesosmoticpressure()) {
    _internal_mutable_rightbowmanscapsulesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightbowmanscapsulesosmoticpressure());
  }
  if (from.has_rightefferentarterioleresistance()) {
    _internal_mutable_rightefferentarterioleresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_rightefferentarterioleresistance());
  }
  if (from.has_rightglomerularcapillarieshydrostaticpressure()) {
    _internal_mutable_rightglomerularcapillarieshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightglomerularcapillarieshydrostaticpressure());
  }
  if (from.has_rightglomerularcapillariesosmoticpressure()) {
    _internal_mutable_rightglomerularcapillariesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightglomerularcapillariesosmoticpressure());
  }
  if (from.has_rightglomerularfiltrationcoefficient()) {
    _internal_mutable_rightglomerularfiltrationcoefficient()->::pulse::cdm::bind::ScalarVolumePerTimePressureData::MergeFrom(from._internal_rightglomerularfiltrationcoefficient());
  }
  if (from.has_rightglomerularfiltrationrate()) {
    _internal_mutable_rightglomerularfiltrationrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_rightglomerularfiltrationrate());
  }
  if (from.has_rightglomerularfiltrationsurfacearea()) {
    _internal_mutable_rightglomerularfiltrationsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_rightglomerularfiltrationsurfacearea());
  }
  if (from.has_rightglomerularfluidpermeability()) {
    _internal_mutable_rightglomerularfluidpermeability()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_rightglomerularfluidpermeability());
  }
  if (from.has_rightfiltrationfraction()) {
    _internal_mutable_rightfiltrationfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightfiltrationfraction());
  }
  if (from.has_rightnetfiltrationpressure()) {
    _internal_mutable_rightnetfiltrationpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightnetfiltrationpressure());
  }
  if (from.has_rightnetreabsorptionpressure()) {
    _internal_mutable_rightnetreabsorptionpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightnetreabsorptionpressure());
  }
  if (from.has_rightperitubularcapillarieshydrostaticpressure()) {
    _internal_mutable_rightperitubularcapillarieshydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightperitubularcapillarieshydrostaticpressure());
  }
  if (from.has_rightperitubularcapillariesosmoticpressure()) {
    _internal_mutable_rightperitubularcapillariesosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_rightperitubularcapillariesosmoticpressure());
  }
  if (from.has_rightreabsorptionfiltrationcoefficient()) {
    _internal_mutable_rightreabsorptionfiltrationcoefficient()->::pulse::cdm::bind::ScalarVolumePerTimePressureData::MergeFrom(from._internal_rightreabsorptionfiltrationcoefficient());
  }
  if (from.has_rightreabsorptionrate()) {
    _internal_mutable_rightreabsorptionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_rightreabsorptionrate());
  }
  if (from.has_righttubularosmoticpressure()) {
    _internal_mutable_righttubularosmoticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_righttubularosmoticpressure());
  }
  if (from.has_righttubularhydrostaticpressure()) {
    _internal_mutable_righttubularhydrostaticpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_righttubularhydrostaticpressure());
  }
  if (from.has_righttubularreabsorptionfiltrationsurfacearea()) {
    _internal_mutable_righttubularreabsorptionfiltrationsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_righttubularreabsorptionfiltrationsurfacearea());
  }
  if (from.has_righttubularreabsorptionfluidpermeability()) {
    _internal_mutable_righttubularreabsorptionfluidpermeability()->::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData::MergeFrom(from._internal_righttubularreabsorptionfluidpermeability());
  }
  if (from.has_urinationrate()) {
    _internal_mutable_urinationrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_urinationrate());
  }
  if (from.has_urineosmolality()) {
    _internal_mutable_urineosmolality()->::pulse::cdm::bind::ScalarOsmolalityData::MergeFrom(from._internal_urineosmolality());
  }
  if (from.has_urineosmolarity()) {
    _internal_mutable_urineosmolarity()->::pulse::cdm::bind::ScalarOsmolarityData::MergeFrom(from._internal_urineosmolarity());
  }
  if (from.has_urineproductionrate()) {
    _internal_mutable_urineproductionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_urineproductionrate());
  }
  if (from.has_urinespecificgravity()) {
    _internal_mutable_urinespecificgravity()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_urinespecificgravity());
  }
  if (from.has_urinevolume()) {
    _internal_mutable_urinevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_urinevolume());
  }
  if (from.has_urineureanitrogenconcentration()) {
    _internal_mutable_urineureanitrogenconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_urineureanitrogenconcentration());
  }
}

void RenalSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.RenalSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenalSystemData::CopyFrom(const RenalSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.RenalSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenalSystemData::IsInitialized() const {
  return true;
}

void RenalSystemData::InternalSwap(RenalSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenalSystemData, urineureanitrogenconcentration_)
      + sizeof(RenalSystemData::urineureanitrogenconcentration_)
      - PROTOBUF_FIELD_OFFSET(RenalSystemData, filtrationfraction_)>(
          reinterpret_cast<char*>(&filtrationfraction_),
          reinterpret_cast<char*>(&other->filtrationfraction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenalSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RespiratorySystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPressureData& alveolararterialgradient(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& alveolardeadspace(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& anatomicdeadspace(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& carricoindex(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerPressureData& chestwallcompliance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& elasticworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& endtidalcarbondioxidefraction(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& endtidalcarbondioxidepressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& endtidaloxygenfraction(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& endtidaloxygenpressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& expiratoryflow(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& expiratorypulmonaryresistance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& fractionofinsipredoxygen(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& imposedpowerofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& imposedworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& inspiratoryexpiratoryratio(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inspiratoryflow(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& inspiratorypulmonaryresistance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& intrapleuralpressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& intrapulmonarypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerPressureData& lungcompliance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& maximalinspiratorypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanairwaypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& oxygenationindex(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& oxygensaturationindex(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& patientpowerofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& patientworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& peakinspiratorypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& physiologicdeadspace(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& positiveendexpiratorypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerPressureData& pulmonarycompliance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressurePerVolumeData& pulmonaryelastance(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& resistiveexpiratoryworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& resistiveinspiratoryworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& respirationrate(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& respiratorymusclefatigue(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& respiratorymusclepressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& saturationandfractionofinspiredoxygenratio(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& specificventilation(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& tidalvolume(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalalveolarventilation(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& totaldeadspaceventilation(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totallungvolume(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& totalpowerofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalpulmonaryventilation(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& totalworkofbreathing(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transairwaypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transalveolarpressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transchestwallpressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transmusclepressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transpulmonarypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transrespiratorypressure(const RespiratorySystemData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& transthoracicpressure(const RespiratorySystemData* msg);
};

const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::alveolararterialgradient(const RespiratorySystemData* msg) {
  return *msg->alveolararterialgradient_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RespiratorySystemData::_Internal::alveolardeadspace(const RespiratorySystemData* msg) {
  return *msg->alveolardeadspace_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RespiratorySystemData::_Internal::anatomicdeadspace(const RespiratorySystemData* msg) {
  return *msg->anatomicdeadspace_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::carricoindex(const RespiratorySystemData* msg) {
  return *msg->carricoindex_;
}
const ::pulse::cdm::bind::ScalarVolumePerPressureData&
RespiratorySystemData::_Internal::chestwallcompliance(const RespiratorySystemData* msg) {
  return *msg->chestwallcompliance_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::elasticworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->elasticworkofbreathing_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RespiratorySystemData::_Internal::endtidalcarbondioxidefraction(const RespiratorySystemData* msg) {
  return *msg->endtidalcarbondioxidefraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::endtidalcarbondioxidepressure(const RespiratorySystemData* msg) {
  return *msg->endtidalcarbondioxidepressure_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RespiratorySystemData::_Internal::endtidaloxygenfraction(const RespiratorySystemData* msg) {
  return *msg->endtidaloxygenfraction_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::endtidaloxygenpressure(const RespiratorySystemData* msg) {
  return *msg->endtidaloxygenpressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RespiratorySystemData::_Internal::expiratoryflow(const RespiratorySystemData* msg) {
  return *msg->expiratoryflow_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RespiratorySystemData::_Internal::expiratorypulmonaryresistance(const RespiratorySystemData* msg) {
  return *msg->expiratorypulmonaryresistance_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RespiratorySystemData::_Internal::fractionofinsipredoxygen(const RespiratorySystemData* msg) {
  return *msg->fractionofinsipredoxygen_;
}
const ::pulse::cdm::bind::ScalarPowerData&
RespiratorySystemData::_Internal::imposedpowerofbreathing(const RespiratorySystemData* msg) {
  return *msg->imposedpowerofbreathing_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::imposedworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->imposedworkofbreathing_;
}
const ::pulse::cdm::bind::ScalarData&
RespiratorySystemData::_Internal::inspiratoryexpiratoryratio(const RespiratorySystemData* msg) {
  return *msg->inspiratoryexpiratoryratio_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RespiratorySystemData::_Internal::inspiratoryflow(const RespiratorySystemData* msg) {
  return *msg->inspiratoryflow_;
}
const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&
RespiratorySystemData::_Internal::inspiratorypulmonaryresistance(const RespiratorySystemData* msg) {
  return *msg->inspiratorypulmonaryresistance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::intrapleuralpressure(const RespiratorySystemData* msg) {
  return *msg->intrapleuralpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::intrapulmonarypressure(const RespiratorySystemData* msg) {
  return *msg->intrapulmonarypressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerPressureData&
RespiratorySystemData::_Internal::lungcompliance(const RespiratorySystemData* msg) {
  return *msg->lungcompliance_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::maximalinspiratorypressure(const RespiratorySystemData* msg) {
  return *msg->maximalinspiratorypressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::meanairwaypressure(const RespiratorySystemData* msg) {
  return *msg->meanairwaypressure_;
}
const ::pulse::cdm::bind::ScalarData&
RespiratorySystemData::_Internal::oxygenationindex(const RespiratorySystemData* msg) {
  return *msg->oxygenationindex_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::oxygensaturationindex(const RespiratorySystemData* msg) {
  return *msg->oxygensaturationindex_;
}
const ::pulse::cdm::bind::ScalarPowerData&
RespiratorySystemData::_Internal::patientpowerofbreathing(const RespiratorySystemData* msg) {
  return *msg->patientpowerofbreathing_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::patientworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->patientworkofbreathing_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::peakinspiratorypressure(const RespiratorySystemData* msg) {
  return *msg->peakinspiratorypressure_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RespiratorySystemData::_Internal::physiologicdeadspace(const RespiratorySystemData* msg) {
  return *msg->physiologicdeadspace_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::positiveendexpiratorypressure(const RespiratorySystemData* msg) {
  return *msg->positiveendexpiratorypressure_;
}
const ::pulse::cdm::bind::ScalarVolumePerPressureData&
RespiratorySystemData::_Internal::pulmonarycompliance(const RespiratorySystemData* msg) {
  return *msg->pulmonarycompliance_;
}
const ::pulse::cdm::bind::ScalarPressurePerVolumeData&
RespiratorySystemData::_Internal::pulmonaryelastance(const RespiratorySystemData* msg) {
  return *msg->pulmonaryelastance_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::resistiveexpiratoryworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->resistiveexpiratoryworkofbreathing_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::resistiveinspiratoryworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->resistiveinspiratoryworkofbreathing_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
RespiratorySystemData::_Internal::respirationrate(const RespiratorySystemData* msg) {
  return *msg->respirationrate_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
RespiratorySystemData::_Internal::respiratorymusclefatigue(const RespiratorySystemData* msg) {
  return *msg->respiratorymusclefatigue_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::respiratorymusclepressure(const RespiratorySystemData* msg) {
  return *msg->respiratorymusclepressure_;
}
const ::pulse::cdm::bind::ScalarData&
RespiratorySystemData::_Internal::saturationandfractionofinspiredoxygenratio(const RespiratorySystemData* msg) {
  return *msg->saturationandfractionofinspiredoxygenratio_;
}
const ::pulse::cdm::bind::ScalarData&
RespiratorySystemData::_Internal::specificventilation(const RespiratorySystemData* msg) {
  return *msg->specificventilation_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RespiratorySystemData::_Internal::tidalvolume(const RespiratorySystemData* msg) {
  return *msg->tidalvolume_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RespiratorySystemData::_Internal::totalalveolarventilation(const RespiratorySystemData* msg) {
  return *msg->totalalveolarventilation_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RespiratorySystemData::_Internal::totaldeadspaceventilation(const RespiratorySystemData* msg) {
  return *msg->totaldeadspaceventilation_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
RespiratorySystemData::_Internal::totallungvolume(const RespiratorySystemData* msg) {
  return *msg->totallungvolume_;
}
const ::pulse::cdm::bind::ScalarPowerData&
RespiratorySystemData::_Internal::totalpowerofbreathing(const RespiratorySystemData* msg) {
  return *msg->totalpowerofbreathing_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
RespiratorySystemData::_Internal::totalpulmonaryventilation(const RespiratorySystemData* msg) {
  return *msg->totalpulmonaryventilation_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
RespiratorySystemData::_Internal::totalworkofbreathing(const RespiratorySystemData* msg) {
  return *msg->totalworkofbreathing_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transairwaypressure(const RespiratorySystemData* msg) {
  return *msg->transairwaypressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transalveolarpressure(const RespiratorySystemData* msg) {
  return *msg->transalveolarpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transchestwallpressure(const RespiratorySystemData* msg) {
  return *msg->transchestwallpressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transmusclepressure(const RespiratorySystemData* msg) {
  return *msg->transmusclepressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transpulmonarypressure(const RespiratorySystemData* msg) {
  return *msg->transpulmonarypressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transrespiratorypressure(const RespiratorySystemData* msg) {
  return *msg->transrespiratorypressure_;
}
const ::pulse::cdm::bind::ScalarPressureData&
RespiratorySystemData::_Internal::transthoracicpressure(const RespiratorySystemData* msg) {
  return *msg->transthoracicpressure_;
}
void RespiratorySystemData::clear_alveolararterialgradient() {
  if (GetArena() == nullptr && alveolararterialgradient_ != nullptr) {
    delete alveolararterialgradient_;
  }
  alveolararterialgradient_ = nullptr;
}
void RespiratorySystemData::clear_alveolardeadspace() {
  if (GetArena() == nullptr && alveolardeadspace_ != nullptr) {
    delete alveolardeadspace_;
  }
  alveolardeadspace_ = nullptr;
}
void RespiratorySystemData::clear_anatomicdeadspace() {
  if (GetArena() == nullptr && anatomicdeadspace_ != nullptr) {
    delete anatomicdeadspace_;
  }
  anatomicdeadspace_ = nullptr;
}
void RespiratorySystemData::clear_carricoindex() {
  if (GetArena() == nullptr && carricoindex_ != nullptr) {
    delete carricoindex_;
  }
  carricoindex_ = nullptr;
}
void RespiratorySystemData::clear_chestwallcompliance() {
  if (GetArena() == nullptr && chestwallcompliance_ != nullptr) {
    delete chestwallcompliance_;
  }
  chestwallcompliance_ = nullptr;
}
void RespiratorySystemData::clear_elasticworkofbreathing() {
  if (GetArena() == nullptr && elasticworkofbreathing_ != nullptr) {
    delete elasticworkofbreathing_;
  }
  elasticworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_endtidalcarbondioxidefraction() {
  if (GetArena() == nullptr && endtidalcarbondioxidefraction_ != nullptr) {
    delete endtidalcarbondioxidefraction_;
  }
  endtidalcarbondioxidefraction_ = nullptr;
}
void RespiratorySystemData::clear_endtidalcarbondioxidepressure() {
  if (GetArena() == nullptr && endtidalcarbondioxidepressure_ != nullptr) {
    delete endtidalcarbondioxidepressure_;
  }
  endtidalcarbondioxidepressure_ = nullptr;
}
void RespiratorySystemData::clear_endtidaloxygenfraction() {
  if (GetArena() == nullptr && endtidaloxygenfraction_ != nullptr) {
    delete endtidaloxygenfraction_;
  }
  endtidaloxygenfraction_ = nullptr;
}
void RespiratorySystemData::clear_endtidaloxygenpressure() {
  if (GetArena() == nullptr && endtidaloxygenpressure_ != nullptr) {
    delete endtidaloxygenpressure_;
  }
  endtidaloxygenpressure_ = nullptr;
}
void RespiratorySystemData::clear_expiratoryflow() {
  if (GetArena() == nullptr && expiratoryflow_ != nullptr) {
    delete expiratoryflow_;
  }
  expiratoryflow_ = nullptr;
}
void RespiratorySystemData::clear_expiratorypulmonaryresistance() {
  if (GetArena() == nullptr && expiratorypulmonaryresistance_ != nullptr) {
    delete expiratorypulmonaryresistance_;
  }
  expiratorypulmonaryresistance_ = nullptr;
}
void RespiratorySystemData::clear_fractionofinsipredoxygen() {
  if (GetArena() == nullptr && fractionofinsipredoxygen_ != nullptr) {
    delete fractionofinsipredoxygen_;
  }
  fractionofinsipredoxygen_ = nullptr;
}
void RespiratorySystemData::clear_imposedpowerofbreathing() {
  if (GetArena() == nullptr && imposedpowerofbreathing_ != nullptr) {
    delete imposedpowerofbreathing_;
  }
  imposedpowerofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_imposedworkofbreathing() {
  if (GetArena() == nullptr && imposedworkofbreathing_ != nullptr) {
    delete imposedworkofbreathing_;
  }
  imposedworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_inspiratoryexpiratoryratio() {
  if (GetArena() == nullptr && inspiratoryexpiratoryratio_ != nullptr) {
    delete inspiratoryexpiratoryratio_;
  }
  inspiratoryexpiratoryratio_ = nullptr;
}
void RespiratorySystemData::clear_inspiratoryflow() {
  if (GetArena() == nullptr && inspiratoryflow_ != nullptr) {
    delete inspiratoryflow_;
  }
  inspiratoryflow_ = nullptr;
}
void RespiratorySystemData::clear_inspiratorypulmonaryresistance() {
  if (GetArena() == nullptr && inspiratorypulmonaryresistance_ != nullptr) {
    delete inspiratorypulmonaryresistance_;
  }
  inspiratorypulmonaryresistance_ = nullptr;
}
void RespiratorySystemData::clear_intrapleuralpressure() {
  if (GetArena() == nullptr && intrapleuralpressure_ != nullptr) {
    delete intrapleuralpressure_;
  }
  intrapleuralpressure_ = nullptr;
}
void RespiratorySystemData::clear_intrapulmonarypressure() {
  if (GetArena() == nullptr && intrapulmonarypressure_ != nullptr) {
    delete intrapulmonarypressure_;
  }
  intrapulmonarypressure_ = nullptr;
}
void RespiratorySystemData::clear_lungcompliance() {
  if (GetArena() == nullptr && lungcompliance_ != nullptr) {
    delete lungcompliance_;
  }
  lungcompliance_ = nullptr;
}
void RespiratorySystemData::clear_maximalinspiratorypressure() {
  if (GetArena() == nullptr && maximalinspiratorypressure_ != nullptr) {
    delete maximalinspiratorypressure_;
  }
  maximalinspiratorypressure_ = nullptr;
}
void RespiratorySystemData::clear_meanairwaypressure() {
  if (GetArena() == nullptr && meanairwaypressure_ != nullptr) {
    delete meanairwaypressure_;
  }
  meanairwaypressure_ = nullptr;
}
void RespiratorySystemData::clear_oxygenationindex() {
  if (GetArena() == nullptr && oxygenationindex_ != nullptr) {
    delete oxygenationindex_;
  }
  oxygenationindex_ = nullptr;
}
void RespiratorySystemData::clear_oxygensaturationindex() {
  if (GetArena() == nullptr && oxygensaturationindex_ != nullptr) {
    delete oxygensaturationindex_;
  }
  oxygensaturationindex_ = nullptr;
}
void RespiratorySystemData::clear_patientpowerofbreathing() {
  if (GetArena() == nullptr && patientpowerofbreathing_ != nullptr) {
    delete patientpowerofbreathing_;
  }
  patientpowerofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_patientworkofbreathing() {
  if (GetArena() == nullptr && patientworkofbreathing_ != nullptr) {
    delete patientworkofbreathing_;
  }
  patientworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_peakinspiratorypressure() {
  if (GetArena() == nullptr && peakinspiratorypressure_ != nullptr) {
    delete peakinspiratorypressure_;
  }
  peakinspiratorypressure_ = nullptr;
}
void RespiratorySystemData::clear_physiologicdeadspace() {
  if (GetArena() == nullptr && physiologicdeadspace_ != nullptr) {
    delete physiologicdeadspace_;
  }
  physiologicdeadspace_ = nullptr;
}
void RespiratorySystemData::clear_positiveendexpiratorypressure() {
  if (GetArena() == nullptr && positiveendexpiratorypressure_ != nullptr) {
    delete positiveendexpiratorypressure_;
  }
  positiveendexpiratorypressure_ = nullptr;
}
void RespiratorySystemData::clear_pulmonarycompliance() {
  if (GetArena() == nullptr && pulmonarycompliance_ != nullptr) {
    delete pulmonarycompliance_;
  }
  pulmonarycompliance_ = nullptr;
}
void RespiratorySystemData::clear_pulmonaryelastance() {
  if (GetArena() == nullptr && pulmonaryelastance_ != nullptr) {
    delete pulmonaryelastance_;
  }
  pulmonaryelastance_ = nullptr;
}
void RespiratorySystemData::clear_resistiveexpiratoryworkofbreathing() {
  if (GetArena() == nullptr && resistiveexpiratoryworkofbreathing_ != nullptr) {
    delete resistiveexpiratoryworkofbreathing_;
  }
  resistiveexpiratoryworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_resistiveinspiratoryworkofbreathing() {
  if (GetArena() == nullptr && resistiveinspiratoryworkofbreathing_ != nullptr) {
    delete resistiveinspiratoryworkofbreathing_;
  }
  resistiveinspiratoryworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_respirationrate() {
  if (GetArena() == nullptr && respirationrate_ != nullptr) {
    delete respirationrate_;
  }
  respirationrate_ = nullptr;
}
void RespiratorySystemData::clear_respiratorymusclefatigue() {
  if (GetArena() == nullptr && respiratorymusclefatigue_ != nullptr) {
    delete respiratorymusclefatigue_;
  }
  respiratorymusclefatigue_ = nullptr;
}
void RespiratorySystemData::clear_respiratorymusclepressure() {
  if (GetArena() == nullptr && respiratorymusclepressure_ != nullptr) {
    delete respiratorymusclepressure_;
  }
  respiratorymusclepressure_ = nullptr;
}
void RespiratorySystemData::clear_saturationandfractionofinspiredoxygenratio() {
  if (GetArena() == nullptr && saturationandfractionofinspiredoxygenratio_ != nullptr) {
    delete saturationandfractionofinspiredoxygenratio_;
  }
  saturationandfractionofinspiredoxygenratio_ = nullptr;
}
void RespiratorySystemData::clear_specificventilation() {
  if (GetArena() == nullptr && specificventilation_ != nullptr) {
    delete specificventilation_;
  }
  specificventilation_ = nullptr;
}
void RespiratorySystemData::clear_tidalvolume() {
  if (GetArena() == nullptr && tidalvolume_ != nullptr) {
    delete tidalvolume_;
  }
  tidalvolume_ = nullptr;
}
void RespiratorySystemData::clear_totalalveolarventilation() {
  if (GetArena() == nullptr && totalalveolarventilation_ != nullptr) {
    delete totalalveolarventilation_;
  }
  totalalveolarventilation_ = nullptr;
}
void RespiratorySystemData::clear_totaldeadspaceventilation() {
  if (GetArena() == nullptr && totaldeadspaceventilation_ != nullptr) {
    delete totaldeadspaceventilation_;
  }
  totaldeadspaceventilation_ = nullptr;
}
void RespiratorySystemData::clear_totallungvolume() {
  if (GetArena() == nullptr && totallungvolume_ != nullptr) {
    delete totallungvolume_;
  }
  totallungvolume_ = nullptr;
}
void RespiratorySystemData::clear_totalpowerofbreathing() {
  if (GetArena() == nullptr && totalpowerofbreathing_ != nullptr) {
    delete totalpowerofbreathing_;
  }
  totalpowerofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_totalpulmonaryventilation() {
  if (GetArena() == nullptr && totalpulmonaryventilation_ != nullptr) {
    delete totalpulmonaryventilation_;
  }
  totalpulmonaryventilation_ = nullptr;
}
void RespiratorySystemData::clear_totalworkofbreathing() {
  if (GetArena() == nullptr && totalworkofbreathing_ != nullptr) {
    delete totalworkofbreathing_;
  }
  totalworkofbreathing_ = nullptr;
}
void RespiratorySystemData::clear_transairwaypressure() {
  if (GetArena() == nullptr && transairwaypressure_ != nullptr) {
    delete transairwaypressure_;
  }
  transairwaypressure_ = nullptr;
}
void RespiratorySystemData::clear_transalveolarpressure() {
  if (GetArena() == nullptr && transalveolarpressure_ != nullptr) {
    delete transalveolarpressure_;
  }
  transalveolarpressure_ = nullptr;
}
void RespiratorySystemData::clear_transchestwallpressure() {
  if (GetArena() == nullptr && transchestwallpressure_ != nullptr) {
    delete transchestwallpressure_;
  }
  transchestwallpressure_ = nullptr;
}
void RespiratorySystemData::clear_transmusclepressure() {
  if (GetArena() == nullptr && transmusclepressure_ != nullptr) {
    delete transmusclepressure_;
  }
  transmusclepressure_ = nullptr;
}
void RespiratorySystemData::clear_transpulmonarypressure() {
  if (GetArena() == nullptr && transpulmonarypressure_ != nullptr) {
    delete transpulmonarypressure_;
  }
  transpulmonarypressure_ = nullptr;
}
void RespiratorySystemData::clear_transrespiratorypressure() {
  if (GetArena() == nullptr && transrespiratorypressure_ != nullptr) {
    delete transrespiratorypressure_;
  }
  transrespiratorypressure_ = nullptr;
}
void RespiratorySystemData::clear_transthoracicpressure() {
  if (GetArena() == nullptr && transthoracicpressure_ != nullptr) {
    delete transthoracicpressure_;
  }
  transthoracicpressure_ = nullptr;
}
RespiratorySystemData::RespiratorySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.RespiratorySystemData)
}
RespiratorySystemData::RespiratorySystemData(const RespiratorySystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alveolararterialgradient()) {
    alveolararterialgradient_ = new ::pulse::cdm::bind::ScalarPressureData(*from.alveolararterialgradient_);
  } else {
    alveolararterialgradient_ = nullptr;
  }
  if (from._internal_has_alveolardeadspace()) {
    alveolardeadspace_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.alveolardeadspace_);
  } else {
    alveolardeadspace_ = nullptr;
  }
  if (from._internal_has_anatomicdeadspace()) {
    anatomicdeadspace_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.anatomicdeadspace_);
  } else {
    anatomicdeadspace_ = nullptr;
  }
  if (from._internal_has_carricoindex()) {
    carricoindex_ = new ::pulse::cdm::bind::ScalarPressureData(*from.carricoindex_);
  } else {
    carricoindex_ = nullptr;
  }
  if (from._internal_has_chestwallcompliance()) {
    chestwallcompliance_ = new ::pulse::cdm::bind::ScalarVolumePerPressureData(*from.chestwallcompliance_);
  } else {
    chestwallcompliance_ = nullptr;
  }
  if (from._internal_has_elasticworkofbreathing()) {
    elasticworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.elasticworkofbreathing_);
  } else {
    elasticworkofbreathing_ = nullptr;
  }
  if (from._internal_has_endtidalcarbondioxidefraction()) {
    endtidalcarbondioxidefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.endtidalcarbondioxidefraction_);
  } else {
    endtidalcarbondioxidefraction_ = nullptr;
  }
  if (from._internal_has_endtidalcarbondioxidepressure()) {
    endtidalcarbondioxidepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.endtidalcarbondioxidepressure_);
  } else {
    endtidalcarbondioxidepressure_ = nullptr;
  }
  if (from._internal_has_endtidaloxygenfraction()) {
    endtidaloxygenfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.endtidaloxygenfraction_);
  } else {
    endtidaloxygenfraction_ = nullptr;
  }
  if (from._internal_has_endtidaloxygenpressure()) {
    endtidaloxygenpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.endtidaloxygenpressure_);
  } else {
    endtidaloxygenpressure_ = nullptr;
  }
  if (from._internal_has_expiratoryflow()) {
    expiratoryflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.expiratoryflow_);
  } else {
    expiratoryflow_ = nullptr;
  }
  if (from._internal_has_expiratorypulmonaryresistance()) {
    expiratorypulmonaryresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.expiratorypulmonaryresistance_);
  } else {
    expiratorypulmonaryresistance_ = nullptr;
  }
  if (from._internal_has_fractionofinsipredoxygen()) {
    fractionofinsipredoxygen_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.fractionofinsipredoxygen_);
  } else {
    fractionofinsipredoxygen_ = nullptr;
  }
  if (from._internal_has_imposedpowerofbreathing()) {
    imposedpowerofbreathing_ = new ::pulse::cdm::bind::ScalarPowerData(*from.imposedpowerofbreathing_);
  } else {
    imposedpowerofbreathing_ = nullptr;
  }
  if (from._internal_has_imposedworkofbreathing()) {
    imposedworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.imposedworkofbreathing_);
  } else {
    imposedworkofbreathing_ = nullptr;
  }
  if (from._internal_has_inspiratoryexpiratoryratio()) {
    inspiratoryexpiratoryratio_ = new ::pulse::cdm::bind::ScalarData(*from.inspiratoryexpiratoryratio_);
  } else {
    inspiratoryexpiratoryratio_ = nullptr;
  }
  if (from._internal_has_inspiratoryflow()) {
    inspiratoryflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.inspiratoryflow_);
  } else {
    inspiratoryflow_ = nullptr;
  }
  if (from._internal_has_inspiratorypulmonaryresistance()) {
    inspiratorypulmonaryresistance_ = new ::pulse::cdm::bind::ScalarPressureTimePerVolumeData(*from.inspiratorypulmonaryresistance_);
  } else {
    inspiratorypulmonaryresistance_ = nullptr;
  }
  if (from._internal_has_intrapleuralpressure()) {
    intrapleuralpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.intrapleuralpressure_);
  } else {
    intrapleuralpressure_ = nullptr;
  }
  if (from._internal_has_intrapulmonarypressure()) {
    intrapulmonarypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.intrapulmonarypressure_);
  } else {
    intrapulmonarypressure_ = nullptr;
  }
  if (from._internal_has_lungcompliance()) {
    lungcompliance_ = new ::pulse::cdm::bind::ScalarVolumePerPressureData(*from.lungcompliance_);
  } else {
    lungcompliance_ = nullptr;
  }
  if (from._internal_has_maximalinspiratorypressure()) {
    maximalinspiratorypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.maximalinspiratorypressure_);
  } else {
    maximalinspiratorypressure_ = nullptr;
  }
  if (from._internal_has_meanairwaypressure()) {
    meanairwaypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanairwaypressure_);
  } else {
    meanairwaypressure_ = nullptr;
  }
  if (from._internal_has_oxygenationindex()) {
    oxygenationindex_ = new ::pulse::cdm::bind::ScalarData(*from.oxygenationindex_);
  } else {
    oxygenationindex_ = nullptr;
  }
  if (from._internal_has_oxygensaturationindex()) {
    oxygensaturationindex_ = new ::pulse::cdm::bind::ScalarPressureData(*from.oxygensaturationindex_);
  } else {
    oxygensaturationindex_ = nullptr;
  }
  if (from._internal_has_patientpowerofbreathing()) {
    patientpowerofbreathing_ = new ::pulse::cdm::bind::ScalarPowerData(*from.patientpowerofbreathing_);
  } else {
    patientpowerofbreathing_ = nullptr;
  }
  if (from._internal_has_patientworkofbreathing()) {
    patientworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.patientworkofbreathing_);
  } else {
    patientworkofbreathing_ = nullptr;
  }
  if (from._internal_has_peakinspiratorypressure()) {
    peakinspiratorypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.peakinspiratorypressure_);
  } else {
    peakinspiratorypressure_ = nullptr;
  }
  if (from._internal_has_physiologicdeadspace()) {
    physiologicdeadspace_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.physiologicdeadspace_);
  } else {
    physiologicdeadspace_ = nullptr;
  }
  if (from._internal_has_positiveendexpiratorypressure()) {
    positiveendexpiratorypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.positiveendexpiratorypressure_);
  } else {
    positiveendexpiratorypressure_ = nullptr;
  }
  if (from._internal_has_pulmonarycompliance()) {
    pulmonarycompliance_ = new ::pulse::cdm::bind::ScalarVolumePerPressureData(*from.pulmonarycompliance_);
  } else {
    pulmonarycompliance_ = nullptr;
  }
  if (from._internal_has_pulmonaryelastance()) {
    pulmonaryelastance_ = new ::pulse::cdm::bind::ScalarPressurePerVolumeData(*from.pulmonaryelastance_);
  } else {
    pulmonaryelastance_ = nullptr;
  }
  if (from._internal_has_resistiveexpiratoryworkofbreathing()) {
    resistiveexpiratoryworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.resistiveexpiratoryworkofbreathing_);
  } else {
    resistiveexpiratoryworkofbreathing_ = nullptr;
  }
  if (from._internal_has_resistiveinspiratoryworkofbreathing()) {
    resistiveinspiratoryworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.resistiveinspiratoryworkofbreathing_);
  } else {
    resistiveinspiratoryworkofbreathing_ = nullptr;
  }
  if (from._internal_has_respirationrate()) {
    respirationrate_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.respirationrate_);
  } else {
    respirationrate_ = nullptr;
  }
  if (from._internal_has_respiratorymusclefatigue()) {
    respiratorymusclefatigue_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.respiratorymusclefatigue_);
  } else {
    respiratorymusclefatigue_ = nullptr;
  }
  if (from._internal_has_respiratorymusclepressure()) {
    respiratorymusclepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.respiratorymusclepressure_);
  } else {
    respiratorymusclepressure_ = nullptr;
  }
  if (from._internal_has_saturationandfractionofinspiredoxygenratio()) {
    saturationandfractionofinspiredoxygenratio_ = new ::pulse::cdm::bind::ScalarData(*from.saturationandfractionofinspiredoxygenratio_);
  } else {
    saturationandfractionofinspiredoxygenratio_ = nullptr;
  }
  if (from._internal_has_specificventilation()) {
    specificventilation_ = new ::pulse::cdm::bind::ScalarData(*from.specificventilation_);
  } else {
    specificventilation_ = nullptr;
  }
  if (from._internal_has_tidalvolume()) {
    tidalvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.tidalvolume_);
  } else {
    tidalvolume_ = nullptr;
  }
  if (from._internal_has_totalalveolarventilation()) {
    totalalveolarventilation_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.totalalveolarventilation_);
  } else {
    totalalveolarventilation_ = nullptr;
  }
  if (from._internal_has_totaldeadspaceventilation()) {
    totaldeadspaceventilation_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.totaldeadspaceventilation_);
  } else {
    totaldeadspaceventilation_ = nullptr;
  }
  if (from._internal_has_totallungvolume()) {
    totallungvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totallungvolume_);
  } else {
    totallungvolume_ = nullptr;
  }
  if (from._internal_has_totalpowerofbreathing()) {
    totalpowerofbreathing_ = new ::pulse::cdm::bind::ScalarPowerData(*from.totalpowerofbreathing_);
  } else {
    totalpowerofbreathing_ = nullptr;
  }
  if (from._internal_has_totalpulmonaryventilation()) {
    totalpulmonaryventilation_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.totalpulmonaryventilation_);
  } else {
    totalpulmonaryventilation_ = nullptr;
  }
  if (from._internal_has_totalworkofbreathing()) {
    totalworkofbreathing_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.totalworkofbreathing_);
  } else {
    totalworkofbreathing_ = nullptr;
  }
  if (from._internal_has_transairwaypressure()) {
    transairwaypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transairwaypressure_);
  } else {
    transairwaypressure_ = nullptr;
  }
  if (from._internal_has_transalveolarpressure()) {
    transalveolarpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transalveolarpressure_);
  } else {
    transalveolarpressure_ = nullptr;
  }
  if (from._internal_has_transchestwallpressure()) {
    transchestwallpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transchestwallpressure_);
  } else {
    transchestwallpressure_ = nullptr;
  }
  if (from._internal_has_transmusclepressure()) {
    transmusclepressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transmusclepressure_);
  } else {
    transmusclepressure_ = nullptr;
  }
  if (from._internal_has_transpulmonarypressure()) {
    transpulmonarypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transpulmonarypressure_);
  } else {
    transpulmonarypressure_ = nullptr;
  }
  if (from._internal_has_transrespiratorypressure()) {
    transrespiratorypressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transrespiratorypressure_);
  } else {
    transrespiratorypressure_ = nullptr;
  }
  if (from._internal_has_transthoracicpressure()) {
    transthoracicpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.transthoracicpressure_);
  } else {
    transthoracicpressure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.RespiratorySystemData)
}

void RespiratorySystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&alveolararterialgradient_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&transthoracicpressure_) -
      reinterpret_cast<char*>(&alveolararterialgradient_)) + sizeof(transthoracicpressure_));
}

RespiratorySystemData::~RespiratorySystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.RespiratorySystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RespiratorySystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete alveolararterialgradient_;
  if (this != internal_default_instance()) delete alveolardeadspace_;
  if (this != internal_default_instance()) delete anatomicdeadspace_;
  if (this != internal_default_instance()) delete carricoindex_;
  if (this != internal_default_instance()) delete chestwallcompliance_;
  if (this != internal_default_instance()) delete elasticworkofbreathing_;
  if (this != internal_default_instance()) delete endtidalcarbondioxidefraction_;
  if (this != internal_default_instance()) delete endtidalcarbondioxidepressure_;
  if (this != internal_default_instance()) delete endtidaloxygenfraction_;
  if (this != internal_default_instance()) delete endtidaloxygenpressure_;
  if (this != internal_default_instance()) delete expiratoryflow_;
  if (this != internal_default_instance()) delete expiratorypulmonaryresistance_;
  if (this != internal_default_instance()) delete fractionofinsipredoxygen_;
  if (this != internal_default_instance()) delete imposedpowerofbreathing_;
  if (this != internal_default_instance()) delete imposedworkofbreathing_;
  if (this != internal_default_instance()) delete inspiratoryexpiratoryratio_;
  if (this != internal_default_instance()) delete inspiratoryflow_;
  if (this != internal_default_instance()) delete inspiratorypulmonaryresistance_;
  if (this != internal_default_instance()) delete intrapleuralpressure_;
  if (this != internal_default_instance()) delete intrapulmonarypressure_;
  if (this != internal_default_instance()) delete lungcompliance_;
  if (this != internal_default_instance()) delete maximalinspiratorypressure_;
  if (this != internal_default_instance()) delete meanairwaypressure_;
  if (this != internal_default_instance()) delete oxygenationindex_;
  if (this != internal_default_instance()) delete oxygensaturationindex_;
  if (this != internal_default_instance()) delete patientpowerofbreathing_;
  if (this != internal_default_instance()) delete patientworkofbreathing_;
  if (this != internal_default_instance()) delete peakinspiratorypressure_;
  if (this != internal_default_instance()) delete physiologicdeadspace_;
  if (this != internal_default_instance()) delete positiveendexpiratorypressure_;
  if (this != internal_default_instance()) delete pulmonarycompliance_;
  if (this != internal_default_instance()) delete pulmonaryelastance_;
  if (this != internal_default_instance()) delete resistiveexpiratoryworkofbreathing_;
  if (this != internal_default_instance()) delete resistiveinspiratoryworkofbreathing_;
  if (this != internal_default_instance()) delete respirationrate_;
  if (this != internal_default_instance()) delete respiratorymusclefatigue_;
  if (this != internal_default_instance()) delete respiratorymusclepressure_;
  if (this != internal_default_instance()) delete saturationandfractionofinspiredoxygenratio_;
  if (this != internal_default_instance()) delete specificventilation_;
  if (this != internal_default_instance()) delete tidalvolume_;
  if (this != internal_default_instance()) delete totalalveolarventilation_;
  if (this != internal_default_instance()) delete totaldeadspaceventilation_;
  if (this != internal_default_instance()) delete totallungvolume_;
  if (this != internal_default_instance()) delete totalpowerofbreathing_;
  if (this != internal_default_instance()) delete totalpulmonaryventilation_;
  if (this != internal_default_instance()) delete totalworkofbreathing_;
  if (this != internal_default_instance()) delete transairwaypressure_;
  if (this != internal_default_instance()) delete transalveolarpressure_;
  if (this != internal_default_instance()) delete transchestwallpressure_;
  if (this != internal_default_instance()) delete transmusclepressure_;
  if (this != internal_default_instance()) delete transpulmonarypressure_;
  if (this != internal_default_instance()) delete transrespiratorypressure_;
  if (this != internal_default_instance()) delete transthoracicpressure_;
}

void RespiratorySystemData::ArenaDtor(void* object) {
  RespiratorySystemData* _this = reinterpret_cast< RespiratorySystemData* >(object);
  (void)_this;
}
void RespiratorySystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespiratorySystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespiratorySystemData& RespiratorySystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RespiratorySystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void RespiratorySystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.RespiratorySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && alveolararterialgradient_ != nullptr) {
    delete alveolararterialgradient_;
  }
  alveolararterialgradient_ = nullptr;
  if (GetArena() == nullptr && alveolardeadspace_ != nullptr) {
    delete alveolardeadspace_;
  }
  alveolardeadspace_ = nullptr;
  if (GetArena() == nullptr && anatomicdeadspace_ != nullptr) {
    delete anatomicdeadspace_;
  }
  anatomicdeadspace_ = nullptr;
  if (GetArena() == nullptr && carricoindex_ != nullptr) {
    delete carricoindex_;
  }
  carricoindex_ = nullptr;
  if (GetArena() == nullptr && chestwallcompliance_ != nullptr) {
    delete chestwallcompliance_;
  }
  chestwallcompliance_ = nullptr;
  if (GetArena() == nullptr && elasticworkofbreathing_ != nullptr) {
    delete elasticworkofbreathing_;
  }
  elasticworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && endtidalcarbondioxidefraction_ != nullptr) {
    delete endtidalcarbondioxidefraction_;
  }
  endtidalcarbondioxidefraction_ = nullptr;
  if (GetArena() == nullptr && endtidalcarbondioxidepressure_ != nullptr) {
    delete endtidalcarbondioxidepressure_;
  }
  endtidalcarbondioxidepressure_ = nullptr;
  if (GetArena() == nullptr && endtidaloxygenfraction_ != nullptr) {
    delete endtidaloxygenfraction_;
  }
  endtidaloxygenfraction_ = nullptr;
  if (GetArena() == nullptr && endtidaloxygenpressure_ != nullptr) {
    delete endtidaloxygenpressure_;
  }
  endtidaloxygenpressure_ = nullptr;
  if (GetArena() == nullptr && expiratoryflow_ != nullptr) {
    delete expiratoryflow_;
  }
  expiratoryflow_ = nullptr;
  if (GetArena() == nullptr && expiratorypulmonaryresistance_ != nullptr) {
    delete expiratorypulmonaryresistance_;
  }
  expiratorypulmonaryresistance_ = nullptr;
  if (GetArena() == nullptr && fractionofinsipredoxygen_ != nullptr) {
    delete fractionofinsipredoxygen_;
  }
  fractionofinsipredoxygen_ = nullptr;
  if (GetArena() == nullptr && imposedpowerofbreathing_ != nullptr) {
    delete imposedpowerofbreathing_;
  }
  imposedpowerofbreathing_ = nullptr;
  if (GetArena() == nullptr && imposedworkofbreathing_ != nullptr) {
    delete imposedworkofbreathing_;
  }
  imposedworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && inspiratoryexpiratoryratio_ != nullptr) {
    delete inspiratoryexpiratoryratio_;
  }
  inspiratoryexpiratoryratio_ = nullptr;
  if (GetArena() == nullptr && inspiratoryflow_ != nullptr) {
    delete inspiratoryflow_;
  }
  inspiratoryflow_ = nullptr;
  if (GetArena() == nullptr && inspiratorypulmonaryresistance_ != nullptr) {
    delete inspiratorypulmonaryresistance_;
  }
  inspiratorypulmonaryresistance_ = nullptr;
  if (GetArena() == nullptr && intrapleuralpressure_ != nullptr) {
    delete intrapleuralpressure_;
  }
  intrapleuralpressure_ = nullptr;
  if (GetArena() == nullptr && intrapulmonarypressure_ != nullptr) {
    delete intrapulmonarypressure_;
  }
  intrapulmonarypressure_ = nullptr;
  if (GetArena() == nullptr && lungcompliance_ != nullptr) {
    delete lungcompliance_;
  }
  lungcompliance_ = nullptr;
  if (GetArena() == nullptr && maximalinspiratorypressure_ != nullptr) {
    delete maximalinspiratorypressure_;
  }
  maximalinspiratorypressure_ = nullptr;
  if (GetArena() == nullptr && meanairwaypressure_ != nullptr) {
    delete meanairwaypressure_;
  }
  meanairwaypressure_ = nullptr;
  if (GetArena() == nullptr && oxygenationindex_ != nullptr) {
    delete oxygenationindex_;
  }
  oxygenationindex_ = nullptr;
  if (GetArena() == nullptr && oxygensaturationindex_ != nullptr) {
    delete oxygensaturationindex_;
  }
  oxygensaturationindex_ = nullptr;
  if (GetArena() == nullptr && patientpowerofbreathing_ != nullptr) {
    delete patientpowerofbreathing_;
  }
  patientpowerofbreathing_ = nullptr;
  if (GetArena() == nullptr && patientworkofbreathing_ != nullptr) {
    delete patientworkofbreathing_;
  }
  patientworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && peakinspiratorypressure_ != nullptr) {
    delete peakinspiratorypressure_;
  }
  peakinspiratorypressure_ = nullptr;
  if (GetArena() == nullptr && physiologicdeadspace_ != nullptr) {
    delete physiologicdeadspace_;
  }
  physiologicdeadspace_ = nullptr;
  if (GetArena() == nullptr && positiveendexpiratorypressure_ != nullptr) {
    delete positiveendexpiratorypressure_;
  }
  positiveendexpiratorypressure_ = nullptr;
  if (GetArena() == nullptr && pulmonarycompliance_ != nullptr) {
    delete pulmonarycompliance_;
  }
  pulmonarycompliance_ = nullptr;
  if (GetArena() == nullptr && pulmonaryelastance_ != nullptr) {
    delete pulmonaryelastance_;
  }
  pulmonaryelastance_ = nullptr;
  if (GetArena() == nullptr && resistiveexpiratoryworkofbreathing_ != nullptr) {
    delete resistiveexpiratoryworkofbreathing_;
  }
  resistiveexpiratoryworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && resistiveinspiratoryworkofbreathing_ != nullptr) {
    delete resistiveinspiratoryworkofbreathing_;
  }
  resistiveinspiratoryworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && respirationrate_ != nullptr) {
    delete respirationrate_;
  }
  respirationrate_ = nullptr;
  if (GetArena() == nullptr && respiratorymusclefatigue_ != nullptr) {
    delete respiratorymusclefatigue_;
  }
  respiratorymusclefatigue_ = nullptr;
  if (GetArena() == nullptr && respiratorymusclepressure_ != nullptr) {
    delete respiratorymusclepressure_;
  }
  respiratorymusclepressure_ = nullptr;
  if (GetArena() == nullptr && saturationandfractionofinspiredoxygenratio_ != nullptr) {
    delete saturationandfractionofinspiredoxygenratio_;
  }
  saturationandfractionofinspiredoxygenratio_ = nullptr;
  if (GetArena() == nullptr && specificventilation_ != nullptr) {
    delete specificventilation_;
  }
  specificventilation_ = nullptr;
  if (GetArena() == nullptr && tidalvolume_ != nullptr) {
    delete tidalvolume_;
  }
  tidalvolume_ = nullptr;
  if (GetArena() == nullptr && totalalveolarventilation_ != nullptr) {
    delete totalalveolarventilation_;
  }
  totalalveolarventilation_ = nullptr;
  if (GetArena() == nullptr && totaldeadspaceventilation_ != nullptr) {
    delete totaldeadspaceventilation_;
  }
  totaldeadspaceventilation_ = nullptr;
  if (GetArena() == nullptr && totallungvolume_ != nullptr) {
    delete totallungvolume_;
  }
  totallungvolume_ = nullptr;
  if (GetArena() == nullptr && totalpowerofbreathing_ != nullptr) {
    delete totalpowerofbreathing_;
  }
  totalpowerofbreathing_ = nullptr;
  if (GetArena() == nullptr && totalpulmonaryventilation_ != nullptr) {
    delete totalpulmonaryventilation_;
  }
  totalpulmonaryventilation_ = nullptr;
  if (GetArena() == nullptr && totalworkofbreathing_ != nullptr) {
    delete totalworkofbreathing_;
  }
  totalworkofbreathing_ = nullptr;
  if (GetArena() == nullptr && transairwaypressure_ != nullptr) {
    delete transairwaypressure_;
  }
  transairwaypressure_ = nullptr;
  if (GetArena() == nullptr && transalveolarpressure_ != nullptr) {
    delete transalveolarpressure_;
  }
  transalveolarpressure_ = nullptr;
  if (GetArena() == nullptr && transchestwallpressure_ != nullptr) {
    delete transchestwallpressure_;
  }
  transchestwallpressure_ = nullptr;
  if (GetArena() == nullptr && transmusclepressure_ != nullptr) {
    delete transmusclepressure_;
  }
  transmusclepressure_ = nullptr;
  if (GetArena() == nullptr && transpulmonarypressure_ != nullptr) {
    delete transpulmonarypressure_;
  }
  transpulmonarypressure_ = nullptr;
  if (GetArena() == nullptr && transrespiratorypressure_ != nullptr) {
    delete transrespiratorypressure_;
  }
  transrespiratorypressure_ = nullptr;
  if (GetArena() == nullptr && transthoracicpressure_ != nullptr) {
    delete transthoracicpressure_;
  }
  transthoracicpressure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespiratorySystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPressureData AlveolarArterialGradient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alveolararterialgradient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData AlveolarDeadSpace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_alveolardeadspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData AnatomicDeadSpace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_anatomicdeadspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData CarricoIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_carricoindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerPressureData ChestWallCompliance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chestwallcompliance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData ElasticWorkOfBreathing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_elasticworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data EndTidalCarbonDioxideFraction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidalcarbondioxidefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData EndTidalCarbonDioxidePressure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidalcarbondioxidepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data EndTidalOxygenFraction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidaloxygenfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData EndTidalOxygenPressure = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtidaloxygenpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData ExpiratoryFlow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryPulmonaryResistance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratorypulmonaryresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data FractionOfInsipredOxygen = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_fractionofinsipredoxygen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData ImposedPowerOfBreathing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_imposedpowerofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData ImposedWorkOfBreathing = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_imposedworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryexpiratoryratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InspiratoryFlow = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryPulmonaryResistance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratorypulmonaryresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData IntrapleuralPressure = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrapleuralpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData IntrapulmonaryPressure = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrapulmonarypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerPressureData LungCompliance = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lungcompliance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MaximalInspiratoryPressure = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximalinspiratorypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanAirwayPressure = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanairwaypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData OxygenationIndex = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenationindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData OxygenSaturationIndex = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygensaturationindex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData PatientPowerOfBreathing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientpowerofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData PatientWorkOfBreathing = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakinspiratorypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData PhysiologicDeadSpace = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_physiologicdeadspace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiratoryPressure = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiveendexpiratorypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerPressureData PulmonaryCompliance = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonarycompliance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressurePerVolumeData PulmonaryElastance = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryelastance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData ResistiveExpiratoryWorkOfBreathing = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resistiveexpiratoryworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData ResistiveInspiratoryWorkOfBreathing = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resistiveinspiratoryworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData RespirationRate = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RespiratoryMuscleFatigue = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratorymusclefatigue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData RespiratoryMusclePressure = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratorymusclepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData SaturationAndFractionOfInspiredOxygenRatio = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_saturationandfractionofinspiredoxygenratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData SpecificVentilation = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_specificventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TidalVolume = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tidalvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData TotalAlveolarVentilation = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalalveolarventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData TotalDeadSpaceVentilation = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_totaldeadspaceventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalLungVolume = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_totallungvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData TotalPowerOfBreathing = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalpowerofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData TotalPulmonaryVentilation = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalpulmonaryventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData TotalWorkOfBreathing = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalworkofbreathing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransairwayPressure = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_transairwaypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransalveolarPressure = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_transalveolarpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransChestWallPressure = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_transchestwallpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransMusclePressure = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmusclepressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TranspulmonaryPressure = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_transpulmonarypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransrespiratoryPressure = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_transrespiratorypressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData TransthoracicPressure = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_transthoracicpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RespiratorySystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.RespiratorySystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData AlveolarArterialGradient = 1;
  if (this->has_alveolararterialgradient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::alveolararterialgradient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData AlveolarDeadSpace = 2;
  if (this->has_alveolardeadspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::alveolardeadspace(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData AnatomicDeadSpace = 3;
  if (this->has_anatomicdeadspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::anatomicdeadspace(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData CarricoIndex = 4;
  if (this->has_carricoindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::carricoindex(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData ChestWallCompliance = 5;
  if (this->has_chestwallcompliance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chestwallcompliance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData ElasticWorkOfBreathing = 6;
  if (this->has_elasticworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::elasticworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalCarbonDioxideFraction = 7;
  if (this->has_endtidalcarbondioxidefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::endtidalcarbondioxidefraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalCarbonDioxidePressure = 8;
  if (this->has_endtidalcarbondioxidepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::endtidalcarbondioxidepressure(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalOxygenFraction = 9;
  if (this->has_endtidaloxygenfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::endtidaloxygenfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalOxygenPressure = 10;
  if (this->has_endtidaloxygenpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::endtidaloxygenpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData ExpiratoryFlow = 11;
  if (this->has_expiratoryflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::expiratoryflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryPulmonaryResistance = 12;
  if (this->has_expiratorypulmonaryresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::expiratorypulmonaryresistance(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionOfInsipredOxygen = 13;
  if (this->has_fractionofinsipredoxygen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::fractionofinsipredoxygen(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData ImposedPowerOfBreathing = 14;
  if (this->has_imposedpowerofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::imposedpowerofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData ImposedWorkOfBreathing = 15;
  if (this->has_imposedworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::imposedworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 16;
  if (this->has_inspiratoryexpiratoryratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::inspiratoryexpiratoryratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspiratoryFlow = 17;
  if (this->has_inspiratoryflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::inspiratoryflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryPulmonaryResistance = 18;
  if (this->has_inspiratorypulmonaryresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::inspiratorypulmonaryresistance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData IntrapleuralPressure = 19;
  if (this->has_intrapleuralpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::intrapleuralpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData IntrapulmonaryPressure = 20;
  if (this->has_intrapulmonarypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::intrapulmonarypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData LungCompliance = 21;
  if (this->has_lungcompliance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::lungcompliance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MaximalInspiratoryPressure = 22;
  if (this->has_maximalinspiratorypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::maximalinspiratorypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanAirwayPressure = 23;
  if (this->has_meanairwaypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::meanairwaypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData OxygenationIndex = 24;
  if (this->has_oxygenationindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::oxygenationindex(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData OxygenSaturationIndex = 25;
  if (this->has_oxygensaturationindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::oxygensaturationindex(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData PatientPowerOfBreathing = 26;
  if (this->has_patientpowerofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::patientpowerofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData PatientWorkOfBreathing = 27;
  if (this->has_patientworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::patientworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 28;
  if (this->has_peakinspiratorypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::peakinspiratorypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData PhysiologicDeadSpace = 29;
  if (this->has_physiologicdeadspace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::physiologicdeadspace(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiratoryPressure = 30;
  if (this->has_positiveendexpiratorypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::positiveendexpiratorypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData PulmonaryCompliance = 31;
  if (this->has_pulmonarycompliance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::pulmonarycompliance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData PulmonaryElastance = 32;
  if (this->has_pulmonaryelastance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::pulmonaryelastance(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData ResistiveExpiratoryWorkOfBreathing = 33;
  if (this->has_resistiveexpiratoryworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::resistiveexpiratoryworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData ResistiveInspiratoryWorkOfBreathing = 34;
  if (this->has_resistiveinspiratoryworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::resistiveinspiratoryworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRate = 35;
  if (this->has_respirationrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::respirationrate(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RespiratoryMuscleFatigue = 36;
  if (this->has_respiratorymusclefatigue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::respiratorymusclefatigue(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData RespiratoryMusclePressure = 37;
  if (this->has_respiratorymusclepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::respiratorymusclepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData SaturationAndFractionOfInspiredOxygenRatio = 38;
  if (this->has_saturationandfractionofinspiredoxygenratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::saturationandfractionofinspiredoxygenratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData SpecificVentilation = 39;
  if (this->has_specificventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::specificventilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolume = 40;
  if (this->has_tidalvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::tidalvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalAlveolarVentilation = 41;
  if (this->has_totalalveolarventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::totalalveolarventilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalDeadSpaceVentilation = 42;
  if (this->has_totaldeadspaceventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::totaldeadspaceventilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungVolume = 43;
  if (this->has_totallungvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::totallungvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData TotalPowerOfBreathing = 44;
  if (this->has_totalpowerofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::totalpowerofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalPulmonaryVentilation = 45;
  if (this->has_totalpulmonaryventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::totalpulmonaryventilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData TotalWorkOfBreathing = 46;
  if (this->has_totalworkofbreathing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::totalworkofbreathing(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransairwayPressure = 47;
  if (this->has_transairwaypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::transairwaypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransalveolarPressure = 48;
  if (this->has_transalveolarpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::transalveolarpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransChestWallPressure = 49;
  if (this->has_transchestwallpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::transchestwallpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransMusclePressure = 50;
  if (this->has_transmusclepressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::transmusclepressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TranspulmonaryPressure = 51;
  if (this->has_transpulmonarypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::transpulmonarypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransrespiratoryPressure = 52;
  if (this->has_transrespiratorypressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::transrespiratorypressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData TransthoracicPressure = 53;
  if (this->has_transthoracicpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::transthoracicpressure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.RespiratorySystemData)
  return target;
}

size_t RespiratorySystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.RespiratorySystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPressureData AlveolarArterialGradient = 1;
  if (this->has_alveolararterialgradient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alveolararterialgradient_);
  }

  // .pulse.cdm.bind.ScalarVolumeData AlveolarDeadSpace = 2;
  if (this->has_alveolardeadspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alveolardeadspace_);
  }

  // .pulse.cdm.bind.ScalarVolumeData AnatomicDeadSpace = 3;
  if (this->has_anatomicdeadspace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *anatomicdeadspace_);
  }

  // .pulse.cdm.bind.ScalarPressureData CarricoIndex = 4;
  if (this->has_carricoindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carricoindex_);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData ChestWallCompliance = 5;
  if (this->has_chestwallcompliance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chestwallcompliance_);
  }

  // .pulse.cdm.bind.ScalarEnergyData ElasticWorkOfBreathing = 6;
  if (this->has_elasticworkofbreathing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elasticworkofbreathing_);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalCarbonDioxideFraction = 7;
  if (this->has_endtidalcarbondioxidefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidalcarbondioxidefraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalCarbonDioxidePressure = 8;
  if (this->has_endtidalcarbondioxidepressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidalcarbondioxidepressure_);
  }

  // .pulse.cdm.bind.Scalar0To1Data EndTidalOxygenFraction = 9;
  if (this->has_endtidaloxygenfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidaloxygenfraction_);
  }

  // .pulse.cdm.bind.ScalarPressureData EndTidalOxygenPressure = 10;
  if (this->has_endtidaloxygenpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtidaloxygenpressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData ExpiratoryFlow = 11;
  if (this->has_expiratoryflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiratoryflow_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryPulmonaryResistance = 12;
  if (this->has_expiratorypulmonaryresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiratorypulmonaryresistance_);
  }

  // .pulse.cdm.bind.Scalar0To1Data FractionOfInsipredOxygen = 13;
  if (this->has_fractionofinsipredoxygen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fractionofinsipredoxygen_);
  }

  // .pulse.cdm.bind.ScalarPowerData ImposedPowerOfBreathing = 14;
  if (this->has_imposedpowerofbreathing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imposedpowerofbreathing_);
  }

  // .pulse.cdm.bind.ScalarEnergyData ImposedWorkOfBreathing = 15;
  if (this->has_imposedworkofbreathing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imposedworkofbreathing_);
  }

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 16;
  if (this->has_inspiratoryexpiratoryratio()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratoryexpiratoryratio_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspiratoryFlow = 17;
  if (this->has_inspiratoryflow()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratoryflow_);
  }

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryPulmonaryResistance = 18;
  if (this->has_inspiratorypulmonaryresistance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratorypulmonaryresistance_);
  }

  // .pulse.cdm.bind.ScalarPressureData IntrapleuralPressure = 19;
  if (this->has_intrapleuralpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrapleuralpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData IntrapulmonaryPressure = 20;
  if (this->has_intrapulmonarypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrapulmonarypressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData LungCompliance = 21;
  if (this->has_lungcompliance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lungcompliance_);
  }

  // .pulse.cdm.bind.ScalarPressureData MaximalInspiratoryPressure = 22;
  if (this->has_maximalinspiratorypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximalinspiratorypressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanAirwayPressure = 23;
  if (this->has_meanairwaypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanairwaypressure_);
  }

  // .pulse.cdm.bind.ScalarData OxygenationIndex = 24;
  if (this->has_oxygenationindex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenationindex_);
  }

  // .pulse.cdm.bind.ScalarPressureData OxygenSaturationIndex = 25;
  if (this->has_oxygensaturationindex()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygensaturationindex_);
  }

  // .pulse.cdm.bind.ScalarPowerData PatientPowerOfBreathing = 26;
  if (this->has_patientpowerofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientpowerofbreathing_);
  }

  // .pulse.cdm.bind.ScalarEnergyData PatientWorkOfBreathing = 27;
  if (this->has_patientworkofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientworkofbreathing_);
  }

  // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 28;
  if (this->has_peakinspiratorypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peakinspiratorypressure_);
  }

  // .pulse.cdm.bind.ScalarVolumeData PhysiologicDeadSpace = 29;
  if (this->has_physiologicdeadspace()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physiologicdeadspace_);
  }

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiratoryPressure = 30;
  if (this->has_positiveendexpiratorypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiveendexpiratorypressure_);
  }

  // .pulse.cdm.bind.ScalarVolumePerPressureData PulmonaryCompliance = 31;
  if (this->has_pulmonarycompliance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonarycompliance_);
  }

  // .pulse.cdm.bind.ScalarPressurePerVolumeData PulmonaryElastance = 32;
  if (this->has_pulmonaryelastance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pulmonaryelastance_);
  }

  // .pulse.cdm.bind.ScalarEnergyData ResistiveExpiratoryWorkOfBreathing = 33;
  if (this->has_resistiveexpiratoryworkofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resistiveexpiratoryworkofbreathing_);
  }

  // .pulse.cdm.bind.ScalarEnergyData ResistiveInspiratoryWorkOfBreathing = 34;
  if (this->has_resistiveinspiratoryworkofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resistiveinspiratoryworkofbreathing_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRate = 35;
  if (this->has_respirationrate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationrate_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RespiratoryMuscleFatigue = 36;
  if (this->has_respiratorymusclefatigue()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratorymusclefatigue_);
  }

  // .pulse.cdm.bind.ScalarPressureData RespiratoryMusclePressure = 37;
  if (this->has_respiratorymusclepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratorymusclepressure_);
  }

  // .pulse.cdm.bind.ScalarData SaturationAndFractionOfInspiredOxygenRatio = 38;
  if (this->has_saturationandfractionofinspiredoxygenratio()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saturationandfractionofinspiredoxygenratio_);
  }

  // .pulse.cdm.bind.ScalarData SpecificVentilation = 39;
  if (this->has_specificventilation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specificventilation_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolume = 40;
  if (this->has_tidalvolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tidalvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalAlveolarVentilation = 41;
  if (this->has_totalalveolarventilation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalalveolarventilation_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalDeadSpaceVentilation = 42;
  if (this->has_totaldeadspaceventilation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totaldeadspaceventilation_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungVolume = 43;
  if (this->has_totallungvolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totallungvolume_);
  }

  // .pulse.cdm.bind.ScalarPowerData TotalPowerOfBreathing = 44;
  if (this->has_totalpowerofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalpowerofbreathing_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalPulmonaryVentilation = 45;
  if (this->has_totalpulmonaryventilation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalpulmonaryventilation_);
  }

  // .pulse.cdm.bind.ScalarEnergyData TotalWorkOfBreathing = 46;
  if (this->has_totalworkofbreathing()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalworkofbreathing_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransairwayPressure = 47;
  if (this->has_transairwaypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transairwaypressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransalveolarPressure = 48;
  if (this->has_transalveolarpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transalveolarpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransChestWallPressure = 49;
  if (this->has_transchestwallpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transchestwallpressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransMusclePressure = 50;
  if (this->has_transmusclepressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transmusclepressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TranspulmonaryPressure = 51;
  if (this->has_transpulmonarypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transpulmonarypressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransrespiratoryPressure = 52;
  if (this->has_transrespiratorypressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transrespiratorypressure_);
  }

  // .pulse.cdm.bind.ScalarPressureData TransthoracicPressure = 53;
  if (this->has_transthoracicpressure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transthoracicpressure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespiratorySystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.RespiratorySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const RespiratorySystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RespiratorySystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.RespiratorySystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.RespiratorySystemData)
    MergeFrom(*source);
  }
}

void RespiratorySystemData::MergeFrom(const RespiratorySystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.RespiratorySystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alveolararterialgradient()) {
    _internal_mutable_alveolararterialgradient()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_alveolararterialgradient());
  }
  if (from.has_alveolardeadspace()) {
    _internal_mutable_alveolardeadspace()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_alveolardeadspace());
  }
  if (from.has_anatomicdeadspace()) {
    _internal_mutable_anatomicdeadspace()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_anatomicdeadspace());
  }
  if (from.has_carricoindex()) {
    _internal_mutable_carricoindex()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_carricoindex());
  }
  if (from.has_chestwallcompliance()) {
    _internal_mutable_chestwallcompliance()->::pulse::cdm::bind::ScalarVolumePerPressureData::MergeFrom(from._internal_chestwallcompliance());
  }
  if (from.has_elasticworkofbreathing()) {
    _internal_mutable_elasticworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_elasticworkofbreathing());
  }
  if (from.has_endtidalcarbondioxidefraction()) {
    _internal_mutable_endtidalcarbondioxidefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_endtidalcarbondioxidefraction());
  }
  if (from.has_endtidalcarbondioxidepressure()) {
    _internal_mutable_endtidalcarbondioxidepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_endtidalcarbondioxidepressure());
  }
  if (from.has_endtidaloxygenfraction()) {
    _internal_mutable_endtidaloxygenfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_endtidaloxygenfraction());
  }
  if (from.has_endtidaloxygenpressure()) {
    _internal_mutable_endtidaloxygenpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_endtidaloxygenpressure());
  }
  if (from.has_expiratoryflow()) {
    _internal_mutable_expiratoryflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_expiratoryflow());
  }
  if (from.has_expiratorypulmonaryresistance()) {
    _internal_mutable_expiratorypulmonaryresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_expiratorypulmonaryresistance());
  }
  if (from.has_fractionofinsipredoxygen()) {
    _internal_mutable_fractionofinsipredoxygen()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_fractionofinsipredoxygen());
  }
  if (from.has_imposedpowerofbreathing()) {
    _internal_mutable_imposedpowerofbreathing()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_imposedpowerofbreathing());
  }
  if (from.has_imposedworkofbreathing()) {
    _internal_mutable_imposedworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_imposedworkofbreathing());
  }
  if (from.has_inspiratoryexpiratoryratio()) {
    _internal_mutable_inspiratoryexpiratoryratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_inspiratoryexpiratoryratio());
  }
  if (from.has_inspiratoryflow()) {
    _internal_mutable_inspiratoryflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inspiratoryflow());
  }
  if (from.has_inspiratorypulmonaryresistance()) {
    _internal_mutable_inspiratorypulmonaryresistance()->::pulse::cdm::bind::ScalarPressureTimePerVolumeData::MergeFrom(from._internal_inspiratorypulmonaryresistance());
  }
  if (from.has_intrapleuralpressure()) {
    _internal_mutable_intrapleuralpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_intrapleuralpressure());
  }
  if (from.has_intrapulmonarypressure()) {
    _internal_mutable_intrapulmonarypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_intrapulmonarypressure());
  }
  if (from.has_lungcompliance()) {
    _internal_mutable_lungcompliance()->::pulse::cdm::bind::ScalarVolumePerPressureData::MergeFrom(from._internal_lungcompliance());
  }
  if (from.has_maximalinspiratorypressure()) {
    _internal_mutable_maximalinspiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_maximalinspiratorypressure());
  }
  if (from.has_meanairwaypressure()) {
    _internal_mutable_meanairwaypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanairwaypressure());
  }
  if (from.has_oxygenationindex()) {
    _internal_mutable_oxygenationindex()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_oxygenationindex());
  }
  if (from.has_oxygensaturationindex()) {
    _internal_mutable_oxygensaturationindex()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_oxygensaturationindex());
  }
  if (from.has_patientpowerofbreathing()) {
    _internal_mutable_patientpowerofbreathing()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_patientpowerofbreathing());
  }
  if (from.has_patientworkofbreathing()) {
    _internal_mutable_patientworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_patientworkofbreathing());
  }
  if (from.has_peakinspiratorypressure()) {
    _internal_mutable_peakinspiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_peakinspiratorypressure());
  }
  if (from.has_physiologicdeadspace()) {
    _internal_mutable_physiologicdeadspace()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_physiologicdeadspace());
  }
  if (from.has_positiveendexpiratorypressure()) {
    _internal_mutable_positiveendexpiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_positiveendexpiratorypressure());
  }
  if (from.has_pulmonarycompliance()) {
    _internal_mutable_pulmonarycompliance()->::pulse::cdm::bind::ScalarVolumePerPressureData::MergeFrom(from._internal_pulmonarycompliance());
  }
  if (from.has_pulmonaryelastance()) {
    _internal_mutable_pulmonaryelastance()->::pulse::cdm::bind::ScalarPressurePerVolumeData::MergeFrom(from._internal_pulmonaryelastance());
  }
  if (from.has_resistiveexpiratoryworkofbreathing()) {
    _internal_mutable_resistiveexpiratoryworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_resistiveexpiratoryworkofbreathing());
  }
  if (from.has_resistiveinspiratoryworkofbreathing()) {
    _internal_mutable_resistiveinspiratoryworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_resistiveinspiratoryworkofbreathing());
  }
  if (from.has_respirationrate()) {
    _internal_mutable_respirationrate()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_respirationrate());
  }
  if (from.has_respiratorymusclefatigue()) {
    _internal_mutable_respiratorymusclefatigue()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_respiratorymusclefatigue());
  }
  if (from.has_respiratorymusclepressure()) {
    _internal_mutable_respiratorymusclepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_respiratorymusclepressure());
  }
  if (from.has_saturationandfractionofinspiredoxygenratio()) {
    _internal_mutable_saturationandfractionofinspiredoxygenratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_saturationandfractionofinspiredoxygenratio());
  }
  if (from.has_specificventilation()) {
    _internal_mutable_specificventilation()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_specificventilation());
  }
  if (from.has_tidalvolume()) {
    _internal_mutable_tidalvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_tidalvolume());
  }
  if (from.has_totalalveolarventilation()) {
    _internal_mutable_totalalveolarventilation()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_totalalveolarventilation());
  }
  if (from.has_totaldeadspaceventilation()) {
    _internal_mutable_totaldeadspaceventilation()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_totaldeadspaceventilation());
  }
  if (from.has_totallungvolume()) {
    _internal_mutable_totallungvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totallungvolume());
  }
  if (from.has_totalpowerofbreathing()) {
    _internal_mutable_totalpowerofbreathing()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_totalpowerofbreathing());
  }
  if (from.has_totalpulmonaryventilation()) {
    _internal_mutable_totalpulmonaryventilation()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_totalpulmonaryventilation());
  }
  if (from.has_totalworkofbreathing()) {
    _internal_mutable_totalworkofbreathing()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_totalworkofbreathing());
  }
  if (from.has_transairwaypressure()) {
    _internal_mutable_transairwaypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transairwaypressure());
  }
  if (from.has_transalveolarpressure()) {
    _internal_mutable_transalveolarpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transalveolarpressure());
  }
  if (from.has_transchestwallpressure()) {
    _internal_mutable_transchestwallpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transchestwallpressure());
  }
  if (from.has_transmusclepressure()) {
    _internal_mutable_transmusclepressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transmusclepressure());
  }
  if (from.has_transpulmonarypressure()) {
    _internal_mutable_transpulmonarypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transpulmonarypressure());
  }
  if (from.has_transrespiratorypressure()) {
    _internal_mutable_transrespiratorypressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transrespiratorypressure());
  }
  if (from.has_transthoracicpressure()) {
    _internal_mutable_transthoracicpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_transthoracicpressure());
  }
}

void RespiratorySystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.RespiratorySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespiratorySystemData::CopyFrom(const RespiratorySystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.RespiratorySystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespiratorySystemData::IsInitialized() const {
  return true;
}

void RespiratorySystemData::InternalSwap(RespiratorySystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespiratorySystemData, transthoracicpressure_)
      + sizeof(RespiratorySystemData::transthoracicpressure_)
      - PROTOBUF_FIELD_OFFSET(RespiratorySystemData, alveolararterialgradient_)>(
          reinterpret_cast<char*>(&alveolararterialgradient_),
          reinterpret_cast<char*>(&other->alveolararterialgradient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespiratorySystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TissueSystemData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& carbondioxideproductionrate(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& extracellularfluidvolume(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& extravascularfluidvolume(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& intracellularfluidph(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& intracellularfluidvolume(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& oxygenconsumptionrate(const TissueSystemData* msg);
  static const ::pulse::cdm::bind::ScalarData& respiratoryexchangeratio(const TissueSystemData* msg);
};

const ::pulse::cdm::bind::ScalarVolumePerTimeData&
TissueSystemData::_Internal::carbondioxideproductionrate(const TissueSystemData* msg) {
  return *msg->carbondioxideproductionrate_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
TissueSystemData::_Internal::extracellularfluidvolume(const TissueSystemData* msg) {
  return *msg->extracellularfluidvolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
TissueSystemData::_Internal::extravascularfluidvolume(const TissueSystemData* msg) {
  return *msg->extravascularfluidvolume_;
}
const ::pulse::cdm::bind::ScalarData&
TissueSystemData::_Internal::intracellularfluidph(const TissueSystemData* msg) {
  return *msg->intracellularfluidph_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
TissueSystemData::_Internal::intracellularfluidvolume(const TissueSystemData* msg) {
  return *msg->intracellularfluidvolume_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
TissueSystemData::_Internal::oxygenconsumptionrate(const TissueSystemData* msg) {
  return *msg->oxygenconsumptionrate_;
}
const ::pulse::cdm::bind::ScalarData&
TissueSystemData::_Internal::respiratoryexchangeratio(const TissueSystemData* msg) {
  return *msg->respiratoryexchangeratio_;
}
void TissueSystemData::clear_carbondioxideproductionrate() {
  if (GetArena() == nullptr && carbondioxideproductionrate_ != nullptr) {
    delete carbondioxideproductionrate_;
  }
  carbondioxideproductionrate_ = nullptr;
}
void TissueSystemData::clear_extracellularfluidvolume() {
  if (GetArena() == nullptr && extracellularfluidvolume_ != nullptr) {
    delete extracellularfluidvolume_;
  }
  extracellularfluidvolume_ = nullptr;
}
void TissueSystemData::clear_extravascularfluidvolume() {
  if (GetArena() == nullptr && extravascularfluidvolume_ != nullptr) {
    delete extravascularfluidvolume_;
  }
  extravascularfluidvolume_ = nullptr;
}
void TissueSystemData::clear_intracellularfluidph() {
  if (GetArena() == nullptr && intracellularfluidph_ != nullptr) {
    delete intracellularfluidph_;
  }
  intracellularfluidph_ = nullptr;
}
void TissueSystemData::clear_intracellularfluidvolume() {
  if (GetArena() == nullptr && intracellularfluidvolume_ != nullptr) {
    delete intracellularfluidvolume_;
  }
  intracellularfluidvolume_ = nullptr;
}
void TissueSystemData::clear_oxygenconsumptionrate() {
  if (GetArena() == nullptr && oxygenconsumptionrate_ != nullptr) {
    delete oxygenconsumptionrate_;
  }
  oxygenconsumptionrate_ = nullptr;
}
void TissueSystemData::clear_respiratoryexchangeratio() {
  if (GetArena() == nullptr && respiratoryexchangeratio_ != nullptr) {
    delete respiratoryexchangeratio_;
  }
  respiratoryexchangeratio_ = nullptr;
}
TissueSystemData::TissueSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TissueSystemData)
}
TissueSystemData::TissueSystemData(const TissueSystemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_carbondioxideproductionrate()) {
    carbondioxideproductionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.carbondioxideproductionrate_);
  } else {
    carbondioxideproductionrate_ = nullptr;
  }
  if (from._internal_has_extracellularfluidvolume()) {
    extracellularfluidvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.extracellularfluidvolume_);
  } else {
    extracellularfluidvolume_ = nullptr;
  }
  if (from._internal_has_extravascularfluidvolume()) {
    extravascularfluidvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.extravascularfluidvolume_);
  } else {
    extravascularfluidvolume_ = nullptr;
  }
  if (from._internal_has_intracellularfluidph()) {
    intracellularfluidph_ = new ::pulse::cdm::bind::ScalarData(*from.intracellularfluidph_);
  } else {
    intracellularfluidph_ = nullptr;
  }
  if (from._internal_has_intracellularfluidvolume()) {
    intracellularfluidvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.intracellularfluidvolume_);
  } else {
    intracellularfluidvolume_ = nullptr;
  }
  if (from._internal_has_oxygenconsumptionrate()) {
    oxygenconsumptionrate_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.oxygenconsumptionrate_);
  } else {
    oxygenconsumptionrate_ = nullptr;
  }
  if (from._internal_has_respiratoryexchangeratio()) {
    respiratoryexchangeratio_ = new ::pulse::cdm::bind::ScalarData(*from.respiratoryexchangeratio_);
  } else {
    respiratoryexchangeratio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TissueSystemData)
}

void TissueSystemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&carbondioxideproductionrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&respiratoryexchangeratio_) -
      reinterpret_cast<char*>(&carbondioxideproductionrate_)) + sizeof(respiratoryexchangeratio_));
}

TissueSystemData::~TissueSystemData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TissueSystemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TissueSystemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete carbondioxideproductionrate_;
  if (this != internal_default_instance()) delete extracellularfluidvolume_;
  if (this != internal_default_instance()) delete extravascularfluidvolume_;
  if (this != internal_default_instance()) delete intracellularfluidph_;
  if (this != internal_default_instance()) delete intracellularfluidvolume_;
  if (this != internal_default_instance()) delete oxygenconsumptionrate_;
  if (this != internal_default_instance()) delete respiratoryexchangeratio_;
}

void TissueSystemData::ArenaDtor(void* object) {
  TissueSystemData* _this = reinterpret_cast< TissueSystemData* >(object);
  (void)_this;
}
void TissueSystemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TissueSystemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TissueSystemData& TissueSystemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TissueSystemData_pulse_2fcdm_2fbind_2fPhysiology_2eproto.base);
  return *internal_default_instance();
}


void TissueSystemData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TissueSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && carbondioxideproductionrate_ != nullptr) {
    delete carbondioxideproductionrate_;
  }
  carbondioxideproductionrate_ = nullptr;
  if (GetArena() == nullptr && extracellularfluidvolume_ != nullptr) {
    delete extracellularfluidvolume_;
  }
  extracellularfluidvolume_ = nullptr;
  if (GetArena() == nullptr && extravascularfluidvolume_ != nullptr) {
    delete extravascularfluidvolume_;
  }
  extravascularfluidvolume_ = nullptr;
  if (GetArena() == nullptr && intracellularfluidph_ != nullptr) {
    delete intracellularfluidph_;
  }
  intracellularfluidph_ = nullptr;
  if (GetArena() == nullptr && intracellularfluidvolume_ != nullptr) {
    delete intracellularfluidvolume_;
  }
  intracellularfluidvolume_ = nullptr;
  if (GetArena() == nullptr && oxygenconsumptionrate_ != nullptr) {
    delete oxygenconsumptionrate_;
  }
  oxygenconsumptionrate_ = nullptr;
  if (GetArena() == nullptr && respiratoryexchangeratio_ != nullptr) {
    delete respiratoryexchangeratio_;
  }
  respiratoryexchangeratio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TissueSystemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarVolumePerTimeData CarbonDioxideProductionRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_carbondioxideproductionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ExtracellularFluidVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extracellularfluidvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ExtravascularFluidVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extravascularfluidvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData IntracellularFluidPH = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_intracellularfluidph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData IntracellularFluidVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intracellularfluidvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData OxygenConsumptionRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oxygenconsumptionrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData RespiratoryExchangeRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_respiratoryexchangeratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TissueSystemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TissueSystemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeData CarbonDioxideProductionRate = 1;
  if (this->has_carbondioxideproductionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::carbondioxideproductionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExtracellularFluidVolume = 2;
  if (this->has_extracellularfluidvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::extracellularfluidvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExtravascularFluidVolume = 3;
  if (this->has_extravascularfluidvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extravascularfluidvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData IntracellularFluidPH = 4;
  if (this->has_intracellularfluidph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::intracellularfluidph(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData IntracellularFluidVolume = 5;
  if (this->has_intracellularfluidvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intracellularfluidvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData OxygenConsumptionRate = 6;
  if (this->has_oxygenconsumptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oxygenconsumptionrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData RespiratoryExchangeRatio = 7;
  if (this->has_respiratoryexchangeratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::respiratoryexchangeratio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TissueSystemData)
  return target;
}

size_t TissueSystemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TissueSystemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarVolumePerTimeData CarbonDioxideProductionRate = 1;
  if (this->has_carbondioxideproductionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *carbondioxideproductionrate_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExtracellularFluidVolume = 2;
  if (this->has_extracellularfluidvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extracellularfluidvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExtravascularFluidVolume = 3;
  if (this->has_extravascularfluidvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extravascularfluidvolume_);
  }

  // .pulse.cdm.bind.ScalarData IntracellularFluidPH = 4;
  if (this->has_intracellularfluidph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intracellularfluidph_);
  }

  // .pulse.cdm.bind.ScalarVolumeData IntracellularFluidVolume = 5;
  if (this->has_intracellularfluidvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intracellularfluidvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData OxygenConsumptionRate = 6;
  if (this->has_oxygenconsumptionrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oxygenconsumptionrate_);
  }

  // .pulse.cdm.bind.ScalarData RespiratoryExchangeRatio = 7;
  if (this->has_respiratoryexchangeratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respiratoryexchangeratio_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TissueSystemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TissueSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  const TissueSystemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TissueSystemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TissueSystemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TissueSystemData)
    MergeFrom(*source);
  }
}

void TissueSystemData::MergeFrom(const TissueSystemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TissueSystemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_carbondioxideproductionrate()) {
    _internal_mutable_carbondioxideproductionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_carbondioxideproductionrate());
  }
  if (from.has_extracellularfluidvolume()) {
    _internal_mutable_extracellularfluidvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_extracellularfluidvolume());
  }
  if (from.has_extravascularfluidvolume()) {
    _internal_mutable_extravascularfluidvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_extravascularfluidvolume());
  }
  if (from.has_intracellularfluidph()) {
    _internal_mutable_intracellularfluidph()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_intracellularfluidph());
  }
  if (from.has_intracellularfluidvolume()) {
    _internal_mutable_intracellularfluidvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_intracellularfluidvolume());
  }
  if (from.has_oxygenconsumptionrate()) {
    _internal_mutable_oxygenconsumptionrate()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_oxygenconsumptionrate());
  }
  if (from.has_respiratoryexchangeratio()) {
    _internal_mutable_respiratoryexchangeratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_respiratoryexchangeratio());
  }
}

void TissueSystemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TissueSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TissueSystemData::CopyFrom(const TissueSystemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TissueSystemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TissueSystemData::IsInitialized() const {
  return true;
}

void TissueSystemData::InternalSwap(TissueSystemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TissueSystemData, respiratoryexchangeratio_)
      + sizeof(TissueSystemData::respiratoryexchangeratio_)
      - PROTOBUF_FIELD_OFFSET(TissueSystemData, carbondioxideproductionrate_)>(
          reinterpret_cast<char*>(&carbondioxideproductionrate_),
          reinterpret_cast<char*>(&other->carbondioxideproductionrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TissueSystemData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PupillaryResponseData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PupillaryResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PupillaryResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::BloodChemistrySystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::BloodChemistrySystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::BloodChemistrySystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CardiovascularSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CardiovascularSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CardiovascularSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::DrugSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::DrugSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::DrugSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EndocrineSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EndocrineSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EndocrineSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EnergySystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EnergySystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EnergySystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GastrointestinalSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GastrointestinalSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GastrointestinalSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::HepaticSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::HepaticSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::HepaticSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::NervousSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::NervousSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::NervousSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::RenalSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::RenalSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::RenalSystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::RespiratorySystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::RespiratorySystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::RespiratorySystemData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TissueSystemData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TissueSystemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TissueSystemData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
