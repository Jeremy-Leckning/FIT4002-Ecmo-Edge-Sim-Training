// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Substance.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ActiveConditioningData;
class ActiveConditioningDataDefaultTypeInternal;
extern ActiveConditioningDataDefaultTypeInternal _ActiveConditioningData_default_instance_;
class AppliedTemperatureData;
class AppliedTemperatureDataDefaultTypeInternal;
extern AppliedTemperatureDataDefaultTypeInternal _AppliedTemperatureData_default_instance_;
class EnvironmentData;
class EnvironmentDataDefaultTypeInternal;
extern EnvironmentDataDefaultTypeInternal _EnvironmentData_default_instance_;
class EnvironmentalConditionsData;
class EnvironmentalConditionsDataDefaultTypeInternal;
extern EnvironmentalConditionsDataDefaultTypeInternal _EnvironmentalConditionsData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ActiveConditioningData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ActiveConditioningData>(Arena*);
template<> ::pulse::cdm::bind::AppliedTemperatureData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AppliedTemperatureData>(Arena*);
template<> ::pulse::cdm::bind::EnvironmentData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EnvironmentData>(Arena*);
template<> ::pulse::cdm::bind::EnvironmentalConditionsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EnvironmentalConditionsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum EnvironmentalConditionsData_eSurroundingType : int {
  EnvironmentalConditionsData_eSurroundingType_NullSurrounding = 0,
  EnvironmentalConditionsData_eSurroundingType_Air = 1,
  EnvironmentalConditionsData_eSurroundingType_Water = 2,
  EnvironmentalConditionsData_eSurroundingType_EnvironmentalConditionsData_eSurroundingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvironmentalConditionsData_eSurroundingType_EnvironmentalConditionsData_eSurroundingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvironmentalConditionsData_eSurroundingType_IsValid(int value);
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData_eSurroundingType_eSurroundingType_MIN = EnvironmentalConditionsData_eSurroundingType_NullSurrounding;
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData_eSurroundingType_eSurroundingType_MAX = EnvironmentalConditionsData_eSurroundingType_Water;
constexpr int EnvironmentalConditionsData_eSurroundingType_eSurroundingType_ARRAYSIZE = EnvironmentalConditionsData_eSurroundingType_eSurroundingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditionsData_eSurroundingType_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditionsData_eSurroundingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditionsData_eSurroundingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditionsData_eSurroundingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditionsData_eSurroundingType_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditionsData_eSurroundingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnvironmentalConditionsData_eSurroundingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditionsData_eSurroundingType>(
    EnvironmentalConditionsData_eSurroundingType_descriptor(), name, value);
}
// ===================================================================

class EnvironmentalConditionsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EnvironmentalConditionsData) */ {
 public:
  inline EnvironmentalConditionsData() : EnvironmentalConditionsData(nullptr) {}
  virtual ~EnvironmentalConditionsData();

  EnvironmentalConditionsData(const EnvironmentalConditionsData& from);
  EnvironmentalConditionsData(EnvironmentalConditionsData&& from) noexcept
    : EnvironmentalConditionsData() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditionsData& operator=(const EnvironmentalConditionsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditionsData& operator=(EnvironmentalConditionsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditionsData& default_instance();

  static inline const EnvironmentalConditionsData* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditionsData*>(
               &_EnvironmentalConditionsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvironmentalConditionsData& a, EnvironmentalConditionsData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditionsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentalConditionsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditionsData* New() const final {
    return CreateMaybeMessage<EnvironmentalConditionsData>(nullptr);
  }

  EnvironmentalConditionsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditionsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditionsData& from);
  void MergeFrom(const EnvironmentalConditionsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditionsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EnvironmentalConditionsData";
  }
  protected:
  explicit EnvironmentalConditionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvironmentalConditionsData_eSurroundingType eSurroundingType;
  static constexpr eSurroundingType NullSurrounding =
    EnvironmentalConditionsData_eSurroundingType_NullSurrounding;
  static constexpr eSurroundingType Air =
    EnvironmentalConditionsData_eSurroundingType_Air;
  static constexpr eSurroundingType Water =
    EnvironmentalConditionsData_eSurroundingType_Water;
  static inline bool eSurroundingType_IsValid(int value) {
    return EnvironmentalConditionsData_eSurroundingType_IsValid(value);
  }
  static constexpr eSurroundingType eSurroundingType_MIN =
    EnvironmentalConditionsData_eSurroundingType_eSurroundingType_MIN;
  static constexpr eSurroundingType eSurroundingType_MAX =
    EnvironmentalConditionsData_eSurroundingType_eSurroundingType_MAX;
  static constexpr int eSurroundingType_ARRAYSIZE =
    EnvironmentalConditionsData_eSurroundingType_eSurroundingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eSurroundingType_descriptor() {
    return EnvironmentalConditionsData_eSurroundingType_descriptor();
  }
  template<typename T>
  static inline const std::string& eSurroundingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eSurroundingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eSurroundingType_Name.");
    return EnvironmentalConditionsData_eSurroundingType_Name(enum_t_value);
  }
  static inline bool eSurroundingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eSurroundingType* value) {
    return EnvironmentalConditionsData_eSurroundingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAmbientGasFieldNumber = 11,
    kAmbientAerosolFieldNumber = 12,
    kAirDensityFieldNumber = 2,
    kAirVelocityFieldNumber = 3,
    kAmbientTemperatureFieldNumber = 4,
    kAtmosphericPressureFieldNumber = 5,
    kClothingResistanceFieldNumber = 6,
    kEmissivityFieldNumber = 7,
    kMeanRadiantTemperatureFieldNumber = 8,
    kRelativeHumidityFieldNumber = 9,
    kRespirationAmbientTemperatureFieldNumber = 10,
    kSurroundingTypeFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.SubstanceFractionData AmbientGas = 11;
  int ambientgas_size() const;
  private:
  int _internal_ambientgas_size() const;
  public:
  void clear_ambientgas();
  ::pulse::cdm::bind::SubstanceFractionData* mutable_ambientgas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >*
      mutable_ambientgas();
  private:
  const ::pulse::cdm::bind::SubstanceFractionData& _internal_ambientgas(int index) const;
  ::pulse::cdm::bind::SubstanceFractionData* _internal_add_ambientgas();
  public:
  const ::pulse::cdm::bind::SubstanceFractionData& ambientgas(int index) const;
  ::pulse::cdm::bind::SubstanceFractionData* add_ambientgas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >&
      ambientgas() const;

  // repeated .pulse.cdm.bind.SubstanceConcentrationData AmbientAerosol = 12;
  int ambientaerosol_size() const;
  private:
  int _internal_ambientaerosol_size() const;
  public:
  void clear_ambientaerosol();
  ::pulse::cdm::bind::SubstanceConcentrationData* mutable_ambientaerosol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
      mutable_ambientaerosol();
  private:
  const ::pulse::cdm::bind::SubstanceConcentrationData& _internal_ambientaerosol(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* _internal_add_ambientaerosol();
  public:
  const ::pulse::cdm::bind::SubstanceConcentrationData& ambientaerosol(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* add_ambientaerosol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
      ambientaerosol() const;

  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 2;
  bool has_airdensity() const;
  private:
  bool _internal_has_airdensity() const;
  public:
  void clear_airdensity();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& airdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_airdensity();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_airdensity();
  void set_allocated_airdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_airdensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_airdensity();
  public:
  void unsafe_arena_set_allocated_airdensity(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_airdensity();

  // .pulse.cdm.bind.ScalarLengthPerTimeData AirVelocity = 3;
  bool has_airvelocity() const;
  private:
  bool _internal_has_airvelocity() const;
  public:
  void clear_airvelocity();
  const ::pulse::cdm::bind::ScalarLengthPerTimeData& airvelocity() const;
  ::pulse::cdm::bind::ScalarLengthPerTimeData* release_airvelocity();
  ::pulse::cdm::bind::ScalarLengthPerTimeData* mutable_airvelocity();
  void set_allocated_airvelocity(::pulse::cdm::bind::ScalarLengthPerTimeData* airvelocity);
  private:
  const ::pulse::cdm::bind::ScalarLengthPerTimeData& _internal_airvelocity() const;
  ::pulse::cdm::bind::ScalarLengthPerTimeData* _internal_mutable_airvelocity();
  public:
  void unsafe_arena_set_allocated_airvelocity(
      ::pulse::cdm::bind::ScalarLengthPerTimeData* airvelocity);
  ::pulse::cdm::bind::ScalarLengthPerTimeData* unsafe_arena_release_airvelocity();

  // .pulse.cdm.bind.ScalarTemperatureData AmbientTemperature = 4;
  bool has_ambienttemperature() const;
  private:
  bool _internal_has_ambienttemperature() const;
  public:
  void clear_ambienttemperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& ambienttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_ambienttemperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_ambienttemperature();
  void set_allocated_ambienttemperature(::pulse::cdm::bind::ScalarTemperatureData* ambienttemperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_ambienttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_ambienttemperature();
  public:
  void unsafe_arena_set_allocated_ambienttemperature(
      ::pulse::cdm::bind::ScalarTemperatureData* ambienttemperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_ambienttemperature();

  // .pulse.cdm.bind.ScalarPressureData AtmosphericPressure = 5;
  bool has_atmosphericpressure() const;
  private:
  bool _internal_has_atmosphericpressure() const;
  public:
  void clear_atmosphericpressure();
  const ::pulse::cdm::bind::ScalarPressureData& atmosphericpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_atmosphericpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_atmosphericpressure();
  void set_allocated_atmosphericpressure(::pulse::cdm::bind::ScalarPressureData* atmosphericpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_atmosphericpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_atmosphericpressure();
  public:
  void unsafe_arena_set_allocated_atmosphericpressure(
      ::pulse::cdm::bind::ScalarPressureData* atmosphericpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_atmosphericpressure();

  // .pulse.cdm.bind.ScalarHeatResistanceAreaData ClothingResistance = 6;
  bool has_clothingresistance() const;
  private:
  bool _internal_has_clothingresistance() const;
  public:
  void clear_clothingresistance();
  const ::pulse::cdm::bind::ScalarHeatResistanceAreaData& clothingresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* release_clothingresistance();
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* mutable_clothingresistance();
  void set_allocated_clothingresistance(::pulse::cdm::bind::ScalarHeatResistanceAreaData* clothingresistance);
  private:
  const ::pulse::cdm::bind::ScalarHeatResistanceAreaData& _internal_clothingresistance() const;
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* _internal_mutable_clothingresistance();
  public:
  void unsafe_arena_set_allocated_clothingresistance(
      ::pulse::cdm::bind::ScalarHeatResistanceAreaData* clothingresistance);
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* unsafe_arena_release_clothingresistance();

  // .pulse.cdm.bind.Scalar0To1Data Emissivity = 7;
  bool has_emissivity() const;
  private:
  bool _internal_has_emissivity() const;
  public:
  void clear_emissivity();
  const ::pulse::cdm::bind::Scalar0To1Data& emissivity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_emissivity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_emissivity();
  void set_allocated_emissivity(::pulse::cdm::bind::Scalar0To1Data* emissivity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_emissivity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_emissivity();
  public:
  void unsafe_arena_set_allocated_emissivity(
      ::pulse::cdm::bind::Scalar0To1Data* emissivity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_emissivity();

  // .pulse.cdm.bind.ScalarTemperatureData MeanRadiantTemperature = 8;
  bool has_meanradianttemperature() const;
  private:
  bool _internal_has_meanradianttemperature() const;
  public:
  void clear_meanradianttemperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& meanradianttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_meanradianttemperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_meanradianttemperature();
  void set_allocated_meanradianttemperature(::pulse::cdm::bind::ScalarTemperatureData* meanradianttemperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_meanradianttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_meanradianttemperature();
  public:
  void unsafe_arena_set_allocated_meanradianttemperature(
      ::pulse::cdm::bind::ScalarTemperatureData* meanradianttemperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_meanradianttemperature();

  // .pulse.cdm.bind.Scalar0To1Data RelativeHumidity = 9;
  bool has_relativehumidity() const;
  private:
  bool _internal_has_relativehumidity() const;
  public:
  void clear_relativehumidity();
  const ::pulse::cdm::bind::Scalar0To1Data& relativehumidity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_relativehumidity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_relativehumidity();
  void set_allocated_relativehumidity(::pulse::cdm::bind::Scalar0To1Data* relativehumidity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_relativehumidity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_relativehumidity();
  public:
  void unsafe_arena_set_allocated_relativehumidity(
      ::pulse::cdm::bind::Scalar0To1Data* relativehumidity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_relativehumidity();

  // .pulse.cdm.bind.ScalarTemperatureData RespirationAmbientTemperature = 10;
  bool has_respirationambienttemperature() const;
  private:
  bool _internal_has_respirationambienttemperature() const;
  public:
  void clear_respirationambienttemperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& respirationambienttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_respirationambienttemperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_respirationambienttemperature();
  void set_allocated_respirationambienttemperature(::pulse::cdm::bind::ScalarTemperatureData* respirationambienttemperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_respirationambienttemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_respirationambienttemperature();
  public:
  void unsafe_arena_set_allocated_respirationambienttemperature(
      ::pulse::cdm::bind::ScalarTemperatureData* respirationambienttemperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_respirationambienttemperature();

  // .pulse.cdm.bind.EnvironmentalConditionsData.eSurroundingType SurroundingType = 1;
  void clear_surroundingtype();
  ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType surroundingtype() const;
  void set_surroundingtype(::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType value);
  private:
  ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType _internal_surroundingtype() const;
  void _internal_set_surroundingtype(::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EnvironmentalConditionsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData > ambientgas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData > ambientaerosol_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity_;
  ::pulse::cdm::bind::ScalarLengthPerTimeData* airvelocity_;
  ::pulse::cdm::bind::ScalarTemperatureData* ambienttemperature_;
  ::pulse::cdm::bind::ScalarPressureData* atmosphericpressure_;
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* clothingresistance_;
  ::pulse::cdm::bind::Scalar0To1Data* emissivity_;
  ::pulse::cdm::bind::ScalarTemperatureData* meanradianttemperature_;
  ::pulse::cdm::bind::Scalar0To1Data* relativehumidity_;
  ::pulse::cdm::bind::ScalarTemperatureData* respirationambienttemperature_;
  int surroundingtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
};
// -------------------------------------------------------------------

class ActiveConditioningData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ActiveConditioningData) */ {
 public:
  inline ActiveConditioningData() : ActiveConditioningData(nullptr) {}
  virtual ~ActiveConditioningData();

  ActiveConditioningData(const ActiveConditioningData& from);
  ActiveConditioningData(ActiveConditioningData&& from) noexcept
    : ActiveConditioningData() {
    *this = ::std::move(from);
  }

  inline ActiveConditioningData& operator=(const ActiveConditioningData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveConditioningData& operator=(ActiveConditioningData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveConditioningData& default_instance();

  static inline const ActiveConditioningData* internal_default_instance() {
    return reinterpret_cast<const ActiveConditioningData*>(
               &_ActiveConditioningData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActiveConditioningData& a, ActiveConditioningData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveConditioningData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveConditioningData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveConditioningData* New() const final {
    return CreateMaybeMessage<ActiveConditioningData>(nullptr);
  }

  ActiveConditioningData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveConditioningData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveConditioningData& from);
  void MergeFrom(const ActiveConditioningData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveConditioningData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ActiveConditioningData";
  }
  protected:
  explicit ActiveConditioningData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerFieldNumber = 1,
    kSurfaceAreaFieldNumber = 2,
    kSurfaceAreaFractionFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarPowerData Power = 1;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  const ::pulse::cdm::bind::ScalarPowerData& power() const;
  ::pulse::cdm::bind::ScalarPowerData* release_power();
  ::pulse::cdm::bind::ScalarPowerData* mutable_power();
  void set_allocated_power(::pulse::cdm::bind::ScalarPowerData* power);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_power() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_power();
  public:
  void unsafe_arena_set_allocated_power(
      ::pulse::cdm::bind::ScalarPowerData* power);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_power();

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 2;
  bool has_surfacearea() const;
  private:
  bool _internal_has_surfacearea() const;
  public:
  void clear_surfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& surfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_surfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_surfacearea();
  void set_allocated_surfacearea(::pulse::cdm::bind::ScalarAreaData* surfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_surfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_surfacearea();
  public:
  void unsafe_arena_set_allocated_surfacearea(
      ::pulse::cdm::bind::ScalarAreaData* surfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_surfacearea();

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 3;
  bool has_surfaceareafraction() const;
  private:
  bool _internal_has_surfaceareafraction() const;
  public:
  void clear_surfaceareafraction();
  const ::pulse::cdm::bind::Scalar0To1Data& surfaceareafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_surfaceareafraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_surfaceareafraction();
  void set_allocated_surfaceareafraction(::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_surfaceareafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_surfaceareafraction();
  public:
  void unsafe_arena_set_allocated_surfaceareafraction(
      ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_surfaceareafraction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ActiveConditioningData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPowerData* power_;
  ::pulse::cdm::bind::ScalarAreaData* surfacearea_;
  ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
};
// -------------------------------------------------------------------

class AppliedTemperatureData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AppliedTemperatureData) */ {
 public:
  inline AppliedTemperatureData() : AppliedTemperatureData(nullptr) {}
  virtual ~AppliedTemperatureData();

  AppliedTemperatureData(const AppliedTemperatureData& from);
  AppliedTemperatureData(AppliedTemperatureData&& from) noexcept
    : AppliedTemperatureData() {
    *this = ::std::move(from);
  }

  inline AppliedTemperatureData& operator=(const AppliedTemperatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppliedTemperatureData& operator=(AppliedTemperatureData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppliedTemperatureData& default_instance();

  static inline const AppliedTemperatureData* internal_default_instance() {
    return reinterpret_cast<const AppliedTemperatureData*>(
               &_AppliedTemperatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppliedTemperatureData& a, AppliedTemperatureData& b) {
    a.Swap(&b);
  }
  inline void Swap(AppliedTemperatureData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppliedTemperatureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppliedTemperatureData* New() const final {
    return CreateMaybeMessage<AppliedTemperatureData>(nullptr);
  }

  AppliedTemperatureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppliedTemperatureData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppliedTemperatureData& from);
  void MergeFrom(const AppliedTemperatureData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppliedTemperatureData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AppliedTemperatureData";
  }
  protected:
  explicit AppliedTemperatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperatureFieldNumber = 2,
    kSurfaceAreaFieldNumber = 3,
    kSurfaceAreaFractionFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 2;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& temperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_temperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_temperature();
  void set_allocated_temperature(::pulse::cdm::bind::ScalarTemperatureData* temperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_temperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_temperature();
  public:
  void unsafe_arena_set_allocated_temperature(
      ::pulse::cdm::bind::ScalarTemperatureData* temperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_temperature();

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 3;
  bool has_surfacearea() const;
  private:
  bool _internal_has_surfacearea() const;
  public:
  void clear_surfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& surfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_surfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_surfacearea();
  void set_allocated_surfacearea(::pulse::cdm::bind::ScalarAreaData* surfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_surfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_surfacearea();
  public:
  void unsafe_arena_set_allocated_surfacearea(
      ::pulse::cdm::bind::ScalarAreaData* surfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_surfacearea();

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 4;
  bool has_surfaceareafraction() const;
  private:
  bool _internal_has_surfaceareafraction() const;
  public:
  void clear_surfaceareafraction();
  const ::pulse::cdm::bind::Scalar0To1Data& surfaceareafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_surfaceareafraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_surfaceareafraction();
  void set_allocated_surfaceareafraction(::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_surfaceareafraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_surfaceareafraction();
  public:
  void unsafe_arena_set_allocated_surfaceareafraction(
      ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_surfaceareafraction();

  // .pulse.cdm.bind.eSwitch State = 1;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AppliedTemperatureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTemperatureData* temperature_;
  ::pulse::cdm::bind::ScalarAreaData* surfacearea_;
  ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EnvironmentData) */ {
 public:
  inline EnvironmentData() : EnvironmentData(nullptr) {}
  virtual ~EnvironmentData();

  EnvironmentData(const EnvironmentData& from);
  EnvironmentData(EnvironmentData&& from) noexcept
    : EnvironmentData() {
    *this = ::std::move(from);
  }

  inline EnvironmentData& operator=(const EnvironmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentData& operator=(EnvironmentData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentData& default_instance();

  static inline const EnvironmentData* internal_default_instance() {
    return reinterpret_cast<const EnvironmentData*>(
               &_EnvironmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnvironmentData& a, EnvironmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnvironmentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentData* New() const final {
    return CreateMaybeMessage<EnvironmentData>(nullptr);
  }

  EnvironmentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentData& from);
  void MergeFrom(const EnvironmentData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EnvironmentData";
  }
  protected:
  explicit EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentalConditionsFieldNumber = 1,
    kActiveHeatingFieldNumber = 2,
    kActiveCoolingFieldNumber = 3,
    kAppliedTemperatureFieldNumber = 4,
    kConvectiveHeatLossFieldNumber = 5,
    kConvectiveHeatTranferCoefficientFieldNumber = 6,
    kEvaporativeHeatLossFieldNumber = 7,
    kEvaporativeHeatTranferCoefficientFieldNumber = 8,
    kRadiativeHeatLossFieldNumber = 9,
    kRadiativeHeatTranferCoefficientFieldNumber = 10,
    kRespirationHeatLossFieldNumber = 11,
    kSkinHeatLossFieldNumber = 12,
  };
  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 1;
  bool has_environmentalconditions() const;
  private:
  bool _internal_has_environmentalconditions() const;
  public:
  void clear_environmentalconditions();
  const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* release_environmentalconditions();
  ::pulse::cdm::bind::EnvironmentalConditionsData* mutable_environmentalconditions();
  void set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions);
  private:
  const ::pulse::cdm::bind::EnvironmentalConditionsData& _internal_environmentalconditions() const;
  ::pulse::cdm::bind::EnvironmentalConditionsData* _internal_mutable_environmentalconditions();
  public:
  void unsafe_arena_set_allocated_environmentalconditions(
      ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions);
  ::pulse::cdm::bind::EnvironmentalConditionsData* unsafe_arena_release_environmentalconditions();

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  bool has_activeheating() const;
  private:
  bool _internal_has_activeheating() const;
  public:
  void clear_activeheating();
  const ::pulse::cdm::bind::ActiveConditioningData& activeheating() const;
  ::pulse::cdm::bind::ActiveConditioningData* release_activeheating();
  ::pulse::cdm::bind::ActiveConditioningData* mutable_activeheating();
  void set_allocated_activeheating(::pulse::cdm::bind::ActiveConditioningData* activeheating);
  private:
  const ::pulse::cdm::bind::ActiveConditioningData& _internal_activeheating() const;
  ::pulse::cdm::bind::ActiveConditioningData* _internal_mutable_activeheating();
  public:
  void unsafe_arena_set_allocated_activeheating(
      ::pulse::cdm::bind::ActiveConditioningData* activeheating);
  ::pulse::cdm::bind::ActiveConditioningData* unsafe_arena_release_activeheating();

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  bool has_activecooling() const;
  private:
  bool _internal_has_activecooling() const;
  public:
  void clear_activecooling();
  const ::pulse::cdm::bind::ActiveConditioningData& activecooling() const;
  ::pulse::cdm::bind::ActiveConditioningData* release_activecooling();
  ::pulse::cdm::bind::ActiveConditioningData* mutable_activecooling();
  void set_allocated_activecooling(::pulse::cdm::bind::ActiveConditioningData* activecooling);
  private:
  const ::pulse::cdm::bind::ActiveConditioningData& _internal_activecooling() const;
  ::pulse::cdm::bind::ActiveConditioningData* _internal_mutable_activecooling();
  public:
  void unsafe_arena_set_allocated_activecooling(
      ::pulse::cdm::bind::ActiveConditioningData* activecooling);
  ::pulse::cdm::bind::ActiveConditioningData* unsafe_arena_release_activecooling();

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  bool has_appliedtemperature() const;
  private:
  bool _internal_has_appliedtemperature() const;
  public:
  void clear_appliedtemperature();
  const ::pulse::cdm::bind::AppliedTemperatureData& appliedtemperature() const;
  ::pulse::cdm::bind::AppliedTemperatureData* release_appliedtemperature();
  ::pulse::cdm::bind::AppliedTemperatureData* mutable_appliedtemperature();
  void set_allocated_appliedtemperature(::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature);
  private:
  const ::pulse::cdm::bind::AppliedTemperatureData& _internal_appliedtemperature() const;
  ::pulse::cdm::bind::AppliedTemperatureData* _internal_mutable_appliedtemperature();
  public:
  void unsafe_arena_set_allocated_appliedtemperature(
      ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature);
  ::pulse::cdm::bind::AppliedTemperatureData* unsafe_arena_release_appliedtemperature();

  // .pulse.cdm.bind.ScalarPowerData ConvectiveHeatLoss = 5;
  bool has_convectiveheatloss() const;
  private:
  bool _internal_has_convectiveheatloss() const;
  public:
  void clear_convectiveheatloss();
  const ::pulse::cdm::bind::ScalarPowerData& convectiveheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* release_convectiveheatloss();
  ::pulse::cdm::bind::ScalarPowerData* mutable_convectiveheatloss();
  void set_allocated_convectiveheatloss(::pulse::cdm::bind::ScalarPowerData* convectiveheatloss);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_convectiveheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_convectiveheatloss();
  public:
  void unsafe_arena_set_allocated_convectiveheatloss(
      ::pulse::cdm::bind::ScalarPowerData* convectiveheatloss);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_convectiveheatloss();

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData ConvectiveHeatTranferCoefficient = 6;
  bool has_convectiveheattranfercoefficient() const;
  private:
  bool _internal_has_convectiveheattranfercoefficient() const;
  public:
  void clear_convectiveheattranfercoefficient();
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& convectiveheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* release_convectiveheattranfercoefficient();
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* mutable_convectiveheattranfercoefficient();
  void set_allocated_convectiveheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* convectiveheattranfercoefficient);
  private:
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& _internal_convectiveheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* _internal_mutable_convectiveheattranfercoefficient();
  public:
  void unsafe_arena_set_allocated_convectiveheattranfercoefficient(
      ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* convectiveheattranfercoefficient);
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* unsafe_arena_release_convectiveheattranfercoefficient();

  // .pulse.cdm.bind.ScalarPowerData EvaporativeHeatLoss = 7;
  bool has_evaporativeheatloss() const;
  private:
  bool _internal_has_evaporativeheatloss() const;
  public:
  void clear_evaporativeheatloss();
  const ::pulse::cdm::bind::ScalarPowerData& evaporativeheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* release_evaporativeheatloss();
  ::pulse::cdm::bind::ScalarPowerData* mutable_evaporativeheatloss();
  void set_allocated_evaporativeheatloss(::pulse::cdm::bind::ScalarPowerData* evaporativeheatloss);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_evaporativeheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_evaporativeheatloss();
  public:
  void unsafe_arena_set_allocated_evaporativeheatloss(
      ::pulse::cdm::bind::ScalarPowerData* evaporativeheatloss);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_evaporativeheatloss();

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData EvaporativeHeatTranferCoefficient = 8;
  bool has_evaporativeheattranfercoefficient() const;
  private:
  bool _internal_has_evaporativeheattranfercoefficient() const;
  public:
  void clear_evaporativeheattranfercoefficient();
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& evaporativeheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* release_evaporativeheattranfercoefficient();
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* mutable_evaporativeheattranfercoefficient();
  void set_allocated_evaporativeheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* evaporativeheattranfercoefficient);
  private:
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& _internal_evaporativeheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* _internal_mutable_evaporativeheattranfercoefficient();
  public:
  void unsafe_arena_set_allocated_evaporativeheattranfercoefficient(
      ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* evaporativeheattranfercoefficient);
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* unsafe_arena_release_evaporativeheattranfercoefficient();

  // .pulse.cdm.bind.ScalarPowerData RadiativeHeatLoss = 9;
  bool has_radiativeheatloss() const;
  private:
  bool _internal_has_radiativeheatloss() const;
  public:
  void clear_radiativeheatloss();
  const ::pulse::cdm::bind::ScalarPowerData& radiativeheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* release_radiativeheatloss();
  ::pulse::cdm::bind::ScalarPowerData* mutable_radiativeheatloss();
  void set_allocated_radiativeheatloss(::pulse::cdm::bind::ScalarPowerData* radiativeheatloss);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_radiativeheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_radiativeheatloss();
  public:
  void unsafe_arena_set_allocated_radiativeheatloss(
      ::pulse::cdm::bind::ScalarPowerData* radiativeheatloss);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_radiativeheatloss();

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData RadiativeHeatTranferCoefficient = 10;
  bool has_radiativeheattranfercoefficient() const;
  private:
  bool _internal_has_radiativeheattranfercoefficient() const;
  public:
  void clear_radiativeheattranfercoefficient();
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& radiativeheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* release_radiativeheattranfercoefficient();
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* mutable_radiativeheattranfercoefficient();
  void set_allocated_radiativeheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* radiativeheattranfercoefficient);
  private:
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& _internal_radiativeheattranfercoefficient() const;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* _internal_mutable_radiativeheattranfercoefficient();
  public:
  void unsafe_arena_set_allocated_radiativeheattranfercoefficient(
      ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* radiativeheattranfercoefficient);
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* unsafe_arena_release_radiativeheattranfercoefficient();

  // .pulse.cdm.bind.ScalarPowerData RespirationHeatLoss = 11;
  bool has_respirationheatloss() const;
  private:
  bool _internal_has_respirationheatloss() const;
  public:
  void clear_respirationheatloss();
  const ::pulse::cdm::bind::ScalarPowerData& respirationheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* release_respirationheatloss();
  ::pulse::cdm::bind::ScalarPowerData* mutable_respirationheatloss();
  void set_allocated_respirationheatloss(::pulse::cdm::bind::ScalarPowerData* respirationheatloss);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_respirationheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_respirationheatloss();
  public:
  void unsafe_arena_set_allocated_respirationheatloss(
      ::pulse::cdm::bind::ScalarPowerData* respirationheatloss);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_respirationheatloss();

  // .pulse.cdm.bind.ScalarPowerData SkinHeatLoss = 12;
  bool has_skinheatloss() const;
  private:
  bool _internal_has_skinheatloss() const;
  public:
  void clear_skinheatloss();
  const ::pulse::cdm::bind::ScalarPowerData& skinheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* release_skinheatloss();
  ::pulse::cdm::bind::ScalarPowerData* mutable_skinheatloss();
  void set_allocated_skinheatloss(::pulse::cdm::bind::ScalarPowerData* skinheatloss);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_skinheatloss() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_skinheatloss();
  public:
  void unsafe_arena_set_allocated_skinheatloss(
      ::pulse::cdm::bind::ScalarPowerData* skinheatloss);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_skinheatloss();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EnvironmentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions_;
  ::pulse::cdm::bind::ActiveConditioningData* activeheating_;
  ::pulse::cdm::bind::ActiveConditioningData* activecooling_;
  ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature_;
  ::pulse::cdm::bind::ScalarPowerData* convectiveheatloss_;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* convectiveheattranfercoefficient_;
  ::pulse::cdm::bind::ScalarPowerData* evaporativeheatloss_;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* evaporativeheattranfercoefficient_;
  ::pulse::cdm::bind::ScalarPowerData* radiativeheatloss_;
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* radiativeheattranfercoefficient_;
  ::pulse::cdm::bind::ScalarPowerData* respirationheatloss_;
  ::pulse::cdm::bind::ScalarPowerData* skinheatloss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvironmentalConditionsData

// .pulse.cdm.bind.EnvironmentalConditionsData.eSurroundingType SurroundingType = 1;
inline void EnvironmentalConditionsData::clear_surroundingtype() {
  surroundingtype_ = 0;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::_internal_surroundingtype() const {
  return static_cast< ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType >(surroundingtype_);
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::surroundingtype() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.SurroundingType)
  return _internal_surroundingtype();
}
inline void EnvironmentalConditionsData::_internal_set_surroundingtype(::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType value) {
  
  surroundingtype_ = value;
}
inline void EnvironmentalConditionsData::set_surroundingtype(::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType value) {
  _internal_set_surroundingtype(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.EnvironmentalConditionsData.SurroundingType)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 2;
inline bool EnvironmentalConditionsData::_internal_has_airdensity() const {
  return this != internal_default_instance() && airdensity_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_airdensity() const {
  return _internal_has_airdensity();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& EnvironmentalConditionsData::_internal_airdensity() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = airdensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& EnvironmentalConditionsData::airdensity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AirDensity)
  return _internal_airdensity();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_airdensity(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity_);
  }
  airdensity_ = airdensity;
  if (airdensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AirDensity)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* EnvironmentalConditionsData::release_airdensity() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = airdensity_;
  airdensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* EnvironmentalConditionsData::unsafe_arena_release_airdensity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.AirDensity)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = airdensity_;
  airdensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* EnvironmentalConditionsData::_internal_mutable_airdensity() {
  
  if (airdensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    airdensity_ = p;
  }
  return airdensity_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* EnvironmentalConditionsData::mutable_airdensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AirDensity)
  return _internal_mutable_airdensity();
}
inline void EnvironmentalConditionsData::set_allocated_airdensity(::pulse::cdm::bind::ScalarMassPerVolumeData* airdensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity_);
  }
  if (airdensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airdensity)->GetArena();
    if (message_arena != submessage_arena) {
      airdensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airdensity, submessage_arena);
    }
    
  } else {
    
  }
  airdensity_ = airdensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AirDensity)
}

// .pulse.cdm.bind.ScalarLengthPerTimeData AirVelocity = 3;
inline bool EnvironmentalConditionsData::_internal_has_airvelocity() const {
  return this != internal_default_instance() && airvelocity_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_airvelocity() const {
  return _internal_has_airvelocity();
}
inline const ::pulse::cdm::bind::ScalarLengthPerTimeData& EnvironmentalConditionsData::_internal_airvelocity() const {
  const ::pulse::cdm::bind::ScalarLengthPerTimeData* p = airvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarLengthPerTimeData&>(
      ::pulse::cdm::bind::_ScalarLengthPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarLengthPerTimeData& EnvironmentalConditionsData::airvelocity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AirVelocity)
  return _internal_airvelocity();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_airvelocity(
    ::pulse::cdm::bind::ScalarLengthPerTimeData* airvelocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airvelocity_);
  }
  airvelocity_ = airvelocity;
  if (airvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AirVelocity)
}
inline ::pulse::cdm::bind::ScalarLengthPerTimeData* EnvironmentalConditionsData::release_airvelocity() {
  
  ::pulse::cdm::bind::ScalarLengthPerTimeData* temp = airvelocity_;
  airvelocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthPerTimeData* EnvironmentalConditionsData::unsafe_arena_release_airvelocity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.AirVelocity)
  
  ::pulse::cdm::bind::ScalarLengthPerTimeData* temp = airvelocity_;
  airvelocity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarLengthPerTimeData* EnvironmentalConditionsData::_internal_mutable_airvelocity() {
  
  if (airvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarLengthPerTimeData>(GetArena());
    airvelocity_ = p;
  }
  return airvelocity_;
}
inline ::pulse::cdm::bind::ScalarLengthPerTimeData* EnvironmentalConditionsData::mutable_airvelocity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AirVelocity)
  return _internal_mutable_airvelocity();
}
inline void EnvironmentalConditionsData::set_allocated_airvelocity(::pulse::cdm::bind::ScalarLengthPerTimeData* airvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(airvelocity_);
  }
  if (airvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airvelocity)->GetArena();
    if (message_arena != submessage_arena) {
      airvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airvelocity, submessage_arena);
    }
    
  } else {
    
  }
  airvelocity_ = airvelocity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AirVelocity)
}

// .pulse.cdm.bind.ScalarTemperatureData AmbientTemperature = 4;
inline bool EnvironmentalConditionsData::_internal_has_ambienttemperature() const {
  return this != internal_default_instance() && ambienttemperature_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_ambienttemperature() const {
  return _internal_has_ambienttemperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::_internal_ambienttemperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = ambienttemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::ambienttemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AmbientTemperature)
  return _internal_ambienttemperature();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_ambienttemperature(
    ::pulse::cdm::bind::ScalarTemperatureData* ambienttemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature_);
  }
  ambienttemperature_ = ambienttemperature;
  if (ambienttemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AmbientTemperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::release_ambienttemperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = ambienttemperature_;
  ambienttemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::unsafe_arena_release_ambienttemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.AmbientTemperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = ambienttemperature_;
  ambienttemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::_internal_mutable_ambienttemperature() {
  
  if (ambienttemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    ambienttemperature_ = p;
  }
  return ambienttemperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::mutable_ambienttemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AmbientTemperature)
  return _internal_mutable_ambienttemperature();
}
inline void EnvironmentalConditionsData::set_allocated_ambienttemperature(::pulse::cdm::bind::ScalarTemperatureData* ambienttemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature_);
  }
  if (ambienttemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature)->GetArena();
    if (message_arena != submessage_arena) {
      ambienttemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambienttemperature, submessage_arena);
    }
    
  } else {
    
  }
  ambienttemperature_ = ambienttemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AmbientTemperature)
}

// .pulse.cdm.bind.ScalarPressureData AtmosphericPressure = 5;
inline bool EnvironmentalConditionsData::_internal_has_atmosphericpressure() const {
  return this != internal_default_instance() && atmosphericpressure_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_atmosphericpressure() const {
  return _internal_has_atmosphericpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& EnvironmentalConditionsData::_internal_atmosphericpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = atmosphericpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& EnvironmentalConditionsData::atmosphericpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AtmosphericPressure)
  return _internal_atmosphericpressure();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_atmosphericpressure(
    ::pulse::cdm::bind::ScalarPressureData* atmosphericpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(atmosphericpressure_);
  }
  atmosphericpressure_ = atmosphericpressure;
  if (atmosphericpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AtmosphericPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* EnvironmentalConditionsData::release_atmosphericpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = atmosphericpressure_;
  atmosphericpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnvironmentalConditionsData::unsafe_arena_release_atmosphericpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.AtmosphericPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = atmosphericpressure_;
  atmosphericpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnvironmentalConditionsData::_internal_mutable_atmosphericpressure() {
  
  if (atmosphericpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    atmosphericpressure_ = p;
  }
  return atmosphericpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnvironmentalConditionsData::mutable_atmosphericpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AtmosphericPressure)
  return _internal_mutable_atmosphericpressure();
}
inline void EnvironmentalConditionsData::set_allocated_atmosphericpressure(::pulse::cdm::bind::ScalarPressureData* atmosphericpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(atmosphericpressure_);
  }
  if (atmosphericpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(atmosphericpressure)->GetArena();
    if (message_arena != submessage_arena) {
      atmosphericpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atmosphericpressure, submessage_arena);
    }
    
  } else {
    
  }
  atmosphericpressure_ = atmosphericpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.AtmosphericPressure)
}

// .pulse.cdm.bind.ScalarHeatResistanceAreaData ClothingResistance = 6;
inline bool EnvironmentalConditionsData::_internal_has_clothingresistance() const {
  return this != internal_default_instance() && clothingresistance_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_clothingresistance() const {
  return _internal_has_clothingresistance();
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceAreaData& EnvironmentalConditionsData::_internal_clothingresistance() const {
  const ::pulse::cdm::bind::ScalarHeatResistanceAreaData* p = clothingresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatResistanceAreaData&>(
      ::pulse::cdm::bind::_ScalarHeatResistanceAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatResistanceAreaData& EnvironmentalConditionsData::clothingresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.ClothingResistance)
  return _internal_clothingresistance();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_clothingresistance(
    ::pulse::cdm::bind::ScalarHeatResistanceAreaData* clothingresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clothingresistance_);
  }
  clothingresistance_ = clothingresistance;
  if (clothingresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.ClothingResistance)
}
inline ::pulse::cdm::bind::ScalarHeatResistanceAreaData* EnvironmentalConditionsData::release_clothingresistance() {
  
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* temp = clothingresistance_;
  clothingresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceAreaData* EnvironmentalConditionsData::unsafe_arena_release_clothingresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.ClothingResistance)
  
  ::pulse::cdm::bind::ScalarHeatResistanceAreaData* temp = clothingresistance_;
  clothingresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceAreaData* EnvironmentalConditionsData::_internal_mutable_clothingresistance() {
  
  if (clothingresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatResistanceAreaData>(GetArena());
    clothingresistance_ = p;
  }
  return clothingresistance_;
}
inline ::pulse::cdm::bind::ScalarHeatResistanceAreaData* EnvironmentalConditionsData::mutable_clothingresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.ClothingResistance)
  return _internal_mutable_clothingresistance();
}
inline void EnvironmentalConditionsData::set_allocated_clothingresistance(::pulse::cdm::bind::ScalarHeatResistanceAreaData* clothingresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clothingresistance_);
  }
  if (clothingresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clothingresistance)->GetArena();
    if (message_arena != submessage_arena) {
      clothingresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clothingresistance, submessage_arena);
    }
    
  } else {
    
  }
  clothingresistance_ = clothingresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.ClothingResistance)
}

// .pulse.cdm.bind.Scalar0To1Data Emissivity = 7;
inline bool EnvironmentalConditionsData::_internal_has_emissivity() const {
  return this != internal_default_instance() && emissivity_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_emissivity() const {
  return _internal_has_emissivity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnvironmentalConditionsData::_internal_emissivity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = emissivity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnvironmentalConditionsData::emissivity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.Emissivity)
  return _internal_emissivity();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_emissivity(
    ::pulse::cdm::bind::Scalar0To1Data* emissivity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emissivity_);
  }
  emissivity_ = emissivity;
  if (emissivity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.Emissivity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::release_emissivity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = emissivity_;
  emissivity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::unsafe_arena_release_emissivity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.Emissivity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = emissivity_;
  emissivity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::_internal_mutable_emissivity() {
  
  if (emissivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    emissivity_ = p;
  }
  return emissivity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::mutable_emissivity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.Emissivity)
  return _internal_mutable_emissivity();
}
inline void EnvironmentalConditionsData::set_allocated_emissivity(::pulse::cdm::bind::Scalar0To1Data* emissivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emissivity_);
  }
  if (emissivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emissivity)->GetArena();
    if (message_arena != submessage_arena) {
      emissivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emissivity, submessage_arena);
    }
    
  } else {
    
  }
  emissivity_ = emissivity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.Emissivity)
}

// .pulse.cdm.bind.ScalarTemperatureData MeanRadiantTemperature = 8;
inline bool EnvironmentalConditionsData::_internal_has_meanradianttemperature() const {
  return this != internal_default_instance() && meanradianttemperature_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_meanradianttemperature() const {
  return _internal_has_meanradianttemperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::_internal_meanradianttemperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = meanradianttemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::meanradianttemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.MeanRadiantTemperature)
  return _internal_meanradianttemperature();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_meanradianttemperature(
    ::pulse::cdm::bind::ScalarTemperatureData* meanradianttemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanradianttemperature_);
  }
  meanradianttemperature_ = meanradianttemperature;
  if (meanradianttemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.MeanRadiantTemperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::release_meanradianttemperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = meanradianttemperature_;
  meanradianttemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::unsafe_arena_release_meanradianttemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.MeanRadiantTemperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = meanradianttemperature_;
  meanradianttemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::_internal_mutable_meanradianttemperature() {
  
  if (meanradianttemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    meanradianttemperature_ = p;
  }
  return meanradianttemperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::mutable_meanradianttemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.MeanRadiantTemperature)
  return _internal_mutable_meanradianttemperature();
}
inline void EnvironmentalConditionsData::set_allocated_meanradianttemperature(::pulse::cdm::bind::ScalarTemperatureData* meanradianttemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanradianttemperature_);
  }
  if (meanradianttemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanradianttemperature)->GetArena();
    if (message_arena != submessage_arena) {
      meanradianttemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanradianttemperature, submessage_arena);
    }
    
  } else {
    
  }
  meanradianttemperature_ = meanradianttemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.MeanRadiantTemperature)
}

// .pulse.cdm.bind.Scalar0To1Data RelativeHumidity = 9;
inline bool EnvironmentalConditionsData::_internal_has_relativehumidity() const {
  return this != internal_default_instance() && relativehumidity_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_relativehumidity() const {
  return _internal_has_relativehumidity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnvironmentalConditionsData::_internal_relativehumidity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = relativehumidity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnvironmentalConditionsData::relativehumidity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.RelativeHumidity)
  return _internal_relativehumidity();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_relativehumidity(
    ::pulse::cdm::bind::Scalar0To1Data* relativehumidity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativehumidity_);
  }
  relativehumidity_ = relativehumidity;
  if (relativehumidity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.RelativeHumidity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::release_relativehumidity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = relativehumidity_;
  relativehumidity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::unsafe_arena_release_relativehumidity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.RelativeHumidity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = relativehumidity_;
  relativehumidity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::_internal_mutable_relativehumidity() {
  
  if (relativehumidity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    relativehumidity_ = p;
  }
  return relativehumidity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnvironmentalConditionsData::mutable_relativehumidity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.RelativeHumidity)
  return _internal_mutable_relativehumidity();
}
inline void EnvironmentalConditionsData::set_allocated_relativehumidity(::pulse::cdm::bind::Scalar0To1Data* relativehumidity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativehumidity_);
  }
  if (relativehumidity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relativehumidity)->GetArena();
    if (message_arena != submessage_arena) {
      relativehumidity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relativehumidity, submessage_arena);
    }
    
  } else {
    
  }
  relativehumidity_ = relativehumidity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.RelativeHumidity)
}

// .pulse.cdm.bind.ScalarTemperatureData RespirationAmbientTemperature = 10;
inline bool EnvironmentalConditionsData::_internal_has_respirationambienttemperature() const {
  return this != internal_default_instance() && respirationambienttemperature_ != nullptr;
}
inline bool EnvironmentalConditionsData::has_respirationambienttemperature() const {
  return _internal_has_respirationambienttemperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::_internal_respirationambienttemperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = respirationambienttemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnvironmentalConditionsData::respirationambienttemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.RespirationAmbientTemperature)
  return _internal_respirationambienttemperature();
}
inline void EnvironmentalConditionsData::unsafe_arena_set_allocated_respirationambienttemperature(
    ::pulse::cdm::bind::ScalarTemperatureData* respirationambienttemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationambienttemperature_);
  }
  respirationambienttemperature_ = respirationambienttemperature;
  if (respirationambienttemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.RespirationAmbientTemperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::release_respirationambienttemperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = respirationambienttemperature_;
  respirationambienttemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::unsafe_arena_release_respirationambienttemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentalConditionsData.RespirationAmbientTemperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = respirationambienttemperature_;
  respirationambienttemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::_internal_mutable_respirationambienttemperature() {
  
  if (respirationambienttemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    respirationambienttemperature_ = p;
  }
  return respirationambienttemperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnvironmentalConditionsData::mutable_respirationambienttemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.RespirationAmbientTemperature)
  return _internal_mutable_respirationambienttemperature();
}
inline void EnvironmentalConditionsData::set_allocated_respirationambienttemperature(::pulse::cdm::bind::ScalarTemperatureData* respirationambienttemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationambienttemperature_);
  }
  if (respirationambienttemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationambienttemperature)->GetArena();
    if (message_arena != submessage_arena) {
      respirationambienttemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationambienttemperature, submessage_arena);
    }
    
  } else {
    
  }
  respirationambienttemperature_ = respirationambienttemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentalConditionsData.RespirationAmbientTemperature)
}

// repeated .pulse.cdm.bind.SubstanceFractionData AmbientGas = 11;
inline int EnvironmentalConditionsData::_internal_ambientgas_size() const {
  return ambientgas_.size();
}
inline int EnvironmentalConditionsData::ambientgas_size() const {
  return _internal_ambientgas_size();
}
inline ::pulse::cdm::bind::SubstanceFractionData* EnvironmentalConditionsData::mutable_ambientgas(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AmbientGas)
  return ambientgas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >*
EnvironmentalConditionsData::mutable_ambientgas() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.EnvironmentalConditionsData.AmbientGas)
  return &ambientgas_;
}
inline const ::pulse::cdm::bind::SubstanceFractionData& EnvironmentalConditionsData::_internal_ambientgas(int index) const {
  return ambientgas_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceFractionData& EnvironmentalConditionsData::ambientgas(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AmbientGas)
  return _internal_ambientgas(index);
}
inline ::pulse::cdm::bind::SubstanceFractionData* EnvironmentalConditionsData::_internal_add_ambientgas() {
  return ambientgas_.Add();
}
inline ::pulse::cdm::bind::SubstanceFractionData* EnvironmentalConditionsData::add_ambientgas() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.EnvironmentalConditionsData.AmbientGas)
  return _internal_add_ambientgas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >&
EnvironmentalConditionsData::ambientgas() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.EnvironmentalConditionsData.AmbientGas)
  return ambientgas_;
}

// repeated .pulse.cdm.bind.SubstanceConcentrationData AmbientAerosol = 12;
inline int EnvironmentalConditionsData::_internal_ambientaerosol_size() const {
  return ambientaerosol_.size();
}
inline int EnvironmentalConditionsData::ambientaerosol_size() const {
  return _internal_ambientaerosol_size();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* EnvironmentalConditionsData::mutable_ambientaerosol(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentalConditionsData.AmbientAerosol)
  return ambientaerosol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
EnvironmentalConditionsData::mutable_ambientaerosol() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.EnvironmentalConditionsData.AmbientAerosol)
  return &ambientaerosol_;
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& EnvironmentalConditionsData::_internal_ambientaerosol(int index) const {
  return ambientaerosol_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& EnvironmentalConditionsData::ambientaerosol(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentalConditionsData.AmbientAerosol)
  return _internal_ambientaerosol(index);
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* EnvironmentalConditionsData::_internal_add_ambientaerosol() {
  return ambientaerosol_.Add();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* EnvironmentalConditionsData::add_ambientaerosol() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.EnvironmentalConditionsData.AmbientAerosol)
  return _internal_add_ambientaerosol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
EnvironmentalConditionsData::ambientaerosol() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.EnvironmentalConditionsData.AmbientAerosol)
  return ambientaerosol_;
}

// -------------------------------------------------------------------

// ActiveConditioningData

// .pulse.cdm.bind.ScalarPowerData Power = 1;
inline bool ActiveConditioningData::_internal_has_power() const {
  return this != internal_default_instance() && power_ != nullptr;
}
inline bool ActiveConditioningData::has_power() const {
  return _internal_has_power();
}
inline const ::pulse::cdm::bind::ScalarPowerData& ActiveConditioningData::_internal_power() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = power_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& ActiveConditioningData::power() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveConditioningData.Power)
  return _internal_power();
}
inline void ActiveConditioningData::unsafe_arena_set_allocated_power(
    ::pulse::cdm::bind::ScalarPowerData* power) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_);
  }
  power_ = power;
  if (power) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ActiveConditioningData.Power)
}
inline ::pulse::cdm::bind::ScalarPowerData* ActiveConditioningData::release_power() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = power_;
  power_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ActiveConditioningData::unsafe_arena_release_power() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ActiveConditioningData.Power)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = power_;
  power_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* ActiveConditioningData::_internal_mutable_power() {
  
  if (power_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    power_ = p;
  }
  return power_;
}
inline ::pulse::cdm::bind::ScalarPowerData* ActiveConditioningData::mutable_power() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActiveConditioningData.Power)
  return _internal_mutable_power();
}
inline void ActiveConditioningData::set_allocated_power(::pulse::cdm::bind::ScalarPowerData* power) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_);
  }
  if (power) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power)->GetArena();
    if (message_arena != submessage_arena) {
      power = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ActiveConditioningData.Power)
}

// .pulse.cdm.bind.ScalarAreaData SurfaceArea = 2;
inline bool ActiveConditioningData::_internal_has_surfacearea() const {
  return this != internal_default_instance() && surfacearea_ != nullptr;
}
inline bool ActiveConditioningData::has_surfacearea() const {
  return _internal_has_surfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& ActiveConditioningData::_internal_surfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = surfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ActiveConditioningData::surfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveConditioningData.SurfaceArea)
  return _internal_surfacearea();
}
inline void ActiveConditioningData::unsafe_arena_set_allocated_surfacearea(
    ::pulse::cdm::bind::ScalarAreaData* surfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea_);
  }
  surfacearea_ = surfacearea;
  if (surfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ActiveConditioningData.SurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* ActiveConditioningData::release_surfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = surfacearea_;
  surfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ActiveConditioningData::unsafe_arena_release_surfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ActiveConditioningData.SurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = surfacearea_;
  surfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* ActiveConditioningData::_internal_mutable_surfacearea() {
  
  if (surfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    surfacearea_ = p;
  }
  return surfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ActiveConditioningData::mutable_surfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActiveConditioningData.SurfaceArea)
  return _internal_mutable_surfacearea();
}
inline void ActiveConditioningData::set_allocated_surfacearea(::pulse::cdm::bind::ScalarAreaData* surfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea_);
  }
  if (surfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      surfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfacearea, submessage_arena);
    }
    
  } else {
    
  }
  surfacearea_ = surfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ActiveConditioningData.SurfaceArea)
}

// .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 3;
inline bool ActiveConditioningData::_internal_has_surfaceareafraction() const {
  return this != internal_default_instance() && surfaceareafraction_ != nullptr;
}
inline bool ActiveConditioningData::has_surfaceareafraction() const {
  return _internal_has_surfaceareafraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ActiveConditioningData::_internal_surfaceareafraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = surfaceareafraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ActiveConditioningData::surfaceareafraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ActiveConditioningData.SurfaceAreaFraction)
  return _internal_surfaceareafraction();
}
inline void ActiveConditioningData::unsafe_arena_set_allocated_surfaceareafraction(
    ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction_);
  }
  surfaceareafraction_ = surfaceareafraction;
  if (surfaceareafraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ActiveConditioningData.SurfaceAreaFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ActiveConditioningData::release_surfaceareafraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = surfaceareafraction_;
  surfaceareafraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ActiveConditioningData::unsafe_arena_release_surfaceareafraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ActiveConditioningData.SurfaceAreaFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = surfaceareafraction_;
  surfaceareafraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ActiveConditioningData::_internal_mutable_surfaceareafraction() {
  
  if (surfaceareafraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    surfaceareafraction_ = p;
  }
  return surfaceareafraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ActiveConditioningData::mutable_surfaceareafraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ActiveConditioningData.SurfaceAreaFraction)
  return _internal_mutable_surfaceareafraction();
}
inline void ActiveConditioningData::set_allocated_surfaceareafraction(::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction_);
  }
  if (surfaceareafraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction)->GetArena();
    if (message_arena != submessage_arena) {
      surfaceareafraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfaceareafraction, submessage_arena);
    }
    
  } else {
    
  }
  surfaceareafraction_ = surfaceareafraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ActiveConditioningData.SurfaceAreaFraction)
}

// -------------------------------------------------------------------

// AppliedTemperatureData

// .pulse.cdm.bind.eSwitch State = 1;
inline void AppliedTemperatureData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch AppliedTemperatureData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch AppliedTemperatureData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AppliedTemperatureData.State)
  return _internal_state();
}
inline void AppliedTemperatureData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void AppliedTemperatureData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AppliedTemperatureData.State)
}

// .pulse.cdm.bind.ScalarTemperatureData Temperature = 2;
inline bool AppliedTemperatureData::_internal_has_temperature() const {
  return this != internal_default_instance() && temperature_ != nullptr;
}
inline bool AppliedTemperatureData::has_temperature() const {
  return _internal_has_temperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& AppliedTemperatureData::_internal_temperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = temperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& AppliedTemperatureData::temperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AppliedTemperatureData.Temperature)
  return _internal_temperature();
}
inline void AppliedTemperatureData::unsafe_arena_set_allocated_temperature(
    ::pulse::cdm::bind::ScalarTemperatureData* temperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature_);
  }
  temperature_ = temperature;
  if (temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AppliedTemperatureData.Temperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* AppliedTemperatureData::release_temperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* AppliedTemperatureData::unsafe_arena_release_temperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AppliedTemperatureData.Temperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = temperature_;
  temperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* AppliedTemperatureData::_internal_mutable_temperature() {
  
  if (temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    temperature_ = p;
  }
  return temperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* AppliedTemperatureData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AppliedTemperatureData.Temperature)
  return _internal_mutable_temperature();
}
inline void AppliedTemperatureData::set_allocated_temperature(::pulse::cdm::bind::ScalarTemperatureData* temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature_);
  }
  if (temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temperature)->GetArena();
    if (message_arena != submessage_arena) {
      temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature, submessage_arena);
    }
    
  } else {
    
  }
  temperature_ = temperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AppliedTemperatureData.Temperature)
}

// .pulse.cdm.bind.ScalarAreaData SurfaceArea = 3;
inline bool AppliedTemperatureData::_internal_has_surfacearea() const {
  return this != internal_default_instance() && surfacearea_ != nullptr;
}
inline bool AppliedTemperatureData::has_surfacearea() const {
  return _internal_has_surfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& AppliedTemperatureData::_internal_surfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = surfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& AppliedTemperatureData::surfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AppliedTemperatureData.SurfaceArea)
  return _internal_surfacearea();
}
inline void AppliedTemperatureData::unsafe_arena_set_allocated_surfacearea(
    ::pulse::cdm::bind::ScalarAreaData* surfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea_);
  }
  surfacearea_ = surfacearea;
  if (surfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AppliedTemperatureData.SurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* AppliedTemperatureData::release_surfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = surfacearea_;
  surfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* AppliedTemperatureData::unsafe_arena_release_surfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AppliedTemperatureData.SurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = surfacearea_;
  surfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* AppliedTemperatureData::_internal_mutable_surfacearea() {
  
  if (surfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    surfacearea_ = p;
  }
  return surfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* AppliedTemperatureData::mutable_surfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AppliedTemperatureData.SurfaceArea)
  return _internal_mutable_surfacearea();
}
inline void AppliedTemperatureData::set_allocated_surfacearea(::pulse::cdm::bind::ScalarAreaData* surfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea_);
  }
  if (surfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      surfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfacearea, submessage_arena);
    }
    
  } else {
    
  }
  surfacearea_ = surfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AppliedTemperatureData.SurfaceArea)
}

// .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 4;
inline bool AppliedTemperatureData::_internal_has_surfaceareafraction() const {
  return this != internal_default_instance() && surfaceareafraction_ != nullptr;
}
inline bool AppliedTemperatureData::has_surfaceareafraction() const {
  return _internal_has_surfaceareafraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AppliedTemperatureData::_internal_surfaceareafraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = surfaceareafraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AppliedTemperatureData::surfaceareafraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AppliedTemperatureData.SurfaceAreaFraction)
  return _internal_surfaceareafraction();
}
inline void AppliedTemperatureData::unsafe_arena_set_allocated_surfaceareafraction(
    ::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction_);
  }
  surfaceareafraction_ = surfaceareafraction;
  if (surfaceareafraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AppliedTemperatureData.SurfaceAreaFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AppliedTemperatureData::release_surfaceareafraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = surfaceareafraction_;
  surfaceareafraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AppliedTemperatureData::unsafe_arena_release_surfaceareafraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AppliedTemperatureData.SurfaceAreaFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = surfaceareafraction_;
  surfaceareafraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AppliedTemperatureData::_internal_mutable_surfaceareafraction() {
  
  if (surfaceareafraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    surfaceareafraction_ = p;
  }
  return surfaceareafraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AppliedTemperatureData::mutable_surfaceareafraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AppliedTemperatureData.SurfaceAreaFraction)
  return _internal_mutable_surfaceareafraction();
}
inline void AppliedTemperatureData::set_allocated_surfaceareafraction(::pulse::cdm::bind::Scalar0To1Data* surfaceareafraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction_);
  }
  if (surfaceareafraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(surfaceareafraction)->GetArena();
    if (message_arena != submessage_arena) {
      surfaceareafraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surfaceareafraction, submessage_arena);
    }
    
  } else {
    
  }
  surfaceareafraction_ = surfaceareafraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AppliedTemperatureData.SurfaceAreaFraction)
}

// -------------------------------------------------------------------

// EnvironmentData

// .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 1;
inline bool EnvironmentData::_internal_has_environmentalconditions() const {
  return this != internal_default_instance() && environmentalconditions_ != nullptr;
}
inline bool EnvironmentData::has_environmentalconditions() const {
  return _internal_has_environmentalconditions();
}
inline void EnvironmentData::clear_environmentalconditions() {
  if (GetArena() == nullptr && environmentalconditions_ != nullptr) {
    delete environmentalconditions_;
  }
  environmentalconditions_ = nullptr;
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& EnvironmentData::_internal_environmentalconditions() const {
  const ::pulse::cdm::bind::EnvironmentalConditionsData* p = environmentalconditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EnvironmentalConditionsData&>(
      ::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_);
}
inline const ::pulse::cdm::bind::EnvironmentalConditionsData& EnvironmentData::environmentalconditions() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.EnvironmentalConditions)
  return _internal_environmentalconditions();
}
inline void EnvironmentData::unsafe_arena_set_allocated_environmentalconditions(
    ::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmentalconditions_);
  }
  environmentalconditions_ = environmentalconditions;
  if (environmentalconditions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.EnvironmentalConditions)
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* EnvironmentData::release_environmentalconditions() {
  
  ::pulse::cdm::bind::EnvironmentalConditionsData* temp = environmentalconditions_;
  environmentalconditions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* EnvironmentData::unsafe_arena_release_environmentalconditions() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.EnvironmentalConditions)
  
  ::pulse::cdm::bind::EnvironmentalConditionsData* temp = environmentalconditions_;
  environmentalconditions_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* EnvironmentData::_internal_mutable_environmentalconditions() {
  
  if (environmentalconditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EnvironmentalConditionsData>(GetArena());
    environmentalconditions_ = p;
  }
  return environmentalconditions_;
}
inline ::pulse::cdm::bind::EnvironmentalConditionsData* EnvironmentData::mutable_environmentalconditions() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.EnvironmentalConditions)
  return _internal_mutable_environmentalconditions();
}
inline void EnvironmentData::set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete environmentalconditions_;
  }
  if (environmentalconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(environmentalconditions);
    if (message_arena != submessage_arena) {
      environmentalconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentalconditions, submessage_arena);
    }
    
  } else {
    
  }
  environmentalconditions_ = environmentalconditions;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.EnvironmentalConditions)
}

// .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
inline bool EnvironmentData::_internal_has_activeheating() const {
  return this != internal_default_instance() && activeheating_ != nullptr;
}
inline bool EnvironmentData::has_activeheating() const {
  return _internal_has_activeheating();
}
inline void EnvironmentData::clear_activeheating() {
  if (GetArena() == nullptr && activeheating_ != nullptr) {
    delete activeheating_;
  }
  activeheating_ = nullptr;
}
inline const ::pulse::cdm::bind::ActiveConditioningData& EnvironmentData::_internal_activeheating() const {
  const ::pulse::cdm::bind::ActiveConditioningData* p = activeheating_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActiveConditioningData&>(
      ::pulse::cdm::bind::_ActiveConditioningData_default_instance_);
}
inline const ::pulse::cdm::bind::ActiveConditioningData& EnvironmentData::activeheating() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.ActiveHeating)
  return _internal_activeheating();
}
inline void EnvironmentData::unsafe_arena_set_allocated_activeheating(
    ::pulse::cdm::bind::ActiveConditioningData* activeheating) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activeheating_);
  }
  activeheating_ = activeheating;
  if (activeheating) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.ActiveHeating)
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::release_activeheating() {
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activeheating_;
  activeheating_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::unsafe_arena_release_activeheating() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.ActiveHeating)
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activeheating_;
  activeheating_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::_internal_mutable_activeheating() {
  
  if (activeheating_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActiveConditioningData>(GetArena());
    activeheating_ = p;
  }
  return activeheating_;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::mutable_activeheating() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.ActiveHeating)
  return _internal_mutable_activeheating();
}
inline void EnvironmentData::set_allocated_activeheating(::pulse::cdm::bind::ActiveConditioningData* activeheating) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete activeheating_;
  }
  if (activeheating) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activeheating);
    if (message_arena != submessage_arena) {
      activeheating = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activeheating, submessage_arena);
    }
    
  } else {
    
  }
  activeheating_ = activeheating;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.ActiveHeating)
}

// .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
inline bool EnvironmentData::_internal_has_activecooling() const {
  return this != internal_default_instance() && activecooling_ != nullptr;
}
inline bool EnvironmentData::has_activecooling() const {
  return _internal_has_activecooling();
}
inline void EnvironmentData::clear_activecooling() {
  if (GetArena() == nullptr && activecooling_ != nullptr) {
    delete activecooling_;
  }
  activecooling_ = nullptr;
}
inline const ::pulse::cdm::bind::ActiveConditioningData& EnvironmentData::_internal_activecooling() const {
  const ::pulse::cdm::bind::ActiveConditioningData* p = activecooling_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActiveConditioningData&>(
      ::pulse::cdm::bind::_ActiveConditioningData_default_instance_);
}
inline const ::pulse::cdm::bind::ActiveConditioningData& EnvironmentData::activecooling() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.ActiveCooling)
  return _internal_activecooling();
}
inline void EnvironmentData::unsafe_arena_set_allocated_activecooling(
    ::pulse::cdm::bind::ActiveConditioningData* activecooling) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activecooling_);
  }
  activecooling_ = activecooling;
  if (activecooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.ActiveCooling)
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::release_activecooling() {
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activecooling_;
  activecooling_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::unsafe_arena_release_activecooling() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.ActiveCooling)
  
  ::pulse::cdm::bind::ActiveConditioningData* temp = activecooling_;
  activecooling_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::_internal_mutable_activecooling() {
  
  if (activecooling_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActiveConditioningData>(GetArena());
    activecooling_ = p;
  }
  return activecooling_;
}
inline ::pulse::cdm::bind::ActiveConditioningData* EnvironmentData::mutable_activecooling() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.ActiveCooling)
  return _internal_mutable_activecooling();
}
inline void EnvironmentData::set_allocated_activecooling(::pulse::cdm::bind::ActiveConditioningData* activecooling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete activecooling_;
  }
  if (activecooling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activecooling);
    if (message_arena != submessage_arena) {
      activecooling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activecooling, submessage_arena);
    }
    
  } else {
    
  }
  activecooling_ = activecooling;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.ActiveCooling)
}

// .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
inline bool EnvironmentData::_internal_has_appliedtemperature() const {
  return this != internal_default_instance() && appliedtemperature_ != nullptr;
}
inline bool EnvironmentData::has_appliedtemperature() const {
  return _internal_has_appliedtemperature();
}
inline void EnvironmentData::clear_appliedtemperature() {
  if (GetArena() == nullptr && appliedtemperature_ != nullptr) {
    delete appliedtemperature_;
  }
  appliedtemperature_ = nullptr;
}
inline const ::pulse::cdm::bind::AppliedTemperatureData& EnvironmentData::_internal_appliedtemperature() const {
  const ::pulse::cdm::bind::AppliedTemperatureData* p = appliedtemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AppliedTemperatureData&>(
      ::pulse::cdm::bind::_AppliedTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::AppliedTemperatureData& EnvironmentData::appliedtemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.AppliedTemperature)
  return _internal_appliedtemperature();
}
inline void EnvironmentData::unsafe_arena_set_allocated_appliedtemperature(
    ::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(appliedtemperature_);
  }
  appliedtemperature_ = appliedtemperature;
  if (appliedtemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.AppliedTemperature)
}
inline ::pulse::cdm::bind::AppliedTemperatureData* EnvironmentData::release_appliedtemperature() {
  
  ::pulse::cdm::bind::AppliedTemperatureData* temp = appliedtemperature_;
  appliedtemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* EnvironmentData::unsafe_arena_release_appliedtemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.AppliedTemperature)
  
  ::pulse::cdm::bind::AppliedTemperatureData* temp = appliedtemperature_;
  appliedtemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* EnvironmentData::_internal_mutable_appliedtemperature() {
  
  if (appliedtemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AppliedTemperatureData>(GetArena());
    appliedtemperature_ = p;
  }
  return appliedtemperature_;
}
inline ::pulse::cdm::bind::AppliedTemperatureData* EnvironmentData::mutable_appliedtemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.AppliedTemperature)
  return _internal_mutable_appliedtemperature();
}
inline void EnvironmentData::set_allocated_appliedtemperature(::pulse::cdm::bind::AppliedTemperatureData* appliedtemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete appliedtemperature_;
  }
  if (appliedtemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appliedtemperature);
    if (message_arena != submessage_arena) {
      appliedtemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appliedtemperature, submessage_arena);
    }
    
  } else {
    
  }
  appliedtemperature_ = appliedtemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.AppliedTemperature)
}

// .pulse.cdm.bind.ScalarPowerData ConvectiveHeatLoss = 5;
inline bool EnvironmentData::_internal_has_convectiveheatloss() const {
  return this != internal_default_instance() && convectiveheatloss_ != nullptr;
}
inline bool EnvironmentData::has_convectiveheatloss() const {
  return _internal_has_convectiveheatloss();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::_internal_convectiveheatloss() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = convectiveheatloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::convectiveheatloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.ConvectiveHeatLoss)
  return _internal_convectiveheatloss();
}
inline void EnvironmentData::unsafe_arena_set_allocated_convectiveheatloss(
    ::pulse::cdm::bind::ScalarPowerData* convectiveheatloss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheatloss_);
  }
  convectiveheatloss_ = convectiveheatloss;
  if (convectiveheatloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.ConvectiveHeatLoss)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::release_convectiveheatloss() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = convectiveheatloss_;
  convectiveheatloss_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::unsafe_arena_release_convectiveheatloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.ConvectiveHeatLoss)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = convectiveheatloss_;
  convectiveheatloss_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::_internal_mutable_convectiveheatloss() {
  
  if (convectiveheatloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    convectiveheatloss_ = p;
  }
  return convectiveheatloss_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::mutable_convectiveheatloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.ConvectiveHeatLoss)
  return _internal_mutable_convectiveheatloss();
}
inline void EnvironmentData::set_allocated_convectiveheatloss(::pulse::cdm::bind::ScalarPowerData* convectiveheatloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheatloss_);
  }
  if (convectiveheatloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheatloss)->GetArena();
    if (message_arena != submessage_arena) {
      convectiveheatloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convectiveheatloss, submessage_arena);
    }
    
  } else {
    
  }
  convectiveheatloss_ = convectiveheatloss;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.ConvectiveHeatLoss)
}

// .pulse.cdm.bind.ScalarHeatConductancePerAreaData ConvectiveHeatTranferCoefficient = 6;
inline bool EnvironmentData::_internal_has_convectiveheattranfercoefficient() const {
  return this != internal_default_instance() && convectiveheattranfercoefficient_ != nullptr;
}
inline bool EnvironmentData::has_convectiveheattranfercoefficient() const {
  return _internal_has_convectiveheattranfercoefficient();
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::_internal_convectiveheattranfercoefficient() const {
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* p = convectiveheattranfercoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&>(
      ::pulse::cdm::bind::_ScalarHeatConductancePerAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::convectiveheattranfercoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.ConvectiveHeatTranferCoefficient)
  return _internal_convectiveheattranfercoefficient();
}
inline void EnvironmentData::unsafe_arena_set_allocated_convectiveheattranfercoefficient(
    ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* convectiveheattranfercoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheattranfercoefficient_);
  }
  convectiveheattranfercoefficient_ = convectiveheattranfercoefficient;
  if (convectiveheattranfercoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.ConvectiveHeatTranferCoefficient)
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::release_convectiveheattranfercoefficient() {
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = convectiveheattranfercoefficient_;
  convectiveheattranfercoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::unsafe_arena_release_convectiveheattranfercoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.ConvectiveHeatTranferCoefficient)
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = convectiveheattranfercoefficient_;
  convectiveheattranfercoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::_internal_mutable_convectiveheattranfercoefficient() {
  
  if (convectiveheattranfercoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductancePerAreaData>(GetArena());
    convectiveheattranfercoefficient_ = p;
  }
  return convectiveheattranfercoefficient_;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::mutable_convectiveheattranfercoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.ConvectiveHeatTranferCoefficient)
  return _internal_mutable_convectiveheattranfercoefficient();
}
inline void EnvironmentData::set_allocated_convectiveheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* convectiveheattranfercoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheattranfercoefficient_);
  }
  if (convectiveheattranfercoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convectiveheattranfercoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      convectiveheattranfercoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convectiveheattranfercoefficient, submessage_arena);
    }
    
  } else {
    
  }
  convectiveheattranfercoefficient_ = convectiveheattranfercoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.ConvectiveHeatTranferCoefficient)
}

// .pulse.cdm.bind.ScalarPowerData EvaporativeHeatLoss = 7;
inline bool EnvironmentData::_internal_has_evaporativeheatloss() const {
  return this != internal_default_instance() && evaporativeheatloss_ != nullptr;
}
inline bool EnvironmentData::has_evaporativeheatloss() const {
  return _internal_has_evaporativeheatloss();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::_internal_evaporativeheatloss() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = evaporativeheatloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::evaporativeheatloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.EvaporativeHeatLoss)
  return _internal_evaporativeheatloss();
}
inline void EnvironmentData::unsafe_arena_set_allocated_evaporativeheatloss(
    ::pulse::cdm::bind::ScalarPowerData* evaporativeheatloss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheatloss_);
  }
  evaporativeheatloss_ = evaporativeheatloss;
  if (evaporativeheatloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.EvaporativeHeatLoss)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::release_evaporativeheatloss() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = evaporativeheatloss_;
  evaporativeheatloss_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::unsafe_arena_release_evaporativeheatloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.EvaporativeHeatLoss)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = evaporativeheatloss_;
  evaporativeheatloss_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::_internal_mutable_evaporativeheatloss() {
  
  if (evaporativeheatloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    evaporativeheatloss_ = p;
  }
  return evaporativeheatloss_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::mutable_evaporativeheatloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.EvaporativeHeatLoss)
  return _internal_mutable_evaporativeheatloss();
}
inline void EnvironmentData::set_allocated_evaporativeheatloss(::pulse::cdm::bind::ScalarPowerData* evaporativeheatloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheatloss_);
  }
  if (evaporativeheatloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheatloss)->GetArena();
    if (message_arena != submessage_arena) {
      evaporativeheatloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evaporativeheatloss, submessage_arena);
    }
    
  } else {
    
  }
  evaporativeheatloss_ = evaporativeheatloss;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.EvaporativeHeatLoss)
}

// .pulse.cdm.bind.ScalarHeatConductancePerAreaData EvaporativeHeatTranferCoefficient = 8;
inline bool EnvironmentData::_internal_has_evaporativeheattranfercoefficient() const {
  return this != internal_default_instance() && evaporativeheattranfercoefficient_ != nullptr;
}
inline bool EnvironmentData::has_evaporativeheattranfercoefficient() const {
  return _internal_has_evaporativeheattranfercoefficient();
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::_internal_evaporativeheattranfercoefficient() const {
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* p = evaporativeheattranfercoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&>(
      ::pulse::cdm::bind::_ScalarHeatConductancePerAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::evaporativeheattranfercoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.EvaporativeHeatTranferCoefficient)
  return _internal_evaporativeheattranfercoefficient();
}
inline void EnvironmentData::unsafe_arena_set_allocated_evaporativeheattranfercoefficient(
    ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* evaporativeheattranfercoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheattranfercoefficient_);
  }
  evaporativeheattranfercoefficient_ = evaporativeheattranfercoefficient;
  if (evaporativeheattranfercoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.EvaporativeHeatTranferCoefficient)
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::release_evaporativeheattranfercoefficient() {
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = evaporativeheattranfercoefficient_;
  evaporativeheattranfercoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::unsafe_arena_release_evaporativeheattranfercoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.EvaporativeHeatTranferCoefficient)
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = evaporativeheattranfercoefficient_;
  evaporativeheattranfercoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::_internal_mutable_evaporativeheattranfercoefficient() {
  
  if (evaporativeheattranfercoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductancePerAreaData>(GetArena());
    evaporativeheattranfercoefficient_ = p;
  }
  return evaporativeheattranfercoefficient_;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::mutable_evaporativeheattranfercoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.EvaporativeHeatTranferCoefficient)
  return _internal_mutable_evaporativeheattranfercoefficient();
}
inline void EnvironmentData::set_allocated_evaporativeheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* evaporativeheattranfercoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheattranfercoefficient_);
  }
  if (evaporativeheattranfercoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evaporativeheattranfercoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      evaporativeheattranfercoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evaporativeheattranfercoefficient, submessage_arena);
    }
    
  } else {
    
  }
  evaporativeheattranfercoefficient_ = evaporativeheattranfercoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.EvaporativeHeatTranferCoefficient)
}

// .pulse.cdm.bind.ScalarPowerData RadiativeHeatLoss = 9;
inline bool EnvironmentData::_internal_has_radiativeheatloss() const {
  return this != internal_default_instance() && radiativeheatloss_ != nullptr;
}
inline bool EnvironmentData::has_radiativeheatloss() const {
  return _internal_has_radiativeheatloss();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::_internal_radiativeheatloss() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = radiativeheatloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::radiativeheatloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.RadiativeHeatLoss)
  return _internal_radiativeheatloss();
}
inline void EnvironmentData::unsafe_arena_set_allocated_radiativeheatloss(
    ::pulse::cdm::bind::ScalarPowerData* radiativeheatloss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheatloss_);
  }
  radiativeheatloss_ = radiativeheatloss;
  if (radiativeheatloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.RadiativeHeatLoss)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::release_radiativeheatloss() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = radiativeheatloss_;
  radiativeheatloss_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::unsafe_arena_release_radiativeheatloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.RadiativeHeatLoss)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = radiativeheatloss_;
  radiativeheatloss_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::_internal_mutable_radiativeheatloss() {
  
  if (radiativeheatloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    radiativeheatloss_ = p;
  }
  return radiativeheatloss_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::mutable_radiativeheatloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.RadiativeHeatLoss)
  return _internal_mutable_radiativeheatloss();
}
inline void EnvironmentData::set_allocated_radiativeheatloss(::pulse::cdm::bind::ScalarPowerData* radiativeheatloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheatloss_);
  }
  if (radiativeheatloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheatloss)->GetArena();
    if (message_arena != submessage_arena) {
      radiativeheatloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiativeheatloss, submessage_arena);
    }
    
  } else {
    
  }
  radiativeheatloss_ = radiativeheatloss;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.RadiativeHeatLoss)
}

// .pulse.cdm.bind.ScalarHeatConductancePerAreaData RadiativeHeatTranferCoefficient = 10;
inline bool EnvironmentData::_internal_has_radiativeheattranfercoefficient() const {
  return this != internal_default_instance() && radiativeheattranfercoefficient_ != nullptr;
}
inline bool EnvironmentData::has_radiativeheattranfercoefficient() const {
  return _internal_has_radiativeheattranfercoefficient();
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::_internal_radiativeheattranfercoefficient() const {
  const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* p = radiativeheattranfercoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&>(
      ::pulse::cdm::bind::_ScalarHeatConductancePerAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& EnvironmentData::radiativeheattranfercoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.RadiativeHeatTranferCoefficient)
  return _internal_radiativeheattranfercoefficient();
}
inline void EnvironmentData::unsafe_arena_set_allocated_radiativeheattranfercoefficient(
    ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* radiativeheattranfercoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheattranfercoefficient_);
  }
  radiativeheattranfercoefficient_ = radiativeheattranfercoefficient;
  if (radiativeheattranfercoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.RadiativeHeatTranferCoefficient)
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::release_radiativeheattranfercoefficient() {
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = radiativeheattranfercoefficient_;
  radiativeheattranfercoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::unsafe_arena_release_radiativeheattranfercoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.RadiativeHeatTranferCoefficient)
  
  ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* temp = radiativeheattranfercoefficient_;
  radiativeheattranfercoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::_internal_mutable_radiativeheattranfercoefficient() {
  
  if (radiativeheattranfercoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatConductancePerAreaData>(GetArena());
    radiativeheattranfercoefficient_ = p;
  }
  return radiativeheattranfercoefficient_;
}
inline ::pulse::cdm::bind::ScalarHeatConductancePerAreaData* EnvironmentData::mutable_radiativeheattranfercoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.RadiativeHeatTranferCoefficient)
  return _internal_mutable_radiativeheattranfercoefficient();
}
inline void EnvironmentData::set_allocated_radiativeheattranfercoefficient(::pulse::cdm::bind::ScalarHeatConductancePerAreaData* radiativeheattranfercoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheattranfercoefficient_);
  }
  if (radiativeheattranfercoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiativeheattranfercoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      radiativeheattranfercoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiativeheattranfercoefficient, submessage_arena);
    }
    
  } else {
    
  }
  radiativeheattranfercoefficient_ = radiativeheattranfercoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.RadiativeHeatTranferCoefficient)
}

// .pulse.cdm.bind.ScalarPowerData RespirationHeatLoss = 11;
inline bool EnvironmentData::_internal_has_respirationheatloss() const {
  return this != internal_default_instance() && respirationheatloss_ != nullptr;
}
inline bool EnvironmentData::has_respirationheatloss() const {
  return _internal_has_respirationheatloss();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::_internal_respirationheatloss() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = respirationheatloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::respirationheatloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.RespirationHeatLoss)
  return _internal_respirationheatloss();
}
inline void EnvironmentData::unsafe_arena_set_allocated_respirationheatloss(
    ::pulse::cdm::bind::ScalarPowerData* respirationheatloss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationheatloss_);
  }
  respirationheatloss_ = respirationheatloss;
  if (respirationheatloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.RespirationHeatLoss)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::release_respirationheatloss() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = respirationheatloss_;
  respirationheatloss_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::unsafe_arena_release_respirationheatloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.RespirationHeatLoss)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = respirationheatloss_;
  respirationheatloss_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::_internal_mutable_respirationheatloss() {
  
  if (respirationheatloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    respirationheatloss_ = p;
  }
  return respirationheatloss_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::mutable_respirationheatloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.RespirationHeatLoss)
  return _internal_mutable_respirationheatloss();
}
inline void EnvironmentData::set_allocated_respirationheatloss(::pulse::cdm::bind::ScalarPowerData* respirationheatloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationheatloss_);
  }
  if (respirationheatloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationheatloss)->GetArena();
    if (message_arena != submessage_arena) {
      respirationheatloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationheatloss, submessage_arena);
    }
    
  } else {
    
  }
  respirationheatloss_ = respirationheatloss;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.RespirationHeatLoss)
}

// .pulse.cdm.bind.ScalarPowerData SkinHeatLoss = 12;
inline bool EnvironmentData::_internal_has_skinheatloss() const {
  return this != internal_default_instance() && skinheatloss_ != nullptr;
}
inline bool EnvironmentData::has_skinheatloss() const {
  return _internal_has_skinheatloss();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::_internal_skinheatloss() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = skinheatloss_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnvironmentData::skinheatloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnvironmentData.SkinHeatLoss)
  return _internal_skinheatloss();
}
inline void EnvironmentData::unsafe_arena_set_allocated_skinheatloss(
    ::pulse::cdm::bind::ScalarPowerData* skinheatloss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skinheatloss_);
  }
  skinheatloss_ = skinheatloss;
  if (skinheatloss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnvironmentData.SkinHeatLoss)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::release_skinheatloss() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = skinheatloss_;
  skinheatloss_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::unsafe_arena_release_skinheatloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnvironmentData.SkinHeatLoss)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = skinheatloss_;
  skinheatloss_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::_internal_mutable_skinheatloss() {
  
  if (skinheatloss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    skinheatloss_ = p;
  }
  return skinheatloss_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnvironmentData::mutable_skinheatloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnvironmentData.SkinHeatLoss)
  return _internal_mutable_skinheatloss();
}
inline void EnvironmentData::set_allocated_skinheatloss(::pulse::cdm::bind::ScalarPowerData* skinheatloss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skinheatloss_);
  }
  if (skinheatloss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skinheatloss)->GetArena();
    if (message_arena != submessage_arena) {
      skinheatloss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skinheatloss, submessage_arena);
    }
    
  } else {
    
  }
  skinheatloss_ = skinheatloss;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnvironmentData.SkinHeatLoss)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType>() {
  return ::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEnvironment_2eproto
