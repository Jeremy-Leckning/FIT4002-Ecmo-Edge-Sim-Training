// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Patient.proto

#include "pulse/cdm/bind/Patient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class PatientDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientData> _instance;
} _PatientData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto}, {
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarLengthData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarFrequencyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPatient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatient_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPatient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, sex_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, age_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, weight_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, height_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, bodydensity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, bodyfatfraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, leanbodymass_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, idealbodyweight_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, alveolisurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, rightlungratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, skinsurfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, basalmetabolicrate_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, bloodvolumebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, diastolicarterialpressurebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, heartratebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, meanarterialpressurebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, respirationratebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, systolicarterialpressurebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, tidalvolumebaseline_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, heartratemaximum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, heartrateminimum_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, expiratoryreservevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, functionalresidualcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, inspiratorycapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, inspiratoryreservevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, residualvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, totallungcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientData, vitalcapacity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::PatientData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034pulse/cdm/bind/Patient.proto\022\016pulse.cd"
  "m.bind\032\037pulse/cdm/bind/Properties.proto\""
  "\354\r\n\013PatientData\022\014\n\004Name\030\001 \001(\t\022-\n\003Sex\030\002 \001"
  "(\0162 .pulse.cdm.bind.PatientData.eSex\022+\n\003"
  "Age\030\003 \001(\0132\036.pulse.cdm.bind.ScalarTimeDat"
  "a\022.\n\006Weight\030\004 \001(\0132\036.pulse.cdm.bind.Scala"
  "rMassData\0220\n\006Height\030\005 \001(\0132 .pulse.cdm.bi"
  "nd.ScalarLengthData\022<\n\013BodyDensity\030\006 \001(\013"
  "2\'.pulse.cdm.bind.ScalarMassPerVolumeDat"
  "a\0227\n\017BodyFatFraction\030\007 \001(\0132\036.pulse.cdm.b"
  "ind.Scalar0To1Data\0224\n\014LeanBodyMass\030\010 \001(\013"
  "2\036.pulse.cdm.bind.ScalarMassData\0227\n\017Idea"
  "lBodyWeight\030\035 \001(\0132\036.pulse.cdm.bind.Scala"
  "rMassData\022:\n\022AlveoliSurfaceArea\030\t \001(\0132\036."
  "pulse.cdm.bind.ScalarAreaData\0226\n\016RightLu"
  "ngRatio\030\n \001(\0132\036.pulse.cdm.bind.Scalar0To"
  "1Data\0227\n\017SkinSurfaceArea\030\013 \001(\0132\036.pulse.c"
  "dm.bind.ScalarAreaData\022;\n\022BasalMetabolic"
  "Rate\030\014 \001(\0132\037.pulse.cdm.bind.ScalarPowerD"
  "ata\022=\n\023BloodVolumeBaseline\030\r \001(\0132 .pulse"
  ".cdm.bind.ScalarVolumeData\022M\n!DiastolicA"
  "rterialPressureBaseline\030\016 \001(\0132\".pulse.cd"
  "m.bind.ScalarPressureData\022>\n\021HeartRateBa"
  "seline\030\017 \001(\0132#.pulse.cdm.bind.ScalarFreq"
  "uencyData\022H\n\034MeanArterialPressureBaselin"
  "e\030\020 \001(\0132\".pulse.cdm.bind.ScalarPressureD"
  "ata\022D\n\027RespirationRateBaseline\030\021 \001(\0132#.p"
  "ulse.cdm.bind.ScalarFrequencyData\022L\n Sys"
  "tolicArterialPressureBaseline\030\022 \001(\0132\".pu"
  "lse.cdm.bind.ScalarPressureData\022=\n\023Tidal"
  "VolumeBaseline\030\023 \001(\0132 .pulse.cdm.bind.Sc"
  "alarVolumeData\022=\n\020HeartRateMaximum\030\024 \001(\013"
  "2#.pulse.cdm.bind.ScalarFrequencyData\022=\n"
  "\020HeartRateMinimum\030\025 \001(\0132#.pulse.cdm.bind"
  ".ScalarFrequencyData\022A\n\027ExpiratoryReserv"
  "eVolume\030\026 \001(\0132 .pulse.cdm.bind.ScalarVol"
  "umeData\022D\n\032FunctionalResidualCapacity\030\027 "
  "\001(\0132 .pulse.cdm.bind.ScalarVolumeData\022=\n"
  "\023InspiratoryCapacity\030\030 \001(\0132 .pulse.cdm.b"
  "ind.ScalarVolumeData\022B\n\030InspiratoryReser"
  "veVolume\030\031 \001(\0132 .pulse.cdm.bind.ScalarVo"
  "lumeData\0228\n\016ResidualVolume\030\032 \001(\0132 .pulse"
  ".cdm.bind.ScalarVolumeData\022;\n\021TotalLungC"
  "apacity\030\033 \001(\0132 .pulse.cdm.bind.ScalarVol"
  "umeData\0227\n\rVitalCapacity\030\034 \001(\0132 .pulse.c"
  "dm.bind.ScalarVolumeData\"\034\n\004eSex\022\010\n\004Male"
  "\020\000\022\n\n\006Female\020\001B/\n\032com.kitware.pulse.cdm."
  "bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_sccs[1] = {
  &scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatient_2eproto, "pulse/cdm/bind/Patient.proto", 1911,
  &descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPatient_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPatient_2eproto, 1, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatient_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPatient_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PatientData_eSex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatient_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatient_2eproto[0];
}
bool PatientData_eSex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PatientData_eSex PatientData::Male;
constexpr PatientData_eSex PatientData::Female;
constexpr PatientData_eSex PatientData::eSex_MIN;
constexpr PatientData_eSex PatientData::eSex_MAX;
constexpr int PatientData::eSex_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PatientData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTimeData& age(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& weight(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarLengthData& height(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& bodydensity(const PatientData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& bodyfatfraction(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& leanbodymass(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& idealbodyweight(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& alveolisurfacearea(const PatientData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightlungratio(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& skinsurfacearea(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& basalmetabolicrate(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& bloodvolumebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& diastolicarterialpressurebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& heartratebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& meanarterialpressurebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& respirationratebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& systolicarterialpressurebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& tidalvolumebaseline(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& heartratemaximum(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarFrequencyData& heartrateminimum(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& expiratoryreservevolume(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& functionalresidualcapacity(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& inspiratorycapacity(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& inspiratoryreservevolume(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& residualvolume(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totallungcapacity(const PatientData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& vitalcapacity(const PatientData* msg);
};

const ::pulse::cdm::bind::ScalarTimeData&
PatientData::_Internal::age(const PatientData* msg) {
  return *msg->age_;
}
const ::pulse::cdm::bind::ScalarMassData&
PatientData::_Internal::weight(const PatientData* msg) {
  return *msg->weight_;
}
const ::pulse::cdm::bind::ScalarLengthData&
PatientData::_Internal::height(const PatientData* msg) {
  return *msg->height_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
PatientData::_Internal::bodydensity(const PatientData* msg) {
  return *msg->bodydensity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
PatientData::_Internal::bodyfatfraction(const PatientData* msg) {
  return *msg->bodyfatfraction_;
}
const ::pulse::cdm::bind::ScalarMassData&
PatientData::_Internal::leanbodymass(const PatientData* msg) {
  return *msg->leanbodymass_;
}
const ::pulse::cdm::bind::ScalarMassData&
PatientData::_Internal::idealbodyweight(const PatientData* msg) {
  return *msg->idealbodyweight_;
}
const ::pulse::cdm::bind::ScalarAreaData&
PatientData::_Internal::alveolisurfacearea(const PatientData* msg) {
  return *msg->alveolisurfacearea_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
PatientData::_Internal::rightlungratio(const PatientData* msg) {
  return *msg->rightlungratio_;
}
const ::pulse::cdm::bind::ScalarAreaData&
PatientData::_Internal::skinsurfacearea(const PatientData* msg) {
  return *msg->skinsurfacearea_;
}
const ::pulse::cdm::bind::ScalarPowerData&
PatientData::_Internal::basalmetabolicrate(const PatientData* msg) {
  return *msg->basalmetabolicrate_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::bloodvolumebaseline(const PatientData* msg) {
  return *msg->bloodvolumebaseline_;
}
const ::pulse::cdm::bind::ScalarPressureData&
PatientData::_Internal::diastolicarterialpressurebaseline(const PatientData* msg) {
  return *msg->diastolicarterialpressurebaseline_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
PatientData::_Internal::heartratebaseline(const PatientData* msg) {
  return *msg->heartratebaseline_;
}
const ::pulse::cdm::bind::ScalarPressureData&
PatientData::_Internal::meanarterialpressurebaseline(const PatientData* msg) {
  return *msg->meanarterialpressurebaseline_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
PatientData::_Internal::respirationratebaseline(const PatientData* msg) {
  return *msg->respirationratebaseline_;
}
const ::pulse::cdm::bind::ScalarPressureData&
PatientData::_Internal::systolicarterialpressurebaseline(const PatientData* msg) {
  return *msg->systolicarterialpressurebaseline_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::tidalvolumebaseline(const PatientData* msg) {
  return *msg->tidalvolumebaseline_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
PatientData::_Internal::heartratemaximum(const PatientData* msg) {
  return *msg->heartratemaximum_;
}
const ::pulse::cdm::bind::ScalarFrequencyData&
PatientData::_Internal::heartrateminimum(const PatientData* msg) {
  return *msg->heartrateminimum_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::expiratoryreservevolume(const PatientData* msg) {
  return *msg->expiratoryreservevolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::functionalresidualcapacity(const PatientData* msg) {
  return *msg->functionalresidualcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::inspiratorycapacity(const PatientData* msg) {
  return *msg->inspiratorycapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::inspiratoryreservevolume(const PatientData* msg) {
  return *msg->inspiratoryreservevolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::residualvolume(const PatientData* msg) {
  return *msg->residualvolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::totallungcapacity(const PatientData* msg) {
  return *msg->totallungcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PatientData::_Internal::vitalcapacity(const PatientData* msg) {
  return *msg->vitalcapacity_;
}
void PatientData::clear_age() {
  if (GetArena() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
}
void PatientData::clear_weight() {
  if (GetArena() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
}
void PatientData::clear_height() {
  if (GetArena() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
}
void PatientData::clear_bodydensity() {
  if (GetArena() == nullptr && bodydensity_ != nullptr) {
    delete bodydensity_;
  }
  bodydensity_ = nullptr;
}
void PatientData::clear_bodyfatfraction() {
  if (GetArena() == nullptr && bodyfatfraction_ != nullptr) {
    delete bodyfatfraction_;
  }
  bodyfatfraction_ = nullptr;
}
void PatientData::clear_leanbodymass() {
  if (GetArena() == nullptr && leanbodymass_ != nullptr) {
    delete leanbodymass_;
  }
  leanbodymass_ = nullptr;
}
void PatientData::clear_idealbodyweight() {
  if (GetArena() == nullptr && idealbodyweight_ != nullptr) {
    delete idealbodyweight_;
  }
  idealbodyweight_ = nullptr;
}
void PatientData::clear_alveolisurfacearea() {
  if (GetArena() == nullptr && alveolisurfacearea_ != nullptr) {
    delete alveolisurfacearea_;
  }
  alveolisurfacearea_ = nullptr;
}
void PatientData::clear_rightlungratio() {
  if (GetArena() == nullptr && rightlungratio_ != nullptr) {
    delete rightlungratio_;
  }
  rightlungratio_ = nullptr;
}
void PatientData::clear_skinsurfacearea() {
  if (GetArena() == nullptr && skinsurfacearea_ != nullptr) {
    delete skinsurfacearea_;
  }
  skinsurfacearea_ = nullptr;
}
void PatientData::clear_basalmetabolicrate() {
  if (GetArena() == nullptr && basalmetabolicrate_ != nullptr) {
    delete basalmetabolicrate_;
  }
  basalmetabolicrate_ = nullptr;
}
void PatientData::clear_bloodvolumebaseline() {
  if (GetArena() == nullptr && bloodvolumebaseline_ != nullptr) {
    delete bloodvolumebaseline_;
  }
  bloodvolumebaseline_ = nullptr;
}
void PatientData::clear_diastolicarterialpressurebaseline() {
  if (GetArena() == nullptr && diastolicarterialpressurebaseline_ != nullptr) {
    delete diastolicarterialpressurebaseline_;
  }
  diastolicarterialpressurebaseline_ = nullptr;
}
void PatientData::clear_heartratebaseline() {
  if (GetArena() == nullptr && heartratebaseline_ != nullptr) {
    delete heartratebaseline_;
  }
  heartratebaseline_ = nullptr;
}
void PatientData::clear_meanarterialpressurebaseline() {
  if (GetArena() == nullptr && meanarterialpressurebaseline_ != nullptr) {
    delete meanarterialpressurebaseline_;
  }
  meanarterialpressurebaseline_ = nullptr;
}
void PatientData::clear_respirationratebaseline() {
  if (GetArena() == nullptr && respirationratebaseline_ != nullptr) {
    delete respirationratebaseline_;
  }
  respirationratebaseline_ = nullptr;
}
void PatientData::clear_systolicarterialpressurebaseline() {
  if (GetArena() == nullptr && systolicarterialpressurebaseline_ != nullptr) {
    delete systolicarterialpressurebaseline_;
  }
  systolicarterialpressurebaseline_ = nullptr;
}
void PatientData::clear_tidalvolumebaseline() {
  if (GetArena() == nullptr && tidalvolumebaseline_ != nullptr) {
    delete tidalvolumebaseline_;
  }
  tidalvolumebaseline_ = nullptr;
}
void PatientData::clear_heartratemaximum() {
  if (GetArena() == nullptr && heartratemaximum_ != nullptr) {
    delete heartratemaximum_;
  }
  heartratemaximum_ = nullptr;
}
void PatientData::clear_heartrateminimum() {
  if (GetArena() == nullptr && heartrateminimum_ != nullptr) {
    delete heartrateminimum_;
  }
  heartrateminimum_ = nullptr;
}
void PatientData::clear_expiratoryreservevolume() {
  if (GetArena() == nullptr && expiratoryreservevolume_ != nullptr) {
    delete expiratoryreservevolume_;
  }
  expiratoryreservevolume_ = nullptr;
}
void PatientData::clear_functionalresidualcapacity() {
  if (GetArena() == nullptr && functionalresidualcapacity_ != nullptr) {
    delete functionalresidualcapacity_;
  }
  functionalresidualcapacity_ = nullptr;
}
void PatientData::clear_inspiratorycapacity() {
  if (GetArena() == nullptr && inspiratorycapacity_ != nullptr) {
    delete inspiratorycapacity_;
  }
  inspiratorycapacity_ = nullptr;
}
void PatientData::clear_inspiratoryreservevolume() {
  if (GetArena() == nullptr && inspiratoryreservevolume_ != nullptr) {
    delete inspiratoryreservevolume_;
  }
  inspiratoryreservevolume_ = nullptr;
}
void PatientData::clear_residualvolume() {
  if (GetArena() == nullptr && residualvolume_ != nullptr) {
    delete residualvolume_;
  }
  residualvolume_ = nullptr;
}
void PatientData::clear_totallungcapacity() {
  if (GetArena() == nullptr && totallungcapacity_ != nullptr) {
    delete totallungcapacity_;
  }
  totallungcapacity_ = nullptr;
}
void PatientData::clear_vitalcapacity() {
  if (GetArena() == nullptr && vitalcapacity_ != nullptr) {
    delete vitalcapacity_;
  }
  vitalcapacity_ = nullptr;
}
PatientData::PatientData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PatientData)
}
PatientData::PatientData(const PatientData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_age()) {
    age_ = new ::pulse::cdm::bind::ScalarTimeData(*from.age_);
  } else {
    age_ = nullptr;
  }
  if (from._internal_has_weight()) {
    weight_ = new ::pulse::cdm::bind::ScalarMassData(*from.weight_);
  } else {
    weight_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new ::pulse::cdm::bind::ScalarLengthData(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_bodydensity()) {
    bodydensity_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.bodydensity_);
  } else {
    bodydensity_ = nullptr;
  }
  if (from._internal_has_bodyfatfraction()) {
    bodyfatfraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.bodyfatfraction_);
  } else {
    bodyfatfraction_ = nullptr;
  }
  if (from._internal_has_leanbodymass()) {
    leanbodymass_ = new ::pulse::cdm::bind::ScalarMassData(*from.leanbodymass_);
  } else {
    leanbodymass_ = nullptr;
  }
  if (from._internal_has_alveolisurfacearea()) {
    alveolisurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.alveolisurfacearea_);
  } else {
    alveolisurfacearea_ = nullptr;
  }
  if (from._internal_has_rightlungratio()) {
    rightlungratio_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightlungratio_);
  } else {
    rightlungratio_ = nullptr;
  }
  if (from._internal_has_skinsurfacearea()) {
    skinsurfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.skinsurfacearea_);
  } else {
    skinsurfacearea_ = nullptr;
  }
  if (from._internal_has_basalmetabolicrate()) {
    basalmetabolicrate_ = new ::pulse::cdm::bind::ScalarPowerData(*from.basalmetabolicrate_);
  } else {
    basalmetabolicrate_ = nullptr;
  }
  if (from._internal_has_bloodvolumebaseline()) {
    bloodvolumebaseline_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.bloodvolumebaseline_);
  } else {
    bloodvolumebaseline_ = nullptr;
  }
  if (from._internal_has_diastolicarterialpressurebaseline()) {
    diastolicarterialpressurebaseline_ = new ::pulse::cdm::bind::ScalarPressureData(*from.diastolicarterialpressurebaseline_);
  } else {
    diastolicarterialpressurebaseline_ = nullptr;
  }
  if (from._internal_has_heartratebaseline()) {
    heartratebaseline_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.heartratebaseline_);
  } else {
    heartratebaseline_ = nullptr;
  }
  if (from._internal_has_meanarterialpressurebaseline()) {
    meanarterialpressurebaseline_ = new ::pulse::cdm::bind::ScalarPressureData(*from.meanarterialpressurebaseline_);
  } else {
    meanarterialpressurebaseline_ = nullptr;
  }
  if (from._internal_has_respirationratebaseline()) {
    respirationratebaseline_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.respirationratebaseline_);
  } else {
    respirationratebaseline_ = nullptr;
  }
  if (from._internal_has_systolicarterialpressurebaseline()) {
    systolicarterialpressurebaseline_ = new ::pulse::cdm::bind::ScalarPressureData(*from.systolicarterialpressurebaseline_);
  } else {
    systolicarterialpressurebaseline_ = nullptr;
  }
  if (from._internal_has_tidalvolumebaseline()) {
    tidalvolumebaseline_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.tidalvolumebaseline_);
  } else {
    tidalvolumebaseline_ = nullptr;
  }
  if (from._internal_has_heartratemaximum()) {
    heartratemaximum_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.heartratemaximum_);
  } else {
    heartratemaximum_ = nullptr;
  }
  if (from._internal_has_heartrateminimum()) {
    heartrateminimum_ = new ::pulse::cdm::bind::ScalarFrequencyData(*from.heartrateminimum_);
  } else {
    heartrateminimum_ = nullptr;
  }
  if (from._internal_has_expiratoryreservevolume()) {
    expiratoryreservevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.expiratoryreservevolume_);
  } else {
    expiratoryreservevolume_ = nullptr;
  }
  if (from._internal_has_functionalresidualcapacity()) {
    functionalresidualcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.functionalresidualcapacity_);
  } else {
    functionalresidualcapacity_ = nullptr;
  }
  if (from._internal_has_inspiratorycapacity()) {
    inspiratorycapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.inspiratorycapacity_);
  } else {
    inspiratorycapacity_ = nullptr;
  }
  if (from._internal_has_inspiratoryreservevolume()) {
    inspiratoryreservevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.inspiratoryreservevolume_);
  } else {
    inspiratoryreservevolume_ = nullptr;
  }
  if (from._internal_has_residualvolume()) {
    residualvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.residualvolume_);
  } else {
    residualvolume_ = nullptr;
  }
  if (from._internal_has_totallungcapacity()) {
    totallungcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totallungcapacity_);
  } else {
    totallungcapacity_ = nullptr;
  }
  if (from._internal_has_vitalcapacity()) {
    vitalcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.vitalcapacity_);
  } else {
    vitalcapacity_ = nullptr;
  }
  if (from._internal_has_idealbodyweight()) {
    idealbodyweight_ = new ::pulse::cdm::bind::ScalarMassData(*from.idealbodyweight_);
  } else {
    idealbodyweight_ = nullptr;
  }
  sex_ = from.sex_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientData)
}

void PatientData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&age_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&age_)) + sizeof(sex_));
}

PatientData::~PatientData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete age_;
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete bodydensity_;
  if (this != internal_default_instance()) delete bodyfatfraction_;
  if (this != internal_default_instance()) delete leanbodymass_;
  if (this != internal_default_instance()) delete alveolisurfacearea_;
  if (this != internal_default_instance()) delete rightlungratio_;
  if (this != internal_default_instance()) delete skinsurfacearea_;
  if (this != internal_default_instance()) delete basalmetabolicrate_;
  if (this != internal_default_instance()) delete bloodvolumebaseline_;
  if (this != internal_default_instance()) delete diastolicarterialpressurebaseline_;
  if (this != internal_default_instance()) delete heartratebaseline_;
  if (this != internal_default_instance()) delete meanarterialpressurebaseline_;
  if (this != internal_default_instance()) delete respirationratebaseline_;
  if (this != internal_default_instance()) delete systolicarterialpressurebaseline_;
  if (this != internal_default_instance()) delete tidalvolumebaseline_;
  if (this != internal_default_instance()) delete heartratemaximum_;
  if (this != internal_default_instance()) delete heartrateminimum_;
  if (this != internal_default_instance()) delete expiratoryreservevolume_;
  if (this != internal_default_instance()) delete functionalresidualcapacity_;
  if (this != internal_default_instance()) delete inspiratorycapacity_;
  if (this != internal_default_instance()) delete inspiratoryreservevolume_;
  if (this != internal_default_instance()) delete residualvolume_;
  if (this != internal_default_instance()) delete totallungcapacity_;
  if (this != internal_default_instance()) delete vitalcapacity_;
  if (this != internal_default_instance()) delete idealbodyweight_;
}

void PatientData::ArenaDtor(void* object) {
  PatientData* _this = reinterpret_cast< PatientData* >(object);
  (void)_this;
}
void PatientData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientData& PatientData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientData_pulse_2fcdm_2fbind_2fPatient_2eproto.base);
  return *internal_default_instance();
}


void PatientData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
  if (GetArena() == nullptr && weight_ != nullptr) {
    delete weight_;
  }
  weight_ = nullptr;
  if (GetArena() == nullptr && height_ != nullptr) {
    delete height_;
  }
  height_ = nullptr;
  if (GetArena() == nullptr && bodydensity_ != nullptr) {
    delete bodydensity_;
  }
  bodydensity_ = nullptr;
  if (GetArena() == nullptr && bodyfatfraction_ != nullptr) {
    delete bodyfatfraction_;
  }
  bodyfatfraction_ = nullptr;
  if (GetArena() == nullptr && leanbodymass_ != nullptr) {
    delete leanbodymass_;
  }
  leanbodymass_ = nullptr;
  if (GetArena() == nullptr && alveolisurfacearea_ != nullptr) {
    delete alveolisurfacearea_;
  }
  alveolisurfacearea_ = nullptr;
  if (GetArena() == nullptr && rightlungratio_ != nullptr) {
    delete rightlungratio_;
  }
  rightlungratio_ = nullptr;
  if (GetArena() == nullptr && skinsurfacearea_ != nullptr) {
    delete skinsurfacearea_;
  }
  skinsurfacearea_ = nullptr;
  if (GetArena() == nullptr && basalmetabolicrate_ != nullptr) {
    delete basalmetabolicrate_;
  }
  basalmetabolicrate_ = nullptr;
  if (GetArena() == nullptr && bloodvolumebaseline_ != nullptr) {
    delete bloodvolumebaseline_;
  }
  bloodvolumebaseline_ = nullptr;
  if (GetArena() == nullptr && diastolicarterialpressurebaseline_ != nullptr) {
    delete diastolicarterialpressurebaseline_;
  }
  diastolicarterialpressurebaseline_ = nullptr;
  if (GetArena() == nullptr && heartratebaseline_ != nullptr) {
    delete heartratebaseline_;
  }
  heartratebaseline_ = nullptr;
  if (GetArena() == nullptr && meanarterialpressurebaseline_ != nullptr) {
    delete meanarterialpressurebaseline_;
  }
  meanarterialpressurebaseline_ = nullptr;
  if (GetArena() == nullptr && respirationratebaseline_ != nullptr) {
    delete respirationratebaseline_;
  }
  respirationratebaseline_ = nullptr;
  if (GetArena() == nullptr && systolicarterialpressurebaseline_ != nullptr) {
    delete systolicarterialpressurebaseline_;
  }
  systolicarterialpressurebaseline_ = nullptr;
  if (GetArena() == nullptr && tidalvolumebaseline_ != nullptr) {
    delete tidalvolumebaseline_;
  }
  tidalvolumebaseline_ = nullptr;
  if (GetArena() == nullptr && heartratemaximum_ != nullptr) {
    delete heartratemaximum_;
  }
  heartratemaximum_ = nullptr;
  if (GetArena() == nullptr && heartrateminimum_ != nullptr) {
    delete heartrateminimum_;
  }
  heartrateminimum_ = nullptr;
  if (GetArena() == nullptr && expiratoryreservevolume_ != nullptr) {
    delete expiratoryreservevolume_;
  }
  expiratoryreservevolume_ = nullptr;
  if (GetArena() == nullptr && functionalresidualcapacity_ != nullptr) {
    delete functionalresidualcapacity_;
  }
  functionalresidualcapacity_ = nullptr;
  if (GetArena() == nullptr && inspiratorycapacity_ != nullptr) {
    delete inspiratorycapacity_;
  }
  inspiratorycapacity_ = nullptr;
  if (GetArena() == nullptr && inspiratoryreservevolume_ != nullptr) {
    delete inspiratoryreservevolume_;
  }
  inspiratoryreservevolume_ = nullptr;
  if (GetArena() == nullptr && residualvolume_ != nullptr) {
    delete residualvolume_;
  }
  residualvolume_ = nullptr;
  if (GetArena() == nullptr && totallungcapacity_ != nullptr) {
    delete totallungcapacity_;
  }
  totallungcapacity_ = nullptr;
  if (GetArena() == nullptr && vitalcapacity_ != nullptr) {
    delete vitalcapacity_;
  }
  vitalcapacity_ = nullptr;
  if (GetArena() == nullptr && idealbodyweight_ != nullptr) {
    delete idealbodyweight_;
  }
  idealbodyweight_ = nullptr;
  sex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.PatientData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PatientData.eSex Sex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sex(static_cast<::pulse::cdm::bind::PatientData_eSex>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData Age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData Weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarLengthData Height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData BodyDensity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodydensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data BodyFatFraction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyfatfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData LeanBodyMass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leanbodymass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData AlveoliSurfaceArea = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_alveolisurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightLungRatio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightlungratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData SkinSurfaceArea = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_skinsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData BasalMetabolicRate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_basalmetabolicrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData BloodVolumeBaseline = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloodvolumebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressureBaseline = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_diastolicarterialpressurebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData HeartRateBaseline = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartratebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData MeanArterialPressureBaseline = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanarterialpressurebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData RespirationRateBaseline = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationratebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressureBaseline = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_systolicarterialpressurebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TidalVolumeBaseline = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tidalvolumebaseline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData HeartRateMaximum = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartratemaximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarFrequencyData HeartRateMinimum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartrateminimum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryreservevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionalresidualcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratorycapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryreservevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_residualvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_totallungcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_vitalcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData IdealBodyWeight = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_idealbodyweight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.PatientData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .pulse.cdm.bind.PatientData.eSex Sex = 2;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sex(), target);
  }

  // .pulse.cdm.bind.ScalarTimeData Age = 3;
  if (this->has_age()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::age(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData Weight = 4;
  if (this->has_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weight(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarLengthData Height = 5;
  if (this->has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::height(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BodyDensity = 6;
  if (this->has_bodydensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bodydensity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data BodyFatFraction = 7;
  if (this->has_bodyfatfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bodyfatfraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData LeanBodyMass = 8;
  if (this->has_leanbodymass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leanbodymass(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData AlveoliSurfaceArea = 9;
  if (this->has_alveolisurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::alveolisurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungRatio = 10;
  if (this->has_rightlungratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rightlungratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData SkinSurfaceArea = 11;
  if (this->has_skinsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::skinsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData BasalMetabolicRate = 12;
  if (this->has_basalmetabolicrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::basalmetabolicrate(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData BloodVolumeBaseline = 13;
  if (this->has_bloodvolumebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::bloodvolumebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressureBaseline = 14;
  if (this->has_diastolicarterialpressurebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::diastolicarterialpressurebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateBaseline = 15;
  if (this->has_heartratebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::heartratebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressureBaseline = 16;
  if (this->has_meanarterialpressurebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::meanarterialpressurebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateBaseline = 17;
  if (this->has_respirationratebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::respirationratebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressureBaseline = 18;
  if (this->has_systolicarterialpressurebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::systolicarterialpressurebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeBaseline = 19;
  if (this->has_tidalvolumebaseline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::tidalvolumebaseline(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMaximum = 20;
  if (this->has_heartratemaximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::heartratemaximum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMinimum = 21;
  if (this->has_heartrateminimum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::heartrateminimum(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 22;
  if (this->has_expiratoryreservevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::expiratoryreservevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 23;
  if (this->has_functionalresidualcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::functionalresidualcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 24;
  if (this->has_inspiratorycapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::inspiratorycapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 25;
  if (this->has_inspiratoryreservevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::inspiratoryreservevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 26;
  if (this->has_residualvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::residualvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 27;
  if (this->has_totallungcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::totallungcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 28;
  if (this->has_vitalcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::vitalcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData IdealBodyWeight = 29;
  if (this->has_idealbodyweight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::idealbodyweight(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientData)
  return target;
}

size_t PatientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pulse.cdm.bind.ScalarTimeData Age = 3;
  if (this->has_age()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *age_);
  }

  // .pulse.cdm.bind.ScalarMassData Weight = 4;
  if (this->has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *weight_);
  }

  // .pulse.cdm.bind.ScalarLengthData Height = 5;
  if (this->has_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *height_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BodyDensity = 6;
  if (this->has_bodydensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bodydensity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data BodyFatFraction = 7;
  if (this->has_bodyfatfraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bodyfatfraction_);
  }

  // .pulse.cdm.bind.ScalarMassData LeanBodyMass = 8;
  if (this->has_leanbodymass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leanbodymass_);
  }

  // .pulse.cdm.bind.ScalarAreaData AlveoliSurfaceArea = 9;
  if (this->has_alveolisurfacearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alveolisurfacearea_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungRatio = 10;
  if (this->has_rightlungratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightlungratio_);
  }

  // .pulse.cdm.bind.ScalarAreaData SkinSurfaceArea = 11;
  if (this->has_skinsurfacearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skinsurfacearea_);
  }

  // .pulse.cdm.bind.ScalarPowerData BasalMetabolicRate = 12;
  if (this->has_basalmetabolicrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *basalmetabolicrate_);
  }

  // .pulse.cdm.bind.ScalarVolumeData BloodVolumeBaseline = 13;
  if (this->has_bloodvolumebaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bloodvolumebaseline_);
  }

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressureBaseline = 14;
  if (this->has_diastolicarterialpressurebaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diastolicarterialpressurebaseline_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateBaseline = 15;
  if (this->has_heartratebaseline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartratebaseline_);
  }

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressureBaseline = 16;
  if (this->has_meanarterialpressurebaseline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanarterialpressurebaseline_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateBaseline = 17;
  if (this->has_respirationratebaseline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationratebaseline_);
  }

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressureBaseline = 18;
  if (this->has_systolicarterialpressurebaseline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systolicarterialpressurebaseline_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeBaseline = 19;
  if (this->has_tidalvolumebaseline()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tidalvolumebaseline_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMaximum = 20;
  if (this->has_heartratemaximum()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartratemaximum_);
  }

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateMinimum = 21;
  if (this->has_heartrateminimum()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartrateminimum_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 22;
  if (this->has_expiratoryreservevolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiratoryreservevolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 23;
  if (this->has_functionalresidualcapacity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *functionalresidualcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 24;
  if (this->has_inspiratorycapacity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratorycapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 25;
  if (this->has_inspiratoryreservevolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratoryreservevolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 26;
  if (this->has_residualvolume()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *residualvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 27;
  if (this->has_totallungcapacity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totallungcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 28;
  if (this->has_vitalcapacity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vitalcapacity_);
  }

  // .pulse.cdm.bind.ScalarMassData IdealBodyWeight = 29;
  if (this->has_idealbodyweight()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *idealbodyweight_);
  }

  // .pulse.cdm.bind.PatientData.eSex Sex = 2;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientData)
    MergeFrom(*source);
  }
}

void PatientData::MergeFrom(const PatientData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_age()) {
    _internal_mutable_age()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_age());
  }
  if (from.has_weight()) {
    _internal_mutable_weight()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_weight());
  }
  if (from.has_height()) {
    _internal_mutable_height()->::pulse::cdm::bind::ScalarLengthData::MergeFrom(from._internal_height());
  }
  if (from.has_bodydensity()) {
    _internal_mutable_bodydensity()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_bodydensity());
  }
  if (from.has_bodyfatfraction()) {
    _internal_mutable_bodyfatfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_bodyfatfraction());
  }
  if (from.has_leanbodymass()) {
    _internal_mutable_leanbodymass()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_leanbodymass());
  }
  if (from.has_alveolisurfacearea()) {
    _internal_mutable_alveolisurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_alveolisurfacearea());
  }
  if (from.has_rightlungratio()) {
    _internal_mutable_rightlungratio()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightlungratio());
  }
  if (from.has_skinsurfacearea()) {
    _internal_mutable_skinsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_skinsurfacearea());
  }
  if (from.has_basalmetabolicrate()) {
    _internal_mutable_basalmetabolicrate()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_basalmetabolicrate());
  }
  if (from.has_bloodvolumebaseline()) {
    _internal_mutable_bloodvolumebaseline()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_bloodvolumebaseline());
  }
  if (from.has_diastolicarterialpressurebaseline()) {
    _internal_mutable_diastolicarterialpressurebaseline()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_diastolicarterialpressurebaseline());
  }
  if (from.has_heartratebaseline()) {
    _internal_mutable_heartratebaseline()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_heartratebaseline());
  }
  if (from.has_meanarterialpressurebaseline()) {
    _internal_mutable_meanarterialpressurebaseline()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_meanarterialpressurebaseline());
  }
  if (from.has_respirationratebaseline()) {
    _internal_mutable_respirationratebaseline()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_respirationratebaseline());
  }
  if (from.has_systolicarterialpressurebaseline()) {
    _internal_mutable_systolicarterialpressurebaseline()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_systolicarterialpressurebaseline());
  }
  if (from.has_tidalvolumebaseline()) {
    _internal_mutable_tidalvolumebaseline()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_tidalvolumebaseline());
  }
  if (from.has_heartratemaximum()) {
    _internal_mutable_heartratemaximum()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_heartratemaximum());
  }
  if (from.has_heartrateminimum()) {
    _internal_mutable_heartrateminimum()->::pulse::cdm::bind::ScalarFrequencyData::MergeFrom(from._internal_heartrateminimum());
  }
  if (from.has_expiratoryreservevolume()) {
    _internal_mutable_expiratoryreservevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_expiratoryreservevolume());
  }
  if (from.has_functionalresidualcapacity()) {
    _internal_mutable_functionalresidualcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_functionalresidualcapacity());
  }
  if (from.has_inspiratorycapacity()) {
    _internal_mutable_inspiratorycapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspiratorycapacity());
  }
  if (from.has_inspiratoryreservevolume()) {
    _internal_mutable_inspiratoryreservevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspiratoryreservevolume());
  }
  if (from.has_residualvolume()) {
    _internal_mutable_residualvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_residualvolume());
  }
  if (from.has_totallungcapacity()) {
    _internal_mutable_totallungcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totallungcapacity());
  }
  if (from.has_vitalcapacity()) {
    _internal_mutable_vitalcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_vitalcapacity());
  }
  if (from.has_idealbodyweight()) {
    _internal_mutable_idealbodyweight()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_idealbodyweight());
  }
  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
}

void PatientData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientData::CopyFrom(const PatientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientData::IsInitialized() const {
  return true;
}

void PatientData::InternalSwap(PatientData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatientData, sex_)
      + sizeof(PatientData::sex_)
      - PROTOBUF_FIELD_OFFSET(PatientData, age_)>(
          reinterpret_cast<char*>(&age_),
          reinterpret_cast<char*>(&other->age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PatientData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
