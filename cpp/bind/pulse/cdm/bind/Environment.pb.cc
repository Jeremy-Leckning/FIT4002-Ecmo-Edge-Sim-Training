// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Environment.proto

#include "pulse/cdm/bind/Environment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class EnvironmentalConditionsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditionsData> _instance;
} _EnvironmentalConditionsData_default_instance_;
class ActiveConditioningDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveConditioningData> _instance;
} _ActiveConditioningData_default_instance_;
class AppliedTemperatureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppliedTemperatureData> _instance;
} _AppliedTemperatureData_default_instance_;
class EnvironmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentData> _instance;
} _EnvironmentData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ActiveConditioningData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ActiveConditioningData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto}, {
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AppliedTemperatureData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AppliedTemperatureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto}, {
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EnvironmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EnvironmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto}, {
      &scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
      &scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
      &scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatConductancePerAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EnvironmentalConditionsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto}, {
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarLengthPerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarHeatResistanceAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_SubstanceFractionData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,
      &scc_info_SubstanceConcentrationData_pulse_2fcdm_2fbind_2fSubstance_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEnvironment_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironment_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, surroundingtype_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, airdensity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, airvelocity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, ambienttemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, atmosphericpressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, clothingresistance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, emissivity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, meanradianttemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, relativehumidity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, respirationambienttemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, ambientgas_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentalConditionsData, ambientaerosol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveConditioningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveConditioningData, power_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveConditioningData, surfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ActiveConditioningData, surfaceareafraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AppliedTemperatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AppliedTemperatureData, state_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AppliedTemperatureData, temperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AppliedTemperatureData, surfacearea_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AppliedTemperatureData, surfaceareafraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, environmentalconditions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, activeheating_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, activecooling_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, appliedtemperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, convectiveheatloss_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, convectiveheattranfercoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, evaporativeheatloss_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, evaporativeheattranfercoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, radiativeheatloss_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, radiativeheattranfercoefficient_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, respirationheatloss_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentData, skinheatloss_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::EnvironmentalConditionsData)},
  { 17, -1, sizeof(::pulse::cdm::bind::ActiveConditioningData)},
  { 25, -1, sizeof(::pulse::cdm::bind::AppliedTemperatureData)},
  { 34, -1, sizeof(::pulse::cdm::bind::EnvironmentData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EnvironmentalConditionsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ActiveConditioningData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AppliedTemperatureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EnvironmentData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n pulse/cdm/bind/Environment.proto\022\016puls"
  "e.cdm.bind\032\032pulse/cdm/bind/Enums.proto\032\037"
  "pulse/cdm/bind/Properties.proto\032\036pulse/c"
  "dm/bind/Substance.proto\"\374\006\n\033Environmenta"
  "lConditionsData\022U\n\017SurroundingType\030\001 \001(\016"
  "2<.pulse.cdm.bind.EnvironmentalCondition"
  "sData.eSurroundingType\022;\n\nAirDensity\030\002 \001"
  "(\0132\'.pulse.cdm.bind.ScalarMassPerVolumeD"
  "ata\022<\n\013AirVelocity\030\003 \001(\0132\'.pulse.cdm.bin"
  "d.ScalarLengthPerTimeData\022A\n\022AmbientTemp"
  "erature\030\004 \001(\0132%.pulse.cdm.bind.ScalarTem"
  "peratureData\022\?\n\023AtmosphericPressure\030\005 \001("
  "\0132\".pulse.cdm.bind.ScalarPressureData\022H\n"
  "\022ClothingResistance\030\006 \001(\0132,.pulse.cdm.bi"
  "nd.ScalarHeatResistanceAreaData\0222\n\nEmiss"
  "ivity\030\007 \001(\0132\036.pulse.cdm.bind.Scalar0To1D"
  "ata\022E\n\026MeanRadiantTemperature\030\010 \001(\0132%.pu"
  "lse.cdm.bind.ScalarTemperatureData\0228\n\020Re"
  "lativeHumidity\030\t \001(\0132\036.pulse.cdm.bind.Sc"
  "alar0To1Data\022L\n\035RespirationAmbientTemper"
  "ature\030\n \001(\0132%.pulse.cdm.bind.ScalarTempe"
  "ratureData\0229\n\nAmbientGas\030\013 \003(\0132%.pulse.c"
  "dm.bind.SubstanceFractionData\022B\n\016Ambient"
  "Aerosol\030\014 \003(\0132*.pulse.cdm.bind.Substance"
  "ConcentrationData\";\n\020eSurroundingType\022\023\n"
  "\017NullSurrounding\020\000\022\007\n\003Air\020\001\022\t\n\005Water\020\002\"\272"
  "\001\n\026ActiveConditioningData\022.\n\005Power\030\001 \001(\013"
  "2\037.pulse.cdm.bind.ScalarPowerData\0223\n\013Sur"
  "faceArea\030\002 \001(\0132\036.pulse.cdm.bind.ScalarAr"
  "eaData\022;\n\023SurfaceAreaFraction\030\003 \001(\0132\036.pu"
  "lse.cdm.bind.Scalar0To1Data\"\356\001\n\026AppliedT"
  "emperatureData\022&\n\005State\030\001 \001(\0162\027.pulse.cd"
  "m.bind.eSwitch\022:\n\013Temperature\030\002 \001(\0132%.pu"
  "lse.cdm.bind.ScalarTemperatureData\0223\n\013Su"
  "rfaceArea\030\003 \001(\0132\036.pulse.cdm.bind.ScalarA"
  "reaData\022;\n\023SurfaceAreaFraction\030\004 \001(\0132\036.p"
  "ulse.cdm.bind.Scalar0To1Data\"\341\006\n\017Environ"
  "mentData\022L\n\027EnvironmentalConditions\030\001 \001("
  "\0132+.pulse.cdm.bind.EnvironmentalConditio"
  "nsData\022=\n\rActiveHeating\030\002 \001(\0132&.pulse.cd"
  "m.bind.ActiveConditioningData\022=\n\rActiveC"
  "ooling\030\003 \001(\0132&.pulse.cdm.bind.ActiveCond"
  "itioningData\022B\n\022AppliedTemperature\030\004 \001(\013"
  "2&.pulse.cdm.bind.AppliedTemperatureData"
  "\022;\n\022ConvectiveHeatLoss\030\005 \001(\0132\037.pulse.cdm"
  ".bind.ScalarPowerData\022Z\n ConvectiveHeatT"
  "ranferCoefficient\030\006 \001(\01320.pulse.cdm.bind"
  ".ScalarHeatConductancePerAreaData\022<\n\023Eva"
  "porativeHeatLoss\030\007 \001(\0132\037.pulse.cdm.bind."
  "ScalarPowerData\022[\n!EvaporativeHeatTranfe"
  "rCoefficient\030\010 \001(\01320.pulse.cdm.bind.Scal"
  "arHeatConductancePerAreaData\022:\n\021Radiativ"
  "eHeatLoss\030\t \001(\0132\037.pulse.cdm.bind.ScalarP"
  "owerData\022Y\n\037RadiativeHeatTranferCoeffici"
  "ent\030\n \001(\01320.pulse.cdm.bind.ScalarHeatCon"
  "ductancePerAreaData\022<\n\023RespirationHeatLo"
  "ss\030\013 \001(\0132\037.pulse.cdm.bind.ScalarPowerDat"
  "a\0225\n\014SkinHeatLoss\030\014 \001(\0132\037.pulse.cdm.bind"
  ".ScalarPowerDataB/\n\032com.kitware.pulse.cd"
  "m.bindH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fSubstance_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_sccs[4] = {
  &scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
  &scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
  &scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
  &scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironment_2eproto, "pulse/cdm/bind/Environment.proto", 2393,
  &descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEnvironment_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEnvironment_2eproto, 4, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironment_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEnvironment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditionsData_eSurroundingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironment_2eproto[0];
}
bool EnvironmentalConditionsData_eSurroundingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::NullSurrounding;
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::Air;
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::Water;
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::eSurroundingType_MIN;
constexpr EnvironmentalConditionsData_eSurroundingType EnvironmentalConditionsData::eSurroundingType_MAX;
constexpr int EnvironmentalConditionsData::eSurroundingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class EnvironmentalConditionsData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& airdensity(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarLengthPerTimeData& airvelocity(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& ambienttemperature(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& atmosphericpressure(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarHeatResistanceAreaData& clothingresistance(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& emissivity(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& meanradianttemperature(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& relativehumidity(const EnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& respirationambienttemperature(const EnvironmentalConditionsData* msg);
};

const ::pulse::cdm::bind::ScalarMassPerVolumeData&
EnvironmentalConditionsData::_Internal::airdensity(const EnvironmentalConditionsData* msg) {
  return *msg->airdensity_;
}
const ::pulse::cdm::bind::ScalarLengthPerTimeData&
EnvironmentalConditionsData::_Internal::airvelocity(const EnvironmentalConditionsData* msg) {
  return *msg->airvelocity_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
EnvironmentalConditionsData::_Internal::ambienttemperature(const EnvironmentalConditionsData* msg) {
  return *msg->ambienttemperature_;
}
const ::pulse::cdm::bind::ScalarPressureData&
EnvironmentalConditionsData::_Internal::atmosphericpressure(const EnvironmentalConditionsData* msg) {
  return *msg->atmosphericpressure_;
}
const ::pulse::cdm::bind::ScalarHeatResistanceAreaData&
EnvironmentalConditionsData::_Internal::clothingresistance(const EnvironmentalConditionsData* msg) {
  return *msg->clothingresistance_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
EnvironmentalConditionsData::_Internal::emissivity(const EnvironmentalConditionsData* msg) {
  return *msg->emissivity_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
EnvironmentalConditionsData::_Internal::meanradianttemperature(const EnvironmentalConditionsData* msg) {
  return *msg->meanradianttemperature_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
EnvironmentalConditionsData::_Internal::relativehumidity(const EnvironmentalConditionsData* msg) {
  return *msg->relativehumidity_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
EnvironmentalConditionsData::_Internal::respirationambienttemperature(const EnvironmentalConditionsData* msg) {
  return *msg->respirationambienttemperature_;
}
void EnvironmentalConditionsData::clear_airdensity() {
  if (GetArena() == nullptr && airdensity_ != nullptr) {
    delete airdensity_;
  }
  airdensity_ = nullptr;
}
void EnvironmentalConditionsData::clear_airvelocity() {
  if (GetArena() == nullptr && airvelocity_ != nullptr) {
    delete airvelocity_;
  }
  airvelocity_ = nullptr;
}
void EnvironmentalConditionsData::clear_ambienttemperature() {
  if (GetArena() == nullptr && ambienttemperature_ != nullptr) {
    delete ambienttemperature_;
  }
  ambienttemperature_ = nullptr;
}
void EnvironmentalConditionsData::clear_atmosphericpressure() {
  if (GetArena() == nullptr && atmosphericpressure_ != nullptr) {
    delete atmosphericpressure_;
  }
  atmosphericpressure_ = nullptr;
}
void EnvironmentalConditionsData::clear_clothingresistance() {
  if (GetArena() == nullptr && clothingresistance_ != nullptr) {
    delete clothingresistance_;
  }
  clothingresistance_ = nullptr;
}
void EnvironmentalConditionsData::clear_emissivity() {
  if (GetArena() == nullptr && emissivity_ != nullptr) {
    delete emissivity_;
  }
  emissivity_ = nullptr;
}
void EnvironmentalConditionsData::clear_meanradianttemperature() {
  if (GetArena() == nullptr && meanradianttemperature_ != nullptr) {
    delete meanradianttemperature_;
  }
  meanradianttemperature_ = nullptr;
}
void EnvironmentalConditionsData::clear_relativehumidity() {
  if (GetArena() == nullptr && relativehumidity_ != nullptr) {
    delete relativehumidity_;
  }
  relativehumidity_ = nullptr;
}
void EnvironmentalConditionsData::clear_respirationambienttemperature() {
  if (GetArena() == nullptr && respirationambienttemperature_ != nullptr) {
    delete respirationambienttemperature_;
  }
  respirationambienttemperature_ = nullptr;
}
void EnvironmentalConditionsData::clear_ambientgas() {
  ambientgas_.Clear();
}
void EnvironmentalConditionsData::clear_ambientaerosol() {
  ambientaerosol_.Clear();
}
EnvironmentalConditionsData::EnvironmentalConditionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ambientgas_(arena),
  ambientaerosol_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EnvironmentalConditionsData)
}
EnvironmentalConditionsData::EnvironmentalConditionsData(const EnvironmentalConditionsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ambientgas_(from.ambientgas_),
      ambientaerosol_(from.ambientaerosol_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_airdensity()) {
    airdensity_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.airdensity_);
  } else {
    airdensity_ = nullptr;
  }
  if (from._internal_has_airvelocity()) {
    airvelocity_ = new ::pulse::cdm::bind::ScalarLengthPerTimeData(*from.airvelocity_);
  } else {
    airvelocity_ = nullptr;
  }
  if (from._internal_has_ambienttemperature()) {
    ambienttemperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.ambienttemperature_);
  } else {
    ambienttemperature_ = nullptr;
  }
  if (from._internal_has_atmosphericpressure()) {
    atmosphericpressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.atmosphericpressure_);
  } else {
    atmosphericpressure_ = nullptr;
  }
  if (from._internal_has_clothingresistance()) {
    clothingresistance_ = new ::pulse::cdm::bind::ScalarHeatResistanceAreaData(*from.clothingresistance_);
  } else {
    clothingresistance_ = nullptr;
  }
  if (from._internal_has_emissivity()) {
    emissivity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.emissivity_);
  } else {
    emissivity_ = nullptr;
  }
  if (from._internal_has_meanradianttemperature()) {
    meanradianttemperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.meanradianttemperature_);
  } else {
    meanradianttemperature_ = nullptr;
  }
  if (from._internal_has_relativehumidity()) {
    relativehumidity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.relativehumidity_);
  } else {
    relativehumidity_ = nullptr;
  }
  if (from._internal_has_respirationambienttemperature()) {
    respirationambienttemperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.respirationambienttemperature_);
  } else {
    respirationambienttemperature_ = nullptr;
  }
  surroundingtype_ = from.surroundingtype_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EnvironmentalConditionsData)
}

void EnvironmentalConditionsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&airdensity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&surroundingtype_) -
      reinterpret_cast<char*>(&airdensity_)) + sizeof(surroundingtype_));
}

EnvironmentalConditionsData::~EnvironmentalConditionsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EnvironmentalConditionsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvironmentalConditionsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete airdensity_;
  if (this != internal_default_instance()) delete airvelocity_;
  if (this != internal_default_instance()) delete ambienttemperature_;
  if (this != internal_default_instance()) delete atmosphericpressure_;
  if (this != internal_default_instance()) delete clothingresistance_;
  if (this != internal_default_instance()) delete emissivity_;
  if (this != internal_default_instance()) delete meanradianttemperature_;
  if (this != internal_default_instance()) delete relativehumidity_;
  if (this != internal_default_instance()) delete respirationambienttemperature_;
}

void EnvironmentalConditionsData::ArenaDtor(void* object) {
  EnvironmentalConditionsData* _this = reinterpret_cast< EnvironmentalConditionsData* >(object);
  (void)_this;
}
void EnvironmentalConditionsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentalConditionsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditionsData& EnvironmentalConditionsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditionsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ambientgas_.Clear();
  ambientaerosol_.Clear();
  if (GetArena() == nullptr && airdensity_ != nullptr) {
    delete airdensity_;
  }
  airdensity_ = nullptr;
  if (GetArena() == nullptr && airvelocity_ != nullptr) {
    delete airvelocity_;
  }
  airvelocity_ = nullptr;
  if (GetArena() == nullptr && ambienttemperature_ != nullptr) {
    delete ambienttemperature_;
  }
  ambienttemperature_ = nullptr;
  if (GetArena() == nullptr && atmosphericpressure_ != nullptr) {
    delete atmosphericpressure_;
  }
  atmosphericpressure_ = nullptr;
  if (GetArena() == nullptr && clothingresistance_ != nullptr) {
    delete clothingresistance_;
  }
  clothingresistance_ = nullptr;
  if (GetArena() == nullptr && emissivity_ != nullptr) {
    delete emissivity_;
  }
  emissivity_ = nullptr;
  if (GetArena() == nullptr && meanradianttemperature_ != nullptr) {
    delete meanradianttemperature_;
  }
  meanradianttemperature_ = nullptr;
  if (GetArena() == nullptr && relativehumidity_ != nullptr) {
    delete relativehumidity_;
  }
  relativehumidity_ = nullptr;
  if (GetArena() == nullptr && respirationambienttemperature_ != nullptr) {
    delete respirationambienttemperature_;
  }
  respirationambienttemperature_ = nullptr;
  surroundingtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditionsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentalConditionsData.eSurroundingType SurroundingType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_surroundingtype(static_cast<::pulse::cdm::bind::EnvironmentalConditionsData_eSurroundingType>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_airdensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarLengthPerTimeData AirVelocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_airvelocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData AmbientTemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambienttemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData AtmosphericPressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_atmosphericpressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatResistanceAreaData ClothingResistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_clothingresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Emissivity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissivity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData MeanRadiantTemperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_meanradianttemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RelativeHumidity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_relativehumidity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData RespirationAmbientTemperature = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationambienttemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceFractionData AmbientGas = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ambientgas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.SubstanceConcentrationData AmbientAerosol = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ambientaerosol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditionsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentalConditionsData.eSurroundingType SurroundingType = 1;
  if (this->surroundingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_surroundingtype(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 2;
  if (this->has_airdensity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::airdensity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarLengthPerTimeData AirVelocity = 3;
  if (this->has_airvelocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::airvelocity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData AmbientTemperature = 4;
  if (this->has_ambienttemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ambienttemperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData AtmosphericPressure = 5;
  if (this->has_atmosphericpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::atmosphericpressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceAreaData ClothingResistance = 6;
  if (this->has_clothingresistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::clothingresistance(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Emissivity = 7;
  if (this->has_emissivity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::emissivity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData MeanRadiantTemperature = 8;
  if (this->has_meanradianttemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::meanradianttemperature(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RelativeHumidity = 9;
  if (this->has_relativehumidity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::relativehumidity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData RespirationAmbientTemperature = 10;
  if (this->has_respirationambienttemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::respirationambienttemperature(this), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceFractionData AmbientGas = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ambientgas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_ambientgas(i), target, stream);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData AmbientAerosol = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ambientaerosol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_ambientaerosol(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EnvironmentalConditionsData)
  return target;
}

size_t EnvironmentalConditionsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EnvironmentalConditionsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.SubstanceFractionData AmbientGas = 11;
  total_size += 1UL * this->_internal_ambientgas_size();
  for (const auto& msg : this->ambientgas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.SubstanceConcentrationData AmbientAerosol = 12;
  total_size += 1UL * this->_internal_ambientaerosol_size();
  for (const auto& msg : this->ambientaerosol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData AirDensity = 2;
  if (this->has_airdensity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airdensity_);
  }

  // .pulse.cdm.bind.ScalarLengthPerTimeData AirVelocity = 3;
  if (this->has_airvelocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *airvelocity_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData AmbientTemperature = 4;
  if (this->has_ambienttemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambienttemperature_);
  }

  // .pulse.cdm.bind.ScalarPressureData AtmosphericPressure = 5;
  if (this->has_atmosphericpressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *atmosphericpressure_);
  }

  // .pulse.cdm.bind.ScalarHeatResistanceAreaData ClothingResistance = 6;
  if (this->has_clothingresistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clothingresistance_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Emissivity = 7;
  if (this->has_emissivity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emissivity_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData MeanRadiantTemperature = 8;
  if (this->has_meanradianttemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meanradianttemperature_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RelativeHumidity = 9;
  if (this->has_relativehumidity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relativehumidity_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData RespirationAmbientTemperature = 10;
  if (this->has_respirationambienttemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationambienttemperature_);
  }

  // .pulse.cdm.bind.EnvironmentalConditionsData.eSurroundingType SurroundingType = 1;
  if (this->surroundingtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_surroundingtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditionsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditionsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditionsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EnvironmentalConditionsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EnvironmentalConditionsData)
    MergeFrom(*source);
  }
}

void EnvironmentalConditionsData::MergeFrom(const EnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ambientgas_.MergeFrom(from.ambientgas_);
  ambientaerosol_.MergeFrom(from.ambientaerosol_);
  if (from.has_airdensity()) {
    _internal_mutable_airdensity()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_airdensity());
  }
  if (from.has_airvelocity()) {
    _internal_mutable_airvelocity()->::pulse::cdm::bind::ScalarLengthPerTimeData::MergeFrom(from._internal_airvelocity());
  }
  if (from.has_ambienttemperature()) {
    _internal_mutable_ambienttemperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_ambienttemperature());
  }
  if (from.has_atmosphericpressure()) {
    _internal_mutable_atmosphericpressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_atmosphericpressure());
  }
  if (from.has_clothingresistance()) {
    _internal_mutable_clothingresistance()->::pulse::cdm::bind::ScalarHeatResistanceAreaData::MergeFrom(from._internal_clothingresistance());
  }
  if (from.has_emissivity()) {
    _internal_mutable_emissivity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_emissivity());
  }
  if (from.has_meanradianttemperature()) {
    _internal_mutable_meanradianttemperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_meanradianttemperature());
  }
  if (from.has_relativehumidity()) {
    _internal_mutable_relativehumidity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_relativehumidity());
  }
  if (from.has_respirationambienttemperature()) {
    _internal_mutable_respirationambienttemperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_respirationambienttemperature());
  }
  if (from.surroundingtype() != 0) {
    _internal_set_surroundingtype(from._internal_surroundingtype());
  }
}

void EnvironmentalConditionsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditionsData::CopyFrom(const EnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditionsData::IsInitialized() const {
  return true;
}

void EnvironmentalConditionsData::InternalSwap(EnvironmentalConditionsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ambientgas_.InternalSwap(&other->ambientgas_);
  ambientaerosol_.InternalSwap(&other->ambientaerosol_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentalConditionsData, surroundingtype_)
      + sizeof(EnvironmentalConditionsData::surroundingtype_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentalConditionsData, airdensity_)>(
          reinterpret_cast<char*>(&airdensity_),
          reinterpret_cast<char*>(&other->airdensity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditionsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActiveConditioningData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarPowerData& power(const ActiveConditioningData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& surfacearea(const ActiveConditioningData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& surfaceareafraction(const ActiveConditioningData* msg);
};

const ::pulse::cdm::bind::ScalarPowerData&
ActiveConditioningData::_Internal::power(const ActiveConditioningData* msg) {
  return *msg->power_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ActiveConditioningData::_Internal::surfacearea(const ActiveConditioningData* msg) {
  return *msg->surfacearea_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ActiveConditioningData::_Internal::surfaceareafraction(const ActiveConditioningData* msg) {
  return *msg->surfaceareafraction_;
}
void ActiveConditioningData::clear_power() {
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
}
void ActiveConditioningData::clear_surfacearea() {
  if (GetArena() == nullptr && surfacearea_ != nullptr) {
    delete surfacearea_;
  }
  surfacearea_ = nullptr;
}
void ActiveConditioningData::clear_surfaceareafraction() {
  if (GetArena() == nullptr && surfaceareafraction_ != nullptr) {
    delete surfaceareafraction_;
  }
  surfaceareafraction_ = nullptr;
}
ActiveConditioningData::ActiveConditioningData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ActiveConditioningData)
}
ActiveConditioningData::ActiveConditioningData(const ActiveConditioningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_power()) {
    power_ = new ::pulse::cdm::bind::ScalarPowerData(*from.power_);
  } else {
    power_ = nullptr;
  }
  if (from._internal_has_surfacearea()) {
    surfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.surfacearea_);
  } else {
    surfacearea_ = nullptr;
  }
  if (from._internal_has_surfaceareafraction()) {
    surfaceareafraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.surfaceareafraction_);
  } else {
    surfaceareafraction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ActiveConditioningData)
}

void ActiveConditioningData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&power_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&surfaceareafraction_) -
      reinterpret_cast<char*>(&power_)) + sizeof(surfaceareafraction_));
}

ActiveConditioningData::~ActiveConditioningData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ActiveConditioningData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveConditioningData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete surfacearea_;
  if (this != internal_default_instance()) delete surfaceareafraction_;
}

void ActiveConditioningData::ArenaDtor(void* object) {
  ActiveConditioningData* _this = reinterpret_cast< ActiveConditioningData* >(object);
  (void)_this;
}
void ActiveConditioningData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveConditioningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveConditioningData& ActiveConditioningData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveConditioningData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  return *internal_default_instance();
}


void ActiveConditioningData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ActiveConditioningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  if (GetArena() == nullptr && surfacearea_ != nullptr) {
    delete surfacearea_;
  }
  surfacearea_ = nullptr;
  if (GetArena() == nullptr && surfaceareafraction_ != nullptr) {
    delete surfaceareafraction_;
  }
  surfaceareafraction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveConditioningData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarPowerData Power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfaceareafraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveConditioningData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ActiveConditioningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPowerData Power = 1;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::power(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 2;
  if (this->has_surfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::surfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 3;
  if (this->has_surfaceareafraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::surfaceareafraction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ActiveConditioningData)
  return target;
}

size_t ActiveConditioningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ActiveConditioningData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarPowerData Power = 1;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 2;
  if (this->has_surfacearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surfacearea_);
  }

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 3;
  if (this->has_surfaceareafraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surfaceareafraction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveConditioningData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ActiveConditioningData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveConditioningData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveConditioningData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ActiveConditioningData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ActiveConditioningData)
    MergeFrom(*source);
  }
}

void ActiveConditioningData::MergeFrom(const ActiveConditioningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ActiveConditioningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_power()) {
    _internal_mutable_power()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_power());
  }
  if (from.has_surfacearea()) {
    _internal_mutable_surfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_surfacearea());
  }
  if (from.has_surfaceareafraction()) {
    _internal_mutable_surfaceareafraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_surfaceareafraction());
  }
}

void ActiveConditioningData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ActiveConditioningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveConditioningData::CopyFrom(const ActiveConditioningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ActiveConditioningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveConditioningData::IsInitialized() const {
  return true;
}

void ActiveConditioningData::InternalSwap(ActiveConditioningData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveConditioningData, surfaceareafraction_)
      + sizeof(ActiveConditioningData::surfaceareafraction_)
      - PROTOBUF_FIELD_OFFSET(ActiveConditioningData, power_)>(
          reinterpret_cast<char*>(&power_),
          reinterpret_cast<char*>(&other->power_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveConditioningData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppliedTemperatureData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarTemperatureData& temperature(const AppliedTemperatureData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& surfacearea(const AppliedTemperatureData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& surfaceareafraction(const AppliedTemperatureData* msg);
};

const ::pulse::cdm::bind::ScalarTemperatureData&
AppliedTemperatureData::_Internal::temperature(const AppliedTemperatureData* msg) {
  return *msg->temperature_;
}
const ::pulse::cdm::bind::ScalarAreaData&
AppliedTemperatureData::_Internal::surfacearea(const AppliedTemperatureData* msg) {
  return *msg->surfacearea_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AppliedTemperatureData::_Internal::surfaceareafraction(const AppliedTemperatureData* msg) {
  return *msg->surfaceareafraction_;
}
void AppliedTemperatureData::clear_temperature() {
  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
}
void AppliedTemperatureData::clear_surfacearea() {
  if (GetArena() == nullptr && surfacearea_ != nullptr) {
    delete surfacearea_;
  }
  surfacearea_ = nullptr;
}
void AppliedTemperatureData::clear_surfaceareafraction() {
  if (GetArena() == nullptr && surfaceareafraction_ != nullptr) {
    delete surfaceareafraction_;
  }
  surfaceareafraction_ = nullptr;
}
AppliedTemperatureData::AppliedTemperatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AppliedTemperatureData)
}
AppliedTemperatureData::AppliedTemperatureData(const AppliedTemperatureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_temperature()) {
    temperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.temperature_);
  } else {
    temperature_ = nullptr;
  }
  if (from._internal_has_surfacearea()) {
    surfacearea_ = new ::pulse::cdm::bind::ScalarAreaData(*from.surfacearea_);
  } else {
    surfacearea_ = nullptr;
  }
  if (from._internal_has_surfaceareafraction()) {
    surfaceareafraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.surfaceareafraction_);
  } else {
    surfaceareafraction_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AppliedTemperatureData)
}

void AppliedTemperatureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&temperature_)) + sizeof(state_));
}

AppliedTemperatureData::~AppliedTemperatureData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AppliedTemperatureData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppliedTemperatureData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete temperature_;
  if (this != internal_default_instance()) delete surfacearea_;
  if (this != internal_default_instance()) delete surfaceareafraction_;
}

void AppliedTemperatureData::ArenaDtor(void* object) {
  AppliedTemperatureData* _this = reinterpret_cast< AppliedTemperatureData* >(object);
  (void)_this;
}
void AppliedTemperatureData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppliedTemperatureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppliedTemperatureData& AppliedTemperatureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppliedTemperatureData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  return *internal_default_instance();
}


void AppliedTemperatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AppliedTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
  if (GetArena() == nullptr && surfacearea_ != nullptr) {
    delete surfacearea_;
  }
  surfacearea_ = nullptr;
  if (GetArena() == nullptr && surfaceareafraction_ != nullptr) {
    delete surfaceareafraction_;
  }
  surfaceareafraction_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppliedTemperatureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData Temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_surfaceareafraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppliedTemperatureData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AppliedTemperatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch State = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 2;
  if (this->has_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::temperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 3;
  if (this->has_surfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::surfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 4;
  if (this->has_surfaceareafraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::surfaceareafraction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AppliedTemperatureData)
  return target;
}

size_t AppliedTemperatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AppliedTemperatureData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 2;
  if (this->has_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temperature_);
  }

  // .pulse.cdm.bind.ScalarAreaData SurfaceArea = 3;
  if (this->has_surfacearea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surfacearea_);
  }

  // .pulse.cdm.bind.Scalar0To1Data SurfaceAreaFraction = 4;
  if (this->has_surfaceareafraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surfaceareafraction_);
  }

  // .pulse.cdm.bind.eSwitch State = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppliedTemperatureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AppliedTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const AppliedTemperatureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppliedTemperatureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AppliedTemperatureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AppliedTemperatureData)
    MergeFrom(*source);
  }
}

void AppliedTemperatureData::MergeFrom(const AppliedTemperatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AppliedTemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_temperature()) {
    _internal_mutable_temperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_temperature());
  }
  if (from.has_surfacearea()) {
    _internal_mutable_surfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_surfacearea());
  }
  if (from.has_surfaceareafraction()) {
    _internal_mutable_surfaceareafraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_surfaceareafraction());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void AppliedTemperatureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AppliedTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppliedTemperatureData::CopyFrom(const AppliedTemperatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AppliedTemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppliedTemperatureData::IsInitialized() const {
  return true;
}

void AppliedTemperatureData::InternalSwap(AppliedTemperatureData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppliedTemperatureData, state_)
      + sizeof(AppliedTemperatureData::state_)
      - PROTOBUF_FIELD_OFFSET(AppliedTemperatureData, temperature_)>(
          reinterpret_cast<char*>(&temperature_),
          reinterpret_cast<char*>(&other->temperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppliedTemperatureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvironmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ActiveConditioningData& activeheating(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ActiveConditioningData& activecooling(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::AppliedTemperatureData& appliedtemperature(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& convectiveheatloss(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& convectiveheattranfercoefficient(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& evaporativeheatloss(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& evaporativeheattranfercoefficient(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& radiativeheatloss(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData& radiativeheattranfercoefficient(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& respirationheatloss(const EnvironmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& skinheatloss(const EnvironmentData* msg);
};

const ::pulse::cdm::bind::EnvironmentalConditionsData&
EnvironmentData::_Internal::environmentalconditions(const EnvironmentData* msg) {
  return *msg->environmentalconditions_;
}
const ::pulse::cdm::bind::ActiveConditioningData&
EnvironmentData::_Internal::activeheating(const EnvironmentData* msg) {
  return *msg->activeheating_;
}
const ::pulse::cdm::bind::ActiveConditioningData&
EnvironmentData::_Internal::activecooling(const EnvironmentData* msg) {
  return *msg->activecooling_;
}
const ::pulse::cdm::bind::AppliedTemperatureData&
EnvironmentData::_Internal::appliedtemperature(const EnvironmentData* msg) {
  return *msg->appliedtemperature_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnvironmentData::_Internal::convectiveheatloss(const EnvironmentData* msg) {
  return *msg->convectiveheatloss_;
}
const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&
EnvironmentData::_Internal::convectiveheattranfercoefficient(const EnvironmentData* msg) {
  return *msg->convectiveheattranfercoefficient_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnvironmentData::_Internal::evaporativeheatloss(const EnvironmentData* msg) {
  return *msg->evaporativeheatloss_;
}
const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&
EnvironmentData::_Internal::evaporativeheattranfercoefficient(const EnvironmentData* msg) {
  return *msg->evaporativeheattranfercoefficient_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnvironmentData::_Internal::radiativeheatloss(const EnvironmentData* msg) {
  return *msg->radiativeheatloss_;
}
const ::pulse::cdm::bind::ScalarHeatConductancePerAreaData&
EnvironmentData::_Internal::radiativeheattranfercoefficient(const EnvironmentData* msg) {
  return *msg->radiativeheattranfercoefficient_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnvironmentData::_Internal::respirationheatloss(const EnvironmentData* msg) {
  return *msg->respirationheatloss_;
}
const ::pulse::cdm::bind::ScalarPowerData&
EnvironmentData::_Internal::skinheatloss(const EnvironmentData* msg) {
  return *msg->skinheatloss_;
}
void EnvironmentData::clear_convectiveheatloss() {
  if (GetArena() == nullptr && convectiveheatloss_ != nullptr) {
    delete convectiveheatloss_;
  }
  convectiveheatloss_ = nullptr;
}
void EnvironmentData::clear_convectiveheattranfercoefficient() {
  if (GetArena() == nullptr && convectiveheattranfercoefficient_ != nullptr) {
    delete convectiveheattranfercoefficient_;
  }
  convectiveheattranfercoefficient_ = nullptr;
}
void EnvironmentData::clear_evaporativeheatloss() {
  if (GetArena() == nullptr && evaporativeheatloss_ != nullptr) {
    delete evaporativeheatloss_;
  }
  evaporativeheatloss_ = nullptr;
}
void EnvironmentData::clear_evaporativeheattranfercoefficient() {
  if (GetArena() == nullptr && evaporativeheattranfercoefficient_ != nullptr) {
    delete evaporativeheattranfercoefficient_;
  }
  evaporativeheattranfercoefficient_ = nullptr;
}
void EnvironmentData::clear_radiativeheatloss() {
  if (GetArena() == nullptr && radiativeheatloss_ != nullptr) {
    delete radiativeheatloss_;
  }
  radiativeheatloss_ = nullptr;
}
void EnvironmentData::clear_radiativeheattranfercoefficient() {
  if (GetArena() == nullptr && radiativeheattranfercoefficient_ != nullptr) {
    delete radiativeheattranfercoefficient_;
  }
  radiativeheattranfercoefficient_ = nullptr;
}
void EnvironmentData::clear_respirationheatloss() {
  if (GetArena() == nullptr && respirationheatloss_ != nullptr) {
    delete respirationheatloss_;
  }
  respirationheatloss_ = nullptr;
}
void EnvironmentData::clear_skinheatloss() {
  if (GetArena() == nullptr && skinheatloss_ != nullptr) {
    delete skinheatloss_;
  }
  skinheatloss_ = nullptr;
}
EnvironmentData::EnvironmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EnvironmentData)
}
EnvironmentData::EnvironmentData(const EnvironmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_environmentalconditions()) {
    environmentalconditions_ = new ::pulse::cdm::bind::EnvironmentalConditionsData(*from.environmentalconditions_);
  } else {
    environmentalconditions_ = nullptr;
  }
  if (from._internal_has_activeheating()) {
    activeheating_ = new ::pulse::cdm::bind::ActiveConditioningData(*from.activeheating_);
  } else {
    activeheating_ = nullptr;
  }
  if (from._internal_has_activecooling()) {
    activecooling_ = new ::pulse::cdm::bind::ActiveConditioningData(*from.activecooling_);
  } else {
    activecooling_ = nullptr;
  }
  if (from._internal_has_appliedtemperature()) {
    appliedtemperature_ = new ::pulse::cdm::bind::AppliedTemperatureData(*from.appliedtemperature_);
  } else {
    appliedtemperature_ = nullptr;
  }
  if (from._internal_has_convectiveheatloss()) {
    convectiveheatloss_ = new ::pulse::cdm::bind::ScalarPowerData(*from.convectiveheatloss_);
  } else {
    convectiveheatloss_ = nullptr;
  }
  if (from._internal_has_convectiveheattranfercoefficient()) {
    convectiveheattranfercoefficient_ = new ::pulse::cdm::bind::ScalarHeatConductancePerAreaData(*from.convectiveheattranfercoefficient_);
  } else {
    convectiveheattranfercoefficient_ = nullptr;
  }
  if (from._internal_has_evaporativeheatloss()) {
    evaporativeheatloss_ = new ::pulse::cdm::bind::ScalarPowerData(*from.evaporativeheatloss_);
  } else {
    evaporativeheatloss_ = nullptr;
  }
  if (from._internal_has_evaporativeheattranfercoefficient()) {
    evaporativeheattranfercoefficient_ = new ::pulse::cdm::bind::ScalarHeatConductancePerAreaData(*from.evaporativeheattranfercoefficient_);
  } else {
    evaporativeheattranfercoefficient_ = nullptr;
  }
  if (from._internal_has_radiativeheatloss()) {
    radiativeheatloss_ = new ::pulse::cdm::bind::ScalarPowerData(*from.radiativeheatloss_);
  } else {
    radiativeheatloss_ = nullptr;
  }
  if (from._internal_has_radiativeheattranfercoefficient()) {
    radiativeheattranfercoefficient_ = new ::pulse::cdm::bind::ScalarHeatConductancePerAreaData(*from.radiativeheattranfercoefficient_);
  } else {
    radiativeheattranfercoefficient_ = nullptr;
  }
  if (from._internal_has_respirationheatloss()) {
    respirationheatloss_ = new ::pulse::cdm::bind::ScalarPowerData(*from.respirationheatloss_);
  } else {
    respirationheatloss_ = nullptr;
  }
  if (from._internal_has_skinheatloss()) {
    skinheatloss_ = new ::pulse::cdm::bind::ScalarPowerData(*from.skinheatloss_);
  } else {
    skinheatloss_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EnvironmentData)
}

void EnvironmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&environmentalconditions_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&skinheatloss_) -
      reinterpret_cast<char*>(&environmentalconditions_)) + sizeof(skinheatloss_));
}

EnvironmentData::~EnvironmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EnvironmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvironmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete environmentalconditions_;
  if (this != internal_default_instance()) delete activeheating_;
  if (this != internal_default_instance()) delete activecooling_;
  if (this != internal_default_instance()) delete appliedtemperature_;
  if (this != internal_default_instance()) delete convectiveheatloss_;
  if (this != internal_default_instance()) delete convectiveheattranfercoefficient_;
  if (this != internal_default_instance()) delete evaporativeheatloss_;
  if (this != internal_default_instance()) delete evaporativeheattranfercoefficient_;
  if (this != internal_default_instance()) delete radiativeheatloss_;
  if (this != internal_default_instance()) delete radiativeheattranfercoefficient_;
  if (this != internal_default_instance()) delete respirationheatloss_;
  if (this != internal_default_instance()) delete skinheatloss_;
}

void EnvironmentData::ArenaDtor(void* object) {
  EnvironmentData* _this = reinterpret_cast< EnvironmentData* >(object);
  (void)_this;
}
void EnvironmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentData& EnvironmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EnvironmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && environmentalconditions_ != nullptr) {
    delete environmentalconditions_;
  }
  environmentalconditions_ = nullptr;
  if (GetArena() == nullptr && activeheating_ != nullptr) {
    delete activeheating_;
  }
  activeheating_ = nullptr;
  if (GetArena() == nullptr && activecooling_ != nullptr) {
    delete activecooling_;
  }
  activecooling_ = nullptr;
  if (GetArena() == nullptr && appliedtemperature_ != nullptr) {
    delete appliedtemperature_;
  }
  appliedtemperature_ = nullptr;
  if (GetArena() == nullptr && convectiveheatloss_ != nullptr) {
    delete convectiveheatloss_;
  }
  convectiveheatloss_ = nullptr;
  if (GetArena() == nullptr && convectiveheattranfercoefficient_ != nullptr) {
    delete convectiveheattranfercoefficient_;
  }
  convectiveheattranfercoefficient_ = nullptr;
  if (GetArena() == nullptr && evaporativeheatloss_ != nullptr) {
    delete evaporativeheatloss_;
  }
  evaporativeheatloss_ = nullptr;
  if (GetArena() == nullptr && evaporativeheattranfercoefficient_ != nullptr) {
    delete evaporativeheattranfercoefficient_;
  }
  evaporativeheattranfercoefficient_ = nullptr;
  if (GetArena() == nullptr && radiativeheatloss_ != nullptr) {
    delete radiativeheatloss_;
  }
  radiativeheatloss_ = nullptr;
  if (GetArena() == nullptr && radiativeheattranfercoefficient_ != nullptr) {
    delete radiativeheattranfercoefficient_;
  }
  radiativeheattranfercoefficient_ = nullptr;
  if (GetArena() == nullptr && respirationheatloss_ != nullptr) {
    delete respirationheatloss_;
  }
  respirationheatloss_ = nullptr;
  if (GetArena() == nullptr && skinheatloss_ != nullptr) {
    delete skinheatloss_;
  }
  skinheatloss_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentalconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activeheating(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activecooling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_appliedtemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData ConvectiveHeatLoss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_convectiveheatloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatConductancePerAreaData ConvectiveHeatTranferCoefficient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_convectiveheattranfercoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData EvaporativeHeatLoss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_evaporativeheatloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatConductancePerAreaData EvaporativeHeatTranferCoefficient = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_evaporativeheattranfercoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData RadiativeHeatLoss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiativeheatloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarHeatConductancePerAreaData RadiativeHeatTranferCoefficient = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiativeheattranfercoefficient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData RespirationHeatLoss = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_respirationheatloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData SkinHeatLoss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_skinheatloss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EnvironmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 1;
  if (this->has_environmentalconditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::environmentalconditions(this), target, stream);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  if (this->has_activeheating()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activeheating(this), target, stream);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  if (this->has_activecooling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::activecooling(this), target, stream);
  }

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  if (this->has_appliedtemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::appliedtemperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData ConvectiveHeatLoss = 5;
  if (this->has_convectiveheatloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::convectiveheatloss(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData ConvectiveHeatTranferCoefficient = 6;
  if (this->has_convectiveheattranfercoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::convectiveheattranfercoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData EvaporativeHeatLoss = 7;
  if (this->has_evaporativeheatloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::evaporativeheatloss(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData EvaporativeHeatTranferCoefficient = 8;
  if (this->has_evaporativeheattranfercoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::evaporativeheattranfercoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData RadiativeHeatLoss = 9;
  if (this->has_radiativeheatloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::radiativeheatloss(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData RadiativeHeatTranferCoefficient = 10;
  if (this->has_radiativeheattranfercoefficient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::radiativeheattranfercoefficient(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData RespirationHeatLoss = 11;
  if (this->has_respirationheatloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::respirationheatloss(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData SkinHeatLoss = 12;
  if (this->has_skinheatloss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::skinheatloss(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EnvironmentData)
  return target;
}

size_t EnvironmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EnvironmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 1;
  if (this->has_environmentalconditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmentalconditions_);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveHeating = 2;
  if (this->has_activeheating()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activeheating_);
  }

  // .pulse.cdm.bind.ActiveConditioningData ActiveCooling = 3;
  if (this->has_activecooling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activecooling_);
  }

  // .pulse.cdm.bind.AppliedTemperatureData AppliedTemperature = 4;
  if (this->has_appliedtemperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *appliedtemperature_);
  }

  // .pulse.cdm.bind.ScalarPowerData ConvectiveHeatLoss = 5;
  if (this->has_convectiveheatloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convectiveheatloss_);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData ConvectiveHeatTranferCoefficient = 6;
  if (this->has_convectiveheattranfercoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convectiveheattranfercoefficient_);
  }

  // .pulse.cdm.bind.ScalarPowerData EvaporativeHeatLoss = 7;
  if (this->has_evaporativeheatloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evaporativeheatloss_);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData EvaporativeHeatTranferCoefficient = 8;
  if (this->has_evaporativeheattranfercoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evaporativeheattranfercoefficient_);
  }

  // .pulse.cdm.bind.ScalarPowerData RadiativeHeatLoss = 9;
  if (this->has_radiativeheatloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *radiativeheatloss_);
  }

  // .pulse.cdm.bind.ScalarHeatConductancePerAreaData RadiativeHeatTranferCoefficient = 10;
  if (this->has_radiativeheattranfercoefficient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *radiativeheattranfercoefficient_);
  }

  // .pulse.cdm.bind.ScalarPowerData RespirationHeatLoss = 11;
  if (this->has_respirationheatloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *respirationheatloss_);
  }

  // .pulse.cdm.bind.ScalarPowerData SkinHeatLoss = 12;
  if (this->has_skinheatloss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skinheatloss_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EnvironmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EnvironmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EnvironmentData)
    MergeFrom(*source);
  }
}

void EnvironmentData::MergeFrom(const EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EnvironmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_environmentalconditions()) {
    _internal_mutable_environmentalconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_environmentalconditions());
  }
  if (from.has_activeheating()) {
    _internal_mutable_activeheating()->::pulse::cdm::bind::ActiveConditioningData::MergeFrom(from._internal_activeheating());
  }
  if (from.has_activecooling()) {
    _internal_mutable_activecooling()->::pulse::cdm::bind::ActiveConditioningData::MergeFrom(from._internal_activecooling());
  }
  if (from.has_appliedtemperature()) {
    _internal_mutable_appliedtemperature()->::pulse::cdm::bind::AppliedTemperatureData::MergeFrom(from._internal_appliedtemperature());
  }
  if (from.has_convectiveheatloss()) {
    _internal_mutable_convectiveheatloss()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_convectiveheatloss());
  }
  if (from.has_convectiveheattranfercoefficient()) {
    _internal_mutable_convectiveheattranfercoefficient()->::pulse::cdm::bind::ScalarHeatConductancePerAreaData::MergeFrom(from._internal_convectiveheattranfercoefficient());
  }
  if (from.has_evaporativeheatloss()) {
    _internal_mutable_evaporativeheatloss()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_evaporativeheatloss());
  }
  if (from.has_evaporativeheattranfercoefficient()) {
    _internal_mutable_evaporativeheattranfercoefficient()->::pulse::cdm::bind::ScalarHeatConductancePerAreaData::MergeFrom(from._internal_evaporativeheattranfercoefficient());
  }
  if (from.has_radiativeheatloss()) {
    _internal_mutable_radiativeheatloss()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_radiativeheatloss());
  }
  if (from.has_radiativeheattranfercoefficient()) {
    _internal_mutable_radiativeheattranfercoefficient()->::pulse::cdm::bind::ScalarHeatConductancePerAreaData::MergeFrom(from._internal_radiativeheattranfercoefficient());
  }
  if (from.has_respirationheatloss()) {
    _internal_mutable_respirationheatloss()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_respirationheatloss());
  }
  if (from.has_skinheatloss()) {
    _internal_mutable_skinheatloss()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_skinheatloss());
  }
}

void EnvironmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EnvironmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentData::CopyFrom(const EnvironmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EnvironmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentData::IsInitialized() const {
  return true;
}

void EnvironmentData::InternalSwap(EnvironmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentData, skinheatloss_)
      + sizeof(EnvironmentData::skinheatloss_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentData, environmentalconditions_)>(
          reinterpret_cast<char*>(&environmentalconditions_),
          reinterpret_cast<char*>(&other->environmentalconditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EnvironmentalConditionsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentalConditionsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EnvironmentalConditionsData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ActiveConditioningData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ActiveConditioningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ActiveConditioningData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AppliedTemperatureData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AppliedTemperatureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AppliedTemperatureData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EnvironmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EnvironmentData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
