// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Physiology.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPhysiology_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPhysiology_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/PatientNutrition.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPhysiology_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class BloodChemistrySystemData;
class BloodChemistrySystemDataDefaultTypeInternal;
extern BloodChemistrySystemDataDefaultTypeInternal _BloodChemistrySystemData_default_instance_;
class CardiovascularSystemData;
class CardiovascularSystemDataDefaultTypeInternal;
extern CardiovascularSystemDataDefaultTypeInternal _CardiovascularSystemData_default_instance_;
class DrugSystemData;
class DrugSystemDataDefaultTypeInternal;
extern DrugSystemDataDefaultTypeInternal _DrugSystemData_default_instance_;
class EndocrineSystemData;
class EndocrineSystemDataDefaultTypeInternal;
extern EndocrineSystemDataDefaultTypeInternal _EndocrineSystemData_default_instance_;
class EnergySystemData;
class EnergySystemDataDefaultTypeInternal;
extern EnergySystemDataDefaultTypeInternal _EnergySystemData_default_instance_;
class GastrointestinalSystemData;
class GastrointestinalSystemDataDefaultTypeInternal;
extern GastrointestinalSystemDataDefaultTypeInternal _GastrointestinalSystemData_default_instance_;
class HepaticSystemData;
class HepaticSystemDataDefaultTypeInternal;
extern HepaticSystemDataDefaultTypeInternal _HepaticSystemData_default_instance_;
class NervousSystemData;
class NervousSystemDataDefaultTypeInternal;
extern NervousSystemDataDefaultTypeInternal _NervousSystemData_default_instance_;
class PupillaryResponseData;
class PupillaryResponseDataDefaultTypeInternal;
extern PupillaryResponseDataDefaultTypeInternal _PupillaryResponseData_default_instance_;
class RenalSystemData;
class RenalSystemDataDefaultTypeInternal;
extern RenalSystemDataDefaultTypeInternal _RenalSystemData_default_instance_;
class RespiratorySystemData;
class RespiratorySystemDataDefaultTypeInternal;
extern RespiratorySystemDataDefaultTypeInternal _RespiratorySystemData_default_instance_;
class TissueSystemData;
class TissueSystemDataDefaultTypeInternal;
extern TissueSystemDataDefaultTypeInternal _TissueSystemData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::BloodChemistrySystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BloodChemistrySystemData>(Arena*);
template<> ::pulse::cdm::bind::CardiovascularSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CardiovascularSystemData>(Arena*);
template<> ::pulse::cdm::bind::DrugSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DrugSystemData>(Arena*);
template<> ::pulse::cdm::bind::EndocrineSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EndocrineSystemData>(Arena*);
template<> ::pulse::cdm::bind::EnergySystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::EnergySystemData>(Arena*);
template<> ::pulse::cdm::bind::GastrointestinalSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::GastrointestinalSystemData>(Arena*);
template<> ::pulse::cdm::bind::HepaticSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::HepaticSystemData>(Arena*);
template<> ::pulse::cdm::bind::NervousSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::NervousSystemData>(Arena*);
template<> ::pulse::cdm::bind::PupillaryResponseData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PupillaryResponseData>(Arena*);
template<> ::pulse::cdm::bind::RenalSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::RenalSystemData>(Arena*);
template<> ::pulse::cdm::bind::RespiratorySystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::RespiratorySystemData>(Arena*);
template<> ::pulse::cdm::bind::TissueSystemData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TissueSystemData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum eHeartRhythm : int {
  NormalSinus = 0,
  Asystolic = 1,
  eHeartRhythm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eHeartRhythm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eHeartRhythm_IsValid(int value);
constexpr eHeartRhythm eHeartRhythm_MIN = NormalSinus;
constexpr eHeartRhythm eHeartRhythm_MAX = Asystolic;
constexpr int eHeartRhythm_ARRAYSIZE = eHeartRhythm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eHeartRhythm_descriptor();
template<typename T>
inline const std::string& eHeartRhythm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eHeartRhythm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eHeartRhythm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eHeartRhythm_descriptor(), enum_t_value);
}
inline bool eHeartRhythm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eHeartRhythm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eHeartRhythm>(
    eHeartRhythm_descriptor(), name, value);
}
enum eBreathState : int {
  Inhale = 0,
  Pause = 1,
  Exhale = 2,
  eBreathState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eBreathState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eBreathState_IsValid(int value);
constexpr eBreathState eBreathState_MIN = Inhale;
constexpr eBreathState eBreathState_MAX = Exhale;
constexpr int eBreathState_ARRAYSIZE = eBreathState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eBreathState_descriptor();
template<typename T>
inline const std::string& eBreathState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eBreathState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eBreathState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eBreathState_descriptor(), enum_t_value);
}
inline bool eBreathState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eBreathState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eBreathState>(
    eBreathState_descriptor(), name, value);
}
// ===================================================================

class PupillaryResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PupillaryResponseData) */ {
 public:
  inline PupillaryResponseData() : PupillaryResponseData(nullptr) {}
  virtual ~PupillaryResponseData();

  PupillaryResponseData(const PupillaryResponseData& from);
  PupillaryResponseData(PupillaryResponseData&& from) noexcept
    : PupillaryResponseData() {
    *this = ::std::move(from);
  }

  inline PupillaryResponseData& operator=(const PupillaryResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PupillaryResponseData& operator=(PupillaryResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PupillaryResponseData& default_instance();

  static inline const PupillaryResponseData* internal_default_instance() {
    return reinterpret_cast<const PupillaryResponseData*>(
               &_PupillaryResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PupillaryResponseData& a, PupillaryResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(PupillaryResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PupillaryResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PupillaryResponseData* New() const final {
    return CreateMaybeMessage<PupillaryResponseData>(nullptr);
  }

  PupillaryResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PupillaryResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PupillaryResponseData& from);
  void MergeFrom(const PupillaryResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PupillaryResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PupillaryResponseData";
  }
  protected:
  explicit PupillaryResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactivityModifierFieldNumber = 1,
    kShapeModifierFieldNumber = 2,
    kSizeModifierFieldNumber = 3,
  };
  // .pulse.cdm.bind.ScalarNegative1To1Data ReactivityModifier = 1;
  bool has_reactivitymodifier() const;
  private:
  bool _internal_has_reactivitymodifier() const;
  public:
  void clear_reactivitymodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& reactivitymodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_reactivitymodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_reactivitymodifier();
  void set_allocated_reactivitymodifier(::pulse::cdm::bind::ScalarNegative1To1Data* reactivitymodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_reactivitymodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_reactivitymodifier();
  public:
  void unsafe_arena_set_allocated_reactivitymodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* reactivitymodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_reactivitymodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data ShapeModifier = 2;
  bool has_shapemodifier() const;
  private:
  bool _internal_has_shapemodifier() const;
  public:
  void clear_shapemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& shapemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_shapemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_shapemodifier();
  void set_allocated_shapemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* shapemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_shapemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_shapemodifier();
  public:
  void unsafe_arena_set_allocated_shapemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* shapemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_shapemodifier();

  // .pulse.cdm.bind.ScalarNegative1To1Data SizeModifier = 3;
  bool has_sizemodifier() const;
  private:
  bool _internal_has_sizemodifier() const;
  public:
  void clear_sizemodifier();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& sizemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_sizemodifier();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_sizemodifier();
  void set_allocated_sizemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* sizemodifier);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_sizemodifier() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_sizemodifier();
  public:
  void unsafe_arena_set_allocated_sizemodifier(
      ::pulse::cdm::bind::ScalarNegative1To1Data* sizemodifier);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_sizemodifier();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PupillaryResponseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* reactivitymodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* shapemodifier_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* sizemodifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class BloodChemistrySystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BloodChemistrySystemData) */ {
 public:
  inline BloodChemistrySystemData() : BloodChemistrySystemData(nullptr) {}
  virtual ~BloodChemistrySystemData();

  BloodChemistrySystemData(const BloodChemistrySystemData& from);
  BloodChemistrySystemData(BloodChemistrySystemData&& from) noexcept
    : BloodChemistrySystemData() {
    *this = ::std::move(from);
  }

  inline BloodChemistrySystemData& operator=(const BloodChemistrySystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloodChemistrySystemData& operator=(BloodChemistrySystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BloodChemistrySystemData& default_instance();

  static inline const BloodChemistrySystemData* internal_default_instance() {
    return reinterpret_cast<const BloodChemistrySystemData*>(
               &_BloodChemistrySystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BloodChemistrySystemData& a, BloodChemistrySystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(BloodChemistrySystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloodChemistrySystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BloodChemistrySystemData* New() const final {
    return CreateMaybeMessage<BloodChemistrySystemData>(nullptr);
  }

  BloodChemistrySystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BloodChemistrySystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BloodChemistrySystemData& from);
  void MergeFrom(const BloodChemistrySystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloodChemistrySystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BloodChemistrySystemData";
  }
  protected:
  explicit BloodChemistrySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBloodDensityFieldNumber = 1,
    kBloodPHFieldNumber = 2,
    kBloodSpecificHeatFieldNumber = 3,
    kBloodUreaNitrogenConcentrationFieldNumber = 4,
    kCarbonDioxideSaturationFieldNumber = 5,
    kCarbonMonoxideSaturationFieldNumber = 6,
    kHematocritFieldNumber = 7,
    kHemoglobinContentFieldNumber = 8,
    kOxygenSaturationFieldNumber = 9,
    kPhosphateFieldNumber = 10,
    kPlasmaVolumeFieldNumber = 11,
    kPulseOximetryFieldNumber = 12,
    kRedBloodCellCountFieldNumber = 13,
    kShuntFractionFieldNumber = 14,
    kStrongIonDifferenceFieldNumber = 15,
    kTotalProteinConcentrationFieldNumber = 16,
    kVolumeFractionNeutralLipidInPlasmaFieldNumber = 17,
    kVolumeFractionNeutralPhospholipidInPlasmaFieldNumber = 18,
    kWhiteBloodCellCountFieldNumber = 19,
    kArterialCarbonDioxidePressureFieldNumber = 20,
    kArterialOxygenPressureFieldNumber = 21,
    kPulmonaryArterialCarbonDioxidePressureFieldNumber = 22,
    kPulmonaryArterialOxygenPressureFieldNumber = 23,
    kPulmonaryVenousCarbonDioxidePressureFieldNumber = 24,
    kPulmonaryVenousOxygenPressureFieldNumber = 25,
    kVenousCarbonDioxidePressureFieldNumber = 26,
    kVenousOxygenPressureFieldNumber = 27,
  };
  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodDensity = 1;
  bool has_blooddensity() const;
  private:
  bool _internal_has_blooddensity() const;
  public:
  void clear_blooddensity();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& blooddensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_blooddensity();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_blooddensity();
  void set_allocated_blooddensity(::pulse::cdm::bind::ScalarMassPerVolumeData* blooddensity);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_blooddensity() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_blooddensity();
  public:
  void unsafe_arena_set_allocated_blooddensity(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* blooddensity);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_blooddensity();

  // .pulse.cdm.bind.ScalarData BloodPH = 2;
  bool has_bloodph() const;
  private:
  bool _internal_has_bloodph() const;
  public:
  void clear_bloodph();
  const ::pulse::cdm::bind::ScalarData& bloodph() const;
  ::pulse::cdm::bind::ScalarData* release_bloodph();
  ::pulse::cdm::bind::ScalarData* mutable_bloodph();
  void set_allocated_bloodph(::pulse::cdm::bind::ScalarData* bloodph);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_bloodph() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_bloodph();
  public:
  void unsafe_arena_set_allocated_bloodph(
      ::pulse::cdm::bind::ScalarData* bloodph);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_bloodph();

  // .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BloodSpecificHeat = 3;
  bool has_bloodspecificheat() const;
  private:
  bool _internal_has_bloodspecificheat() const;
  public:
  void clear_bloodspecificheat();
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& bloodspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* release_bloodspecificheat();
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* mutable_bloodspecificheat();
  void set_allocated_bloodspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bloodspecificheat);
  private:
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& _internal_bloodspecificheat() const;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* _internal_mutable_bloodspecificheat();
  public:
  void unsafe_arena_set_allocated_bloodspecificheat(
      ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bloodspecificheat);
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* unsafe_arena_release_bloodspecificheat();

  // .pulse.cdm.bind.ScalarMassPerVolumeData BloodUreaNitrogenConcentration = 4;
  bool has_bloodureanitrogenconcentration() const;
  private:
  bool _internal_has_bloodureanitrogenconcentration() const;
  public:
  void clear_bloodureanitrogenconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& bloodureanitrogenconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_bloodureanitrogenconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_bloodureanitrogenconcentration();
  void set_allocated_bloodureanitrogenconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* bloodureanitrogenconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_bloodureanitrogenconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_bloodureanitrogenconcentration();
  public:
  void unsafe_arena_set_allocated_bloodureanitrogenconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodureanitrogenconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_bloodureanitrogenconcentration();

  // .pulse.cdm.bind.Scalar0To1Data CarbonDioxideSaturation = 5;
  bool has_carbondioxidesaturation() const;
  private:
  bool _internal_has_carbondioxidesaturation() const;
  public:
  void clear_carbondioxidesaturation();
  const ::pulse::cdm::bind::Scalar0To1Data& carbondioxidesaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_carbondioxidesaturation();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_carbondioxidesaturation();
  void set_allocated_carbondioxidesaturation(::pulse::cdm::bind::Scalar0To1Data* carbondioxidesaturation);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_carbondioxidesaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_carbondioxidesaturation();
  public:
  void unsafe_arena_set_allocated_carbondioxidesaturation(
      ::pulse::cdm::bind::Scalar0To1Data* carbondioxidesaturation);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_carbondioxidesaturation();

  // .pulse.cdm.bind.Scalar0To1Data CarbonMonoxideSaturation = 6;
  bool has_carbonmonoxidesaturation() const;
  private:
  bool _internal_has_carbonmonoxidesaturation() const;
  public:
  void clear_carbonmonoxidesaturation();
  const ::pulse::cdm::bind::Scalar0To1Data& carbonmonoxidesaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_carbonmonoxidesaturation();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_carbonmonoxidesaturation();
  void set_allocated_carbonmonoxidesaturation(::pulse::cdm::bind::Scalar0To1Data* carbonmonoxidesaturation);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_carbonmonoxidesaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_carbonmonoxidesaturation();
  public:
  void unsafe_arena_set_allocated_carbonmonoxidesaturation(
      ::pulse::cdm::bind::Scalar0To1Data* carbonmonoxidesaturation);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_carbonmonoxidesaturation();

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 7;
  bool has_hematocrit() const;
  private:
  bool _internal_has_hematocrit() const;
  public:
  void clear_hematocrit();
  const ::pulse::cdm::bind::Scalar0To1Data& hematocrit() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_hematocrit();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_hematocrit();
  void set_allocated_hematocrit(::pulse::cdm::bind::Scalar0To1Data* hematocrit);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_hematocrit() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_hematocrit();
  public:
  void unsafe_arena_set_allocated_hematocrit(
      ::pulse::cdm::bind::Scalar0To1Data* hematocrit);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_hematocrit();

  // .pulse.cdm.bind.ScalarMassData HemoglobinContent = 8;
  bool has_hemoglobincontent() const;
  private:
  bool _internal_has_hemoglobincontent() const;
  public:
  void clear_hemoglobincontent();
  const ::pulse::cdm::bind::ScalarMassData& hemoglobincontent() const;
  ::pulse::cdm::bind::ScalarMassData* release_hemoglobincontent();
  ::pulse::cdm::bind::ScalarMassData* mutable_hemoglobincontent();
  void set_allocated_hemoglobincontent(::pulse::cdm::bind::ScalarMassData* hemoglobincontent);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_hemoglobincontent() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_hemoglobincontent();
  public:
  void unsafe_arena_set_allocated_hemoglobincontent(
      ::pulse::cdm::bind::ScalarMassData* hemoglobincontent);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_hemoglobincontent();

  // .pulse.cdm.bind.Scalar0To1Data OxygenSaturation = 9;
  bool has_oxygensaturation() const;
  private:
  bool _internal_has_oxygensaturation() const;
  public:
  void clear_oxygensaturation();
  const ::pulse::cdm::bind::Scalar0To1Data& oxygensaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_oxygensaturation();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_oxygensaturation();
  void set_allocated_oxygensaturation(::pulse::cdm::bind::Scalar0To1Data* oxygensaturation);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_oxygensaturation() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_oxygensaturation();
  public:
  void unsafe_arena_set_allocated_oxygensaturation(
      ::pulse::cdm::bind::Scalar0To1Data* oxygensaturation);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_oxygensaturation();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Phosphate = 10;
  bool has_phosphate() const;
  private:
  bool _internal_has_phosphate() const;
  public:
  void clear_phosphate();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& phosphate() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_phosphate();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_phosphate();
  void set_allocated_phosphate(::pulse::cdm::bind::ScalarAmountPerVolumeData* phosphate);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_phosphate() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_phosphate();
  public:
  void unsafe_arena_set_allocated_phosphate(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* phosphate);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_phosphate();

  // .pulse.cdm.bind.ScalarVolumeData PlasmaVolume = 11;
  bool has_plasmavolume() const;
  private:
  bool _internal_has_plasmavolume() const;
  public:
  void clear_plasmavolume();
  const ::pulse::cdm::bind::ScalarVolumeData& plasmavolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_plasmavolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_plasmavolume();
  void set_allocated_plasmavolume(::pulse::cdm::bind::ScalarVolumeData* plasmavolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_plasmavolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_plasmavolume();
  public:
  void unsafe_arena_set_allocated_plasmavolume(
      ::pulse::cdm::bind::ScalarVolumeData* plasmavolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_plasmavolume();

  // .pulse.cdm.bind.Scalar0To1Data PulseOximetry = 12;
  bool has_pulseoximetry() const;
  private:
  bool _internal_has_pulseoximetry() const;
  public:
  void clear_pulseoximetry();
  const ::pulse::cdm::bind::Scalar0To1Data& pulseoximetry() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_pulseoximetry();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_pulseoximetry();
  void set_allocated_pulseoximetry(::pulse::cdm::bind::Scalar0To1Data* pulseoximetry);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_pulseoximetry() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_pulseoximetry();
  public:
  void unsafe_arena_set_allocated_pulseoximetry(
      ::pulse::cdm::bind::Scalar0To1Data* pulseoximetry);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_pulseoximetry();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 13;
  bool has_redbloodcellcount() const;
  private:
  bool _internal_has_redbloodcellcount() const;
  public:
  void clear_redbloodcellcount();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& redbloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_redbloodcellcount();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_redbloodcellcount();
  void set_allocated_redbloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_redbloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_redbloodcellcount();
  public:
  void unsafe_arena_set_allocated_redbloodcellcount(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_redbloodcellcount();

  // .pulse.cdm.bind.Scalar0To1Data ShuntFraction = 14;
  bool has_shuntfraction() const;
  private:
  bool _internal_has_shuntfraction() const;
  public:
  void clear_shuntfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& shuntfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_shuntfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_shuntfraction();
  void set_allocated_shuntfraction(::pulse::cdm::bind::Scalar0To1Data* shuntfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_shuntfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_shuntfraction();
  public:
  void unsafe_arena_set_allocated_shuntfraction(
      ::pulse::cdm::bind::Scalar0To1Data* shuntfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_shuntfraction();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData StrongIonDifference = 15;
  bool has_strongiondifference() const;
  private:
  bool _internal_has_strongiondifference() const;
  public:
  void clear_strongiondifference();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& strongiondifference() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_strongiondifference();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_strongiondifference();
  void set_allocated_strongiondifference(::pulse::cdm::bind::ScalarAmountPerVolumeData* strongiondifference);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_strongiondifference() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_strongiondifference();
  public:
  void unsafe_arena_set_allocated_strongiondifference(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* strongiondifference);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_strongiondifference();

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProteinConcentration = 16;
  bool has_totalproteinconcentration() const;
  private:
  bool _internal_has_totalproteinconcentration() const;
  public:
  void clear_totalproteinconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalproteinconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_totalproteinconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_totalproteinconcentration();
  void set_allocated_totalproteinconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* totalproteinconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_totalproteinconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_totalproteinconcentration();
  public:
  void unsafe_arena_set_allocated_totalproteinconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* totalproteinconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_totalproteinconcentration();

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralLipidInPlasma = 17;
  bool has_volumefractionneutrallipidinplasma() const;
  private:
  bool _internal_has_volumefractionneutrallipidinplasma() const;
  public:
  void clear_volumefractionneutrallipidinplasma();
  const ::pulse::cdm::bind::Scalar0To1Data& volumefractionneutrallipidinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_volumefractionneutrallipidinplasma();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_volumefractionneutrallipidinplasma();
  void set_allocated_volumefractionneutrallipidinplasma(::pulse::cdm::bind::Scalar0To1Data* volumefractionneutrallipidinplasma);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_volumefractionneutrallipidinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_volumefractionneutrallipidinplasma();
  public:
  void unsafe_arena_set_allocated_volumefractionneutrallipidinplasma(
      ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutrallipidinplasma);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_volumefractionneutrallipidinplasma();

  // .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralPhospholipidInPlasma = 18;
  bool has_volumefractionneutralphospholipidinplasma() const;
  private:
  bool _internal_has_volumefractionneutralphospholipidinplasma() const;
  public:
  void clear_volumefractionneutralphospholipidinplasma();
  const ::pulse::cdm::bind::Scalar0To1Data& volumefractionneutralphospholipidinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_volumefractionneutralphospholipidinplasma();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_volumefractionneutralphospholipidinplasma();
  void set_allocated_volumefractionneutralphospholipidinplasma(::pulse::cdm::bind::Scalar0To1Data* volumefractionneutralphospholipidinplasma);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_volumefractionneutralphospholipidinplasma() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_volumefractionneutralphospholipidinplasma();
  public:
  void unsafe_arena_set_allocated_volumefractionneutralphospholipidinplasma(
      ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutralphospholipidinplasma);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_volumefractionneutralphospholipidinplasma();

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 19;
  bool has_whitebloodcellcount() const;
  private:
  bool _internal_has_whitebloodcellcount() const;
  public:
  void clear_whitebloodcellcount();
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& whitebloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* release_whitebloodcellcount();
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* mutable_whitebloodcellcount();
  void set_allocated_whitebloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData& _internal_whitebloodcellcount() const;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* _internal_mutable_whitebloodcellcount();
  public:
  void unsafe_arena_set_allocated_whitebloodcellcount(
      ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount);
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* unsafe_arena_release_whitebloodcellcount();

  // .pulse.cdm.bind.ScalarPressureData ArterialCarbonDioxidePressure = 20;
  bool has_arterialcarbondioxidepressure() const;
  private:
  bool _internal_has_arterialcarbondioxidepressure() const;
  public:
  void clear_arterialcarbondioxidepressure();
  const ::pulse::cdm::bind::ScalarPressureData& arterialcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_arterialcarbondioxidepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_arterialcarbondioxidepressure();
  void set_allocated_arterialcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* arterialcarbondioxidepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_arterialcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_arterialcarbondioxidepressure();
  public:
  void unsafe_arena_set_allocated_arterialcarbondioxidepressure(
      ::pulse::cdm::bind::ScalarPressureData* arterialcarbondioxidepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_arterialcarbondioxidepressure();

  // .pulse.cdm.bind.ScalarPressureData ArterialOxygenPressure = 21;
  bool has_arterialoxygenpressure() const;
  private:
  bool _internal_has_arterialoxygenpressure() const;
  public:
  void clear_arterialoxygenpressure();
  const ::pulse::cdm::bind::ScalarPressureData& arterialoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_arterialoxygenpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_arterialoxygenpressure();
  void set_allocated_arterialoxygenpressure(::pulse::cdm::bind::ScalarPressureData* arterialoxygenpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_arterialoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_arterialoxygenpressure();
  public:
  void unsafe_arena_set_allocated_arterialoxygenpressure(
      ::pulse::cdm::bind::ScalarPressureData* arterialoxygenpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_arterialoxygenpressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialCarbonDioxidePressure = 22;
  bool has_pulmonaryarterialcarbondioxidepressure() const;
  private:
  bool _internal_has_pulmonaryarterialcarbondioxidepressure() const;
  public:
  void clear_pulmonaryarterialcarbondioxidepressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonaryarterialcarbondioxidepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonaryarterialcarbondioxidepressure();
  void set_allocated_pulmonaryarterialcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialcarbondioxidepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonaryarterialcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonaryarterialcarbondioxidepressure();
  public:
  void unsafe_arena_set_allocated_pulmonaryarterialcarbondioxidepressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialcarbondioxidepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonaryarterialcarbondioxidepressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialOxygenPressure = 23;
  bool has_pulmonaryarterialoxygenpressure() const;
  private:
  bool _internal_has_pulmonaryarterialoxygenpressure() const;
  public:
  void clear_pulmonaryarterialoxygenpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonaryarterialoxygenpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonaryarterialoxygenpressure();
  void set_allocated_pulmonaryarterialoxygenpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialoxygenpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonaryarterialoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonaryarterialoxygenpressure();
  public:
  void unsafe_arena_set_allocated_pulmonaryarterialoxygenpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialoxygenpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonaryarterialoxygenpressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousCarbonDioxidePressure = 24;
  bool has_pulmonaryvenouscarbondioxidepressure() const;
  private:
  bool _internal_has_pulmonaryvenouscarbondioxidepressure() const;
  public:
  void clear_pulmonaryvenouscarbondioxidepressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonaryvenouscarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonaryvenouscarbondioxidepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonaryvenouscarbondioxidepressure();
  void set_allocated_pulmonaryvenouscarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryvenouscarbondioxidepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonaryvenouscarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonaryvenouscarbondioxidepressure();
  public:
  void unsafe_arena_set_allocated_pulmonaryvenouscarbondioxidepressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenouscarbondioxidepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonaryvenouscarbondioxidepressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryVenousOxygenPressure = 25;
  bool has_pulmonaryvenousoxygenpressure() const;
  private:
  bool _internal_has_pulmonaryvenousoxygenpressure() const;
  public:
  void clear_pulmonaryvenousoxygenpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonaryvenousoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonaryvenousoxygenpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonaryvenousoxygenpressure();
  void set_allocated_pulmonaryvenousoxygenpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryvenousoxygenpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonaryvenousoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonaryvenousoxygenpressure();
  public:
  void unsafe_arena_set_allocated_pulmonaryvenousoxygenpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenousoxygenpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonaryvenousoxygenpressure();

  // .pulse.cdm.bind.ScalarPressureData VenousCarbonDioxidePressure = 26;
  bool has_venouscarbondioxidepressure() const;
  private:
  bool _internal_has_venouscarbondioxidepressure() const;
  public:
  void clear_venouscarbondioxidepressure();
  const ::pulse::cdm::bind::ScalarPressureData& venouscarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_venouscarbondioxidepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_venouscarbondioxidepressure();
  void set_allocated_venouscarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* venouscarbondioxidepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_venouscarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_venouscarbondioxidepressure();
  public:
  void unsafe_arena_set_allocated_venouscarbondioxidepressure(
      ::pulse::cdm::bind::ScalarPressureData* venouscarbondioxidepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_venouscarbondioxidepressure();

  // .pulse.cdm.bind.ScalarPressureData VenousOxygenPressure = 27;
  bool has_venousoxygenpressure() const;
  private:
  bool _internal_has_venousoxygenpressure() const;
  public:
  void clear_venousoxygenpressure();
  const ::pulse::cdm::bind::ScalarPressureData& venousoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_venousoxygenpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_venousoxygenpressure();
  void set_allocated_venousoxygenpressure(::pulse::cdm::bind::ScalarPressureData* venousoxygenpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_venousoxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_venousoxygenpressure();
  public:
  void unsafe_arena_set_allocated_venousoxygenpressure(
      ::pulse::cdm::bind::ScalarPressureData* venousoxygenpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_venousoxygenpressure();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BloodChemistrySystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* blooddensity_;
  ::pulse::cdm::bind::ScalarData* bloodph_;
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bloodspecificheat_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodureanitrogenconcentration_;
  ::pulse::cdm::bind::Scalar0To1Data* carbondioxidesaturation_;
  ::pulse::cdm::bind::Scalar0To1Data* carbonmonoxidesaturation_;
  ::pulse::cdm::bind::Scalar0To1Data* hematocrit_;
  ::pulse::cdm::bind::ScalarMassData* hemoglobincontent_;
  ::pulse::cdm::bind::Scalar0To1Data* oxygensaturation_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* phosphate_;
  ::pulse::cdm::bind::ScalarVolumeData* plasmavolume_;
  ::pulse::cdm::bind::Scalar0To1Data* pulseoximetry_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount_;
  ::pulse::cdm::bind::Scalar0To1Data* shuntfraction_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* strongiondifference_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* totalproteinconcentration_;
  ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutrallipidinplasma_;
  ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutralphospholipidinplasma_;
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount_;
  ::pulse::cdm::bind::ScalarPressureData* arterialcarbondioxidepressure_;
  ::pulse::cdm::bind::ScalarPressureData* arterialoxygenpressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialcarbondioxidepressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialoxygenpressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenouscarbondioxidepressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenousoxygenpressure_;
  ::pulse::cdm::bind::ScalarPressureData* venouscarbondioxidepressure_;
  ::pulse::cdm::bind::ScalarPressureData* venousoxygenpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class CardiovascularSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CardiovascularSystemData) */ {
 public:
  inline CardiovascularSystemData() : CardiovascularSystemData(nullptr) {}
  virtual ~CardiovascularSystemData();

  CardiovascularSystemData(const CardiovascularSystemData& from);
  CardiovascularSystemData(CardiovascularSystemData&& from) noexcept
    : CardiovascularSystemData() {
    *this = ::std::move(from);
  }

  inline CardiovascularSystemData& operator=(const CardiovascularSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardiovascularSystemData& operator=(CardiovascularSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardiovascularSystemData& default_instance();

  static inline const CardiovascularSystemData* internal_default_instance() {
    return reinterpret_cast<const CardiovascularSystemData*>(
               &_CardiovascularSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CardiovascularSystemData& a, CardiovascularSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardiovascularSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardiovascularSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardiovascularSystemData* New() const final {
    return CreateMaybeMessage<CardiovascularSystemData>(nullptr);
  }

  CardiovascularSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardiovascularSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardiovascularSystemData& from);
  void MergeFrom(const CardiovascularSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardiovascularSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CardiovascularSystemData";
  }
  protected:
  explicit CardiovascularSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArterialPressureFieldNumber = 1,
    kBloodVolumeFieldNumber = 2,
    kCardiacIndexFieldNumber = 3,
    kCardiacOutputFieldNumber = 4,
    kCentralVenousPressureFieldNumber = 5,
    kCerebralBloodFlowFieldNumber = 6,
    kCerebralPerfusionPressureFieldNumber = 7,
    kDiastolicArterialPressureFieldNumber = 8,
    kHeartEjectionFractionFieldNumber = 9,
    kHeartRateFieldNumber = 10,
    kHeartStrokeVolumeFieldNumber = 12,
    kIntracranialPressureFieldNumber = 13,
    kMeanArterialPressureFieldNumber = 14,
    kMeanArterialCarbonDioxidePartialPressureFieldNumber = 15,
    kMeanArterialCarbonDioxidePartialPressureDeltaFieldNumber = 16,
    kMeanCentralVenousPressureFieldNumber = 17,
    kMeanSkinFlowFieldNumber = 18,
    kPulmonaryArterialPressureFieldNumber = 19,
    kPulmonaryCapillariesWedgePressureFieldNumber = 20,
    kPulmonaryDiastolicArterialPressureFieldNumber = 21,
    kPulmonaryMeanArterialPressureFieldNumber = 22,
    kPulmonaryMeanCapillaryFlowFieldNumber = 23,
    kPulmonaryMeanShuntFlowFieldNumber = 24,
    kPulmonarySystolicArterialPressureFieldNumber = 25,
    kPulmonaryVascularResistanceFieldNumber = 26,
    kPulmonaryVascularResistanceIndexFieldNumber = 27,
    kPulsePressureFieldNumber = 28,
    kSystemicVascularResistanceFieldNumber = 29,
    kSystolicArterialPressureFieldNumber = 30,
    kTotalHemorrhageRateFieldNumber = 31,
    kTotalHemorrhagedVolumeFieldNumber = 32,
    kHeartRhythmFieldNumber = 11,
  };
  // .pulse.cdm.bind.ScalarPressureData ArterialPressure = 1;
  bool has_arterialpressure() const;
  private:
  bool _internal_has_arterialpressure() const;
  public:
  void clear_arterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& arterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_arterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_arterialpressure();
  void set_allocated_arterialpressure(::pulse::cdm::bind::ScalarPressureData* arterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_arterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_arterialpressure();
  public:
  void unsafe_arena_set_allocated_arterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* arterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_arterialpressure();

  // .pulse.cdm.bind.ScalarVolumeData BloodVolume = 2;
  bool has_bloodvolume() const;
  private:
  bool _internal_has_bloodvolume() const;
  public:
  void clear_bloodvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& bloodvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_bloodvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_bloodvolume();
  void set_allocated_bloodvolume(::pulse::cdm::bind::ScalarVolumeData* bloodvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_bloodvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_bloodvolume();
  public:
  void unsafe_arena_set_allocated_bloodvolume(
      ::pulse::cdm::bind::ScalarVolumeData* bloodvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_bloodvolume();

  // .pulse.cdm.bind.ScalarVolumePerTimeAreaData CardiacIndex = 3;
  bool has_cardiacindex() const;
  private:
  bool _internal_has_cardiacindex() const;
  public:
  void clear_cardiacindex();
  const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData& cardiacindex() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* release_cardiacindex();
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* mutable_cardiacindex();
  void set_allocated_cardiacindex(::pulse::cdm::bind::ScalarVolumePerTimeAreaData* cardiacindex);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData& _internal_cardiacindex() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* _internal_mutable_cardiacindex();
  public:
  void unsafe_arena_set_allocated_cardiacindex(
      ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* cardiacindex);
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* unsafe_arena_release_cardiacindex();

  // .pulse.cdm.bind.ScalarVolumePerTimeData CardiacOutput = 4;
  bool has_cardiacoutput() const;
  private:
  bool _internal_has_cardiacoutput() const;
  public:
  void clear_cardiacoutput();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& cardiacoutput() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_cardiacoutput();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_cardiacoutput();
  void set_allocated_cardiacoutput(::pulse::cdm::bind::ScalarVolumePerTimeData* cardiacoutput);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_cardiacoutput() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_cardiacoutput();
  public:
  void unsafe_arena_set_allocated_cardiacoutput(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* cardiacoutput);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_cardiacoutput();

  // .pulse.cdm.bind.ScalarPressureData CentralVenousPressure = 5;
  bool has_centralvenouspressure() const;
  private:
  bool _internal_has_centralvenouspressure() const;
  public:
  void clear_centralvenouspressure();
  const ::pulse::cdm::bind::ScalarPressureData& centralvenouspressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_centralvenouspressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_centralvenouspressure();
  void set_allocated_centralvenouspressure(::pulse::cdm::bind::ScalarPressureData* centralvenouspressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_centralvenouspressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_centralvenouspressure();
  public:
  void unsafe_arena_set_allocated_centralvenouspressure(
      ::pulse::cdm::bind::ScalarPressureData* centralvenouspressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_centralvenouspressure();

  // .pulse.cdm.bind.ScalarVolumePerTimeData CerebralBloodFlow = 6;
  bool has_cerebralbloodflow() const;
  private:
  bool _internal_has_cerebralbloodflow() const;
  public:
  void clear_cerebralbloodflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& cerebralbloodflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_cerebralbloodflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_cerebralbloodflow();
  void set_allocated_cerebralbloodflow(::pulse::cdm::bind::ScalarVolumePerTimeData* cerebralbloodflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_cerebralbloodflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_cerebralbloodflow();
  public:
  void unsafe_arena_set_allocated_cerebralbloodflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* cerebralbloodflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_cerebralbloodflow();

  // .pulse.cdm.bind.ScalarPressureData CerebralPerfusionPressure = 7;
  bool has_cerebralperfusionpressure() const;
  private:
  bool _internal_has_cerebralperfusionpressure() const;
  public:
  void clear_cerebralperfusionpressure();
  const ::pulse::cdm::bind::ScalarPressureData& cerebralperfusionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_cerebralperfusionpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_cerebralperfusionpressure();
  void set_allocated_cerebralperfusionpressure(::pulse::cdm::bind::ScalarPressureData* cerebralperfusionpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_cerebralperfusionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_cerebralperfusionpressure();
  public:
  void unsafe_arena_set_allocated_cerebralperfusionpressure(
      ::pulse::cdm::bind::ScalarPressureData* cerebralperfusionpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_cerebralperfusionpressure();

  // .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressure = 8;
  bool has_diastolicarterialpressure() const;
  private:
  bool _internal_has_diastolicarterialpressure() const;
  public:
  void clear_diastolicarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& diastolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_diastolicarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_diastolicarterialpressure();
  void set_allocated_diastolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_diastolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_diastolicarterialpressure();
  public:
  void unsafe_arena_set_allocated_diastolicarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_diastolicarterialpressure();

  // .pulse.cdm.bind.Scalar0To1Data HeartEjectionFraction = 9;
  bool has_heartejectionfraction() const;
  private:
  bool _internal_has_heartejectionfraction() const;
  public:
  void clear_heartejectionfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& heartejectionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_heartejectionfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_heartejectionfraction();
  void set_allocated_heartejectionfraction(::pulse::cdm::bind::Scalar0To1Data* heartejectionfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_heartejectionfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_heartejectionfraction();
  public:
  void unsafe_arena_set_allocated_heartejectionfraction(
      ::pulse::cdm::bind::Scalar0To1Data* heartejectionfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_heartejectionfraction();

  // .pulse.cdm.bind.ScalarFrequencyData HeartRate = 10;
  bool has_heartrate() const;
  private:
  bool _internal_has_heartrate() const;
  public:
  void clear_heartrate();
  const ::pulse::cdm::bind::ScalarFrequencyData& heartrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_heartrate();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_heartrate();
  void set_allocated_heartrate(::pulse::cdm::bind::ScalarFrequencyData* heartrate);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_heartrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_heartrate();
  public:
  void unsafe_arena_set_allocated_heartrate(
      ::pulse::cdm::bind::ScalarFrequencyData* heartrate);
  ::pulse::cdm::bind::ScalarFrequencyData* unsafe_arena_release_heartrate();

  // .pulse.cdm.bind.ScalarVolumeData HeartStrokeVolume = 12;
  bool has_heartstrokevolume() const;
  private:
  bool _internal_has_heartstrokevolume() const;
  public:
  void clear_heartstrokevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& heartstrokevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_heartstrokevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_heartstrokevolume();
  void set_allocated_heartstrokevolume(::pulse::cdm::bind::ScalarVolumeData* heartstrokevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_heartstrokevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_heartstrokevolume();
  public:
  void unsafe_arena_set_allocated_heartstrokevolume(
      ::pulse::cdm::bind::ScalarVolumeData* heartstrokevolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_heartstrokevolume();

  // .pulse.cdm.bind.ScalarPressureData IntracranialPressure = 13;
  bool has_intracranialpressure() const;
  private:
  bool _internal_has_intracranialpressure() const;
  public:
  void clear_intracranialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& intracranialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_intracranialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_intracranialpressure();
  void set_allocated_intracranialpressure(::pulse::cdm::bind::ScalarPressureData* intracranialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_intracranialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_intracranialpressure();
  public:
  void unsafe_arena_set_allocated_intracranialpressure(
      ::pulse::cdm::bind::ScalarPressureData* intracranialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_intracranialpressure();

  // .pulse.cdm.bind.ScalarPressureData MeanArterialPressure = 14;
  bool has_meanarterialpressure() const;
  private:
  bool _internal_has_meanarterialpressure() const;
  public:
  void clear_meanarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& meanarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanarterialpressure();
  void set_allocated_meanarterialpressure(::pulse::cdm::bind::ScalarPressureData* meanarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanarterialpressure();
  public:
  void unsafe_arena_set_allocated_meanarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* meanarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meanarterialpressure();

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressure = 15;
  bool has_meanarterialcarbondioxidepartialpressure() const;
  private:
  bool _internal_has_meanarterialcarbondioxidepartialpressure() const;
  public:
  void clear_meanarterialcarbondioxidepartialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& meanarterialcarbondioxidepartialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanarterialcarbondioxidepartialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanarterialcarbondioxidepartialpressure();
  void set_allocated_meanarterialcarbondioxidepartialpressure(::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanarterialcarbondioxidepartialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanarterialcarbondioxidepartialpressure();
  public:
  void unsafe_arena_set_allocated_meanarterialcarbondioxidepartialpressure(
      ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meanarterialcarbondioxidepartialpressure();

  // .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta = 16;
  bool has_meanarterialcarbondioxidepartialpressuredelta() const;
  private:
  bool _internal_has_meanarterialcarbondioxidepartialpressuredelta() const;
  public:
  void clear_meanarterialcarbondioxidepartialpressuredelta();
  const ::pulse::cdm::bind::ScalarPressureData& meanarterialcarbondioxidepartialpressuredelta() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanarterialcarbondioxidepartialpressuredelta();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanarterialcarbondioxidepartialpressuredelta();
  void set_allocated_meanarterialcarbondioxidepartialpressuredelta(::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressuredelta);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanarterialcarbondioxidepartialpressuredelta() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanarterialcarbondioxidepartialpressuredelta();
  public:
  void unsafe_arena_set_allocated_meanarterialcarbondioxidepartialpressuredelta(
      ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressuredelta);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meanarterialcarbondioxidepartialpressuredelta();

  // .pulse.cdm.bind.ScalarPressureData MeanCentralVenousPressure = 17;
  bool has_meancentralvenouspressure() const;
  private:
  bool _internal_has_meancentralvenouspressure() const;
  public:
  void clear_meancentralvenouspressure();
  const ::pulse::cdm::bind::ScalarPressureData& meancentralvenouspressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meancentralvenouspressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meancentralvenouspressure();
  void set_allocated_meancentralvenouspressure(::pulse::cdm::bind::ScalarPressureData* meancentralvenouspressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meancentralvenouspressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meancentralvenouspressure();
  public:
  void unsafe_arena_set_allocated_meancentralvenouspressure(
      ::pulse::cdm::bind::ScalarPressureData* meancentralvenouspressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meancentralvenouspressure();

  // .pulse.cdm.bind.ScalarVolumePerTimeData MeanSkinFlow = 18;
  bool has_meanskinflow() const;
  private:
  bool _internal_has_meanskinflow() const;
  public:
  void clear_meanskinflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& meanskinflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_meanskinflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_meanskinflow();
  void set_allocated_meanskinflow(::pulse::cdm::bind::ScalarVolumePerTimeData* meanskinflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_meanskinflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_meanskinflow();
  public:
  void unsafe_arena_set_allocated_meanskinflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* meanskinflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_meanskinflow();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryArterialPressure = 19;
  bool has_pulmonaryarterialpressure() const;
  private:
  bool _internal_has_pulmonaryarterialpressure() const;
  public:
  void clear_pulmonaryarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonaryarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonaryarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonaryarterialpressure();
  void set_allocated_pulmonaryarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonaryarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonaryarterialpressure();
  public:
  void unsafe_arena_set_allocated_pulmonaryarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonaryarterialpressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryCapillariesWedgePressure = 20;
  bool has_pulmonarycapillarieswedgepressure() const;
  private:
  bool _internal_has_pulmonarycapillarieswedgepressure() const;
  public:
  void clear_pulmonarycapillarieswedgepressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonarycapillarieswedgepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonarycapillarieswedgepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonarycapillarieswedgepressure();
  void set_allocated_pulmonarycapillarieswedgepressure(::pulse::cdm::bind::ScalarPressureData* pulmonarycapillarieswedgepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonarycapillarieswedgepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonarycapillarieswedgepressure();
  public:
  void unsafe_arena_set_allocated_pulmonarycapillarieswedgepressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonarycapillarieswedgepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonarycapillarieswedgepressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryDiastolicArterialPressure = 21;
  bool has_pulmonarydiastolicarterialpressure() const;
  private:
  bool _internal_has_pulmonarydiastolicarterialpressure() const;
  public:
  void clear_pulmonarydiastolicarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonarydiastolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonarydiastolicarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonarydiastolicarterialpressure();
  void set_allocated_pulmonarydiastolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarydiastolicarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonarydiastolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonarydiastolicarterialpressure();
  public:
  void unsafe_arena_set_allocated_pulmonarydiastolicarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonarydiastolicarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonarydiastolicarterialpressure();

  // .pulse.cdm.bind.ScalarPressureData PulmonaryMeanArterialPressure = 22;
  bool has_pulmonarymeanarterialpressure() const;
  private:
  bool _internal_has_pulmonarymeanarterialpressure() const;
  public:
  void clear_pulmonarymeanarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonarymeanarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonarymeanarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonarymeanarterialpressure();
  void set_allocated_pulmonarymeanarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarymeanarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonarymeanarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonarymeanarterialpressure();
  public:
  void unsafe_arena_set_allocated_pulmonarymeanarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonarymeanarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonarymeanarterialpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow = 23;
  bool has_pulmonarymeancapillaryflow() const;
  private:
  bool _internal_has_pulmonarymeancapillaryflow() const;
  public:
  void clear_pulmonarymeancapillaryflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonarymeancapillaryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_pulmonarymeancapillaryflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_pulmonarymeancapillaryflow();
  void set_allocated_pulmonarymeancapillaryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeancapillaryflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_pulmonarymeancapillaryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_pulmonarymeancapillaryflow();
  public:
  void unsafe_arena_set_allocated_pulmonarymeancapillaryflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeancapillaryflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_pulmonarymeancapillaryflow();

  // .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanShuntFlow = 24;
  bool has_pulmonarymeanshuntflow() const;
  private:
  bool _internal_has_pulmonarymeanshuntflow() const;
  public:
  void clear_pulmonarymeanshuntflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& pulmonarymeanshuntflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_pulmonarymeanshuntflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_pulmonarymeanshuntflow();
  void set_allocated_pulmonarymeanshuntflow(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeanshuntflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_pulmonarymeanshuntflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_pulmonarymeanshuntflow();
  public:
  void unsafe_arena_set_allocated_pulmonarymeanshuntflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeanshuntflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_pulmonarymeanshuntflow();

  // .pulse.cdm.bind.ScalarPressureData PulmonarySystolicArterialPressure = 25;
  bool has_pulmonarysystolicarterialpressure() const;
  private:
  bool _internal_has_pulmonarysystolicarterialpressure() const;
  public:
  void clear_pulmonarysystolicarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulmonarysystolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulmonarysystolicarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulmonarysystolicarterialpressure();
  void set_allocated_pulmonarysystolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarysystolicarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulmonarysystolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulmonarysystolicarterialpressure();
  public:
  void unsafe_arena_set_allocated_pulmonarysystolicarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* pulmonarysystolicarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulmonarysystolicarterialpressure();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData PulmonaryVascularResistance = 26;
  bool has_pulmonaryvascularresistance() const;
  private:
  bool _internal_has_pulmonaryvascularresistance() const;
  public:
  void clear_pulmonaryvascularresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& pulmonaryvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_pulmonaryvascularresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_pulmonaryvascularresistance();
  void set_allocated_pulmonaryvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* pulmonaryvascularresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_pulmonaryvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_pulmonaryvascularresistance();
  public:
  void unsafe_arena_set_allocated_pulmonaryvascularresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* pulmonaryvascularresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_pulmonaryvascularresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex = 27;
  bool has_pulmonaryvascularresistanceindex() const;
  private:
  bool _internal_has_pulmonaryvascularresistanceindex() const;
  public:
  void clear_pulmonaryvascularresistanceindex();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData& pulmonaryvascularresistanceindex() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* release_pulmonaryvascularresistanceindex();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* mutable_pulmonaryvascularresistanceindex();
  void set_allocated_pulmonaryvascularresistanceindex(::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* pulmonaryvascularresistanceindex);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData& _internal_pulmonaryvascularresistanceindex() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* _internal_mutable_pulmonaryvascularresistanceindex();
  public:
  void unsafe_arena_set_allocated_pulmonaryvascularresistanceindex(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* pulmonaryvascularresistanceindex);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* unsafe_arena_release_pulmonaryvascularresistanceindex();

  // .pulse.cdm.bind.ScalarPressureData PulsePressure = 28;
  bool has_pulsepressure() const;
  private:
  bool _internal_has_pulsepressure() const;
  public:
  void clear_pulsepressure();
  const ::pulse::cdm::bind::ScalarPressureData& pulsepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulsepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulsepressure();
  void set_allocated_pulsepressure(::pulse::cdm::bind::ScalarPressureData* pulsepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulsepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulsepressure();
  public:
  void unsafe_arena_set_allocated_pulsepressure(
      ::pulse::cdm::bind::ScalarPressureData* pulsepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulsepressure();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData SystemicVascularResistance = 29;
  bool has_systemicvascularresistance() const;
  private:
  bool _internal_has_systemicvascularresistance() const;
  public:
  void clear_systemicvascularresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& systemicvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_systemicvascularresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_systemicvascularresistance();
  void set_allocated_systemicvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* systemicvascularresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_systemicvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_systemicvascularresistance();
  public:
  void unsafe_arena_set_allocated_systemicvascularresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* systemicvascularresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_systemicvascularresistance();

  // .pulse.cdm.bind.ScalarPressureData SystolicArterialPressure = 30;
  bool has_systolicarterialpressure() const;
  private:
  bool _internal_has_systolicarterialpressure() const;
  public:
  void clear_systolicarterialpressure();
  const ::pulse::cdm::bind::ScalarPressureData& systolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_systolicarterialpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_systolicarterialpressure();
  void set_allocated_systolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* systolicarterialpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_systolicarterialpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_systolicarterialpressure();
  public:
  void unsafe_arena_set_allocated_systolicarterialpressure(
      ::pulse::cdm::bind::ScalarPressureData* systolicarterialpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_systolicarterialpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalHemorrhageRate = 31;
  bool has_totalhemorrhagerate() const;
  private:
  bool _internal_has_totalhemorrhagerate() const;
  public:
  void clear_totalhemorrhagerate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalhemorrhagerate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_totalhemorrhagerate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_totalhemorrhagerate();
  void set_allocated_totalhemorrhagerate(::pulse::cdm::bind::ScalarVolumePerTimeData* totalhemorrhagerate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_totalhemorrhagerate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_totalhemorrhagerate();
  public:
  void unsafe_arena_set_allocated_totalhemorrhagerate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* totalhemorrhagerate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_totalhemorrhagerate();

  // .pulse.cdm.bind.ScalarVolumeData TotalHemorrhagedVolume = 32;
  bool has_totalhemorrhagedvolume() const;
  private:
  bool _internal_has_totalhemorrhagedvolume() const;
  public:
  void clear_totalhemorrhagedvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& totalhemorrhagedvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totalhemorrhagedvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totalhemorrhagedvolume();
  void set_allocated_totalhemorrhagedvolume(::pulse::cdm::bind::ScalarVolumeData* totalhemorrhagedvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totalhemorrhagedvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totalhemorrhagedvolume();
  public:
  void unsafe_arena_set_allocated_totalhemorrhagedvolume(
      ::pulse::cdm::bind::ScalarVolumeData* totalhemorrhagedvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_totalhemorrhagedvolume();

  // .pulse.cdm.bind.eHeartRhythm HeartRhythm = 11;
  void clear_heartrhythm();
  ::pulse::cdm::bind::eHeartRhythm heartrhythm() const;
  void set_heartrhythm(::pulse::cdm::bind::eHeartRhythm value);
  private:
  ::pulse::cdm::bind::eHeartRhythm _internal_heartrhythm() const;
  void _internal_set_heartrhythm(::pulse::cdm::bind::eHeartRhythm value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CardiovascularSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPressureData* arterialpressure_;
  ::pulse::cdm::bind::ScalarVolumeData* bloodvolume_;
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* cardiacindex_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* cardiacoutput_;
  ::pulse::cdm::bind::ScalarPressureData* centralvenouspressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* cerebralbloodflow_;
  ::pulse::cdm::bind::ScalarPressureData* cerebralperfusionpressure_;
  ::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressure_;
  ::pulse::cdm::bind::Scalar0To1Data* heartejectionfraction_;
  ::pulse::cdm::bind::ScalarFrequencyData* heartrate_;
  ::pulse::cdm::bind::ScalarVolumeData* heartstrokevolume_;
  ::pulse::cdm::bind::ScalarPressureData* intracranialpressure_;
  ::pulse::cdm::bind::ScalarPressureData* meanarterialpressure_;
  ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressure_;
  ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressuredelta_;
  ::pulse::cdm::bind::ScalarPressureData* meancentralvenouspressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* meanskinflow_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialpressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonarycapillarieswedgepressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonarydiastolicarterialpressure_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonarymeanarterialpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeancapillaryflow_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeanshuntflow_;
  ::pulse::cdm::bind::ScalarPressureData* pulmonarysystolicarterialpressure_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* pulmonaryvascularresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* pulmonaryvascularresistanceindex_;
  ::pulse::cdm::bind::ScalarPressureData* pulsepressure_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* systemicvascularresistance_;
  ::pulse::cdm::bind::ScalarPressureData* systolicarterialpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* totalhemorrhagerate_;
  ::pulse::cdm::bind::ScalarVolumeData* totalhemorrhagedvolume_;
  int heartrhythm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class DrugSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DrugSystemData) */ {
 public:
  inline DrugSystemData() : DrugSystemData(nullptr) {}
  virtual ~DrugSystemData();

  DrugSystemData(const DrugSystemData& from);
  DrugSystemData(DrugSystemData&& from) noexcept
    : DrugSystemData() {
    *this = ::std::move(from);
  }

  inline DrugSystemData& operator=(const DrugSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrugSystemData& operator=(DrugSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrugSystemData& default_instance();

  static inline const DrugSystemData* internal_default_instance() {
    return reinterpret_cast<const DrugSystemData*>(
               &_DrugSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DrugSystemData& a, DrugSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(DrugSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrugSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrugSystemData* New() const final {
    return CreateMaybeMessage<DrugSystemData>(nullptr);
  }

  DrugSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrugSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrugSystemData& from);
  void MergeFrom(const DrugSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrugSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DrugSystemData";
  }
  protected:
  explicit DrugSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBronchodilationLevelFieldNumber = 1,
    kHeartRateChangeFieldNumber = 2,
    kMeanBloodPressureChangeFieldNumber = 3,
    kNeuromuscularBlockLevelFieldNumber = 4,
    kPulsePressureChangeFieldNumber = 5,
    kPupillaryResponseFieldNumber = 6,
    kRespirationRateChangeFieldNumber = 7,
    kSedationLevelFieldNumber = 8,
    kTidalVolumeChangeFieldNumber = 9,
    kTubularPermeabilityChangeFieldNumber = 10,
  };
  // .pulse.cdm.bind.ScalarNegative1To1Data BronchodilationLevel = 1;
  bool has_bronchodilationlevel() const;
  private:
  bool _internal_has_bronchodilationlevel() const;
  public:
  void clear_bronchodilationlevel();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& bronchodilationlevel() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_bronchodilationlevel();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_bronchodilationlevel();
  void set_allocated_bronchodilationlevel(::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilationlevel);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_bronchodilationlevel() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_bronchodilationlevel();
  public:
  void unsafe_arena_set_allocated_bronchodilationlevel(
      ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilationlevel);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_bronchodilationlevel();

  // .pulse.cdm.bind.ScalarFrequencyData HeartRateChange = 2;
  bool has_heartratechange() const;
  private:
  bool _internal_has_heartratechange() const;
  public:
  void clear_heartratechange();
  const ::pulse::cdm::bind::ScalarFrequencyData& heartratechange() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_heartratechange();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_heartratechange();
  void set_allocated_heartratechange(::pulse::cdm::bind::ScalarFrequencyData* heartratechange);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_heartratechange() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_heartratechange();
  public:
  void unsafe_arena_set_allocated_heartratechange(
      ::pulse::cdm::bind::ScalarFrequencyData* heartratechange);
  ::pulse::cdm::bind::ScalarFrequencyData* unsafe_arena_release_heartratechange();

  // .pulse.cdm.bind.ScalarPressureData MeanBloodPressureChange = 3;
  bool has_meanbloodpressurechange() const;
  private:
  bool _internal_has_meanbloodpressurechange() const;
  public:
  void clear_meanbloodpressurechange();
  const ::pulse::cdm::bind::ScalarPressureData& meanbloodpressurechange() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanbloodpressurechange();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanbloodpressurechange();
  void set_allocated_meanbloodpressurechange(::pulse::cdm::bind::ScalarPressureData* meanbloodpressurechange);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanbloodpressurechange() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanbloodpressurechange();
  public:
  void unsafe_arena_set_allocated_meanbloodpressurechange(
      ::pulse::cdm::bind::ScalarPressureData* meanbloodpressurechange);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meanbloodpressurechange();

  // .pulse.cdm.bind.Scalar0To1Data NeuromuscularBlockLevel = 4;
  bool has_neuromuscularblocklevel() const;
  private:
  bool _internal_has_neuromuscularblocklevel() const;
  public:
  void clear_neuromuscularblocklevel();
  const ::pulse::cdm::bind::Scalar0To1Data& neuromuscularblocklevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_neuromuscularblocklevel();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_neuromuscularblocklevel();
  void set_allocated_neuromuscularblocklevel(::pulse::cdm::bind::Scalar0To1Data* neuromuscularblocklevel);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_neuromuscularblocklevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_neuromuscularblocklevel();
  public:
  void unsafe_arena_set_allocated_neuromuscularblocklevel(
      ::pulse::cdm::bind::Scalar0To1Data* neuromuscularblocklevel);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_neuromuscularblocklevel();

  // .pulse.cdm.bind.ScalarPressureData PulsePressureChange = 5;
  bool has_pulsepressurechange() const;
  private:
  bool _internal_has_pulsepressurechange() const;
  public:
  void clear_pulsepressurechange();
  const ::pulse::cdm::bind::ScalarPressureData& pulsepressurechange() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pulsepressurechange();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pulsepressurechange();
  void set_allocated_pulsepressurechange(::pulse::cdm::bind::ScalarPressureData* pulsepressurechange);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pulsepressurechange() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pulsepressurechange();
  public:
  void unsafe_arena_set_allocated_pulsepressurechange(
      ::pulse::cdm::bind::ScalarPressureData* pulsepressurechange);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pulsepressurechange();

  // .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 6;
  bool has_pupillaryresponse() const;
  private:
  bool _internal_has_pupillaryresponse() const;
  public:
  void clear_pupillaryresponse();
  const ::pulse::cdm::bind::PupillaryResponseData& pupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* release_pupillaryresponse();
  ::pulse::cdm::bind::PupillaryResponseData* mutable_pupillaryresponse();
  void set_allocated_pupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse);
  private:
  const ::pulse::cdm::bind::PupillaryResponseData& _internal_pupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* _internal_mutable_pupillaryresponse();
  public:
  void unsafe_arena_set_allocated_pupillaryresponse(
      ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse);
  ::pulse::cdm::bind::PupillaryResponseData* unsafe_arena_release_pupillaryresponse();

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRateChange = 7;
  bool has_respirationratechange() const;
  private:
  bool _internal_has_respirationratechange() const;
  public:
  void clear_respirationratechange();
  const ::pulse::cdm::bind::ScalarFrequencyData& respirationratechange() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_respirationratechange();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_respirationratechange();
  void set_allocated_respirationratechange(::pulse::cdm::bind::ScalarFrequencyData* respirationratechange);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_respirationratechange() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_respirationratechange();
  public:
  void unsafe_arena_set_allocated_respirationratechange(
      ::pulse::cdm::bind::ScalarFrequencyData* respirationratechange);
  ::pulse::cdm::bind::ScalarFrequencyData* unsafe_arena_release_respirationratechange();

  // .pulse.cdm.bind.Scalar0To1Data SedationLevel = 8;
  bool has_sedationlevel() const;
  private:
  bool _internal_has_sedationlevel() const;
  public:
  void clear_sedationlevel();
  const ::pulse::cdm::bind::Scalar0To1Data& sedationlevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_sedationlevel();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_sedationlevel();
  void set_allocated_sedationlevel(::pulse::cdm::bind::Scalar0To1Data* sedationlevel);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_sedationlevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_sedationlevel();
  public:
  void unsafe_arena_set_allocated_sedationlevel(
      ::pulse::cdm::bind::Scalar0To1Data* sedationlevel);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_sedationlevel();

  // .pulse.cdm.bind.ScalarVolumeData TidalVolumeChange = 9;
  bool has_tidalvolumechange() const;
  private:
  bool _internal_has_tidalvolumechange() const;
  public:
  void clear_tidalvolumechange();
  const ::pulse::cdm::bind::ScalarVolumeData& tidalvolumechange() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_tidalvolumechange();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_tidalvolumechange();
  void set_allocated_tidalvolumechange(::pulse::cdm::bind::ScalarVolumeData* tidalvolumechange);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_tidalvolumechange() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_tidalvolumechange();
  public:
  void unsafe_arena_set_allocated_tidalvolumechange(
      ::pulse::cdm::bind::ScalarVolumeData* tidalvolumechange);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_tidalvolumechange();

  // .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityChange = 10;
  bool has_tubularpermeabilitychange() const;
  private:
  bool _internal_has_tubularpermeabilitychange() const;
  public:
  void clear_tubularpermeabilitychange();
  const ::pulse::cdm::bind::ScalarNegative1To1Data& tubularpermeabilitychange() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* release_tubularpermeabilitychange();
  ::pulse::cdm::bind::ScalarNegative1To1Data* mutable_tubularpermeabilitychange();
  void set_allocated_tubularpermeabilitychange(::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitychange);
  private:
  const ::pulse::cdm::bind::ScalarNegative1To1Data& _internal_tubularpermeabilitychange() const;
  ::pulse::cdm::bind::ScalarNegative1To1Data* _internal_mutable_tubularpermeabilitychange();
  public:
  void unsafe_arena_set_allocated_tubularpermeabilitychange(
      ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitychange);
  ::pulse::cdm::bind::ScalarNegative1To1Data* unsafe_arena_release_tubularpermeabilitychange();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DrugSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilationlevel_;
  ::pulse::cdm::bind::ScalarFrequencyData* heartratechange_;
  ::pulse::cdm::bind::ScalarPressureData* meanbloodpressurechange_;
  ::pulse::cdm::bind::Scalar0To1Data* neuromuscularblocklevel_;
  ::pulse::cdm::bind::ScalarPressureData* pulsepressurechange_;
  ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse_;
  ::pulse::cdm::bind::ScalarFrequencyData* respirationratechange_;
  ::pulse::cdm::bind::Scalar0To1Data* sedationlevel_;
  ::pulse::cdm::bind::ScalarVolumeData* tidalvolumechange_;
  ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitychange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class EndocrineSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EndocrineSystemData) */ {
 public:
  inline EndocrineSystemData() : EndocrineSystemData(nullptr) {}
  virtual ~EndocrineSystemData();

  EndocrineSystemData(const EndocrineSystemData& from);
  EndocrineSystemData(EndocrineSystemData&& from) noexcept
    : EndocrineSystemData() {
    *this = ::std::move(from);
  }

  inline EndocrineSystemData& operator=(const EndocrineSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndocrineSystemData& operator=(EndocrineSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndocrineSystemData& default_instance();

  static inline const EndocrineSystemData* internal_default_instance() {
    return reinterpret_cast<const EndocrineSystemData*>(
               &_EndocrineSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EndocrineSystemData& a, EndocrineSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(EndocrineSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndocrineSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndocrineSystemData* New() const final {
    return CreateMaybeMessage<EndocrineSystemData>(nullptr);
  }

  EndocrineSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndocrineSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndocrineSystemData& from);
  void MergeFrom(const EndocrineSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndocrineSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EndocrineSystemData";
  }
  protected:
  explicit EndocrineSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsulinSynthesisRateFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarAmountPerTimeData InsulinSynthesisRate = 1;
  bool has_insulinsynthesisrate() const;
  private:
  bool _internal_has_insulinsynthesisrate() const;
  public:
  void clear_insulinsynthesisrate();
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& insulinsynthesisrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* release_insulinsynthesisrate();
  ::pulse::cdm::bind::ScalarAmountPerTimeData* mutable_insulinsynthesisrate();
  void set_allocated_insulinsynthesisrate(::pulse::cdm::bind::ScalarAmountPerTimeData* insulinsynthesisrate);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& _internal_insulinsynthesisrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* _internal_mutable_insulinsynthesisrate();
  public:
  void unsafe_arena_set_allocated_insulinsynthesisrate(
      ::pulse::cdm::bind::ScalarAmountPerTimeData* insulinsynthesisrate);
  ::pulse::cdm::bind::ScalarAmountPerTimeData* unsafe_arena_release_insulinsynthesisrate();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EndocrineSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* insulinsynthesisrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class EnergySystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.EnergySystemData) */ {
 public:
  inline EnergySystemData() : EnergySystemData(nullptr) {}
  virtual ~EnergySystemData();

  EnergySystemData(const EnergySystemData& from);
  EnergySystemData(EnergySystemData&& from) noexcept
    : EnergySystemData() {
    *this = ::std::move(from);
  }

  inline EnergySystemData& operator=(const EnergySystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnergySystemData& operator=(EnergySystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnergySystemData& default_instance();

  static inline const EnergySystemData* internal_default_instance() {
    return reinterpret_cast<const EnergySystemData*>(
               &_EnergySystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnergySystemData& a, EnergySystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(EnergySystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnergySystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnergySystemData* New() const final {
    return CreateMaybeMessage<EnergySystemData>(nullptr);
  }

  EnergySystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnergySystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnergySystemData& from);
  void MergeFrom(const EnergySystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnergySystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.EnergySystemData";
  }
  protected:
  explicit EnergySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAchievedExerciseLevelFieldNumber = 1,
    kCoreTemperatureFieldNumber = 2,
    kCreatinineProductionRateFieldNumber = 3,
    kExerciseMeanArterialPressureDeltaFieldNumber = 4,
    kFatigueLevelFieldNumber = 5,
    kKetoneProductionRateFieldNumber = 6,
    kLactateProductionRateFieldNumber = 7,
    kSkinTemperatureFieldNumber = 8,
    kSweatRateFieldNumber = 9,
    kTotalMetabolicRateFieldNumber = 10,
    kTotalWorkRateLevelFieldNumber = 11,
  };
  // .pulse.cdm.bind.Scalar0To1Data AchievedExerciseLevel = 1;
  bool has_achievedexerciselevel() const;
  private:
  bool _internal_has_achievedexerciselevel() const;
  public:
  void clear_achievedexerciselevel();
  const ::pulse::cdm::bind::Scalar0To1Data& achievedexerciselevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_achievedexerciselevel();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_achievedexerciselevel();
  void set_allocated_achievedexerciselevel(::pulse::cdm::bind::Scalar0To1Data* achievedexerciselevel);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_achievedexerciselevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_achievedexerciselevel();
  public:
  void unsafe_arena_set_allocated_achievedexerciselevel(
      ::pulse::cdm::bind::Scalar0To1Data* achievedexerciselevel);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_achievedexerciselevel();

  // .pulse.cdm.bind.ScalarTemperatureData CoreTemperature = 2;
  bool has_coretemperature() const;
  private:
  bool _internal_has_coretemperature() const;
  public:
  void clear_coretemperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& coretemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_coretemperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_coretemperature();
  void set_allocated_coretemperature(::pulse::cdm::bind::ScalarTemperatureData* coretemperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_coretemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_coretemperature();
  public:
  void unsafe_arena_set_allocated_coretemperature(
      ::pulse::cdm::bind::ScalarTemperatureData* coretemperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_coretemperature();

  // .pulse.cdm.bind.ScalarAmountPerTimeData CreatinineProductionRate = 3;
  bool has_creatinineproductionrate() const;
  private:
  bool _internal_has_creatinineproductionrate() const;
  public:
  void clear_creatinineproductionrate();
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& creatinineproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* release_creatinineproductionrate();
  ::pulse::cdm::bind::ScalarAmountPerTimeData* mutable_creatinineproductionrate();
  void set_allocated_creatinineproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* creatinineproductionrate);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& _internal_creatinineproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* _internal_mutable_creatinineproductionrate();
  public:
  void unsafe_arena_set_allocated_creatinineproductionrate(
      ::pulse::cdm::bind::ScalarAmountPerTimeData* creatinineproductionrate);
  ::pulse::cdm::bind::ScalarAmountPerTimeData* unsafe_arena_release_creatinineproductionrate();

  // .pulse.cdm.bind.ScalarPressureData ExerciseMeanArterialPressureDelta = 4;
  bool has_exercisemeanarterialpressuredelta() const;
  private:
  bool _internal_has_exercisemeanarterialpressuredelta() const;
  public:
  void clear_exercisemeanarterialpressuredelta();
  const ::pulse::cdm::bind::ScalarPressureData& exercisemeanarterialpressuredelta() const;
  ::pulse::cdm::bind::ScalarPressureData* release_exercisemeanarterialpressuredelta();
  ::pulse::cdm::bind::ScalarPressureData* mutable_exercisemeanarterialpressuredelta();
  void set_allocated_exercisemeanarterialpressuredelta(::pulse::cdm::bind::ScalarPressureData* exercisemeanarterialpressuredelta);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_exercisemeanarterialpressuredelta() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_exercisemeanarterialpressuredelta();
  public:
  void unsafe_arena_set_allocated_exercisemeanarterialpressuredelta(
      ::pulse::cdm::bind::ScalarPressureData* exercisemeanarterialpressuredelta);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_exercisemeanarterialpressuredelta();

  // .pulse.cdm.bind.Scalar0To1Data FatigueLevel = 5;
  bool has_fatiguelevel() const;
  private:
  bool _internal_has_fatiguelevel() const;
  public:
  void clear_fatiguelevel();
  const ::pulse::cdm::bind::Scalar0To1Data& fatiguelevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fatiguelevel();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fatiguelevel();
  void set_allocated_fatiguelevel(::pulse::cdm::bind::Scalar0To1Data* fatiguelevel);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fatiguelevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fatiguelevel();
  public:
  void unsafe_arena_set_allocated_fatiguelevel(
      ::pulse::cdm::bind::Scalar0To1Data* fatiguelevel);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fatiguelevel();

  // .pulse.cdm.bind.ScalarAmountPerTimeData KetoneProductionRate = 6;
  bool has_ketoneproductionrate() const;
  private:
  bool _internal_has_ketoneproductionrate() const;
  public:
  void clear_ketoneproductionrate();
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& ketoneproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* release_ketoneproductionrate();
  ::pulse::cdm::bind::ScalarAmountPerTimeData* mutable_ketoneproductionrate();
  void set_allocated_ketoneproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* ketoneproductionrate);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& _internal_ketoneproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* _internal_mutable_ketoneproductionrate();
  public:
  void unsafe_arena_set_allocated_ketoneproductionrate(
      ::pulse::cdm::bind::ScalarAmountPerTimeData* ketoneproductionrate);
  ::pulse::cdm::bind::ScalarAmountPerTimeData* unsafe_arena_release_ketoneproductionrate();

  // .pulse.cdm.bind.ScalarAmountPerTimeData LactateProductionRate = 7;
  bool has_lactateproductionrate() const;
  private:
  bool _internal_has_lactateproductionrate() const;
  public:
  void clear_lactateproductionrate();
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& lactateproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* release_lactateproductionrate();
  ::pulse::cdm::bind::ScalarAmountPerTimeData* mutable_lactateproductionrate();
  void set_allocated_lactateproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* lactateproductionrate);
  private:
  const ::pulse::cdm::bind::ScalarAmountPerTimeData& _internal_lactateproductionrate() const;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* _internal_mutable_lactateproductionrate();
  public:
  void unsafe_arena_set_allocated_lactateproductionrate(
      ::pulse::cdm::bind::ScalarAmountPerTimeData* lactateproductionrate);
  ::pulse::cdm::bind::ScalarAmountPerTimeData* unsafe_arena_release_lactateproductionrate();

  // .pulse.cdm.bind.ScalarTemperatureData SkinTemperature = 8;
  bool has_skintemperature() const;
  private:
  bool _internal_has_skintemperature() const;
  public:
  void clear_skintemperature();
  const ::pulse::cdm::bind::ScalarTemperatureData& skintemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* release_skintemperature();
  ::pulse::cdm::bind::ScalarTemperatureData* mutable_skintemperature();
  void set_allocated_skintemperature(::pulse::cdm::bind::ScalarTemperatureData* skintemperature);
  private:
  const ::pulse::cdm::bind::ScalarTemperatureData& _internal_skintemperature() const;
  ::pulse::cdm::bind::ScalarTemperatureData* _internal_mutable_skintemperature();
  public:
  void unsafe_arena_set_allocated_skintemperature(
      ::pulse::cdm::bind::ScalarTemperatureData* skintemperature);
  ::pulse::cdm::bind::ScalarTemperatureData* unsafe_arena_release_skintemperature();

  // .pulse.cdm.bind.ScalarMassPerTimeData SweatRate = 9;
  bool has_sweatrate() const;
  private:
  bool _internal_has_sweatrate() const;
  public:
  void clear_sweatrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& sweatrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_sweatrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_sweatrate();
  void set_allocated_sweatrate(::pulse::cdm::bind::ScalarMassPerTimeData* sweatrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_sweatrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_sweatrate();
  public:
  void unsafe_arena_set_allocated_sweatrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* sweatrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_sweatrate();

  // .pulse.cdm.bind.ScalarPowerData TotalMetabolicRate = 10;
  bool has_totalmetabolicrate() const;
  private:
  bool _internal_has_totalmetabolicrate() const;
  public:
  void clear_totalmetabolicrate();
  const ::pulse::cdm::bind::ScalarPowerData& totalmetabolicrate() const;
  ::pulse::cdm::bind::ScalarPowerData* release_totalmetabolicrate();
  ::pulse::cdm::bind::ScalarPowerData* mutable_totalmetabolicrate();
  void set_allocated_totalmetabolicrate(::pulse::cdm::bind::ScalarPowerData* totalmetabolicrate);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_totalmetabolicrate() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_totalmetabolicrate();
  public:
  void unsafe_arena_set_allocated_totalmetabolicrate(
      ::pulse::cdm::bind::ScalarPowerData* totalmetabolicrate);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_totalmetabolicrate();

  // .pulse.cdm.bind.Scalar0To1Data TotalWorkRateLevel = 11;
  bool has_totalworkratelevel() const;
  private:
  bool _internal_has_totalworkratelevel() const;
  public:
  void clear_totalworkratelevel();
  const ::pulse::cdm::bind::Scalar0To1Data& totalworkratelevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_totalworkratelevel();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_totalworkratelevel();
  void set_allocated_totalworkratelevel(::pulse::cdm::bind::Scalar0To1Data* totalworkratelevel);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_totalworkratelevel() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_totalworkratelevel();
  public:
  void unsafe_arena_set_allocated_totalworkratelevel(
      ::pulse::cdm::bind::Scalar0To1Data* totalworkratelevel);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_totalworkratelevel();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.EnergySystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* achievedexerciselevel_;
  ::pulse::cdm::bind::ScalarTemperatureData* coretemperature_;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* creatinineproductionrate_;
  ::pulse::cdm::bind::ScalarPressureData* exercisemeanarterialpressuredelta_;
  ::pulse::cdm::bind::Scalar0To1Data* fatiguelevel_;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* ketoneproductionrate_;
  ::pulse::cdm::bind::ScalarAmountPerTimeData* lactateproductionrate_;
  ::pulse::cdm::bind::ScalarTemperatureData* skintemperature_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* sweatrate_;
  ::pulse::cdm::bind::ScalarPowerData* totalmetabolicrate_;
  ::pulse::cdm::bind::Scalar0To1Data* totalworkratelevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class GastrointestinalSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.GastrointestinalSystemData) */ {
 public:
  inline GastrointestinalSystemData() : GastrointestinalSystemData(nullptr) {}
  virtual ~GastrointestinalSystemData();

  GastrointestinalSystemData(const GastrointestinalSystemData& from);
  GastrointestinalSystemData(GastrointestinalSystemData&& from) noexcept
    : GastrointestinalSystemData() {
    *this = ::std::move(from);
  }

  inline GastrointestinalSystemData& operator=(const GastrointestinalSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GastrointestinalSystemData& operator=(GastrointestinalSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GastrointestinalSystemData& default_instance();

  static inline const GastrointestinalSystemData* internal_default_instance() {
    return reinterpret_cast<const GastrointestinalSystemData*>(
               &_GastrointestinalSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GastrointestinalSystemData& a, GastrointestinalSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(GastrointestinalSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GastrointestinalSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GastrointestinalSystemData* New() const final {
    return CreateMaybeMessage<GastrointestinalSystemData>(nullptr);
  }

  GastrointestinalSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GastrointestinalSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GastrointestinalSystemData& from);
  void MergeFrom(const GastrointestinalSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GastrointestinalSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.GastrointestinalSystemData";
  }
  protected:
  explicit GastrointestinalSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaterAbsorptionRateFieldNumber = 1,
    kStomachContentsFieldNumber = 2,
  };
  // .pulse.cdm.bind.ScalarVolumePerTimeData WaterAbsorptionRate = 1;
  bool has_waterabsorptionrate() const;
  private:
  bool _internal_has_waterabsorptionrate() const;
  public:
  void clear_waterabsorptionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& waterabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_waterabsorptionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_waterabsorptionrate();
  void set_allocated_waterabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* waterabsorptionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_waterabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_waterabsorptionrate();
  public:
  void unsafe_arena_set_allocated_waterabsorptionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* waterabsorptionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_waterabsorptionrate();

  // .pulse.cdm.bind.NutritionData StomachContents = 2;
  bool has_stomachcontents() const;
  private:
  bool _internal_has_stomachcontents() const;
  public:
  void clear_stomachcontents();
  const ::pulse::cdm::bind::NutritionData& stomachcontents() const;
  ::pulse::cdm::bind::NutritionData* release_stomachcontents();
  ::pulse::cdm::bind::NutritionData* mutable_stomachcontents();
  void set_allocated_stomachcontents(::pulse::cdm::bind::NutritionData* stomachcontents);
  private:
  const ::pulse::cdm::bind::NutritionData& _internal_stomachcontents() const;
  ::pulse::cdm::bind::NutritionData* _internal_mutable_stomachcontents();
  public:
  void unsafe_arena_set_allocated_stomachcontents(
      ::pulse::cdm::bind::NutritionData* stomachcontents);
  ::pulse::cdm::bind::NutritionData* unsafe_arena_release_stomachcontents();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.GastrointestinalSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* waterabsorptionrate_;
  ::pulse::cdm::bind::NutritionData* stomachcontents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class HepaticSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.HepaticSystemData) */ {
 public:
  inline HepaticSystemData() : HepaticSystemData(nullptr) {}
  virtual ~HepaticSystemData();

  HepaticSystemData(const HepaticSystemData& from);
  HepaticSystemData(HepaticSystemData&& from) noexcept
    : HepaticSystemData() {
    *this = ::std::move(from);
  }

  inline HepaticSystemData& operator=(const HepaticSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HepaticSystemData& operator=(HepaticSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HepaticSystemData& default_instance();

  static inline const HepaticSystemData* internal_default_instance() {
    return reinterpret_cast<const HepaticSystemData*>(
               &_HepaticSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HepaticSystemData& a, HepaticSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(HepaticSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HepaticSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HepaticSystemData* New() const final {
    return CreateMaybeMessage<HepaticSystemData>(nullptr);
  }

  HepaticSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HepaticSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HepaticSystemData& from);
  void MergeFrom(const HepaticSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HepaticSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.HepaticSystemData";
  }
  protected:
  explicit HepaticSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.HepaticSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class NervousSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.NervousSystemData) */ {
 public:
  inline NervousSystemData() : NervousSystemData(nullptr) {}
  virtual ~NervousSystemData();

  NervousSystemData(const NervousSystemData& from);
  NervousSystemData(NervousSystemData&& from) noexcept
    : NervousSystemData() {
    *this = ::std::move(from);
  }

  inline NervousSystemData& operator=(const NervousSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NervousSystemData& operator=(NervousSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NervousSystemData& default_instance();

  static inline const NervousSystemData* internal_default_instance() {
    return reinterpret_cast<const NervousSystemData*>(
               &_NervousSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NervousSystemData& a, NervousSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(NervousSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NervousSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NervousSystemData* New() const final {
    return CreateMaybeMessage<NervousSystemData>(nullptr);
  }

  NervousSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NervousSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NervousSystemData& from);
  void MergeFrom(const NervousSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NervousSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.NervousSystemData";
  }
  protected:
  explicit NervousSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChemoreceptorHeartRateScaleFieldNumber = 2,
    kChemoreceptorHeartElastanceScaleFieldNumber = 3,
    kBaroreceptorHeartRateScaleFieldNumber = 5,
    kBaroreceptorHeartElastanceScaleFieldNumber = 6,
    kBaroreceptorResistanceScaleFieldNumber = 7,
    kBaroreceptorComplianceScaleFieldNumber = 8,
    kLeftEyePupillaryResponseFieldNumber = 9,
    kRightEyePupillaryResponseFieldNumber = 10,
    kChemoreceptorFeedbackFieldNumber = 1,
    kBaroreceptorFeedbackFieldNumber = 4,
  };
  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartRateScale = 2;
  bool has_chemoreceptorheartratescale() const;
  private:
  bool _internal_has_chemoreceptorheartratescale() const;
  public:
  void clear_chemoreceptorheartratescale();
  const ::pulse::cdm::bind::ScalarData& chemoreceptorheartratescale() const;
  ::pulse::cdm::bind::ScalarData* release_chemoreceptorheartratescale();
  ::pulse::cdm::bind::ScalarData* mutable_chemoreceptorheartratescale();
  void set_allocated_chemoreceptorheartratescale(::pulse::cdm::bind::ScalarData* chemoreceptorheartratescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_chemoreceptorheartratescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_chemoreceptorheartratescale();
  public:
  void unsafe_arena_set_allocated_chemoreceptorheartratescale(
      ::pulse::cdm::bind::ScalarData* chemoreceptorheartratescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_chemoreceptorheartratescale();

  // .pulse.cdm.bind.ScalarData ChemoreceptorHeartElastanceScale = 3;
  bool has_chemoreceptorheartelastancescale() const;
  private:
  bool _internal_has_chemoreceptorheartelastancescale() const;
  public:
  void clear_chemoreceptorheartelastancescale();
  const ::pulse::cdm::bind::ScalarData& chemoreceptorheartelastancescale() const;
  ::pulse::cdm::bind::ScalarData* release_chemoreceptorheartelastancescale();
  ::pulse::cdm::bind::ScalarData* mutable_chemoreceptorheartelastancescale();
  void set_allocated_chemoreceptorheartelastancescale(::pulse::cdm::bind::ScalarData* chemoreceptorheartelastancescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_chemoreceptorheartelastancescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_chemoreceptorheartelastancescale();
  public:
  void unsafe_arena_set_allocated_chemoreceptorheartelastancescale(
      ::pulse::cdm::bind::ScalarData* chemoreceptorheartelastancescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_chemoreceptorheartelastancescale();

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartRateScale = 5;
  bool has_baroreceptorheartratescale() const;
  private:
  bool _internal_has_baroreceptorheartratescale() const;
  public:
  void clear_baroreceptorheartratescale();
  const ::pulse::cdm::bind::ScalarData& baroreceptorheartratescale() const;
  ::pulse::cdm::bind::ScalarData* release_baroreceptorheartratescale();
  ::pulse::cdm::bind::ScalarData* mutable_baroreceptorheartratescale();
  void set_allocated_baroreceptorheartratescale(::pulse::cdm::bind::ScalarData* baroreceptorheartratescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_baroreceptorheartratescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_baroreceptorheartratescale();
  public:
  void unsafe_arena_set_allocated_baroreceptorheartratescale(
      ::pulse::cdm::bind::ScalarData* baroreceptorheartratescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_baroreceptorheartratescale();

  // .pulse.cdm.bind.ScalarData BaroreceptorHeartElastanceScale = 6;
  bool has_baroreceptorheartelastancescale() const;
  private:
  bool _internal_has_baroreceptorheartelastancescale() const;
  public:
  void clear_baroreceptorheartelastancescale();
  const ::pulse::cdm::bind::ScalarData& baroreceptorheartelastancescale() const;
  ::pulse::cdm::bind::ScalarData* release_baroreceptorheartelastancescale();
  ::pulse::cdm::bind::ScalarData* mutable_baroreceptorheartelastancescale();
  void set_allocated_baroreceptorheartelastancescale(::pulse::cdm::bind::ScalarData* baroreceptorheartelastancescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_baroreceptorheartelastancescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_baroreceptorheartelastancescale();
  public:
  void unsafe_arena_set_allocated_baroreceptorheartelastancescale(
      ::pulse::cdm::bind::ScalarData* baroreceptorheartelastancescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_baroreceptorheartelastancescale();

  // .pulse.cdm.bind.ScalarData BaroreceptorResistanceScale = 7;
  bool has_baroreceptorresistancescale() const;
  private:
  bool _internal_has_baroreceptorresistancescale() const;
  public:
  void clear_baroreceptorresistancescale();
  const ::pulse::cdm::bind::ScalarData& baroreceptorresistancescale() const;
  ::pulse::cdm::bind::ScalarData* release_baroreceptorresistancescale();
  ::pulse::cdm::bind::ScalarData* mutable_baroreceptorresistancescale();
  void set_allocated_baroreceptorresistancescale(::pulse::cdm::bind::ScalarData* baroreceptorresistancescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_baroreceptorresistancescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_baroreceptorresistancescale();
  public:
  void unsafe_arena_set_allocated_baroreceptorresistancescale(
      ::pulse::cdm::bind::ScalarData* baroreceptorresistancescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_baroreceptorresistancescale();

  // .pulse.cdm.bind.ScalarData BaroreceptorComplianceScale = 8;
  bool has_baroreceptorcompliancescale() const;
  private:
  bool _internal_has_baroreceptorcompliancescale() const;
  public:
  void clear_baroreceptorcompliancescale();
  const ::pulse::cdm::bind::ScalarData& baroreceptorcompliancescale() const;
  ::pulse::cdm::bind::ScalarData* release_baroreceptorcompliancescale();
  ::pulse::cdm::bind::ScalarData* mutable_baroreceptorcompliancescale();
  void set_allocated_baroreceptorcompliancescale(::pulse::cdm::bind::ScalarData* baroreceptorcompliancescale);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_baroreceptorcompliancescale() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_baroreceptorcompliancescale();
  public:
  void unsafe_arena_set_allocated_baroreceptorcompliancescale(
      ::pulse::cdm::bind::ScalarData* baroreceptorcompliancescale);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_baroreceptorcompliancescale();

  // .pulse.cdm.bind.PupillaryResponseData LeftEyePupillaryResponse = 9;
  bool has_lefteyepupillaryresponse() const;
  private:
  bool _internal_has_lefteyepupillaryresponse() const;
  public:
  void clear_lefteyepupillaryresponse();
  const ::pulse::cdm::bind::PupillaryResponseData& lefteyepupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* release_lefteyepupillaryresponse();
  ::pulse::cdm::bind::PupillaryResponseData* mutable_lefteyepupillaryresponse();
  void set_allocated_lefteyepupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* lefteyepupillaryresponse);
  private:
  const ::pulse::cdm::bind::PupillaryResponseData& _internal_lefteyepupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* _internal_mutable_lefteyepupillaryresponse();
  public:
  void unsafe_arena_set_allocated_lefteyepupillaryresponse(
      ::pulse::cdm::bind::PupillaryResponseData* lefteyepupillaryresponse);
  ::pulse::cdm::bind::PupillaryResponseData* unsafe_arena_release_lefteyepupillaryresponse();

  // .pulse.cdm.bind.PupillaryResponseData RightEyePupillaryResponse = 10;
  bool has_righteyepupillaryresponse() const;
  private:
  bool _internal_has_righteyepupillaryresponse() const;
  public:
  void clear_righteyepupillaryresponse();
  const ::pulse::cdm::bind::PupillaryResponseData& righteyepupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* release_righteyepupillaryresponse();
  ::pulse::cdm::bind::PupillaryResponseData* mutable_righteyepupillaryresponse();
  void set_allocated_righteyepupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* righteyepupillaryresponse);
  private:
  const ::pulse::cdm::bind::PupillaryResponseData& _internal_righteyepupillaryresponse() const;
  ::pulse::cdm::bind::PupillaryResponseData* _internal_mutable_righteyepupillaryresponse();
  public:
  void unsafe_arena_set_allocated_righteyepupillaryresponse(
      ::pulse::cdm::bind::PupillaryResponseData* righteyepupillaryresponse);
  ::pulse::cdm::bind::PupillaryResponseData* unsafe_arena_release_righteyepupillaryresponse();

  // .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 1;
  void clear_chemoreceptorfeedback();
  ::pulse::cdm::bind::eSwitch chemoreceptorfeedback() const;
  void set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_chemoreceptorfeedback() const;
  void _internal_set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 4;
  void clear_baroreceptorfeedback();
  ::pulse::cdm::bind::eSwitch baroreceptorfeedback() const;
  void set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_baroreceptorfeedback() const;
  void _internal_set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.NervousSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarData* chemoreceptorheartratescale_;
  ::pulse::cdm::bind::ScalarData* chemoreceptorheartelastancescale_;
  ::pulse::cdm::bind::ScalarData* baroreceptorheartratescale_;
  ::pulse::cdm::bind::ScalarData* baroreceptorheartelastancescale_;
  ::pulse::cdm::bind::ScalarData* baroreceptorresistancescale_;
  ::pulse::cdm::bind::ScalarData* baroreceptorcompliancescale_;
  ::pulse::cdm::bind::PupillaryResponseData* lefteyepupillaryresponse_;
  ::pulse::cdm::bind::PupillaryResponseData* righteyepupillaryresponse_;
  int chemoreceptorfeedback_;
  int baroreceptorfeedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class RenalSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.RenalSystemData) */ {
 public:
  inline RenalSystemData() : RenalSystemData(nullptr) {}
  virtual ~RenalSystemData();

  RenalSystemData(const RenalSystemData& from);
  RenalSystemData(RenalSystemData&& from) noexcept
    : RenalSystemData() {
    *this = ::std::move(from);
  }

  inline RenalSystemData& operator=(const RenalSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenalSystemData& operator=(RenalSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenalSystemData& default_instance();

  static inline const RenalSystemData* internal_default_instance() {
    return reinterpret_cast<const RenalSystemData*>(
               &_RenalSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RenalSystemData& a, RenalSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(RenalSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenalSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenalSystemData* New() const final {
    return CreateMaybeMessage<RenalSystemData>(nullptr);
  }

  RenalSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenalSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenalSystemData& from);
  void MergeFrom(const RenalSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenalSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.RenalSystemData";
  }
  protected:
  explicit RenalSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltrationFractionFieldNumber = 1,
    kGlomerularFiltrationRateFieldNumber = 2,
    kLeftAfferentArterioleResistanceFieldNumber = 3,
    kLeftBowmansCapsulesHydrostaticPressureFieldNumber = 4,
    kLeftBowmansCapsulesOsmoticPressureFieldNumber = 5,
    kLeftEfferentArterioleResistanceFieldNumber = 6,
    kLeftGlomerularCapillariesHydrostaticPressureFieldNumber = 7,
    kLeftGlomerularCapillariesOsmoticPressureFieldNumber = 8,
    kLeftGlomerularFiltrationCoefficientFieldNumber = 9,
    kLeftGlomerularFiltrationRateFieldNumber = 10,
    kLeftGlomerularFiltrationSurfaceAreaFieldNumber = 11,
    kLeftGlomerularFluidPermeabilityFieldNumber = 12,
    kLeftFiltrationFractionFieldNumber = 13,
    kLeftNetFiltrationPressureFieldNumber = 14,
    kLeftNetReabsorptionPressureFieldNumber = 15,
    kLeftPeritubularCapillariesHydrostaticPressureFieldNumber = 16,
    kLeftPeritubularCapillariesOsmoticPressureFieldNumber = 17,
    kLeftReabsorptionFiltrationCoefficientFieldNumber = 18,
    kLeftReabsorptionRateFieldNumber = 19,
    kLeftTubularOsmoticPressureFieldNumber = 20,
    kLeftTubularHydrostaticPressureFieldNumber = 21,
    kLeftTubularReabsorptionFiltrationSurfaceAreaFieldNumber = 22,
    kLeftTubularReabsorptionFluidPermeabilityFieldNumber = 23,
    kRenalBloodFlowFieldNumber = 24,
    kRenalPlasmaFlowFieldNumber = 25,
    kRenalVascularResistanceFieldNumber = 26,
    kRightAfferentArterioleResistanceFieldNumber = 27,
    kRightBowmansCapsulesHydrostaticPressureFieldNumber = 28,
    kRightBowmansCapsulesOsmoticPressureFieldNumber = 29,
    kRightEfferentArterioleResistanceFieldNumber = 30,
    kRightGlomerularCapillariesHydrostaticPressureFieldNumber = 31,
    kRightGlomerularCapillariesOsmoticPressureFieldNumber = 32,
    kRightGlomerularFiltrationCoefficientFieldNumber = 33,
    kRightGlomerularFiltrationRateFieldNumber = 34,
    kRightGlomerularFiltrationSurfaceAreaFieldNumber = 35,
    kRightGlomerularFluidPermeabilityFieldNumber = 36,
    kRightFiltrationFractionFieldNumber = 37,
    kRightNetFiltrationPressureFieldNumber = 38,
    kRightNetReabsorptionPressureFieldNumber = 39,
    kRightPeritubularCapillariesHydrostaticPressureFieldNumber = 40,
    kRightPeritubularCapillariesOsmoticPressureFieldNumber = 41,
    kRightReabsorptionFiltrationCoefficientFieldNumber = 42,
    kRightReabsorptionRateFieldNumber = 43,
    kRightTubularOsmoticPressureFieldNumber = 44,
    kRightTubularHydrostaticPressureFieldNumber = 45,
    kRightTubularReabsorptionFiltrationSurfaceAreaFieldNumber = 46,
    kRightTubularReabsorptionFluidPermeabilityFieldNumber = 47,
    kUrinationRateFieldNumber = 48,
    kUrineOsmolalityFieldNumber = 49,
    kUrineOsmolarityFieldNumber = 50,
    kUrineProductionRateFieldNumber = 51,
    kUrineSpecificGravityFieldNumber = 52,
    kUrineVolumeFieldNumber = 53,
    kUrineUreaNitrogenConcentrationFieldNumber = 54,
  };
  // .pulse.cdm.bind.Scalar0To1Data FiltrationFraction = 1;
  bool has_filtrationfraction() const;
  private:
  bool _internal_has_filtrationfraction() const;
  public:
  void clear_filtrationfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& filtrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_filtrationfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_filtrationfraction();
  void set_allocated_filtrationfraction(::pulse::cdm::bind::Scalar0To1Data* filtrationfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_filtrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_filtrationfraction();
  public:
  void unsafe_arena_set_allocated_filtrationfraction(
      ::pulse::cdm::bind::Scalar0To1Data* filtrationfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_filtrationfraction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData GlomerularFiltrationRate = 2;
  bool has_glomerularfiltrationrate() const;
  private:
  bool _internal_has_glomerularfiltrationrate() const;
  public:
  void clear_glomerularfiltrationrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& glomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_glomerularfiltrationrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_glomerularfiltrationrate();
  void set_allocated_glomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* glomerularfiltrationrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_glomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_glomerularfiltrationrate();
  public:
  void unsafe_arena_set_allocated_glomerularfiltrationrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* glomerularfiltrationrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_glomerularfiltrationrate();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAfferentArterioleResistance = 3;
  bool has_leftafferentarterioleresistance() const;
  private:
  bool _internal_has_leftafferentarterioleresistance() const;
  public:
  void clear_leftafferentarterioleresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& leftafferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_leftafferentarterioleresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_leftafferentarterioleresistance();
  void set_allocated_leftafferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftafferentarterioleresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_leftafferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_leftafferentarterioleresistance();
  public:
  void unsafe_arena_set_allocated_leftafferentarterioleresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftafferentarterioleresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_leftafferentarterioleresistance();

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesHydrostaticPressure = 4;
  bool has_leftbowmanscapsuleshydrostaticpressure() const;
  private:
  bool _internal_has_leftbowmanscapsuleshydrostaticpressure() const;
  public:
  void clear_leftbowmanscapsuleshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftbowmanscapsuleshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftbowmanscapsuleshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftbowmanscapsuleshydrostaticpressure();
  void set_allocated_leftbowmanscapsuleshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsuleshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftbowmanscapsuleshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftbowmanscapsuleshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_leftbowmanscapsuleshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsuleshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftbowmanscapsuleshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesOsmoticPressure = 5;
  bool has_leftbowmanscapsulesosmoticpressure() const;
  private:
  bool _internal_has_leftbowmanscapsulesosmoticpressure() const;
  public:
  void clear_leftbowmanscapsulesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftbowmanscapsulesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftbowmanscapsulesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftbowmanscapsulesosmoticpressure();
  void set_allocated_leftbowmanscapsulesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsulesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftbowmanscapsulesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftbowmanscapsulesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_leftbowmanscapsulesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsulesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftbowmanscapsulesosmoticpressure();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftEfferentArterioleResistance = 6;
  bool has_leftefferentarterioleresistance() const;
  private:
  bool _internal_has_leftefferentarterioleresistance() const;
  public:
  void clear_leftefferentarterioleresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& leftefferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_leftefferentarterioleresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_leftefferentarterioleresistance();
  void set_allocated_leftefferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftefferentarterioleresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_leftefferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_leftefferentarterioleresistance();
  public:
  void unsafe_arena_set_allocated_leftefferentarterioleresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftefferentarterioleresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_leftefferentarterioleresistance();

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure = 7;
  bool has_leftglomerularcapillarieshydrostaticpressure() const;
  private:
  bool _internal_has_leftglomerularcapillarieshydrostaticpressure() const;
  public:
  void clear_leftglomerularcapillarieshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftglomerularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftglomerularcapillarieshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftglomerularcapillarieshydrostaticpressure();
  void set_allocated_leftglomerularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillarieshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftglomerularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftglomerularcapillarieshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_leftglomerularcapillarieshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillarieshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftglomerularcapillarieshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesOsmoticPressure = 8;
  bool has_leftglomerularcapillariesosmoticpressure() const;
  private:
  bool _internal_has_leftglomerularcapillariesosmoticpressure() const;
  public:
  void clear_leftglomerularcapillariesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftglomerularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftglomerularcapillariesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftglomerularcapillariesosmoticpressure();
  void set_allocated_leftglomerularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillariesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftglomerularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftglomerularcapillariesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_leftglomerularcapillariesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillariesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftglomerularcapillariesosmoticpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient = 9;
  bool has_leftglomerularfiltrationcoefficient() const;
  private:
  bool _internal_has_leftglomerularfiltrationcoefficient() const;
  public:
  void clear_leftglomerularfiltrationcoefficient();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& leftglomerularfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* release_leftglomerularfiltrationcoefficient();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* mutable_leftglomerularfiltrationcoefficient();
  void set_allocated_leftglomerularfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftglomerularfiltrationcoefficient);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& _internal_leftglomerularfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* _internal_mutable_leftglomerularfiltrationcoefficient();
  public:
  void unsafe_arena_set_allocated_leftglomerularfiltrationcoefficient(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftglomerularfiltrationcoefficient);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* unsafe_arena_release_leftglomerularfiltrationcoefficient();

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftGlomerularFiltrationRate = 10;
  bool has_leftglomerularfiltrationrate() const;
  private:
  bool _internal_has_leftglomerularfiltrationrate() const;
  public:
  void clear_leftglomerularfiltrationrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& leftglomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_leftglomerularfiltrationrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_leftglomerularfiltrationrate();
  void set_allocated_leftglomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* leftglomerularfiltrationrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_leftglomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_leftglomerularfiltrationrate();
  public:
  void unsafe_arena_set_allocated_leftglomerularfiltrationrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* leftglomerularfiltrationrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_leftglomerularfiltrationrate();

  // .pulse.cdm.bind.ScalarAreaData LeftGlomerularFiltrationSurfaceArea = 11;
  bool has_leftglomerularfiltrationsurfacearea() const;
  private:
  bool _internal_has_leftglomerularfiltrationsurfacearea() const;
  public:
  void clear_leftglomerularfiltrationsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& leftglomerularfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_leftglomerularfiltrationsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_leftglomerularfiltrationsurfacearea();
  void set_allocated_leftglomerularfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* leftglomerularfiltrationsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_leftglomerularfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_leftglomerularfiltrationsurfacearea();
  public:
  void unsafe_arena_set_allocated_leftglomerularfiltrationsurfacearea(
      ::pulse::cdm::bind::ScalarAreaData* leftglomerularfiltrationsurfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_leftglomerularfiltrationsurfacearea();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability = 12;
  bool has_leftglomerularfluidpermeability() const;
  private:
  bool _internal_has_leftglomerularfluidpermeability() const;
  public:
  void clear_leftglomerularfluidpermeability();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& leftglomerularfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_leftglomerularfluidpermeability();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_leftglomerularfluidpermeability();
  void set_allocated_leftglomerularfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeability);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_leftglomerularfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_leftglomerularfluidpermeability();
  public:
  void unsafe_arena_set_allocated_leftglomerularfluidpermeability(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeability);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_leftglomerularfluidpermeability();

  // .pulse.cdm.bind.Scalar0To1Data LeftFiltrationFraction = 13;
  bool has_leftfiltrationfraction() const;
  private:
  bool _internal_has_leftfiltrationfraction() const;
  public:
  void clear_leftfiltrationfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& leftfiltrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftfiltrationfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftfiltrationfraction();
  void set_allocated_leftfiltrationfraction(::pulse::cdm::bind::Scalar0To1Data* leftfiltrationfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftfiltrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftfiltrationfraction();
  public:
  void unsafe_arena_set_allocated_leftfiltrationfraction(
      ::pulse::cdm::bind::Scalar0To1Data* leftfiltrationfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_leftfiltrationfraction();

  // .pulse.cdm.bind.ScalarPressureData LeftNetFiltrationPressure = 14;
  bool has_leftnetfiltrationpressure() const;
  private:
  bool _internal_has_leftnetfiltrationpressure() const;
  public:
  void clear_leftnetfiltrationpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftnetfiltrationpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftnetfiltrationpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftnetfiltrationpressure();
  void set_allocated_leftnetfiltrationpressure(::pulse::cdm::bind::ScalarPressureData* leftnetfiltrationpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftnetfiltrationpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftnetfiltrationpressure();
  public:
  void unsafe_arena_set_allocated_leftnetfiltrationpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftnetfiltrationpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftnetfiltrationpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftNetReabsorptionPressure = 15;
  bool has_leftnetreabsorptionpressure() const;
  private:
  bool _internal_has_leftnetreabsorptionpressure() const;
  public:
  void clear_leftnetreabsorptionpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftnetreabsorptionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftnetreabsorptionpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftnetreabsorptionpressure();
  void set_allocated_leftnetreabsorptionpressure(::pulse::cdm::bind::ScalarPressureData* leftnetreabsorptionpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftnetreabsorptionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftnetreabsorptionpressure();
  public:
  void unsafe_arena_set_allocated_leftnetreabsorptionpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftnetreabsorptionpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftnetreabsorptionpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure = 16;
  bool has_leftperitubularcapillarieshydrostaticpressure() const;
  private:
  bool _internal_has_leftperitubularcapillarieshydrostaticpressure() const;
  public:
  void clear_leftperitubularcapillarieshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftperitubularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftperitubularcapillarieshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftperitubularcapillarieshydrostaticpressure();
  void set_allocated_leftperitubularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillarieshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftperitubularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftperitubularcapillarieshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_leftperitubularcapillarieshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillarieshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftperitubularcapillarieshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesOsmoticPressure = 17;
  bool has_leftperitubularcapillariesosmoticpressure() const;
  private:
  bool _internal_has_leftperitubularcapillariesosmoticpressure() const;
  public:
  void clear_leftperitubularcapillariesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& leftperitubularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_leftperitubularcapillariesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_leftperitubularcapillariesosmoticpressure();
  void set_allocated_leftperitubularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillariesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_leftperitubularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_leftperitubularcapillariesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_leftperitubularcapillariesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillariesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_leftperitubularcapillariesosmoticpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient = 18;
  bool has_leftreabsorptionfiltrationcoefficient() const;
  private:
  bool _internal_has_leftreabsorptionfiltrationcoefficient() const;
  public:
  void clear_leftreabsorptionfiltrationcoefficient();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& leftreabsorptionfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* release_leftreabsorptionfiltrationcoefficient();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* mutable_leftreabsorptionfiltrationcoefficient();
  void set_allocated_leftreabsorptionfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftreabsorptionfiltrationcoefficient);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& _internal_leftreabsorptionfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* _internal_mutable_leftreabsorptionfiltrationcoefficient();
  public:
  void unsafe_arena_set_allocated_leftreabsorptionfiltrationcoefficient(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftreabsorptionfiltrationcoefficient);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* unsafe_arena_release_leftreabsorptionfiltrationcoefficient();

  // .pulse.cdm.bind.ScalarVolumePerTimeData LeftReabsorptionRate = 19;
  bool has_leftreabsorptionrate() const;
  private:
  bool _internal_has_leftreabsorptionrate() const;
  public:
  void clear_leftreabsorptionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& leftreabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_leftreabsorptionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_leftreabsorptionrate();
  void set_allocated_leftreabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* leftreabsorptionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_leftreabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_leftreabsorptionrate();
  public:
  void unsafe_arena_set_allocated_leftreabsorptionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* leftreabsorptionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_leftreabsorptionrate();

  // .pulse.cdm.bind.ScalarPressureData LeftTubularOsmoticPressure = 20;
  bool has_lefttubularosmoticpressure() const;
  private:
  bool _internal_has_lefttubularosmoticpressure() const;
  public:
  void clear_lefttubularosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& lefttubularosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_lefttubularosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_lefttubularosmoticpressure();
  void set_allocated_lefttubularosmoticpressure(::pulse::cdm::bind::ScalarPressureData* lefttubularosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_lefttubularosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_lefttubularosmoticpressure();
  public:
  void unsafe_arena_set_allocated_lefttubularosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* lefttubularosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_lefttubularosmoticpressure();

  // .pulse.cdm.bind.ScalarPressureData LeftTubularHydrostaticPressure = 21;
  bool has_lefttubularhydrostaticpressure() const;
  private:
  bool _internal_has_lefttubularhydrostaticpressure() const;
  public:
  void clear_lefttubularhydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& lefttubularhydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_lefttubularhydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_lefttubularhydrostaticpressure();
  void set_allocated_lefttubularhydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* lefttubularhydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_lefttubularhydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_lefttubularhydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_lefttubularhydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* lefttubularhydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_lefttubularhydrostaticpressure();

  // .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea = 22;
  bool has_lefttubularreabsorptionfiltrationsurfacearea() const;
  private:
  bool _internal_has_lefttubularreabsorptionfiltrationsurfacearea() const;
  public:
  void clear_lefttubularreabsorptionfiltrationsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& lefttubularreabsorptionfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_lefttubularreabsorptionfiltrationsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_lefttubularreabsorptionfiltrationsurfacearea();
  void set_allocated_lefttubularreabsorptionfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfiltrationsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_lefttubularreabsorptionfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_lefttubularreabsorptionfiltrationsurfacearea();
  public:
  void unsafe_arena_set_allocated_lefttubularreabsorptionfiltrationsurfacearea(
      ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfiltrationsurfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_lefttubularreabsorptionfiltrationsurfacearea();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability = 23;
  bool has_lefttubularreabsorptionfluidpermeability() const;
  private:
  bool _internal_has_lefttubularreabsorptionfluidpermeability() const;
  public:
  void clear_lefttubularreabsorptionfluidpermeability();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& lefttubularreabsorptionfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_lefttubularreabsorptionfluidpermeability();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_lefttubularreabsorptionfluidpermeability();
  void set_allocated_lefttubularreabsorptionfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeability);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_lefttubularreabsorptionfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_lefttubularreabsorptionfluidpermeability();
  public:
  void unsafe_arena_set_allocated_lefttubularreabsorptionfluidpermeability(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeability);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_lefttubularreabsorptionfluidpermeability();

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalBloodFlow = 24;
  bool has_renalbloodflow() const;
  private:
  bool _internal_has_renalbloodflow() const;
  public:
  void clear_renalbloodflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& renalbloodflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_renalbloodflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_renalbloodflow();
  void set_allocated_renalbloodflow(::pulse::cdm::bind::ScalarVolumePerTimeData* renalbloodflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_renalbloodflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_renalbloodflow();
  public:
  void unsafe_arena_set_allocated_renalbloodflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* renalbloodflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_renalbloodflow();

  // .pulse.cdm.bind.ScalarVolumePerTimeData RenalPlasmaFlow = 25;
  bool has_renalplasmaflow() const;
  private:
  bool _internal_has_renalplasmaflow() const;
  public:
  void clear_renalplasmaflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& renalplasmaflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_renalplasmaflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_renalplasmaflow();
  void set_allocated_renalplasmaflow(::pulse::cdm::bind::ScalarVolumePerTimeData* renalplasmaflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_renalplasmaflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_renalplasmaflow();
  public:
  void unsafe_arena_set_allocated_renalplasmaflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* renalplasmaflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_renalplasmaflow();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RenalVascularResistance = 26;
  bool has_renalvascularresistance() const;
  private:
  bool _internal_has_renalvascularresistance() const;
  public:
  void clear_renalvascularresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& renalvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_renalvascularresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_renalvascularresistance();
  void set_allocated_renalvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* renalvascularresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_renalvascularresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_renalvascularresistance();
  public:
  void unsafe_arena_set_allocated_renalvascularresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* renalvascularresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_renalvascularresistance();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAfferentArterioleResistance = 27;
  bool has_rightafferentarterioleresistance() const;
  private:
  bool _internal_has_rightafferentarterioleresistance() const;
  public:
  void clear_rightafferentarterioleresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& rightafferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_rightafferentarterioleresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_rightafferentarterioleresistance();
  void set_allocated_rightafferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightafferentarterioleresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_rightafferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_rightafferentarterioleresistance();
  public:
  void unsafe_arena_set_allocated_rightafferentarterioleresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightafferentarterioleresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_rightafferentarterioleresistance();

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesHydrostaticPressure = 28;
  bool has_rightbowmanscapsuleshydrostaticpressure() const;
  private:
  bool _internal_has_rightbowmanscapsuleshydrostaticpressure() const;
  public:
  void clear_rightbowmanscapsuleshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightbowmanscapsuleshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightbowmanscapsuleshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightbowmanscapsuleshydrostaticpressure();
  void set_allocated_rightbowmanscapsuleshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsuleshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightbowmanscapsuleshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightbowmanscapsuleshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_rightbowmanscapsuleshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsuleshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightbowmanscapsuleshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesOsmoticPressure = 29;
  bool has_rightbowmanscapsulesosmoticpressure() const;
  private:
  bool _internal_has_rightbowmanscapsulesosmoticpressure() const;
  public:
  void clear_rightbowmanscapsulesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightbowmanscapsulesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightbowmanscapsulesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightbowmanscapsulesosmoticpressure();
  void set_allocated_rightbowmanscapsulesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsulesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightbowmanscapsulesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightbowmanscapsulesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_rightbowmanscapsulesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsulesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightbowmanscapsulesosmoticpressure();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightEfferentArterioleResistance = 30;
  bool has_rightefferentarterioleresistance() const;
  private:
  bool _internal_has_rightefferentarterioleresistance() const;
  public:
  void clear_rightefferentarterioleresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& rightefferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_rightefferentarterioleresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_rightefferentarterioleresistance();
  void set_allocated_rightefferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightefferentarterioleresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_rightefferentarterioleresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_rightefferentarterioleresistance();
  public:
  void unsafe_arena_set_allocated_rightefferentarterioleresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightefferentarterioleresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_rightefferentarterioleresistance();

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesHydrostaticPressure = 31;
  bool has_rightglomerularcapillarieshydrostaticpressure() const;
  private:
  bool _internal_has_rightglomerularcapillarieshydrostaticpressure() const;
  public:
  void clear_rightglomerularcapillarieshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightglomerularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightglomerularcapillarieshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightglomerularcapillarieshydrostaticpressure();
  void set_allocated_rightglomerularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillarieshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightglomerularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightglomerularcapillarieshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_rightglomerularcapillarieshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillarieshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightglomerularcapillarieshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesOsmoticPressure = 32;
  bool has_rightglomerularcapillariesosmoticpressure() const;
  private:
  bool _internal_has_rightglomerularcapillariesosmoticpressure() const;
  public:
  void clear_rightglomerularcapillariesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightglomerularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightglomerularcapillariesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightglomerularcapillariesosmoticpressure();
  void set_allocated_rightglomerularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillariesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightglomerularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightglomerularcapillariesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_rightglomerularcapillariesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillariesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightglomerularcapillariesosmoticpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient = 33;
  bool has_rightglomerularfiltrationcoefficient() const;
  private:
  bool _internal_has_rightglomerularfiltrationcoefficient() const;
  public:
  void clear_rightglomerularfiltrationcoefficient();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& rightglomerularfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* release_rightglomerularfiltrationcoefficient();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* mutable_rightglomerularfiltrationcoefficient();
  void set_allocated_rightglomerularfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightglomerularfiltrationcoefficient);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& _internal_rightglomerularfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* _internal_mutable_rightglomerularfiltrationcoefficient();
  public:
  void unsafe_arena_set_allocated_rightglomerularfiltrationcoefficient(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightglomerularfiltrationcoefficient);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* unsafe_arena_release_rightglomerularfiltrationcoefficient();

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightGlomerularFiltrationRate = 34;
  bool has_rightglomerularfiltrationrate() const;
  private:
  bool _internal_has_rightglomerularfiltrationrate() const;
  public:
  void clear_rightglomerularfiltrationrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& rightglomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_rightglomerularfiltrationrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_rightglomerularfiltrationrate();
  void set_allocated_rightglomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* rightglomerularfiltrationrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_rightglomerularfiltrationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_rightglomerularfiltrationrate();
  public:
  void unsafe_arena_set_allocated_rightglomerularfiltrationrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* rightglomerularfiltrationrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_rightglomerularfiltrationrate();

  // .pulse.cdm.bind.ScalarAreaData RightGlomerularFiltrationSurfaceArea = 35;
  bool has_rightglomerularfiltrationsurfacearea() const;
  private:
  bool _internal_has_rightglomerularfiltrationsurfacearea() const;
  public:
  void clear_rightglomerularfiltrationsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& rightglomerularfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_rightglomerularfiltrationsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_rightglomerularfiltrationsurfacearea();
  void set_allocated_rightglomerularfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* rightglomerularfiltrationsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_rightglomerularfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_rightglomerularfiltrationsurfacearea();
  public:
  void unsafe_arena_set_allocated_rightglomerularfiltrationsurfacearea(
      ::pulse::cdm::bind::ScalarAreaData* rightglomerularfiltrationsurfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_rightglomerularfiltrationsurfacearea();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability = 36;
  bool has_rightglomerularfluidpermeability() const;
  private:
  bool _internal_has_rightglomerularfluidpermeability() const;
  public:
  void clear_rightglomerularfluidpermeability();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& rightglomerularfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_rightglomerularfluidpermeability();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_rightglomerularfluidpermeability();
  void set_allocated_rightglomerularfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeability);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_rightglomerularfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_rightglomerularfluidpermeability();
  public:
  void unsafe_arena_set_allocated_rightglomerularfluidpermeability(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeability);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_rightglomerularfluidpermeability();

  // .pulse.cdm.bind.Scalar0To1Data RightFiltrationFraction = 37;
  bool has_rightfiltrationfraction() const;
  private:
  bool _internal_has_rightfiltrationfraction() const;
  public:
  void clear_rightfiltrationfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& rightfiltrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightfiltrationfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightfiltrationfraction();
  void set_allocated_rightfiltrationfraction(::pulse::cdm::bind::Scalar0To1Data* rightfiltrationfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightfiltrationfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightfiltrationfraction();
  public:
  void unsafe_arena_set_allocated_rightfiltrationfraction(
      ::pulse::cdm::bind::Scalar0To1Data* rightfiltrationfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_rightfiltrationfraction();

  // .pulse.cdm.bind.ScalarPressureData RightNetFiltrationPressure = 38;
  bool has_rightnetfiltrationpressure() const;
  private:
  bool _internal_has_rightnetfiltrationpressure() const;
  public:
  void clear_rightnetfiltrationpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightnetfiltrationpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightnetfiltrationpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightnetfiltrationpressure();
  void set_allocated_rightnetfiltrationpressure(::pulse::cdm::bind::ScalarPressureData* rightnetfiltrationpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightnetfiltrationpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightnetfiltrationpressure();
  public:
  void unsafe_arena_set_allocated_rightnetfiltrationpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightnetfiltrationpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightnetfiltrationpressure();

  // .pulse.cdm.bind.ScalarPressureData RightNetReabsorptionPressure = 39;
  bool has_rightnetreabsorptionpressure() const;
  private:
  bool _internal_has_rightnetreabsorptionpressure() const;
  public:
  void clear_rightnetreabsorptionpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightnetreabsorptionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightnetreabsorptionpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightnetreabsorptionpressure();
  void set_allocated_rightnetreabsorptionpressure(::pulse::cdm::bind::ScalarPressureData* rightnetreabsorptionpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightnetreabsorptionpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightnetreabsorptionpressure();
  public:
  void unsafe_arena_set_allocated_rightnetreabsorptionpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightnetreabsorptionpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightnetreabsorptionpressure();

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesHydrostaticPressure = 40;
  bool has_rightperitubularcapillarieshydrostaticpressure() const;
  private:
  bool _internal_has_rightperitubularcapillarieshydrostaticpressure() const;
  public:
  void clear_rightperitubularcapillarieshydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightperitubularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightperitubularcapillarieshydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightperitubularcapillarieshydrostaticpressure();
  void set_allocated_rightperitubularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillarieshydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightperitubularcapillarieshydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightperitubularcapillarieshydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_rightperitubularcapillarieshydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillarieshydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightperitubularcapillarieshydrostaticpressure();

  // .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesOsmoticPressure = 41;
  bool has_rightperitubularcapillariesosmoticpressure() const;
  private:
  bool _internal_has_rightperitubularcapillariesosmoticpressure() const;
  public:
  void clear_rightperitubularcapillariesosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& rightperitubularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_rightperitubularcapillariesosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_rightperitubularcapillariesosmoticpressure();
  void set_allocated_rightperitubularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillariesosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_rightperitubularcapillariesosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_rightperitubularcapillariesosmoticpressure();
  public:
  void unsafe_arena_set_allocated_rightperitubularcapillariesosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillariesosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_rightperitubularcapillariesosmoticpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient = 42;
  bool has_rightreabsorptionfiltrationcoefficient() const;
  private:
  bool _internal_has_rightreabsorptionfiltrationcoefficient() const;
  public:
  void clear_rightreabsorptionfiltrationcoefficient();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& rightreabsorptionfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* release_rightreabsorptionfiltrationcoefficient();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* mutable_rightreabsorptionfiltrationcoefficient();
  void set_allocated_rightreabsorptionfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightreabsorptionfiltrationcoefficient);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& _internal_rightreabsorptionfiltrationcoefficient() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* _internal_mutable_rightreabsorptionfiltrationcoefficient();
  public:
  void unsafe_arena_set_allocated_rightreabsorptionfiltrationcoefficient(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightreabsorptionfiltrationcoefficient);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* unsafe_arena_release_rightreabsorptionfiltrationcoefficient();

  // .pulse.cdm.bind.ScalarVolumePerTimeData RightReabsorptionRate = 43;
  bool has_rightreabsorptionrate() const;
  private:
  bool _internal_has_rightreabsorptionrate() const;
  public:
  void clear_rightreabsorptionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& rightreabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_rightreabsorptionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_rightreabsorptionrate();
  void set_allocated_rightreabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* rightreabsorptionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_rightreabsorptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_rightreabsorptionrate();
  public:
  void unsafe_arena_set_allocated_rightreabsorptionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* rightreabsorptionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_rightreabsorptionrate();

  // .pulse.cdm.bind.ScalarPressureData RightTubularOsmoticPressure = 44;
  bool has_righttubularosmoticpressure() const;
  private:
  bool _internal_has_righttubularosmoticpressure() const;
  public:
  void clear_righttubularosmoticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& righttubularosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_righttubularosmoticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_righttubularosmoticpressure();
  void set_allocated_righttubularosmoticpressure(::pulse::cdm::bind::ScalarPressureData* righttubularosmoticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_righttubularosmoticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_righttubularosmoticpressure();
  public:
  void unsafe_arena_set_allocated_righttubularosmoticpressure(
      ::pulse::cdm::bind::ScalarPressureData* righttubularosmoticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_righttubularosmoticpressure();

  // .pulse.cdm.bind.ScalarPressureData RightTubularHydrostaticPressure = 45;
  bool has_righttubularhydrostaticpressure() const;
  private:
  bool _internal_has_righttubularhydrostaticpressure() const;
  public:
  void clear_righttubularhydrostaticpressure();
  const ::pulse::cdm::bind::ScalarPressureData& righttubularhydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_righttubularhydrostaticpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_righttubularhydrostaticpressure();
  void set_allocated_righttubularhydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* righttubularhydrostaticpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_righttubularhydrostaticpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_righttubularhydrostaticpressure();
  public:
  void unsafe_arena_set_allocated_righttubularhydrostaticpressure(
      ::pulse::cdm::bind::ScalarPressureData* righttubularhydrostaticpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_righttubularhydrostaticpressure();

  // .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea = 46;
  bool has_righttubularreabsorptionfiltrationsurfacearea() const;
  private:
  bool _internal_has_righttubularreabsorptionfiltrationsurfacearea() const;
  public:
  void clear_righttubularreabsorptionfiltrationsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& righttubularreabsorptionfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_righttubularreabsorptionfiltrationsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_righttubularreabsorptionfiltrationsurfacearea();
  void set_allocated_righttubularreabsorptionfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfiltrationsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_righttubularreabsorptionfiltrationsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_righttubularreabsorptionfiltrationsurfacearea();
  public:
  void unsafe_arena_set_allocated_righttubularreabsorptionfiltrationsurfacearea(
      ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfiltrationsurfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_righttubularreabsorptionfiltrationsurfacearea();

  // .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability = 47;
  bool has_righttubularreabsorptionfluidpermeability() const;
  private:
  bool _internal_has_righttubularreabsorptionfluidpermeability() const;
  public:
  void clear_righttubularreabsorptionfluidpermeability();
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& righttubularreabsorptionfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* release_righttubularreabsorptionfluidpermeability();
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* mutable_righttubularreabsorptionfluidpermeability();
  void set_allocated_righttubularreabsorptionfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeability);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& _internal_righttubularreabsorptionfluidpermeability() const;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* _internal_mutable_righttubularreabsorptionfluidpermeability();
  public:
  void unsafe_arena_set_allocated_righttubularreabsorptionfluidpermeability(
      ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeability);
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* unsafe_arena_release_righttubularreabsorptionfluidpermeability();

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrinationRate = 48;
  bool has_urinationrate() const;
  private:
  bool _internal_has_urinationrate() const;
  public:
  void clear_urinationrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& urinationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_urinationrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_urinationrate();
  void set_allocated_urinationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* urinationrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_urinationrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_urinationrate();
  public:
  void unsafe_arena_set_allocated_urinationrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* urinationrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_urinationrate();

  // .pulse.cdm.bind.ScalarOsmolalityData UrineOsmolality = 49;
  bool has_urineosmolality() const;
  private:
  bool _internal_has_urineosmolality() const;
  public:
  void clear_urineosmolality();
  const ::pulse::cdm::bind::ScalarOsmolalityData& urineosmolality() const;
  ::pulse::cdm::bind::ScalarOsmolalityData* release_urineosmolality();
  ::pulse::cdm::bind::ScalarOsmolalityData* mutable_urineosmolality();
  void set_allocated_urineosmolality(::pulse::cdm::bind::ScalarOsmolalityData* urineosmolality);
  private:
  const ::pulse::cdm::bind::ScalarOsmolalityData& _internal_urineosmolality() const;
  ::pulse::cdm::bind::ScalarOsmolalityData* _internal_mutable_urineosmolality();
  public:
  void unsafe_arena_set_allocated_urineosmolality(
      ::pulse::cdm::bind::ScalarOsmolalityData* urineosmolality);
  ::pulse::cdm::bind::ScalarOsmolalityData* unsafe_arena_release_urineosmolality();

  // .pulse.cdm.bind.ScalarOsmolarityData UrineOsmolarity = 50;
  bool has_urineosmolarity() const;
  private:
  bool _internal_has_urineosmolarity() const;
  public:
  void clear_urineosmolarity();
  const ::pulse::cdm::bind::ScalarOsmolarityData& urineosmolarity() const;
  ::pulse::cdm::bind::ScalarOsmolarityData* release_urineosmolarity();
  ::pulse::cdm::bind::ScalarOsmolarityData* mutable_urineosmolarity();
  void set_allocated_urineosmolarity(::pulse::cdm::bind::ScalarOsmolarityData* urineosmolarity);
  private:
  const ::pulse::cdm::bind::ScalarOsmolarityData& _internal_urineosmolarity() const;
  ::pulse::cdm::bind::ScalarOsmolarityData* _internal_mutable_urineosmolarity();
  public:
  void unsafe_arena_set_allocated_urineosmolarity(
      ::pulse::cdm::bind::ScalarOsmolarityData* urineosmolarity);
  ::pulse::cdm::bind::ScalarOsmolarityData* unsafe_arena_release_urineosmolarity();

  // .pulse.cdm.bind.ScalarVolumePerTimeData UrineProductionRate = 51;
  bool has_urineproductionrate() const;
  private:
  bool _internal_has_urineproductionrate() const;
  public:
  void clear_urineproductionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& urineproductionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_urineproductionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_urineproductionrate();
  void set_allocated_urineproductionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* urineproductionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_urineproductionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_urineproductionrate();
  public:
  void unsafe_arena_set_allocated_urineproductionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* urineproductionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_urineproductionrate();

  // .pulse.cdm.bind.ScalarData UrineSpecificGravity = 52;
  bool has_urinespecificgravity() const;
  private:
  bool _internal_has_urinespecificgravity() const;
  public:
  void clear_urinespecificgravity();
  const ::pulse::cdm::bind::ScalarData& urinespecificgravity() const;
  ::pulse::cdm::bind::ScalarData* release_urinespecificgravity();
  ::pulse::cdm::bind::ScalarData* mutable_urinespecificgravity();
  void set_allocated_urinespecificgravity(::pulse::cdm::bind::ScalarData* urinespecificgravity);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_urinespecificgravity() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_urinespecificgravity();
  public:
  void unsafe_arena_set_allocated_urinespecificgravity(
      ::pulse::cdm::bind::ScalarData* urinespecificgravity);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_urinespecificgravity();

  // .pulse.cdm.bind.ScalarVolumeData UrineVolume = 53;
  bool has_urinevolume() const;
  private:
  bool _internal_has_urinevolume() const;
  public:
  void clear_urinevolume();
  const ::pulse::cdm::bind::ScalarVolumeData& urinevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_urinevolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_urinevolume();
  void set_allocated_urinevolume(::pulse::cdm::bind::ScalarVolumeData* urinevolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_urinevolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_urinevolume();
  public:
  void unsafe_arena_set_allocated_urinevolume(
      ::pulse::cdm::bind::ScalarVolumeData* urinevolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_urinevolume();

  // .pulse.cdm.bind.ScalarMassPerVolumeData UrineUreaNitrogenConcentration = 54;
  bool has_urineureanitrogenconcentration() const;
  private:
  bool _internal_has_urineureanitrogenconcentration() const;
  public:
  void clear_urineureanitrogenconcentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& urineureanitrogenconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_urineureanitrogenconcentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_urineureanitrogenconcentration();
  void set_allocated_urineureanitrogenconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* urineureanitrogenconcentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_urineureanitrogenconcentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_urineureanitrogenconcentration();
  public:
  void unsafe_arena_set_allocated_urineureanitrogenconcentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* urineureanitrogenconcentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_urineureanitrogenconcentration();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.RenalSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* filtrationfraction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* glomerularfiltrationrate_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftafferentarterioleresistance_;
  ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsuleshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsulesosmoticpressure_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftefferentarterioleresistance_;
  ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillarieshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillariesosmoticpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftglomerularfiltrationcoefficient_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* leftglomerularfiltrationrate_;
  ::pulse::cdm::bind::ScalarAreaData* leftglomerularfiltrationsurfacearea_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeability_;
  ::pulse::cdm::bind::Scalar0To1Data* leftfiltrationfraction_;
  ::pulse::cdm::bind::ScalarPressureData* leftnetfiltrationpressure_;
  ::pulse::cdm::bind::ScalarPressureData* leftnetreabsorptionpressure_;
  ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillarieshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillariesosmoticpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftreabsorptionfiltrationcoefficient_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* leftreabsorptionrate_;
  ::pulse::cdm::bind::ScalarPressureData* lefttubularosmoticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* lefttubularhydrostaticpressure_;
  ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfiltrationsurfacearea_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeability_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* renalbloodflow_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* renalplasmaflow_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* renalvascularresistance_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightafferentarterioleresistance_;
  ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsuleshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsulesosmoticpressure_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightefferentarterioleresistance_;
  ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillarieshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillariesosmoticpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightglomerularfiltrationcoefficient_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* rightglomerularfiltrationrate_;
  ::pulse::cdm::bind::ScalarAreaData* rightglomerularfiltrationsurfacearea_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeability_;
  ::pulse::cdm::bind::Scalar0To1Data* rightfiltrationfraction_;
  ::pulse::cdm::bind::ScalarPressureData* rightnetfiltrationpressure_;
  ::pulse::cdm::bind::ScalarPressureData* rightnetreabsorptionpressure_;
  ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillarieshydrostaticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillariesosmoticpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightreabsorptionfiltrationcoefficient_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* rightreabsorptionrate_;
  ::pulse::cdm::bind::ScalarPressureData* righttubularosmoticpressure_;
  ::pulse::cdm::bind::ScalarPressureData* righttubularhydrostaticpressure_;
  ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfiltrationsurfacearea_;
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeability_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* urinationrate_;
  ::pulse::cdm::bind::ScalarOsmolalityData* urineosmolality_;
  ::pulse::cdm::bind::ScalarOsmolarityData* urineosmolarity_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* urineproductionrate_;
  ::pulse::cdm::bind::ScalarData* urinespecificgravity_;
  ::pulse::cdm::bind::ScalarVolumeData* urinevolume_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* urineureanitrogenconcentration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class RespiratorySystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.RespiratorySystemData) */ {
 public:
  inline RespiratorySystemData() : RespiratorySystemData(nullptr) {}
  virtual ~RespiratorySystemData();

  RespiratorySystemData(const RespiratorySystemData& from);
  RespiratorySystemData(RespiratorySystemData&& from) noexcept
    : RespiratorySystemData() {
    *this = ::std::move(from);
  }

  inline RespiratorySystemData& operator=(const RespiratorySystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespiratorySystemData& operator=(RespiratorySystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespiratorySystemData& default_instance();

  static inline const RespiratorySystemData* internal_default_instance() {
    return reinterpret_cast<const RespiratorySystemData*>(
               &_RespiratorySystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RespiratorySystemData& a, RespiratorySystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(RespiratorySystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespiratorySystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespiratorySystemData* New() const final {
    return CreateMaybeMessage<RespiratorySystemData>(nullptr);
  }

  RespiratorySystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespiratorySystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespiratorySystemData& from);
  void MergeFrom(const RespiratorySystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespiratorySystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.RespiratorySystemData";
  }
  protected:
  explicit RespiratorySystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlveolarArterialGradientFieldNumber = 1,
    kAlveolarDeadSpaceFieldNumber = 2,
    kAnatomicDeadSpaceFieldNumber = 3,
    kCarricoIndexFieldNumber = 4,
    kChestWallComplianceFieldNumber = 5,
    kElasticWorkOfBreathingFieldNumber = 6,
    kEndTidalCarbonDioxideFractionFieldNumber = 7,
    kEndTidalCarbonDioxidePressureFieldNumber = 8,
    kEndTidalOxygenFractionFieldNumber = 9,
    kEndTidalOxygenPressureFieldNumber = 10,
    kExpiratoryFlowFieldNumber = 11,
    kExpiratoryPulmonaryResistanceFieldNumber = 12,
    kFractionOfInsipredOxygenFieldNumber = 13,
    kImposedPowerOfBreathingFieldNumber = 14,
    kImposedWorkOfBreathingFieldNumber = 15,
    kInspiratoryExpiratoryRatioFieldNumber = 16,
    kInspiratoryFlowFieldNumber = 17,
    kInspiratoryPulmonaryResistanceFieldNumber = 18,
    kIntrapleuralPressureFieldNumber = 19,
    kIntrapulmonaryPressureFieldNumber = 20,
    kLungComplianceFieldNumber = 21,
    kMaximalInspiratoryPressureFieldNumber = 22,
    kMeanAirwayPressureFieldNumber = 23,
    kOxygenationIndexFieldNumber = 24,
    kOxygenSaturationIndexFieldNumber = 25,
    kPatientPowerOfBreathingFieldNumber = 26,
    kPatientWorkOfBreathingFieldNumber = 27,
    kPeakInspiratoryPressureFieldNumber = 28,
    kPhysiologicDeadSpaceFieldNumber = 29,
    kPositiveEndExpiratoryPressureFieldNumber = 30,
    kPulmonaryComplianceFieldNumber = 31,
    kPulmonaryElastanceFieldNumber = 32,
    kResistiveExpiratoryWorkOfBreathingFieldNumber = 33,
    kResistiveInspiratoryWorkOfBreathingFieldNumber = 34,
    kRespirationRateFieldNumber = 35,
    kRespiratoryMuscleFatigueFieldNumber = 36,
    kRespiratoryMusclePressureFieldNumber = 37,
    kSaturationAndFractionOfInspiredOxygenRatioFieldNumber = 38,
    kSpecificVentilationFieldNumber = 39,
    kTidalVolumeFieldNumber = 40,
    kTotalAlveolarVentilationFieldNumber = 41,
    kTotalDeadSpaceVentilationFieldNumber = 42,
    kTotalLungVolumeFieldNumber = 43,
    kTotalPowerOfBreathingFieldNumber = 44,
    kTotalPulmonaryVentilationFieldNumber = 45,
    kTotalWorkOfBreathingFieldNumber = 46,
    kTransairwayPressureFieldNumber = 47,
    kTransalveolarPressureFieldNumber = 48,
    kTransChestWallPressureFieldNumber = 49,
    kTransMusclePressureFieldNumber = 50,
    kTranspulmonaryPressureFieldNumber = 51,
    kTransrespiratoryPressureFieldNumber = 52,
    kTransthoracicPressureFieldNumber = 53,
  };
  // .pulse.cdm.bind.ScalarPressureData AlveolarArterialGradient = 1;
  bool has_alveolararterialgradient() const;
  private:
  bool _internal_has_alveolararterialgradient() const;
  public:
  void clear_alveolararterialgradient();
  const ::pulse::cdm::bind::ScalarPressureData& alveolararterialgradient() const;
  ::pulse::cdm::bind::ScalarPressureData* release_alveolararterialgradient();
  ::pulse::cdm::bind::ScalarPressureData* mutable_alveolararterialgradient();
  void set_allocated_alveolararterialgradient(::pulse::cdm::bind::ScalarPressureData* alveolararterialgradient);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_alveolararterialgradient() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_alveolararterialgradient();
  public:
  void unsafe_arena_set_allocated_alveolararterialgradient(
      ::pulse::cdm::bind::ScalarPressureData* alveolararterialgradient);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_alveolararterialgradient();

  // .pulse.cdm.bind.ScalarVolumeData AlveolarDeadSpace = 2;
  bool has_alveolardeadspace() const;
  private:
  bool _internal_has_alveolardeadspace() const;
  public:
  void clear_alveolardeadspace();
  const ::pulse::cdm::bind::ScalarVolumeData& alveolardeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_alveolardeadspace();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_alveolardeadspace();
  void set_allocated_alveolardeadspace(::pulse::cdm::bind::ScalarVolumeData* alveolardeadspace);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_alveolardeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_alveolardeadspace();
  public:
  void unsafe_arena_set_allocated_alveolardeadspace(
      ::pulse::cdm::bind::ScalarVolumeData* alveolardeadspace);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_alveolardeadspace();

  // .pulse.cdm.bind.ScalarVolumeData AnatomicDeadSpace = 3;
  bool has_anatomicdeadspace() const;
  private:
  bool _internal_has_anatomicdeadspace() const;
  public:
  void clear_anatomicdeadspace();
  const ::pulse::cdm::bind::ScalarVolumeData& anatomicdeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_anatomicdeadspace();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_anatomicdeadspace();
  void set_allocated_anatomicdeadspace(::pulse::cdm::bind::ScalarVolumeData* anatomicdeadspace);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_anatomicdeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_anatomicdeadspace();
  public:
  void unsafe_arena_set_allocated_anatomicdeadspace(
      ::pulse::cdm::bind::ScalarVolumeData* anatomicdeadspace);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_anatomicdeadspace();

  // .pulse.cdm.bind.ScalarPressureData CarricoIndex = 4;
  bool has_carricoindex() const;
  private:
  bool _internal_has_carricoindex() const;
  public:
  void clear_carricoindex();
  const ::pulse::cdm::bind::ScalarPressureData& carricoindex() const;
  ::pulse::cdm::bind::ScalarPressureData* release_carricoindex();
  ::pulse::cdm::bind::ScalarPressureData* mutable_carricoindex();
  void set_allocated_carricoindex(::pulse::cdm::bind::ScalarPressureData* carricoindex);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_carricoindex() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_carricoindex();
  public:
  void unsafe_arena_set_allocated_carricoindex(
      ::pulse::cdm::bind::ScalarPressureData* carricoindex);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_carricoindex();

  // .pulse.cdm.bind.ScalarVolumePerPressureData ChestWallCompliance = 5;
  bool has_chestwallcompliance() const;
  private:
  bool _internal_has_chestwallcompliance() const;
  public:
  void clear_chestwallcompliance();
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& chestwallcompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* release_chestwallcompliance();
  ::pulse::cdm::bind::ScalarVolumePerPressureData* mutable_chestwallcompliance();
  void set_allocated_chestwallcompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* chestwallcompliance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& _internal_chestwallcompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* _internal_mutable_chestwallcompliance();
  public:
  void unsafe_arena_set_allocated_chestwallcompliance(
      ::pulse::cdm::bind::ScalarVolumePerPressureData* chestwallcompliance);
  ::pulse::cdm::bind::ScalarVolumePerPressureData* unsafe_arena_release_chestwallcompliance();

  // .pulse.cdm.bind.ScalarEnergyData ElasticWorkOfBreathing = 6;
  bool has_elasticworkofbreathing() const;
  private:
  bool _internal_has_elasticworkofbreathing() const;
  public:
  void clear_elasticworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& elasticworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_elasticworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_elasticworkofbreathing();
  void set_allocated_elasticworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* elasticworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_elasticworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_elasticworkofbreathing();
  public:
  void unsafe_arena_set_allocated_elasticworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* elasticworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_elasticworkofbreathing();

  // .pulse.cdm.bind.Scalar0To1Data EndTidalCarbonDioxideFraction = 7;
  bool has_endtidalcarbondioxidefraction() const;
  private:
  bool _internal_has_endtidalcarbondioxidefraction() const;
  public:
  void clear_endtidalcarbondioxidefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& endtidalcarbondioxidefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_endtidalcarbondioxidefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_endtidalcarbondioxidefraction();
  void set_allocated_endtidalcarbondioxidefraction(::pulse::cdm::bind::Scalar0To1Data* endtidalcarbondioxidefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_endtidalcarbondioxidefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_endtidalcarbondioxidefraction();
  public:
  void unsafe_arena_set_allocated_endtidalcarbondioxidefraction(
      ::pulse::cdm::bind::Scalar0To1Data* endtidalcarbondioxidefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_endtidalcarbondioxidefraction();

  // .pulse.cdm.bind.ScalarPressureData EndTidalCarbonDioxidePressure = 8;
  bool has_endtidalcarbondioxidepressure() const;
  private:
  bool _internal_has_endtidalcarbondioxidepressure() const;
  public:
  void clear_endtidalcarbondioxidepressure();
  const ::pulse::cdm::bind::ScalarPressureData& endtidalcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_endtidalcarbondioxidepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_endtidalcarbondioxidepressure();
  void set_allocated_endtidalcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* endtidalcarbondioxidepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_endtidalcarbondioxidepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_endtidalcarbondioxidepressure();
  public:
  void unsafe_arena_set_allocated_endtidalcarbondioxidepressure(
      ::pulse::cdm::bind::ScalarPressureData* endtidalcarbondioxidepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_endtidalcarbondioxidepressure();

  // .pulse.cdm.bind.Scalar0To1Data EndTidalOxygenFraction = 9;
  bool has_endtidaloxygenfraction() const;
  private:
  bool _internal_has_endtidaloxygenfraction() const;
  public:
  void clear_endtidaloxygenfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& endtidaloxygenfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_endtidaloxygenfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_endtidaloxygenfraction();
  void set_allocated_endtidaloxygenfraction(::pulse::cdm::bind::Scalar0To1Data* endtidaloxygenfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_endtidaloxygenfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_endtidaloxygenfraction();
  public:
  void unsafe_arena_set_allocated_endtidaloxygenfraction(
      ::pulse::cdm::bind::Scalar0To1Data* endtidaloxygenfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_endtidaloxygenfraction();

  // .pulse.cdm.bind.ScalarPressureData EndTidalOxygenPressure = 10;
  bool has_endtidaloxygenpressure() const;
  private:
  bool _internal_has_endtidaloxygenpressure() const;
  public:
  void clear_endtidaloxygenpressure();
  const ::pulse::cdm::bind::ScalarPressureData& endtidaloxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_endtidaloxygenpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_endtidaloxygenpressure();
  void set_allocated_endtidaloxygenpressure(::pulse::cdm::bind::ScalarPressureData* endtidaloxygenpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_endtidaloxygenpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_endtidaloxygenpressure();
  public:
  void unsafe_arena_set_allocated_endtidaloxygenpressure(
      ::pulse::cdm::bind::ScalarPressureData* endtidaloxygenpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_endtidaloxygenpressure();

  // .pulse.cdm.bind.ScalarVolumePerTimeData ExpiratoryFlow = 11;
  bool has_expiratoryflow() const;
  private:
  bool _internal_has_expiratoryflow() const;
  public:
  void clear_expiratoryflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& expiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_expiratoryflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_expiratoryflow();
  void set_allocated_expiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* expiratoryflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_expiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_expiratoryflow();
  public:
  void unsafe_arena_set_allocated_expiratoryflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* expiratoryflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_expiratoryflow();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryPulmonaryResistance = 12;
  bool has_expiratorypulmonaryresistance() const;
  private:
  bool _internal_has_expiratorypulmonaryresistance() const;
  public:
  void clear_expiratorypulmonaryresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& expiratorypulmonaryresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_expiratorypulmonaryresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_expiratorypulmonaryresistance();
  void set_allocated_expiratorypulmonaryresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* expiratorypulmonaryresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_expiratorypulmonaryresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_expiratorypulmonaryresistance();
  public:
  void unsafe_arena_set_allocated_expiratorypulmonaryresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* expiratorypulmonaryresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_expiratorypulmonaryresistance();

  // .pulse.cdm.bind.Scalar0To1Data FractionOfInsipredOxygen = 13;
  bool has_fractionofinsipredoxygen() const;
  private:
  bool _internal_has_fractionofinsipredoxygen() const;
  public:
  void clear_fractionofinsipredoxygen();
  const ::pulse::cdm::bind::Scalar0To1Data& fractionofinsipredoxygen() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_fractionofinsipredoxygen();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_fractionofinsipredoxygen();
  void set_allocated_fractionofinsipredoxygen(::pulse::cdm::bind::Scalar0To1Data* fractionofinsipredoxygen);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_fractionofinsipredoxygen() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_fractionofinsipredoxygen();
  public:
  void unsafe_arena_set_allocated_fractionofinsipredoxygen(
      ::pulse::cdm::bind::Scalar0To1Data* fractionofinsipredoxygen);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_fractionofinsipredoxygen();

  // .pulse.cdm.bind.ScalarPowerData ImposedPowerOfBreathing = 14;
  bool has_imposedpowerofbreathing() const;
  private:
  bool _internal_has_imposedpowerofbreathing() const;
  public:
  void clear_imposedpowerofbreathing();
  const ::pulse::cdm::bind::ScalarPowerData& imposedpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* release_imposedpowerofbreathing();
  ::pulse::cdm::bind::ScalarPowerData* mutable_imposedpowerofbreathing();
  void set_allocated_imposedpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* imposedpowerofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_imposedpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_imposedpowerofbreathing();
  public:
  void unsafe_arena_set_allocated_imposedpowerofbreathing(
      ::pulse::cdm::bind::ScalarPowerData* imposedpowerofbreathing);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_imposedpowerofbreathing();

  // .pulse.cdm.bind.ScalarEnergyData ImposedWorkOfBreathing = 15;
  bool has_imposedworkofbreathing() const;
  private:
  bool _internal_has_imposedworkofbreathing() const;
  public:
  void clear_imposedworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& imposedworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_imposedworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_imposedworkofbreathing();
  void set_allocated_imposedworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* imposedworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_imposedworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_imposedworkofbreathing();
  public:
  void unsafe_arena_set_allocated_imposedworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* imposedworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_imposedworkofbreathing();

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 16;
  bool has_inspiratoryexpiratoryratio() const;
  private:
  bool _internal_has_inspiratoryexpiratoryratio() const;
  public:
  void clear_inspiratoryexpiratoryratio();
  const ::pulse::cdm::bind::ScalarData& inspiratoryexpiratoryratio() const;
  ::pulse::cdm::bind::ScalarData* release_inspiratoryexpiratoryratio();
  ::pulse::cdm::bind::ScalarData* mutable_inspiratoryexpiratoryratio();
  void set_allocated_inspiratoryexpiratoryratio(::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_inspiratoryexpiratoryratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_inspiratoryexpiratoryratio();
  public:
  void unsafe_arena_set_allocated_inspiratoryexpiratoryratio(
      ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_inspiratoryexpiratoryratio();

  // .pulse.cdm.bind.ScalarVolumePerTimeData InspiratoryFlow = 17;
  bool has_inspiratoryflow() const;
  private:
  bool _internal_has_inspiratoryflow() const;
  public:
  void clear_inspiratoryflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& inspiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_inspiratoryflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_inspiratoryflow();
  void set_allocated_inspiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inspiratoryflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_inspiratoryflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_inspiratoryflow();
  public:
  void unsafe_arena_set_allocated_inspiratoryflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* inspiratoryflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_inspiratoryflow();

  // .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryPulmonaryResistance = 18;
  bool has_inspiratorypulmonaryresistance() const;
  private:
  bool _internal_has_inspiratorypulmonaryresistance() const;
  public:
  void clear_inspiratorypulmonaryresistance();
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& inspiratorypulmonaryresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* release_inspiratorypulmonaryresistance();
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* mutable_inspiratorypulmonaryresistance();
  void set_allocated_inspiratorypulmonaryresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* inspiratorypulmonaryresistance);
  private:
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& _internal_inspiratorypulmonaryresistance() const;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* _internal_mutable_inspiratorypulmonaryresistance();
  public:
  void unsafe_arena_set_allocated_inspiratorypulmonaryresistance(
      ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* inspiratorypulmonaryresistance);
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* unsafe_arena_release_inspiratorypulmonaryresistance();

  // .pulse.cdm.bind.ScalarPressureData IntrapleuralPressure = 19;
  bool has_intrapleuralpressure() const;
  private:
  bool _internal_has_intrapleuralpressure() const;
  public:
  void clear_intrapleuralpressure();
  const ::pulse::cdm::bind::ScalarPressureData& intrapleuralpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_intrapleuralpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_intrapleuralpressure();
  void set_allocated_intrapleuralpressure(::pulse::cdm::bind::ScalarPressureData* intrapleuralpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_intrapleuralpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_intrapleuralpressure();
  public:
  void unsafe_arena_set_allocated_intrapleuralpressure(
      ::pulse::cdm::bind::ScalarPressureData* intrapleuralpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_intrapleuralpressure();

  // .pulse.cdm.bind.ScalarPressureData IntrapulmonaryPressure = 20;
  bool has_intrapulmonarypressure() const;
  private:
  bool _internal_has_intrapulmonarypressure() const;
  public:
  void clear_intrapulmonarypressure();
  const ::pulse::cdm::bind::ScalarPressureData& intrapulmonarypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_intrapulmonarypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_intrapulmonarypressure();
  void set_allocated_intrapulmonarypressure(::pulse::cdm::bind::ScalarPressureData* intrapulmonarypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_intrapulmonarypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_intrapulmonarypressure();
  public:
  void unsafe_arena_set_allocated_intrapulmonarypressure(
      ::pulse::cdm::bind::ScalarPressureData* intrapulmonarypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_intrapulmonarypressure();

  // .pulse.cdm.bind.ScalarVolumePerPressureData LungCompliance = 21;
  bool has_lungcompliance() const;
  private:
  bool _internal_has_lungcompliance() const;
  public:
  void clear_lungcompliance();
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& lungcompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* release_lungcompliance();
  ::pulse::cdm::bind::ScalarVolumePerPressureData* mutable_lungcompliance();
  void set_allocated_lungcompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* lungcompliance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& _internal_lungcompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* _internal_mutable_lungcompliance();
  public:
  void unsafe_arena_set_allocated_lungcompliance(
      ::pulse::cdm::bind::ScalarVolumePerPressureData* lungcompliance);
  ::pulse::cdm::bind::ScalarVolumePerPressureData* unsafe_arena_release_lungcompliance();

  // .pulse.cdm.bind.ScalarPressureData MaximalInspiratoryPressure = 22;
  bool has_maximalinspiratorypressure() const;
  private:
  bool _internal_has_maximalinspiratorypressure() const;
  public:
  void clear_maximalinspiratorypressure();
  const ::pulse::cdm::bind::ScalarPressureData& maximalinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_maximalinspiratorypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_maximalinspiratorypressure();
  void set_allocated_maximalinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* maximalinspiratorypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_maximalinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_maximalinspiratorypressure();
  public:
  void unsafe_arena_set_allocated_maximalinspiratorypressure(
      ::pulse::cdm::bind::ScalarPressureData* maximalinspiratorypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_maximalinspiratorypressure();

  // .pulse.cdm.bind.ScalarPressureData MeanAirwayPressure = 23;
  bool has_meanairwaypressure() const;
  private:
  bool _internal_has_meanairwaypressure() const;
  public:
  void clear_meanairwaypressure();
  const ::pulse::cdm::bind::ScalarPressureData& meanairwaypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_meanairwaypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_meanairwaypressure();
  void set_allocated_meanairwaypressure(::pulse::cdm::bind::ScalarPressureData* meanairwaypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_meanairwaypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_meanairwaypressure();
  public:
  void unsafe_arena_set_allocated_meanairwaypressure(
      ::pulse::cdm::bind::ScalarPressureData* meanairwaypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_meanairwaypressure();

  // .pulse.cdm.bind.ScalarData OxygenationIndex = 24;
  bool has_oxygenationindex() const;
  private:
  bool _internal_has_oxygenationindex() const;
  public:
  void clear_oxygenationindex();
  const ::pulse::cdm::bind::ScalarData& oxygenationindex() const;
  ::pulse::cdm::bind::ScalarData* release_oxygenationindex();
  ::pulse::cdm::bind::ScalarData* mutable_oxygenationindex();
  void set_allocated_oxygenationindex(::pulse::cdm::bind::ScalarData* oxygenationindex);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_oxygenationindex() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_oxygenationindex();
  public:
  void unsafe_arena_set_allocated_oxygenationindex(
      ::pulse::cdm::bind::ScalarData* oxygenationindex);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_oxygenationindex();

  // .pulse.cdm.bind.ScalarPressureData OxygenSaturationIndex = 25;
  bool has_oxygensaturationindex() const;
  private:
  bool _internal_has_oxygensaturationindex() const;
  public:
  void clear_oxygensaturationindex();
  const ::pulse::cdm::bind::ScalarPressureData& oxygensaturationindex() const;
  ::pulse::cdm::bind::ScalarPressureData* release_oxygensaturationindex();
  ::pulse::cdm::bind::ScalarPressureData* mutable_oxygensaturationindex();
  void set_allocated_oxygensaturationindex(::pulse::cdm::bind::ScalarPressureData* oxygensaturationindex);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_oxygensaturationindex() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_oxygensaturationindex();
  public:
  void unsafe_arena_set_allocated_oxygensaturationindex(
      ::pulse::cdm::bind::ScalarPressureData* oxygensaturationindex);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_oxygensaturationindex();

  // .pulse.cdm.bind.ScalarPowerData PatientPowerOfBreathing = 26;
  bool has_patientpowerofbreathing() const;
  private:
  bool _internal_has_patientpowerofbreathing() const;
  public:
  void clear_patientpowerofbreathing();
  const ::pulse::cdm::bind::ScalarPowerData& patientpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* release_patientpowerofbreathing();
  ::pulse::cdm::bind::ScalarPowerData* mutable_patientpowerofbreathing();
  void set_allocated_patientpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* patientpowerofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_patientpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_patientpowerofbreathing();
  public:
  void unsafe_arena_set_allocated_patientpowerofbreathing(
      ::pulse::cdm::bind::ScalarPowerData* patientpowerofbreathing);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_patientpowerofbreathing();

  // .pulse.cdm.bind.ScalarEnergyData PatientWorkOfBreathing = 27;
  bool has_patientworkofbreathing() const;
  private:
  bool _internal_has_patientworkofbreathing() const;
  public:
  void clear_patientworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& patientworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_patientworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_patientworkofbreathing();
  void set_allocated_patientworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* patientworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_patientworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_patientworkofbreathing();
  public:
  void unsafe_arena_set_allocated_patientworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* patientworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_patientworkofbreathing();

  // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 28;
  bool has_peakinspiratorypressure() const;
  private:
  bool _internal_has_peakinspiratorypressure() const;
  public:
  void clear_peakinspiratorypressure();
  const ::pulse::cdm::bind::ScalarPressureData& peakinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_peakinspiratorypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_peakinspiratorypressure();
  void set_allocated_peakinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_peakinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_peakinspiratorypressure();
  public:
  void unsafe_arena_set_allocated_peakinspiratorypressure(
      ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_peakinspiratorypressure();

  // .pulse.cdm.bind.ScalarVolumeData PhysiologicDeadSpace = 29;
  bool has_physiologicdeadspace() const;
  private:
  bool _internal_has_physiologicdeadspace() const;
  public:
  void clear_physiologicdeadspace();
  const ::pulse::cdm::bind::ScalarVolumeData& physiologicdeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_physiologicdeadspace();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_physiologicdeadspace();
  void set_allocated_physiologicdeadspace(::pulse::cdm::bind::ScalarVolumeData* physiologicdeadspace);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_physiologicdeadspace() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_physiologicdeadspace();
  public:
  void unsafe_arena_set_allocated_physiologicdeadspace(
      ::pulse::cdm::bind::ScalarVolumeData* physiologicdeadspace);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_physiologicdeadspace();

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiratoryPressure = 30;
  bool has_positiveendexpiratorypressure() const;
  private:
  bool _internal_has_positiveendexpiratorypressure() const;
  public:
  void clear_positiveendexpiratorypressure();
  const ::pulse::cdm::bind::ScalarPressureData& positiveendexpiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_positiveendexpiratorypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_positiveendexpiratorypressure();
  void set_allocated_positiveendexpiratorypressure(::pulse::cdm::bind::ScalarPressureData* positiveendexpiratorypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_positiveendexpiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_positiveendexpiratorypressure();
  public:
  void unsafe_arena_set_allocated_positiveendexpiratorypressure(
      ::pulse::cdm::bind::ScalarPressureData* positiveendexpiratorypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_positiveendexpiratorypressure();

  // .pulse.cdm.bind.ScalarVolumePerPressureData PulmonaryCompliance = 31;
  bool has_pulmonarycompliance() const;
  private:
  bool _internal_has_pulmonarycompliance() const;
  public:
  void clear_pulmonarycompliance();
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& pulmonarycompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* release_pulmonarycompliance();
  ::pulse::cdm::bind::ScalarVolumePerPressureData* mutable_pulmonarycompliance();
  void set_allocated_pulmonarycompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* pulmonarycompliance);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerPressureData& _internal_pulmonarycompliance() const;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* _internal_mutable_pulmonarycompliance();
  public:
  void unsafe_arena_set_allocated_pulmonarycompliance(
      ::pulse::cdm::bind::ScalarVolumePerPressureData* pulmonarycompliance);
  ::pulse::cdm::bind::ScalarVolumePerPressureData* unsafe_arena_release_pulmonarycompliance();

  // .pulse.cdm.bind.ScalarPressurePerVolumeData PulmonaryElastance = 32;
  bool has_pulmonaryelastance() const;
  private:
  bool _internal_has_pulmonaryelastance() const;
  public:
  void clear_pulmonaryelastance();
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& pulmonaryelastance() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* release_pulmonaryelastance();
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* mutable_pulmonaryelastance();
  void set_allocated_pulmonaryelastance(::pulse::cdm::bind::ScalarPressurePerVolumeData* pulmonaryelastance);
  private:
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData& _internal_pulmonaryelastance() const;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* _internal_mutable_pulmonaryelastance();
  public:
  void unsafe_arena_set_allocated_pulmonaryelastance(
      ::pulse::cdm::bind::ScalarPressurePerVolumeData* pulmonaryelastance);
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* unsafe_arena_release_pulmonaryelastance();

  // .pulse.cdm.bind.ScalarEnergyData ResistiveExpiratoryWorkOfBreathing = 33;
  bool has_resistiveexpiratoryworkofbreathing() const;
  private:
  bool _internal_has_resistiveexpiratoryworkofbreathing() const;
  public:
  void clear_resistiveexpiratoryworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& resistiveexpiratoryworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_resistiveexpiratoryworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_resistiveexpiratoryworkofbreathing();
  void set_allocated_resistiveexpiratoryworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* resistiveexpiratoryworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_resistiveexpiratoryworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_resistiveexpiratoryworkofbreathing();
  public:
  void unsafe_arena_set_allocated_resistiveexpiratoryworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* resistiveexpiratoryworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_resistiveexpiratoryworkofbreathing();

  // .pulse.cdm.bind.ScalarEnergyData ResistiveInspiratoryWorkOfBreathing = 34;
  bool has_resistiveinspiratoryworkofbreathing() const;
  private:
  bool _internal_has_resistiveinspiratoryworkofbreathing() const;
  public:
  void clear_resistiveinspiratoryworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& resistiveinspiratoryworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_resistiveinspiratoryworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_resistiveinspiratoryworkofbreathing();
  void set_allocated_resistiveinspiratoryworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* resistiveinspiratoryworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_resistiveinspiratoryworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_resistiveinspiratoryworkofbreathing();
  public:
  void unsafe_arena_set_allocated_resistiveinspiratoryworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* resistiveinspiratoryworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_resistiveinspiratoryworkofbreathing();

  // .pulse.cdm.bind.ScalarFrequencyData RespirationRate = 35;
  bool has_respirationrate() const;
  private:
  bool _internal_has_respirationrate() const;
  public:
  void clear_respirationrate();
  const ::pulse::cdm::bind::ScalarFrequencyData& respirationrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_respirationrate();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_respirationrate();
  void set_allocated_respirationrate(::pulse::cdm::bind::ScalarFrequencyData* respirationrate);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_respirationrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_respirationrate();
  public:
  void unsafe_arena_set_allocated_respirationrate(
      ::pulse::cdm::bind::ScalarFrequencyData* respirationrate);
  ::pulse::cdm::bind::ScalarFrequencyData* unsafe_arena_release_respirationrate();

  // .pulse.cdm.bind.Scalar0To1Data RespiratoryMuscleFatigue = 36;
  bool has_respiratorymusclefatigue() const;
  private:
  bool _internal_has_respiratorymusclefatigue() const;
  public:
  void clear_respiratorymusclefatigue();
  const ::pulse::cdm::bind::Scalar0To1Data& respiratorymusclefatigue() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_respiratorymusclefatigue();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_respiratorymusclefatigue();
  void set_allocated_respiratorymusclefatigue(::pulse::cdm::bind::Scalar0To1Data* respiratorymusclefatigue);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_respiratorymusclefatigue() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_respiratorymusclefatigue();
  public:
  void unsafe_arena_set_allocated_respiratorymusclefatigue(
      ::pulse::cdm::bind::Scalar0To1Data* respiratorymusclefatigue);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_respiratorymusclefatigue();

  // .pulse.cdm.bind.ScalarPressureData RespiratoryMusclePressure = 37;
  bool has_respiratorymusclepressure() const;
  private:
  bool _internal_has_respiratorymusclepressure() const;
  public:
  void clear_respiratorymusclepressure();
  const ::pulse::cdm::bind::ScalarPressureData& respiratorymusclepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_respiratorymusclepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_respiratorymusclepressure();
  void set_allocated_respiratorymusclepressure(::pulse::cdm::bind::ScalarPressureData* respiratorymusclepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_respiratorymusclepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_respiratorymusclepressure();
  public:
  void unsafe_arena_set_allocated_respiratorymusclepressure(
      ::pulse::cdm::bind::ScalarPressureData* respiratorymusclepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_respiratorymusclepressure();

  // .pulse.cdm.bind.ScalarData SaturationAndFractionOfInspiredOxygenRatio = 38;
  bool has_saturationandfractionofinspiredoxygenratio() const;
  private:
  bool _internal_has_saturationandfractionofinspiredoxygenratio() const;
  public:
  void clear_saturationandfractionofinspiredoxygenratio();
  const ::pulse::cdm::bind::ScalarData& saturationandfractionofinspiredoxygenratio() const;
  ::pulse::cdm::bind::ScalarData* release_saturationandfractionofinspiredoxygenratio();
  ::pulse::cdm::bind::ScalarData* mutable_saturationandfractionofinspiredoxygenratio();
  void set_allocated_saturationandfractionofinspiredoxygenratio(::pulse::cdm::bind::ScalarData* saturationandfractionofinspiredoxygenratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_saturationandfractionofinspiredoxygenratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_saturationandfractionofinspiredoxygenratio();
  public:
  void unsafe_arena_set_allocated_saturationandfractionofinspiredoxygenratio(
      ::pulse::cdm::bind::ScalarData* saturationandfractionofinspiredoxygenratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_saturationandfractionofinspiredoxygenratio();

  // .pulse.cdm.bind.ScalarData SpecificVentilation = 39;
  bool has_specificventilation() const;
  private:
  bool _internal_has_specificventilation() const;
  public:
  void clear_specificventilation();
  const ::pulse::cdm::bind::ScalarData& specificventilation() const;
  ::pulse::cdm::bind::ScalarData* release_specificventilation();
  ::pulse::cdm::bind::ScalarData* mutable_specificventilation();
  void set_allocated_specificventilation(::pulse::cdm::bind::ScalarData* specificventilation);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_specificventilation() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_specificventilation();
  public:
  void unsafe_arena_set_allocated_specificventilation(
      ::pulse::cdm::bind::ScalarData* specificventilation);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_specificventilation();

  // .pulse.cdm.bind.ScalarVolumeData TidalVolume = 40;
  bool has_tidalvolume() const;
  private:
  bool _internal_has_tidalvolume() const;
  public:
  void clear_tidalvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& tidalvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_tidalvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_tidalvolume();
  void set_allocated_tidalvolume(::pulse::cdm::bind::ScalarVolumeData* tidalvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_tidalvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_tidalvolume();
  public:
  void unsafe_arena_set_allocated_tidalvolume(
      ::pulse::cdm::bind::ScalarVolumeData* tidalvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_tidalvolume();

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalAlveolarVentilation = 41;
  bool has_totalalveolarventilation() const;
  private:
  bool _internal_has_totalalveolarventilation() const;
  public:
  void clear_totalalveolarventilation();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalalveolarventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_totalalveolarventilation();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_totalalveolarventilation();
  void set_allocated_totalalveolarventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totalalveolarventilation);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_totalalveolarventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_totalalveolarventilation();
  public:
  void unsafe_arena_set_allocated_totalalveolarventilation(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* totalalveolarventilation);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_totalalveolarventilation();

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalDeadSpaceVentilation = 42;
  bool has_totaldeadspaceventilation() const;
  private:
  bool _internal_has_totaldeadspaceventilation() const;
  public:
  void clear_totaldeadspaceventilation();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& totaldeadspaceventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_totaldeadspaceventilation();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_totaldeadspaceventilation();
  void set_allocated_totaldeadspaceventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totaldeadspaceventilation);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_totaldeadspaceventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_totaldeadspaceventilation();
  public:
  void unsafe_arena_set_allocated_totaldeadspaceventilation(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* totaldeadspaceventilation);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_totaldeadspaceventilation();

  // .pulse.cdm.bind.ScalarVolumeData TotalLungVolume = 43;
  bool has_totallungvolume() const;
  private:
  bool _internal_has_totallungvolume() const;
  public:
  void clear_totallungvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& totallungvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totallungvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totallungvolume();
  void set_allocated_totallungvolume(::pulse::cdm::bind::ScalarVolumeData* totallungvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totallungvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totallungvolume();
  public:
  void unsafe_arena_set_allocated_totallungvolume(
      ::pulse::cdm::bind::ScalarVolumeData* totallungvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_totallungvolume();

  // .pulse.cdm.bind.ScalarPowerData TotalPowerOfBreathing = 44;
  bool has_totalpowerofbreathing() const;
  private:
  bool _internal_has_totalpowerofbreathing() const;
  public:
  void clear_totalpowerofbreathing();
  const ::pulse::cdm::bind::ScalarPowerData& totalpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* release_totalpowerofbreathing();
  ::pulse::cdm::bind::ScalarPowerData* mutable_totalpowerofbreathing();
  void set_allocated_totalpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* totalpowerofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarPowerData& _internal_totalpowerofbreathing() const;
  ::pulse::cdm::bind::ScalarPowerData* _internal_mutable_totalpowerofbreathing();
  public:
  void unsafe_arena_set_allocated_totalpowerofbreathing(
      ::pulse::cdm::bind::ScalarPowerData* totalpowerofbreathing);
  ::pulse::cdm::bind::ScalarPowerData* unsafe_arena_release_totalpowerofbreathing();

  // .pulse.cdm.bind.ScalarVolumePerTimeData TotalPulmonaryVentilation = 45;
  bool has_totalpulmonaryventilation() const;
  private:
  bool _internal_has_totalpulmonaryventilation() const;
  public:
  void clear_totalpulmonaryventilation();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& totalpulmonaryventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_totalpulmonaryventilation();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_totalpulmonaryventilation();
  void set_allocated_totalpulmonaryventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totalpulmonaryventilation);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_totalpulmonaryventilation() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_totalpulmonaryventilation();
  public:
  void unsafe_arena_set_allocated_totalpulmonaryventilation(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* totalpulmonaryventilation);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_totalpulmonaryventilation();

  // .pulse.cdm.bind.ScalarEnergyData TotalWorkOfBreathing = 46;
  bool has_totalworkofbreathing() const;
  private:
  bool _internal_has_totalworkofbreathing() const;
  public:
  void clear_totalworkofbreathing();
  const ::pulse::cdm::bind::ScalarEnergyData& totalworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* release_totalworkofbreathing();
  ::pulse::cdm::bind::ScalarEnergyData* mutable_totalworkofbreathing();
  void set_allocated_totalworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* totalworkofbreathing);
  private:
  const ::pulse::cdm::bind::ScalarEnergyData& _internal_totalworkofbreathing() const;
  ::pulse::cdm::bind::ScalarEnergyData* _internal_mutable_totalworkofbreathing();
  public:
  void unsafe_arena_set_allocated_totalworkofbreathing(
      ::pulse::cdm::bind::ScalarEnergyData* totalworkofbreathing);
  ::pulse::cdm::bind::ScalarEnergyData* unsafe_arena_release_totalworkofbreathing();

  // .pulse.cdm.bind.ScalarPressureData TransairwayPressure = 47;
  bool has_transairwaypressure() const;
  private:
  bool _internal_has_transairwaypressure() const;
  public:
  void clear_transairwaypressure();
  const ::pulse::cdm::bind::ScalarPressureData& transairwaypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transairwaypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transairwaypressure();
  void set_allocated_transairwaypressure(::pulse::cdm::bind::ScalarPressureData* transairwaypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transairwaypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transairwaypressure();
  public:
  void unsafe_arena_set_allocated_transairwaypressure(
      ::pulse::cdm::bind::ScalarPressureData* transairwaypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transairwaypressure();

  // .pulse.cdm.bind.ScalarPressureData TransalveolarPressure = 48;
  bool has_transalveolarpressure() const;
  private:
  bool _internal_has_transalveolarpressure() const;
  public:
  void clear_transalveolarpressure();
  const ::pulse::cdm::bind::ScalarPressureData& transalveolarpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transalveolarpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transalveolarpressure();
  void set_allocated_transalveolarpressure(::pulse::cdm::bind::ScalarPressureData* transalveolarpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transalveolarpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transalveolarpressure();
  public:
  void unsafe_arena_set_allocated_transalveolarpressure(
      ::pulse::cdm::bind::ScalarPressureData* transalveolarpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transalveolarpressure();

  // .pulse.cdm.bind.ScalarPressureData TransChestWallPressure = 49;
  bool has_transchestwallpressure() const;
  private:
  bool _internal_has_transchestwallpressure() const;
  public:
  void clear_transchestwallpressure();
  const ::pulse::cdm::bind::ScalarPressureData& transchestwallpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transchestwallpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transchestwallpressure();
  void set_allocated_transchestwallpressure(::pulse::cdm::bind::ScalarPressureData* transchestwallpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transchestwallpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transchestwallpressure();
  public:
  void unsafe_arena_set_allocated_transchestwallpressure(
      ::pulse::cdm::bind::ScalarPressureData* transchestwallpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transchestwallpressure();

  // .pulse.cdm.bind.ScalarPressureData TransMusclePressure = 50;
  bool has_transmusclepressure() const;
  private:
  bool _internal_has_transmusclepressure() const;
  public:
  void clear_transmusclepressure();
  const ::pulse::cdm::bind::ScalarPressureData& transmusclepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transmusclepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transmusclepressure();
  void set_allocated_transmusclepressure(::pulse::cdm::bind::ScalarPressureData* transmusclepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transmusclepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transmusclepressure();
  public:
  void unsafe_arena_set_allocated_transmusclepressure(
      ::pulse::cdm::bind::ScalarPressureData* transmusclepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transmusclepressure();

  // .pulse.cdm.bind.ScalarPressureData TranspulmonaryPressure = 51;
  bool has_transpulmonarypressure() const;
  private:
  bool _internal_has_transpulmonarypressure() const;
  public:
  void clear_transpulmonarypressure();
  const ::pulse::cdm::bind::ScalarPressureData& transpulmonarypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transpulmonarypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transpulmonarypressure();
  void set_allocated_transpulmonarypressure(::pulse::cdm::bind::ScalarPressureData* transpulmonarypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transpulmonarypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transpulmonarypressure();
  public:
  void unsafe_arena_set_allocated_transpulmonarypressure(
      ::pulse::cdm::bind::ScalarPressureData* transpulmonarypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transpulmonarypressure();

  // .pulse.cdm.bind.ScalarPressureData TransrespiratoryPressure = 52;
  bool has_transrespiratorypressure() const;
  private:
  bool _internal_has_transrespiratorypressure() const;
  public:
  void clear_transrespiratorypressure();
  const ::pulse::cdm::bind::ScalarPressureData& transrespiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transrespiratorypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transrespiratorypressure();
  void set_allocated_transrespiratorypressure(::pulse::cdm::bind::ScalarPressureData* transrespiratorypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transrespiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transrespiratorypressure();
  public:
  void unsafe_arena_set_allocated_transrespiratorypressure(
      ::pulse::cdm::bind::ScalarPressureData* transrespiratorypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transrespiratorypressure();

  // .pulse.cdm.bind.ScalarPressureData TransthoracicPressure = 53;
  bool has_transthoracicpressure() const;
  private:
  bool _internal_has_transthoracicpressure() const;
  public:
  void clear_transthoracicpressure();
  const ::pulse::cdm::bind::ScalarPressureData& transthoracicpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_transthoracicpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_transthoracicpressure();
  void set_allocated_transthoracicpressure(::pulse::cdm::bind::ScalarPressureData* transthoracicpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_transthoracicpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_transthoracicpressure();
  public:
  void unsafe_arena_set_allocated_transthoracicpressure(
      ::pulse::cdm::bind::ScalarPressureData* transthoracicpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_transthoracicpressure();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.RespiratorySystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarPressureData* alveolararterialgradient_;
  ::pulse::cdm::bind::ScalarVolumeData* alveolardeadspace_;
  ::pulse::cdm::bind::ScalarVolumeData* anatomicdeadspace_;
  ::pulse::cdm::bind::ScalarPressureData* carricoindex_;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* chestwallcompliance_;
  ::pulse::cdm::bind::ScalarEnergyData* elasticworkofbreathing_;
  ::pulse::cdm::bind::Scalar0To1Data* endtidalcarbondioxidefraction_;
  ::pulse::cdm::bind::ScalarPressureData* endtidalcarbondioxidepressure_;
  ::pulse::cdm::bind::Scalar0To1Data* endtidaloxygenfraction_;
  ::pulse::cdm::bind::ScalarPressureData* endtidaloxygenpressure_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* expiratoryflow_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* expiratorypulmonaryresistance_;
  ::pulse::cdm::bind::Scalar0To1Data* fractionofinsipredoxygen_;
  ::pulse::cdm::bind::ScalarPowerData* imposedpowerofbreathing_;
  ::pulse::cdm::bind::ScalarEnergyData* imposedworkofbreathing_;
  ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* inspiratoryflow_;
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* inspiratorypulmonaryresistance_;
  ::pulse::cdm::bind::ScalarPressureData* intrapleuralpressure_;
  ::pulse::cdm::bind::ScalarPressureData* intrapulmonarypressure_;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* lungcompliance_;
  ::pulse::cdm::bind::ScalarPressureData* maximalinspiratorypressure_;
  ::pulse::cdm::bind::ScalarPressureData* meanairwaypressure_;
  ::pulse::cdm::bind::ScalarData* oxygenationindex_;
  ::pulse::cdm::bind::ScalarPressureData* oxygensaturationindex_;
  ::pulse::cdm::bind::ScalarPowerData* patientpowerofbreathing_;
  ::pulse::cdm::bind::ScalarEnergyData* patientworkofbreathing_;
  ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure_;
  ::pulse::cdm::bind::ScalarVolumeData* physiologicdeadspace_;
  ::pulse::cdm::bind::ScalarPressureData* positiveendexpiratorypressure_;
  ::pulse::cdm::bind::ScalarVolumePerPressureData* pulmonarycompliance_;
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* pulmonaryelastance_;
  ::pulse::cdm::bind::ScalarEnergyData* resistiveexpiratoryworkofbreathing_;
  ::pulse::cdm::bind::ScalarEnergyData* resistiveinspiratoryworkofbreathing_;
  ::pulse::cdm::bind::ScalarFrequencyData* respirationrate_;
  ::pulse::cdm::bind::Scalar0To1Data* respiratorymusclefatigue_;
  ::pulse::cdm::bind::ScalarPressureData* respiratorymusclepressure_;
  ::pulse::cdm::bind::ScalarData* saturationandfractionofinspiredoxygenratio_;
  ::pulse::cdm::bind::ScalarData* specificventilation_;
  ::pulse::cdm::bind::ScalarVolumeData* tidalvolume_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* totalalveolarventilation_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* totaldeadspaceventilation_;
  ::pulse::cdm::bind::ScalarVolumeData* totallungvolume_;
  ::pulse::cdm::bind::ScalarPowerData* totalpowerofbreathing_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* totalpulmonaryventilation_;
  ::pulse::cdm::bind::ScalarEnergyData* totalworkofbreathing_;
  ::pulse::cdm::bind::ScalarPressureData* transairwaypressure_;
  ::pulse::cdm::bind::ScalarPressureData* transalveolarpressure_;
  ::pulse::cdm::bind::ScalarPressureData* transchestwallpressure_;
  ::pulse::cdm::bind::ScalarPressureData* transmusclepressure_;
  ::pulse::cdm::bind::ScalarPressureData* transpulmonarypressure_;
  ::pulse::cdm::bind::ScalarPressureData* transrespiratorypressure_;
  ::pulse::cdm::bind::ScalarPressureData* transthoracicpressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// -------------------------------------------------------------------

class TissueSystemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TissueSystemData) */ {
 public:
  inline TissueSystemData() : TissueSystemData(nullptr) {}
  virtual ~TissueSystemData();

  TissueSystemData(const TissueSystemData& from);
  TissueSystemData(TissueSystemData&& from) noexcept
    : TissueSystemData() {
    *this = ::std::move(from);
  }

  inline TissueSystemData& operator=(const TissueSystemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TissueSystemData& operator=(TissueSystemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TissueSystemData& default_instance();

  static inline const TissueSystemData* internal_default_instance() {
    return reinterpret_cast<const TissueSystemData*>(
               &_TissueSystemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TissueSystemData& a, TissueSystemData& b) {
    a.Swap(&b);
  }
  inline void Swap(TissueSystemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TissueSystemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TissueSystemData* New() const final {
    return CreateMaybeMessage<TissueSystemData>(nullptr);
  }

  TissueSystemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TissueSystemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TissueSystemData& from);
  void MergeFrom(const TissueSystemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TissueSystemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TissueSystemData";
  }
  protected:
  explicit TissueSystemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarbonDioxideProductionRateFieldNumber = 1,
    kExtracellularFluidVolumeFieldNumber = 2,
    kExtravascularFluidVolumeFieldNumber = 3,
    kIntracellularFluidPHFieldNumber = 4,
    kIntracellularFluidVolumeFieldNumber = 5,
    kOxygenConsumptionRateFieldNumber = 6,
    kRespiratoryExchangeRatioFieldNumber = 7,
  };
  // .pulse.cdm.bind.ScalarVolumePerTimeData CarbonDioxideProductionRate = 1;
  bool has_carbondioxideproductionrate() const;
  private:
  bool _internal_has_carbondioxideproductionrate() const;
  public:
  void clear_carbondioxideproductionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& carbondioxideproductionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_carbondioxideproductionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_carbondioxideproductionrate();
  void set_allocated_carbondioxideproductionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* carbondioxideproductionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_carbondioxideproductionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_carbondioxideproductionrate();
  public:
  void unsafe_arena_set_allocated_carbondioxideproductionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* carbondioxideproductionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_carbondioxideproductionrate();

  // .pulse.cdm.bind.ScalarVolumeData ExtracellularFluidVolume = 2;
  bool has_extracellularfluidvolume() const;
  private:
  bool _internal_has_extracellularfluidvolume() const;
  public:
  void clear_extracellularfluidvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& extracellularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_extracellularfluidvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_extracellularfluidvolume();
  void set_allocated_extracellularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* extracellularfluidvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_extracellularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_extracellularfluidvolume();
  public:
  void unsafe_arena_set_allocated_extracellularfluidvolume(
      ::pulse::cdm::bind::ScalarVolumeData* extracellularfluidvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_extracellularfluidvolume();

  // .pulse.cdm.bind.ScalarVolumeData ExtravascularFluidVolume = 3;
  bool has_extravascularfluidvolume() const;
  private:
  bool _internal_has_extravascularfluidvolume() const;
  public:
  void clear_extravascularfluidvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& extravascularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_extravascularfluidvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_extravascularfluidvolume();
  void set_allocated_extravascularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* extravascularfluidvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_extravascularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_extravascularfluidvolume();
  public:
  void unsafe_arena_set_allocated_extravascularfluidvolume(
      ::pulse::cdm::bind::ScalarVolumeData* extravascularfluidvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_extravascularfluidvolume();

  // .pulse.cdm.bind.ScalarData IntracellularFluidPH = 4;
  bool has_intracellularfluidph() const;
  private:
  bool _internal_has_intracellularfluidph() const;
  public:
  void clear_intracellularfluidph();
  const ::pulse::cdm::bind::ScalarData& intracellularfluidph() const;
  ::pulse::cdm::bind::ScalarData* release_intracellularfluidph();
  ::pulse::cdm::bind::ScalarData* mutable_intracellularfluidph();
  void set_allocated_intracellularfluidph(::pulse::cdm::bind::ScalarData* intracellularfluidph);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_intracellularfluidph() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_intracellularfluidph();
  public:
  void unsafe_arena_set_allocated_intracellularfluidph(
      ::pulse::cdm::bind::ScalarData* intracellularfluidph);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_intracellularfluidph();

  // .pulse.cdm.bind.ScalarVolumeData IntracellularFluidVolume = 5;
  bool has_intracellularfluidvolume() const;
  private:
  bool _internal_has_intracellularfluidvolume() const;
  public:
  void clear_intracellularfluidvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& intracellularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_intracellularfluidvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_intracellularfluidvolume();
  void set_allocated_intracellularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* intracellularfluidvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_intracellularfluidvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_intracellularfluidvolume();
  public:
  void unsafe_arena_set_allocated_intracellularfluidvolume(
      ::pulse::cdm::bind::ScalarVolumeData* intracellularfluidvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_intracellularfluidvolume();

  // .pulse.cdm.bind.ScalarVolumePerTimeData OxygenConsumptionRate = 6;
  bool has_oxygenconsumptionrate() const;
  private:
  bool _internal_has_oxygenconsumptionrate() const;
  public:
  void clear_oxygenconsumptionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& oxygenconsumptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_oxygenconsumptionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_oxygenconsumptionrate();
  void set_allocated_oxygenconsumptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* oxygenconsumptionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_oxygenconsumptionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_oxygenconsumptionrate();
  public:
  void unsafe_arena_set_allocated_oxygenconsumptionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* oxygenconsumptionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_oxygenconsumptionrate();

  // .pulse.cdm.bind.ScalarData RespiratoryExchangeRatio = 7;
  bool has_respiratoryexchangeratio() const;
  private:
  bool _internal_has_respiratoryexchangeratio() const;
  public:
  void clear_respiratoryexchangeratio();
  const ::pulse::cdm::bind::ScalarData& respiratoryexchangeratio() const;
  ::pulse::cdm::bind::ScalarData* release_respiratoryexchangeratio();
  ::pulse::cdm::bind::ScalarData* mutable_respiratoryexchangeratio();
  void set_allocated_respiratoryexchangeratio(::pulse::cdm::bind::ScalarData* respiratoryexchangeratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_respiratoryexchangeratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_respiratoryexchangeratio();
  public:
  void unsafe_arena_set_allocated_respiratoryexchangeratio(
      ::pulse::cdm::bind::ScalarData* respiratoryexchangeratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_respiratoryexchangeratio();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TissueSystemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* carbondioxideproductionrate_;
  ::pulse::cdm::bind::ScalarVolumeData* extracellularfluidvolume_;
  ::pulse::cdm::bind::ScalarVolumeData* extravascularfluidvolume_;
  ::pulse::cdm::bind::ScalarData* intracellularfluidph_;
  ::pulse::cdm::bind::ScalarVolumeData* intracellularfluidvolume_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* oxygenconsumptionrate_;
  ::pulse::cdm::bind::ScalarData* respiratoryexchangeratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPhysiology_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PupillaryResponseData

// .pulse.cdm.bind.ScalarNegative1To1Data ReactivityModifier = 1;
inline bool PupillaryResponseData::_internal_has_reactivitymodifier() const {
  return this != internal_default_instance() && reactivitymodifier_ != nullptr;
}
inline bool PupillaryResponseData::has_reactivitymodifier() const {
  return _internal_has_reactivitymodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::_internal_reactivitymodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = reactivitymodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::reactivitymodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PupillaryResponseData.ReactivityModifier)
  return _internal_reactivitymodifier();
}
inline void PupillaryResponseData::unsafe_arena_set_allocated_reactivitymodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* reactivitymodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivitymodifier_);
  }
  reactivitymodifier_ = reactivitymodifier;
  if (reactivitymodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PupillaryResponseData.ReactivityModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::release_reactivitymodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = reactivitymodifier_;
  reactivitymodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::unsafe_arena_release_reactivitymodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PupillaryResponseData.ReactivityModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = reactivitymodifier_;
  reactivitymodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::_internal_mutable_reactivitymodifier() {
  
  if (reactivitymodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    reactivitymodifier_ = p;
  }
  return reactivitymodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::mutable_reactivitymodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PupillaryResponseData.ReactivityModifier)
  return _internal_mutable_reactivitymodifier();
}
inline void PupillaryResponseData::set_allocated_reactivitymodifier(::pulse::cdm::bind::ScalarNegative1To1Data* reactivitymodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivitymodifier_);
  }
  if (reactivitymodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reactivitymodifier)->GetArena();
    if (message_arena != submessage_arena) {
      reactivitymodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reactivitymodifier, submessage_arena);
    }
    
  } else {
    
  }
  reactivitymodifier_ = reactivitymodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PupillaryResponseData.ReactivityModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data ShapeModifier = 2;
inline bool PupillaryResponseData::_internal_has_shapemodifier() const {
  return this != internal_default_instance() && shapemodifier_ != nullptr;
}
inline bool PupillaryResponseData::has_shapemodifier() const {
  return _internal_has_shapemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::_internal_shapemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = shapemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::shapemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PupillaryResponseData.ShapeModifier)
  return _internal_shapemodifier();
}
inline void PupillaryResponseData::unsafe_arena_set_allocated_shapemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* shapemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapemodifier_);
  }
  shapemodifier_ = shapemodifier;
  if (shapemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PupillaryResponseData.ShapeModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::release_shapemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = shapemodifier_;
  shapemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::unsafe_arena_release_shapemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PupillaryResponseData.ShapeModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = shapemodifier_;
  shapemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::_internal_mutable_shapemodifier() {
  
  if (shapemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    shapemodifier_ = p;
  }
  return shapemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::mutable_shapemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PupillaryResponseData.ShapeModifier)
  return _internal_mutable_shapemodifier();
}
inline void PupillaryResponseData::set_allocated_shapemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* shapemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapemodifier_);
  }
  if (shapemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      shapemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shapemodifier, submessage_arena);
    }
    
  } else {
    
  }
  shapemodifier_ = shapemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PupillaryResponseData.ShapeModifier)
}

// .pulse.cdm.bind.ScalarNegative1To1Data SizeModifier = 3;
inline bool PupillaryResponseData::_internal_has_sizemodifier() const {
  return this != internal_default_instance() && sizemodifier_ != nullptr;
}
inline bool PupillaryResponseData::has_sizemodifier() const {
  return _internal_has_sizemodifier();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::_internal_sizemodifier() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = sizemodifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& PupillaryResponseData::sizemodifier() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PupillaryResponseData.SizeModifier)
  return _internal_sizemodifier();
}
inline void PupillaryResponseData::unsafe_arena_set_allocated_sizemodifier(
    ::pulse::cdm::bind::ScalarNegative1To1Data* sizemodifier) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemodifier_);
  }
  sizemodifier_ = sizemodifier;
  if (sizemodifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PupillaryResponseData.SizeModifier)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::release_sizemodifier() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = sizemodifier_;
  sizemodifier_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::unsafe_arena_release_sizemodifier() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PupillaryResponseData.SizeModifier)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = sizemodifier_;
  sizemodifier_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::_internal_mutable_sizemodifier() {
  
  if (sizemodifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    sizemodifier_ = p;
  }
  return sizemodifier_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* PupillaryResponseData::mutable_sizemodifier() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PupillaryResponseData.SizeModifier)
  return _internal_mutable_sizemodifier();
}
inline void PupillaryResponseData::set_allocated_sizemodifier(::pulse::cdm::bind::ScalarNegative1To1Data* sizemodifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemodifier_);
  }
  if (sizemodifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemodifier)->GetArena();
    if (message_arena != submessage_arena) {
      sizemodifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizemodifier, submessage_arena);
    }
    
  } else {
    
  }
  sizemodifier_ = sizemodifier;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PupillaryResponseData.SizeModifier)
}

// -------------------------------------------------------------------

// BloodChemistrySystemData

// .pulse.cdm.bind.ScalarMassPerVolumeData BloodDensity = 1;
inline bool BloodChemistrySystemData::_internal_has_blooddensity() const {
  return this != internal_default_instance() && blooddensity_ != nullptr;
}
inline bool BloodChemistrySystemData::has_blooddensity() const {
  return _internal_has_blooddensity();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::_internal_blooddensity() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = blooddensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::blooddensity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.BloodDensity)
  return _internal_blooddensity();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_blooddensity(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* blooddensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blooddensity_);
  }
  blooddensity_ = blooddensity;
  if (blooddensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodDensity)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::release_blooddensity() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = blooddensity_;
  blooddensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_blooddensity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.BloodDensity)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = blooddensity_;
  blooddensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::_internal_mutable_blooddensity() {
  
  if (blooddensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    blooddensity_ = p;
  }
  return blooddensity_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::mutable_blooddensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.BloodDensity)
  return _internal_mutable_blooddensity();
}
inline void BloodChemistrySystemData::set_allocated_blooddensity(::pulse::cdm::bind::ScalarMassPerVolumeData* blooddensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blooddensity_);
  }
  if (blooddensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blooddensity)->GetArena();
    if (message_arena != submessage_arena) {
      blooddensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blooddensity, submessage_arena);
    }
    
  } else {
    
  }
  blooddensity_ = blooddensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodDensity)
}

// .pulse.cdm.bind.ScalarData BloodPH = 2;
inline bool BloodChemistrySystemData::_internal_has_bloodph() const {
  return this != internal_default_instance() && bloodph_ != nullptr;
}
inline bool BloodChemistrySystemData::has_bloodph() const {
  return _internal_has_bloodph();
}
inline const ::pulse::cdm::bind::ScalarData& BloodChemistrySystemData::_internal_bloodph() const {
  const ::pulse::cdm::bind::ScalarData* p = bloodph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& BloodChemistrySystemData::bloodph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.BloodPH)
  return _internal_bloodph();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_bloodph(
    ::pulse::cdm::bind::ScalarData* bloodph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph_);
  }
  bloodph_ = bloodph;
  if (bloodph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodPH)
}
inline ::pulse::cdm::bind::ScalarData* BloodChemistrySystemData::release_bloodph() {
  
  ::pulse::cdm::bind::ScalarData* temp = bloodph_;
  bloodph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* BloodChemistrySystemData::unsafe_arena_release_bloodph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.BloodPH)
  
  ::pulse::cdm::bind::ScalarData* temp = bloodph_;
  bloodph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* BloodChemistrySystemData::_internal_mutable_bloodph() {
  
  if (bloodph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    bloodph_ = p;
  }
  return bloodph_;
}
inline ::pulse::cdm::bind::ScalarData* BloodChemistrySystemData::mutable_bloodph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.BloodPH)
  return _internal_mutable_bloodph();
}
inline void BloodChemistrySystemData::set_allocated_bloodph(::pulse::cdm::bind::ScalarData* bloodph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph_);
  }
  if (bloodph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodph)->GetArena();
    if (message_arena != submessage_arena) {
      bloodph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodph, submessage_arena);
    }
    
  } else {
    
  }
  bloodph_ = bloodph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodPH)
}

// .pulse.cdm.bind.ScalarHeatCapacitancePerMassData BloodSpecificHeat = 3;
inline bool BloodChemistrySystemData::_internal_has_bloodspecificheat() const {
  return this != internal_default_instance() && bloodspecificheat_ != nullptr;
}
inline bool BloodChemistrySystemData::has_bloodspecificheat() const {
  return _internal_has_bloodspecificheat();
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& BloodChemistrySystemData::_internal_bloodspecificheat() const {
  const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* p = bloodspecificheat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData&>(
      ::pulse::cdm::bind::_ScalarHeatCapacitancePerMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData& BloodChemistrySystemData::bloodspecificheat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.BloodSpecificHeat)
  return _internal_bloodspecificheat();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_bloodspecificheat(
    ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bloodspecificheat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodspecificheat_);
  }
  bloodspecificheat_ = bloodspecificheat;
  if (bloodspecificheat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodSpecificHeat)
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* BloodChemistrySystemData::release_bloodspecificheat() {
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = bloodspecificheat_;
  bloodspecificheat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* BloodChemistrySystemData::unsafe_arena_release_bloodspecificheat() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.BloodSpecificHeat)
  
  ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* temp = bloodspecificheat_;
  bloodspecificheat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* BloodChemistrySystemData::_internal_mutable_bloodspecificheat() {
  
  if (bloodspecificheat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarHeatCapacitancePerMassData>(GetArena());
    bloodspecificheat_ = p;
  }
  return bloodspecificheat_;
}
inline ::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* BloodChemistrySystemData::mutable_bloodspecificheat() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.BloodSpecificHeat)
  return _internal_mutable_bloodspecificheat();
}
inline void BloodChemistrySystemData::set_allocated_bloodspecificheat(::pulse::cdm::bind::ScalarHeatCapacitancePerMassData* bloodspecificheat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodspecificheat_);
  }
  if (bloodspecificheat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodspecificheat)->GetArena();
    if (message_arena != submessage_arena) {
      bloodspecificheat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodspecificheat, submessage_arena);
    }
    
  } else {
    
  }
  bloodspecificheat_ = bloodspecificheat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodSpecificHeat)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData BloodUreaNitrogenConcentration = 4;
inline bool BloodChemistrySystemData::_internal_has_bloodureanitrogenconcentration() const {
  return this != internal_default_instance() && bloodureanitrogenconcentration_ != nullptr;
}
inline bool BloodChemistrySystemData::has_bloodureanitrogenconcentration() const {
  return _internal_has_bloodureanitrogenconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::_internal_bloodureanitrogenconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = bloodureanitrogenconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::bloodureanitrogenconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.BloodUreaNitrogenConcentration)
  return _internal_bloodureanitrogenconcentration();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_bloodureanitrogenconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* bloodureanitrogenconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodureanitrogenconcentration_);
  }
  bloodureanitrogenconcentration_ = bloodureanitrogenconcentration;
  if (bloodureanitrogenconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodUreaNitrogenConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::release_bloodureanitrogenconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bloodureanitrogenconcentration_;
  bloodureanitrogenconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_bloodureanitrogenconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.BloodUreaNitrogenConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = bloodureanitrogenconcentration_;
  bloodureanitrogenconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::_internal_mutable_bloodureanitrogenconcentration() {
  
  if (bloodureanitrogenconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    bloodureanitrogenconcentration_ = p;
  }
  return bloodureanitrogenconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::mutable_bloodureanitrogenconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.BloodUreaNitrogenConcentration)
  return _internal_mutable_bloodureanitrogenconcentration();
}
inline void BloodChemistrySystemData::set_allocated_bloodureanitrogenconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* bloodureanitrogenconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodureanitrogenconcentration_);
  }
  if (bloodureanitrogenconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodureanitrogenconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      bloodureanitrogenconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodureanitrogenconcentration, submessage_arena);
    }
    
  } else {
    
  }
  bloodureanitrogenconcentration_ = bloodureanitrogenconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.BloodUreaNitrogenConcentration)
}

// .pulse.cdm.bind.Scalar0To1Data CarbonDioxideSaturation = 5;
inline bool BloodChemistrySystemData::_internal_has_carbondioxidesaturation() const {
  return this != internal_default_instance() && carbondioxidesaturation_ != nullptr;
}
inline bool BloodChemistrySystemData::has_carbondioxidesaturation() const {
  return _internal_has_carbondioxidesaturation();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_carbondioxidesaturation() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = carbondioxidesaturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::carbondioxidesaturation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.CarbonDioxideSaturation)
  return _internal_carbondioxidesaturation();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_carbondioxidesaturation(
    ::pulse::cdm::bind::Scalar0To1Data* carbondioxidesaturation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxidesaturation_);
  }
  carbondioxidesaturation_ = carbondioxidesaturation;
  if (carbondioxidesaturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.CarbonDioxideSaturation)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_carbondioxidesaturation() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbondioxidesaturation_;
  carbondioxidesaturation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_carbondioxidesaturation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.CarbonDioxideSaturation)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbondioxidesaturation_;
  carbondioxidesaturation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_carbondioxidesaturation() {
  
  if (carbondioxidesaturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    carbondioxidesaturation_ = p;
  }
  return carbondioxidesaturation_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_carbondioxidesaturation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.CarbonDioxideSaturation)
  return _internal_mutable_carbondioxidesaturation();
}
inline void BloodChemistrySystemData::set_allocated_carbondioxidesaturation(::pulse::cdm::bind::Scalar0To1Data* carbondioxidesaturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxidesaturation_);
  }
  if (carbondioxidesaturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxidesaturation)->GetArena();
    if (message_arena != submessage_arena) {
      carbondioxidesaturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbondioxidesaturation, submessage_arena);
    }
    
  } else {
    
  }
  carbondioxidesaturation_ = carbondioxidesaturation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.CarbonDioxideSaturation)
}

// .pulse.cdm.bind.Scalar0To1Data CarbonMonoxideSaturation = 6;
inline bool BloodChemistrySystemData::_internal_has_carbonmonoxidesaturation() const {
  return this != internal_default_instance() && carbonmonoxidesaturation_ != nullptr;
}
inline bool BloodChemistrySystemData::has_carbonmonoxidesaturation() const {
  return _internal_has_carbonmonoxidesaturation();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_carbonmonoxidesaturation() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = carbonmonoxidesaturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::carbonmonoxidesaturation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.CarbonMonoxideSaturation)
  return _internal_carbonmonoxidesaturation();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_carbonmonoxidesaturation(
    ::pulse::cdm::bind::Scalar0To1Data* carbonmonoxidesaturation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbonmonoxidesaturation_);
  }
  carbonmonoxidesaturation_ = carbonmonoxidesaturation;
  if (carbonmonoxidesaturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.CarbonMonoxideSaturation)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_carbonmonoxidesaturation() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbonmonoxidesaturation_;
  carbonmonoxidesaturation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_carbonmonoxidesaturation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.CarbonMonoxideSaturation)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = carbonmonoxidesaturation_;
  carbonmonoxidesaturation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_carbonmonoxidesaturation() {
  
  if (carbonmonoxidesaturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    carbonmonoxidesaturation_ = p;
  }
  return carbonmonoxidesaturation_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_carbonmonoxidesaturation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.CarbonMonoxideSaturation)
  return _internal_mutable_carbonmonoxidesaturation();
}
inline void BloodChemistrySystemData::set_allocated_carbonmonoxidesaturation(::pulse::cdm::bind::Scalar0To1Data* carbonmonoxidesaturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbonmonoxidesaturation_);
  }
  if (carbonmonoxidesaturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbonmonoxidesaturation)->GetArena();
    if (message_arena != submessage_arena) {
      carbonmonoxidesaturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbonmonoxidesaturation, submessage_arena);
    }
    
  } else {
    
  }
  carbonmonoxidesaturation_ = carbonmonoxidesaturation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.CarbonMonoxideSaturation)
}

// .pulse.cdm.bind.Scalar0To1Data Hematocrit = 7;
inline bool BloodChemistrySystemData::_internal_has_hematocrit() const {
  return this != internal_default_instance() && hematocrit_ != nullptr;
}
inline bool BloodChemistrySystemData::has_hematocrit() const {
  return _internal_has_hematocrit();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_hematocrit() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = hematocrit_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::hematocrit() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.Hematocrit)
  return _internal_hematocrit();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_hematocrit(
    ::pulse::cdm::bind::Scalar0To1Data* hematocrit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit_);
  }
  hematocrit_ = hematocrit;
  if (hematocrit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.Hematocrit)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_hematocrit() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = hematocrit_;
  hematocrit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_hematocrit() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.Hematocrit)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = hematocrit_;
  hematocrit_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_hematocrit() {
  
  if (hematocrit_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    hematocrit_ = p;
  }
  return hematocrit_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_hematocrit() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.Hematocrit)
  return _internal_mutable_hematocrit();
}
inline void BloodChemistrySystemData::set_allocated_hematocrit(::pulse::cdm::bind::Scalar0To1Data* hematocrit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit_);
  }
  if (hematocrit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hematocrit)->GetArena();
    if (message_arena != submessage_arena) {
      hematocrit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hematocrit, submessage_arena);
    }
    
  } else {
    
  }
  hematocrit_ = hematocrit;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.Hematocrit)
}

// .pulse.cdm.bind.ScalarMassData HemoglobinContent = 8;
inline bool BloodChemistrySystemData::_internal_has_hemoglobincontent() const {
  return this != internal_default_instance() && hemoglobincontent_ != nullptr;
}
inline bool BloodChemistrySystemData::has_hemoglobincontent() const {
  return _internal_has_hemoglobincontent();
}
inline const ::pulse::cdm::bind::ScalarMassData& BloodChemistrySystemData::_internal_hemoglobincontent() const {
  const ::pulse::cdm::bind::ScalarMassData* p = hemoglobincontent_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& BloodChemistrySystemData::hemoglobincontent() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.HemoglobinContent)
  return _internal_hemoglobincontent();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_hemoglobincontent(
    ::pulse::cdm::bind::ScalarMassData* hemoglobincontent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobincontent_);
  }
  hemoglobincontent_ = hemoglobincontent;
  if (hemoglobincontent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.HemoglobinContent)
}
inline ::pulse::cdm::bind::ScalarMassData* BloodChemistrySystemData::release_hemoglobincontent() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = hemoglobincontent_;
  hemoglobincontent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* BloodChemistrySystemData::unsafe_arena_release_hemoglobincontent() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.HemoglobinContent)
  
  ::pulse::cdm::bind::ScalarMassData* temp = hemoglobincontent_;
  hemoglobincontent_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* BloodChemistrySystemData::_internal_mutable_hemoglobincontent() {
  
  if (hemoglobincontent_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    hemoglobincontent_ = p;
  }
  return hemoglobincontent_;
}
inline ::pulse::cdm::bind::ScalarMassData* BloodChemistrySystemData::mutable_hemoglobincontent() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.HemoglobinContent)
  return _internal_mutable_hemoglobincontent();
}
inline void BloodChemistrySystemData::set_allocated_hemoglobincontent(::pulse::cdm::bind::ScalarMassData* hemoglobincontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobincontent_);
  }
  if (hemoglobincontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hemoglobincontent)->GetArena();
    if (message_arena != submessage_arena) {
      hemoglobincontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hemoglobincontent, submessage_arena);
    }
    
  } else {
    
  }
  hemoglobincontent_ = hemoglobincontent;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.HemoglobinContent)
}

// .pulse.cdm.bind.Scalar0To1Data OxygenSaturation = 9;
inline bool BloodChemistrySystemData::_internal_has_oxygensaturation() const {
  return this != internal_default_instance() && oxygensaturation_ != nullptr;
}
inline bool BloodChemistrySystemData::has_oxygensaturation() const {
  return _internal_has_oxygensaturation();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_oxygensaturation() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = oxygensaturation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::oxygensaturation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.OxygenSaturation)
  return _internal_oxygensaturation();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_oxygensaturation(
    ::pulse::cdm::bind::Scalar0To1Data* oxygensaturation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturation_);
  }
  oxygensaturation_ = oxygensaturation;
  if (oxygensaturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.OxygenSaturation)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_oxygensaturation() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = oxygensaturation_;
  oxygensaturation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_oxygensaturation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.OxygenSaturation)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = oxygensaturation_;
  oxygensaturation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_oxygensaturation() {
  
  if (oxygensaturation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    oxygensaturation_ = p;
  }
  return oxygensaturation_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_oxygensaturation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.OxygenSaturation)
  return _internal_mutable_oxygensaturation();
}
inline void BloodChemistrySystemData::set_allocated_oxygensaturation(::pulse::cdm::bind::Scalar0To1Data* oxygensaturation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturation_);
  }
  if (oxygensaturation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturation)->GetArena();
    if (message_arena != submessage_arena) {
      oxygensaturation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygensaturation, submessage_arena);
    }
    
  } else {
    
  }
  oxygensaturation_ = oxygensaturation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.OxygenSaturation)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData Phosphate = 10;
inline bool BloodChemistrySystemData::_internal_has_phosphate() const {
  return this != internal_default_instance() && phosphate_ != nullptr;
}
inline bool BloodChemistrySystemData::has_phosphate() const {
  return _internal_has_phosphate();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::_internal_phosphate() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = phosphate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::phosphate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.Phosphate)
  return _internal_phosphate();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_phosphate(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* phosphate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phosphate_);
  }
  phosphate_ = phosphate;
  if (phosphate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.Phosphate)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::release_phosphate() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = phosphate_;
  phosphate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_phosphate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.Phosphate)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = phosphate_;
  phosphate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::_internal_mutable_phosphate() {
  
  if (phosphate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    phosphate_ = p;
  }
  return phosphate_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::mutable_phosphate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.Phosphate)
  return _internal_mutable_phosphate();
}
inline void BloodChemistrySystemData::set_allocated_phosphate(::pulse::cdm::bind::ScalarAmountPerVolumeData* phosphate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phosphate_);
  }
  if (phosphate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phosphate)->GetArena();
    if (message_arena != submessage_arena) {
      phosphate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phosphate, submessage_arena);
    }
    
  } else {
    
  }
  phosphate_ = phosphate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.Phosphate)
}

// .pulse.cdm.bind.ScalarVolumeData PlasmaVolume = 11;
inline bool BloodChemistrySystemData::_internal_has_plasmavolume() const {
  return this != internal_default_instance() && plasmavolume_ != nullptr;
}
inline bool BloodChemistrySystemData::has_plasmavolume() const {
  return _internal_has_plasmavolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& BloodChemistrySystemData::_internal_plasmavolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = plasmavolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& BloodChemistrySystemData::plasmavolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PlasmaVolume)
  return _internal_plasmavolume();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_plasmavolume(
    ::pulse::cdm::bind::ScalarVolumeData* plasmavolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmavolume_);
  }
  plasmavolume_ = plasmavolume;
  if (plasmavolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PlasmaVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* BloodChemistrySystemData::release_plasmavolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = plasmavolume_;
  plasmavolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BloodChemistrySystemData::unsafe_arena_release_plasmavolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PlasmaVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = plasmavolume_;
  plasmavolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BloodChemistrySystemData::_internal_mutable_plasmavolume() {
  
  if (plasmavolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    plasmavolume_ = p;
  }
  return plasmavolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* BloodChemistrySystemData::mutable_plasmavolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PlasmaVolume)
  return _internal_mutable_plasmavolume();
}
inline void BloodChemistrySystemData::set_allocated_plasmavolume(::pulse::cdm::bind::ScalarVolumeData* plasmavolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmavolume_);
  }
  if (plasmavolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plasmavolume)->GetArena();
    if (message_arena != submessage_arena) {
      plasmavolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plasmavolume, submessage_arena);
    }
    
  } else {
    
  }
  plasmavolume_ = plasmavolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PlasmaVolume)
}

// .pulse.cdm.bind.Scalar0To1Data PulseOximetry = 12;
inline bool BloodChemistrySystemData::_internal_has_pulseoximetry() const {
  return this != internal_default_instance() && pulseoximetry_ != nullptr;
}
inline bool BloodChemistrySystemData::has_pulseoximetry() const {
  return _internal_has_pulseoximetry();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_pulseoximetry() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = pulseoximetry_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::pulseoximetry() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PulseOximetry)
  return _internal_pulseoximetry();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_pulseoximetry(
    ::pulse::cdm::bind::Scalar0To1Data* pulseoximetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulseoximetry_);
  }
  pulseoximetry_ = pulseoximetry;
  if (pulseoximetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulseOximetry)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_pulseoximetry() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = pulseoximetry_;
  pulseoximetry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_pulseoximetry() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PulseOximetry)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = pulseoximetry_;
  pulseoximetry_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_pulseoximetry() {
  
  if (pulseoximetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    pulseoximetry_ = p;
  }
  return pulseoximetry_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_pulseoximetry() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PulseOximetry)
  return _internal_mutable_pulseoximetry();
}
inline void BloodChemistrySystemData::set_allocated_pulseoximetry(::pulse::cdm::bind::Scalar0To1Data* pulseoximetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulseoximetry_);
  }
  if (pulseoximetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulseoximetry)->GetArena();
    if (message_arena != submessage_arena) {
      pulseoximetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulseoximetry, submessage_arena);
    }
    
  } else {
    
  }
  pulseoximetry_ = pulseoximetry;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulseOximetry)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 13;
inline bool BloodChemistrySystemData::_internal_has_redbloodcellcount() const {
  return this != internal_default_instance() && redbloodcellcount_ != nullptr;
}
inline bool BloodChemistrySystemData::has_redbloodcellcount() const {
  return _internal_has_redbloodcellcount();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::_internal_redbloodcellcount() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = redbloodcellcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::redbloodcellcount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.RedBloodCellCount)
  return _internal_redbloodcellcount();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_redbloodcellcount(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount_);
  }
  redbloodcellcount_ = redbloodcellcount;
  if (redbloodcellcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.RedBloodCellCount)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::release_redbloodcellcount() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = redbloodcellcount_;
  redbloodcellcount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_redbloodcellcount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.RedBloodCellCount)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = redbloodcellcount_;
  redbloodcellcount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::_internal_mutable_redbloodcellcount() {
  
  if (redbloodcellcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    redbloodcellcount_ = p;
  }
  return redbloodcellcount_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::mutable_redbloodcellcount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.RedBloodCellCount)
  return _internal_mutable_redbloodcellcount();
}
inline void BloodChemistrySystemData::set_allocated_redbloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* redbloodcellcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount_);
  }
  if (redbloodcellcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(redbloodcellcount)->GetArena();
    if (message_arena != submessage_arena) {
      redbloodcellcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbloodcellcount, submessage_arena);
    }
    
  } else {
    
  }
  redbloodcellcount_ = redbloodcellcount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.RedBloodCellCount)
}

// .pulse.cdm.bind.Scalar0To1Data ShuntFraction = 14;
inline bool BloodChemistrySystemData::_internal_has_shuntfraction() const {
  return this != internal_default_instance() && shuntfraction_ != nullptr;
}
inline bool BloodChemistrySystemData::has_shuntfraction() const {
  return _internal_has_shuntfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_shuntfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = shuntfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::shuntfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.ShuntFraction)
  return _internal_shuntfraction();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_shuntfraction(
    ::pulse::cdm::bind::Scalar0To1Data* shuntfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shuntfraction_);
  }
  shuntfraction_ = shuntfraction;
  if (shuntfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ShuntFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_shuntfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = shuntfraction_;
  shuntfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_shuntfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.ShuntFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = shuntfraction_;
  shuntfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_shuntfraction() {
  
  if (shuntfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    shuntfraction_ = p;
  }
  return shuntfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_shuntfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.ShuntFraction)
  return _internal_mutable_shuntfraction();
}
inline void BloodChemistrySystemData::set_allocated_shuntfraction(::pulse::cdm::bind::Scalar0To1Data* shuntfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shuntfraction_);
  }
  if (shuntfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shuntfraction)->GetArena();
    if (message_arena != submessage_arena) {
      shuntfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shuntfraction, submessage_arena);
    }
    
  } else {
    
  }
  shuntfraction_ = shuntfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ShuntFraction)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData StrongIonDifference = 15;
inline bool BloodChemistrySystemData::_internal_has_strongiondifference() const {
  return this != internal_default_instance() && strongiondifference_ != nullptr;
}
inline bool BloodChemistrySystemData::has_strongiondifference() const {
  return _internal_has_strongiondifference();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::_internal_strongiondifference() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = strongiondifference_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::strongiondifference() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.StrongIonDifference)
  return _internal_strongiondifference();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_strongiondifference(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* strongiondifference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strongiondifference_);
  }
  strongiondifference_ = strongiondifference;
  if (strongiondifference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.StrongIonDifference)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::release_strongiondifference() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = strongiondifference_;
  strongiondifference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_strongiondifference() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.StrongIonDifference)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = strongiondifference_;
  strongiondifference_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::_internal_mutable_strongiondifference() {
  
  if (strongiondifference_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    strongiondifference_ = p;
  }
  return strongiondifference_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::mutable_strongiondifference() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.StrongIonDifference)
  return _internal_mutable_strongiondifference();
}
inline void BloodChemistrySystemData::set_allocated_strongiondifference(::pulse::cdm::bind::ScalarAmountPerVolumeData* strongiondifference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(strongiondifference_);
  }
  if (strongiondifference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strongiondifference)->GetArena();
    if (message_arena != submessage_arena) {
      strongiondifference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strongiondifference, submessage_arena);
    }
    
  } else {
    
  }
  strongiondifference_ = strongiondifference;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.StrongIonDifference)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData TotalProteinConcentration = 16;
inline bool BloodChemistrySystemData::_internal_has_totalproteinconcentration() const {
  return this != internal_default_instance() && totalproteinconcentration_ != nullptr;
}
inline bool BloodChemistrySystemData::has_totalproteinconcentration() const {
  return _internal_has_totalproteinconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::_internal_totalproteinconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = totalproteinconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& BloodChemistrySystemData::totalproteinconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.TotalProteinConcentration)
  return _internal_totalproteinconcentration();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_totalproteinconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* totalproteinconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalproteinconcentration_);
  }
  totalproteinconcentration_ = totalproteinconcentration;
  if (totalproteinconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.TotalProteinConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::release_totalproteinconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalproteinconcentration_;
  totalproteinconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_totalproteinconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.TotalProteinConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = totalproteinconcentration_;
  totalproteinconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::_internal_mutable_totalproteinconcentration() {
  
  if (totalproteinconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    totalproteinconcentration_ = p;
  }
  return totalproteinconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* BloodChemistrySystemData::mutable_totalproteinconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.TotalProteinConcentration)
  return _internal_mutable_totalproteinconcentration();
}
inline void BloodChemistrySystemData::set_allocated_totalproteinconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* totalproteinconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalproteinconcentration_);
  }
  if (totalproteinconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalproteinconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      totalproteinconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalproteinconcentration, submessage_arena);
    }
    
  } else {
    
  }
  totalproteinconcentration_ = totalproteinconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.TotalProteinConcentration)
}

// .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralLipidInPlasma = 17;
inline bool BloodChemistrySystemData::_internal_has_volumefractionneutrallipidinplasma() const {
  return this != internal_default_instance() && volumefractionneutrallipidinplasma_ != nullptr;
}
inline bool BloodChemistrySystemData::has_volumefractionneutrallipidinplasma() const {
  return _internal_has_volumefractionneutrallipidinplasma();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_volumefractionneutrallipidinplasma() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = volumefractionneutrallipidinplasma_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::volumefractionneutrallipidinplasma() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralLipidInPlasma)
  return _internal_volumefractionneutrallipidinplasma();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_volumefractionneutrallipidinplasma(
    ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutrallipidinplasma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutrallipidinplasma_);
  }
  volumefractionneutrallipidinplasma_ = volumefractionneutrallipidinplasma;
  if (volumefractionneutrallipidinplasma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralLipidInPlasma)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_volumefractionneutrallipidinplasma() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefractionneutrallipidinplasma_;
  volumefractionneutrallipidinplasma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_volumefractionneutrallipidinplasma() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralLipidInPlasma)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefractionneutrallipidinplasma_;
  volumefractionneutrallipidinplasma_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_volumefractionneutrallipidinplasma() {
  
  if (volumefractionneutrallipidinplasma_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    volumefractionneutrallipidinplasma_ = p;
  }
  return volumefractionneutrallipidinplasma_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_volumefractionneutrallipidinplasma() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralLipidInPlasma)
  return _internal_mutable_volumefractionneutrallipidinplasma();
}
inline void BloodChemistrySystemData::set_allocated_volumefractionneutrallipidinplasma(::pulse::cdm::bind::Scalar0To1Data* volumefractionneutrallipidinplasma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutrallipidinplasma_);
  }
  if (volumefractionneutrallipidinplasma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutrallipidinplasma)->GetArena();
    if (message_arena != submessage_arena) {
      volumefractionneutrallipidinplasma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volumefractionneutrallipidinplasma, submessage_arena);
    }
    
  } else {
    
  }
  volumefractionneutrallipidinplasma_ = volumefractionneutrallipidinplasma;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralLipidInPlasma)
}

// .pulse.cdm.bind.Scalar0To1Data VolumeFractionNeutralPhospholipidInPlasma = 18;
inline bool BloodChemistrySystemData::_internal_has_volumefractionneutralphospholipidinplasma() const {
  return this != internal_default_instance() && volumefractionneutralphospholipidinplasma_ != nullptr;
}
inline bool BloodChemistrySystemData::has_volumefractionneutralphospholipidinplasma() const {
  return _internal_has_volumefractionneutralphospholipidinplasma();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::_internal_volumefractionneutralphospholipidinplasma() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = volumefractionneutralphospholipidinplasma_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BloodChemistrySystemData::volumefractionneutralphospholipidinplasma() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralPhospholipidInPlasma)
  return _internal_volumefractionneutralphospholipidinplasma();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_volumefractionneutralphospholipidinplasma(
    ::pulse::cdm::bind::Scalar0To1Data* volumefractionneutralphospholipidinplasma) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutralphospholipidinplasma_);
  }
  volumefractionneutralphospholipidinplasma_ = volumefractionneutralphospholipidinplasma;
  if (volumefractionneutralphospholipidinplasma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralPhospholipidInPlasma)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::release_volumefractionneutralphospholipidinplasma() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefractionneutralphospholipidinplasma_;
  volumefractionneutralphospholipidinplasma_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::unsafe_arena_release_volumefractionneutralphospholipidinplasma() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralPhospholipidInPlasma)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = volumefractionneutralphospholipidinplasma_;
  volumefractionneutralphospholipidinplasma_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::_internal_mutable_volumefractionneutralphospholipidinplasma() {
  
  if (volumefractionneutralphospholipidinplasma_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    volumefractionneutralphospholipidinplasma_ = p;
  }
  return volumefractionneutralphospholipidinplasma_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BloodChemistrySystemData::mutable_volumefractionneutralphospholipidinplasma() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralPhospholipidInPlasma)
  return _internal_mutable_volumefractionneutralphospholipidinplasma();
}
inline void BloodChemistrySystemData::set_allocated_volumefractionneutralphospholipidinplasma(::pulse::cdm::bind::Scalar0To1Data* volumefractionneutralphospholipidinplasma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutralphospholipidinplasma_);
  }
  if (volumefractionneutralphospholipidinplasma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volumefractionneutralphospholipidinplasma)->GetArena();
    if (message_arena != submessage_arena) {
      volumefractionneutralphospholipidinplasma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volumefractionneutralphospholipidinplasma, submessage_arena);
    }
    
  } else {
    
  }
  volumefractionneutralphospholipidinplasma_ = volumefractionneutralphospholipidinplasma;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VolumeFractionNeutralPhospholipidInPlasma)
}

// .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 19;
inline bool BloodChemistrySystemData::_internal_has_whitebloodcellcount() const {
  return this != internal_default_instance() && whitebloodcellcount_ != nullptr;
}
inline bool BloodChemistrySystemData::has_whitebloodcellcount() const {
  return _internal_has_whitebloodcellcount();
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::_internal_whitebloodcellcount() const {
  const ::pulse::cdm::bind::ScalarAmountPerVolumeData* p = whitebloodcellcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerVolumeData& BloodChemistrySystemData::whitebloodcellcount() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.WhiteBloodCellCount)
  return _internal_whitebloodcellcount();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_whitebloodcellcount(
    ::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount_);
  }
  whitebloodcellcount_ = whitebloodcellcount;
  if (whitebloodcellcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.WhiteBloodCellCount)
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::release_whitebloodcellcount() {
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = whitebloodcellcount_;
  whitebloodcellcount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::unsafe_arena_release_whitebloodcellcount() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.WhiteBloodCellCount)
  
  ::pulse::cdm::bind::ScalarAmountPerVolumeData* temp = whitebloodcellcount_;
  whitebloodcellcount_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::_internal_mutable_whitebloodcellcount() {
  
  if (whitebloodcellcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerVolumeData>(GetArena());
    whitebloodcellcount_ = p;
  }
  return whitebloodcellcount_;
}
inline ::pulse::cdm::bind::ScalarAmountPerVolumeData* BloodChemistrySystemData::mutable_whitebloodcellcount() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.WhiteBloodCellCount)
  return _internal_mutable_whitebloodcellcount();
}
inline void BloodChemistrySystemData::set_allocated_whitebloodcellcount(::pulse::cdm::bind::ScalarAmountPerVolumeData* whitebloodcellcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount_);
  }
  if (whitebloodcellcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whitebloodcellcount)->GetArena();
    if (message_arena != submessage_arena) {
      whitebloodcellcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whitebloodcellcount, submessage_arena);
    }
    
  } else {
    
  }
  whitebloodcellcount_ = whitebloodcellcount;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.WhiteBloodCellCount)
}

// .pulse.cdm.bind.ScalarPressureData ArterialCarbonDioxidePressure = 20;
inline bool BloodChemistrySystemData::_internal_has_arterialcarbondioxidepressure() const {
  return this != internal_default_instance() && arterialcarbondioxidepressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_arterialcarbondioxidepressure() const {
  return _internal_has_arterialcarbondioxidepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_arterialcarbondioxidepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = arterialcarbondioxidepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::arterialcarbondioxidepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.ArterialCarbonDioxidePressure)
  return _internal_arterialcarbondioxidepressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_arterialcarbondioxidepressure(
    ::pulse::cdm::bind::ScalarPressureData* arterialcarbondioxidepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxidepressure_);
  }
  arterialcarbondioxidepressure_ = arterialcarbondioxidepressure;
  if (arterialcarbondioxidepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ArterialCarbonDioxidePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_arterialcarbondioxidepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialcarbondioxidepressure_;
  arterialcarbondioxidepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_arterialcarbondioxidepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.ArterialCarbonDioxidePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialcarbondioxidepressure_;
  arterialcarbondioxidepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_arterialcarbondioxidepressure() {
  
  if (arterialcarbondioxidepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    arterialcarbondioxidepressure_ = p;
  }
  return arterialcarbondioxidepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_arterialcarbondioxidepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.ArterialCarbonDioxidePressure)
  return _internal_mutable_arterialcarbondioxidepressure();
}
inline void BloodChemistrySystemData::set_allocated_arterialcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* arterialcarbondioxidepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxidepressure_);
  }
  if (arterialcarbondioxidepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialcarbondioxidepressure)->GetArena();
    if (message_arena != submessage_arena) {
      arterialcarbondioxidepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialcarbondioxidepressure, submessage_arena);
    }
    
  } else {
    
  }
  arterialcarbondioxidepressure_ = arterialcarbondioxidepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ArterialCarbonDioxidePressure)
}

// .pulse.cdm.bind.ScalarPressureData ArterialOxygenPressure = 21;
inline bool BloodChemistrySystemData::_internal_has_arterialoxygenpressure() const {
  return this != internal_default_instance() && arterialoxygenpressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_arterialoxygenpressure() const {
  return _internal_has_arterialoxygenpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_arterialoxygenpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = arterialoxygenpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::arterialoxygenpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.ArterialOxygenPressure)
  return _internal_arterialoxygenpressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_arterialoxygenpressure(
    ::pulse::cdm::bind::ScalarPressureData* arterialoxygenpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenpressure_);
  }
  arterialoxygenpressure_ = arterialoxygenpressure;
  if (arterialoxygenpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ArterialOxygenPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_arterialoxygenpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialoxygenpressure_;
  arterialoxygenpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_arterialoxygenpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.ArterialOxygenPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialoxygenpressure_;
  arterialoxygenpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_arterialoxygenpressure() {
  
  if (arterialoxygenpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    arterialoxygenpressure_ = p;
  }
  return arterialoxygenpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_arterialoxygenpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.ArterialOxygenPressure)
  return _internal_mutable_arterialoxygenpressure();
}
inline void BloodChemistrySystemData::set_allocated_arterialoxygenpressure(::pulse::cdm::bind::ScalarPressureData* arterialoxygenpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenpressure_);
  }
  if (arterialoxygenpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialoxygenpressure)->GetArena();
    if (message_arena != submessage_arena) {
      arterialoxygenpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialoxygenpressure, submessage_arena);
    }
    
  } else {
    
  }
  arterialoxygenpressure_ = arterialoxygenpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.ArterialOxygenPressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryArterialCarbonDioxidePressure = 22;
inline bool BloodChemistrySystemData::_internal_has_pulmonaryarterialcarbondioxidepressure() const {
  return this != internal_default_instance() && pulmonaryarterialcarbondioxidepressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_pulmonaryarterialcarbondioxidepressure() const {
  return _internal_has_pulmonaryarterialcarbondioxidepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_pulmonaryarterialcarbondioxidepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonaryarterialcarbondioxidepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::pulmonaryarterialcarbondioxidepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialCarbonDioxidePressure)
  return _internal_pulmonaryarterialcarbondioxidepressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_pulmonaryarterialcarbondioxidepressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialcarbondioxidepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialcarbondioxidepressure_);
  }
  pulmonaryarterialcarbondioxidepressure_ = pulmonaryarterialcarbondioxidepressure;
  if (pulmonaryarterialcarbondioxidepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialCarbonDioxidePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_pulmonaryarterialcarbondioxidepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialcarbondioxidepressure_;
  pulmonaryarterialcarbondioxidepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_pulmonaryarterialcarbondioxidepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialCarbonDioxidePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialcarbondioxidepressure_;
  pulmonaryarterialcarbondioxidepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_pulmonaryarterialcarbondioxidepressure() {
  
  if (pulmonaryarterialcarbondioxidepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonaryarterialcarbondioxidepressure_ = p;
  }
  return pulmonaryarterialcarbondioxidepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_pulmonaryarterialcarbondioxidepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialCarbonDioxidePressure)
  return _internal_mutable_pulmonaryarterialcarbondioxidepressure();
}
inline void BloodChemistrySystemData::set_allocated_pulmonaryarterialcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialcarbondioxidepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialcarbondioxidepressure_);
  }
  if (pulmonaryarterialcarbondioxidepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialcarbondioxidepressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryarterialcarbondioxidepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryarterialcarbondioxidepressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryarterialcarbondioxidepressure_ = pulmonaryarterialcarbondioxidepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialCarbonDioxidePressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryArterialOxygenPressure = 23;
inline bool BloodChemistrySystemData::_internal_has_pulmonaryarterialoxygenpressure() const {
  return this != internal_default_instance() && pulmonaryarterialoxygenpressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_pulmonaryarterialoxygenpressure() const {
  return _internal_has_pulmonaryarterialoxygenpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_pulmonaryarterialoxygenpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonaryarterialoxygenpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::pulmonaryarterialoxygenpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialOxygenPressure)
  return _internal_pulmonaryarterialoxygenpressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_pulmonaryarterialoxygenpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialoxygenpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialoxygenpressure_);
  }
  pulmonaryarterialoxygenpressure_ = pulmonaryarterialoxygenpressure;
  if (pulmonaryarterialoxygenpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialOxygenPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_pulmonaryarterialoxygenpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialoxygenpressure_;
  pulmonaryarterialoxygenpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_pulmonaryarterialoxygenpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialOxygenPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialoxygenpressure_;
  pulmonaryarterialoxygenpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_pulmonaryarterialoxygenpressure() {
  
  if (pulmonaryarterialoxygenpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonaryarterialoxygenpressure_ = p;
  }
  return pulmonaryarterialoxygenpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_pulmonaryarterialoxygenpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialOxygenPressure)
  return _internal_mutable_pulmonaryarterialoxygenpressure();
}
inline void BloodChemistrySystemData::set_allocated_pulmonaryarterialoxygenpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialoxygenpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialoxygenpressure_);
  }
  if (pulmonaryarterialoxygenpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialoxygenpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryarterialoxygenpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryarterialoxygenpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryarterialoxygenpressure_ = pulmonaryarterialoxygenpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryArterialOxygenPressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryVenousCarbonDioxidePressure = 24;
inline bool BloodChemistrySystemData::_internal_has_pulmonaryvenouscarbondioxidepressure() const {
  return this != internal_default_instance() && pulmonaryvenouscarbondioxidepressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_pulmonaryvenouscarbondioxidepressure() const {
  return _internal_has_pulmonaryvenouscarbondioxidepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_pulmonaryvenouscarbondioxidepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonaryvenouscarbondioxidepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::pulmonaryvenouscarbondioxidepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousCarbonDioxidePressure)
  return _internal_pulmonaryvenouscarbondioxidepressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_pulmonaryvenouscarbondioxidepressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenouscarbondioxidepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenouscarbondioxidepressure_);
  }
  pulmonaryvenouscarbondioxidepressure_ = pulmonaryvenouscarbondioxidepressure;
  if (pulmonaryvenouscarbondioxidepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousCarbonDioxidePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_pulmonaryvenouscarbondioxidepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryvenouscarbondioxidepressure_;
  pulmonaryvenouscarbondioxidepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_pulmonaryvenouscarbondioxidepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousCarbonDioxidePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryvenouscarbondioxidepressure_;
  pulmonaryvenouscarbondioxidepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_pulmonaryvenouscarbondioxidepressure() {
  
  if (pulmonaryvenouscarbondioxidepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonaryvenouscarbondioxidepressure_ = p;
  }
  return pulmonaryvenouscarbondioxidepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_pulmonaryvenouscarbondioxidepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousCarbonDioxidePressure)
  return _internal_mutable_pulmonaryvenouscarbondioxidepressure();
}
inline void BloodChemistrySystemData::set_allocated_pulmonaryvenouscarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryvenouscarbondioxidepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenouscarbondioxidepressure_);
  }
  if (pulmonaryvenouscarbondioxidepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenouscarbondioxidepressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryvenouscarbondioxidepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryvenouscarbondioxidepressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryvenouscarbondioxidepressure_ = pulmonaryvenouscarbondioxidepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousCarbonDioxidePressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryVenousOxygenPressure = 25;
inline bool BloodChemistrySystemData::_internal_has_pulmonaryvenousoxygenpressure() const {
  return this != internal_default_instance() && pulmonaryvenousoxygenpressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_pulmonaryvenousoxygenpressure() const {
  return _internal_has_pulmonaryvenousoxygenpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_pulmonaryvenousoxygenpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonaryvenousoxygenpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::pulmonaryvenousoxygenpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousOxygenPressure)
  return _internal_pulmonaryvenousoxygenpressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_pulmonaryvenousoxygenpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonaryvenousoxygenpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenousoxygenpressure_);
  }
  pulmonaryvenousoxygenpressure_ = pulmonaryvenousoxygenpressure;
  if (pulmonaryvenousoxygenpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousOxygenPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_pulmonaryvenousoxygenpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryvenousoxygenpressure_;
  pulmonaryvenousoxygenpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_pulmonaryvenousoxygenpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousOxygenPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryvenousoxygenpressure_;
  pulmonaryvenousoxygenpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_pulmonaryvenousoxygenpressure() {
  
  if (pulmonaryvenousoxygenpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonaryvenousoxygenpressure_ = p;
  }
  return pulmonaryvenousoxygenpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_pulmonaryvenousoxygenpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousOxygenPressure)
  return _internal_mutable_pulmonaryvenousoxygenpressure();
}
inline void BloodChemistrySystemData::set_allocated_pulmonaryvenousoxygenpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryvenousoxygenpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenousoxygenpressure_);
  }
  if (pulmonaryvenousoxygenpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvenousoxygenpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryvenousoxygenpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryvenousoxygenpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryvenousoxygenpressure_ = pulmonaryvenousoxygenpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.PulmonaryVenousOxygenPressure)
}

// .pulse.cdm.bind.ScalarPressureData VenousCarbonDioxidePressure = 26;
inline bool BloodChemistrySystemData::_internal_has_venouscarbondioxidepressure() const {
  return this != internal_default_instance() && venouscarbondioxidepressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_venouscarbondioxidepressure() const {
  return _internal_has_venouscarbondioxidepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_venouscarbondioxidepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = venouscarbondioxidepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::venouscarbondioxidepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.VenousCarbonDioxidePressure)
  return _internal_venouscarbondioxidepressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_venouscarbondioxidepressure(
    ::pulse::cdm::bind::ScalarPressureData* venouscarbondioxidepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscarbondioxidepressure_);
  }
  venouscarbondioxidepressure_ = venouscarbondioxidepressure;
  if (venouscarbondioxidepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VenousCarbonDioxidePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_venouscarbondioxidepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = venouscarbondioxidepressure_;
  venouscarbondioxidepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_venouscarbondioxidepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.VenousCarbonDioxidePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = venouscarbondioxidepressure_;
  venouscarbondioxidepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_venouscarbondioxidepressure() {
  
  if (venouscarbondioxidepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    venouscarbondioxidepressure_ = p;
  }
  return venouscarbondioxidepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_venouscarbondioxidepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.VenousCarbonDioxidePressure)
  return _internal_mutable_venouscarbondioxidepressure();
}
inline void BloodChemistrySystemData::set_allocated_venouscarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* venouscarbondioxidepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscarbondioxidepressure_);
  }
  if (venouscarbondioxidepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venouscarbondioxidepressure)->GetArena();
    if (message_arena != submessage_arena) {
      venouscarbondioxidepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, venouscarbondioxidepressure, submessage_arena);
    }
    
  } else {
    
  }
  venouscarbondioxidepressure_ = venouscarbondioxidepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VenousCarbonDioxidePressure)
}

// .pulse.cdm.bind.ScalarPressureData VenousOxygenPressure = 27;
inline bool BloodChemistrySystemData::_internal_has_venousoxygenpressure() const {
  return this != internal_default_instance() && venousoxygenpressure_ != nullptr;
}
inline bool BloodChemistrySystemData::has_venousoxygenpressure() const {
  return _internal_has_venousoxygenpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::_internal_venousoxygenpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = venousoxygenpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& BloodChemistrySystemData::venousoxygenpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BloodChemistrySystemData.VenousOxygenPressure)
  return _internal_venousoxygenpressure();
}
inline void BloodChemistrySystemData::unsafe_arena_set_allocated_venousoxygenpressure(
    ::pulse::cdm::bind::ScalarPressureData* venousoxygenpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venousoxygenpressure_);
  }
  venousoxygenpressure_ = venousoxygenpressure;
  if (venousoxygenpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VenousOxygenPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::release_venousoxygenpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = venousoxygenpressure_;
  venousoxygenpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::unsafe_arena_release_venousoxygenpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BloodChemistrySystemData.VenousOxygenPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = venousoxygenpressure_;
  venousoxygenpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::_internal_mutable_venousoxygenpressure() {
  
  if (venousoxygenpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    venousoxygenpressure_ = p;
  }
  return venousoxygenpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* BloodChemistrySystemData::mutable_venousoxygenpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BloodChemistrySystemData.VenousOxygenPressure)
  return _internal_mutable_venousoxygenpressure();
}
inline void BloodChemistrySystemData::set_allocated_venousoxygenpressure(::pulse::cdm::bind::ScalarPressureData* venousoxygenpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(venousoxygenpressure_);
  }
  if (venousoxygenpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venousoxygenpressure)->GetArena();
    if (message_arena != submessage_arena) {
      venousoxygenpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, venousoxygenpressure, submessage_arena);
    }
    
  } else {
    
  }
  venousoxygenpressure_ = venousoxygenpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BloodChemistrySystemData.VenousOxygenPressure)
}

// -------------------------------------------------------------------

// CardiovascularSystemData

// .pulse.cdm.bind.ScalarPressureData ArterialPressure = 1;
inline bool CardiovascularSystemData::_internal_has_arterialpressure() const {
  return this != internal_default_instance() && arterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_arterialpressure() const {
  return _internal_has_arterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_arterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = arterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::arterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.ArterialPressure)
  return _internal_arterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_arterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* arterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialpressure_);
  }
  arterialpressure_ = arterialpressure;
  if (arterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.ArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_arterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialpressure_;
  arterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_arterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.ArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = arterialpressure_;
  arterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_arterialpressure() {
  
  if (arterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    arterialpressure_ = p;
  }
  return arterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_arterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.ArterialPressure)
  return _internal_mutable_arterialpressure();
}
inline void CardiovascularSystemData::set_allocated_arterialpressure(::pulse::cdm::bind::ScalarPressureData* arterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialpressure_);
  }
  if (arterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      arterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  arterialpressure_ = arterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.ArterialPressure)
}

// .pulse.cdm.bind.ScalarVolumeData BloodVolume = 2;
inline bool CardiovascularSystemData::_internal_has_bloodvolume() const {
  return this != internal_default_instance() && bloodvolume_ != nullptr;
}
inline bool CardiovascularSystemData::has_bloodvolume() const {
  return _internal_has_bloodvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::_internal_bloodvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = bloodvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::bloodvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.BloodVolume)
  return _internal_bloodvolume();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_bloodvolume(
    ::pulse::cdm::bind::ScalarVolumeData* bloodvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodvolume_);
  }
  bloodvolume_ = bloodvolume;
  if (bloodvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.BloodVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::release_bloodvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = bloodvolume_;
  bloodvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::unsafe_arena_release_bloodvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.BloodVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = bloodvolume_;
  bloodvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::_internal_mutable_bloodvolume() {
  
  if (bloodvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    bloodvolume_ = p;
  }
  return bloodvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::mutable_bloodvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.BloodVolume)
  return _internal_mutable_bloodvolume();
}
inline void CardiovascularSystemData::set_allocated_bloodvolume(::pulse::cdm::bind::ScalarVolumeData* bloodvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodvolume_);
  }
  if (bloodvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloodvolume)->GetArena();
    if (message_arena != submessage_arena) {
      bloodvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloodvolume, submessage_arena);
    }
    
  } else {
    
  }
  bloodvolume_ = bloodvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.BloodVolume)
}

// .pulse.cdm.bind.ScalarVolumePerTimeAreaData CardiacIndex = 3;
inline bool CardiovascularSystemData::_internal_has_cardiacindex() const {
  return this != internal_default_instance() && cardiacindex_ != nullptr;
}
inline bool CardiovascularSystemData::has_cardiacindex() const {
  return _internal_has_cardiacindex();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData& CardiovascularSystemData::_internal_cardiacindex() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* p = cardiacindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeAreaData& CardiovascularSystemData::cardiacindex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.CardiacIndex)
  return _internal_cardiacindex();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_cardiacindex(
    ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* cardiacindex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacindex_);
  }
  cardiacindex_ = cardiacindex;
  if (cardiacindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CardiacIndex)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* CardiovascularSystemData::release_cardiacindex() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* temp = cardiacindex_;
  cardiacindex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* CardiovascularSystemData::unsafe_arena_release_cardiacindex() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.CardiacIndex)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* temp = cardiacindex_;
  cardiacindex_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* CardiovascularSystemData::_internal_mutable_cardiacindex() {
  
  if (cardiacindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeAreaData>(GetArena());
    cardiacindex_ = p;
  }
  return cardiacindex_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeAreaData* CardiovascularSystemData::mutable_cardiacindex() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.CardiacIndex)
  return _internal_mutable_cardiacindex();
}
inline void CardiovascularSystemData::set_allocated_cardiacindex(::pulse::cdm::bind::ScalarVolumePerTimeAreaData* cardiacindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacindex_);
  }
  if (cardiacindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacindex)->GetArena();
    if (message_arena != submessage_arena) {
      cardiacindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiacindex, submessage_arena);
    }
    
  } else {
    
  }
  cardiacindex_ = cardiacindex;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CardiacIndex)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData CardiacOutput = 4;
inline bool CardiovascularSystemData::_internal_has_cardiacoutput() const {
  return this != internal_default_instance() && cardiacoutput_ != nullptr;
}
inline bool CardiovascularSystemData::has_cardiacoutput() const {
  return _internal_has_cardiacoutput();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_cardiacoutput() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = cardiacoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::cardiacoutput() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.CardiacOutput)
  return _internal_cardiacoutput();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_cardiacoutput(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* cardiacoutput) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacoutput_);
  }
  cardiacoutput_ = cardiacoutput;
  if (cardiacoutput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CardiacOutput)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_cardiacoutput() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = cardiacoutput_;
  cardiacoutput_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_cardiacoutput() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.CardiacOutput)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = cardiacoutput_;
  cardiacoutput_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_cardiacoutput() {
  
  if (cardiacoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    cardiacoutput_ = p;
  }
  return cardiacoutput_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_cardiacoutput() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.CardiacOutput)
  return _internal_mutable_cardiacoutput();
}
inline void CardiovascularSystemData::set_allocated_cardiacoutput(::pulse::cdm::bind::ScalarVolumePerTimeData* cardiacoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacoutput_);
  }
  if (cardiacoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cardiacoutput)->GetArena();
    if (message_arena != submessage_arena) {
      cardiacoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cardiacoutput, submessage_arena);
    }
    
  } else {
    
  }
  cardiacoutput_ = cardiacoutput;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CardiacOutput)
}

// .pulse.cdm.bind.ScalarPressureData CentralVenousPressure = 5;
inline bool CardiovascularSystemData::_internal_has_centralvenouspressure() const {
  return this != internal_default_instance() && centralvenouspressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_centralvenouspressure() const {
  return _internal_has_centralvenouspressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_centralvenouspressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = centralvenouspressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::centralvenouspressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.CentralVenousPressure)
  return _internal_centralvenouspressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_centralvenouspressure(
    ::pulse::cdm::bind::ScalarPressureData* centralvenouspressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralvenouspressure_);
  }
  centralvenouspressure_ = centralvenouspressure;
  if (centralvenouspressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CentralVenousPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_centralvenouspressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = centralvenouspressure_;
  centralvenouspressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_centralvenouspressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.CentralVenousPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = centralvenouspressure_;
  centralvenouspressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_centralvenouspressure() {
  
  if (centralvenouspressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    centralvenouspressure_ = p;
  }
  return centralvenouspressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_centralvenouspressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.CentralVenousPressure)
  return _internal_mutable_centralvenouspressure();
}
inline void CardiovascularSystemData::set_allocated_centralvenouspressure(::pulse::cdm::bind::ScalarPressureData* centralvenouspressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralvenouspressure_);
  }
  if (centralvenouspressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centralvenouspressure)->GetArena();
    if (message_arena != submessage_arena) {
      centralvenouspressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centralvenouspressure, submessage_arena);
    }
    
  } else {
    
  }
  centralvenouspressure_ = centralvenouspressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CentralVenousPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData CerebralBloodFlow = 6;
inline bool CardiovascularSystemData::_internal_has_cerebralbloodflow() const {
  return this != internal_default_instance() && cerebralbloodflow_ != nullptr;
}
inline bool CardiovascularSystemData::has_cerebralbloodflow() const {
  return _internal_has_cerebralbloodflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_cerebralbloodflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = cerebralbloodflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::cerebralbloodflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.CerebralBloodFlow)
  return _internal_cerebralbloodflow();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_cerebralbloodflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* cerebralbloodflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralbloodflow_);
  }
  cerebralbloodflow_ = cerebralbloodflow;
  if (cerebralbloodflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CerebralBloodFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_cerebralbloodflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = cerebralbloodflow_;
  cerebralbloodflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_cerebralbloodflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.CerebralBloodFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = cerebralbloodflow_;
  cerebralbloodflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_cerebralbloodflow() {
  
  if (cerebralbloodflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    cerebralbloodflow_ = p;
  }
  return cerebralbloodflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_cerebralbloodflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.CerebralBloodFlow)
  return _internal_mutable_cerebralbloodflow();
}
inline void CardiovascularSystemData::set_allocated_cerebralbloodflow(::pulse::cdm::bind::ScalarVolumePerTimeData* cerebralbloodflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralbloodflow_);
  }
  if (cerebralbloodflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralbloodflow)->GetArena();
    if (message_arena != submessage_arena) {
      cerebralbloodflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cerebralbloodflow, submessage_arena);
    }
    
  } else {
    
  }
  cerebralbloodflow_ = cerebralbloodflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CerebralBloodFlow)
}

// .pulse.cdm.bind.ScalarPressureData CerebralPerfusionPressure = 7;
inline bool CardiovascularSystemData::_internal_has_cerebralperfusionpressure() const {
  return this != internal_default_instance() && cerebralperfusionpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_cerebralperfusionpressure() const {
  return _internal_has_cerebralperfusionpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_cerebralperfusionpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = cerebralperfusionpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::cerebralperfusionpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.CerebralPerfusionPressure)
  return _internal_cerebralperfusionpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_cerebralperfusionpressure(
    ::pulse::cdm::bind::ScalarPressureData* cerebralperfusionpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralperfusionpressure_);
  }
  cerebralperfusionpressure_ = cerebralperfusionpressure;
  if (cerebralperfusionpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CerebralPerfusionPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_cerebralperfusionpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = cerebralperfusionpressure_;
  cerebralperfusionpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_cerebralperfusionpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.CerebralPerfusionPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = cerebralperfusionpressure_;
  cerebralperfusionpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_cerebralperfusionpressure() {
  
  if (cerebralperfusionpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    cerebralperfusionpressure_ = p;
  }
  return cerebralperfusionpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_cerebralperfusionpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.CerebralPerfusionPressure)
  return _internal_mutable_cerebralperfusionpressure();
}
inline void CardiovascularSystemData::set_allocated_cerebralperfusionpressure(::pulse::cdm::bind::ScalarPressureData* cerebralperfusionpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralperfusionpressure_);
  }
  if (cerebralperfusionpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cerebralperfusionpressure)->GetArena();
    if (message_arena != submessage_arena) {
      cerebralperfusionpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cerebralperfusionpressure, submessage_arena);
    }
    
  } else {
    
  }
  cerebralperfusionpressure_ = cerebralperfusionpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.CerebralPerfusionPressure)
}

// .pulse.cdm.bind.ScalarPressureData DiastolicArterialPressure = 8;
inline bool CardiovascularSystemData::_internal_has_diastolicarterialpressure() const {
  return this != internal_default_instance() && diastolicarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_diastolicarterialpressure() const {
  return _internal_has_diastolicarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_diastolicarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = diastolicarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::diastolicarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.DiastolicArterialPressure)
  return _internal_diastolicarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_diastolicarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicarterialpressure_);
  }
  diastolicarterialpressure_ = diastolicarterialpressure;
  if (diastolicarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.DiastolicArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_diastolicarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = diastolicarterialpressure_;
  diastolicarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_diastolicarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.DiastolicArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = diastolicarterialpressure_;
  diastolicarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_diastolicarterialpressure() {
  
  if (diastolicarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    diastolicarterialpressure_ = p;
  }
  return diastolicarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_diastolicarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.DiastolicArterialPressure)
  return _internal_mutable_diastolicarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_diastolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* diastolicarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicarterialpressure_);
  }
  if (diastolicarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diastolicarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      diastolicarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diastolicarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  diastolicarterialpressure_ = diastolicarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.DiastolicArterialPressure)
}

// .pulse.cdm.bind.Scalar0To1Data HeartEjectionFraction = 9;
inline bool CardiovascularSystemData::_internal_has_heartejectionfraction() const {
  return this != internal_default_instance() && heartejectionfraction_ != nullptr;
}
inline bool CardiovascularSystemData::has_heartejectionfraction() const {
  return _internal_has_heartejectionfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& CardiovascularSystemData::_internal_heartejectionfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = heartejectionfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& CardiovascularSystemData::heartejectionfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.HeartEjectionFraction)
  return _internal_heartejectionfraction();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_heartejectionfraction(
    ::pulse::cdm::bind::Scalar0To1Data* heartejectionfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartejectionfraction_);
  }
  heartejectionfraction_ = heartejectionfraction;
  if (heartejectionfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartEjectionFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* CardiovascularSystemData::release_heartejectionfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = heartejectionfraction_;
  heartejectionfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CardiovascularSystemData::unsafe_arena_release_heartejectionfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.HeartEjectionFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = heartejectionfraction_;
  heartejectionfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CardiovascularSystemData::_internal_mutable_heartejectionfraction() {
  
  if (heartejectionfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    heartejectionfraction_ = p;
  }
  return heartejectionfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* CardiovascularSystemData::mutable_heartejectionfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.HeartEjectionFraction)
  return _internal_mutable_heartejectionfraction();
}
inline void CardiovascularSystemData::set_allocated_heartejectionfraction(::pulse::cdm::bind::Scalar0To1Data* heartejectionfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartejectionfraction_);
  }
  if (heartejectionfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartejectionfraction)->GetArena();
    if (message_arena != submessage_arena) {
      heartejectionfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartejectionfraction, submessage_arena);
    }
    
  } else {
    
  }
  heartejectionfraction_ = heartejectionfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartEjectionFraction)
}

// .pulse.cdm.bind.ScalarFrequencyData HeartRate = 10;
inline bool CardiovascularSystemData::_internal_has_heartrate() const {
  return this != internal_default_instance() && heartrate_ != nullptr;
}
inline bool CardiovascularSystemData::has_heartrate() const {
  return _internal_has_heartrate();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& CardiovascularSystemData::_internal_heartrate() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = heartrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData&>(
      ::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& CardiovascularSystemData::heartrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.HeartRate)
  return _internal_heartrate();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_heartrate(
    ::pulse::cdm::bind::ScalarFrequencyData* heartrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartrate_);
  }
  heartrate_ = heartrate;
  if (heartrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartRate)
}
inline ::pulse::cdm::bind::ScalarFrequencyData* CardiovascularSystemData::release_heartrate() {
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartrate_;
  heartrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* CardiovascularSystemData::unsafe_arena_release_heartrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.HeartRate)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartrate_;
  heartrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* CardiovascularSystemData::_internal_mutable_heartrate() {
  
  if (heartrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArena());
    heartrate_ = p;
  }
  return heartrate_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* CardiovascularSystemData::mutable_heartrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.HeartRate)
  return _internal_mutable_heartrate();
}
inline void CardiovascularSystemData::set_allocated_heartrate(::pulse::cdm::bind::ScalarFrequencyData* heartrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartrate_);
  }
  if (heartrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartrate)->GetArena();
    if (message_arena != submessage_arena) {
      heartrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartrate, submessage_arena);
    }
    
  } else {
    
  }
  heartrate_ = heartrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartRate)
}

// .pulse.cdm.bind.eHeartRhythm HeartRhythm = 11;
inline void CardiovascularSystemData::clear_heartrhythm() {
  heartrhythm_ = 0;
}
inline ::pulse::cdm::bind::eHeartRhythm CardiovascularSystemData::_internal_heartrhythm() const {
  return static_cast< ::pulse::cdm::bind::eHeartRhythm >(heartrhythm_);
}
inline ::pulse::cdm::bind::eHeartRhythm CardiovascularSystemData::heartrhythm() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.HeartRhythm)
  return _internal_heartrhythm();
}
inline void CardiovascularSystemData::_internal_set_heartrhythm(::pulse::cdm::bind::eHeartRhythm value) {
  
  heartrhythm_ = value;
}
inline void CardiovascularSystemData::set_heartrhythm(::pulse::cdm::bind::eHeartRhythm value) {
  _internal_set_heartrhythm(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CardiovascularSystemData.HeartRhythm)
}

// .pulse.cdm.bind.ScalarVolumeData HeartStrokeVolume = 12;
inline bool CardiovascularSystemData::_internal_has_heartstrokevolume() const {
  return this != internal_default_instance() && heartstrokevolume_ != nullptr;
}
inline bool CardiovascularSystemData::has_heartstrokevolume() const {
  return _internal_has_heartstrokevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::_internal_heartstrokevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = heartstrokevolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::heartstrokevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.HeartStrokeVolume)
  return _internal_heartstrokevolume();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_heartstrokevolume(
    ::pulse::cdm::bind::ScalarVolumeData* heartstrokevolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartstrokevolume_);
  }
  heartstrokevolume_ = heartstrokevolume;
  if (heartstrokevolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartStrokeVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::release_heartstrokevolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = heartstrokevolume_;
  heartstrokevolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::unsafe_arena_release_heartstrokevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.HeartStrokeVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = heartstrokevolume_;
  heartstrokevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::_internal_mutable_heartstrokevolume() {
  
  if (heartstrokevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    heartstrokevolume_ = p;
  }
  return heartstrokevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::mutable_heartstrokevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.HeartStrokeVolume)
  return _internal_mutable_heartstrokevolume();
}
inline void CardiovascularSystemData::set_allocated_heartstrokevolume(::pulse::cdm::bind::ScalarVolumeData* heartstrokevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartstrokevolume_);
  }
  if (heartstrokevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartstrokevolume)->GetArena();
    if (message_arena != submessage_arena) {
      heartstrokevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartstrokevolume, submessage_arena);
    }
    
  } else {
    
  }
  heartstrokevolume_ = heartstrokevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.HeartStrokeVolume)
}

// .pulse.cdm.bind.ScalarPressureData IntracranialPressure = 13;
inline bool CardiovascularSystemData::_internal_has_intracranialpressure() const {
  return this != internal_default_instance() && intracranialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_intracranialpressure() const {
  return _internal_has_intracranialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_intracranialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = intracranialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::intracranialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.IntracranialPressure)
  return _internal_intracranialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_intracranialpressure(
    ::pulse::cdm::bind::ScalarPressureData* intracranialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracranialpressure_);
  }
  intracranialpressure_ = intracranialpressure;
  if (intracranialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.IntracranialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_intracranialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intracranialpressure_;
  intracranialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_intracranialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.IntracranialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intracranialpressure_;
  intracranialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_intracranialpressure() {
  
  if (intracranialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    intracranialpressure_ = p;
  }
  return intracranialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_intracranialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.IntracranialPressure)
  return _internal_mutable_intracranialpressure();
}
inline void CardiovascularSystemData::set_allocated_intracranialpressure(::pulse::cdm::bind::ScalarPressureData* intracranialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracranialpressure_);
  }
  if (intracranialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracranialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      intracranialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intracranialpressure, submessage_arena);
    }
    
  } else {
    
  }
  intracranialpressure_ = intracranialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.IntracranialPressure)
}

// .pulse.cdm.bind.ScalarPressureData MeanArterialPressure = 14;
inline bool CardiovascularSystemData::_internal_has_meanarterialpressure() const {
  return this != internal_default_instance() && meanarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_meanarterialpressure() const {
  return _internal_has_meanarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_meanarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::meanarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.MeanArterialPressure)
  return _internal_meanarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_meanarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* meanarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialpressure_);
  }
  meanarterialpressure_ = meanarterialpressure;
  if (meanarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_meanarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialpressure_;
  meanarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_meanarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.MeanArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialpressure_;
  meanarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_meanarterialpressure() {
  
  if (meanarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meanarterialpressure_ = p;
  }
  return meanarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_meanarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.MeanArterialPressure)
  return _internal_mutable_meanarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_meanarterialpressure(::pulse::cdm::bind::ScalarPressureData* meanarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialpressure_);
  }
  if (meanarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      meanarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  meanarterialpressure_ = meanarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialPressure)
}

// .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressure = 15;
inline bool CardiovascularSystemData::_internal_has_meanarterialcarbondioxidepartialpressure() const {
  return this != internal_default_instance() && meanarterialcarbondioxidepartialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_meanarterialcarbondioxidepartialpressure() const {
  return _internal_has_meanarterialcarbondioxidepartialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_meanarterialcarbondioxidepartialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanarterialcarbondioxidepartialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::meanarterialcarbondioxidepartialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressure)
  return _internal_meanarterialcarbondioxidepartialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_meanarterialcarbondioxidepartialpressure(
    ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressure_);
  }
  meanarterialcarbondioxidepartialpressure_ = meanarterialcarbondioxidepartialpressure;
  if (meanarterialcarbondioxidepartialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_meanarterialcarbondioxidepartialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialcarbondioxidepartialpressure_;
  meanarterialcarbondioxidepartialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_meanarterialcarbondioxidepartialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialcarbondioxidepartialpressure_;
  meanarterialcarbondioxidepartialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_meanarterialcarbondioxidepartialpressure() {
  
  if (meanarterialcarbondioxidepartialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meanarterialcarbondioxidepartialpressure_ = p;
  }
  return meanarterialcarbondioxidepartialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_meanarterialcarbondioxidepartialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressure)
  return _internal_mutable_meanarterialcarbondioxidepartialpressure();
}
inline void CardiovascularSystemData::set_allocated_meanarterialcarbondioxidepartialpressure(::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressure_);
  }
  if (meanarterialcarbondioxidepartialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      meanarterialcarbondioxidepartialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanarterialcarbondioxidepartialpressure, submessage_arena);
    }
    
  } else {
    
  }
  meanarterialcarbondioxidepartialpressure_ = meanarterialcarbondioxidepartialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressure)
}

// .pulse.cdm.bind.ScalarPressureData MeanArterialCarbonDioxidePartialPressureDelta = 16;
inline bool CardiovascularSystemData::_internal_has_meanarterialcarbondioxidepartialpressuredelta() const {
  return this != internal_default_instance() && meanarterialcarbondioxidepartialpressuredelta_ != nullptr;
}
inline bool CardiovascularSystemData::has_meanarterialcarbondioxidepartialpressuredelta() const {
  return _internal_has_meanarterialcarbondioxidepartialpressuredelta();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_meanarterialcarbondioxidepartialpressuredelta() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanarterialcarbondioxidepartialpressuredelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::meanarterialcarbondioxidepartialpressuredelta() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressureDelta)
  return _internal_meanarterialcarbondioxidepartialpressuredelta();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_meanarterialcarbondioxidepartialpressuredelta(
    ::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressuredelta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressuredelta_);
  }
  meanarterialcarbondioxidepartialpressuredelta_ = meanarterialcarbondioxidepartialpressuredelta;
  if (meanarterialcarbondioxidepartialpressuredelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressureDelta)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_meanarterialcarbondioxidepartialpressuredelta() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialcarbondioxidepartialpressuredelta_;
  meanarterialcarbondioxidepartialpressuredelta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_meanarterialcarbondioxidepartialpressuredelta() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressureDelta)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanarterialcarbondioxidepartialpressuredelta_;
  meanarterialcarbondioxidepartialpressuredelta_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_meanarterialcarbondioxidepartialpressuredelta() {
  
  if (meanarterialcarbondioxidepartialpressuredelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meanarterialcarbondioxidepartialpressuredelta_ = p;
  }
  return meanarterialcarbondioxidepartialpressuredelta_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_meanarterialcarbondioxidepartialpressuredelta() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressureDelta)
  return _internal_mutable_meanarterialcarbondioxidepartialpressuredelta();
}
inline void CardiovascularSystemData::set_allocated_meanarterialcarbondioxidepartialpressuredelta(::pulse::cdm::bind::ScalarPressureData* meanarterialcarbondioxidepartialpressuredelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressuredelta_);
  }
  if (meanarterialcarbondioxidepartialpressuredelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanarterialcarbondioxidepartialpressuredelta)->GetArena();
    if (message_arena != submessage_arena) {
      meanarterialcarbondioxidepartialpressuredelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanarterialcarbondioxidepartialpressuredelta, submessage_arena);
    }
    
  } else {
    
  }
  meanarterialcarbondioxidepartialpressuredelta_ = meanarterialcarbondioxidepartialpressuredelta;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanArterialCarbonDioxidePartialPressureDelta)
}

// .pulse.cdm.bind.ScalarPressureData MeanCentralVenousPressure = 17;
inline bool CardiovascularSystemData::_internal_has_meancentralvenouspressure() const {
  return this != internal_default_instance() && meancentralvenouspressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_meancentralvenouspressure() const {
  return _internal_has_meancentralvenouspressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_meancentralvenouspressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meancentralvenouspressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::meancentralvenouspressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.MeanCentralVenousPressure)
  return _internal_meancentralvenouspressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_meancentralvenouspressure(
    ::pulse::cdm::bind::ScalarPressureData* meancentralvenouspressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancentralvenouspressure_);
  }
  meancentralvenouspressure_ = meancentralvenouspressure;
  if (meancentralvenouspressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanCentralVenousPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_meancentralvenouspressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meancentralvenouspressure_;
  meancentralvenouspressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_meancentralvenouspressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.MeanCentralVenousPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meancentralvenouspressure_;
  meancentralvenouspressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_meancentralvenouspressure() {
  
  if (meancentralvenouspressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meancentralvenouspressure_ = p;
  }
  return meancentralvenouspressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_meancentralvenouspressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.MeanCentralVenousPressure)
  return _internal_mutable_meancentralvenouspressure();
}
inline void CardiovascularSystemData::set_allocated_meancentralvenouspressure(::pulse::cdm::bind::ScalarPressureData* meancentralvenouspressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancentralvenouspressure_);
  }
  if (meancentralvenouspressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meancentralvenouspressure)->GetArena();
    if (message_arena != submessage_arena) {
      meancentralvenouspressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meancentralvenouspressure, submessage_arena);
    }
    
  } else {
    
  }
  meancentralvenouspressure_ = meancentralvenouspressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanCentralVenousPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData MeanSkinFlow = 18;
inline bool CardiovascularSystemData::_internal_has_meanskinflow() const {
  return this != internal_default_instance() && meanskinflow_ != nullptr;
}
inline bool CardiovascularSystemData::has_meanskinflow() const {
  return _internal_has_meanskinflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_meanskinflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = meanskinflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::meanskinflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.MeanSkinFlow)
  return _internal_meanskinflow();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_meanskinflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* meanskinflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanskinflow_);
  }
  meanskinflow_ = meanskinflow;
  if (meanskinflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanSkinFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_meanskinflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = meanskinflow_;
  meanskinflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_meanskinflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.MeanSkinFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = meanskinflow_;
  meanskinflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_meanskinflow() {
  
  if (meanskinflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    meanskinflow_ = p;
  }
  return meanskinflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_meanskinflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.MeanSkinFlow)
  return _internal_mutable_meanskinflow();
}
inline void CardiovascularSystemData::set_allocated_meanskinflow(::pulse::cdm::bind::ScalarVolumePerTimeData* meanskinflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanskinflow_);
  }
  if (meanskinflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanskinflow)->GetArena();
    if (message_arena != submessage_arena) {
      meanskinflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanskinflow, submessage_arena);
    }
    
  } else {
    
  }
  meanskinflow_ = meanskinflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.MeanSkinFlow)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryArterialPressure = 19;
inline bool CardiovascularSystemData::_internal_has_pulmonaryarterialpressure() const {
  return this != internal_default_instance() && pulmonaryarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonaryarterialpressure() const {
  return _internal_has_pulmonaryarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulmonaryarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonaryarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulmonaryarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryArterialPressure)
  return _internal_pulmonaryarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonaryarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialpressure_);
  }
  pulmonaryarterialpressure_ = pulmonaryarterialpressure;
  if (pulmonaryarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulmonaryarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialpressure_;
  pulmonaryarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulmonaryarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonaryarterialpressure_;
  pulmonaryarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulmonaryarterialpressure() {
  
  if (pulmonaryarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonaryarterialpressure_ = p;
  }
  return pulmonaryarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulmonaryarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryArterialPressure)
  return _internal_mutable_pulmonaryarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_pulmonaryarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonaryarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialpressure_);
  }
  if (pulmonaryarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryarterialpressure_ = pulmonaryarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryArterialPressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryCapillariesWedgePressure = 20;
inline bool CardiovascularSystemData::_internal_has_pulmonarycapillarieswedgepressure() const {
  return this != internal_default_instance() && pulmonarycapillarieswedgepressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarycapillarieswedgepressure() const {
  return _internal_has_pulmonarycapillarieswedgepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulmonarycapillarieswedgepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonarycapillarieswedgepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulmonarycapillarieswedgepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryCapillariesWedgePressure)
  return _internal_pulmonarycapillarieswedgepressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarycapillarieswedgepressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonarycapillarieswedgepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycapillarieswedgepressure_);
  }
  pulmonarycapillarieswedgepressure_ = pulmonarycapillarieswedgepressure;
  if (pulmonarycapillarieswedgepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryCapillariesWedgePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulmonarycapillarieswedgepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarycapillarieswedgepressure_;
  pulmonarycapillarieswedgepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulmonarycapillarieswedgepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryCapillariesWedgePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarycapillarieswedgepressure_;
  pulmonarycapillarieswedgepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulmonarycapillarieswedgepressure() {
  
  if (pulmonarycapillarieswedgepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonarycapillarieswedgepressure_ = p;
  }
  return pulmonarycapillarieswedgepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulmonarycapillarieswedgepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryCapillariesWedgePressure)
  return _internal_mutable_pulmonarycapillarieswedgepressure();
}
inline void CardiovascularSystemData::set_allocated_pulmonarycapillarieswedgepressure(::pulse::cdm::bind::ScalarPressureData* pulmonarycapillarieswedgepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycapillarieswedgepressure_);
  }
  if (pulmonarycapillarieswedgepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycapillarieswedgepressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarycapillarieswedgepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarycapillarieswedgepressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarycapillarieswedgepressure_ = pulmonarycapillarieswedgepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryCapillariesWedgePressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryDiastolicArterialPressure = 21;
inline bool CardiovascularSystemData::_internal_has_pulmonarydiastolicarterialpressure() const {
  return this != internal_default_instance() && pulmonarydiastolicarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarydiastolicarterialpressure() const {
  return _internal_has_pulmonarydiastolicarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulmonarydiastolicarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonarydiastolicarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulmonarydiastolicarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryDiastolicArterialPressure)
  return _internal_pulmonarydiastolicarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarydiastolicarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonarydiastolicarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarydiastolicarterialpressure_);
  }
  pulmonarydiastolicarterialpressure_ = pulmonarydiastolicarterialpressure;
  if (pulmonarydiastolicarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryDiastolicArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulmonarydiastolicarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarydiastolicarterialpressure_;
  pulmonarydiastolicarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulmonarydiastolicarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryDiastolicArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarydiastolicarterialpressure_;
  pulmonarydiastolicarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulmonarydiastolicarterialpressure() {
  
  if (pulmonarydiastolicarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonarydiastolicarterialpressure_ = p;
  }
  return pulmonarydiastolicarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulmonarydiastolicarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryDiastolicArterialPressure)
  return _internal_mutable_pulmonarydiastolicarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_pulmonarydiastolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarydiastolicarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarydiastolicarterialpressure_);
  }
  if (pulmonarydiastolicarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarydiastolicarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarydiastolicarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarydiastolicarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarydiastolicarterialpressure_ = pulmonarydiastolicarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryDiastolicArterialPressure)
}

// .pulse.cdm.bind.ScalarPressureData PulmonaryMeanArterialPressure = 22;
inline bool CardiovascularSystemData::_internal_has_pulmonarymeanarterialpressure() const {
  return this != internal_default_instance() && pulmonarymeanarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarymeanarterialpressure() const {
  return _internal_has_pulmonarymeanarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulmonarymeanarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonarymeanarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulmonarymeanarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanArterialPressure)
  return _internal_pulmonarymeanarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarymeanarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonarymeanarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanarterialpressure_);
  }
  pulmonarymeanarterialpressure_ = pulmonarymeanarterialpressure;
  if (pulmonarymeanarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulmonarymeanarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarymeanarterialpressure_;
  pulmonarymeanarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulmonarymeanarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarymeanarterialpressure_;
  pulmonarymeanarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulmonarymeanarterialpressure() {
  
  if (pulmonarymeanarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonarymeanarterialpressure_ = p;
  }
  return pulmonarymeanarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulmonarymeanarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanArterialPressure)
  return _internal_mutable_pulmonarymeanarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_pulmonarymeanarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarymeanarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanarterialpressure_);
  }
  if (pulmonarymeanarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarymeanarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarymeanarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarymeanarterialpressure_ = pulmonarymeanarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanArterialPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanCapillaryFlow = 23;
inline bool CardiovascularSystemData::_internal_has_pulmonarymeancapillaryflow() const {
  return this != internal_default_instance() && pulmonarymeancapillaryflow_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarymeancapillaryflow() const {
  return _internal_has_pulmonarymeancapillaryflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_pulmonarymeancapillaryflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = pulmonarymeancapillaryflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::pulmonarymeancapillaryflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanCapillaryFlow)
  return _internal_pulmonarymeancapillaryflow();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarymeancapillaryflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeancapillaryflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeancapillaryflow_);
  }
  pulmonarymeancapillaryflow_ = pulmonarymeancapillaryflow;
  if (pulmonarymeancapillaryflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanCapillaryFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_pulmonarymeancapillaryflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonarymeancapillaryflow_;
  pulmonarymeancapillaryflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_pulmonarymeancapillaryflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanCapillaryFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonarymeancapillaryflow_;
  pulmonarymeancapillaryflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_pulmonarymeancapillaryflow() {
  
  if (pulmonarymeancapillaryflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    pulmonarymeancapillaryflow_ = p;
  }
  return pulmonarymeancapillaryflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_pulmonarymeancapillaryflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanCapillaryFlow)
  return _internal_mutable_pulmonarymeancapillaryflow();
}
inline void CardiovascularSystemData::set_allocated_pulmonarymeancapillaryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeancapillaryflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeancapillaryflow_);
  }
  if (pulmonarymeancapillaryflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeancapillaryflow)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarymeancapillaryflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarymeancapillaryflow, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarymeancapillaryflow_ = pulmonarymeancapillaryflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanCapillaryFlow)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData PulmonaryMeanShuntFlow = 24;
inline bool CardiovascularSystemData::_internal_has_pulmonarymeanshuntflow() const {
  return this != internal_default_instance() && pulmonarymeanshuntflow_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarymeanshuntflow() const {
  return _internal_has_pulmonarymeanshuntflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_pulmonarymeanshuntflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = pulmonarymeanshuntflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::pulmonarymeanshuntflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanShuntFlow)
  return _internal_pulmonarymeanshuntflow();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarymeanshuntflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeanshuntflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanshuntflow_);
  }
  pulmonarymeanshuntflow_ = pulmonarymeanshuntflow;
  if (pulmonarymeanshuntflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanShuntFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_pulmonarymeanshuntflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonarymeanshuntflow_;
  pulmonarymeanshuntflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_pulmonarymeanshuntflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanShuntFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = pulmonarymeanshuntflow_;
  pulmonarymeanshuntflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_pulmonarymeanshuntflow() {
  
  if (pulmonarymeanshuntflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    pulmonarymeanshuntflow_ = p;
  }
  return pulmonarymeanshuntflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_pulmonarymeanshuntflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanShuntFlow)
  return _internal_mutable_pulmonarymeanshuntflow();
}
inline void CardiovascularSystemData::set_allocated_pulmonarymeanshuntflow(::pulse::cdm::bind::ScalarVolumePerTimeData* pulmonarymeanshuntflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanshuntflow_);
  }
  if (pulmonarymeanshuntflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarymeanshuntflow)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarymeanshuntflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarymeanshuntflow, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarymeanshuntflow_ = pulmonarymeanshuntflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryMeanShuntFlow)
}

// .pulse.cdm.bind.ScalarPressureData PulmonarySystolicArterialPressure = 25;
inline bool CardiovascularSystemData::_internal_has_pulmonarysystolicarterialpressure() const {
  return this != internal_default_instance() && pulmonarysystolicarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonarysystolicarterialpressure() const {
  return _internal_has_pulmonarysystolicarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulmonarysystolicarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulmonarysystolicarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulmonarysystolicarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonarySystolicArterialPressure)
  return _internal_pulmonarysystolicarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonarysystolicarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* pulmonarysystolicarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarysystolicarterialpressure_);
  }
  pulmonarysystolicarterialpressure_ = pulmonarysystolicarterialpressure;
  if (pulmonarysystolicarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonarySystolicArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulmonarysystolicarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarysystolicarterialpressure_;
  pulmonarysystolicarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulmonarysystolicarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonarySystolicArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulmonarysystolicarterialpressure_;
  pulmonarysystolicarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulmonarysystolicarterialpressure() {
  
  if (pulmonarysystolicarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulmonarysystolicarterialpressure_ = p;
  }
  return pulmonarysystolicarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulmonarysystolicarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonarySystolicArterialPressure)
  return _internal_mutable_pulmonarysystolicarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_pulmonarysystolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* pulmonarysystolicarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarysystolicarterialpressure_);
  }
  if (pulmonarysystolicarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarysystolicarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarysystolicarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarysystolicarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarysystolicarterialpressure_ = pulmonarysystolicarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonarySystolicArterialPressure)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData PulmonaryVascularResistance = 26;
inline bool CardiovascularSystemData::_internal_has_pulmonaryvascularresistance() const {
  return this != internal_default_instance() && pulmonaryvascularresistance_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonaryvascularresistance() const {
  return _internal_has_pulmonaryvascularresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& CardiovascularSystemData::_internal_pulmonaryvascularresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = pulmonaryvascularresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& CardiovascularSystemData::pulmonaryvascularresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistance)
  return _internal_pulmonaryvascularresistance();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonaryvascularresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* pulmonaryvascularresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistance_);
  }
  pulmonaryvascularresistance_ = pulmonaryvascularresistance;
  if (pulmonaryvascularresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::release_pulmonaryvascularresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = pulmonaryvascularresistance_;
  pulmonaryvascularresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::unsafe_arena_release_pulmonaryvascularresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = pulmonaryvascularresistance_;
  pulmonaryvascularresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::_internal_mutable_pulmonaryvascularresistance() {
  
  if (pulmonaryvascularresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    pulmonaryvascularresistance_ = p;
  }
  return pulmonaryvascularresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::mutable_pulmonaryvascularresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistance)
  return _internal_mutable_pulmonaryvascularresistance();
}
inline void CardiovascularSystemData::set_allocated_pulmonaryvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* pulmonaryvascularresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistance_);
  }
  if (pulmonaryvascularresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistance)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryvascularresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryvascularresistance, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryvascularresistance_ = pulmonaryvascularresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeAreaData PulmonaryVascularResistanceIndex = 27;
inline bool CardiovascularSystemData::_internal_has_pulmonaryvascularresistanceindex() const {
  return this != internal_default_instance() && pulmonaryvascularresistanceindex_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulmonaryvascularresistanceindex() const {
  return _internal_has_pulmonaryvascularresistanceindex();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData& CardiovascularSystemData::_internal_pulmonaryvascularresistanceindex() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* p = pulmonaryvascularresistanceindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData& CardiovascularSystemData::pulmonaryvascularresistanceindex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistanceIndex)
  return _internal_pulmonaryvascularresistanceindex();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulmonaryvascularresistanceindex(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* pulmonaryvascularresistanceindex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistanceindex_);
  }
  pulmonaryvascularresistanceindex_ = pulmonaryvascularresistanceindex;
  if (pulmonaryvascularresistanceindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistanceIndex)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* CardiovascularSystemData::release_pulmonaryvascularresistanceindex() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* temp = pulmonaryvascularresistanceindex_;
  pulmonaryvascularresistanceindex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* CardiovascularSystemData::unsafe_arena_release_pulmonaryvascularresistanceindex() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistanceIndex)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* temp = pulmonaryvascularresistanceindex_;
  pulmonaryvascularresistanceindex_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* CardiovascularSystemData::_internal_mutable_pulmonaryvascularresistanceindex() {
  
  if (pulmonaryvascularresistanceindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData>(GetArena());
    pulmonaryvascularresistanceindex_ = p;
  }
  return pulmonaryvascularresistanceindex_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* CardiovascularSystemData::mutable_pulmonaryvascularresistanceindex() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistanceIndex)
  return _internal_mutable_pulmonaryvascularresistanceindex();
}
inline void CardiovascularSystemData::set_allocated_pulmonaryvascularresistanceindex(::pulse::cdm::bind::ScalarPressureTimePerVolumeAreaData* pulmonaryvascularresistanceindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistanceindex_);
  }
  if (pulmonaryvascularresistanceindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryvascularresistanceindex)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryvascularresistanceindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryvascularresistanceindex, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryvascularresistanceindex_ = pulmonaryvascularresistanceindex;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulmonaryVascularResistanceIndex)
}

// .pulse.cdm.bind.ScalarPressureData PulsePressure = 28;
inline bool CardiovascularSystemData::_internal_has_pulsepressure() const {
  return this != internal_default_instance() && pulsepressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_pulsepressure() const {
  return _internal_has_pulsepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_pulsepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulsepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::pulsepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.PulsePressure)
  return _internal_pulsepressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_pulsepressure(
    ::pulse::cdm::bind::ScalarPressureData* pulsepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressure_);
  }
  pulsepressure_ = pulsepressure;
  if (pulsepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulsePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_pulsepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulsepressure_;
  pulsepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_pulsepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.PulsePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulsepressure_;
  pulsepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_pulsepressure() {
  
  if (pulsepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulsepressure_ = p;
  }
  return pulsepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_pulsepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.PulsePressure)
  return _internal_mutable_pulsepressure();
}
inline void CardiovascularSystemData::set_allocated_pulsepressure(::pulse::cdm::bind::ScalarPressureData* pulsepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressure_);
  }
  if (pulsepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressure)->GetArena();
    if (message_arena != submessage_arena) {
      pulsepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulsepressure, submessage_arena);
    }
    
  } else {
    
  }
  pulsepressure_ = pulsepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.PulsePressure)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData SystemicVascularResistance = 29;
inline bool CardiovascularSystemData::_internal_has_systemicvascularresistance() const {
  return this != internal_default_instance() && systemicvascularresistance_ != nullptr;
}
inline bool CardiovascularSystemData::has_systemicvascularresistance() const {
  return _internal_has_systemicvascularresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& CardiovascularSystemData::_internal_systemicvascularresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = systemicvascularresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& CardiovascularSystemData::systemicvascularresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.SystemicVascularResistance)
  return _internal_systemicvascularresistance();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_systemicvascularresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* systemicvascularresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicvascularresistance_);
  }
  systemicvascularresistance_ = systemicvascularresistance;
  if (systemicvascularresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.SystemicVascularResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::release_systemicvascularresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = systemicvascularresistance_;
  systemicvascularresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::unsafe_arena_release_systemicvascularresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.SystemicVascularResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = systemicvascularresistance_;
  systemicvascularresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::_internal_mutable_systemicvascularresistance() {
  
  if (systemicvascularresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    systemicvascularresistance_ = p;
  }
  return systemicvascularresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* CardiovascularSystemData::mutable_systemicvascularresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.SystemicVascularResistance)
  return _internal_mutable_systemicvascularresistance();
}
inline void CardiovascularSystemData::set_allocated_systemicvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* systemicvascularresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicvascularresistance_);
  }
  if (systemicvascularresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systemicvascularresistance)->GetArena();
    if (message_arena != submessage_arena) {
      systemicvascularresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemicvascularresistance, submessage_arena);
    }
    
  } else {
    
  }
  systemicvascularresistance_ = systemicvascularresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.SystemicVascularResistance)
}

// .pulse.cdm.bind.ScalarPressureData SystolicArterialPressure = 30;
inline bool CardiovascularSystemData::_internal_has_systolicarterialpressure() const {
  return this != internal_default_instance() && systolicarterialpressure_ != nullptr;
}
inline bool CardiovascularSystemData::has_systolicarterialpressure() const {
  return _internal_has_systolicarterialpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::_internal_systolicarterialpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = systolicarterialpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& CardiovascularSystemData::systolicarterialpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.SystolicArterialPressure)
  return _internal_systolicarterialpressure();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_systolicarterialpressure(
    ::pulse::cdm::bind::ScalarPressureData* systolicarterialpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicarterialpressure_);
  }
  systolicarterialpressure_ = systolicarterialpressure;
  if (systolicarterialpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.SystolicArterialPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::release_systolicarterialpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = systolicarterialpressure_;
  systolicarterialpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::unsafe_arena_release_systolicarterialpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.SystolicArterialPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = systolicarterialpressure_;
  systolicarterialpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::_internal_mutable_systolicarterialpressure() {
  
  if (systolicarterialpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    systolicarterialpressure_ = p;
  }
  return systolicarterialpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* CardiovascularSystemData::mutable_systolicarterialpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.SystolicArterialPressure)
  return _internal_mutable_systolicarterialpressure();
}
inline void CardiovascularSystemData::set_allocated_systolicarterialpressure(::pulse::cdm::bind::ScalarPressureData* systolicarterialpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicarterialpressure_);
  }
  if (systolicarterialpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(systolicarterialpressure)->GetArena();
    if (message_arena != submessage_arena) {
      systolicarterialpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systolicarterialpressure, submessage_arena);
    }
    
  } else {
    
  }
  systolicarterialpressure_ = systolicarterialpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.SystolicArterialPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData TotalHemorrhageRate = 31;
inline bool CardiovascularSystemData::_internal_has_totalhemorrhagerate() const {
  return this != internal_default_instance() && totalhemorrhagerate_ != nullptr;
}
inline bool CardiovascularSystemData::has_totalhemorrhagerate() const {
  return _internal_has_totalhemorrhagerate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::_internal_totalhemorrhagerate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = totalhemorrhagerate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& CardiovascularSystemData::totalhemorrhagerate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhageRate)
  return _internal_totalhemorrhagerate();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_totalhemorrhagerate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* totalhemorrhagerate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagerate_);
  }
  totalhemorrhagerate_ = totalhemorrhagerate;
  if (totalhemorrhagerate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhageRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::release_totalhemorrhagerate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalhemorrhagerate_;
  totalhemorrhagerate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::unsafe_arena_release_totalhemorrhagerate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhageRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalhemorrhagerate_;
  totalhemorrhagerate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::_internal_mutable_totalhemorrhagerate() {
  
  if (totalhemorrhagerate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    totalhemorrhagerate_ = p;
  }
  return totalhemorrhagerate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* CardiovascularSystemData::mutable_totalhemorrhagerate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhageRate)
  return _internal_mutable_totalhemorrhagerate();
}
inline void CardiovascularSystemData::set_allocated_totalhemorrhagerate(::pulse::cdm::bind::ScalarVolumePerTimeData* totalhemorrhagerate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagerate_);
  }
  if (totalhemorrhagerate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagerate)->GetArena();
    if (message_arena != submessage_arena) {
      totalhemorrhagerate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalhemorrhagerate, submessage_arena);
    }
    
  } else {
    
  }
  totalhemorrhagerate_ = totalhemorrhagerate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhageRate)
}

// .pulse.cdm.bind.ScalarVolumeData TotalHemorrhagedVolume = 32;
inline bool CardiovascularSystemData::_internal_has_totalhemorrhagedvolume() const {
  return this != internal_default_instance() && totalhemorrhagedvolume_ != nullptr;
}
inline bool CardiovascularSystemData::has_totalhemorrhagedvolume() const {
  return _internal_has_totalhemorrhagedvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::_internal_totalhemorrhagedvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totalhemorrhagedvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& CardiovascularSystemData::totalhemorrhagedvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhagedVolume)
  return _internal_totalhemorrhagedvolume();
}
inline void CardiovascularSystemData::unsafe_arena_set_allocated_totalhemorrhagedvolume(
    ::pulse::cdm::bind::ScalarVolumeData* totalhemorrhagedvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagedvolume_);
  }
  totalhemorrhagedvolume_ = totalhemorrhagedvolume;
  if (totalhemorrhagedvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhagedVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::release_totalhemorrhagedvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalhemorrhagedvolume_;
  totalhemorrhagedvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::unsafe_arena_release_totalhemorrhagedvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhagedVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalhemorrhagedvolume_;
  totalhemorrhagedvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::_internal_mutable_totalhemorrhagedvolume() {
  
  if (totalhemorrhagedvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    totalhemorrhagedvolume_ = p;
  }
  return totalhemorrhagedvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* CardiovascularSystemData::mutable_totalhemorrhagedvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhagedVolume)
  return _internal_mutable_totalhemorrhagedvolume();
}
inline void CardiovascularSystemData::set_allocated_totalhemorrhagedvolume(::pulse::cdm::bind::ScalarVolumeData* totalhemorrhagedvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagedvolume_);
  }
  if (totalhemorrhagedvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalhemorrhagedvolume)->GetArena();
    if (message_arena != submessage_arena) {
      totalhemorrhagedvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalhemorrhagedvolume, submessage_arena);
    }
    
  } else {
    
  }
  totalhemorrhagedvolume_ = totalhemorrhagedvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiovascularSystemData.TotalHemorrhagedVolume)
}

// -------------------------------------------------------------------

// DrugSystemData

// .pulse.cdm.bind.ScalarNegative1To1Data BronchodilationLevel = 1;
inline bool DrugSystemData::_internal_has_bronchodilationlevel() const {
  return this != internal_default_instance() && bronchodilationlevel_ != nullptr;
}
inline bool DrugSystemData::has_bronchodilationlevel() const {
  return _internal_has_bronchodilationlevel();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& DrugSystemData::_internal_bronchodilationlevel() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = bronchodilationlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& DrugSystemData::bronchodilationlevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.BronchodilationLevel)
  return _internal_bronchodilationlevel();
}
inline void DrugSystemData::unsafe_arena_set_allocated_bronchodilationlevel(
    ::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilationlevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilationlevel_);
  }
  bronchodilationlevel_ = bronchodilationlevel;
  if (bronchodilationlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.BronchodilationLevel)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::release_bronchodilationlevel() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchodilationlevel_;
  bronchodilationlevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::unsafe_arena_release_bronchodilationlevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.BronchodilationLevel)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = bronchodilationlevel_;
  bronchodilationlevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::_internal_mutable_bronchodilationlevel() {
  
  if (bronchodilationlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    bronchodilationlevel_ = p;
  }
  return bronchodilationlevel_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::mutable_bronchodilationlevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.BronchodilationLevel)
  return _internal_mutable_bronchodilationlevel();
}
inline void DrugSystemData::set_allocated_bronchodilationlevel(::pulse::cdm::bind::ScalarNegative1To1Data* bronchodilationlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilationlevel_);
  }
  if (bronchodilationlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchodilationlevel)->GetArena();
    if (message_arena != submessage_arena) {
      bronchodilationlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchodilationlevel, submessage_arena);
    }
    
  } else {
    
  }
  bronchodilationlevel_ = bronchodilationlevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.BronchodilationLevel)
}

// .pulse.cdm.bind.ScalarFrequencyData HeartRateChange = 2;
inline bool DrugSystemData::_internal_has_heartratechange() const {
  return this != internal_default_instance() && heartratechange_ != nullptr;
}
inline bool DrugSystemData::has_heartratechange() const {
  return _internal_has_heartratechange();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& DrugSystemData::_internal_heartratechange() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = heartratechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData&>(
      ::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& DrugSystemData::heartratechange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.HeartRateChange)
  return _internal_heartratechange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_heartratechange(
    ::pulse::cdm::bind::ScalarFrequencyData* heartratechange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratechange_);
  }
  heartratechange_ = heartratechange;
  if (heartratechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.HeartRateChange)
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::release_heartratechange() {
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartratechange_;
  heartratechange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::unsafe_arena_release_heartratechange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.HeartRateChange)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = heartratechange_;
  heartratechange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::_internal_mutable_heartratechange() {
  
  if (heartratechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArena());
    heartratechange_ = p;
  }
  return heartratechange_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::mutable_heartratechange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.HeartRateChange)
  return _internal_mutable_heartratechange();
}
inline void DrugSystemData::set_allocated_heartratechange(::pulse::cdm::bind::ScalarFrequencyData* heartratechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratechange_);
  }
  if (heartratechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartratechange)->GetArena();
    if (message_arena != submessage_arena) {
      heartratechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartratechange, submessage_arena);
    }
    
  } else {
    
  }
  heartratechange_ = heartratechange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.HeartRateChange)
}

// .pulse.cdm.bind.ScalarPressureData MeanBloodPressureChange = 3;
inline bool DrugSystemData::_internal_has_meanbloodpressurechange() const {
  return this != internal_default_instance() && meanbloodpressurechange_ != nullptr;
}
inline bool DrugSystemData::has_meanbloodpressurechange() const {
  return _internal_has_meanbloodpressurechange();
}
inline const ::pulse::cdm::bind::ScalarPressureData& DrugSystemData::_internal_meanbloodpressurechange() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanbloodpressurechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& DrugSystemData::meanbloodpressurechange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.MeanBloodPressureChange)
  return _internal_meanbloodpressurechange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_meanbloodpressurechange(
    ::pulse::cdm::bind::ScalarPressureData* meanbloodpressurechange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanbloodpressurechange_);
  }
  meanbloodpressurechange_ = meanbloodpressurechange;
  if (meanbloodpressurechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.MeanBloodPressureChange)
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::release_meanbloodpressurechange() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanbloodpressurechange_;
  meanbloodpressurechange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::unsafe_arena_release_meanbloodpressurechange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.MeanBloodPressureChange)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanbloodpressurechange_;
  meanbloodpressurechange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::_internal_mutable_meanbloodpressurechange() {
  
  if (meanbloodpressurechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meanbloodpressurechange_ = p;
  }
  return meanbloodpressurechange_;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::mutable_meanbloodpressurechange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.MeanBloodPressureChange)
  return _internal_mutable_meanbloodpressurechange();
}
inline void DrugSystemData::set_allocated_meanbloodpressurechange(::pulse::cdm::bind::ScalarPressureData* meanbloodpressurechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanbloodpressurechange_);
  }
  if (meanbloodpressurechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanbloodpressurechange)->GetArena();
    if (message_arena != submessage_arena) {
      meanbloodpressurechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanbloodpressurechange, submessage_arena);
    }
    
  } else {
    
  }
  meanbloodpressurechange_ = meanbloodpressurechange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.MeanBloodPressureChange)
}

// .pulse.cdm.bind.Scalar0To1Data NeuromuscularBlockLevel = 4;
inline bool DrugSystemData::_internal_has_neuromuscularblocklevel() const {
  return this != internal_default_instance() && neuromuscularblocklevel_ != nullptr;
}
inline bool DrugSystemData::has_neuromuscularblocklevel() const {
  return _internal_has_neuromuscularblocklevel();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DrugSystemData::_internal_neuromuscularblocklevel() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = neuromuscularblocklevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DrugSystemData::neuromuscularblocklevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.NeuromuscularBlockLevel)
  return _internal_neuromuscularblocklevel();
}
inline void DrugSystemData::unsafe_arena_set_allocated_neuromuscularblocklevel(
    ::pulse::cdm::bind::Scalar0To1Data* neuromuscularblocklevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblocklevel_);
  }
  neuromuscularblocklevel_ = neuromuscularblocklevel;
  if (neuromuscularblocklevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.NeuromuscularBlockLevel)
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::release_neuromuscularblocklevel() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neuromuscularblocklevel_;
  neuromuscularblocklevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::unsafe_arena_release_neuromuscularblocklevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.NeuromuscularBlockLevel)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = neuromuscularblocklevel_;
  neuromuscularblocklevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::_internal_mutable_neuromuscularblocklevel() {
  
  if (neuromuscularblocklevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    neuromuscularblocklevel_ = p;
  }
  return neuromuscularblocklevel_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::mutable_neuromuscularblocklevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.NeuromuscularBlockLevel)
  return _internal_mutable_neuromuscularblocklevel();
}
inline void DrugSystemData::set_allocated_neuromuscularblocklevel(::pulse::cdm::bind::Scalar0To1Data* neuromuscularblocklevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblocklevel_);
  }
  if (neuromuscularblocklevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neuromuscularblocklevel)->GetArena();
    if (message_arena != submessage_arena) {
      neuromuscularblocklevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neuromuscularblocklevel, submessage_arena);
    }
    
  } else {
    
  }
  neuromuscularblocklevel_ = neuromuscularblocklevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.NeuromuscularBlockLevel)
}

// .pulse.cdm.bind.ScalarPressureData PulsePressureChange = 5;
inline bool DrugSystemData::_internal_has_pulsepressurechange() const {
  return this != internal_default_instance() && pulsepressurechange_ != nullptr;
}
inline bool DrugSystemData::has_pulsepressurechange() const {
  return _internal_has_pulsepressurechange();
}
inline const ::pulse::cdm::bind::ScalarPressureData& DrugSystemData::_internal_pulsepressurechange() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pulsepressurechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& DrugSystemData::pulsepressurechange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.PulsePressureChange)
  return _internal_pulsepressurechange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_pulsepressurechange(
    ::pulse::cdm::bind::ScalarPressureData* pulsepressurechange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressurechange_);
  }
  pulsepressurechange_ = pulsepressurechange;
  if (pulsepressurechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.PulsePressureChange)
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::release_pulsepressurechange() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulsepressurechange_;
  pulsepressurechange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::unsafe_arena_release_pulsepressurechange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.PulsePressureChange)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pulsepressurechange_;
  pulsepressurechange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::_internal_mutable_pulsepressurechange() {
  
  if (pulsepressurechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pulsepressurechange_ = p;
  }
  return pulsepressurechange_;
}
inline ::pulse::cdm::bind::ScalarPressureData* DrugSystemData::mutable_pulsepressurechange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.PulsePressureChange)
  return _internal_mutable_pulsepressurechange();
}
inline void DrugSystemData::set_allocated_pulsepressurechange(::pulse::cdm::bind::ScalarPressureData* pulsepressurechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressurechange_);
  }
  if (pulsepressurechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsepressurechange)->GetArena();
    if (message_arena != submessage_arena) {
      pulsepressurechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulsepressurechange, submessage_arena);
    }
    
  } else {
    
  }
  pulsepressurechange_ = pulsepressurechange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.PulsePressureChange)
}

// .pulse.cdm.bind.PupillaryResponseData PupillaryResponse = 6;
inline bool DrugSystemData::_internal_has_pupillaryresponse() const {
  return this != internal_default_instance() && pupillaryresponse_ != nullptr;
}
inline bool DrugSystemData::has_pupillaryresponse() const {
  return _internal_has_pupillaryresponse();
}
inline void DrugSystemData::clear_pupillaryresponse() {
  if (GetArena() == nullptr && pupillaryresponse_ != nullptr) {
    delete pupillaryresponse_;
  }
  pupillaryresponse_ = nullptr;
}
inline const ::pulse::cdm::bind::PupillaryResponseData& DrugSystemData::_internal_pupillaryresponse() const {
  const ::pulse::cdm::bind::PupillaryResponseData* p = pupillaryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PupillaryResponseData&>(
      ::pulse::cdm::bind::_PupillaryResponseData_default_instance_);
}
inline const ::pulse::cdm::bind::PupillaryResponseData& DrugSystemData::pupillaryresponse() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.PupillaryResponse)
  return _internal_pupillaryresponse();
}
inline void DrugSystemData::unsafe_arena_set_allocated_pupillaryresponse(
    ::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pupillaryresponse_);
  }
  pupillaryresponse_ = pupillaryresponse;
  if (pupillaryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.PupillaryResponse)
}
inline ::pulse::cdm::bind::PupillaryResponseData* DrugSystemData::release_pupillaryresponse() {
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = pupillaryresponse_;
  pupillaryresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* DrugSystemData::unsafe_arena_release_pupillaryresponse() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.PupillaryResponse)
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = pupillaryresponse_;
  pupillaryresponse_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* DrugSystemData::_internal_mutable_pupillaryresponse() {
  
  if (pupillaryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PupillaryResponseData>(GetArena());
    pupillaryresponse_ = p;
  }
  return pupillaryresponse_;
}
inline ::pulse::cdm::bind::PupillaryResponseData* DrugSystemData::mutable_pupillaryresponse() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.PupillaryResponse)
  return _internal_mutable_pupillaryresponse();
}
inline void DrugSystemData::set_allocated_pupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* pupillaryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pupillaryresponse_;
  }
  if (pupillaryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pupillaryresponse);
    if (message_arena != submessage_arena) {
      pupillaryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pupillaryresponse, submessage_arena);
    }
    
  } else {
    
  }
  pupillaryresponse_ = pupillaryresponse;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.PupillaryResponse)
}

// .pulse.cdm.bind.ScalarFrequencyData RespirationRateChange = 7;
inline bool DrugSystemData::_internal_has_respirationratechange() const {
  return this != internal_default_instance() && respirationratechange_ != nullptr;
}
inline bool DrugSystemData::has_respirationratechange() const {
  return _internal_has_respirationratechange();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& DrugSystemData::_internal_respirationratechange() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = respirationratechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData&>(
      ::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& DrugSystemData::respirationratechange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.RespirationRateChange)
  return _internal_respirationratechange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_respirationratechange(
    ::pulse::cdm::bind::ScalarFrequencyData* respirationratechange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratechange_);
  }
  respirationratechange_ = respirationratechange;
  if (respirationratechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.RespirationRateChange)
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::release_respirationratechange() {
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respirationratechange_;
  respirationratechange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::unsafe_arena_release_respirationratechange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.RespirationRateChange)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respirationratechange_;
  respirationratechange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::_internal_mutable_respirationratechange() {
  
  if (respirationratechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArena());
    respirationratechange_ = p;
  }
  return respirationratechange_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* DrugSystemData::mutable_respirationratechange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.RespirationRateChange)
  return _internal_mutable_respirationratechange();
}
inline void DrugSystemData::set_allocated_respirationratechange(::pulse::cdm::bind::ScalarFrequencyData* respirationratechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratechange_);
  }
  if (respirationratechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationratechange)->GetArena();
    if (message_arena != submessage_arena) {
      respirationratechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationratechange, submessage_arena);
    }
    
  } else {
    
  }
  respirationratechange_ = respirationratechange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.RespirationRateChange)
}

// .pulse.cdm.bind.Scalar0To1Data SedationLevel = 8;
inline bool DrugSystemData::_internal_has_sedationlevel() const {
  return this != internal_default_instance() && sedationlevel_ != nullptr;
}
inline bool DrugSystemData::has_sedationlevel() const {
  return _internal_has_sedationlevel();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DrugSystemData::_internal_sedationlevel() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = sedationlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DrugSystemData::sedationlevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.SedationLevel)
  return _internal_sedationlevel();
}
inline void DrugSystemData::unsafe_arena_set_allocated_sedationlevel(
    ::pulse::cdm::bind::Scalar0To1Data* sedationlevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedationlevel_);
  }
  sedationlevel_ = sedationlevel;
  if (sedationlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.SedationLevel)
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::release_sedationlevel() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = sedationlevel_;
  sedationlevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::unsafe_arena_release_sedationlevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.SedationLevel)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = sedationlevel_;
  sedationlevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::_internal_mutable_sedationlevel() {
  
  if (sedationlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    sedationlevel_ = p;
  }
  return sedationlevel_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DrugSystemData::mutable_sedationlevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.SedationLevel)
  return _internal_mutable_sedationlevel();
}
inline void DrugSystemData::set_allocated_sedationlevel(::pulse::cdm::bind::Scalar0To1Data* sedationlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedationlevel_);
  }
  if (sedationlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sedationlevel)->GetArena();
    if (message_arena != submessage_arena) {
      sedationlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sedationlevel, submessage_arena);
    }
    
  } else {
    
  }
  sedationlevel_ = sedationlevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.SedationLevel)
}

// .pulse.cdm.bind.ScalarVolumeData TidalVolumeChange = 9;
inline bool DrugSystemData::_internal_has_tidalvolumechange() const {
  return this != internal_default_instance() && tidalvolumechange_ != nullptr;
}
inline bool DrugSystemData::has_tidalvolumechange() const {
  return _internal_has_tidalvolumechange();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& DrugSystemData::_internal_tidalvolumechange() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = tidalvolumechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& DrugSystemData::tidalvolumechange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.TidalVolumeChange)
  return _internal_tidalvolumechange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_tidalvolumechange(
    ::pulse::cdm::bind::ScalarVolumeData* tidalvolumechange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumechange_);
  }
  tidalvolumechange_ = tidalvolumechange;
  if (tidalvolumechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.TidalVolumeChange)
}
inline ::pulse::cdm::bind::ScalarVolumeData* DrugSystemData::release_tidalvolumechange() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = tidalvolumechange_;
  tidalvolumechange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* DrugSystemData::unsafe_arena_release_tidalvolumechange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.TidalVolumeChange)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = tidalvolumechange_;
  tidalvolumechange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* DrugSystemData::_internal_mutable_tidalvolumechange() {
  
  if (tidalvolumechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    tidalvolumechange_ = p;
  }
  return tidalvolumechange_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* DrugSystemData::mutable_tidalvolumechange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.TidalVolumeChange)
  return _internal_mutable_tidalvolumechange();
}
inline void DrugSystemData::set_allocated_tidalvolumechange(::pulse::cdm::bind::ScalarVolumeData* tidalvolumechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumechange_);
  }
  if (tidalvolumechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolumechange)->GetArena();
    if (message_arena != submessage_arena) {
      tidalvolumechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tidalvolumechange, submessage_arena);
    }
    
  } else {
    
  }
  tidalvolumechange_ = tidalvolumechange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.TidalVolumeChange)
}

// .pulse.cdm.bind.ScalarNegative1To1Data TubularPermeabilityChange = 10;
inline bool DrugSystemData::_internal_has_tubularpermeabilitychange() const {
  return this != internal_default_instance() && tubularpermeabilitychange_ != nullptr;
}
inline bool DrugSystemData::has_tubularpermeabilitychange() const {
  return _internal_has_tubularpermeabilitychange();
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& DrugSystemData::_internal_tubularpermeabilitychange() const {
  const ::pulse::cdm::bind::ScalarNegative1To1Data* p = tubularpermeabilitychange_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarNegative1To1Data&>(
      ::pulse::cdm::bind::_ScalarNegative1To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarNegative1To1Data& DrugSystemData::tubularpermeabilitychange() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DrugSystemData.TubularPermeabilityChange)
  return _internal_tubularpermeabilitychange();
}
inline void DrugSystemData::unsafe_arena_set_allocated_tubularpermeabilitychange(
    ::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitychange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitychange_);
  }
  tubularpermeabilitychange_ = tubularpermeabilitychange;
  if (tubularpermeabilitychange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DrugSystemData.TubularPermeabilityChange)
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::release_tubularpermeabilitychange() {
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tubularpermeabilitychange_;
  tubularpermeabilitychange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::unsafe_arena_release_tubularpermeabilitychange() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DrugSystemData.TubularPermeabilityChange)
  
  ::pulse::cdm::bind::ScalarNegative1To1Data* temp = tubularpermeabilitychange_;
  tubularpermeabilitychange_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::_internal_mutable_tubularpermeabilitychange() {
  
  if (tubularpermeabilitychange_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarNegative1To1Data>(GetArena());
    tubularpermeabilitychange_ = p;
  }
  return tubularpermeabilitychange_;
}
inline ::pulse::cdm::bind::ScalarNegative1To1Data* DrugSystemData::mutable_tubularpermeabilitychange() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DrugSystemData.TubularPermeabilityChange)
  return _internal_mutable_tubularpermeabilitychange();
}
inline void DrugSystemData::set_allocated_tubularpermeabilitychange(::pulse::cdm::bind::ScalarNegative1To1Data* tubularpermeabilitychange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitychange_);
  }
  if (tubularpermeabilitychange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tubularpermeabilitychange)->GetArena();
    if (message_arena != submessage_arena) {
      tubularpermeabilitychange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tubularpermeabilitychange, submessage_arena);
    }
    
  } else {
    
  }
  tubularpermeabilitychange_ = tubularpermeabilitychange;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DrugSystemData.TubularPermeabilityChange)
}

// -------------------------------------------------------------------

// EndocrineSystemData

// .pulse.cdm.bind.ScalarAmountPerTimeData InsulinSynthesisRate = 1;
inline bool EndocrineSystemData::_internal_has_insulinsynthesisrate() const {
  return this != internal_default_instance() && insulinsynthesisrate_ != nullptr;
}
inline bool EndocrineSystemData::has_insulinsynthesisrate() const {
  return _internal_has_insulinsynthesisrate();
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EndocrineSystemData::_internal_insulinsynthesisrate() const {
  const ::pulse::cdm::bind::ScalarAmountPerTimeData* p = insulinsynthesisrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerTimeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EndocrineSystemData::insulinsynthesisrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EndocrineSystemData.InsulinSynthesisRate)
  return _internal_insulinsynthesisrate();
}
inline void EndocrineSystemData::unsafe_arena_set_allocated_insulinsynthesisrate(
    ::pulse::cdm::bind::ScalarAmountPerTimeData* insulinsynthesisrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insulinsynthesisrate_);
  }
  insulinsynthesisrate_ = insulinsynthesisrate;
  if (insulinsynthesisrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EndocrineSystemData.InsulinSynthesisRate)
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EndocrineSystemData::release_insulinsynthesisrate() {
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = insulinsynthesisrate_;
  insulinsynthesisrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EndocrineSystemData::unsafe_arena_release_insulinsynthesisrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EndocrineSystemData.InsulinSynthesisRate)
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = insulinsynthesisrate_;
  insulinsynthesisrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EndocrineSystemData::_internal_mutable_insulinsynthesisrate() {
  
  if (insulinsynthesisrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerTimeData>(GetArena());
    insulinsynthesisrate_ = p;
  }
  return insulinsynthesisrate_;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EndocrineSystemData::mutable_insulinsynthesisrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EndocrineSystemData.InsulinSynthesisRate)
  return _internal_mutable_insulinsynthesisrate();
}
inline void EndocrineSystemData::set_allocated_insulinsynthesisrate(::pulse::cdm::bind::ScalarAmountPerTimeData* insulinsynthesisrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insulinsynthesisrate_);
  }
  if (insulinsynthesisrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insulinsynthesisrate)->GetArena();
    if (message_arena != submessage_arena) {
      insulinsynthesisrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insulinsynthesisrate, submessage_arena);
    }
    
  } else {
    
  }
  insulinsynthesisrate_ = insulinsynthesisrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EndocrineSystemData.InsulinSynthesisRate)
}

// -------------------------------------------------------------------

// EnergySystemData

// .pulse.cdm.bind.Scalar0To1Data AchievedExerciseLevel = 1;
inline bool EnergySystemData::_internal_has_achievedexerciselevel() const {
  return this != internal_default_instance() && achievedexerciselevel_ != nullptr;
}
inline bool EnergySystemData::has_achievedexerciselevel() const {
  return _internal_has_achievedexerciselevel();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::_internal_achievedexerciselevel() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = achievedexerciselevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::achievedexerciselevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.AchievedExerciseLevel)
  return _internal_achievedexerciselevel();
}
inline void EnergySystemData::unsafe_arena_set_allocated_achievedexerciselevel(
    ::pulse::cdm::bind::Scalar0To1Data* achievedexerciselevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(achievedexerciselevel_);
  }
  achievedexerciselevel_ = achievedexerciselevel;
  if (achievedexerciselevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.AchievedExerciseLevel)
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::release_achievedexerciselevel() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = achievedexerciselevel_;
  achievedexerciselevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::unsafe_arena_release_achievedexerciselevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.AchievedExerciseLevel)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = achievedexerciselevel_;
  achievedexerciselevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::_internal_mutable_achievedexerciselevel() {
  
  if (achievedexerciselevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    achievedexerciselevel_ = p;
  }
  return achievedexerciselevel_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::mutable_achievedexerciselevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.AchievedExerciseLevel)
  return _internal_mutable_achievedexerciselevel();
}
inline void EnergySystemData::set_allocated_achievedexerciselevel(::pulse::cdm::bind::Scalar0To1Data* achievedexerciselevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(achievedexerciselevel_);
  }
  if (achievedexerciselevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(achievedexerciselevel)->GetArena();
    if (message_arena != submessage_arena) {
      achievedexerciselevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, achievedexerciselevel, submessage_arena);
    }
    
  } else {
    
  }
  achievedexerciselevel_ = achievedexerciselevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.AchievedExerciseLevel)
}

// .pulse.cdm.bind.ScalarTemperatureData CoreTemperature = 2;
inline bool EnergySystemData::_internal_has_coretemperature() const {
  return this != internal_default_instance() && coretemperature_ != nullptr;
}
inline bool EnergySystemData::has_coretemperature() const {
  return _internal_has_coretemperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnergySystemData::_internal_coretemperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = coretemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnergySystemData::coretemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.CoreTemperature)
  return _internal_coretemperature();
}
inline void EnergySystemData::unsafe_arena_set_allocated_coretemperature(
    ::pulse::cdm::bind::ScalarTemperatureData* coretemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperature_);
  }
  coretemperature_ = coretemperature;
  if (coretemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.CoreTemperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::release_coretemperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperature_;
  coretemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::unsafe_arena_release_coretemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.CoreTemperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = coretemperature_;
  coretemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::_internal_mutable_coretemperature() {
  
  if (coretemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    coretemperature_ = p;
  }
  return coretemperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::mutable_coretemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.CoreTemperature)
  return _internal_mutable_coretemperature();
}
inline void EnergySystemData::set_allocated_coretemperature(::pulse::cdm::bind::ScalarTemperatureData* coretemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperature_);
  }
  if (coretemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coretemperature)->GetArena();
    if (message_arena != submessage_arena) {
      coretemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coretemperature, submessage_arena);
    }
    
  } else {
    
  }
  coretemperature_ = coretemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.CoreTemperature)
}

// .pulse.cdm.bind.ScalarAmountPerTimeData CreatinineProductionRate = 3;
inline bool EnergySystemData::_internal_has_creatinineproductionrate() const {
  return this != internal_default_instance() && creatinineproductionrate_ != nullptr;
}
inline bool EnergySystemData::has_creatinineproductionrate() const {
  return _internal_has_creatinineproductionrate();
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::_internal_creatinineproductionrate() const {
  const ::pulse::cdm::bind::ScalarAmountPerTimeData* p = creatinineproductionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerTimeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::creatinineproductionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.CreatinineProductionRate)
  return _internal_creatinineproductionrate();
}
inline void EnergySystemData::unsafe_arena_set_allocated_creatinineproductionrate(
    ::pulse::cdm::bind::ScalarAmountPerTimeData* creatinineproductionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinineproductionrate_);
  }
  creatinineproductionrate_ = creatinineproductionrate;
  if (creatinineproductionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.CreatinineProductionRate)
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::release_creatinineproductionrate() {
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = creatinineproductionrate_;
  creatinineproductionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::unsafe_arena_release_creatinineproductionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.CreatinineProductionRate)
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = creatinineproductionrate_;
  creatinineproductionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::_internal_mutable_creatinineproductionrate() {
  
  if (creatinineproductionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerTimeData>(GetArena());
    creatinineproductionrate_ = p;
  }
  return creatinineproductionrate_;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::mutable_creatinineproductionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.CreatinineProductionRate)
  return _internal_mutable_creatinineproductionrate();
}
inline void EnergySystemData::set_allocated_creatinineproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* creatinineproductionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinineproductionrate_);
  }
  if (creatinineproductionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creatinineproductionrate)->GetArena();
    if (message_arena != submessage_arena) {
      creatinineproductionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creatinineproductionrate, submessage_arena);
    }
    
  } else {
    
  }
  creatinineproductionrate_ = creatinineproductionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.CreatinineProductionRate)
}

// .pulse.cdm.bind.ScalarPressureData ExerciseMeanArterialPressureDelta = 4;
inline bool EnergySystemData::_internal_has_exercisemeanarterialpressuredelta() const {
  return this != internal_default_instance() && exercisemeanarterialpressuredelta_ != nullptr;
}
inline bool EnergySystemData::has_exercisemeanarterialpressuredelta() const {
  return _internal_has_exercisemeanarterialpressuredelta();
}
inline const ::pulse::cdm::bind::ScalarPressureData& EnergySystemData::_internal_exercisemeanarterialpressuredelta() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = exercisemeanarterialpressuredelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& EnergySystemData::exercisemeanarterialpressuredelta() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.ExerciseMeanArterialPressureDelta)
  return _internal_exercisemeanarterialpressuredelta();
}
inline void EnergySystemData::unsafe_arena_set_allocated_exercisemeanarterialpressuredelta(
    ::pulse::cdm::bind::ScalarPressureData* exercisemeanarterialpressuredelta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exercisemeanarterialpressuredelta_);
  }
  exercisemeanarterialpressuredelta_ = exercisemeanarterialpressuredelta;
  if (exercisemeanarterialpressuredelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.ExerciseMeanArterialPressureDelta)
}
inline ::pulse::cdm::bind::ScalarPressureData* EnergySystemData::release_exercisemeanarterialpressuredelta() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = exercisemeanarterialpressuredelta_;
  exercisemeanarterialpressuredelta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnergySystemData::unsafe_arena_release_exercisemeanarterialpressuredelta() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.ExerciseMeanArterialPressureDelta)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = exercisemeanarterialpressuredelta_;
  exercisemeanarterialpressuredelta_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnergySystemData::_internal_mutable_exercisemeanarterialpressuredelta() {
  
  if (exercisemeanarterialpressuredelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    exercisemeanarterialpressuredelta_ = p;
  }
  return exercisemeanarterialpressuredelta_;
}
inline ::pulse::cdm::bind::ScalarPressureData* EnergySystemData::mutable_exercisemeanarterialpressuredelta() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.ExerciseMeanArterialPressureDelta)
  return _internal_mutable_exercisemeanarterialpressuredelta();
}
inline void EnergySystemData::set_allocated_exercisemeanarterialpressuredelta(::pulse::cdm::bind::ScalarPressureData* exercisemeanarterialpressuredelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exercisemeanarterialpressuredelta_);
  }
  if (exercisemeanarterialpressuredelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exercisemeanarterialpressuredelta)->GetArena();
    if (message_arena != submessage_arena) {
      exercisemeanarterialpressuredelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exercisemeanarterialpressuredelta, submessage_arena);
    }
    
  } else {
    
  }
  exercisemeanarterialpressuredelta_ = exercisemeanarterialpressuredelta;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.ExerciseMeanArterialPressureDelta)
}

// .pulse.cdm.bind.Scalar0To1Data FatigueLevel = 5;
inline bool EnergySystemData::_internal_has_fatiguelevel() const {
  return this != internal_default_instance() && fatiguelevel_ != nullptr;
}
inline bool EnergySystemData::has_fatiguelevel() const {
  return _internal_has_fatiguelevel();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::_internal_fatiguelevel() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fatiguelevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::fatiguelevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.FatigueLevel)
  return _internal_fatiguelevel();
}
inline void EnergySystemData::unsafe_arena_set_allocated_fatiguelevel(
    ::pulse::cdm::bind::Scalar0To1Data* fatiguelevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatiguelevel_);
  }
  fatiguelevel_ = fatiguelevel;
  if (fatiguelevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.FatigueLevel)
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::release_fatiguelevel() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fatiguelevel_;
  fatiguelevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::unsafe_arena_release_fatiguelevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.FatigueLevel)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fatiguelevel_;
  fatiguelevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::_internal_mutable_fatiguelevel() {
  
  if (fatiguelevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fatiguelevel_ = p;
  }
  return fatiguelevel_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::mutable_fatiguelevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.FatigueLevel)
  return _internal_mutable_fatiguelevel();
}
inline void EnergySystemData::set_allocated_fatiguelevel(::pulse::cdm::bind::Scalar0To1Data* fatiguelevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatiguelevel_);
  }
  if (fatiguelevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatiguelevel)->GetArena();
    if (message_arena != submessage_arena) {
      fatiguelevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fatiguelevel, submessage_arena);
    }
    
  } else {
    
  }
  fatiguelevel_ = fatiguelevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.FatigueLevel)
}

// .pulse.cdm.bind.ScalarAmountPerTimeData KetoneProductionRate = 6;
inline bool EnergySystemData::_internal_has_ketoneproductionrate() const {
  return this != internal_default_instance() && ketoneproductionrate_ != nullptr;
}
inline bool EnergySystemData::has_ketoneproductionrate() const {
  return _internal_has_ketoneproductionrate();
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::_internal_ketoneproductionrate() const {
  const ::pulse::cdm::bind::ScalarAmountPerTimeData* p = ketoneproductionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerTimeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::ketoneproductionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.KetoneProductionRate)
  return _internal_ketoneproductionrate();
}
inline void EnergySystemData::unsafe_arena_set_allocated_ketoneproductionrate(
    ::pulse::cdm::bind::ScalarAmountPerTimeData* ketoneproductionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ketoneproductionrate_);
  }
  ketoneproductionrate_ = ketoneproductionrate;
  if (ketoneproductionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.KetoneProductionRate)
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::release_ketoneproductionrate() {
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = ketoneproductionrate_;
  ketoneproductionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::unsafe_arena_release_ketoneproductionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.KetoneProductionRate)
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = ketoneproductionrate_;
  ketoneproductionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::_internal_mutable_ketoneproductionrate() {
  
  if (ketoneproductionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerTimeData>(GetArena());
    ketoneproductionrate_ = p;
  }
  return ketoneproductionrate_;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::mutable_ketoneproductionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.KetoneProductionRate)
  return _internal_mutable_ketoneproductionrate();
}
inline void EnergySystemData::set_allocated_ketoneproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* ketoneproductionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ketoneproductionrate_);
  }
  if (ketoneproductionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ketoneproductionrate)->GetArena();
    if (message_arena != submessage_arena) {
      ketoneproductionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ketoneproductionrate, submessage_arena);
    }
    
  } else {
    
  }
  ketoneproductionrate_ = ketoneproductionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.KetoneProductionRate)
}

// .pulse.cdm.bind.ScalarAmountPerTimeData LactateProductionRate = 7;
inline bool EnergySystemData::_internal_has_lactateproductionrate() const {
  return this != internal_default_instance() && lactateproductionrate_ != nullptr;
}
inline bool EnergySystemData::has_lactateproductionrate() const {
  return _internal_has_lactateproductionrate();
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::_internal_lactateproductionrate() const {
  const ::pulse::cdm::bind::ScalarAmountPerTimeData* p = lactateproductionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAmountPerTimeData&>(
      ::pulse::cdm::bind::_ScalarAmountPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAmountPerTimeData& EnergySystemData::lactateproductionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.LactateProductionRate)
  return _internal_lactateproductionrate();
}
inline void EnergySystemData::unsafe_arena_set_allocated_lactateproductionrate(
    ::pulse::cdm::bind::ScalarAmountPerTimeData* lactateproductionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lactateproductionrate_);
  }
  lactateproductionrate_ = lactateproductionrate;
  if (lactateproductionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.LactateProductionRate)
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::release_lactateproductionrate() {
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = lactateproductionrate_;
  lactateproductionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::unsafe_arena_release_lactateproductionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.LactateProductionRate)
  
  ::pulse::cdm::bind::ScalarAmountPerTimeData* temp = lactateproductionrate_;
  lactateproductionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::_internal_mutable_lactateproductionrate() {
  
  if (lactateproductionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAmountPerTimeData>(GetArena());
    lactateproductionrate_ = p;
  }
  return lactateproductionrate_;
}
inline ::pulse::cdm::bind::ScalarAmountPerTimeData* EnergySystemData::mutable_lactateproductionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.LactateProductionRate)
  return _internal_mutable_lactateproductionrate();
}
inline void EnergySystemData::set_allocated_lactateproductionrate(::pulse::cdm::bind::ScalarAmountPerTimeData* lactateproductionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lactateproductionrate_);
  }
  if (lactateproductionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lactateproductionrate)->GetArena();
    if (message_arena != submessage_arena) {
      lactateproductionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lactateproductionrate, submessage_arena);
    }
    
  } else {
    
  }
  lactateproductionrate_ = lactateproductionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.LactateProductionRate)
}

// .pulse.cdm.bind.ScalarTemperatureData SkinTemperature = 8;
inline bool EnergySystemData::_internal_has_skintemperature() const {
  return this != internal_default_instance() && skintemperature_ != nullptr;
}
inline bool EnergySystemData::has_skintemperature() const {
  return _internal_has_skintemperature();
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnergySystemData::_internal_skintemperature() const {
  const ::pulse::cdm::bind::ScalarTemperatureData* p = skintemperature_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTemperatureData&>(
      ::pulse::cdm::bind::_ScalarTemperatureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTemperatureData& EnergySystemData::skintemperature() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.SkinTemperature)
  return _internal_skintemperature();
}
inline void EnergySystemData::unsafe_arena_set_allocated_skintemperature(
    ::pulse::cdm::bind::ScalarTemperatureData* skintemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skintemperature_);
  }
  skintemperature_ = skintemperature;
  if (skintemperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.SkinTemperature)
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::release_skintemperature() {
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = skintemperature_;
  skintemperature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::unsafe_arena_release_skintemperature() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.SkinTemperature)
  
  ::pulse::cdm::bind::ScalarTemperatureData* temp = skintemperature_;
  skintemperature_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::_internal_mutable_skintemperature() {
  
  if (skintemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTemperatureData>(GetArena());
    skintemperature_ = p;
  }
  return skintemperature_;
}
inline ::pulse::cdm::bind::ScalarTemperatureData* EnergySystemData::mutable_skintemperature() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.SkinTemperature)
  return _internal_mutable_skintemperature();
}
inline void EnergySystemData::set_allocated_skintemperature(::pulse::cdm::bind::ScalarTemperatureData* skintemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skintemperature_);
  }
  if (skintemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skintemperature)->GetArena();
    if (message_arena != submessage_arena) {
      skintemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skintemperature, submessage_arena);
    }
    
  } else {
    
  }
  skintemperature_ = skintemperature;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.SkinTemperature)
}

// .pulse.cdm.bind.ScalarMassPerTimeData SweatRate = 9;
inline bool EnergySystemData::_internal_has_sweatrate() const {
  return this != internal_default_instance() && sweatrate_ != nullptr;
}
inline bool EnergySystemData::has_sweatrate() const {
  return _internal_has_sweatrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& EnergySystemData::_internal_sweatrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = sweatrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& EnergySystemData::sweatrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.SweatRate)
  return _internal_sweatrate();
}
inline void EnergySystemData::unsafe_arena_set_allocated_sweatrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* sweatrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatrate_);
  }
  sweatrate_ = sweatrate;
  if (sweatrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.SweatRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* EnergySystemData::release_sweatrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = sweatrate_;
  sweatrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* EnergySystemData::unsafe_arena_release_sweatrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.SweatRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = sweatrate_;
  sweatrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* EnergySystemData::_internal_mutable_sweatrate() {
  
  if (sweatrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    sweatrate_ = p;
  }
  return sweatrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* EnergySystemData::mutable_sweatrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.SweatRate)
  return _internal_mutable_sweatrate();
}
inline void EnergySystemData::set_allocated_sweatrate(::pulse::cdm::bind::ScalarMassPerTimeData* sweatrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatrate_);
  }
  if (sweatrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sweatrate)->GetArena();
    if (message_arena != submessage_arena) {
      sweatrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sweatrate, submessage_arena);
    }
    
  } else {
    
  }
  sweatrate_ = sweatrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.SweatRate)
}

// .pulse.cdm.bind.ScalarPowerData TotalMetabolicRate = 10;
inline bool EnergySystemData::_internal_has_totalmetabolicrate() const {
  return this != internal_default_instance() && totalmetabolicrate_ != nullptr;
}
inline bool EnergySystemData::has_totalmetabolicrate() const {
  return _internal_has_totalmetabolicrate();
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnergySystemData::_internal_totalmetabolicrate() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = totalmetabolicrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& EnergySystemData::totalmetabolicrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.TotalMetabolicRate)
  return _internal_totalmetabolicrate();
}
inline void EnergySystemData::unsafe_arena_set_allocated_totalmetabolicrate(
    ::pulse::cdm::bind::ScalarPowerData* totalmetabolicrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmetabolicrate_);
  }
  totalmetabolicrate_ = totalmetabolicrate;
  if (totalmetabolicrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.TotalMetabolicRate)
}
inline ::pulse::cdm::bind::ScalarPowerData* EnergySystemData::release_totalmetabolicrate() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = totalmetabolicrate_;
  totalmetabolicrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnergySystemData::unsafe_arena_release_totalmetabolicrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.TotalMetabolicRate)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = totalmetabolicrate_;
  totalmetabolicrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnergySystemData::_internal_mutable_totalmetabolicrate() {
  
  if (totalmetabolicrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    totalmetabolicrate_ = p;
  }
  return totalmetabolicrate_;
}
inline ::pulse::cdm::bind::ScalarPowerData* EnergySystemData::mutable_totalmetabolicrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.TotalMetabolicRate)
  return _internal_mutable_totalmetabolicrate();
}
inline void EnergySystemData::set_allocated_totalmetabolicrate(::pulse::cdm::bind::ScalarPowerData* totalmetabolicrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmetabolicrate_);
  }
  if (totalmetabolicrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalmetabolicrate)->GetArena();
    if (message_arena != submessage_arena) {
      totalmetabolicrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalmetabolicrate, submessage_arena);
    }
    
  } else {
    
  }
  totalmetabolicrate_ = totalmetabolicrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.TotalMetabolicRate)
}

// .pulse.cdm.bind.Scalar0To1Data TotalWorkRateLevel = 11;
inline bool EnergySystemData::_internal_has_totalworkratelevel() const {
  return this != internal_default_instance() && totalworkratelevel_ != nullptr;
}
inline bool EnergySystemData::has_totalworkratelevel() const {
  return _internal_has_totalworkratelevel();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::_internal_totalworkratelevel() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = totalworkratelevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& EnergySystemData::totalworkratelevel() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.EnergySystemData.TotalWorkRateLevel)
  return _internal_totalworkratelevel();
}
inline void EnergySystemData::unsafe_arena_set_allocated_totalworkratelevel(
    ::pulse::cdm::bind::Scalar0To1Data* totalworkratelevel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkratelevel_);
  }
  totalworkratelevel_ = totalworkratelevel;
  if (totalworkratelevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.EnergySystemData.TotalWorkRateLevel)
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::release_totalworkratelevel() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = totalworkratelevel_;
  totalworkratelevel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::unsafe_arena_release_totalworkratelevel() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.EnergySystemData.TotalWorkRateLevel)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = totalworkratelevel_;
  totalworkratelevel_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::_internal_mutable_totalworkratelevel() {
  
  if (totalworkratelevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    totalworkratelevel_ = p;
  }
  return totalworkratelevel_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* EnergySystemData::mutable_totalworkratelevel() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.EnergySystemData.TotalWorkRateLevel)
  return _internal_mutable_totalworkratelevel();
}
inline void EnergySystemData::set_allocated_totalworkratelevel(::pulse::cdm::bind::Scalar0To1Data* totalworkratelevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkratelevel_);
  }
  if (totalworkratelevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkratelevel)->GetArena();
    if (message_arena != submessage_arena) {
      totalworkratelevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalworkratelevel, submessage_arena);
    }
    
  } else {
    
  }
  totalworkratelevel_ = totalworkratelevel;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.EnergySystemData.TotalWorkRateLevel)
}

// -------------------------------------------------------------------

// GastrointestinalSystemData

// .pulse.cdm.bind.ScalarVolumePerTimeData WaterAbsorptionRate = 1;
inline bool GastrointestinalSystemData::_internal_has_waterabsorptionrate() const {
  return this != internal_default_instance() && waterabsorptionrate_ != nullptr;
}
inline bool GastrointestinalSystemData::has_waterabsorptionrate() const {
  return _internal_has_waterabsorptionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& GastrointestinalSystemData::_internal_waterabsorptionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = waterabsorptionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& GastrointestinalSystemData::waterabsorptionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GastrointestinalSystemData.WaterAbsorptionRate)
  return _internal_waterabsorptionrate();
}
inline void GastrointestinalSystemData::unsafe_arena_set_allocated_waterabsorptionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* waterabsorptionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterabsorptionrate_);
  }
  waterabsorptionrate_ = waterabsorptionrate;
  if (waterabsorptionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GastrointestinalSystemData.WaterAbsorptionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* GastrointestinalSystemData::release_waterabsorptionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = waterabsorptionrate_;
  waterabsorptionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* GastrointestinalSystemData::unsafe_arena_release_waterabsorptionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GastrointestinalSystemData.WaterAbsorptionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = waterabsorptionrate_;
  waterabsorptionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* GastrointestinalSystemData::_internal_mutable_waterabsorptionrate() {
  
  if (waterabsorptionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    waterabsorptionrate_ = p;
  }
  return waterabsorptionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* GastrointestinalSystemData::mutable_waterabsorptionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GastrointestinalSystemData.WaterAbsorptionRate)
  return _internal_mutable_waterabsorptionrate();
}
inline void GastrointestinalSystemData::set_allocated_waterabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* waterabsorptionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterabsorptionrate_);
  }
  if (waterabsorptionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waterabsorptionrate)->GetArena();
    if (message_arena != submessage_arena) {
      waterabsorptionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waterabsorptionrate, submessage_arena);
    }
    
  } else {
    
  }
  waterabsorptionrate_ = waterabsorptionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GastrointestinalSystemData.WaterAbsorptionRate)
}

// .pulse.cdm.bind.NutritionData StomachContents = 2;
inline bool GastrointestinalSystemData::_internal_has_stomachcontents() const {
  return this != internal_default_instance() && stomachcontents_ != nullptr;
}
inline bool GastrointestinalSystemData::has_stomachcontents() const {
  return _internal_has_stomachcontents();
}
inline const ::pulse::cdm::bind::NutritionData& GastrointestinalSystemData::_internal_stomachcontents() const {
  const ::pulse::cdm::bind::NutritionData* p = stomachcontents_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::NutritionData&>(
      ::pulse::cdm::bind::_NutritionData_default_instance_);
}
inline const ::pulse::cdm::bind::NutritionData& GastrointestinalSystemData::stomachcontents() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.GastrointestinalSystemData.StomachContents)
  return _internal_stomachcontents();
}
inline void GastrointestinalSystemData::unsafe_arena_set_allocated_stomachcontents(
    ::pulse::cdm::bind::NutritionData* stomachcontents) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stomachcontents_);
  }
  stomachcontents_ = stomachcontents;
  if (stomachcontents) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.GastrointestinalSystemData.StomachContents)
}
inline ::pulse::cdm::bind::NutritionData* GastrointestinalSystemData::release_stomachcontents() {
  
  ::pulse::cdm::bind::NutritionData* temp = stomachcontents_;
  stomachcontents_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::NutritionData* GastrointestinalSystemData::unsafe_arena_release_stomachcontents() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.GastrointestinalSystemData.StomachContents)
  
  ::pulse::cdm::bind::NutritionData* temp = stomachcontents_;
  stomachcontents_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::NutritionData* GastrointestinalSystemData::_internal_mutable_stomachcontents() {
  
  if (stomachcontents_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::NutritionData>(GetArena());
    stomachcontents_ = p;
  }
  return stomachcontents_;
}
inline ::pulse::cdm::bind::NutritionData* GastrointestinalSystemData::mutable_stomachcontents() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.GastrointestinalSystemData.StomachContents)
  return _internal_mutable_stomachcontents();
}
inline void GastrointestinalSystemData::set_allocated_stomachcontents(::pulse::cdm::bind::NutritionData* stomachcontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stomachcontents_);
  }
  if (stomachcontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stomachcontents)->GetArena();
    if (message_arena != submessage_arena) {
      stomachcontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stomachcontents, submessage_arena);
    }
    
  } else {
    
  }
  stomachcontents_ = stomachcontents;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.GastrointestinalSystemData.StomachContents)
}

// -------------------------------------------------------------------

// HepaticSystemData

// -------------------------------------------------------------------

// NervousSystemData

// .pulse.cdm.bind.eSwitch ChemoreceptorFeedback = 1;
inline void NervousSystemData::clear_chemoreceptorfeedback() {
  chemoreceptorfeedback_ = 0;
}
inline ::pulse::cdm::bind::eSwitch NervousSystemData::_internal_chemoreceptorfeedback() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(chemoreceptorfeedback_);
}
inline ::pulse::cdm::bind::eSwitch NervousSystemData::chemoreceptorfeedback() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.ChemoreceptorFeedback)
  return _internal_chemoreceptorfeedback();
}
inline void NervousSystemData::_internal_set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  
  chemoreceptorfeedback_ = value;
}
inline void NervousSystemData::set_chemoreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  _internal_set_chemoreceptorfeedback(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.NervousSystemData.ChemoreceptorFeedback)
}

// .pulse.cdm.bind.ScalarData ChemoreceptorHeartRateScale = 2;
inline bool NervousSystemData::_internal_has_chemoreceptorheartratescale() const {
  return this != internal_default_instance() && chemoreceptorheartratescale_ != nullptr;
}
inline bool NervousSystemData::has_chemoreceptorheartratescale() const {
  return _internal_has_chemoreceptorheartratescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_chemoreceptorheartratescale() const {
  const ::pulse::cdm::bind::ScalarData* p = chemoreceptorheartratescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::chemoreceptorheartratescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartRateScale)
  return _internal_chemoreceptorheartratescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_chemoreceptorheartratescale(
    ::pulse::cdm::bind::ScalarData* chemoreceptorheartratescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartratescale_);
  }
  chemoreceptorheartratescale_ = chemoreceptorheartratescale;
  if (chemoreceptorheartratescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartRateScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_chemoreceptorheartratescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = chemoreceptorheartratescale_;
  chemoreceptorheartratescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_chemoreceptorheartratescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartRateScale)
  
  ::pulse::cdm::bind::ScalarData* temp = chemoreceptorheartratescale_;
  chemoreceptorheartratescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_chemoreceptorheartratescale() {
  
  if (chemoreceptorheartratescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    chemoreceptorheartratescale_ = p;
  }
  return chemoreceptorheartratescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_chemoreceptorheartratescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartRateScale)
  return _internal_mutable_chemoreceptorheartratescale();
}
inline void NervousSystemData::set_allocated_chemoreceptorheartratescale(::pulse::cdm::bind::ScalarData* chemoreceptorheartratescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartratescale_);
  }
  if (chemoreceptorheartratescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartratescale)->GetArena();
    if (message_arena != submessage_arena) {
      chemoreceptorheartratescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chemoreceptorheartratescale, submessage_arena);
    }
    
  } else {
    
  }
  chemoreceptorheartratescale_ = chemoreceptorheartratescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartRateScale)
}

// .pulse.cdm.bind.ScalarData ChemoreceptorHeartElastanceScale = 3;
inline bool NervousSystemData::_internal_has_chemoreceptorheartelastancescale() const {
  return this != internal_default_instance() && chemoreceptorheartelastancescale_ != nullptr;
}
inline bool NervousSystemData::has_chemoreceptorheartelastancescale() const {
  return _internal_has_chemoreceptorheartelastancescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_chemoreceptorheartelastancescale() const {
  const ::pulse::cdm::bind::ScalarData* p = chemoreceptorheartelastancescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::chemoreceptorheartelastancescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartElastanceScale)
  return _internal_chemoreceptorheartelastancescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_chemoreceptorheartelastancescale(
    ::pulse::cdm::bind::ScalarData* chemoreceptorheartelastancescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartelastancescale_);
  }
  chemoreceptorheartelastancescale_ = chemoreceptorheartelastancescale;
  if (chemoreceptorheartelastancescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartElastanceScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_chemoreceptorheartelastancescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = chemoreceptorheartelastancescale_;
  chemoreceptorheartelastancescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_chemoreceptorheartelastancescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartElastanceScale)
  
  ::pulse::cdm::bind::ScalarData* temp = chemoreceptorheartelastancescale_;
  chemoreceptorheartelastancescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_chemoreceptorheartelastancescale() {
  
  if (chemoreceptorheartelastancescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    chemoreceptorheartelastancescale_ = p;
  }
  return chemoreceptorheartelastancescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_chemoreceptorheartelastancescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartElastanceScale)
  return _internal_mutable_chemoreceptorheartelastancescale();
}
inline void NervousSystemData::set_allocated_chemoreceptorheartelastancescale(::pulse::cdm::bind::ScalarData* chemoreceptorheartelastancescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartelastancescale_);
  }
  if (chemoreceptorheartelastancescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chemoreceptorheartelastancescale)->GetArena();
    if (message_arena != submessage_arena) {
      chemoreceptorheartelastancescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chemoreceptorheartelastancescale, submessage_arena);
    }
    
  } else {
    
  }
  chemoreceptorheartelastancescale_ = chemoreceptorheartelastancescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.ChemoreceptorHeartElastanceScale)
}

// .pulse.cdm.bind.eSwitch BaroreceptorFeedback = 4;
inline void NervousSystemData::clear_baroreceptorfeedback() {
  baroreceptorfeedback_ = 0;
}
inline ::pulse::cdm::bind::eSwitch NervousSystemData::_internal_baroreceptorfeedback() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(baroreceptorfeedback_);
}
inline ::pulse::cdm::bind::eSwitch NervousSystemData::baroreceptorfeedback() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.BaroreceptorFeedback)
  return _internal_baroreceptorfeedback();
}
inline void NervousSystemData::_internal_set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  
  baroreceptorfeedback_ = value;
}
inline void NervousSystemData::set_baroreceptorfeedback(::pulse::cdm::bind::eSwitch value) {
  _internal_set_baroreceptorfeedback(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.NervousSystemData.BaroreceptorFeedback)
}

// .pulse.cdm.bind.ScalarData BaroreceptorHeartRateScale = 5;
inline bool NervousSystemData::_internal_has_baroreceptorheartratescale() const {
  return this != internal_default_instance() && baroreceptorheartratescale_ != nullptr;
}
inline bool NervousSystemData::has_baroreceptorheartratescale() const {
  return _internal_has_baroreceptorheartratescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_baroreceptorheartratescale() const {
  const ::pulse::cdm::bind::ScalarData* p = baroreceptorheartratescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::baroreceptorheartratescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartRateScale)
  return _internal_baroreceptorheartratescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_baroreceptorheartratescale(
    ::pulse::cdm::bind::ScalarData* baroreceptorheartratescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartratescale_);
  }
  baroreceptorheartratescale_ = baroreceptorheartratescale;
  if (baroreceptorheartratescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartRateScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_baroreceptorheartratescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorheartratescale_;
  baroreceptorheartratescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_baroreceptorheartratescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartRateScale)
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorheartratescale_;
  baroreceptorheartratescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_baroreceptorheartratescale() {
  
  if (baroreceptorheartratescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    baroreceptorheartratescale_ = p;
  }
  return baroreceptorheartratescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_baroreceptorheartratescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartRateScale)
  return _internal_mutable_baroreceptorheartratescale();
}
inline void NervousSystemData::set_allocated_baroreceptorheartratescale(::pulse::cdm::bind::ScalarData* baroreceptorheartratescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartratescale_);
  }
  if (baroreceptorheartratescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartratescale)->GetArena();
    if (message_arena != submessage_arena) {
      baroreceptorheartratescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baroreceptorheartratescale, submessage_arena);
    }
    
  } else {
    
  }
  baroreceptorheartratescale_ = baroreceptorheartratescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartRateScale)
}

// .pulse.cdm.bind.ScalarData BaroreceptorHeartElastanceScale = 6;
inline bool NervousSystemData::_internal_has_baroreceptorheartelastancescale() const {
  return this != internal_default_instance() && baroreceptorheartelastancescale_ != nullptr;
}
inline bool NervousSystemData::has_baroreceptorheartelastancescale() const {
  return _internal_has_baroreceptorheartelastancescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_baroreceptorheartelastancescale() const {
  const ::pulse::cdm::bind::ScalarData* p = baroreceptorheartelastancescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::baroreceptorheartelastancescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartElastanceScale)
  return _internal_baroreceptorheartelastancescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_baroreceptorheartelastancescale(
    ::pulse::cdm::bind::ScalarData* baroreceptorheartelastancescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartelastancescale_);
  }
  baroreceptorheartelastancescale_ = baroreceptorheartelastancescale;
  if (baroreceptorheartelastancescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartElastanceScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_baroreceptorheartelastancescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorheartelastancescale_;
  baroreceptorheartelastancescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_baroreceptorheartelastancescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartElastanceScale)
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorheartelastancescale_;
  baroreceptorheartelastancescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_baroreceptorheartelastancescale() {
  
  if (baroreceptorheartelastancescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    baroreceptorheartelastancescale_ = p;
  }
  return baroreceptorheartelastancescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_baroreceptorheartelastancescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartElastanceScale)
  return _internal_mutable_baroreceptorheartelastancescale();
}
inline void NervousSystemData::set_allocated_baroreceptorheartelastancescale(::pulse::cdm::bind::ScalarData* baroreceptorheartelastancescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartelastancescale_);
  }
  if (baroreceptorheartelastancescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorheartelastancescale)->GetArena();
    if (message_arena != submessage_arena) {
      baroreceptorheartelastancescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baroreceptorheartelastancescale, submessage_arena);
    }
    
  } else {
    
  }
  baroreceptorheartelastancescale_ = baroreceptorheartelastancescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorHeartElastanceScale)
}

// .pulse.cdm.bind.ScalarData BaroreceptorResistanceScale = 7;
inline bool NervousSystemData::_internal_has_baroreceptorresistancescale() const {
  return this != internal_default_instance() && baroreceptorresistancescale_ != nullptr;
}
inline bool NervousSystemData::has_baroreceptorresistancescale() const {
  return _internal_has_baroreceptorresistancescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_baroreceptorresistancescale() const {
  const ::pulse::cdm::bind::ScalarData* p = baroreceptorresistancescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::baroreceptorresistancescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.BaroreceptorResistanceScale)
  return _internal_baroreceptorresistancescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_baroreceptorresistancescale(
    ::pulse::cdm::bind::ScalarData* baroreceptorresistancescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorresistancescale_);
  }
  baroreceptorresistancescale_ = baroreceptorresistancescale;
  if (baroreceptorresistancescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorResistanceScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_baroreceptorresistancescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorresistancescale_;
  baroreceptorresistancescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_baroreceptorresistancescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.BaroreceptorResistanceScale)
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorresistancescale_;
  baroreceptorresistancescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_baroreceptorresistancescale() {
  
  if (baroreceptorresistancescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    baroreceptorresistancescale_ = p;
  }
  return baroreceptorresistancescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_baroreceptorresistancescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.BaroreceptorResistanceScale)
  return _internal_mutable_baroreceptorresistancescale();
}
inline void NervousSystemData::set_allocated_baroreceptorresistancescale(::pulse::cdm::bind::ScalarData* baroreceptorresistancescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorresistancescale_);
  }
  if (baroreceptorresistancescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorresistancescale)->GetArena();
    if (message_arena != submessage_arena) {
      baroreceptorresistancescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baroreceptorresistancescale, submessage_arena);
    }
    
  } else {
    
  }
  baroreceptorresistancescale_ = baroreceptorresistancescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorResistanceScale)
}

// .pulse.cdm.bind.ScalarData BaroreceptorComplianceScale = 8;
inline bool NervousSystemData::_internal_has_baroreceptorcompliancescale() const {
  return this != internal_default_instance() && baroreceptorcompliancescale_ != nullptr;
}
inline bool NervousSystemData::has_baroreceptorcompliancescale() const {
  return _internal_has_baroreceptorcompliancescale();
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::_internal_baroreceptorcompliancescale() const {
  const ::pulse::cdm::bind::ScalarData* p = baroreceptorcompliancescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& NervousSystemData::baroreceptorcompliancescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.BaroreceptorComplianceScale)
  return _internal_baroreceptorcompliancescale();
}
inline void NervousSystemData::unsafe_arena_set_allocated_baroreceptorcompliancescale(
    ::pulse::cdm::bind::ScalarData* baroreceptorcompliancescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorcompliancescale_);
  }
  baroreceptorcompliancescale_ = baroreceptorcompliancescale;
  if (baroreceptorcompliancescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorComplianceScale)
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::release_baroreceptorcompliancescale() {
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorcompliancescale_;
  baroreceptorcompliancescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::unsafe_arena_release_baroreceptorcompliancescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.BaroreceptorComplianceScale)
  
  ::pulse::cdm::bind::ScalarData* temp = baroreceptorcompliancescale_;
  baroreceptorcompliancescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::_internal_mutable_baroreceptorcompliancescale() {
  
  if (baroreceptorcompliancescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    baroreceptorcompliancescale_ = p;
  }
  return baroreceptorcompliancescale_;
}
inline ::pulse::cdm::bind::ScalarData* NervousSystemData::mutable_baroreceptorcompliancescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.BaroreceptorComplianceScale)
  return _internal_mutable_baroreceptorcompliancescale();
}
inline void NervousSystemData::set_allocated_baroreceptorcompliancescale(::pulse::cdm::bind::ScalarData* baroreceptorcompliancescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorcompliancescale_);
  }
  if (baroreceptorcompliancescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baroreceptorcompliancescale)->GetArena();
    if (message_arena != submessage_arena) {
      baroreceptorcompliancescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baroreceptorcompliancescale, submessage_arena);
    }
    
  } else {
    
  }
  baroreceptorcompliancescale_ = baroreceptorcompliancescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.BaroreceptorComplianceScale)
}

// .pulse.cdm.bind.PupillaryResponseData LeftEyePupillaryResponse = 9;
inline bool NervousSystemData::_internal_has_lefteyepupillaryresponse() const {
  return this != internal_default_instance() && lefteyepupillaryresponse_ != nullptr;
}
inline bool NervousSystemData::has_lefteyepupillaryresponse() const {
  return _internal_has_lefteyepupillaryresponse();
}
inline void NervousSystemData::clear_lefteyepupillaryresponse() {
  if (GetArena() == nullptr && lefteyepupillaryresponse_ != nullptr) {
    delete lefteyepupillaryresponse_;
  }
  lefteyepupillaryresponse_ = nullptr;
}
inline const ::pulse::cdm::bind::PupillaryResponseData& NervousSystemData::_internal_lefteyepupillaryresponse() const {
  const ::pulse::cdm::bind::PupillaryResponseData* p = lefteyepupillaryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PupillaryResponseData&>(
      ::pulse::cdm::bind::_PupillaryResponseData_default_instance_);
}
inline const ::pulse::cdm::bind::PupillaryResponseData& NervousSystemData::lefteyepupillaryresponse() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.LeftEyePupillaryResponse)
  return _internal_lefteyepupillaryresponse();
}
inline void NervousSystemData::unsafe_arena_set_allocated_lefteyepupillaryresponse(
    ::pulse::cdm::bind::PupillaryResponseData* lefteyepupillaryresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefteyepupillaryresponse_);
  }
  lefteyepupillaryresponse_ = lefteyepupillaryresponse;
  if (lefteyepupillaryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.LeftEyePupillaryResponse)
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::release_lefteyepupillaryresponse() {
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = lefteyepupillaryresponse_;
  lefteyepupillaryresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::unsafe_arena_release_lefteyepupillaryresponse() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.LeftEyePupillaryResponse)
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = lefteyepupillaryresponse_;
  lefteyepupillaryresponse_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::_internal_mutable_lefteyepupillaryresponse() {
  
  if (lefteyepupillaryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PupillaryResponseData>(GetArena());
    lefteyepupillaryresponse_ = p;
  }
  return lefteyepupillaryresponse_;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::mutable_lefteyepupillaryresponse() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.LeftEyePupillaryResponse)
  return _internal_mutable_lefteyepupillaryresponse();
}
inline void NervousSystemData::set_allocated_lefteyepupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* lefteyepupillaryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lefteyepupillaryresponse_;
  }
  if (lefteyepupillaryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lefteyepupillaryresponse);
    if (message_arena != submessage_arena) {
      lefteyepupillaryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefteyepupillaryresponse, submessage_arena);
    }
    
  } else {
    
  }
  lefteyepupillaryresponse_ = lefteyepupillaryresponse;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.LeftEyePupillaryResponse)
}

// .pulse.cdm.bind.PupillaryResponseData RightEyePupillaryResponse = 10;
inline bool NervousSystemData::_internal_has_righteyepupillaryresponse() const {
  return this != internal_default_instance() && righteyepupillaryresponse_ != nullptr;
}
inline bool NervousSystemData::has_righteyepupillaryresponse() const {
  return _internal_has_righteyepupillaryresponse();
}
inline void NervousSystemData::clear_righteyepupillaryresponse() {
  if (GetArena() == nullptr && righteyepupillaryresponse_ != nullptr) {
    delete righteyepupillaryresponse_;
  }
  righteyepupillaryresponse_ = nullptr;
}
inline const ::pulse::cdm::bind::PupillaryResponseData& NervousSystemData::_internal_righteyepupillaryresponse() const {
  const ::pulse::cdm::bind::PupillaryResponseData* p = righteyepupillaryresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PupillaryResponseData&>(
      ::pulse::cdm::bind::_PupillaryResponseData_default_instance_);
}
inline const ::pulse::cdm::bind::PupillaryResponseData& NervousSystemData::righteyepupillaryresponse() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NervousSystemData.RightEyePupillaryResponse)
  return _internal_righteyepupillaryresponse();
}
inline void NervousSystemData::unsafe_arena_set_allocated_righteyepupillaryresponse(
    ::pulse::cdm::bind::PupillaryResponseData* righteyepupillaryresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righteyepupillaryresponse_);
  }
  righteyepupillaryresponse_ = righteyepupillaryresponse;
  if (righteyepupillaryresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NervousSystemData.RightEyePupillaryResponse)
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::release_righteyepupillaryresponse() {
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = righteyepupillaryresponse_;
  righteyepupillaryresponse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::unsafe_arena_release_righteyepupillaryresponse() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NervousSystemData.RightEyePupillaryResponse)
  
  ::pulse::cdm::bind::PupillaryResponseData* temp = righteyepupillaryresponse_;
  righteyepupillaryresponse_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::_internal_mutable_righteyepupillaryresponse() {
  
  if (righteyepupillaryresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PupillaryResponseData>(GetArena());
    righteyepupillaryresponse_ = p;
  }
  return righteyepupillaryresponse_;
}
inline ::pulse::cdm::bind::PupillaryResponseData* NervousSystemData::mutable_righteyepupillaryresponse() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NervousSystemData.RightEyePupillaryResponse)
  return _internal_mutable_righteyepupillaryresponse();
}
inline void NervousSystemData::set_allocated_righteyepupillaryresponse(::pulse::cdm::bind::PupillaryResponseData* righteyepupillaryresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete righteyepupillaryresponse_;
  }
  if (righteyepupillaryresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(righteyepupillaryresponse);
    if (message_arena != submessage_arena) {
      righteyepupillaryresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righteyepupillaryresponse, submessage_arena);
    }
    
  } else {
    
  }
  righteyepupillaryresponse_ = righteyepupillaryresponse;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NervousSystemData.RightEyePupillaryResponse)
}

// -------------------------------------------------------------------

// RenalSystemData

// .pulse.cdm.bind.Scalar0To1Data FiltrationFraction = 1;
inline bool RenalSystemData::_internal_has_filtrationfraction() const {
  return this != internal_default_instance() && filtrationfraction_ != nullptr;
}
inline bool RenalSystemData::has_filtrationfraction() const {
  return _internal_has_filtrationfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::_internal_filtrationfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = filtrationfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::filtrationfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.FiltrationFraction)
  return _internal_filtrationfraction();
}
inline void RenalSystemData::unsafe_arena_set_allocated_filtrationfraction(
    ::pulse::cdm::bind::Scalar0To1Data* filtrationfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationfraction_);
  }
  filtrationfraction_ = filtrationfraction;
  if (filtrationfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.FiltrationFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::release_filtrationfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = filtrationfraction_;
  filtrationfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::unsafe_arena_release_filtrationfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.FiltrationFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = filtrationfraction_;
  filtrationfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::_internal_mutable_filtrationfraction() {
  
  if (filtrationfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    filtrationfraction_ = p;
  }
  return filtrationfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::mutable_filtrationfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.FiltrationFraction)
  return _internal_mutable_filtrationfraction();
}
inline void RenalSystemData::set_allocated_filtrationfraction(::pulse::cdm::bind::Scalar0To1Data* filtrationfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationfraction_);
  }
  if (filtrationfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filtrationfraction)->GetArena();
    if (message_arena != submessage_arena) {
      filtrationfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filtrationfraction, submessage_arena);
    }
    
  } else {
    
  }
  filtrationfraction_ = filtrationfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.FiltrationFraction)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData GlomerularFiltrationRate = 2;
inline bool RenalSystemData::_internal_has_glomerularfiltrationrate() const {
  return this != internal_default_instance() && glomerularfiltrationrate_ != nullptr;
}
inline bool RenalSystemData::has_glomerularfiltrationrate() const {
  return _internal_has_glomerularfiltrationrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_glomerularfiltrationrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = glomerularfiltrationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::glomerularfiltrationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.GlomerularFiltrationRate)
  return _internal_glomerularfiltrationrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_glomerularfiltrationrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* glomerularfiltrationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfiltrationrate_);
  }
  glomerularfiltrationrate_ = glomerularfiltrationrate;
  if (glomerularfiltrationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.GlomerularFiltrationRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_glomerularfiltrationrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = glomerularfiltrationrate_;
  glomerularfiltrationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_glomerularfiltrationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.GlomerularFiltrationRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = glomerularfiltrationrate_;
  glomerularfiltrationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_glomerularfiltrationrate() {
  
  if (glomerularfiltrationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    glomerularfiltrationrate_ = p;
  }
  return glomerularfiltrationrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_glomerularfiltrationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.GlomerularFiltrationRate)
  return _internal_mutable_glomerularfiltrationrate();
}
inline void RenalSystemData::set_allocated_glomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* glomerularfiltrationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfiltrationrate_);
  }
  if (glomerularfiltrationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(glomerularfiltrationrate)->GetArena();
    if (message_arena != submessage_arena) {
      glomerularfiltrationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glomerularfiltrationrate, submessage_arena);
    }
    
  } else {
    
  }
  glomerularfiltrationrate_ = glomerularfiltrationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.GlomerularFiltrationRate)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftAfferentArterioleResistance = 3;
inline bool RenalSystemData::_internal_has_leftafferentarterioleresistance() const {
  return this != internal_default_instance() && leftafferentarterioleresistance_ != nullptr;
}
inline bool RenalSystemData::has_leftafferentarterioleresistance() const {
  return _internal_has_leftafferentarterioleresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::_internal_leftafferentarterioleresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = leftafferentarterioleresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::leftafferentarterioleresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftAfferentArterioleResistance)
  return _internal_leftafferentarterioleresistance();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftafferentarterioleresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftafferentarterioleresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftafferentarterioleresistance_);
  }
  leftafferentarterioleresistance_ = leftafferentarterioleresistance;
  if (leftafferentarterioleresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftAfferentArterioleResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::release_leftafferentarterioleresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = leftafferentarterioleresistance_;
  leftafferentarterioleresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::unsafe_arena_release_leftafferentarterioleresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftAfferentArterioleResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = leftafferentarterioleresistance_;
  leftafferentarterioleresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::_internal_mutable_leftafferentarterioleresistance() {
  
  if (leftafferentarterioleresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    leftafferentarterioleresistance_ = p;
  }
  return leftafferentarterioleresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::mutable_leftafferentarterioleresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftAfferentArterioleResistance)
  return _internal_mutable_leftafferentarterioleresistance();
}
inline void RenalSystemData::set_allocated_leftafferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftafferentarterioleresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftafferentarterioleresistance_);
  }
  if (leftafferentarterioleresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftafferentarterioleresistance)->GetArena();
    if (message_arena != submessage_arena) {
      leftafferentarterioleresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftafferentarterioleresistance, submessage_arena);
    }
    
  } else {
    
  }
  leftafferentarterioleresistance_ = leftafferentarterioleresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftAfferentArterioleResistance)
}

// .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesHydrostaticPressure = 4;
inline bool RenalSystemData::_internal_has_leftbowmanscapsuleshydrostaticpressure() const {
  return this != internal_default_instance() && leftbowmanscapsuleshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftbowmanscapsuleshydrostaticpressure() const {
  return _internal_has_leftbowmanscapsuleshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftbowmanscapsuleshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftbowmanscapsuleshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftbowmanscapsuleshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesHydrostaticPressure)
  return _internal_leftbowmanscapsuleshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftbowmanscapsuleshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsuleshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsuleshydrostaticpressure_);
  }
  leftbowmanscapsuleshydrostaticpressure_ = leftbowmanscapsuleshydrostaticpressure;
  if (leftbowmanscapsuleshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftbowmanscapsuleshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftbowmanscapsuleshydrostaticpressure_;
  leftbowmanscapsuleshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftbowmanscapsuleshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftbowmanscapsuleshydrostaticpressure_;
  leftbowmanscapsuleshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftbowmanscapsuleshydrostaticpressure() {
  
  if (leftbowmanscapsuleshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftbowmanscapsuleshydrostaticpressure_ = p;
  }
  return leftbowmanscapsuleshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftbowmanscapsuleshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesHydrostaticPressure)
  return _internal_mutable_leftbowmanscapsuleshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_leftbowmanscapsuleshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsuleshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsuleshydrostaticpressure_);
  }
  if (leftbowmanscapsuleshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsuleshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftbowmanscapsuleshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftbowmanscapsuleshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftbowmanscapsuleshydrostaticpressure_ = leftbowmanscapsuleshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftBowmansCapsulesOsmoticPressure = 5;
inline bool RenalSystemData::_internal_has_leftbowmanscapsulesosmoticpressure() const {
  return this != internal_default_instance() && leftbowmanscapsulesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftbowmanscapsulesosmoticpressure() const {
  return _internal_has_leftbowmanscapsulesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftbowmanscapsulesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftbowmanscapsulesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftbowmanscapsulesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesOsmoticPressure)
  return _internal_leftbowmanscapsulesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftbowmanscapsulesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsulesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsulesosmoticpressure_);
  }
  leftbowmanscapsulesosmoticpressure_ = leftbowmanscapsulesosmoticpressure;
  if (leftbowmanscapsulesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftbowmanscapsulesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftbowmanscapsulesosmoticpressure_;
  leftbowmanscapsulesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftbowmanscapsulesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftbowmanscapsulesosmoticpressure_;
  leftbowmanscapsulesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftbowmanscapsulesosmoticpressure() {
  
  if (leftbowmanscapsulesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftbowmanscapsulesosmoticpressure_ = p;
  }
  return leftbowmanscapsulesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftbowmanscapsulesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesOsmoticPressure)
  return _internal_mutable_leftbowmanscapsulesosmoticpressure();
}
inline void RenalSystemData::set_allocated_leftbowmanscapsulesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftbowmanscapsulesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsulesosmoticpressure_);
  }
  if (leftbowmanscapsulesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftbowmanscapsulesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftbowmanscapsulesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftbowmanscapsulesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftbowmanscapsulesosmoticpressure_ = leftbowmanscapsulesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftBowmansCapsulesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData LeftEfferentArterioleResistance = 6;
inline bool RenalSystemData::_internal_has_leftefferentarterioleresistance() const {
  return this != internal_default_instance() && leftefferentarterioleresistance_ != nullptr;
}
inline bool RenalSystemData::has_leftefferentarterioleresistance() const {
  return _internal_has_leftefferentarterioleresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::_internal_leftefferentarterioleresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = leftefferentarterioleresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::leftefferentarterioleresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftEfferentArterioleResistance)
  return _internal_leftefferentarterioleresistance();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftefferentarterioleresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftefferentarterioleresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftefferentarterioleresistance_);
  }
  leftefferentarterioleresistance_ = leftefferentarterioleresistance;
  if (leftefferentarterioleresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftEfferentArterioleResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::release_leftefferentarterioleresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = leftefferentarterioleresistance_;
  leftefferentarterioleresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::unsafe_arena_release_leftefferentarterioleresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftEfferentArterioleResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = leftefferentarterioleresistance_;
  leftefferentarterioleresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::_internal_mutable_leftefferentarterioleresistance() {
  
  if (leftefferentarterioleresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    leftefferentarterioleresistance_ = p;
  }
  return leftefferentarterioleresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::mutable_leftefferentarterioleresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftEfferentArterioleResistance)
  return _internal_mutable_leftefferentarterioleresistance();
}
inline void RenalSystemData::set_allocated_leftefferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* leftefferentarterioleresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftefferentarterioleresistance_);
  }
  if (leftefferentarterioleresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftefferentarterioleresistance)->GetArena();
    if (message_arena != submessage_arena) {
      leftefferentarterioleresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftefferentarterioleresistance, submessage_arena);
    }
    
  } else {
    
  }
  leftefferentarterioleresistance_ = leftefferentarterioleresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftEfferentArterioleResistance)
}

// .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesHydrostaticPressure = 7;
inline bool RenalSystemData::_internal_has_leftglomerularcapillarieshydrostaticpressure() const {
  return this != internal_default_instance() && leftglomerularcapillarieshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularcapillarieshydrostaticpressure() const {
  return _internal_has_leftglomerularcapillarieshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftglomerularcapillarieshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftglomerularcapillarieshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftglomerularcapillarieshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesHydrostaticPressure)
  return _internal_leftglomerularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularcapillarieshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillarieshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillarieshydrostaticpressure_);
  }
  leftglomerularcapillarieshydrostaticpressure_ = leftglomerularcapillarieshydrostaticpressure;
  if (leftglomerularcapillarieshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftglomerularcapillarieshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftglomerularcapillarieshydrostaticpressure_;
  leftglomerularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftglomerularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftglomerularcapillarieshydrostaticpressure_;
  leftglomerularcapillarieshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftglomerularcapillarieshydrostaticpressure() {
  
  if (leftglomerularcapillarieshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftglomerularcapillarieshydrostaticpressure_ = p;
  }
  return leftglomerularcapillarieshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftglomerularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesHydrostaticPressure)
  return _internal_mutable_leftglomerularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_leftglomerularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillarieshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillarieshydrostaticpressure_);
  }
  if (leftglomerularcapillarieshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillarieshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularcapillarieshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularcapillarieshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularcapillarieshydrostaticpressure_ = leftglomerularcapillarieshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftGlomerularCapillariesOsmoticPressure = 8;
inline bool RenalSystemData::_internal_has_leftglomerularcapillariesosmoticpressure() const {
  return this != internal_default_instance() && leftglomerularcapillariesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularcapillariesosmoticpressure() const {
  return _internal_has_leftglomerularcapillariesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftglomerularcapillariesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftglomerularcapillariesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftglomerularcapillariesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesOsmoticPressure)
  return _internal_leftglomerularcapillariesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularcapillariesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillariesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillariesosmoticpressure_);
  }
  leftglomerularcapillariesosmoticpressure_ = leftglomerularcapillariesosmoticpressure;
  if (leftglomerularcapillariesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftglomerularcapillariesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftglomerularcapillariesosmoticpressure_;
  leftglomerularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftglomerularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftglomerularcapillariesosmoticpressure_;
  leftglomerularcapillariesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftglomerularcapillariesosmoticpressure() {
  
  if (leftglomerularcapillariesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftglomerularcapillariesosmoticpressure_ = p;
  }
  return leftglomerularcapillariesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftglomerularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesOsmoticPressure)
  return _internal_mutable_leftglomerularcapillariesosmoticpressure();
}
inline void RenalSystemData::set_allocated_leftglomerularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftglomerularcapillariesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillariesosmoticpressure_);
  }
  if (leftglomerularcapillariesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularcapillariesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularcapillariesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularcapillariesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularcapillariesosmoticpressure_ = leftglomerularcapillariesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularCapillariesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftGlomerularFiltrationCoefficient = 9;
inline bool RenalSystemData::_internal_has_leftglomerularfiltrationcoefficient() const {
  return this != internal_default_instance() && leftglomerularfiltrationcoefficient_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularfiltrationcoefficient() const {
  return _internal_has_leftglomerularfiltrationcoefficient();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::_internal_leftglomerularfiltrationcoefficient() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData* p = leftglomerularfiltrationcoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::leftglomerularfiltrationcoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationCoefficient)
  return _internal_leftglomerularfiltrationcoefficient();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularfiltrationcoefficient(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftglomerularfiltrationcoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationcoefficient_);
  }
  leftglomerularfiltrationcoefficient_ = leftglomerularfiltrationcoefficient;
  if (leftglomerularfiltrationcoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationCoefficient)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::release_leftglomerularfiltrationcoefficient() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = leftglomerularfiltrationcoefficient_;
  leftglomerularfiltrationcoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::unsafe_arena_release_leftglomerularfiltrationcoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationCoefficient)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = leftglomerularfiltrationcoefficient_;
  leftglomerularfiltrationcoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::_internal_mutable_leftglomerularfiltrationcoefficient() {
  
  if (leftglomerularfiltrationcoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(GetArena());
    leftglomerularfiltrationcoefficient_ = p;
  }
  return leftglomerularfiltrationcoefficient_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::mutable_leftglomerularfiltrationcoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationCoefficient)
  return _internal_mutable_leftglomerularfiltrationcoefficient();
}
inline void RenalSystemData::set_allocated_leftglomerularfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftglomerularfiltrationcoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationcoefficient_);
  }
  if (leftglomerularfiltrationcoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationcoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfiltrationcoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfiltrationcoefficient, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfiltrationcoefficient_ = leftglomerularfiltrationcoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationCoefficient)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData LeftGlomerularFiltrationRate = 10;
inline bool RenalSystemData::_internal_has_leftglomerularfiltrationrate() const {
  return this != internal_default_instance() && leftglomerularfiltrationrate_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularfiltrationrate() const {
  return _internal_has_leftglomerularfiltrationrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_leftglomerularfiltrationrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = leftglomerularfiltrationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::leftglomerularfiltrationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationRate)
  return _internal_leftglomerularfiltrationrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularfiltrationrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* leftglomerularfiltrationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationrate_);
  }
  leftglomerularfiltrationrate_ = leftglomerularfiltrationrate;
  if (leftglomerularfiltrationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_leftglomerularfiltrationrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = leftglomerularfiltrationrate_;
  leftglomerularfiltrationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_leftglomerularfiltrationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = leftglomerularfiltrationrate_;
  leftglomerularfiltrationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_leftglomerularfiltrationrate() {
  
  if (leftglomerularfiltrationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    leftglomerularfiltrationrate_ = p;
  }
  return leftglomerularfiltrationrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_leftglomerularfiltrationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationRate)
  return _internal_mutable_leftglomerularfiltrationrate();
}
inline void RenalSystemData::set_allocated_leftglomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* leftglomerularfiltrationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationrate_);
  }
  if (leftglomerularfiltrationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationrate)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfiltrationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfiltrationrate, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfiltrationrate_ = leftglomerularfiltrationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationRate)
}

// .pulse.cdm.bind.ScalarAreaData LeftGlomerularFiltrationSurfaceArea = 11;
inline bool RenalSystemData::_internal_has_leftglomerularfiltrationsurfacearea() const {
  return this != internal_default_instance() && leftglomerularfiltrationsurfacearea_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularfiltrationsurfacearea() const {
  return _internal_has_leftglomerularfiltrationsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::_internal_leftglomerularfiltrationsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = leftglomerularfiltrationsurfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::leftglomerularfiltrationsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationSurfaceArea)
  return _internal_leftglomerularfiltrationsurfacearea();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularfiltrationsurfacearea(
    ::pulse::cdm::bind::ScalarAreaData* leftglomerularfiltrationsurfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationsurfacearea_);
  }
  leftglomerularfiltrationsurfacearea_ = leftglomerularfiltrationsurfacearea;
  if (leftglomerularfiltrationsurfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationSurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::release_leftglomerularfiltrationsurfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = leftglomerularfiltrationsurfacearea_;
  leftglomerularfiltrationsurfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::unsafe_arena_release_leftglomerularfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = leftglomerularfiltrationsurfacearea_;
  leftglomerularfiltrationsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::_internal_mutable_leftglomerularfiltrationsurfacearea() {
  
  if (leftglomerularfiltrationsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    leftglomerularfiltrationsurfacearea_ = p;
  }
  return leftglomerularfiltrationsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::mutable_leftglomerularfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationSurfaceArea)
  return _internal_mutable_leftglomerularfiltrationsurfacearea();
}
inline void RenalSystemData::set_allocated_leftglomerularfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* leftglomerularfiltrationsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationsurfacearea_);
  }
  if (leftglomerularfiltrationsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfiltrationsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfiltrationsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfiltrationsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfiltrationsurfacearea_ = leftglomerularfiltrationsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFiltrationSurfaceArea)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftGlomerularFluidPermeability = 12;
inline bool RenalSystemData::_internal_has_leftglomerularfluidpermeability() const {
  return this != internal_default_instance() && leftglomerularfluidpermeability_ != nullptr;
}
inline bool RenalSystemData::has_leftglomerularfluidpermeability() const {
  return _internal_has_leftglomerularfluidpermeability();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::_internal_leftglomerularfluidpermeability() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = leftglomerularfluidpermeability_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::leftglomerularfluidpermeability() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftGlomerularFluidPermeability)
  return _internal_leftglomerularfluidpermeability();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftglomerularfluidpermeability(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeability_);
  }
  leftglomerularfluidpermeability_ = leftglomerularfluidpermeability;
  if (leftglomerularfluidpermeability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFluidPermeability)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::release_leftglomerularfluidpermeability() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = leftglomerularfluidpermeability_;
  leftglomerularfluidpermeability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::unsafe_arena_release_leftglomerularfluidpermeability() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftGlomerularFluidPermeability)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = leftglomerularfluidpermeability_;
  leftglomerularfluidpermeability_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::_internal_mutable_leftglomerularfluidpermeability() {
  
  if (leftglomerularfluidpermeability_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    leftglomerularfluidpermeability_ = p;
  }
  return leftglomerularfluidpermeability_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::mutable_leftglomerularfluidpermeability() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftGlomerularFluidPermeability)
  return _internal_mutable_leftglomerularfluidpermeability();
}
inline void RenalSystemData::set_allocated_leftglomerularfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* leftglomerularfluidpermeability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeability_);
  }
  if (leftglomerularfluidpermeability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftglomerularfluidpermeability)->GetArena();
    if (message_arena != submessage_arena) {
      leftglomerularfluidpermeability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftglomerularfluidpermeability, submessage_arena);
    }
    
  } else {
    
  }
  leftglomerularfluidpermeability_ = leftglomerularfluidpermeability;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftGlomerularFluidPermeability)
}

// .pulse.cdm.bind.Scalar0To1Data LeftFiltrationFraction = 13;
inline bool RenalSystemData::_internal_has_leftfiltrationfraction() const {
  return this != internal_default_instance() && leftfiltrationfraction_ != nullptr;
}
inline bool RenalSystemData::has_leftfiltrationfraction() const {
  return _internal_has_leftfiltrationfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::_internal_leftfiltrationfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftfiltrationfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::leftfiltrationfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftFiltrationFraction)
  return _internal_leftfiltrationfraction();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftfiltrationfraction(
    ::pulse::cdm::bind::Scalar0To1Data* leftfiltrationfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftfiltrationfraction_);
  }
  leftfiltrationfraction_ = leftfiltrationfraction;
  if (leftfiltrationfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftFiltrationFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::release_leftfiltrationfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftfiltrationfraction_;
  leftfiltrationfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::unsafe_arena_release_leftfiltrationfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftFiltrationFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftfiltrationfraction_;
  leftfiltrationfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::_internal_mutable_leftfiltrationfraction() {
  
  if (leftfiltrationfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    leftfiltrationfraction_ = p;
  }
  return leftfiltrationfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::mutable_leftfiltrationfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftFiltrationFraction)
  return _internal_mutable_leftfiltrationfraction();
}
inline void RenalSystemData::set_allocated_leftfiltrationfraction(::pulse::cdm::bind::Scalar0To1Data* leftfiltrationfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftfiltrationfraction_);
  }
  if (leftfiltrationfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftfiltrationfraction)->GetArena();
    if (message_arena != submessage_arena) {
      leftfiltrationfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftfiltrationfraction, submessage_arena);
    }
    
  } else {
    
  }
  leftfiltrationfraction_ = leftfiltrationfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftFiltrationFraction)
}

// .pulse.cdm.bind.ScalarPressureData LeftNetFiltrationPressure = 14;
inline bool RenalSystemData::_internal_has_leftnetfiltrationpressure() const {
  return this != internal_default_instance() && leftnetfiltrationpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftnetfiltrationpressure() const {
  return _internal_has_leftnetfiltrationpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftnetfiltrationpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftnetfiltrationpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftnetfiltrationpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftNetFiltrationPressure)
  return _internal_leftnetfiltrationpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftnetfiltrationpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftnetfiltrationpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetfiltrationpressure_);
  }
  leftnetfiltrationpressure_ = leftnetfiltrationpressure;
  if (leftnetfiltrationpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftNetFiltrationPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftnetfiltrationpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftnetfiltrationpressure_;
  leftnetfiltrationpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftnetfiltrationpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftNetFiltrationPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftnetfiltrationpressure_;
  leftnetfiltrationpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftnetfiltrationpressure() {
  
  if (leftnetfiltrationpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftnetfiltrationpressure_ = p;
  }
  return leftnetfiltrationpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftnetfiltrationpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftNetFiltrationPressure)
  return _internal_mutable_leftnetfiltrationpressure();
}
inline void RenalSystemData::set_allocated_leftnetfiltrationpressure(::pulse::cdm::bind::ScalarPressureData* leftnetfiltrationpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetfiltrationpressure_);
  }
  if (leftnetfiltrationpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetfiltrationpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftnetfiltrationpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftnetfiltrationpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftnetfiltrationpressure_ = leftnetfiltrationpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftNetFiltrationPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftNetReabsorptionPressure = 15;
inline bool RenalSystemData::_internal_has_leftnetreabsorptionpressure() const {
  return this != internal_default_instance() && leftnetreabsorptionpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftnetreabsorptionpressure() const {
  return _internal_has_leftnetreabsorptionpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftnetreabsorptionpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftnetreabsorptionpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftnetreabsorptionpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftNetReabsorptionPressure)
  return _internal_leftnetreabsorptionpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftnetreabsorptionpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftnetreabsorptionpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetreabsorptionpressure_);
  }
  leftnetreabsorptionpressure_ = leftnetreabsorptionpressure;
  if (leftnetreabsorptionpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftNetReabsorptionPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftnetreabsorptionpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftnetreabsorptionpressure_;
  leftnetreabsorptionpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftnetreabsorptionpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftNetReabsorptionPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftnetreabsorptionpressure_;
  leftnetreabsorptionpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftnetreabsorptionpressure() {
  
  if (leftnetreabsorptionpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftnetreabsorptionpressure_ = p;
  }
  return leftnetreabsorptionpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftnetreabsorptionpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftNetReabsorptionPressure)
  return _internal_mutable_leftnetreabsorptionpressure();
}
inline void RenalSystemData::set_allocated_leftnetreabsorptionpressure(::pulse::cdm::bind::ScalarPressureData* leftnetreabsorptionpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetreabsorptionpressure_);
  }
  if (leftnetreabsorptionpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftnetreabsorptionpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftnetreabsorptionpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftnetreabsorptionpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftnetreabsorptionpressure_ = leftnetreabsorptionpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftNetReabsorptionPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesHydrostaticPressure = 16;
inline bool RenalSystemData::_internal_has_leftperitubularcapillarieshydrostaticpressure() const {
  return this != internal_default_instance() && leftperitubularcapillarieshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftperitubularcapillarieshydrostaticpressure() const {
  return _internal_has_leftperitubularcapillarieshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftperitubularcapillarieshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftperitubularcapillarieshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftperitubularcapillarieshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesHydrostaticPressure)
  return _internal_leftperitubularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftperitubularcapillarieshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillarieshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillarieshydrostaticpressure_);
  }
  leftperitubularcapillarieshydrostaticpressure_ = leftperitubularcapillarieshydrostaticpressure;
  if (leftperitubularcapillarieshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftperitubularcapillarieshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftperitubularcapillarieshydrostaticpressure_;
  leftperitubularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftperitubularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftperitubularcapillarieshydrostaticpressure_;
  leftperitubularcapillarieshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftperitubularcapillarieshydrostaticpressure() {
  
  if (leftperitubularcapillarieshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftperitubularcapillarieshydrostaticpressure_ = p;
  }
  return leftperitubularcapillarieshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftperitubularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesHydrostaticPressure)
  return _internal_mutable_leftperitubularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_leftperitubularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillarieshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillarieshydrostaticpressure_);
  }
  if (leftperitubularcapillarieshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillarieshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftperitubularcapillarieshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftperitubularcapillarieshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftperitubularcapillarieshydrostaticpressure_ = leftperitubularcapillarieshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftPeritubularCapillariesOsmoticPressure = 17;
inline bool RenalSystemData::_internal_has_leftperitubularcapillariesosmoticpressure() const {
  return this != internal_default_instance() && leftperitubularcapillariesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_leftperitubularcapillariesosmoticpressure() const {
  return _internal_has_leftperitubularcapillariesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_leftperitubularcapillariesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = leftperitubularcapillariesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::leftperitubularcapillariesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesOsmoticPressure)
  return _internal_leftperitubularcapillariesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftperitubularcapillariesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillariesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillariesosmoticpressure_);
  }
  leftperitubularcapillariesosmoticpressure_ = leftperitubularcapillariesosmoticpressure;
  if (leftperitubularcapillariesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_leftperitubularcapillariesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftperitubularcapillariesosmoticpressure_;
  leftperitubularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_leftperitubularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = leftperitubularcapillariesosmoticpressure_;
  leftperitubularcapillariesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_leftperitubularcapillariesosmoticpressure() {
  
  if (leftperitubularcapillariesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    leftperitubularcapillariesosmoticpressure_ = p;
  }
  return leftperitubularcapillariesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_leftperitubularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesOsmoticPressure)
  return _internal_mutable_leftperitubularcapillariesosmoticpressure();
}
inline void RenalSystemData::set_allocated_leftperitubularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* leftperitubularcapillariesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillariesosmoticpressure_);
  }
  if (leftperitubularcapillariesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftperitubularcapillariesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      leftperitubularcapillariesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftperitubularcapillariesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  leftperitubularcapillariesosmoticpressure_ = leftperitubularcapillariesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftPeritubularCapillariesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureData LeftReabsorptionFiltrationCoefficient = 18;
inline bool RenalSystemData::_internal_has_leftreabsorptionfiltrationcoefficient() const {
  return this != internal_default_instance() && leftreabsorptionfiltrationcoefficient_ != nullptr;
}
inline bool RenalSystemData::has_leftreabsorptionfiltrationcoefficient() const {
  return _internal_has_leftreabsorptionfiltrationcoefficient();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::_internal_leftreabsorptionfiltrationcoefficient() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData* p = leftreabsorptionfiltrationcoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::leftreabsorptionfiltrationcoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftReabsorptionFiltrationCoefficient)
  return _internal_leftreabsorptionfiltrationcoefficient();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftreabsorptionfiltrationcoefficient(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftreabsorptionfiltrationcoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionfiltrationcoefficient_);
  }
  leftreabsorptionfiltrationcoefficient_ = leftreabsorptionfiltrationcoefficient;
  if (leftreabsorptionfiltrationcoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftReabsorptionFiltrationCoefficient)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::release_leftreabsorptionfiltrationcoefficient() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = leftreabsorptionfiltrationcoefficient_;
  leftreabsorptionfiltrationcoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::unsafe_arena_release_leftreabsorptionfiltrationcoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftReabsorptionFiltrationCoefficient)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = leftreabsorptionfiltrationcoefficient_;
  leftreabsorptionfiltrationcoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::_internal_mutable_leftreabsorptionfiltrationcoefficient() {
  
  if (leftreabsorptionfiltrationcoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(GetArena());
    leftreabsorptionfiltrationcoefficient_ = p;
  }
  return leftreabsorptionfiltrationcoefficient_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::mutable_leftreabsorptionfiltrationcoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftReabsorptionFiltrationCoefficient)
  return _internal_mutable_leftreabsorptionfiltrationcoefficient();
}
inline void RenalSystemData::set_allocated_leftreabsorptionfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* leftreabsorptionfiltrationcoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionfiltrationcoefficient_);
  }
  if (leftreabsorptionfiltrationcoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionfiltrationcoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      leftreabsorptionfiltrationcoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftreabsorptionfiltrationcoefficient, submessage_arena);
    }
    
  } else {
    
  }
  leftreabsorptionfiltrationcoefficient_ = leftreabsorptionfiltrationcoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftReabsorptionFiltrationCoefficient)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData LeftReabsorptionRate = 19;
inline bool RenalSystemData::_internal_has_leftreabsorptionrate() const {
  return this != internal_default_instance() && leftreabsorptionrate_ != nullptr;
}
inline bool RenalSystemData::has_leftreabsorptionrate() const {
  return _internal_has_leftreabsorptionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_leftreabsorptionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = leftreabsorptionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::leftreabsorptionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftReabsorptionRate)
  return _internal_leftreabsorptionrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_leftreabsorptionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* leftreabsorptionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionrate_);
  }
  leftreabsorptionrate_ = leftreabsorptionrate;
  if (leftreabsorptionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftReabsorptionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_leftreabsorptionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = leftreabsorptionrate_;
  leftreabsorptionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_leftreabsorptionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftReabsorptionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = leftreabsorptionrate_;
  leftreabsorptionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_leftreabsorptionrate() {
  
  if (leftreabsorptionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    leftreabsorptionrate_ = p;
  }
  return leftreabsorptionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_leftreabsorptionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftReabsorptionRate)
  return _internal_mutable_leftreabsorptionrate();
}
inline void RenalSystemData::set_allocated_leftreabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* leftreabsorptionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionrate_);
  }
  if (leftreabsorptionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftreabsorptionrate)->GetArena();
    if (message_arena != submessage_arena) {
      leftreabsorptionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftreabsorptionrate, submessage_arena);
    }
    
  } else {
    
  }
  leftreabsorptionrate_ = leftreabsorptionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftReabsorptionRate)
}

// .pulse.cdm.bind.ScalarPressureData LeftTubularOsmoticPressure = 20;
inline bool RenalSystemData::_internal_has_lefttubularosmoticpressure() const {
  return this != internal_default_instance() && lefttubularosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_lefttubularosmoticpressure() const {
  return _internal_has_lefttubularosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_lefttubularosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = lefttubularosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::lefttubularosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftTubularOsmoticPressure)
  return _internal_lefttubularosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_lefttubularosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* lefttubularosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularosmoticpressure_);
  }
  lefttubularosmoticpressure_ = lefttubularosmoticpressure;
  if (lefttubularosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_lefttubularosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = lefttubularosmoticpressure_;
  lefttubularosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_lefttubularosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftTubularOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = lefttubularosmoticpressure_;
  lefttubularosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_lefttubularosmoticpressure() {
  
  if (lefttubularosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    lefttubularosmoticpressure_ = p;
  }
  return lefttubularosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_lefttubularosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftTubularOsmoticPressure)
  return _internal_mutable_lefttubularosmoticpressure();
}
inline void RenalSystemData::set_allocated_lefttubularosmoticpressure(::pulse::cdm::bind::ScalarPressureData* lefttubularosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularosmoticpressure_);
  }
  if (lefttubularosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularosmoticpressure_ = lefttubularosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularOsmoticPressure)
}

// .pulse.cdm.bind.ScalarPressureData LeftTubularHydrostaticPressure = 21;
inline bool RenalSystemData::_internal_has_lefttubularhydrostaticpressure() const {
  return this != internal_default_instance() && lefttubularhydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_lefttubularhydrostaticpressure() const {
  return _internal_has_lefttubularhydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_lefttubularhydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = lefttubularhydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::lefttubularhydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftTubularHydrostaticPressure)
  return _internal_lefttubularhydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_lefttubularhydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* lefttubularhydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularhydrostaticpressure_);
  }
  lefttubularhydrostaticpressure_ = lefttubularhydrostaticpressure;
  if (lefttubularhydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_lefttubularhydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = lefttubularhydrostaticpressure_;
  lefttubularhydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_lefttubularhydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftTubularHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = lefttubularhydrostaticpressure_;
  lefttubularhydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_lefttubularhydrostaticpressure() {
  
  if (lefttubularhydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    lefttubularhydrostaticpressure_ = p;
  }
  return lefttubularhydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_lefttubularhydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftTubularHydrostaticPressure)
  return _internal_mutable_lefttubularhydrostaticpressure();
}
inline void RenalSystemData::set_allocated_lefttubularhydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* lefttubularhydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularhydrostaticpressure_);
  }
  if (lefttubularhydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularhydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularhydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularhydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularhydrostaticpressure_ = lefttubularhydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarAreaData LeftTubularReabsorptionFiltrationSurfaceArea = 22;
inline bool RenalSystemData::_internal_has_lefttubularreabsorptionfiltrationsurfacearea() const {
  return this != internal_default_instance() && lefttubularreabsorptionfiltrationsurfacearea_ != nullptr;
}
inline bool RenalSystemData::has_lefttubularreabsorptionfiltrationsurfacearea() const {
  return _internal_has_lefttubularreabsorptionfiltrationsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::_internal_lefttubularreabsorptionfiltrationsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = lefttubularreabsorptionfiltrationsurfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::lefttubularreabsorptionfiltrationsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFiltrationSurfaceArea)
  return _internal_lefttubularreabsorptionfiltrationsurfacearea();
}
inline void RenalSystemData::unsafe_arena_set_allocated_lefttubularreabsorptionfiltrationsurfacearea(
    ::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfiltrationsurfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfiltrationsurfacearea_);
  }
  lefttubularreabsorptionfiltrationsurfacearea_ = lefttubularreabsorptionfiltrationsurfacearea;
  if (lefttubularreabsorptionfiltrationsurfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFiltrationSurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::release_lefttubularreabsorptionfiltrationsurfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = lefttubularreabsorptionfiltrationsurfacearea_;
  lefttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::unsafe_arena_release_lefttubularreabsorptionfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFiltrationSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = lefttubularreabsorptionfiltrationsurfacearea_;
  lefttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::_internal_mutable_lefttubularreabsorptionfiltrationsurfacearea() {
  
  if (lefttubularreabsorptionfiltrationsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    lefttubularreabsorptionfiltrationsurfacearea_ = p;
  }
  return lefttubularreabsorptionfiltrationsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::mutable_lefttubularreabsorptionfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFiltrationSurfaceArea)
  return _internal_mutable_lefttubularreabsorptionfiltrationsurfacearea();
}
inline void RenalSystemData::set_allocated_lefttubularreabsorptionfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* lefttubularreabsorptionfiltrationsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfiltrationsurfacearea_);
  }
  if (lefttubularreabsorptionfiltrationsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfiltrationsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularreabsorptionfiltrationsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularreabsorptionfiltrationsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularreabsorptionfiltrationsurfacearea_ = lefttubularreabsorptionfiltrationsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFiltrationSurfaceArea)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData LeftTubularReabsorptionFluidPermeability = 23;
inline bool RenalSystemData::_internal_has_lefttubularreabsorptionfluidpermeability() const {
  return this != internal_default_instance() && lefttubularreabsorptionfluidpermeability_ != nullptr;
}
inline bool RenalSystemData::has_lefttubularreabsorptionfluidpermeability() const {
  return _internal_has_lefttubularreabsorptionfluidpermeability();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::_internal_lefttubularreabsorptionfluidpermeability() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = lefttubularreabsorptionfluidpermeability_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::lefttubularreabsorptionfluidpermeability() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFluidPermeability)
  return _internal_lefttubularreabsorptionfluidpermeability();
}
inline void RenalSystemData::unsafe_arena_set_allocated_lefttubularreabsorptionfluidpermeability(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeability_);
  }
  lefttubularreabsorptionfluidpermeability_ = lefttubularreabsorptionfluidpermeability;
  if (lefttubularreabsorptionfluidpermeability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFluidPermeability)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::release_lefttubularreabsorptionfluidpermeability() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = lefttubularreabsorptionfluidpermeability_;
  lefttubularreabsorptionfluidpermeability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::unsafe_arena_release_lefttubularreabsorptionfluidpermeability() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFluidPermeability)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = lefttubularreabsorptionfluidpermeability_;
  lefttubularreabsorptionfluidpermeability_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::_internal_mutable_lefttubularreabsorptionfluidpermeability() {
  
  if (lefttubularreabsorptionfluidpermeability_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    lefttubularreabsorptionfluidpermeability_ = p;
  }
  return lefttubularreabsorptionfluidpermeability_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::mutable_lefttubularreabsorptionfluidpermeability() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFluidPermeability)
  return _internal_mutable_lefttubularreabsorptionfluidpermeability();
}
inline void RenalSystemData::set_allocated_lefttubularreabsorptionfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* lefttubularreabsorptionfluidpermeability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeability_);
  }
  if (lefttubularreabsorptionfluidpermeability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lefttubularreabsorptionfluidpermeability)->GetArena();
    if (message_arena != submessage_arena) {
      lefttubularreabsorptionfluidpermeability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lefttubularreabsorptionfluidpermeability, submessage_arena);
    }
    
  } else {
    
  }
  lefttubularreabsorptionfluidpermeability_ = lefttubularreabsorptionfluidpermeability;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.LeftTubularReabsorptionFluidPermeability)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData RenalBloodFlow = 24;
inline bool RenalSystemData::_internal_has_renalbloodflow() const {
  return this != internal_default_instance() && renalbloodflow_ != nullptr;
}
inline bool RenalSystemData::has_renalbloodflow() const {
  return _internal_has_renalbloodflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_renalbloodflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = renalbloodflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::renalbloodflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RenalBloodFlow)
  return _internal_renalbloodflow();
}
inline void RenalSystemData::unsafe_arena_set_allocated_renalbloodflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* renalbloodflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalbloodflow_);
  }
  renalbloodflow_ = renalbloodflow;
  if (renalbloodflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RenalBloodFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_renalbloodflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = renalbloodflow_;
  renalbloodflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_renalbloodflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RenalBloodFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = renalbloodflow_;
  renalbloodflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_renalbloodflow() {
  
  if (renalbloodflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    renalbloodflow_ = p;
  }
  return renalbloodflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_renalbloodflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RenalBloodFlow)
  return _internal_mutable_renalbloodflow();
}
inline void RenalSystemData::set_allocated_renalbloodflow(::pulse::cdm::bind::ScalarVolumePerTimeData* renalbloodflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalbloodflow_);
  }
  if (renalbloodflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalbloodflow)->GetArena();
    if (message_arena != submessage_arena) {
      renalbloodflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalbloodflow, submessage_arena);
    }
    
  } else {
    
  }
  renalbloodflow_ = renalbloodflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RenalBloodFlow)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData RenalPlasmaFlow = 25;
inline bool RenalSystemData::_internal_has_renalplasmaflow() const {
  return this != internal_default_instance() && renalplasmaflow_ != nullptr;
}
inline bool RenalSystemData::has_renalplasmaflow() const {
  return _internal_has_renalplasmaflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_renalplasmaflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = renalplasmaflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::renalplasmaflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RenalPlasmaFlow)
  return _internal_renalplasmaflow();
}
inline void RenalSystemData::unsafe_arena_set_allocated_renalplasmaflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* renalplasmaflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalplasmaflow_);
  }
  renalplasmaflow_ = renalplasmaflow;
  if (renalplasmaflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RenalPlasmaFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_renalplasmaflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = renalplasmaflow_;
  renalplasmaflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_renalplasmaflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RenalPlasmaFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = renalplasmaflow_;
  renalplasmaflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_renalplasmaflow() {
  
  if (renalplasmaflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    renalplasmaflow_ = p;
  }
  return renalplasmaflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_renalplasmaflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RenalPlasmaFlow)
  return _internal_mutable_renalplasmaflow();
}
inline void RenalSystemData::set_allocated_renalplasmaflow(::pulse::cdm::bind::ScalarVolumePerTimeData* renalplasmaflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalplasmaflow_);
  }
  if (renalplasmaflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalplasmaflow)->GetArena();
    if (message_arena != submessage_arena) {
      renalplasmaflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalplasmaflow, submessage_arena);
    }
    
  } else {
    
  }
  renalplasmaflow_ = renalplasmaflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RenalPlasmaFlow)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData RenalVascularResistance = 26;
inline bool RenalSystemData::_internal_has_renalvascularresistance() const {
  return this != internal_default_instance() && renalvascularresistance_ != nullptr;
}
inline bool RenalSystemData::has_renalvascularresistance() const {
  return _internal_has_renalvascularresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::_internal_renalvascularresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = renalvascularresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::renalvascularresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RenalVascularResistance)
  return _internal_renalvascularresistance();
}
inline void RenalSystemData::unsafe_arena_set_allocated_renalvascularresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* renalvascularresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalvascularresistance_);
  }
  renalvascularresistance_ = renalvascularresistance;
  if (renalvascularresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RenalVascularResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::release_renalvascularresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = renalvascularresistance_;
  renalvascularresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::unsafe_arena_release_renalvascularresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RenalVascularResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = renalvascularresistance_;
  renalvascularresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::_internal_mutable_renalvascularresistance() {
  
  if (renalvascularresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    renalvascularresistance_ = p;
  }
  return renalvascularresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::mutable_renalvascularresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RenalVascularResistance)
  return _internal_mutable_renalvascularresistance();
}
inline void RenalSystemData::set_allocated_renalvascularresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* renalvascularresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalvascularresistance_);
  }
  if (renalvascularresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renalvascularresistance)->GetArena();
    if (message_arena != submessage_arena) {
      renalvascularresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renalvascularresistance, submessage_arena);
    }
    
  } else {
    
  }
  renalvascularresistance_ = renalvascularresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RenalVascularResistance)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightAfferentArterioleResistance = 27;
inline bool RenalSystemData::_internal_has_rightafferentarterioleresistance() const {
  return this != internal_default_instance() && rightafferentarterioleresistance_ != nullptr;
}
inline bool RenalSystemData::has_rightafferentarterioleresistance() const {
  return _internal_has_rightafferentarterioleresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::_internal_rightafferentarterioleresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = rightafferentarterioleresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::rightafferentarterioleresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightAfferentArterioleResistance)
  return _internal_rightafferentarterioleresistance();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightafferentarterioleresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightafferentarterioleresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightafferentarterioleresistance_);
  }
  rightafferentarterioleresistance_ = rightafferentarterioleresistance;
  if (rightafferentarterioleresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightAfferentArterioleResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::release_rightafferentarterioleresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = rightafferentarterioleresistance_;
  rightafferentarterioleresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::unsafe_arena_release_rightafferentarterioleresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightAfferentArterioleResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = rightafferentarterioleresistance_;
  rightafferentarterioleresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::_internal_mutable_rightafferentarterioleresistance() {
  
  if (rightafferentarterioleresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    rightafferentarterioleresistance_ = p;
  }
  return rightafferentarterioleresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::mutable_rightafferentarterioleresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightAfferentArterioleResistance)
  return _internal_mutable_rightafferentarterioleresistance();
}
inline void RenalSystemData::set_allocated_rightafferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightafferentarterioleresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightafferentarterioleresistance_);
  }
  if (rightafferentarterioleresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightafferentarterioleresistance)->GetArena();
    if (message_arena != submessage_arena) {
      rightafferentarterioleresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightafferentarterioleresistance, submessage_arena);
    }
    
  } else {
    
  }
  rightafferentarterioleresistance_ = rightafferentarterioleresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightAfferentArterioleResistance)
}

// .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesHydrostaticPressure = 28;
inline bool RenalSystemData::_internal_has_rightbowmanscapsuleshydrostaticpressure() const {
  return this != internal_default_instance() && rightbowmanscapsuleshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightbowmanscapsuleshydrostaticpressure() const {
  return _internal_has_rightbowmanscapsuleshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightbowmanscapsuleshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightbowmanscapsuleshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightbowmanscapsuleshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesHydrostaticPressure)
  return _internal_rightbowmanscapsuleshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightbowmanscapsuleshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsuleshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsuleshydrostaticpressure_);
  }
  rightbowmanscapsuleshydrostaticpressure_ = rightbowmanscapsuleshydrostaticpressure;
  if (rightbowmanscapsuleshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightbowmanscapsuleshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightbowmanscapsuleshydrostaticpressure_;
  rightbowmanscapsuleshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightbowmanscapsuleshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightbowmanscapsuleshydrostaticpressure_;
  rightbowmanscapsuleshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightbowmanscapsuleshydrostaticpressure() {
  
  if (rightbowmanscapsuleshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightbowmanscapsuleshydrostaticpressure_ = p;
  }
  return rightbowmanscapsuleshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightbowmanscapsuleshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesHydrostaticPressure)
  return _internal_mutable_rightbowmanscapsuleshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_rightbowmanscapsuleshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsuleshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsuleshydrostaticpressure_);
  }
  if (rightbowmanscapsuleshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsuleshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightbowmanscapsuleshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightbowmanscapsuleshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightbowmanscapsuleshydrostaticpressure_ = rightbowmanscapsuleshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightBowmansCapsulesOsmoticPressure = 29;
inline bool RenalSystemData::_internal_has_rightbowmanscapsulesosmoticpressure() const {
  return this != internal_default_instance() && rightbowmanscapsulesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightbowmanscapsulesosmoticpressure() const {
  return _internal_has_rightbowmanscapsulesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightbowmanscapsulesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightbowmanscapsulesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightbowmanscapsulesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesOsmoticPressure)
  return _internal_rightbowmanscapsulesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightbowmanscapsulesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsulesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsulesosmoticpressure_);
  }
  rightbowmanscapsulesosmoticpressure_ = rightbowmanscapsulesosmoticpressure;
  if (rightbowmanscapsulesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightbowmanscapsulesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightbowmanscapsulesosmoticpressure_;
  rightbowmanscapsulesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightbowmanscapsulesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightbowmanscapsulesosmoticpressure_;
  rightbowmanscapsulesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightbowmanscapsulesosmoticpressure() {
  
  if (rightbowmanscapsulesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightbowmanscapsulesosmoticpressure_ = p;
  }
  return rightbowmanscapsulesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightbowmanscapsulesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesOsmoticPressure)
  return _internal_mutable_rightbowmanscapsulesosmoticpressure();
}
inline void RenalSystemData::set_allocated_rightbowmanscapsulesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightbowmanscapsulesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsulesosmoticpressure_);
  }
  if (rightbowmanscapsulesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightbowmanscapsulesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightbowmanscapsulesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightbowmanscapsulesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightbowmanscapsulesosmoticpressure_ = rightbowmanscapsulesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightBowmansCapsulesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData RightEfferentArterioleResistance = 30;
inline bool RenalSystemData::_internal_has_rightefferentarterioleresistance() const {
  return this != internal_default_instance() && rightefferentarterioleresistance_ != nullptr;
}
inline bool RenalSystemData::has_rightefferentarterioleresistance() const {
  return _internal_has_rightefferentarterioleresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::_internal_rightefferentarterioleresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = rightefferentarterioleresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RenalSystemData::rightefferentarterioleresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightEfferentArterioleResistance)
  return _internal_rightefferentarterioleresistance();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightefferentarterioleresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightefferentarterioleresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightefferentarterioleresistance_);
  }
  rightefferentarterioleresistance_ = rightefferentarterioleresistance;
  if (rightefferentarterioleresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightEfferentArterioleResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::release_rightefferentarterioleresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = rightefferentarterioleresistance_;
  rightefferentarterioleresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::unsafe_arena_release_rightefferentarterioleresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightEfferentArterioleResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = rightefferentarterioleresistance_;
  rightefferentarterioleresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::_internal_mutable_rightefferentarterioleresistance() {
  
  if (rightefferentarterioleresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    rightefferentarterioleresistance_ = p;
  }
  return rightefferentarterioleresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RenalSystemData::mutable_rightefferentarterioleresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightEfferentArterioleResistance)
  return _internal_mutable_rightefferentarterioleresistance();
}
inline void RenalSystemData::set_allocated_rightefferentarterioleresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* rightefferentarterioleresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightefferentarterioleresistance_);
  }
  if (rightefferentarterioleresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightefferentarterioleresistance)->GetArena();
    if (message_arena != submessage_arena) {
      rightefferentarterioleresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightefferentarterioleresistance, submessage_arena);
    }
    
  } else {
    
  }
  rightefferentarterioleresistance_ = rightefferentarterioleresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightEfferentArterioleResistance)
}

// .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesHydrostaticPressure = 31;
inline bool RenalSystemData::_internal_has_rightglomerularcapillarieshydrostaticpressure() const {
  return this != internal_default_instance() && rightglomerularcapillarieshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularcapillarieshydrostaticpressure() const {
  return _internal_has_rightglomerularcapillarieshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightglomerularcapillarieshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightglomerularcapillarieshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightglomerularcapillarieshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesHydrostaticPressure)
  return _internal_rightglomerularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularcapillarieshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillarieshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillarieshydrostaticpressure_);
  }
  rightglomerularcapillarieshydrostaticpressure_ = rightglomerularcapillarieshydrostaticpressure;
  if (rightglomerularcapillarieshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightglomerularcapillarieshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightglomerularcapillarieshydrostaticpressure_;
  rightglomerularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightglomerularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightglomerularcapillarieshydrostaticpressure_;
  rightglomerularcapillarieshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightglomerularcapillarieshydrostaticpressure() {
  
  if (rightglomerularcapillarieshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightglomerularcapillarieshydrostaticpressure_ = p;
  }
  return rightglomerularcapillarieshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightglomerularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesHydrostaticPressure)
  return _internal_mutable_rightglomerularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_rightglomerularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillarieshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillarieshydrostaticpressure_);
  }
  if (rightglomerularcapillarieshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillarieshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularcapillarieshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularcapillarieshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularcapillarieshydrostaticpressure_ = rightglomerularcapillarieshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightGlomerularCapillariesOsmoticPressure = 32;
inline bool RenalSystemData::_internal_has_rightglomerularcapillariesosmoticpressure() const {
  return this != internal_default_instance() && rightglomerularcapillariesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularcapillariesosmoticpressure() const {
  return _internal_has_rightglomerularcapillariesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightglomerularcapillariesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightglomerularcapillariesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightglomerularcapillariesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesOsmoticPressure)
  return _internal_rightglomerularcapillariesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularcapillariesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillariesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillariesosmoticpressure_);
  }
  rightglomerularcapillariesosmoticpressure_ = rightglomerularcapillariesosmoticpressure;
  if (rightglomerularcapillariesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightglomerularcapillariesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightglomerularcapillariesosmoticpressure_;
  rightglomerularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightglomerularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightglomerularcapillariesosmoticpressure_;
  rightglomerularcapillariesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightglomerularcapillariesosmoticpressure() {
  
  if (rightglomerularcapillariesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightglomerularcapillariesosmoticpressure_ = p;
  }
  return rightglomerularcapillariesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightglomerularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesOsmoticPressure)
  return _internal_mutable_rightglomerularcapillariesosmoticpressure();
}
inline void RenalSystemData::set_allocated_rightglomerularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightglomerularcapillariesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillariesosmoticpressure_);
  }
  if (rightglomerularcapillariesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularcapillariesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularcapillariesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularcapillariesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularcapillariesosmoticpressure_ = rightglomerularcapillariesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularCapillariesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureData RightGlomerularFiltrationCoefficient = 33;
inline bool RenalSystemData::_internal_has_rightglomerularfiltrationcoefficient() const {
  return this != internal_default_instance() && rightglomerularfiltrationcoefficient_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularfiltrationcoefficient() const {
  return _internal_has_rightglomerularfiltrationcoefficient();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::_internal_rightglomerularfiltrationcoefficient() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData* p = rightglomerularfiltrationcoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::rightglomerularfiltrationcoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationCoefficient)
  return _internal_rightglomerularfiltrationcoefficient();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularfiltrationcoefficient(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightglomerularfiltrationcoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationcoefficient_);
  }
  rightglomerularfiltrationcoefficient_ = rightglomerularfiltrationcoefficient;
  if (rightglomerularfiltrationcoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationCoefficient)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::release_rightglomerularfiltrationcoefficient() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = rightglomerularfiltrationcoefficient_;
  rightglomerularfiltrationcoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::unsafe_arena_release_rightglomerularfiltrationcoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationCoefficient)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = rightglomerularfiltrationcoefficient_;
  rightglomerularfiltrationcoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::_internal_mutable_rightglomerularfiltrationcoefficient() {
  
  if (rightglomerularfiltrationcoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(GetArena());
    rightglomerularfiltrationcoefficient_ = p;
  }
  return rightglomerularfiltrationcoefficient_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::mutable_rightglomerularfiltrationcoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationCoefficient)
  return _internal_mutable_rightglomerularfiltrationcoefficient();
}
inline void RenalSystemData::set_allocated_rightglomerularfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightglomerularfiltrationcoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationcoefficient_);
  }
  if (rightglomerularfiltrationcoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationcoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfiltrationcoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfiltrationcoefficient, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfiltrationcoefficient_ = rightglomerularfiltrationcoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationCoefficient)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData RightGlomerularFiltrationRate = 34;
inline bool RenalSystemData::_internal_has_rightglomerularfiltrationrate() const {
  return this != internal_default_instance() && rightglomerularfiltrationrate_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularfiltrationrate() const {
  return _internal_has_rightglomerularfiltrationrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_rightglomerularfiltrationrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = rightglomerularfiltrationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::rightglomerularfiltrationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationRate)
  return _internal_rightglomerularfiltrationrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularfiltrationrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* rightglomerularfiltrationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationrate_);
  }
  rightglomerularfiltrationrate_ = rightglomerularfiltrationrate;
  if (rightglomerularfiltrationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_rightglomerularfiltrationrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rightglomerularfiltrationrate_;
  rightglomerularfiltrationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_rightglomerularfiltrationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rightglomerularfiltrationrate_;
  rightglomerularfiltrationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_rightglomerularfiltrationrate() {
  
  if (rightglomerularfiltrationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    rightglomerularfiltrationrate_ = p;
  }
  return rightglomerularfiltrationrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_rightglomerularfiltrationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationRate)
  return _internal_mutable_rightglomerularfiltrationrate();
}
inline void RenalSystemData::set_allocated_rightglomerularfiltrationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* rightglomerularfiltrationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationrate_);
  }
  if (rightglomerularfiltrationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationrate)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfiltrationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfiltrationrate, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfiltrationrate_ = rightglomerularfiltrationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationRate)
}

// .pulse.cdm.bind.ScalarAreaData RightGlomerularFiltrationSurfaceArea = 35;
inline bool RenalSystemData::_internal_has_rightglomerularfiltrationsurfacearea() const {
  return this != internal_default_instance() && rightglomerularfiltrationsurfacearea_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularfiltrationsurfacearea() const {
  return _internal_has_rightglomerularfiltrationsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::_internal_rightglomerularfiltrationsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = rightglomerularfiltrationsurfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::rightglomerularfiltrationsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationSurfaceArea)
  return _internal_rightglomerularfiltrationsurfacearea();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularfiltrationsurfacearea(
    ::pulse::cdm::bind::ScalarAreaData* rightglomerularfiltrationsurfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationsurfacearea_);
  }
  rightglomerularfiltrationsurfacearea_ = rightglomerularfiltrationsurfacearea;
  if (rightglomerularfiltrationsurfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationSurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::release_rightglomerularfiltrationsurfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = rightglomerularfiltrationsurfacearea_;
  rightglomerularfiltrationsurfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::unsafe_arena_release_rightglomerularfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = rightglomerularfiltrationsurfacearea_;
  rightglomerularfiltrationsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::_internal_mutable_rightglomerularfiltrationsurfacearea() {
  
  if (rightglomerularfiltrationsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    rightglomerularfiltrationsurfacearea_ = p;
  }
  return rightglomerularfiltrationsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::mutable_rightglomerularfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationSurfaceArea)
  return _internal_mutable_rightglomerularfiltrationsurfacearea();
}
inline void RenalSystemData::set_allocated_rightglomerularfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* rightglomerularfiltrationsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationsurfacearea_);
  }
  if (rightglomerularfiltrationsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfiltrationsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfiltrationsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfiltrationsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfiltrationsurfacearea_ = rightglomerularfiltrationsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFiltrationSurfaceArea)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightGlomerularFluidPermeability = 36;
inline bool RenalSystemData::_internal_has_rightglomerularfluidpermeability() const {
  return this != internal_default_instance() && rightglomerularfluidpermeability_ != nullptr;
}
inline bool RenalSystemData::has_rightglomerularfluidpermeability() const {
  return _internal_has_rightglomerularfluidpermeability();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::_internal_rightglomerularfluidpermeability() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = rightglomerularfluidpermeability_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::rightglomerularfluidpermeability() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightGlomerularFluidPermeability)
  return _internal_rightglomerularfluidpermeability();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightglomerularfluidpermeability(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeability_);
  }
  rightglomerularfluidpermeability_ = rightglomerularfluidpermeability;
  if (rightglomerularfluidpermeability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFluidPermeability)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::release_rightglomerularfluidpermeability() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = rightglomerularfluidpermeability_;
  rightglomerularfluidpermeability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::unsafe_arena_release_rightglomerularfluidpermeability() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightGlomerularFluidPermeability)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = rightglomerularfluidpermeability_;
  rightglomerularfluidpermeability_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::_internal_mutable_rightglomerularfluidpermeability() {
  
  if (rightglomerularfluidpermeability_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    rightglomerularfluidpermeability_ = p;
  }
  return rightglomerularfluidpermeability_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::mutable_rightglomerularfluidpermeability() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightGlomerularFluidPermeability)
  return _internal_mutable_rightglomerularfluidpermeability();
}
inline void RenalSystemData::set_allocated_rightglomerularfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* rightglomerularfluidpermeability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeability_);
  }
  if (rightglomerularfluidpermeability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightglomerularfluidpermeability)->GetArena();
    if (message_arena != submessage_arena) {
      rightglomerularfluidpermeability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightglomerularfluidpermeability, submessage_arena);
    }
    
  } else {
    
  }
  rightglomerularfluidpermeability_ = rightglomerularfluidpermeability;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightGlomerularFluidPermeability)
}

// .pulse.cdm.bind.Scalar0To1Data RightFiltrationFraction = 37;
inline bool RenalSystemData::_internal_has_rightfiltrationfraction() const {
  return this != internal_default_instance() && rightfiltrationfraction_ != nullptr;
}
inline bool RenalSystemData::has_rightfiltrationfraction() const {
  return _internal_has_rightfiltrationfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::_internal_rightfiltrationfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightfiltrationfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RenalSystemData::rightfiltrationfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightFiltrationFraction)
  return _internal_rightfiltrationfraction();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightfiltrationfraction(
    ::pulse::cdm::bind::Scalar0To1Data* rightfiltrationfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightfiltrationfraction_);
  }
  rightfiltrationfraction_ = rightfiltrationfraction;
  if (rightfiltrationfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightFiltrationFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::release_rightfiltrationfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightfiltrationfraction_;
  rightfiltrationfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::unsafe_arena_release_rightfiltrationfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightFiltrationFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightfiltrationfraction_;
  rightfiltrationfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::_internal_mutable_rightfiltrationfraction() {
  
  if (rightfiltrationfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    rightfiltrationfraction_ = p;
  }
  return rightfiltrationfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RenalSystemData::mutable_rightfiltrationfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightFiltrationFraction)
  return _internal_mutable_rightfiltrationfraction();
}
inline void RenalSystemData::set_allocated_rightfiltrationfraction(::pulse::cdm::bind::Scalar0To1Data* rightfiltrationfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightfiltrationfraction_);
  }
  if (rightfiltrationfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightfiltrationfraction)->GetArena();
    if (message_arena != submessage_arena) {
      rightfiltrationfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightfiltrationfraction, submessage_arena);
    }
    
  } else {
    
  }
  rightfiltrationfraction_ = rightfiltrationfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightFiltrationFraction)
}

// .pulse.cdm.bind.ScalarPressureData RightNetFiltrationPressure = 38;
inline bool RenalSystemData::_internal_has_rightnetfiltrationpressure() const {
  return this != internal_default_instance() && rightnetfiltrationpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightnetfiltrationpressure() const {
  return _internal_has_rightnetfiltrationpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightnetfiltrationpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightnetfiltrationpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightnetfiltrationpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightNetFiltrationPressure)
  return _internal_rightnetfiltrationpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightnetfiltrationpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightnetfiltrationpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetfiltrationpressure_);
  }
  rightnetfiltrationpressure_ = rightnetfiltrationpressure;
  if (rightnetfiltrationpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightNetFiltrationPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightnetfiltrationpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightnetfiltrationpressure_;
  rightnetfiltrationpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightnetfiltrationpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightNetFiltrationPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightnetfiltrationpressure_;
  rightnetfiltrationpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightnetfiltrationpressure() {
  
  if (rightnetfiltrationpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightnetfiltrationpressure_ = p;
  }
  return rightnetfiltrationpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightnetfiltrationpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightNetFiltrationPressure)
  return _internal_mutable_rightnetfiltrationpressure();
}
inline void RenalSystemData::set_allocated_rightnetfiltrationpressure(::pulse::cdm::bind::ScalarPressureData* rightnetfiltrationpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetfiltrationpressure_);
  }
  if (rightnetfiltrationpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetfiltrationpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightnetfiltrationpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightnetfiltrationpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightnetfiltrationpressure_ = rightnetfiltrationpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightNetFiltrationPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightNetReabsorptionPressure = 39;
inline bool RenalSystemData::_internal_has_rightnetreabsorptionpressure() const {
  return this != internal_default_instance() && rightnetreabsorptionpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightnetreabsorptionpressure() const {
  return _internal_has_rightnetreabsorptionpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightnetreabsorptionpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightnetreabsorptionpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightnetreabsorptionpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightNetReabsorptionPressure)
  return _internal_rightnetreabsorptionpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightnetreabsorptionpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightnetreabsorptionpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetreabsorptionpressure_);
  }
  rightnetreabsorptionpressure_ = rightnetreabsorptionpressure;
  if (rightnetreabsorptionpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightNetReabsorptionPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightnetreabsorptionpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightnetreabsorptionpressure_;
  rightnetreabsorptionpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightnetreabsorptionpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightNetReabsorptionPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightnetreabsorptionpressure_;
  rightnetreabsorptionpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightnetreabsorptionpressure() {
  
  if (rightnetreabsorptionpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightnetreabsorptionpressure_ = p;
  }
  return rightnetreabsorptionpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightnetreabsorptionpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightNetReabsorptionPressure)
  return _internal_mutable_rightnetreabsorptionpressure();
}
inline void RenalSystemData::set_allocated_rightnetreabsorptionpressure(::pulse::cdm::bind::ScalarPressureData* rightnetreabsorptionpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetreabsorptionpressure_);
  }
  if (rightnetreabsorptionpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightnetreabsorptionpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightnetreabsorptionpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightnetreabsorptionpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightnetreabsorptionpressure_ = rightnetreabsorptionpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightNetReabsorptionPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesHydrostaticPressure = 40;
inline bool RenalSystemData::_internal_has_rightperitubularcapillarieshydrostaticpressure() const {
  return this != internal_default_instance() && rightperitubularcapillarieshydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightperitubularcapillarieshydrostaticpressure() const {
  return _internal_has_rightperitubularcapillarieshydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightperitubularcapillarieshydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightperitubularcapillarieshydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightperitubularcapillarieshydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesHydrostaticPressure)
  return _internal_rightperitubularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightperitubularcapillarieshydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillarieshydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillarieshydrostaticpressure_);
  }
  rightperitubularcapillarieshydrostaticpressure_ = rightperitubularcapillarieshydrostaticpressure;
  if (rightperitubularcapillarieshydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightperitubularcapillarieshydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightperitubularcapillarieshydrostaticpressure_;
  rightperitubularcapillarieshydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightperitubularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightperitubularcapillarieshydrostaticpressure_;
  rightperitubularcapillarieshydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightperitubularcapillarieshydrostaticpressure() {
  
  if (rightperitubularcapillarieshydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightperitubularcapillarieshydrostaticpressure_ = p;
  }
  return rightperitubularcapillarieshydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightperitubularcapillarieshydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesHydrostaticPressure)
  return _internal_mutable_rightperitubularcapillarieshydrostaticpressure();
}
inline void RenalSystemData::set_allocated_rightperitubularcapillarieshydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillarieshydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillarieshydrostaticpressure_);
  }
  if (rightperitubularcapillarieshydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillarieshydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightperitubularcapillarieshydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightperitubularcapillarieshydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightperitubularcapillarieshydrostaticpressure_ = rightperitubularcapillarieshydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightPeritubularCapillariesOsmoticPressure = 41;
inline bool RenalSystemData::_internal_has_rightperitubularcapillariesosmoticpressure() const {
  return this != internal_default_instance() && rightperitubularcapillariesosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_rightperitubularcapillariesosmoticpressure() const {
  return _internal_has_rightperitubularcapillariesosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_rightperitubularcapillariesosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = rightperitubularcapillariesosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::rightperitubularcapillariesosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesOsmoticPressure)
  return _internal_rightperitubularcapillariesosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightperitubularcapillariesosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillariesosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillariesosmoticpressure_);
  }
  rightperitubularcapillariesosmoticpressure_ = rightperitubularcapillariesosmoticpressure;
  if (rightperitubularcapillariesosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_rightperitubularcapillariesosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightperitubularcapillariesosmoticpressure_;
  rightperitubularcapillariesosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_rightperitubularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = rightperitubularcapillariesosmoticpressure_;
  rightperitubularcapillariesosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_rightperitubularcapillariesosmoticpressure() {
  
  if (rightperitubularcapillariesosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    rightperitubularcapillariesosmoticpressure_ = p;
  }
  return rightperitubularcapillariesosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_rightperitubularcapillariesosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesOsmoticPressure)
  return _internal_mutable_rightperitubularcapillariesosmoticpressure();
}
inline void RenalSystemData::set_allocated_rightperitubularcapillariesosmoticpressure(::pulse::cdm::bind::ScalarPressureData* rightperitubularcapillariesosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillariesosmoticpressure_);
  }
  if (rightperitubularcapillariesosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightperitubularcapillariesosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      rightperitubularcapillariesosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightperitubularcapillariesosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  rightperitubularcapillariesosmoticpressure_ = rightperitubularcapillariesosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightPeritubularCapillariesOsmoticPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureData RightReabsorptionFiltrationCoefficient = 42;
inline bool RenalSystemData::_internal_has_rightreabsorptionfiltrationcoefficient() const {
  return this != internal_default_instance() && rightreabsorptionfiltrationcoefficient_ != nullptr;
}
inline bool RenalSystemData::has_rightreabsorptionfiltrationcoefficient() const {
  return _internal_has_rightreabsorptionfiltrationcoefficient();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::_internal_rightreabsorptionfiltrationcoefficient() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureData* p = rightreabsorptionfiltrationcoefficient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureData& RenalSystemData::rightreabsorptionfiltrationcoefficient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightReabsorptionFiltrationCoefficient)
  return _internal_rightreabsorptionfiltrationcoefficient();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightreabsorptionfiltrationcoefficient(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightreabsorptionfiltrationcoefficient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionfiltrationcoefficient_);
  }
  rightreabsorptionfiltrationcoefficient_ = rightreabsorptionfiltrationcoefficient;
  if (rightreabsorptionfiltrationcoefficient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightReabsorptionFiltrationCoefficient)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::release_rightreabsorptionfiltrationcoefficient() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = rightreabsorptionfiltrationcoefficient_;
  rightreabsorptionfiltrationcoefficient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::unsafe_arena_release_rightreabsorptionfiltrationcoefficient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightReabsorptionFiltrationCoefficient)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureData* temp = rightreabsorptionfiltrationcoefficient_;
  rightreabsorptionfiltrationcoefficient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::_internal_mutable_rightreabsorptionfiltrationcoefficient() {
  
  if (rightreabsorptionfiltrationcoefficient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureData>(GetArena());
    rightreabsorptionfiltrationcoefficient_ = p;
  }
  return rightreabsorptionfiltrationcoefficient_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureData* RenalSystemData::mutable_rightreabsorptionfiltrationcoefficient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightReabsorptionFiltrationCoefficient)
  return _internal_mutable_rightreabsorptionfiltrationcoefficient();
}
inline void RenalSystemData::set_allocated_rightreabsorptionfiltrationcoefficient(::pulse::cdm::bind::ScalarVolumePerTimePressureData* rightreabsorptionfiltrationcoefficient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionfiltrationcoefficient_);
  }
  if (rightreabsorptionfiltrationcoefficient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionfiltrationcoefficient)->GetArena();
    if (message_arena != submessage_arena) {
      rightreabsorptionfiltrationcoefficient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightreabsorptionfiltrationcoefficient, submessage_arena);
    }
    
  } else {
    
  }
  rightreabsorptionfiltrationcoefficient_ = rightreabsorptionfiltrationcoefficient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightReabsorptionFiltrationCoefficient)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData RightReabsorptionRate = 43;
inline bool RenalSystemData::_internal_has_rightreabsorptionrate() const {
  return this != internal_default_instance() && rightreabsorptionrate_ != nullptr;
}
inline bool RenalSystemData::has_rightreabsorptionrate() const {
  return _internal_has_rightreabsorptionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_rightreabsorptionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = rightreabsorptionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::rightreabsorptionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightReabsorptionRate)
  return _internal_rightreabsorptionrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_rightreabsorptionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* rightreabsorptionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionrate_);
  }
  rightreabsorptionrate_ = rightreabsorptionrate;
  if (rightreabsorptionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightReabsorptionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_rightreabsorptionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rightreabsorptionrate_;
  rightreabsorptionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_rightreabsorptionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightReabsorptionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rightreabsorptionrate_;
  rightreabsorptionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_rightreabsorptionrate() {
  
  if (rightreabsorptionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    rightreabsorptionrate_ = p;
  }
  return rightreabsorptionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_rightreabsorptionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightReabsorptionRate)
  return _internal_mutable_rightreabsorptionrate();
}
inline void RenalSystemData::set_allocated_rightreabsorptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* rightreabsorptionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionrate_);
  }
  if (rightreabsorptionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightreabsorptionrate)->GetArena();
    if (message_arena != submessage_arena) {
      rightreabsorptionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightreabsorptionrate, submessage_arena);
    }
    
  } else {
    
  }
  rightreabsorptionrate_ = rightreabsorptionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightReabsorptionRate)
}

// .pulse.cdm.bind.ScalarPressureData RightTubularOsmoticPressure = 44;
inline bool RenalSystemData::_internal_has_righttubularosmoticpressure() const {
  return this != internal_default_instance() && righttubularosmoticpressure_ != nullptr;
}
inline bool RenalSystemData::has_righttubularosmoticpressure() const {
  return _internal_has_righttubularosmoticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_righttubularosmoticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = righttubularosmoticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::righttubularosmoticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightTubularOsmoticPressure)
  return _internal_righttubularosmoticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_righttubularosmoticpressure(
    ::pulse::cdm::bind::ScalarPressureData* righttubularosmoticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularosmoticpressure_);
  }
  righttubularosmoticpressure_ = righttubularosmoticpressure;
  if (righttubularosmoticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularOsmoticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_righttubularosmoticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = righttubularosmoticpressure_;
  righttubularosmoticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_righttubularosmoticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightTubularOsmoticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = righttubularosmoticpressure_;
  righttubularosmoticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_righttubularosmoticpressure() {
  
  if (righttubularosmoticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    righttubularosmoticpressure_ = p;
  }
  return righttubularosmoticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_righttubularosmoticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightTubularOsmoticPressure)
  return _internal_mutable_righttubularosmoticpressure();
}
inline void RenalSystemData::set_allocated_righttubularosmoticpressure(::pulse::cdm::bind::ScalarPressureData* righttubularosmoticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularosmoticpressure_);
  }
  if (righttubularosmoticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularosmoticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularosmoticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularosmoticpressure, submessage_arena);
    }
    
  } else {
    
  }
  righttubularosmoticpressure_ = righttubularosmoticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularOsmoticPressure)
}

// .pulse.cdm.bind.ScalarPressureData RightTubularHydrostaticPressure = 45;
inline bool RenalSystemData::_internal_has_righttubularhydrostaticpressure() const {
  return this != internal_default_instance() && righttubularhydrostaticpressure_ != nullptr;
}
inline bool RenalSystemData::has_righttubularhydrostaticpressure() const {
  return _internal_has_righttubularhydrostaticpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::_internal_righttubularhydrostaticpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = righttubularhydrostaticpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RenalSystemData::righttubularhydrostaticpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightTubularHydrostaticPressure)
  return _internal_righttubularhydrostaticpressure();
}
inline void RenalSystemData::unsafe_arena_set_allocated_righttubularhydrostaticpressure(
    ::pulse::cdm::bind::ScalarPressureData* righttubularhydrostaticpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularhydrostaticpressure_);
  }
  righttubularhydrostaticpressure_ = righttubularhydrostaticpressure;
  if (righttubularhydrostaticpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularHydrostaticPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::release_righttubularhydrostaticpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = righttubularhydrostaticpressure_;
  righttubularhydrostaticpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::unsafe_arena_release_righttubularhydrostaticpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightTubularHydrostaticPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = righttubularhydrostaticpressure_;
  righttubularhydrostaticpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::_internal_mutable_righttubularhydrostaticpressure() {
  
  if (righttubularhydrostaticpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    righttubularhydrostaticpressure_ = p;
  }
  return righttubularhydrostaticpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RenalSystemData::mutable_righttubularhydrostaticpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightTubularHydrostaticPressure)
  return _internal_mutable_righttubularhydrostaticpressure();
}
inline void RenalSystemData::set_allocated_righttubularhydrostaticpressure(::pulse::cdm::bind::ScalarPressureData* righttubularhydrostaticpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularhydrostaticpressure_);
  }
  if (righttubularhydrostaticpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularhydrostaticpressure)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularhydrostaticpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularhydrostaticpressure, submessage_arena);
    }
    
  } else {
    
  }
  righttubularhydrostaticpressure_ = righttubularhydrostaticpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularHydrostaticPressure)
}

// .pulse.cdm.bind.ScalarAreaData RightTubularReabsorptionFiltrationSurfaceArea = 46;
inline bool RenalSystemData::_internal_has_righttubularreabsorptionfiltrationsurfacearea() const {
  return this != internal_default_instance() && righttubularreabsorptionfiltrationsurfacearea_ != nullptr;
}
inline bool RenalSystemData::has_righttubularreabsorptionfiltrationsurfacearea() const {
  return _internal_has_righttubularreabsorptionfiltrationsurfacearea();
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::_internal_righttubularreabsorptionfiltrationsurfacearea() const {
  const ::pulse::cdm::bind::ScalarAreaData* p = righttubularreabsorptionfiltrationsurfacearea_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarAreaData&>(
      ::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& RenalSystemData::righttubularreabsorptionfiltrationsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFiltrationSurfaceArea)
  return _internal_righttubularreabsorptionfiltrationsurfacearea();
}
inline void RenalSystemData::unsafe_arena_set_allocated_righttubularreabsorptionfiltrationsurfacearea(
    ::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfiltrationsurfacearea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfiltrationsurfacearea_);
  }
  righttubularreabsorptionfiltrationsurfacearea_ = righttubularreabsorptionfiltrationsurfacearea;
  if (righttubularreabsorptionfiltrationsurfacearea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFiltrationSurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::release_righttubularreabsorptionfiltrationsurfacearea() {
  
  ::pulse::cdm::bind::ScalarAreaData* temp = righttubularreabsorptionfiltrationsurfacearea_;
  righttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::unsafe_arena_release_righttubularreabsorptionfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFiltrationSurfaceArea)
  
  ::pulse::cdm::bind::ScalarAreaData* temp = righttubularreabsorptionfiltrationsurfacearea_;
  righttubularreabsorptionfiltrationsurfacearea_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::_internal_mutable_righttubularreabsorptionfiltrationsurfacearea() {
  
  if (righttubularreabsorptionfiltrationsurfacearea_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarAreaData>(GetArena());
    righttubularreabsorptionfiltrationsurfacearea_ = p;
  }
  return righttubularreabsorptionfiltrationsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* RenalSystemData::mutable_righttubularreabsorptionfiltrationsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFiltrationSurfaceArea)
  return _internal_mutable_righttubularreabsorptionfiltrationsurfacearea();
}
inline void RenalSystemData::set_allocated_righttubularreabsorptionfiltrationsurfacearea(::pulse::cdm::bind::ScalarAreaData* righttubularreabsorptionfiltrationsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfiltrationsurfacearea_);
  }
  if (righttubularreabsorptionfiltrationsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfiltrationsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularreabsorptionfiltrationsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularreabsorptionfiltrationsurfacearea, submessage_arena);
    }
    
  } else {
    
  }
  righttubularreabsorptionfiltrationsurfacearea_ = righttubularreabsorptionfiltrationsurfacearea;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFiltrationSurfaceArea)
}

// .pulse.cdm.bind.ScalarVolumePerTimePressureAreaData RightTubularReabsorptionFluidPermeability = 47;
inline bool RenalSystemData::_internal_has_righttubularreabsorptionfluidpermeability() const {
  return this != internal_default_instance() && righttubularreabsorptionfluidpermeability_ != nullptr;
}
inline bool RenalSystemData::has_righttubularreabsorptionfluidpermeability() const {
  return _internal_has_righttubularreabsorptionfluidpermeability();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::_internal_righttubularreabsorptionfluidpermeability() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* p = righttubularreabsorptionfluidpermeability_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimePressureAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData& RenalSystemData::righttubularreabsorptionfluidpermeability() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFluidPermeability)
  return _internal_righttubularreabsorptionfluidpermeability();
}
inline void RenalSystemData::unsafe_arena_set_allocated_righttubularreabsorptionfluidpermeability(
    ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeability_);
  }
  righttubularreabsorptionfluidpermeability_ = righttubularreabsorptionfluidpermeability;
  if (righttubularreabsorptionfluidpermeability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFluidPermeability)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::release_righttubularreabsorptionfluidpermeability() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = righttubularreabsorptionfluidpermeability_;
  righttubularreabsorptionfluidpermeability_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::unsafe_arena_release_righttubularreabsorptionfluidpermeability() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFluidPermeability)
  
  ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* temp = righttubularreabsorptionfluidpermeability_;
  righttubularreabsorptionfluidpermeability_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::_internal_mutable_righttubularreabsorptionfluidpermeability() {
  
  if (righttubularreabsorptionfluidpermeability_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData>(GetArena());
    righttubularreabsorptionfluidpermeability_ = p;
  }
  return righttubularreabsorptionfluidpermeability_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* RenalSystemData::mutable_righttubularreabsorptionfluidpermeability() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFluidPermeability)
  return _internal_mutable_righttubularreabsorptionfluidpermeability();
}
inline void RenalSystemData::set_allocated_righttubularreabsorptionfluidpermeability(::pulse::cdm::bind::ScalarVolumePerTimePressureAreaData* righttubularreabsorptionfluidpermeability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeability_);
  }
  if (righttubularreabsorptionfluidpermeability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(righttubularreabsorptionfluidpermeability)->GetArena();
    if (message_arena != submessage_arena) {
      righttubularreabsorptionfluidpermeability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, righttubularreabsorptionfluidpermeability, submessage_arena);
    }
    
  } else {
    
  }
  righttubularreabsorptionfluidpermeability_ = righttubularreabsorptionfluidpermeability;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.RightTubularReabsorptionFluidPermeability)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData UrinationRate = 48;
inline bool RenalSystemData::_internal_has_urinationrate() const {
  return this != internal_default_instance() && urinationrate_ != nullptr;
}
inline bool RenalSystemData::has_urinationrate() const {
  return _internal_has_urinationrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_urinationrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = urinationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::urinationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrinationRate)
  return _internal_urinationrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urinationrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* urinationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinationrate_);
  }
  urinationrate_ = urinationrate;
  if (urinationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrinationRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_urinationrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = urinationrate_;
  urinationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_urinationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrinationRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = urinationrate_;
  urinationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_urinationrate() {
  
  if (urinationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    urinationrate_ = p;
  }
  return urinationrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_urinationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrinationRate)
  return _internal_mutable_urinationrate();
}
inline void RenalSystemData::set_allocated_urinationrate(::pulse::cdm::bind::ScalarVolumePerTimeData* urinationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinationrate_);
  }
  if (urinationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinationrate)->GetArena();
    if (message_arena != submessage_arena) {
      urinationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urinationrate, submessage_arena);
    }
    
  } else {
    
  }
  urinationrate_ = urinationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrinationRate)
}

// .pulse.cdm.bind.ScalarOsmolalityData UrineOsmolality = 49;
inline bool RenalSystemData::_internal_has_urineosmolality() const {
  return this != internal_default_instance() && urineosmolality_ != nullptr;
}
inline bool RenalSystemData::has_urineosmolality() const {
  return _internal_has_urineosmolality();
}
inline const ::pulse::cdm::bind::ScalarOsmolalityData& RenalSystemData::_internal_urineosmolality() const {
  const ::pulse::cdm::bind::ScalarOsmolalityData* p = urineosmolality_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarOsmolalityData&>(
      ::pulse::cdm::bind::_ScalarOsmolalityData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarOsmolalityData& RenalSystemData::urineosmolality() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineOsmolality)
  return _internal_urineosmolality();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urineosmolality(
    ::pulse::cdm::bind::ScalarOsmolalityData* urineosmolality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolality_);
  }
  urineosmolality_ = urineosmolality;
  if (urineosmolality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineOsmolality)
}
inline ::pulse::cdm::bind::ScalarOsmolalityData* RenalSystemData::release_urineosmolality() {
  
  ::pulse::cdm::bind::ScalarOsmolalityData* temp = urineosmolality_;
  urineosmolality_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarOsmolalityData* RenalSystemData::unsafe_arena_release_urineosmolality() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineOsmolality)
  
  ::pulse::cdm::bind::ScalarOsmolalityData* temp = urineosmolality_;
  urineosmolality_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarOsmolalityData* RenalSystemData::_internal_mutable_urineosmolality() {
  
  if (urineosmolality_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarOsmolalityData>(GetArena());
    urineosmolality_ = p;
  }
  return urineosmolality_;
}
inline ::pulse::cdm::bind::ScalarOsmolalityData* RenalSystemData::mutable_urineosmolality() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineOsmolality)
  return _internal_mutable_urineosmolality();
}
inline void RenalSystemData::set_allocated_urineosmolality(::pulse::cdm::bind::ScalarOsmolalityData* urineosmolality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolality_);
  }
  if (urineosmolality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolality)->GetArena();
    if (message_arena != submessage_arena) {
      urineosmolality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineosmolality, submessage_arena);
    }
    
  } else {
    
  }
  urineosmolality_ = urineosmolality;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineOsmolality)
}

// .pulse.cdm.bind.ScalarOsmolarityData UrineOsmolarity = 50;
inline bool RenalSystemData::_internal_has_urineosmolarity() const {
  return this != internal_default_instance() && urineosmolarity_ != nullptr;
}
inline bool RenalSystemData::has_urineosmolarity() const {
  return _internal_has_urineosmolarity();
}
inline const ::pulse::cdm::bind::ScalarOsmolarityData& RenalSystemData::_internal_urineosmolarity() const {
  const ::pulse::cdm::bind::ScalarOsmolarityData* p = urineosmolarity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarOsmolarityData&>(
      ::pulse::cdm::bind::_ScalarOsmolarityData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarOsmolarityData& RenalSystemData::urineosmolarity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineOsmolarity)
  return _internal_urineosmolarity();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urineosmolarity(
    ::pulse::cdm::bind::ScalarOsmolarityData* urineosmolarity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity_);
  }
  urineosmolarity_ = urineosmolarity;
  if (urineosmolarity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineOsmolarity)
}
inline ::pulse::cdm::bind::ScalarOsmolarityData* RenalSystemData::release_urineosmolarity() {
  
  ::pulse::cdm::bind::ScalarOsmolarityData* temp = urineosmolarity_;
  urineosmolarity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarOsmolarityData* RenalSystemData::unsafe_arena_release_urineosmolarity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineOsmolarity)
  
  ::pulse::cdm::bind::ScalarOsmolarityData* temp = urineosmolarity_;
  urineosmolarity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarOsmolarityData* RenalSystemData::_internal_mutable_urineosmolarity() {
  
  if (urineosmolarity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarOsmolarityData>(GetArena());
    urineosmolarity_ = p;
  }
  return urineosmolarity_;
}
inline ::pulse::cdm::bind::ScalarOsmolarityData* RenalSystemData::mutable_urineosmolarity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineOsmolarity)
  return _internal_mutable_urineosmolarity();
}
inline void RenalSystemData::set_allocated_urineosmolarity(::pulse::cdm::bind::ScalarOsmolarityData* urineosmolarity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity_);
  }
  if (urineosmolarity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineosmolarity)->GetArena();
    if (message_arena != submessage_arena) {
      urineosmolarity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineosmolarity, submessage_arena);
    }
    
  } else {
    
  }
  urineosmolarity_ = urineosmolarity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineOsmolarity)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData UrineProductionRate = 51;
inline bool RenalSystemData::_internal_has_urineproductionrate() const {
  return this != internal_default_instance() && urineproductionrate_ != nullptr;
}
inline bool RenalSystemData::has_urineproductionrate() const {
  return _internal_has_urineproductionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::_internal_urineproductionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = urineproductionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RenalSystemData::urineproductionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineProductionRate)
  return _internal_urineproductionrate();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urineproductionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* urineproductionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate_);
  }
  urineproductionrate_ = urineproductionrate;
  if (urineproductionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineProductionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::release_urineproductionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = urineproductionrate_;
  urineproductionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::unsafe_arena_release_urineproductionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineProductionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = urineproductionrate_;
  urineproductionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::_internal_mutable_urineproductionrate() {
  
  if (urineproductionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    urineproductionrate_ = p;
  }
  return urineproductionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RenalSystemData::mutable_urineproductionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineProductionRate)
  return _internal_mutable_urineproductionrate();
}
inline void RenalSystemData::set_allocated_urineproductionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* urineproductionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate_);
  }
  if (urineproductionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineproductionrate)->GetArena();
    if (message_arena != submessage_arena) {
      urineproductionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineproductionrate, submessage_arena);
    }
    
  } else {
    
  }
  urineproductionrate_ = urineproductionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineProductionRate)
}

// .pulse.cdm.bind.ScalarData UrineSpecificGravity = 52;
inline bool RenalSystemData::_internal_has_urinespecificgravity() const {
  return this != internal_default_instance() && urinespecificgravity_ != nullptr;
}
inline bool RenalSystemData::has_urinespecificgravity() const {
  return _internal_has_urinespecificgravity();
}
inline const ::pulse::cdm::bind::ScalarData& RenalSystemData::_internal_urinespecificgravity() const {
  const ::pulse::cdm::bind::ScalarData* p = urinespecificgravity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& RenalSystemData::urinespecificgravity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineSpecificGravity)
  return _internal_urinespecificgravity();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urinespecificgravity(
    ::pulse::cdm::bind::ScalarData* urinespecificgravity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinespecificgravity_);
  }
  urinespecificgravity_ = urinespecificgravity;
  if (urinespecificgravity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineSpecificGravity)
}
inline ::pulse::cdm::bind::ScalarData* RenalSystemData::release_urinespecificgravity() {
  
  ::pulse::cdm::bind::ScalarData* temp = urinespecificgravity_;
  urinespecificgravity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RenalSystemData::unsafe_arena_release_urinespecificgravity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineSpecificGravity)
  
  ::pulse::cdm::bind::ScalarData* temp = urinespecificgravity_;
  urinespecificgravity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RenalSystemData::_internal_mutable_urinespecificgravity() {
  
  if (urinespecificgravity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    urinespecificgravity_ = p;
  }
  return urinespecificgravity_;
}
inline ::pulse::cdm::bind::ScalarData* RenalSystemData::mutable_urinespecificgravity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineSpecificGravity)
  return _internal_mutable_urinespecificgravity();
}
inline void RenalSystemData::set_allocated_urinespecificgravity(::pulse::cdm::bind::ScalarData* urinespecificgravity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinespecificgravity_);
  }
  if (urinespecificgravity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinespecificgravity)->GetArena();
    if (message_arena != submessage_arena) {
      urinespecificgravity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urinespecificgravity, submessage_arena);
    }
    
  } else {
    
  }
  urinespecificgravity_ = urinespecificgravity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineSpecificGravity)
}

// .pulse.cdm.bind.ScalarVolumeData UrineVolume = 53;
inline bool RenalSystemData::_internal_has_urinevolume() const {
  return this != internal_default_instance() && urinevolume_ != nullptr;
}
inline bool RenalSystemData::has_urinevolume() const {
  return _internal_has_urinevolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RenalSystemData::_internal_urinevolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = urinevolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RenalSystemData::urinevolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineVolume)
  return _internal_urinevolume();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urinevolume(
    ::pulse::cdm::bind::ScalarVolumeData* urinevolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinevolume_);
  }
  urinevolume_ = urinevolume;
  if (urinevolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RenalSystemData::release_urinevolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = urinevolume_;
  urinevolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RenalSystemData::unsafe_arena_release_urinevolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = urinevolume_;
  urinevolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RenalSystemData::_internal_mutable_urinevolume() {
  
  if (urinevolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    urinevolume_ = p;
  }
  return urinevolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RenalSystemData::mutable_urinevolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineVolume)
  return _internal_mutable_urinevolume();
}
inline void RenalSystemData::set_allocated_urinevolume(::pulse::cdm::bind::ScalarVolumeData* urinevolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinevolume_);
  }
  if (urinevolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urinevolume)->GetArena();
    if (message_arena != submessage_arena) {
      urinevolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urinevolume, submessage_arena);
    }
    
  } else {
    
  }
  urinevolume_ = urinevolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineVolume)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData UrineUreaNitrogenConcentration = 54;
inline bool RenalSystemData::_internal_has_urineureanitrogenconcentration() const {
  return this != internal_default_instance() && urineureanitrogenconcentration_ != nullptr;
}
inline bool RenalSystemData::has_urineureanitrogenconcentration() const {
  return _internal_has_urineureanitrogenconcentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& RenalSystemData::_internal_urineureanitrogenconcentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = urineureanitrogenconcentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& RenalSystemData::urineureanitrogenconcentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RenalSystemData.UrineUreaNitrogenConcentration)
  return _internal_urineureanitrogenconcentration();
}
inline void RenalSystemData::unsafe_arena_set_allocated_urineureanitrogenconcentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* urineureanitrogenconcentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineureanitrogenconcentration_);
  }
  urineureanitrogenconcentration_ = urineureanitrogenconcentration;
  if (urineureanitrogenconcentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RenalSystemData.UrineUreaNitrogenConcentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* RenalSystemData::release_urineureanitrogenconcentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = urineureanitrogenconcentration_;
  urineureanitrogenconcentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* RenalSystemData::unsafe_arena_release_urineureanitrogenconcentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RenalSystemData.UrineUreaNitrogenConcentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = urineureanitrogenconcentration_;
  urineureanitrogenconcentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* RenalSystemData::_internal_mutable_urineureanitrogenconcentration() {
  
  if (urineureanitrogenconcentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    urineureanitrogenconcentration_ = p;
  }
  return urineureanitrogenconcentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* RenalSystemData::mutable_urineureanitrogenconcentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RenalSystemData.UrineUreaNitrogenConcentration)
  return _internal_mutable_urineureanitrogenconcentration();
}
inline void RenalSystemData::set_allocated_urineureanitrogenconcentration(::pulse::cdm::bind::ScalarMassPerVolumeData* urineureanitrogenconcentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineureanitrogenconcentration_);
  }
  if (urineureanitrogenconcentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(urineureanitrogenconcentration)->GetArena();
    if (message_arena != submessage_arena) {
      urineureanitrogenconcentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, urineureanitrogenconcentration, submessage_arena);
    }
    
  } else {
    
  }
  urineureanitrogenconcentration_ = urineureanitrogenconcentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RenalSystemData.UrineUreaNitrogenConcentration)
}

// -------------------------------------------------------------------

// RespiratorySystemData

// .pulse.cdm.bind.ScalarPressureData AlveolarArterialGradient = 1;
inline bool RespiratorySystemData::_internal_has_alveolararterialgradient() const {
  return this != internal_default_instance() && alveolararterialgradient_ != nullptr;
}
inline bool RespiratorySystemData::has_alveolararterialgradient() const {
  return _internal_has_alveolararterialgradient();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_alveolararterialgradient() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = alveolararterialgradient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::alveolararterialgradient() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.AlveolarArterialGradient)
  return _internal_alveolararterialgradient();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_alveolararterialgradient(
    ::pulse::cdm::bind::ScalarPressureData* alveolararterialgradient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolararterialgradient_);
  }
  alveolararterialgradient_ = alveolararterialgradient;
  if (alveolararterialgradient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.AlveolarArterialGradient)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_alveolararterialgradient() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = alveolararterialgradient_;
  alveolararterialgradient_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_alveolararterialgradient() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.AlveolarArterialGradient)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = alveolararterialgradient_;
  alveolararterialgradient_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_alveolararterialgradient() {
  
  if (alveolararterialgradient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    alveolararterialgradient_ = p;
  }
  return alveolararterialgradient_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_alveolararterialgradient() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.AlveolarArterialGradient)
  return _internal_mutable_alveolararterialgradient();
}
inline void RespiratorySystemData::set_allocated_alveolararterialgradient(::pulse::cdm::bind::ScalarPressureData* alveolararterialgradient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolararterialgradient_);
  }
  if (alveolararterialgradient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolararterialgradient)->GetArena();
    if (message_arena != submessage_arena) {
      alveolararterialgradient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alveolararterialgradient, submessage_arena);
    }
    
  } else {
    
  }
  alveolararterialgradient_ = alveolararterialgradient;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.AlveolarArterialGradient)
}

// .pulse.cdm.bind.ScalarVolumeData AlveolarDeadSpace = 2;
inline bool RespiratorySystemData::_internal_has_alveolardeadspace() const {
  return this != internal_default_instance() && alveolardeadspace_ != nullptr;
}
inline bool RespiratorySystemData::has_alveolardeadspace() const {
  return _internal_has_alveolardeadspace();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::_internal_alveolardeadspace() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = alveolardeadspace_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::alveolardeadspace() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.AlveolarDeadSpace)
  return _internal_alveolardeadspace();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_alveolardeadspace(
    ::pulse::cdm::bind::ScalarVolumeData* alveolardeadspace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolardeadspace_);
  }
  alveolardeadspace_ = alveolardeadspace;
  if (alveolardeadspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.AlveolarDeadSpace)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::release_alveolardeadspace() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = alveolardeadspace_;
  alveolardeadspace_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::unsafe_arena_release_alveolardeadspace() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.AlveolarDeadSpace)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = alveolardeadspace_;
  alveolardeadspace_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::_internal_mutable_alveolardeadspace() {
  
  if (alveolardeadspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    alveolardeadspace_ = p;
  }
  return alveolardeadspace_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::mutable_alveolardeadspace() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.AlveolarDeadSpace)
  return _internal_mutable_alveolardeadspace();
}
inline void RespiratorySystemData::set_allocated_alveolardeadspace(::pulse::cdm::bind::ScalarVolumeData* alveolardeadspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolardeadspace_);
  }
  if (alveolardeadspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alveolardeadspace)->GetArena();
    if (message_arena != submessage_arena) {
      alveolardeadspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alveolardeadspace, submessage_arena);
    }
    
  } else {
    
  }
  alveolardeadspace_ = alveolardeadspace;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.AlveolarDeadSpace)
}

// .pulse.cdm.bind.ScalarVolumeData AnatomicDeadSpace = 3;
inline bool RespiratorySystemData::_internal_has_anatomicdeadspace() const {
  return this != internal_default_instance() && anatomicdeadspace_ != nullptr;
}
inline bool RespiratorySystemData::has_anatomicdeadspace() const {
  return _internal_has_anatomicdeadspace();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::_internal_anatomicdeadspace() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = anatomicdeadspace_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::anatomicdeadspace() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.AnatomicDeadSpace)
  return _internal_anatomicdeadspace();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_anatomicdeadspace(
    ::pulse::cdm::bind::ScalarVolumeData* anatomicdeadspace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anatomicdeadspace_);
  }
  anatomicdeadspace_ = anatomicdeadspace;
  if (anatomicdeadspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.AnatomicDeadSpace)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::release_anatomicdeadspace() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = anatomicdeadspace_;
  anatomicdeadspace_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::unsafe_arena_release_anatomicdeadspace() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.AnatomicDeadSpace)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = anatomicdeadspace_;
  anatomicdeadspace_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::_internal_mutable_anatomicdeadspace() {
  
  if (anatomicdeadspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    anatomicdeadspace_ = p;
  }
  return anatomicdeadspace_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::mutable_anatomicdeadspace() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.AnatomicDeadSpace)
  return _internal_mutable_anatomicdeadspace();
}
inline void RespiratorySystemData::set_allocated_anatomicdeadspace(::pulse::cdm::bind::ScalarVolumeData* anatomicdeadspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anatomicdeadspace_);
  }
  if (anatomicdeadspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anatomicdeadspace)->GetArena();
    if (message_arena != submessage_arena) {
      anatomicdeadspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anatomicdeadspace, submessage_arena);
    }
    
  } else {
    
  }
  anatomicdeadspace_ = anatomicdeadspace;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.AnatomicDeadSpace)
}

// .pulse.cdm.bind.ScalarPressureData CarricoIndex = 4;
inline bool RespiratorySystemData::_internal_has_carricoindex() const {
  return this != internal_default_instance() && carricoindex_ != nullptr;
}
inline bool RespiratorySystemData::has_carricoindex() const {
  return _internal_has_carricoindex();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_carricoindex() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = carricoindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::carricoindex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.CarricoIndex)
  return _internal_carricoindex();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_carricoindex(
    ::pulse::cdm::bind::ScalarPressureData* carricoindex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carricoindex_);
  }
  carricoindex_ = carricoindex;
  if (carricoindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.CarricoIndex)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_carricoindex() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = carricoindex_;
  carricoindex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_carricoindex() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.CarricoIndex)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = carricoindex_;
  carricoindex_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_carricoindex() {
  
  if (carricoindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    carricoindex_ = p;
  }
  return carricoindex_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_carricoindex() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.CarricoIndex)
  return _internal_mutable_carricoindex();
}
inline void RespiratorySystemData::set_allocated_carricoindex(::pulse::cdm::bind::ScalarPressureData* carricoindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carricoindex_);
  }
  if (carricoindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carricoindex)->GetArena();
    if (message_arena != submessage_arena) {
      carricoindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carricoindex, submessage_arena);
    }
    
  } else {
    
  }
  carricoindex_ = carricoindex;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.CarricoIndex)
}

// .pulse.cdm.bind.ScalarVolumePerPressureData ChestWallCompliance = 5;
inline bool RespiratorySystemData::_internal_has_chestwallcompliance() const {
  return this != internal_default_instance() && chestwallcompliance_ != nullptr;
}
inline bool RespiratorySystemData::has_chestwallcompliance() const {
  return _internal_has_chestwallcompliance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::_internal_chestwallcompliance() const {
  const ::pulse::cdm::bind::ScalarVolumePerPressureData* p = chestwallcompliance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerPressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::chestwallcompliance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ChestWallCompliance)
  return _internal_chestwallcompliance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_chestwallcompliance(
    ::pulse::cdm::bind::ScalarVolumePerPressureData* chestwallcompliance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chestwallcompliance_);
  }
  chestwallcompliance_ = chestwallcompliance;
  if (chestwallcompliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ChestWallCompliance)
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::release_chestwallcompliance() {
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = chestwallcompliance_;
  chestwallcompliance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::unsafe_arena_release_chestwallcompliance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ChestWallCompliance)
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = chestwallcompliance_;
  chestwallcompliance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::_internal_mutable_chestwallcompliance() {
  
  if (chestwallcompliance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerPressureData>(GetArena());
    chestwallcompliance_ = p;
  }
  return chestwallcompliance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::mutable_chestwallcompliance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ChestWallCompliance)
  return _internal_mutable_chestwallcompliance();
}
inline void RespiratorySystemData::set_allocated_chestwallcompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* chestwallcompliance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chestwallcompliance_);
  }
  if (chestwallcompliance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chestwallcompliance)->GetArena();
    if (message_arena != submessage_arena) {
      chestwallcompliance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestwallcompliance, submessage_arena);
    }
    
  } else {
    
  }
  chestwallcompliance_ = chestwallcompliance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ChestWallCompliance)
}

// .pulse.cdm.bind.ScalarEnergyData ElasticWorkOfBreathing = 6;
inline bool RespiratorySystemData::_internal_has_elasticworkofbreathing() const {
  return this != internal_default_instance() && elasticworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_elasticworkofbreathing() const {
  return _internal_has_elasticworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_elasticworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = elasticworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::elasticworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ElasticWorkOfBreathing)
  return _internal_elasticworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_elasticworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* elasticworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elasticworkofbreathing_);
  }
  elasticworkofbreathing_ = elasticworkofbreathing;
  if (elasticworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ElasticWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_elasticworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = elasticworkofbreathing_;
  elasticworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_elasticworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ElasticWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = elasticworkofbreathing_;
  elasticworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_elasticworkofbreathing() {
  
  if (elasticworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    elasticworkofbreathing_ = p;
  }
  return elasticworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_elasticworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ElasticWorkOfBreathing)
  return _internal_mutable_elasticworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_elasticworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* elasticworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(elasticworkofbreathing_);
  }
  if (elasticworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elasticworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      elasticworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elasticworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  elasticworkofbreathing_ = elasticworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ElasticWorkOfBreathing)
}

// .pulse.cdm.bind.Scalar0To1Data EndTidalCarbonDioxideFraction = 7;
inline bool RespiratorySystemData::_internal_has_endtidalcarbondioxidefraction() const {
  return this != internal_default_instance() && endtidalcarbondioxidefraction_ != nullptr;
}
inline bool RespiratorySystemData::has_endtidalcarbondioxidefraction() const {
  return _internal_has_endtidalcarbondioxidefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::_internal_endtidalcarbondioxidefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = endtidalcarbondioxidefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::endtidalcarbondioxidefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxideFraction)
  return _internal_endtidalcarbondioxidefraction();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_endtidalcarbondioxidefraction(
    ::pulse::cdm::bind::Scalar0To1Data* endtidalcarbondioxidefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidefraction_);
  }
  endtidalcarbondioxidefraction_ = endtidalcarbondioxidefraction;
  if (endtidalcarbondioxidefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxideFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::release_endtidalcarbondioxidefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidalcarbondioxidefraction_;
  endtidalcarbondioxidefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::unsafe_arena_release_endtidalcarbondioxidefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxideFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidalcarbondioxidefraction_;
  endtidalcarbondioxidefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::_internal_mutable_endtidalcarbondioxidefraction() {
  
  if (endtidalcarbondioxidefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    endtidalcarbondioxidefraction_ = p;
  }
  return endtidalcarbondioxidefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::mutable_endtidalcarbondioxidefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxideFraction)
  return _internal_mutable_endtidalcarbondioxidefraction();
}
inline void RespiratorySystemData::set_allocated_endtidalcarbondioxidefraction(::pulse::cdm::bind::Scalar0To1Data* endtidalcarbondioxidefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidefraction_);
  }
  if (endtidalcarbondioxidefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidefraction)->GetArena();
    if (message_arena != submessage_arena) {
      endtidalcarbondioxidefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidalcarbondioxidefraction, submessage_arena);
    }
    
  } else {
    
  }
  endtidalcarbondioxidefraction_ = endtidalcarbondioxidefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxideFraction)
}

// .pulse.cdm.bind.ScalarPressureData EndTidalCarbonDioxidePressure = 8;
inline bool RespiratorySystemData::_internal_has_endtidalcarbondioxidepressure() const {
  return this != internal_default_instance() && endtidalcarbondioxidepressure_ != nullptr;
}
inline bool RespiratorySystemData::has_endtidalcarbondioxidepressure() const {
  return _internal_has_endtidalcarbondioxidepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_endtidalcarbondioxidepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = endtidalcarbondioxidepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::endtidalcarbondioxidepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxidePressure)
  return _internal_endtidalcarbondioxidepressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_endtidalcarbondioxidepressure(
    ::pulse::cdm::bind::ScalarPressureData* endtidalcarbondioxidepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidepressure_);
  }
  endtidalcarbondioxidepressure_ = endtidalcarbondioxidepressure;
  if (endtidalcarbondioxidepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxidePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_endtidalcarbondioxidepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidalcarbondioxidepressure_;
  endtidalcarbondioxidepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_endtidalcarbondioxidepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxidePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidalcarbondioxidepressure_;
  endtidalcarbondioxidepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_endtidalcarbondioxidepressure() {
  
  if (endtidalcarbondioxidepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    endtidalcarbondioxidepressure_ = p;
  }
  return endtidalcarbondioxidepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_endtidalcarbondioxidepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxidePressure)
  return _internal_mutable_endtidalcarbondioxidepressure();
}
inline void RespiratorySystemData::set_allocated_endtidalcarbondioxidepressure(::pulse::cdm::bind::ScalarPressureData* endtidalcarbondioxidepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidepressure_);
  }
  if (endtidalcarbondioxidepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidalcarbondioxidepressure)->GetArena();
    if (message_arena != submessage_arena) {
      endtidalcarbondioxidepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidalcarbondioxidepressure, submessage_arena);
    }
    
  } else {
    
  }
  endtidalcarbondioxidepressure_ = endtidalcarbondioxidepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalCarbonDioxidePressure)
}

// .pulse.cdm.bind.Scalar0To1Data EndTidalOxygenFraction = 9;
inline bool RespiratorySystemData::_internal_has_endtidaloxygenfraction() const {
  return this != internal_default_instance() && endtidaloxygenfraction_ != nullptr;
}
inline bool RespiratorySystemData::has_endtidaloxygenfraction() const {
  return _internal_has_endtidaloxygenfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::_internal_endtidaloxygenfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = endtidaloxygenfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::endtidaloxygenfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenFraction)
  return _internal_endtidaloxygenfraction();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_endtidaloxygenfraction(
    ::pulse::cdm::bind::Scalar0To1Data* endtidaloxygenfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenfraction_);
  }
  endtidaloxygenfraction_ = endtidaloxygenfraction;
  if (endtidaloxygenfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::release_endtidaloxygenfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidaloxygenfraction_;
  endtidaloxygenfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::unsafe_arena_release_endtidaloxygenfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = endtidaloxygenfraction_;
  endtidaloxygenfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::_internal_mutable_endtidaloxygenfraction() {
  
  if (endtidaloxygenfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    endtidaloxygenfraction_ = p;
  }
  return endtidaloxygenfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::mutable_endtidaloxygenfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenFraction)
  return _internal_mutable_endtidaloxygenfraction();
}
inline void RespiratorySystemData::set_allocated_endtidaloxygenfraction(::pulse::cdm::bind::Scalar0To1Data* endtidaloxygenfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenfraction_);
  }
  if (endtidaloxygenfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenfraction)->GetArena();
    if (message_arena != submessage_arena) {
      endtidaloxygenfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidaloxygenfraction, submessage_arena);
    }
    
  } else {
    
  }
  endtidaloxygenfraction_ = endtidaloxygenfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenFraction)
}

// .pulse.cdm.bind.ScalarPressureData EndTidalOxygenPressure = 10;
inline bool RespiratorySystemData::_internal_has_endtidaloxygenpressure() const {
  return this != internal_default_instance() && endtidaloxygenpressure_ != nullptr;
}
inline bool RespiratorySystemData::has_endtidaloxygenpressure() const {
  return _internal_has_endtidaloxygenpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_endtidaloxygenpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = endtidaloxygenpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::endtidaloxygenpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenPressure)
  return _internal_endtidaloxygenpressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_endtidaloxygenpressure(
    ::pulse::cdm::bind::ScalarPressureData* endtidaloxygenpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenpressure_);
  }
  endtidaloxygenpressure_ = endtidaloxygenpressure;
  if (endtidaloxygenpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_endtidaloxygenpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidaloxygenpressure_;
  endtidaloxygenpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_endtidaloxygenpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = endtidaloxygenpressure_;
  endtidaloxygenpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_endtidaloxygenpressure() {
  
  if (endtidaloxygenpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    endtidaloxygenpressure_ = p;
  }
  return endtidaloxygenpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_endtidaloxygenpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenPressure)
  return _internal_mutable_endtidaloxygenpressure();
}
inline void RespiratorySystemData::set_allocated_endtidaloxygenpressure(::pulse::cdm::bind::ScalarPressureData* endtidaloxygenpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenpressure_);
  }
  if (endtidaloxygenpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtidaloxygenpressure)->GetArena();
    if (message_arena != submessage_arena) {
      endtidaloxygenpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtidaloxygenpressure, submessage_arena);
    }
    
  } else {
    
  }
  endtidaloxygenpressure_ = endtidaloxygenpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.EndTidalOxygenPressure)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData ExpiratoryFlow = 11;
inline bool RespiratorySystemData::_internal_has_expiratoryflow() const {
  return this != internal_default_instance() && expiratoryflow_ != nullptr;
}
inline bool RespiratorySystemData::has_expiratoryflow() const {
  return _internal_has_expiratoryflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::_internal_expiratoryflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = expiratoryflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::expiratoryflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ExpiratoryFlow)
  return _internal_expiratoryflow();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_expiratoryflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* expiratoryflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryflow_);
  }
  expiratoryflow_ = expiratoryflow;
  if (expiratoryflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ExpiratoryFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::release_expiratoryflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = expiratoryflow_;
  expiratoryflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::unsafe_arena_release_expiratoryflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ExpiratoryFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = expiratoryflow_;
  expiratoryflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::_internal_mutable_expiratoryflow() {
  
  if (expiratoryflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    expiratoryflow_ = p;
  }
  return expiratoryflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::mutable_expiratoryflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ExpiratoryFlow)
  return _internal_mutable_expiratoryflow();
}
inline void RespiratorySystemData::set_allocated_expiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* expiratoryflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryflow_);
  }
  if (expiratoryflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryflow)->GetArena();
    if (message_arena != submessage_arena) {
      expiratoryflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryflow, submessage_arena);
    }
    
  } else {
    
  }
  expiratoryflow_ = expiratoryflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ExpiratoryFlow)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData ExpiratoryPulmonaryResistance = 12;
inline bool RespiratorySystemData::_internal_has_expiratorypulmonaryresistance() const {
  return this != internal_default_instance() && expiratorypulmonaryresistance_ != nullptr;
}
inline bool RespiratorySystemData::has_expiratorypulmonaryresistance() const {
  return _internal_has_expiratorypulmonaryresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RespiratorySystemData::_internal_expiratorypulmonaryresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = expiratorypulmonaryresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RespiratorySystemData::expiratorypulmonaryresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ExpiratoryPulmonaryResistance)
  return _internal_expiratorypulmonaryresistance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_expiratorypulmonaryresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* expiratorypulmonaryresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratorypulmonaryresistance_);
  }
  expiratorypulmonaryresistance_ = expiratorypulmonaryresistance;
  if (expiratorypulmonaryresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ExpiratoryPulmonaryResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::release_expiratorypulmonaryresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = expiratorypulmonaryresistance_;
  expiratorypulmonaryresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::unsafe_arena_release_expiratorypulmonaryresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ExpiratoryPulmonaryResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = expiratorypulmonaryresistance_;
  expiratorypulmonaryresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::_internal_mutable_expiratorypulmonaryresistance() {
  
  if (expiratorypulmonaryresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    expiratorypulmonaryresistance_ = p;
  }
  return expiratorypulmonaryresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::mutable_expiratorypulmonaryresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ExpiratoryPulmonaryResistance)
  return _internal_mutable_expiratorypulmonaryresistance();
}
inline void RespiratorySystemData::set_allocated_expiratorypulmonaryresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* expiratorypulmonaryresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratorypulmonaryresistance_);
  }
  if (expiratorypulmonaryresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratorypulmonaryresistance)->GetArena();
    if (message_arena != submessage_arena) {
      expiratorypulmonaryresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratorypulmonaryresistance, submessage_arena);
    }
    
  } else {
    
  }
  expiratorypulmonaryresistance_ = expiratorypulmonaryresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ExpiratoryPulmonaryResistance)
}

// .pulse.cdm.bind.Scalar0To1Data FractionOfInsipredOxygen = 13;
inline bool RespiratorySystemData::_internal_has_fractionofinsipredoxygen() const {
  return this != internal_default_instance() && fractionofinsipredoxygen_ != nullptr;
}
inline bool RespiratorySystemData::has_fractionofinsipredoxygen() const {
  return _internal_has_fractionofinsipredoxygen();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::_internal_fractionofinsipredoxygen() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = fractionofinsipredoxygen_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::fractionofinsipredoxygen() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.FractionOfInsipredOxygen)
  return _internal_fractionofinsipredoxygen();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_fractionofinsipredoxygen(
    ::pulse::cdm::bind::Scalar0To1Data* fractionofinsipredoxygen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionofinsipredoxygen_);
  }
  fractionofinsipredoxygen_ = fractionofinsipredoxygen;
  if (fractionofinsipredoxygen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.FractionOfInsipredOxygen)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::release_fractionofinsipredoxygen() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionofinsipredoxygen_;
  fractionofinsipredoxygen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::unsafe_arena_release_fractionofinsipredoxygen() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.FractionOfInsipredOxygen)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = fractionofinsipredoxygen_;
  fractionofinsipredoxygen_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::_internal_mutable_fractionofinsipredoxygen() {
  
  if (fractionofinsipredoxygen_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    fractionofinsipredoxygen_ = p;
  }
  return fractionofinsipredoxygen_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::mutable_fractionofinsipredoxygen() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.FractionOfInsipredOxygen)
  return _internal_mutable_fractionofinsipredoxygen();
}
inline void RespiratorySystemData::set_allocated_fractionofinsipredoxygen(::pulse::cdm::bind::Scalar0To1Data* fractionofinsipredoxygen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionofinsipredoxygen_);
  }
  if (fractionofinsipredoxygen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fractionofinsipredoxygen)->GetArena();
    if (message_arena != submessage_arena) {
      fractionofinsipredoxygen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fractionofinsipredoxygen, submessage_arena);
    }
    
  } else {
    
  }
  fractionofinsipredoxygen_ = fractionofinsipredoxygen;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.FractionOfInsipredOxygen)
}

// .pulse.cdm.bind.ScalarPowerData ImposedPowerOfBreathing = 14;
inline bool RespiratorySystemData::_internal_has_imposedpowerofbreathing() const {
  return this != internal_default_instance() && imposedpowerofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_imposedpowerofbreathing() const {
  return _internal_has_imposedpowerofbreathing();
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::_internal_imposedpowerofbreathing() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = imposedpowerofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::imposedpowerofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ImposedPowerOfBreathing)
  return _internal_imposedpowerofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_imposedpowerofbreathing(
    ::pulse::cdm::bind::ScalarPowerData* imposedpowerofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedpowerofbreathing_);
  }
  imposedpowerofbreathing_ = imposedpowerofbreathing;
  if (imposedpowerofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ImposedPowerOfBreathing)
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::release_imposedpowerofbreathing() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = imposedpowerofbreathing_;
  imposedpowerofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::unsafe_arena_release_imposedpowerofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ImposedPowerOfBreathing)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = imposedpowerofbreathing_;
  imposedpowerofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::_internal_mutable_imposedpowerofbreathing() {
  
  if (imposedpowerofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    imposedpowerofbreathing_ = p;
  }
  return imposedpowerofbreathing_;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::mutable_imposedpowerofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ImposedPowerOfBreathing)
  return _internal_mutable_imposedpowerofbreathing();
}
inline void RespiratorySystemData::set_allocated_imposedpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* imposedpowerofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedpowerofbreathing_);
  }
  if (imposedpowerofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedpowerofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      imposedpowerofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imposedpowerofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  imposedpowerofbreathing_ = imposedpowerofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ImposedPowerOfBreathing)
}

// .pulse.cdm.bind.ScalarEnergyData ImposedWorkOfBreathing = 15;
inline bool RespiratorySystemData::_internal_has_imposedworkofbreathing() const {
  return this != internal_default_instance() && imposedworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_imposedworkofbreathing() const {
  return _internal_has_imposedworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_imposedworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = imposedworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::imposedworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ImposedWorkOfBreathing)
  return _internal_imposedworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_imposedworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* imposedworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedworkofbreathing_);
  }
  imposedworkofbreathing_ = imposedworkofbreathing;
  if (imposedworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ImposedWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_imposedworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = imposedworkofbreathing_;
  imposedworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_imposedworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ImposedWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = imposedworkofbreathing_;
  imposedworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_imposedworkofbreathing() {
  
  if (imposedworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    imposedworkofbreathing_ = p;
  }
  return imposedworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_imposedworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ImposedWorkOfBreathing)
  return _internal_mutable_imposedworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_imposedworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* imposedworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedworkofbreathing_);
  }
  if (imposedworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imposedworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      imposedworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imposedworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  imposedworkofbreathing_ = imposedworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ImposedWorkOfBreathing)
}

// .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 16;
inline bool RespiratorySystemData::_internal_has_inspiratoryexpiratoryratio() const {
  return this != internal_default_instance() && inspiratoryexpiratoryratio_ != nullptr;
}
inline bool RespiratorySystemData::has_inspiratoryexpiratoryratio() const {
  return _internal_has_inspiratoryexpiratoryratio();
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::_internal_inspiratoryexpiratoryratio() const {
  const ::pulse::cdm::bind::ScalarData* p = inspiratoryexpiratoryratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::inspiratoryexpiratoryratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.InspiratoryExpiratoryRatio)
  return _internal_inspiratoryexpiratoryratio();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_inspiratoryexpiratoryratio(
    ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio_);
  }
  inspiratoryexpiratoryratio_ = inspiratoryexpiratoryratio;
  if (inspiratoryexpiratoryratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryExpiratoryRatio)
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::release_inspiratoryexpiratoryratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = inspiratoryexpiratoryratio_;
  inspiratoryexpiratoryratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::unsafe_arena_release_inspiratoryexpiratoryratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.InspiratoryExpiratoryRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = inspiratoryexpiratoryratio_;
  inspiratoryexpiratoryratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::_internal_mutable_inspiratoryexpiratoryratio() {
  
  if (inspiratoryexpiratoryratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    inspiratoryexpiratoryratio_ = p;
  }
  return inspiratoryexpiratoryratio_;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::mutable_inspiratoryexpiratoryratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.InspiratoryExpiratoryRatio)
  return _internal_mutable_inspiratoryexpiratoryratio();
}
inline void RespiratorySystemData::set_allocated_inspiratoryexpiratoryratio(::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio_);
  }
  if (inspiratoryexpiratoryratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratoryexpiratoryratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryexpiratoryratio, submessage_arena);
    }
    
  } else {
    
  }
  inspiratoryexpiratoryratio_ = inspiratoryexpiratoryratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryExpiratoryRatio)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData InspiratoryFlow = 17;
inline bool RespiratorySystemData::_internal_has_inspiratoryflow() const {
  return this != internal_default_instance() && inspiratoryflow_ != nullptr;
}
inline bool RespiratorySystemData::has_inspiratoryflow() const {
  return _internal_has_inspiratoryflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::_internal_inspiratoryflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = inspiratoryflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::inspiratoryflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.InspiratoryFlow)
  return _internal_inspiratoryflow();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_inspiratoryflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* inspiratoryflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryflow_);
  }
  inspiratoryflow_ = inspiratoryflow;
  if (inspiratoryflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::release_inspiratoryflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inspiratoryflow_;
  inspiratoryflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::unsafe_arena_release_inspiratoryflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.InspiratoryFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inspiratoryflow_;
  inspiratoryflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::_internal_mutable_inspiratoryflow() {
  
  if (inspiratoryflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    inspiratoryflow_ = p;
  }
  return inspiratoryflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::mutable_inspiratoryflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.InspiratoryFlow)
  return _internal_mutable_inspiratoryflow();
}
inline void RespiratorySystemData::set_allocated_inspiratoryflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inspiratoryflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryflow_);
  }
  if (inspiratoryflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryflow)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratoryflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryflow, submessage_arena);
    }
    
  } else {
    
  }
  inspiratoryflow_ = inspiratoryflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryFlow)
}

// .pulse.cdm.bind.ScalarPressureTimePerVolumeData InspiratoryPulmonaryResistance = 18;
inline bool RespiratorySystemData::_internal_has_inspiratorypulmonaryresistance() const {
  return this != internal_default_instance() && inspiratorypulmonaryresistance_ != nullptr;
}
inline bool RespiratorySystemData::has_inspiratorypulmonaryresistance() const {
  return _internal_has_inspiratorypulmonaryresistance();
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RespiratorySystemData::_internal_inspiratorypulmonaryresistance() const {
  const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* p = inspiratorypulmonaryresistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressureTimePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureTimePerVolumeData& RespiratorySystemData::inspiratorypulmonaryresistance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.InspiratoryPulmonaryResistance)
  return _internal_inspiratorypulmonaryresistance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_inspiratorypulmonaryresistance(
    ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* inspiratorypulmonaryresistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorypulmonaryresistance_);
  }
  inspiratorypulmonaryresistance_ = inspiratorypulmonaryresistance;
  if (inspiratorypulmonaryresistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryPulmonaryResistance)
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::release_inspiratorypulmonaryresistance() {
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = inspiratorypulmonaryresistance_;
  inspiratorypulmonaryresistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::unsafe_arena_release_inspiratorypulmonaryresistance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.InspiratoryPulmonaryResistance)
  
  ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* temp = inspiratorypulmonaryresistance_;
  inspiratorypulmonaryresistance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::_internal_mutable_inspiratorypulmonaryresistance() {
  
  if (inspiratorypulmonaryresistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureTimePerVolumeData>(GetArena());
    inspiratorypulmonaryresistance_ = p;
  }
  return inspiratorypulmonaryresistance_;
}
inline ::pulse::cdm::bind::ScalarPressureTimePerVolumeData* RespiratorySystemData::mutable_inspiratorypulmonaryresistance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.InspiratoryPulmonaryResistance)
  return _internal_mutable_inspiratorypulmonaryresistance();
}
inline void RespiratorySystemData::set_allocated_inspiratorypulmonaryresistance(::pulse::cdm::bind::ScalarPressureTimePerVolumeData* inspiratorypulmonaryresistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorypulmonaryresistance_);
  }
  if (inspiratorypulmonaryresistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorypulmonaryresistance)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratorypulmonaryresistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratorypulmonaryresistance, submessage_arena);
    }
    
  } else {
    
  }
  inspiratorypulmonaryresistance_ = inspiratorypulmonaryresistance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.InspiratoryPulmonaryResistance)
}

// .pulse.cdm.bind.ScalarPressureData IntrapleuralPressure = 19;
inline bool RespiratorySystemData::_internal_has_intrapleuralpressure() const {
  return this != internal_default_instance() && intrapleuralpressure_ != nullptr;
}
inline bool RespiratorySystemData::has_intrapleuralpressure() const {
  return _internal_has_intrapleuralpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_intrapleuralpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = intrapleuralpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::intrapleuralpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.IntrapleuralPressure)
  return _internal_intrapleuralpressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_intrapleuralpressure(
    ::pulse::cdm::bind::ScalarPressureData* intrapleuralpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapleuralpressure_);
  }
  intrapleuralpressure_ = intrapleuralpressure;
  if (intrapleuralpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.IntrapleuralPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_intrapleuralpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intrapleuralpressure_;
  intrapleuralpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_intrapleuralpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.IntrapleuralPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intrapleuralpressure_;
  intrapleuralpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_intrapleuralpressure() {
  
  if (intrapleuralpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    intrapleuralpressure_ = p;
  }
  return intrapleuralpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_intrapleuralpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.IntrapleuralPressure)
  return _internal_mutable_intrapleuralpressure();
}
inline void RespiratorySystemData::set_allocated_intrapleuralpressure(::pulse::cdm::bind::ScalarPressureData* intrapleuralpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapleuralpressure_);
  }
  if (intrapleuralpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapleuralpressure)->GetArena();
    if (message_arena != submessage_arena) {
      intrapleuralpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrapleuralpressure, submessage_arena);
    }
    
  } else {
    
  }
  intrapleuralpressure_ = intrapleuralpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.IntrapleuralPressure)
}

// .pulse.cdm.bind.ScalarPressureData IntrapulmonaryPressure = 20;
inline bool RespiratorySystemData::_internal_has_intrapulmonarypressure() const {
  return this != internal_default_instance() && intrapulmonarypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_intrapulmonarypressure() const {
  return _internal_has_intrapulmonarypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_intrapulmonarypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = intrapulmonarypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::intrapulmonarypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.IntrapulmonaryPressure)
  return _internal_intrapulmonarypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_intrapulmonarypressure(
    ::pulse::cdm::bind::ScalarPressureData* intrapulmonarypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapulmonarypressure_);
  }
  intrapulmonarypressure_ = intrapulmonarypressure;
  if (intrapulmonarypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.IntrapulmonaryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_intrapulmonarypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intrapulmonarypressure_;
  intrapulmonarypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_intrapulmonarypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.IntrapulmonaryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = intrapulmonarypressure_;
  intrapulmonarypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_intrapulmonarypressure() {
  
  if (intrapulmonarypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    intrapulmonarypressure_ = p;
  }
  return intrapulmonarypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_intrapulmonarypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.IntrapulmonaryPressure)
  return _internal_mutable_intrapulmonarypressure();
}
inline void RespiratorySystemData::set_allocated_intrapulmonarypressure(::pulse::cdm::bind::ScalarPressureData* intrapulmonarypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapulmonarypressure_);
  }
  if (intrapulmonarypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrapulmonarypressure)->GetArena();
    if (message_arena != submessage_arena) {
      intrapulmonarypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrapulmonarypressure, submessage_arena);
    }
    
  } else {
    
  }
  intrapulmonarypressure_ = intrapulmonarypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.IntrapulmonaryPressure)
}

// .pulse.cdm.bind.ScalarVolumePerPressureData LungCompliance = 21;
inline bool RespiratorySystemData::_internal_has_lungcompliance() const {
  return this != internal_default_instance() && lungcompliance_ != nullptr;
}
inline bool RespiratorySystemData::has_lungcompliance() const {
  return _internal_has_lungcompliance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::_internal_lungcompliance() const {
  const ::pulse::cdm::bind::ScalarVolumePerPressureData* p = lungcompliance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerPressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::lungcompliance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.LungCompliance)
  return _internal_lungcompliance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_lungcompliance(
    ::pulse::cdm::bind::ScalarVolumePerPressureData* lungcompliance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungcompliance_);
  }
  lungcompliance_ = lungcompliance;
  if (lungcompliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.LungCompliance)
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::release_lungcompliance() {
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = lungcompliance_;
  lungcompliance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::unsafe_arena_release_lungcompliance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.LungCompliance)
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = lungcompliance_;
  lungcompliance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::_internal_mutable_lungcompliance() {
  
  if (lungcompliance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerPressureData>(GetArena());
    lungcompliance_ = p;
  }
  return lungcompliance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::mutable_lungcompliance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.LungCompliance)
  return _internal_mutable_lungcompliance();
}
inline void RespiratorySystemData::set_allocated_lungcompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* lungcompliance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungcompliance_);
  }
  if (lungcompliance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lungcompliance)->GetArena();
    if (message_arena != submessage_arena) {
      lungcompliance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lungcompliance, submessage_arena);
    }
    
  } else {
    
  }
  lungcompliance_ = lungcompliance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.LungCompliance)
}

// .pulse.cdm.bind.ScalarPressureData MaximalInspiratoryPressure = 22;
inline bool RespiratorySystemData::_internal_has_maximalinspiratorypressure() const {
  return this != internal_default_instance() && maximalinspiratorypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_maximalinspiratorypressure() const {
  return _internal_has_maximalinspiratorypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_maximalinspiratorypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = maximalinspiratorypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::maximalinspiratorypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.MaximalInspiratoryPressure)
  return _internal_maximalinspiratorypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_maximalinspiratorypressure(
    ::pulse::cdm::bind::ScalarPressureData* maximalinspiratorypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximalinspiratorypressure_);
  }
  maximalinspiratorypressure_ = maximalinspiratorypressure;
  if (maximalinspiratorypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.MaximalInspiratoryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_maximalinspiratorypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = maximalinspiratorypressure_;
  maximalinspiratorypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_maximalinspiratorypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.MaximalInspiratoryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = maximalinspiratorypressure_;
  maximalinspiratorypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_maximalinspiratorypressure() {
  
  if (maximalinspiratorypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    maximalinspiratorypressure_ = p;
  }
  return maximalinspiratorypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_maximalinspiratorypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.MaximalInspiratoryPressure)
  return _internal_mutable_maximalinspiratorypressure();
}
inline void RespiratorySystemData::set_allocated_maximalinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* maximalinspiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximalinspiratorypressure_);
  }
  if (maximalinspiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximalinspiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      maximalinspiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximalinspiratorypressure, submessage_arena);
    }
    
  } else {
    
  }
  maximalinspiratorypressure_ = maximalinspiratorypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.MaximalInspiratoryPressure)
}

// .pulse.cdm.bind.ScalarPressureData MeanAirwayPressure = 23;
inline bool RespiratorySystemData::_internal_has_meanairwaypressure() const {
  return this != internal_default_instance() && meanairwaypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_meanairwaypressure() const {
  return _internal_has_meanairwaypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_meanairwaypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = meanairwaypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::meanairwaypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.MeanAirwayPressure)
  return _internal_meanairwaypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_meanairwaypressure(
    ::pulse::cdm::bind::ScalarPressureData* meanairwaypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure_);
  }
  meanairwaypressure_ = meanairwaypressure;
  if (meanairwaypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.MeanAirwayPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_meanairwaypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanairwaypressure_;
  meanairwaypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_meanairwaypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.MeanAirwayPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = meanairwaypressure_;
  meanairwaypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_meanairwaypressure() {
  
  if (meanairwaypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    meanairwaypressure_ = p;
  }
  return meanairwaypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_meanairwaypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.MeanAirwayPressure)
  return _internal_mutable_meanairwaypressure();
}
inline void RespiratorySystemData::set_allocated_meanairwaypressure(::pulse::cdm::bind::ScalarPressureData* meanairwaypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure_);
  }
  if (meanairwaypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanairwaypressure)->GetArena();
    if (message_arena != submessage_arena) {
      meanairwaypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanairwaypressure, submessage_arena);
    }
    
  } else {
    
  }
  meanairwaypressure_ = meanairwaypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.MeanAirwayPressure)
}

// .pulse.cdm.bind.ScalarData OxygenationIndex = 24;
inline bool RespiratorySystemData::_internal_has_oxygenationindex() const {
  return this != internal_default_instance() && oxygenationindex_ != nullptr;
}
inline bool RespiratorySystemData::has_oxygenationindex() const {
  return _internal_has_oxygenationindex();
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::_internal_oxygenationindex() const {
  const ::pulse::cdm::bind::ScalarData* p = oxygenationindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::oxygenationindex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.OxygenationIndex)
  return _internal_oxygenationindex();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_oxygenationindex(
    ::pulse::cdm::bind::ScalarData* oxygenationindex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenationindex_);
  }
  oxygenationindex_ = oxygenationindex;
  if (oxygenationindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.OxygenationIndex)
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::release_oxygenationindex() {
  
  ::pulse::cdm::bind::ScalarData* temp = oxygenationindex_;
  oxygenationindex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::unsafe_arena_release_oxygenationindex() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.OxygenationIndex)
  
  ::pulse::cdm::bind::ScalarData* temp = oxygenationindex_;
  oxygenationindex_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::_internal_mutable_oxygenationindex() {
  
  if (oxygenationindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    oxygenationindex_ = p;
  }
  return oxygenationindex_;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::mutable_oxygenationindex() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.OxygenationIndex)
  return _internal_mutable_oxygenationindex();
}
inline void RespiratorySystemData::set_allocated_oxygenationindex(::pulse::cdm::bind::ScalarData* oxygenationindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenationindex_);
  }
  if (oxygenationindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenationindex)->GetArena();
    if (message_arena != submessage_arena) {
      oxygenationindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenationindex, submessage_arena);
    }
    
  } else {
    
  }
  oxygenationindex_ = oxygenationindex;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.OxygenationIndex)
}

// .pulse.cdm.bind.ScalarPressureData OxygenSaturationIndex = 25;
inline bool RespiratorySystemData::_internal_has_oxygensaturationindex() const {
  return this != internal_default_instance() && oxygensaturationindex_ != nullptr;
}
inline bool RespiratorySystemData::has_oxygensaturationindex() const {
  return _internal_has_oxygensaturationindex();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_oxygensaturationindex() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = oxygensaturationindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::oxygensaturationindex() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.OxygenSaturationIndex)
  return _internal_oxygensaturationindex();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_oxygensaturationindex(
    ::pulse::cdm::bind::ScalarPressureData* oxygensaturationindex) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturationindex_);
  }
  oxygensaturationindex_ = oxygensaturationindex;
  if (oxygensaturationindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.OxygenSaturationIndex)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_oxygensaturationindex() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = oxygensaturationindex_;
  oxygensaturationindex_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_oxygensaturationindex() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.OxygenSaturationIndex)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = oxygensaturationindex_;
  oxygensaturationindex_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_oxygensaturationindex() {
  
  if (oxygensaturationindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    oxygensaturationindex_ = p;
  }
  return oxygensaturationindex_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_oxygensaturationindex() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.OxygenSaturationIndex)
  return _internal_mutable_oxygensaturationindex();
}
inline void RespiratorySystemData::set_allocated_oxygensaturationindex(::pulse::cdm::bind::ScalarPressureData* oxygensaturationindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturationindex_);
  }
  if (oxygensaturationindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygensaturationindex)->GetArena();
    if (message_arena != submessage_arena) {
      oxygensaturationindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygensaturationindex, submessage_arena);
    }
    
  } else {
    
  }
  oxygensaturationindex_ = oxygensaturationindex;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.OxygenSaturationIndex)
}

// .pulse.cdm.bind.ScalarPowerData PatientPowerOfBreathing = 26;
inline bool RespiratorySystemData::_internal_has_patientpowerofbreathing() const {
  return this != internal_default_instance() && patientpowerofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_patientpowerofbreathing() const {
  return _internal_has_patientpowerofbreathing();
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::_internal_patientpowerofbreathing() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = patientpowerofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::patientpowerofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PatientPowerOfBreathing)
  return _internal_patientpowerofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_patientpowerofbreathing(
    ::pulse::cdm::bind::ScalarPowerData* patientpowerofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientpowerofbreathing_);
  }
  patientpowerofbreathing_ = patientpowerofbreathing;
  if (patientpowerofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PatientPowerOfBreathing)
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::release_patientpowerofbreathing() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = patientpowerofbreathing_;
  patientpowerofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::unsafe_arena_release_patientpowerofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PatientPowerOfBreathing)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = patientpowerofbreathing_;
  patientpowerofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::_internal_mutable_patientpowerofbreathing() {
  
  if (patientpowerofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    patientpowerofbreathing_ = p;
  }
  return patientpowerofbreathing_;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::mutable_patientpowerofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PatientPowerOfBreathing)
  return _internal_mutable_patientpowerofbreathing();
}
inline void RespiratorySystemData::set_allocated_patientpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* patientpowerofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientpowerofbreathing_);
  }
  if (patientpowerofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientpowerofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      patientpowerofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientpowerofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  patientpowerofbreathing_ = patientpowerofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PatientPowerOfBreathing)
}

// .pulse.cdm.bind.ScalarEnergyData PatientWorkOfBreathing = 27;
inline bool RespiratorySystemData::_internal_has_patientworkofbreathing() const {
  return this != internal_default_instance() && patientworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_patientworkofbreathing() const {
  return _internal_has_patientworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_patientworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = patientworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::patientworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PatientWorkOfBreathing)
  return _internal_patientworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_patientworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* patientworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientworkofbreathing_);
  }
  patientworkofbreathing_ = patientworkofbreathing;
  if (patientworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PatientWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_patientworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = patientworkofbreathing_;
  patientworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_patientworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PatientWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = patientworkofbreathing_;
  patientworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_patientworkofbreathing() {
  
  if (patientworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    patientworkofbreathing_ = p;
  }
  return patientworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_patientworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PatientWorkOfBreathing)
  return _internal_mutable_patientworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_patientworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* patientworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientworkofbreathing_);
  }
  if (patientworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      patientworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  patientworkofbreathing_ = patientworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PatientWorkOfBreathing)
}

// .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 28;
inline bool RespiratorySystemData::_internal_has_peakinspiratorypressure() const {
  return this != internal_default_instance() && peakinspiratorypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_peakinspiratorypressure() const {
  return _internal_has_peakinspiratorypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_peakinspiratorypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = peakinspiratorypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::peakinspiratorypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PeakInspiratoryPressure)
  return _internal_peakinspiratorypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_peakinspiratorypressure(
    ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure_);
  }
  peakinspiratorypressure_ = peakinspiratorypressure;
  if (peakinspiratorypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PeakInspiratoryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_peakinspiratorypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peakinspiratorypressure_;
  peakinspiratorypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_peakinspiratorypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PeakInspiratoryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peakinspiratorypressure_;
  peakinspiratorypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_peakinspiratorypressure() {
  
  if (peakinspiratorypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    peakinspiratorypressure_ = p;
  }
  return peakinspiratorypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_peakinspiratorypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PeakInspiratoryPressure)
  return _internal_mutable_peakinspiratorypressure();
}
inline void RespiratorySystemData::set_allocated_peakinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure_);
  }
  if (peakinspiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      peakinspiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakinspiratorypressure, submessage_arena);
    }
    
  } else {
    
  }
  peakinspiratorypressure_ = peakinspiratorypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PeakInspiratoryPressure)
}

// .pulse.cdm.bind.ScalarVolumeData PhysiologicDeadSpace = 29;
inline bool RespiratorySystemData::_internal_has_physiologicdeadspace() const {
  return this != internal_default_instance() && physiologicdeadspace_ != nullptr;
}
inline bool RespiratorySystemData::has_physiologicdeadspace() const {
  return _internal_has_physiologicdeadspace();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::_internal_physiologicdeadspace() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = physiologicdeadspace_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::physiologicdeadspace() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PhysiologicDeadSpace)
  return _internal_physiologicdeadspace();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_physiologicdeadspace(
    ::pulse::cdm::bind::ScalarVolumeData* physiologicdeadspace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physiologicdeadspace_);
  }
  physiologicdeadspace_ = physiologicdeadspace;
  if (physiologicdeadspace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PhysiologicDeadSpace)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::release_physiologicdeadspace() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = physiologicdeadspace_;
  physiologicdeadspace_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::unsafe_arena_release_physiologicdeadspace() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PhysiologicDeadSpace)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = physiologicdeadspace_;
  physiologicdeadspace_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::_internal_mutable_physiologicdeadspace() {
  
  if (physiologicdeadspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    physiologicdeadspace_ = p;
  }
  return physiologicdeadspace_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::mutable_physiologicdeadspace() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PhysiologicDeadSpace)
  return _internal_mutable_physiologicdeadspace();
}
inline void RespiratorySystemData::set_allocated_physiologicdeadspace(::pulse::cdm::bind::ScalarVolumeData* physiologicdeadspace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(physiologicdeadspace_);
  }
  if (physiologicdeadspace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physiologicdeadspace)->GetArena();
    if (message_arena != submessage_arena) {
      physiologicdeadspace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physiologicdeadspace, submessage_arena);
    }
    
  } else {
    
  }
  physiologicdeadspace_ = physiologicdeadspace;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PhysiologicDeadSpace)
}

// .pulse.cdm.bind.ScalarPressureData PositiveEndExpiratoryPressure = 30;
inline bool RespiratorySystemData::_internal_has_positiveendexpiratorypressure() const {
  return this != internal_default_instance() && positiveendexpiratorypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_positiveendexpiratorypressure() const {
  return _internal_has_positiveendexpiratorypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_positiveendexpiratorypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = positiveendexpiratorypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::positiveendexpiratorypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PositiveEndExpiratoryPressure)
  return _internal_positiveendexpiratorypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_positiveendexpiratorypressure(
    ::pulse::cdm::bind::ScalarPressureData* positiveendexpiratorypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiratorypressure_);
  }
  positiveendexpiratorypressure_ = positiveendexpiratorypressure;
  if (positiveendexpiratorypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PositiveEndExpiratoryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_positiveendexpiratorypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = positiveendexpiratorypressure_;
  positiveendexpiratorypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_positiveendexpiratorypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PositiveEndExpiratoryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = positiveendexpiratorypressure_;
  positiveendexpiratorypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_positiveendexpiratorypressure() {
  
  if (positiveendexpiratorypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    positiveendexpiratorypressure_ = p;
  }
  return positiveendexpiratorypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_positiveendexpiratorypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PositiveEndExpiratoryPressure)
  return _internal_mutable_positiveendexpiratorypressure();
}
inline void RespiratorySystemData::set_allocated_positiveendexpiratorypressure(::pulse::cdm::bind::ScalarPressureData* positiveendexpiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiratorypressure_);
  }
  if (positiveendexpiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      positiveendexpiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiveendexpiratorypressure, submessage_arena);
    }
    
  } else {
    
  }
  positiveendexpiratorypressure_ = positiveendexpiratorypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PositiveEndExpiratoryPressure)
}

// .pulse.cdm.bind.ScalarVolumePerPressureData PulmonaryCompliance = 31;
inline bool RespiratorySystemData::_internal_has_pulmonarycompliance() const {
  return this != internal_default_instance() && pulmonarycompliance_ != nullptr;
}
inline bool RespiratorySystemData::has_pulmonarycompliance() const {
  return _internal_has_pulmonarycompliance();
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::_internal_pulmonarycompliance() const {
  const ::pulse::cdm::bind::ScalarVolumePerPressureData* p = pulmonarycompliance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerPressureData&>(
      ::pulse::cdm::bind::_ScalarVolumePerPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerPressureData& RespiratorySystemData::pulmonarycompliance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PulmonaryCompliance)
  return _internal_pulmonarycompliance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_pulmonarycompliance(
    ::pulse::cdm::bind::ScalarVolumePerPressureData* pulmonarycompliance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycompliance_);
  }
  pulmonarycompliance_ = pulmonarycompliance;
  if (pulmonarycompliance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PulmonaryCompliance)
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::release_pulmonarycompliance() {
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = pulmonarycompliance_;
  pulmonarycompliance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::unsafe_arena_release_pulmonarycompliance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PulmonaryCompliance)
  
  ::pulse::cdm::bind::ScalarVolumePerPressureData* temp = pulmonarycompliance_;
  pulmonarycompliance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::_internal_mutable_pulmonarycompliance() {
  
  if (pulmonarycompliance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerPressureData>(GetArena());
    pulmonarycompliance_ = p;
  }
  return pulmonarycompliance_;
}
inline ::pulse::cdm::bind::ScalarVolumePerPressureData* RespiratorySystemData::mutable_pulmonarycompliance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PulmonaryCompliance)
  return _internal_mutable_pulmonarycompliance();
}
inline void RespiratorySystemData::set_allocated_pulmonarycompliance(::pulse::cdm::bind::ScalarVolumePerPressureData* pulmonarycompliance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycompliance_);
  }
  if (pulmonarycompliance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonarycompliance)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonarycompliance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonarycompliance, submessage_arena);
    }
    
  } else {
    
  }
  pulmonarycompliance_ = pulmonarycompliance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PulmonaryCompliance)
}

// .pulse.cdm.bind.ScalarPressurePerVolumeData PulmonaryElastance = 32;
inline bool RespiratorySystemData::_internal_has_pulmonaryelastance() const {
  return this != internal_default_instance() && pulmonaryelastance_ != nullptr;
}
inline bool RespiratorySystemData::has_pulmonaryelastance() const {
  return _internal_has_pulmonaryelastance();
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& RespiratorySystemData::_internal_pulmonaryelastance() const {
  const ::pulse::cdm::bind::ScalarPressurePerVolumeData* p = pulmonaryelastance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressurePerVolumeData&>(
      ::pulse::cdm::bind::_ScalarPressurePerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressurePerVolumeData& RespiratorySystemData::pulmonaryelastance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.PulmonaryElastance)
  return _internal_pulmonaryelastance();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_pulmonaryelastance(
    ::pulse::cdm::bind::ScalarPressurePerVolumeData* pulmonaryelastance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryelastance_);
  }
  pulmonaryelastance_ = pulmonaryelastance;
  if (pulmonaryelastance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.PulmonaryElastance)
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* RespiratorySystemData::release_pulmonaryelastance() {
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = pulmonaryelastance_;
  pulmonaryelastance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* RespiratorySystemData::unsafe_arena_release_pulmonaryelastance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.PulmonaryElastance)
  
  ::pulse::cdm::bind::ScalarPressurePerVolumeData* temp = pulmonaryelastance_;
  pulmonaryelastance_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* RespiratorySystemData::_internal_mutable_pulmonaryelastance() {
  
  if (pulmonaryelastance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressurePerVolumeData>(GetArena());
    pulmonaryelastance_ = p;
  }
  return pulmonaryelastance_;
}
inline ::pulse::cdm::bind::ScalarPressurePerVolumeData* RespiratorySystemData::mutable_pulmonaryelastance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.PulmonaryElastance)
  return _internal_mutable_pulmonaryelastance();
}
inline void RespiratorySystemData::set_allocated_pulmonaryelastance(::pulse::cdm::bind::ScalarPressurePerVolumeData* pulmonaryelastance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryelastance_);
  }
  if (pulmonaryelastance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulmonaryelastance)->GetArena();
    if (message_arena != submessage_arena) {
      pulmonaryelastance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryelastance, submessage_arena);
    }
    
  } else {
    
  }
  pulmonaryelastance_ = pulmonaryelastance;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.PulmonaryElastance)
}

// .pulse.cdm.bind.ScalarEnergyData ResistiveExpiratoryWorkOfBreathing = 33;
inline bool RespiratorySystemData::_internal_has_resistiveexpiratoryworkofbreathing() const {
  return this != internal_default_instance() && resistiveexpiratoryworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_resistiveexpiratoryworkofbreathing() const {
  return _internal_has_resistiveexpiratoryworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_resistiveexpiratoryworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = resistiveexpiratoryworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::resistiveexpiratoryworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ResistiveExpiratoryWorkOfBreathing)
  return _internal_resistiveexpiratoryworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_resistiveexpiratoryworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* resistiveexpiratoryworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveexpiratoryworkofbreathing_);
  }
  resistiveexpiratoryworkofbreathing_ = resistiveexpiratoryworkofbreathing;
  if (resistiveexpiratoryworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ResistiveExpiratoryWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_resistiveexpiratoryworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = resistiveexpiratoryworkofbreathing_;
  resistiveexpiratoryworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_resistiveexpiratoryworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ResistiveExpiratoryWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = resistiveexpiratoryworkofbreathing_;
  resistiveexpiratoryworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_resistiveexpiratoryworkofbreathing() {
  
  if (resistiveexpiratoryworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    resistiveexpiratoryworkofbreathing_ = p;
  }
  return resistiveexpiratoryworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_resistiveexpiratoryworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ResistiveExpiratoryWorkOfBreathing)
  return _internal_mutable_resistiveexpiratoryworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_resistiveexpiratoryworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* resistiveexpiratoryworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveexpiratoryworkofbreathing_);
  }
  if (resistiveexpiratoryworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveexpiratoryworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      resistiveexpiratoryworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resistiveexpiratoryworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  resistiveexpiratoryworkofbreathing_ = resistiveexpiratoryworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ResistiveExpiratoryWorkOfBreathing)
}

// .pulse.cdm.bind.ScalarEnergyData ResistiveInspiratoryWorkOfBreathing = 34;
inline bool RespiratorySystemData::_internal_has_resistiveinspiratoryworkofbreathing() const {
  return this != internal_default_instance() && resistiveinspiratoryworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_resistiveinspiratoryworkofbreathing() const {
  return _internal_has_resistiveinspiratoryworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_resistiveinspiratoryworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = resistiveinspiratoryworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::resistiveinspiratoryworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.ResistiveInspiratoryWorkOfBreathing)
  return _internal_resistiveinspiratoryworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_resistiveinspiratoryworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* resistiveinspiratoryworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveinspiratoryworkofbreathing_);
  }
  resistiveinspiratoryworkofbreathing_ = resistiveinspiratoryworkofbreathing;
  if (resistiveinspiratoryworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.ResistiveInspiratoryWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_resistiveinspiratoryworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = resistiveinspiratoryworkofbreathing_;
  resistiveinspiratoryworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_resistiveinspiratoryworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.ResistiveInspiratoryWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = resistiveinspiratoryworkofbreathing_;
  resistiveinspiratoryworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_resistiveinspiratoryworkofbreathing() {
  
  if (resistiveinspiratoryworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    resistiveinspiratoryworkofbreathing_ = p;
  }
  return resistiveinspiratoryworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_resistiveinspiratoryworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.ResistiveInspiratoryWorkOfBreathing)
  return _internal_mutable_resistiveinspiratoryworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_resistiveinspiratoryworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* resistiveinspiratoryworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveinspiratoryworkofbreathing_);
  }
  if (resistiveinspiratoryworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resistiveinspiratoryworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      resistiveinspiratoryworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resistiveinspiratoryworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  resistiveinspiratoryworkofbreathing_ = resistiveinspiratoryworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.ResistiveInspiratoryWorkOfBreathing)
}

// .pulse.cdm.bind.ScalarFrequencyData RespirationRate = 35;
inline bool RespiratorySystemData::_internal_has_respirationrate() const {
  return this != internal_default_instance() && respirationrate_ != nullptr;
}
inline bool RespiratorySystemData::has_respirationrate() const {
  return _internal_has_respirationrate();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& RespiratorySystemData::_internal_respirationrate() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = respirationrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData&>(
      ::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& RespiratorySystemData::respirationrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.RespirationRate)
  return _internal_respirationrate();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_respirationrate(
    ::pulse::cdm::bind::ScalarFrequencyData* respirationrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationrate_);
  }
  respirationrate_ = respirationrate;
  if (respirationrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespirationRate)
}
inline ::pulse::cdm::bind::ScalarFrequencyData* RespiratorySystemData::release_respirationrate() {
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respirationrate_;
  respirationrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* RespiratorySystemData::unsafe_arena_release_respirationrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.RespirationRate)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respirationrate_;
  respirationrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* RespiratorySystemData::_internal_mutable_respirationrate() {
  
  if (respirationrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArena());
    respirationrate_ = p;
  }
  return respirationrate_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* RespiratorySystemData::mutable_respirationrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.RespirationRate)
  return _internal_mutable_respirationrate();
}
inline void RespiratorySystemData::set_allocated_respirationrate(::pulse::cdm::bind::ScalarFrequencyData* respirationrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationrate_);
  }
  if (respirationrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respirationrate)->GetArena();
    if (message_arena != submessage_arena) {
      respirationrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respirationrate, submessage_arena);
    }
    
  } else {
    
  }
  respirationrate_ = respirationrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespirationRate)
}

// .pulse.cdm.bind.Scalar0To1Data RespiratoryMuscleFatigue = 36;
inline bool RespiratorySystemData::_internal_has_respiratorymusclefatigue() const {
  return this != internal_default_instance() && respiratorymusclefatigue_ != nullptr;
}
inline bool RespiratorySystemData::has_respiratorymusclefatigue() const {
  return _internal_has_respiratorymusclefatigue();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::_internal_respiratorymusclefatigue() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = respiratorymusclefatigue_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratorySystemData::respiratorymusclefatigue() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.RespiratoryMuscleFatigue)
  return _internal_respiratorymusclefatigue();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_respiratorymusclefatigue(
    ::pulse::cdm::bind::Scalar0To1Data* respiratorymusclefatigue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclefatigue_);
  }
  respiratorymusclefatigue_ = respiratorymusclefatigue;
  if (respiratorymusclefatigue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespiratoryMuscleFatigue)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::release_respiratorymusclefatigue() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = respiratorymusclefatigue_;
  respiratorymusclefatigue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::unsafe_arena_release_respiratorymusclefatigue() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.RespiratoryMuscleFatigue)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = respiratorymusclefatigue_;
  respiratorymusclefatigue_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::_internal_mutable_respiratorymusclefatigue() {
  
  if (respiratorymusclefatigue_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    respiratorymusclefatigue_ = p;
  }
  return respiratorymusclefatigue_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratorySystemData::mutable_respiratorymusclefatigue() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.RespiratoryMuscleFatigue)
  return _internal_mutable_respiratorymusclefatigue();
}
inline void RespiratorySystemData::set_allocated_respiratorymusclefatigue(::pulse::cdm::bind::Scalar0To1Data* respiratorymusclefatigue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclefatigue_);
  }
  if (respiratorymusclefatigue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclefatigue)->GetArena();
    if (message_arena != submessage_arena) {
      respiratorymusclefatigue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratorymusclefatigue, submessage_arena);
    }
    
  } else {
    
  }
  respiratorymusclefatigue_ = respiratorymusclefatigue;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespiratoryMuscleFatigue)
}

// .pulse.cdm.bind.ScalarPressureData RespiratoryMusclePressure = 37;
inline bool RespiratorySystemData::_internal_has_respiratorymusclepressure() const {
  return this != internal_default_instance() && respiratorymusclepressure_ != nullptr;
}
inline bool RespiratorySystemData::has_respiratorymusclepressure() const {
  return _internal_has_respiratorymusclepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_respiratorymusclepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = respiratorymusclepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::respiratorymusclepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.RespiratoryMusclePressure)
  return _internal_respiratorymusclepressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_respiratorymusclepressure(
    ::pulse::cdm::bind::ScalarPressureData* respiratorymusclepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclepressure_);
  }
  respiratorymusclepressure_ = respiratorymusclepressure;
  if (respiratorymusclepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespiratoryMusclePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_respiratorymusclepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = respiratorymusclepressure_;
  respiratorymusclepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_respiratorymusclepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.RespiratoryMusclePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = respiratorymusclepressure_;
  respiratorymusclepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_respiratorymusclepressure() {
  
  if (respiratorymusclepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    respiratorymusclepressure_ = p;
  }
  return respiratorymusclepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_respiratorymusclepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.RespiratoryMusclePressure)
  return _internal_mutable_respiratorymusclepressure();
}
inline void RespiratorySystemData::set_allocated_respiratorymusclepressure(::pulse::cdm::bind::ScalarPressureData* respiratorymusclepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclepressure_);
  }
  if (respiratorymusclepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratorymusclepressure)->GetArena();
    if (message_arena != submessage_arena) {
      respiratorymusclepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratorymusclepressure, submessage_arena);
    }
    
  } else {
    
  }
  respiratorymusclepressure_ = respiratorymusclepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.RespiratoryMusclePressure)
}

// .pulse.cdm.bind.ScalarData SaturationAndFractionOfInspiredOxygenRatio = 38;
inline bool RespiratorySystemData::_internal_has_saturationandfractionofinspiredoxygenratio() const {
  return this != internal_default_instance() && saturationandfractionofinspiredoxygenratio_ != nullptr;
}
inline bool RespiratorySystemData::has_saturationandfractionofinspiredoxygenratio() const {
  return _internal_has_saturationandfractionofinspiredoxygenratio();
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::_internal_saturationandfractionofinspiredoxygenratio() const {
  const ::pulse::cdm::bind::ScalarData* p = saturationandfractionofinspiredoxygenratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::saturationandfractionofinspiredoxygenratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.SaturationAndFractionOfInspiredOxygenRatio)
  return _internal_saturationandfractionofinspiredoxygenratio();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_saturationandfractionofinspiredoxygenratio(
    ::pulse::cdm::bind::ScalarData* saturationandfractionofinspiredoxygenratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturationandfractionofinspiredoxygenratio_);
  }
  saturationandfractionofinspiredoxygenratio_ = saturationandfractionofinspiredoxygenratio;
  if (saturationandfractionofinspiredoxygenratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.SaturationAndFractionOfInspiredOxygenRatio)
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::release_saturationandfractionofinspiredoxygenratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = saturationandfractionofinspiredoxygenratio_;
  saturationandfractionofinspiredoxygenratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::unsafe_arena_release_saturationandfractionofinspiredoxygenratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.SaturationAndFractionOfInspiredOxygenRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = saturationandfractionofinspiredoxygenratio_;
  saturationandfractionofinspiredoxygenratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::_internal_mutable_saturationandfractionofinspiredoxygenratio() {
  
  if (saturationandfractionofinspiredoxygenratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    saturationandfractionofinspiredoxygenratio_ = p;
  }
  return saturationandfractionofinspiredoxygenratio_;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::mutable_saturationandfractionofinspiredoxygenratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.SaturationAndFractionOfInspiredOxygenRatio)
  return _internal_mutable_saturationandfractionofinspiredoxygenratio();
}
inline void RespiratorySystemData::set_allocated_saturationandfractionofinspiredoxygenratio(::pulse::cdm::bind::ScalarData* saturationandfractionofinspiredoxygenratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturationandfractionofinspiredoxygenratio_);
  }
  if (saturationandfractionofinspiredoxygenratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(saturationandfractionofinspiredoxygenratio)->GetArena();
    if (message_arena != submessage_arena) {
      saturationandfractionofinspiredoxygenratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saturationandfractionofinspiredoxygenratio, submessage_arena);
    }
    
  } else {
    
  }
  saturationandfractionofinspiredoxygenratio_ = saturationandfractionofinspiredoxygenratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.SaturationAndFractionOfInspiredOxygenRatio)
}

// .pulse.cdm.bind.ScalarData SpecificVentilation = 39;
inline bool RespiratorySystemData::_internal_has_specificventilation() const {
  return this != internal_default_instance() && specificventilation_ != nullptr;
}
inline bool RespiratorySystemData::has_specificventilation() const {
  return _internal_has_specificventilation();
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::_internal_specificventilation() const {
  const ::pulse::cdm::bind::ScalarData* p = specificventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& RespiratorySystemData::specificventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.SpecificVentilation)
  return _internal_specificventilation();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_specificventilation(
    ::pulse::cdm::bind::ScalarData* specificventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificventilation_);
  }
  specificventilation_ = specificventilation;
  if (specificventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.SpecificVentilation)
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::release_specificventilation() {
  
  ::pulse::cdm::bind::ScalarData* temp = specificventilation_;
  specificventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::unsafe_arena_release_specificventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.SpecificVentilation)
  
  ::pulse::cdm::bind::ScalarData* temp = specificventilation_;
  specificventilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::_internal_mutable_specificventilation() {
  
  if (specificventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    specificventilation_ = p;
  }
  return specificventilation_;
}
inline ::pulse::cdm::bind::ScalarData* RespiratorySystemData::mutable_specificventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.SpecificVentilation)
  return _internal_mutable_specificventilation();
}
inline void RespiratorySystemData::set_allocated_specificventilation(::pulse::cdm::bind::ScalarData* specificventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificventilation_);
  }
  if (specificventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(specificventilation)->GetArena();
    if (message_arena != submessage_arena) {
      specificventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specificventilation, submessage_arena);
    }
    
  } else {
    
  }
  specificventilation_ = specificventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.SpecificVentilation)
}

// .pulse.cdm.bind.ScalarVolumeData TidalVolume = 40;
inline bool RespiratorySystemData::_internal_has_tidalvolume() const {
  return this != internal_default_instance() && tidalvolume_ != nullptr;
}
inline bool RespiratorySystemData::has_tidalvolume() const {
  return _internal_has_tidalvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::_internal_tidalvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = tidalvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::tidalvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TidalVolume)
  return _internal_tidalvolume();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_tidalvolume(
    ::pulse::cdm::bind::ScalarVolumeData* tidalvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolume_);
  }
  tidalvolume_ = tidalvolume;
  if (tidalvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TidalVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::release_tidalvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = tidalvolume_;
  tidalvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::unsafe_arena_release_tidalvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TidalVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = tidalvolume_;
  tidalvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::_internal_mutable_tidalvolume() {
  
  if (tidalvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    tidalvolume_ = p;
  }
  return tidalvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::mutable_tidalvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TidalVolume)
  return _internal_mutable_tidalvolume();
}
inline void RespiratorySystemData::set_allocated_tidalvolume(::pulse::cdm::bind::ScalarVolumeData* tidalvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolume_);
  }
  if (tidalvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tidalvolume)->GetArena();
    if (message_arena != submessage_arena) {
      tidalvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tidalvolume, submessage_arena);
    }
    
  } else {
    
  }
  tidalvolume_ = tidalvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TidalVolume)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData TotalAlveolarVentilation = 41;
inline bool RespiratorySystemData::_internal_has_totalalveolarventilation() const {
  return this != internal_default_instance() && totalalveolarventilation_ != nullptr;
}
inline bool RespiratorySystemData::has_totalalveolarventilation() const {
  return _internal_has_totalalveolarventilation();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::_internal_totalalveolarventilation() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = totalalveolarventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::totalalveolarventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalAlveolarVentilation)
  return _internal_totalalveolarventilation();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totalalveolarventilation(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* totalalveolarventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalalveolarventilation_);
  }
  totalalveolarventilation_ = totalalveolarventilation;
  if (totalalveolarventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalAlveolarVentilation)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::release_totalalveolarventilation() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalalveolarventilation_;
  totalalveolarventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::unsafe_arena_release_totalalveolarventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalAlveolarVentilation)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalalveolarventilation_;
  totalalveolarventilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::_internal_mutable_totalalveolarventilation() {
  
  if (totalalveolarventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    totalalveolarventilation_ = p;
  }
  return totalalveolarventilation_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::mutable_totalalveolarventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalAlveolarVentilation)
  return _internal_mutable_totalalveolarventilation();
}
inline void RespiratorySystemData::set_allocated_totalalveolarventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totalalveolarventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalalveolarventilation_);
  }
  if (totalalveolarventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalalveolarventilation)->GetArena();
    if (message_arena != submessage_arena) {
      totalalveolarventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalalveolarventilation, submessage_arena);
    }
    
  } else {
    
  }
  totalalveolarventilation_ = totalalveolarventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalAlveolarVentilation)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData TotalDeadSpaceVentilation = 42;
inline bool RespiratorySystemData::_internal_has_totaldeadspaceventilation() const {
  return this != internal_default_instance() && totaldeadspaceventilation_ != nullptr;
}
inline bool RespiratorySystemData::has_totaldeadspaceventilation() const {
  return _internal_has_totaldeadspaceventilation();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::_internal_totaldeadspaceventilation() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = totaldeadspaceventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::totaldeadspaceventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalDeadSpaceVentilation)
  return _internal_totaldeadspaceventilation();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totaldeadspaceventilation(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* totaldeadspaceventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totaldeadspaceventilation_);
  }
  totaldeadspaceventilation_ = totaldeadspaceventilation;
  if (totaldeadspaceventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalDeadSpaceVentilation)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::release_totaldeadspaceventilation() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totaldeadspaceventilation_;
  totaldeadspaceventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::unsafe_arena_release_totaldeadspaceventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalDeadSpaceVentilation)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totaldeadspaceventilation_;
  totaldeadspaceventilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::_internal_mutable_totaldeadspaceventilation() {
  
  if (totaldeadspaceventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    totaldeadspaceventilation_ = p;
  }
  return totaldeadspaceventilation_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::mutable_totaldeadspaceventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalDeadSpaceVentilation)
  return _internal_mutable_totaldeadspaceventilation();
}
inline void RespiratorySystemData::set_allocated_totaldeadspaceventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totaldeadspaceventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totaldeadspaceventilation_);
  }
  if (totaldeadspaceventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totaldeadspaceventilation)->GetArena();
    if (message_arena != submessage_arena) {
      totaldeadspaceventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totaldeadspaceventilation, submessage_arena);
    }
    
  } else {
    
  }
  totaldeadspaceventilation_ = totaldeadspaceventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalDeadSpaceVentilation)
}

// .pulse.cdm.bind.ScalarVolumeData TotalLungVolume = 43;
inline bool RespiratorySystemData::_internal_has_totallungvolume() const {
  return this != internal_default_instance() && totallungvolume_ != nullptr;
}
inline bool RespiratorySystemData::has_totallungvolume() const {
  return _internal_has_totallungvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::_internal_totallungvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totallungvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& RespiratorySystemData::totallungvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalLungVolume)
  return _internal_totallungvolume();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totallungvolume(
    ::pulse::cdm::bind::ScalarVolumeData* totallungvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungvolume_);
  }
  totallungvolume_ = totallungvolume;
  if (totallungvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalLungVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::release_totallungvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totallungvolume_;
  totallungvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::unsafe_arena_release_totallungvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalLungVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totallungvolume_;
  totallungvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::_internal_mutable_totallungvolume() {
  
  if (totallungvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    totallungvolume_ = p;
  }
  return totallungvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* RespiratorySystemData::mutable_totallungvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalLungVolume)
  return _internal_mutable_totallungvolume();
}
inline void RespiratorySystemData::set_allocated_totallungvolume(::pulse::cdm::bind::ScalarVolumeData* totallungvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungvolume_);
  }
  if (totallungvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totallungvolume)->GetArena();
    if (message_arena != submessage_arena) {
      totallungvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totallungvolume, submessage_arena);
    }
    
  } else {
    
  }
  totallungvolume_ = totallungvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalLungVolume)
}

// .pulse.cdm.bind.ScalarPowerData TotalPowerOfBreathing = 44;
inline bool RespiratorySystemData::_internal_has_totalpowerofbreathing() const {
  return this != internal_default_instance() && totalpowerofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_totalpowerofbreathing() const {
  return _internal_has_totalpowerofbreathing();
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::_internal_totalpowerofbreathing() const {
  const ::pulse::cdm::bind::ScalarPowerData* p = totalpowerofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPowerData&>(
      ::pulse::cdm::bind::_ScalarPowerData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPowerData& RespiratorySystemData::totalpowerofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalPowerOfBreathing)
  return _internal_totalpowerofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totalpowerofbreathing(
    ::pulse::cdm::bind::ScalarPowerData* totalpowerofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpowerofbreathing_);
  }
  totalpowerofbreathing_ = totalpowerofbreathing;
  if (totalpowerofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalPowerOfBreathing)
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::release_totalpowerofbreathing() {
  
  ::pulse::cdm::bind::ScalarPowerData* temp = totalpowerofbreathing_;
  totalpowerofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::unsafe_arena_release_totalpowerofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalPowerOfBreathing)
  
  ::pulse::cdm::bind::ScalarPowerData* temp = totalpowerofbreathing_;
  totalpowerofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::_internal_mutable_totalpowerofbreathing() {
  
  if (totalpowerofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPowerData>(GetArena());
    totalpowerofbreathing_ = p;
  }
  return totalpowerofbreathing_;
}
inline ::pulse::cdm::bind::ScalarPowerData* RespiratorySystemData::mutable_totalpowerofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalPowerOfBreathing)
  return _internal_mutable_totalpowerofbreathing();
}
inline void RespiratorySystemData::set_allocated_totalpowerofbreathing(::pulse::cdm::bind::ScalarPowerData* totalpowerofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpowerofbreathing_);
  }
  if (totalpowerofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpowerofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      totalpowerofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalpowerofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  totalpowerofbreathing_ = totalpowerofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalPowerOfBreathing)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData TotalPulmonaryVentilation = 45;
inline bool RespiratorySystemData::_internal_has_totalpulmonaryventilation() const {
  return this != internal_default_instance() && totalpulmonaryventilation_ != nullptr;
}
inline bool RespiratorySystemData::has_totalpulmonaryventilation() const {
  return _internal_has_totalpulmonaryventilation();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::_internal_totalpulmonaryventilation() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = totalpulmonaryventilation_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& RespiratorySystemData::totalpulmonaryventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalPulmonaryVentilation)
  return _internal_totalpulmonaryventilation();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totalpulmonaryventilation(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* totalpulmonaryventilation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpulmonaryventilation_);
  }
  totalpulmonaryventilation_ = totalpulmonaryventilation;
  if (totalpulmonaryventilation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalPulmonaryVentilation)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::release_totalpulmonaryventilation() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalpulmonaryventilation_;
  totalpulmonaryventilation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::unsafe_arena_release_totalpulmonaryventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalPulmonaryVentilation)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = totalpulmonaryventilation_;
  totalpulmonaryventilation_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::_internal_mutable_totalpulmonaryventilation() {
  
  if (totalpulmonaryventilation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    totalpulmonaryventilation_ = p;
  }
  return totalpulmonaryventilation_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* RespiratorySystemData::mutable_totalpulmonaryventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalPulmonaryVentilation)
  return _internal_mutable_totalpulmonaryventilation();
}
inline void RespiratorySystemData::set_allocated_totalpulmonaryventilation(::pulse::cdm::bind::ScalarVolumePerTimeData* totalpulmonaryventilation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpulmonaryventilation_);
  }
  if (totalpulmonaryventilation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalpulmonaryventilation)->GetArena();
    if (message_arena != submessage_arena) {
      totalpulmonaryventilation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalpulmonaryventilation, submessage_arena);
    }
    
  } else {
    
  }
  totalpulmonaryventilation_ = totalpulmonaryventilation;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalPulmonaryVentilation)
}

// .pulse.cdm.bind.ScalarEnergyData TotalWorkOfBreathing = 46;
inline bool RespiratorySystemData::_internal_has_totalworkofbreathing() const {
  return this != internal_default_instance() && totalworkofbreathing_ != nullptr;
}
inline bool RespiratorySystemData::has_totalworkofbreathing() const {
  return _internal_has_totalworkofbreathing();
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::_internal_totalworkofbreathing() const {
  const ::pulse::cdm::bind::ScalarEnergyData* p = totalworkofbreathing_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarEnergyData&>(
      ::pulse::cdm::bind::_ScalarEnergyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarEnergyData& RespiratorySystemData::totalworkofbreathing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TotalWorkOfBreathing)
  return _internal_totalworkofbreathing();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_totalworkofbreathing(
    ::pulse::cdm::bind::ScalarEnergyData* totalworkofbreathing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkofbreathing_);
  }
  totalworkofbreathing_ = totalworkofbreathing;
  if (totalworkofbreathing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalWorkOfBreathing)
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::release_totalworkofbreathing() {
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = totalworkofbreathing_;
  totalworkofbreathing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::unsafe_arena_release_totalworkofbreathing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TotalWorkOfBreathing)
  
  ::pulse::cdm::bind::ScalarEnergyData* temp = totalworkofbreathing_;
  totalworkofbreathing_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::_internal_mutable_totalworkofbreathing() {
  
  if (totalworkofbreathing_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarEnergyData>(GetArena());
    totalworkofbreathing_ = p;
  }
  return totalworkofbreathing_;
}
inline ::pulse::cdm::bind::ScalarEnergyData* RespiratorySystemData::mutable_totalworkofbreathing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TotalWorkOfBreathing)
  return _internal_mutable_totalworkofbreathing();
}
inline void RespiratorySystemData::set_allocated_totalworkofbreathing(::pulse::cdm::bind::ScalarEnergyData* totalworkofbreathing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkofbreathing_);
  }
  if (totalworkofbreathing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalworkofbreathing)->GetArena();
    if (message_arena != submessage_arena) {
      totalworkofbreathing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalworkofbreathing, submessage_arena);
    }
    
  } else {
    
  }
  totalworkofbreathing_ = totalworkofbreathing;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TotalWorkOfBreathing)
}

// .pulse.cdm.bind.ScalarPressureData TransairwayPressure = 47;
inline bool RespiratorySystemData::_internal_has_transairwaypressure() const {
  return this != internal_default_instance() && transairwaypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transairwaypressure() const {
  return _internal_has_transairwaypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transairwaypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transairwaypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transairwaypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransairwayPressure)
  return _internal_transairwaypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transairwaypressure(
    ::pulse::cdm::bind::ScalarPressureData* transairwaypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transairwaypressure_);
  }
  transairwaypressure_ = transairwaypressure;
  if (transairwaypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransairwayPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transairwaypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transairwaypressure_;
  transairwaypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transairwaypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransairwayPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transairwaypressure_;
  transairwaypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transairwaypressure() {
  
  if (transairwaypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transairwaypressure_ = p;
  }
  return transairwaypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transairwaypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransairwayPressure)
  return _internal_mutable_transairwaypressure();
}
inline void RespiratorySystemData::set_allocated_transairwaypressure(::pulse::cdm::bind::ScalarPressureData* transairwaypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transairwaypressure_);
  }
  if (transairwaypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transairwaypressure)->GetArena();
    if (message_arena != submessage_arena) {
      transairwaypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transairwaypressure, submessage_arena);
    }
    
  } else {
    
  }
  transairwaypressure_ = transairwaypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransairwayPressure)
}

// .pulse.cdm.bind.ScalarPressureData TransalveolarPressure = 48;
inline bool RespiratorySystemData::_internal_has_transalveolarpressure() const {
  return this != internal_default_instance() && transalveolarpressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transalveolarpressure() const {
  return _internal_has_transalveolarpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transalveolarpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transalveolarpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transalveolarpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransalveolarPressure)
  return _internal_transalveolarpressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transalveolarpressure(
    ::pulse::cdm::bind::ScalarPressureData* transalveolarpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transalveolarpressure_);
  }
  transalveolarpressure_ = transalveolarpressure;
  if (transalveolarpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransalveolarPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transalveolarpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transalveolarpressure_;
  transalveolarpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transalveolarpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransalveolarPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transalveolarpressure_;
  transalveolarpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transalveolarpressure() {
  
  if (transalveolarpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transalveolarpressure_ = p;
  }
  return transalveolarpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transalveolarpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransalveolarPressure)
  return _internal_mutable_transalveolarpressure();
}
inline void RespiratorySystemData::set_allocated_transalveolarpressure(::pulse::cdm::bind::ScalarPressureData* transalveolarpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transalveolarpressure_);
  }
  if (transalveolarpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transalveolarpressure)->GetArena();
    if (message_arena != submessage_arena) {
      transalveolarpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transalveolarpressure, submessage_arena);
    }
    
  } else {
    
  }
  transalveolarpressure_ = transalveolarpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransalveolarPressure)
}

// .pulse.cdm.bind.ScalarPressureData TransChestWallPressure = 49;
inline bool RespiratorySystemData::_internal_has_transchestwallpressure() const {
  return this != internal_default_instance() && transchestwallpressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transchestwallpressure() const {
  return _internal_has_transchestwallpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transchestwallpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transchestwallpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transchestwallpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransChestWallPressure)
  return _internal_transchestwallpressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transchestwallpressure(
    ::pulse::cdm::bind::ScalarPressureData* transchestwallpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transchestwallpressure_);
  }
  transchestwallpressure_ = transchestwallpressure;
  if (transchestwallpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransChestWallPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transchestwallpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transchestwallpressure_;
  transchestwallpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transchestwallpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransChestWallPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transchestwallpressure_;
  transchestwallpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transchestwallpressure() {
  
  if (transchestwallpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transchestwallpressure_ = p;
  }
  return transchestwallpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transchestwallpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransChestWallPressure)
  return _internal_mutable_transchestwallpressure();
}
inline void RespiratorySystemData::set_allocated_transchestwallpressure(::pulse::cdm::bind::ScalarPressureData* transchestwallpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transchestwallpressure_);
  }
  if (transchestwallpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transchestwallpressure)->GetArena();
    if (message_arena != submessage_arena) {
      transchestwallpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transchestwallpressure, submessage_arena);
    }
    
  } else {
    
  }
  transchestwallpressure_ = transchestwallpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransChestWallPressure)
}

// .pulse.cdm.bind.ScalarPressureData TransMusclePressure = 50;
inline bool RespiratorySystemData::_internal_has_transmusclepressure() const {
  return this != internal_default_instance() && transmusclepressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transmusclepressure() const {
  return _internal_has_transmusclepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transmusclepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transmusclepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transmusclepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransMusclePressure)
  return _internal_transmusclepressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transmusclepressure(
    ::pulse::cdm::bind::ScalarPressureData* transmusclepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmusclepressure_);
  }
  transmusclepressure_ = transmusclepressure;
  if (transmusclepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransMusclePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transmusclepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transmusclepressure_;
  transmusclepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transmusclepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransMusclePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transmusclepressure_;
  transmusclepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transmusclepressure() {
  
  if (transmusclepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transmusclepressure_ = p;
  }
  return transmusclepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transmusclepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransMusclePressure)
  return _internal_mutable_transmusclepressure();
}
inline void RespiratorySystemData::set_allocated_transmusclepressure(::pulse::cdm::bind::ScalarPressureData* transmusclepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmusclepressure_);
  }
  if (transmusclepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transmusclepressure)->GetArena();
    if (message_arena != submessage_arena) {
      transmusclepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmusclepressure, submessage_arena);
    }
    
  } else {
    
  }
  transmusclepressure_ = transmusclepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransMusclePressure)
}

// .pulse.cdm.bind.ScalarPressureData TranspulmonaryPressure = 51;
inline bool RespiratorySystemData::_internal_has_transpulmonarypressure() const {
  return this != internal_default_instance() && transpulmonarypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transpulmonarypressure() const {
  return _internal_has_transpulmonarypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transpulmonarypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transpulmonarypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transpulmonarypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TranspulmonaryPressure)
  return _internal_transpulmonarypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transpulmonarypressure(
    ::pulse::cdm::bind::ScalarPressureData* transpulmonarypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpulmonarypressure_);
  }
  transpulmonarypressure_ = transpulmonarypressure;
  if (transpulmonarypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TranspulmonaryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transpulmonarypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transpulmonarypressure_;
  transpulmonarypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transpulmonarypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TranspulmonaryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transpulmonarypressure_;
  transpulmonarypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transpulmonarypressure() {
  
  if (transpulmonarypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transpulmonarypressure_ = p;
  }
  return transpulmonarypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transpulmonarypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TranspulmonaryPressure)
  return _internal_mutable_transpulmonarypressure();
}
inline void RespiratorySystemData::set_allocated_transpulmonarypressure(::pulse::cdm::bind::ScalarPressureData* transpulmonarypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpulmonarypressure_);
  }
  if (transpulmonarypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpulmonarypressure)->GetArena();
    if (message_arena != submessage_arena) {
      transpulmonarypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transpulmonarypressure, submessage_arena);
    }
    
  } else {
    
  }
  transpulmonarypressure_ = transpulmonarypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TranspulmonaryPressure)
}

// .pulse.cdm.bind.ScalarPressureData TransrespiratoryPressure = 52;
inline bool RespiratorySystemData::_internal_has_transrespiratorypressure() const {
  return this != internal_default_instance() && transrespiratorypressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transrespiratorypressure() const {
  return _internal_has_transrespiratorypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transrespiratorypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transrespiratorypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transrespiratorypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransrespiratoryPressure)
  return _internal_transrespiratorypressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transrespiratorypressure(
    ::pulse::cdm::bind::ScalarPressureData* transrespiratorypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transrespiratorypressure_);
  }
  transrespiratorypressure_ = transrespiratorypressure;
  if (transrespiratorypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransrespiratoryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transrespiratorypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transrespiratorypressure_;
  transrespiratorypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transrespiratorypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransrespiratoryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transrespiratorypressure_;
  transrespiratorypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transrespiratorypressure() {
  
  if (transrespiratorypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transrespiratorypressure_ = p;
  }
  return transrespiratorypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transrespiratorypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransrespiratoryPressure)
  return _internal_mutable_transrespiratorypressure();
}
inline void RespiratorySystemData::set_allocated_transrespiratorypressure(::pulse::cdm::bind::ScalarPressureData* transrespiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transrespiratorypressure_);
  }
  if (transrespiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transrespiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      transrespiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transrespiratorypressure, submessage_arena);
    }
    
  } else {
    
  }
  transrespiratorypressure_ = transrespiratorypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransrespiratoryPressure)
}

// .pulse.cdm.bind.ScalarPressureData TransthoracicPressure = 53;
inline bool RespiratorySystemData::_internal_has_transthoracicpressure() const {
  return this != internal_default_instance() && transthoracicpressure_ != nullptr;
}
inline bool RespiratorySystemData::has_transthoracicpressure() const {
  return _internal_has_transthoracicpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::_internal_transthoracicpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = transthoracicpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& RespiratorySystemData::transthoracicpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratorySystemData.TransthoracicPressure)
  return _internal_transthoracicpressure();
}
inline void RespiratorySystemData::unsafe_arena_set_allocated_transthoracicpressure(
    ::pulse::cdm::bind::ScalarPressureData* transthoracicpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transthoracicpressure_);
  }
  transthoracicpressure_ = transthoracicpressure;
  if (transthoracicpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransthoracicPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::release_transthoracicpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transthoracicpressure_;
  transthoracicpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::unsafe_arena_release_transthoracicpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratorySystemData.TransthoracicPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = transthoracicpressure_;
  transthoracicpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::_internal_mutable_transthoracicpressure() {
  
  if (transthoracicpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    transthoracicpressure_ = p;
  }
  return transthoracicpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* RespiratorySystemData::mutable_transthoracicpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratorySystemData.TransthoracicPressure)
  return _internal_mutable_transthoracicpressure();
}
inline void RespiratorySystemData::set_allocated_transthoracicpressure(::pulse::cdm::bind::ScalarPressureData* transthoracicpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transthoracicpressure_);
  }
  if (transthoracicpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transthoracicpressure)->GetArena();
    if (message_arena != submessage_arena) {
      transthoracicpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transthoracicpressure, submessage_arena);
    }
    
  } else {
    
  }
  transthoracicpressure_ = transthoracicpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratorySystemData.TransthoracicPressure)
}

// -------------------------------------------------------------------

// TissueSystemData

// .pulse.cdm.bind.ScalarVolumePerTimeData CarbonDioxideProductionRate = 1;
inline bool TissueSystemData::_internal_has_carbondioxideproductionrate() const {
  return this != internal_default_instance() && carbondioxideproductionrate_ != nullptr;
}
inline bool TissueSystemData::has_carbondioxideproductionrate() const {
  return _internal_has_carbondioxideproductionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& TissueSystemData::_internal_carbondioxideproductionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = carbondioxideproductionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& TissueSystemData::carbondioxideproductionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.CarbonDioxideProductionRate)
  return _internal_carbondioxideproductionrate();
}
inline void TissueSystemData::unsafe_arena_set_allocated_carbondioxideproductionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* carbondioxideproductionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionrate_);
  }
  carbondioxideproductionrate_ = carbondioxideproductionrate;
  if (carbondioxideproductionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.CarbonDioxideProductionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::release_carbondioxideproductionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = carbondioxideproductionrate_;
  carbondioxideproductionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::unsafe_arena_release_carbondioxideproductionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.CarbonDioxideProductionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = carbondioxideproductionrate_;
  carbondioxideproductionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::_internal_mutable_carbondioxideproductionrate() {
  
  if (carbondioxideproductionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    carbondioxideproductionrate_ = p;
  }
  return carbondioxideproductionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::mutable_carbondioxideproductionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.CarbonDioxideProductionRate)
  return _internal_mutable_carbondioxideproductionrate();
}
inline void TissueSystemData::set_allocated_carbondioxideproductionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* carbondioxideproductionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionrate_);
  }
  if (carbondioxideproductionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbondioxideproductionrate)->GetArena();
    if (message_arena != submessage_arena) {
      carbondioxideproductionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbondioxideproductionrate, submessage_arena);
    }
    
  } else {
    
  }
  carbondioxideproductionrate_ = carbondioxideproductionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.CarbonDioxideProductionRate)
}

// .pulse.cdm.bind.ScalarVolumeData ExtracellularFluidVolume = 2;
inline bool TissueSystemData::_internal_has_extracellularfluidvolume() const {
  return this != internal_default_instance() && extracellularfluidvolume_ != nullptr;
}
inline bool TissueSystemData::has_extracellularfluidvolume() const {
  return _internal_has_extracellularfluidvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::_internal_extracellularfluidvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = extracellularfluidvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::extracellularfluidvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.ExtracellularFluidVolume)
  return _internal_extracellularfluidvolume();
}
inline void TissueSystemData::unsafe_arena_set_allocated_extracellularfluidvolume(
    ::pulse::cdm::bind::ScalarVolumeData* extracellularfluidvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extracellularfluidvolume_);
  }
  extracellularfluidvolume_ = extracellularfluidvolume;
  if (extracellularfluidvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.ExtracellularFluidVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::release_extracellularfluidvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = extracellularfluidvolume_;
  extracellularfluidvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::unsafe_arena_release_extracellularfluidvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.ExtracellularFluidVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = extracellularfluidvolume_;
  extracellularfluidvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::_internal_mutable_extracellularfluidvolume() {
  
  if (extracellularfluidvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    extracellularfluidvolume_ = p;
  }
  return extracellularfluidvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::mutable_extracellularfluidvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.ExtracellularFluidVolume)
  return _internal_mutable_extracellularfluidvolume();
}
inline void TissueSystemData::set_allocated_extracellularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* extracellularfluidvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extracellularfluidvolume_);
  }
  if (extracellularfluidvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extracellularfluidvolume)->GetArena();
    if (message_arena != submessage_arena) {
      extracellularfluidvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extracellularfluidvolume, submessage_arena);
    }
    
  } else {
    
  }
  extracellularfluidvolume_ = extracellularfluidvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.ExtracellularFluidVolume)
}

// .pulse.cdm.bind.ScalarVolumeData ExtravascularFluidVolume = 3;
inline bool TissueSystemData::_internal_has_extravascularfluidvolume() const {
  return this != internal_default_instance() && extravascularfluidvolume_ != nullptr;
}
inline bool TissueSystemData::has_extravascularfluidvolume() const {
  return _internal_has_extravascularfluidvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::_internal_extravascularfluidvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = extravascularfluidvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::extravascularfluidvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.ExtravascularFluidVolume)
  return _internal_extravascularfluidvolume();
}
inline void TissueSystemData::unsafe_arena_set_allocated_extravascularfluidvolume(
    ::pulse::cdm::bind::ScalarVolumeData* extravascularfluidvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularfluidvolume_);
  }
  extravascularfluidvolume_ = extravascularfluidvolume;
  if (extravascularfluidvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.ExtravascularFluidVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::release_extravascularfluidvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = extravascularfluidvolume_;
  extravascularfluidvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::unsafe_arena_release_extravascularfluidvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.ExtravascularFluidVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = extravascularfluidvolume_;
  extravascularfluidvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::_internal_mutable_extravascularfluidvolume() {
  
  if (extravascularfluidvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    extravascularfluidvolume_ = p;
  }
  return extravascularfluidvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::mutable_extravascularfluidvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.ExtravascularFluidVolume)
  return _internal_mutable_extravascularfluidvolume();
}
inline void TissueSystemData::set_allocated_extravascularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* extravascularfluidvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularfluidvolume_);
  }
  if (extravascularfluidvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extravascularfluidvolume)->GetArena();
    if (message_arena != submessage_arena) {
      extravascularfluidvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extravascularfluidvolume, submessage_arena);
    }
    
  } else {
    
  }
  extravascularfluidvolume_ = extravascularfluidvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.ExtravascularFluidVolume)
}

// .pulse.cdm.bind.ScalarData IntracellularFluidPH = 4;
inline bool TissueSystemData::_internal_has_intracellularfluidph() const {
  return this != internal_default_instance() && intracellularfluidph_ != nullptr;
}
inline bool TissueSystemData::has_intracellularfluidph() const {
  return _internal_has_intracellularfluidph();
}
inline const ::pulse::cdm::bind::ScalarData& TissueSystemData::_internal_intracellularfluidph() const {
  const ::pulse::cdm::bind::ScalarData* p = intracellularfluidph_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& TissueSystemData::intracellularfluidph() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.IntracellularFluidPH)
  return _internal_intracellularfluidph();
}
inline void TissueSystemData::unsafe_arena_set_allocated_intracellularfluidph(
    ::pulse::cdm::bind::ScalarData* intracellularfluidph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidph_);
  }
  intracellularfluidph_ = intracellularfluidph;
  if (intracellularfluidph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.IntracellularFluidPH)
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::release_intracellularfluidph() {
  
  ::pulse::cdm::bind::ScalarData* temp = intracellularfluidph_;
  intracellularfluidph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::unsafe_arena_release_intracellularfluidph() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.IntracellularFluidPH)
  
  ::pulse::cdm::bind::ScalarData* temp = intracellularfluidph_;
  intracellularfluidph_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::_internal_mutable_intracellularfluidph() {
  
  if (intracellularfluidph_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    intracellularfluidph_ = p;
  }
  return intracellularfluidph_;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::mutable_intracellularfluidph() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.IntracellularFluidPH)
  return _internal_mutable_intracellularfluidph();
}
inline void TissueSystemData::set_allocated_intracellularfluidph(::pulse::cdm::bind::ScalarData* intracellularfluidph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidph_);
  }
  if (intracellularfluidph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidph)->GetArena();
    if (message_arena != submessage_arena) {
      intracellularfluidph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intracellularfluidph, submessage_arena);
    }
    
  } else {
    
  }
  intracellularfluidph_ = intracellularfluidph;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.IntracellularFluidPH)
}

// .pulse.cdm.bind.ScalarVolumeData IntracellularFluidVolume = 5;
inline bool TissueSystemData::_internal_has_intracellularfluidvolume() const {
  return this != internal_default_instance() && intracellularfluidvolume_ != nullptr;
}
inline bool TissueSystemData::has_intracellularfluidvolume() const {
  return _internal_has_intracellularfluidvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::_internal_intracellularfluidvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = intracellularfluidvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& TissueSystemData::intracellularfluidvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.IntracellularFluidVolume)
  return _internal_intracellularfluidvolume();
}
inline void TissueSystemData::unsafe_arena_set_allocated_intracellularfluidvolume(
    ::pulse::cdm::bind::ScalarVolumeData* intracellularfluidvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidvolume_);
  }
  intracellularfluidvolume_ = intracellularfluidvolume;
  if (intracellularfluidvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.IntracellularFluidVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::release_intracellularfluidvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = intracellularfluidvolume_;
  intracellularfluidvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::unsafe_arena_release_intracellularfluidvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.IntracellularFluidVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = intracellularfluidvolume_;
  intracellularfluidvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::_internal_mutable_intracellularfluidvolume() {
  
  if (intracellularfluidvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    intracellularfluidvolume_ = p;
  }
  return intracellularfluidvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* TissueSystemData::mutable_intracellularfluidvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.IntracellularFluidVolume)
  return _internal_mutable_intracellularfluidvolume();
}
inline void TissueSystemData::set_allocated_intracellularfluidvolume(::pulse::cdm::bind::ScalarVolumeData* intracellularfluidvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidvolume_);
  }
  if (intracellularfluidvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intracellularfluidvolume)->GetArena();
    if (message_arena != submessage_arena) {
      intracellularfluidvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intracellularfluidvolume, submessage_arena);
    }
    
  } else {
    
  }
  intracellularfluidvolume_ = intracellularfluidvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.IntracellularFluidVolume)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData OxygenConsumptionRate = 6;
inline bool TissueSystemData::_internal_has_oxygenconsumptionrate() const {
  return this != internal_default_instance() && oxygenconsumptionrate_ != nullptr;
}
inline bool TissueSystemData::has_oxygenconsumptionrate() const {
  return _internal_has_oxygenconsumptionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& TissueSystemData::_internal_oxygenconsumptionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = oxygenconsumptionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& TissueSystemData::oxygenconsumptionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.OxygenConsumptionRate)
  return _internal_oxygenconsumptionrate();
}
inline void TissueSystemData::unsafe_arena_set_allocated_oxygenconsumptionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* oxygenconsumptionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenconsumptionrate_);
  }
  oxygenconsumptionrate_ = oxygenconsumptionrate;
  if (oxygenconsumptionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.OxygenConsumptionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::release_oxygenconsumptionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = oxygenconsumptionrate_;
  oxygenconsumptionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::unsafe_arena_release_oxygenconsumptionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.OxygenConsumptionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = oxygenconsumptionrate_;
  oxygenconsumptionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::_internal_mutable_oxygenconsumptionrate() {
  
  if (oxygenconsumptionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    oxygenconsumptionrate_ = p;
  }
  return oxygenconsumptionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* TissueSystemData::mutable_oxygenconsumptionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.OxygenConsumptionRate)
  return _internal_mutable_oxygenconsumptionrate();
}
inline void TissueSystemData::set_allocated_oxygenconsumptionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* oxygenconsumptionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenconsumptionrate_);
  }
  if (oxygenconsumptionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenconsumptionrate)->GetArena();
    if (message_arena != submessage_arena) {
      oxygenconsumptionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenconsumptionrate, submessage_arena);
    }
    
  } else {
    
  }
  oxygenconsumptionrate_ = oxygenconsumptionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.OxygenConsumptionRate)
}

// .pulse.cdm.bind.ScalarData RespiratoryExchangeRatio = 7;
inline bool TissueSystemData::_internal_has_respiratoryexchangeratio() const {
  return this != internal_default_instance() && respiratoryexchangeratio_ != nullptr;
}
inline bool TissueSystemData::has_respiratoryexchangeratio() const {
  return _internal_has_respiratoryexchangeratio();
}
inline const ::pulse::cdm::bind::ScalarData& TissueSystemData::_internal_respiratoryexchangeratio() const {
  const ::pulse::cdm::bind::ScalarData* p = respiratoryexchangeratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& TissueSystemData::respiratoryexchangeratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TissueSystemData.RespiratoryExchangeRatio)
  return _internal_respiratoryexchangeratio();
}
inline void TissueSystemData::unsafe_arena_set_allocated_respiratoryexchangeratio(
    ::pulse::cdm::bind::ScalarData* respiratoryexchangeratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryexchangeratio_);
  }
  respiratoryexchangeratio_ = respiratoryexchangeratio;
  if (respiratoryexchangeratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TissueSystemData.RespiratoryExchangeRatio)
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::release_respiratoryexchangeratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = respiratoryexchangeratio_;
  respiratoryexchangeratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::unsafe_arena_release_respiratoryexchangeratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TissueSystemData.RespiratoryExchangeRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = respiratoryexchangeratio_;
  respiratoryexchangeratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::_internal_mutable_respiratoryexchangeratio() {
  
  if (respiratoryexchangeratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    respiratoryexchangeratio_ = p;
  }
  return respiratoryexchangeratio_;
}
inline ::pulse::cdm::bind::ScalarData* TissueSystemData::mutable_respiratoryexchangeratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TissueSystemData.RespiratoryExchangeRatio)
  return _internal_mutable_respiratoryexchangeratio();
}
inline void TissueSystemData::set_allocated_respiratoryexchangeratio(::pulse::cdm::bind::ScalarData* respiratoryexchangeratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryexchangeratio_);
  }
  if (respiratoryexchangeratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryexchangeratio)->GetArena();
    if (message_arena != submessage_arena) {
      respiratoryexchangeratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryexchangeratio, submessage_arena);
    }
    
  } else {
    
  }
  respiratoryexchangeratio_ = respiratoryexchangeratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TissueSystemData.RespiratoryExchangeRatio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::eHeartRhythm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::eHeartRhythm>() {
  return ::pulse::cdm::bind::eHeartRhythm_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::eBreathState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::eBreathState>() {
  return ::pulse::cdm::bind::eBreathState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPhysiology_2eproto
