// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Scenario.proto

#include "pulse/cdm/bind/Scenario.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEngine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ScenarioDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioData> _instance;
} _ScenarioData_default_instance_;
class ScenarioExecDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioExecData> _instance;
} _ScenarioExecData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScenarioData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScenarioData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto}, {
      &scc_info_PatientConfigurationData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_DataRequestManagerData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,
      &scc_info_AnyActionData_pulse_2fcdm_2fbind_2fEngine_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ScenarioExecData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ScenarioExecData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fScenario_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, description_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, datarequestmanager_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, anyaction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioData, StartType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, logtoconsole_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, logfilename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, datarequestcsvfilename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, datarootdirectory_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, serializationdirectory_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, autoserializefilename_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, autoserializeafteractions_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, autoserializeperiod_s_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, timestampserializedstates_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, reloadserializedstate_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, contentformat_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, EngineConfiguration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ScenarioExecData, Scenario_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::ScenarioData)},
  { 12, -1, sizeof(::pulse::cdm::bind::ScenarioExecData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScenarioData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ScenarioExecData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fScenario_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035pulse/cdm/bind/Scenario.proto\022\016pulse.c"
  "dm.bind\032\033pulse/cdm/bind/Engine.proto\032\032pu"
  "lse/cdm/bind/Enums.proto\"\231\002\n\014ScenarioDat"
  "a\022\014\n\004Name\030\001 \001(\t\022\023\n\013Description\030\002 \001(\t\022\031\n\017"
  "EngineStateFile\030\003 \001(\tH\000\022H\n\024PatientConfig"
  "uration\030\004 \001(\0132(.pulse.cdm.bind.PatientCo"
  "nfigurationDataH\000\022B\n\022DataRequestManager\030"
  "\005 \001(\0132&.pulse.cdm.bind.DataRequestManage"
  "rData\0220\n\tAnyAction\030\006 \003(\0132\035.pulse.cdm.bin"
  "d.AnyActionDataB\013\n\tStartType\"\203\005\n\020Scenari"
  "oExecData\022-\n\014LogToConsole\030\001 \001(\0162\027.pulse."
  "cdm.bind.eSwitch\022\023\n\013LogFilename\030\002 \001(\t\022\036\n"
  "\026DataRequestCSVFilename\030\003 \001(\t\022\031\n\021DataRoo"
  "tDirectory\030\004 \001(\t\022\036\n\026SerializationDirecto"
  "ry\030\005 \001(\t\022\035\n\025AutoSerializeFilename\030\006 \001(\t\022"
  ":\n\031AutoSerializeAfterActions\030\007 \001(\0162\027.pul"
  "se.cdm.bind.eSwitch\022\035\n\025AutoSerializePeri"
  "od_s\030\010 \001(\001\022:\n\031TimeStampSerializedStates\030"
  "\t \001(\0162\027.pulse.cdm.bind.eSwitch\0226\n\025Reload"
  "SerializedState\030\n \001(\0162\027.pulse.cdm.bind.e"
  "Switch\022$\n\032EngineConfigurationContent\030\013 \001"
  "(\tH\000\022%\n\033EngineConfigurationFilename\030\014 \001("
  "\tH\000\022\031\n\017ScenarioContent\030\r \001(\tH\001\022\032\n\020Scenar"
  "ioFilename\030\016 \001(\tH\001\022;\n\rContentFormat\030\017 \001("
  "\0162$.pulse.cdm.bind.eSerializationFormatB"
  "\025\n\023EngineConfigurationB\n\n\010Scenario*,\n\024eS"
  "erializationFormat\022\010\n\004JSON\020\000\022\n\n\006BINARY\020\001"
  "B/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pulse"
  ".cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fEngine_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_sccs[2] = {
  &scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base,
  &scc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fScenario_2eproto, "pulse/cdm/bind/Scenario.proto", 1137,
  &descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fScenario_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fScenario_2eproto, 2, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fScenario_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eSerializationFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fScenario_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fScenario_2eproto[0];
}
bool eSerializationFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ScenarioData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConfigurationData& patientconfiguration(const ScenarioData* msg);
  static const ::pulse::cdm::bind::DataRequestManagerData& datarequestmanager(const ScenarioData* msg);
};

const ::pulse::cdm::bind::PatientConfigurationData&
ScenarioData::_Internal::patientconfiguration(const ScenarioData* msg) {
  return *msg->StartType_.patientconfiguration_;
}
const ::pulse::cdm::bind::DataRequestManagerData&
ScenarioData::_Internal::datarequestmanager(const ScenarioData* msg) {
  return *msg->datarequestmanager_;
}
void ScenarioData::set_allocated_patientconfiguration(::pulse::cdm::bind::PatientConfigurationData* patientconfiguration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_StartType();
  if (patientconfiguration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientconfiguration)->GetArena();
    if (message_arena != submessage_arena) {
      patientconfiguration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientconfiguration, submessage_arena);
    }
    set_has_patientconfiguration();
    StartType_.patientconfiguration_ = patientconfiguration;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ScenarioData.PatientConfiguration)
}
void ScenarioData::clear_patientconfiguration() {
  if (_internal_has_patientconfiguration()) {
    if (GetArena() == nullptr) {
      delete StartType_.patientconfiguration_;
    }
    clear_has_StartType();
  }
}
void ScenarioData::clear_datarequestmanager() {
  if (GetArena() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
}
void ScenarioData::clear_anyaction() {
  anyaction_.Clear();
}
ScenarioData::ScenarioData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  anyaction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScenarioData)
}
ScenarioData::ScenarioData(const ScenarioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      anyaction_(from.anyaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_datarequestmanager()) {
    datarequestmanager_ = new ::pulse::cdm::bind::DataRequestManagerData(*from.datarequestmanager_);
  } else {
    datarequestmanager_ = nullptr;
  }
  clear_has_StartType();
  switch (from.StartType_case()) {
    case kEngineStateFile: {
      _internal_set_enginestatefile(from._internal_enginestatefile());
      break;
    }
    case kPatientConfiguration: {
      _internal_mutable_patientconfiguration()->::pulse::cdm::bind::PatientConfigurationData::MergeFrom(from._internal_patientconfiguration());
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScenarioData)
}

void ScenarioData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datarequestmanager_ = nullptr;
  clear_has_StartType();
}

ScenarioData::~ScenarioData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScenarioData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete datarequestmanager_;
  if (has_StartType()) {
    clear_StartType();
  }
}

void ScenarioData::ArenaDtor(void* object) {
  ScenarioData* _this = reinterpret_cast< ScenarioData* >(object);
  (void)_this;
}
void ScenarioData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioData& ScenarioData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioData::clear_StartType() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ScenarioData)
  switch (StartType_case()) {
    case kEngineStateFile: {
      StartType_.enginestatefile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kPatientConfiguration: {
      if (GetArena() == nullptr) {
        delete StartType_.patientconfiguration_;
      }
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STARTTYPE_NOT_SET;
}


void ScenarioData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anyaction_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArena() == nullptr && datarequestmanager_ != nullptr) {
    delete datarequestmanager_;
  }
  datarequestmanager_ = nullptr;
  clear_StartType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioData.Description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EngineStateFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enginestatefile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioData.EngineStateFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientconfiguration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_datarequestmanager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.AnyActionData AnyAction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anyaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScenarioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioData.Description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string EngineStateFile = 3;
  if (_internal_has_enginestatefile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enginestatefile().data(), static_cast<int>(this->_internal_enginestatefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioData.EngineStateFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enginestatefile(), target);
  }

  // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 4;
  if (_internal_has_patientconfiguration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::patientconfiguration(this), target, stream);
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
  if (this->has_datarequestmanager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::datarequestmanager(this), target, stream);
  }

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anyaction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_anyaction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScenarioData)
  return target;
}

size_t ScenarioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScenarioData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.AnyActionData AnyAction = 6;
  total_size += 1UL * this->_internal_anyaction_size();
  for (const auto& msg : this->anyaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .pulse.cdm.bind.DataRequestManagerData DataRequestManager = 5;
  if (this->has_datarequestmanager()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datarequestmanager_);
  }

  switch (StartType_case()) {
    // string EngineStateFile = 3;
    case kEngineStateFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enginestatefile());
      break;
    }
    // .pulse.cdm.bind.PatientConfigurationData PatientConfiguration = 4;
    case kPatientConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *StartType_.patientconfiguration_);
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScenarioData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScenarioData)
    MergeFrom(*source);
  }
}

void ScenarioData::MergeFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScenarioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anyaction_.MergeFrom(from.anyaction_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_datarequestmanager()) {
    _internal_mutable_datarequestmanager()->::pulse::cdm::bind::DataRequestManagerData::MergeFrom(from._internal_datarequestmanager());
  }
  switch (from.StartType_case()) {
    case kEngineStateFile: {
      _internal_set_enginestatefile(from._internal_enginestatefile());
      break;
    }
    case kPatientConfiguration: {
      _internal_mutable_patientconfiguration()->::pulse::cdm::bind::PatientConfigurationData::MergeFrom(from._internal_patientconfiguration());
      break;
    }
    case STARTTYPE_NOT_SET: {
      break;
    }
  }
}

void ScenarioData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioData::CopyFrom(const ScenarioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScenarioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioData::IsInitialized() const {
  return true;
}

void ScenarioData::InternalSwap(ScenarioData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  anyaction_.InternalSwap(&other->anyaction_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(datarequestmanager_, other->datarequestmanager_);
  swap(StartType_, other->StartType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScenarioExecData::_Internal {
 public:
};

ScenarioExecData::ScenarioExecData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ScenarioExecData)
}
ScenarioExecData::ScenarioExecData(const ScenarioExecData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  logfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logfilename().empty()) {
    logfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logfilename(), 
      GetArena());
  }
  datarequestcsvfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datarequestcsvfilename().empty()) {
    datarequestcsvfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datarequestcsvfilename(), 
      GetArena());
  }
  datarootdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datarootdirectory().empty()) {
    datarootdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datarootdirectory(), 
      GetArena());
  }
  serializationdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serializationdirectory().empty()) {
    serializationdirectory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serializationdirectory(), 
      GetArena());
  }
  autoserializefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_autoserializefilename().empty()) {
    autoserializefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_autoserializefilename(), 
      GetArena());
  }
  ::memcpy(&logtoconsole_, &from.logtoconsole_,
    static_cast<size_t>(reinterpret_cast<char*>(&contentformat_) -
    reinterpret_cast<char*>(&logtoconsole_)) + sizeof(contentformat_));
  clear_has_EngineConfiguration();
  switch (from.EngineConfiguration_case()) {
    case kEngineConfigurationContent: {
      _internal_set_engineconfigurationcontent(from._internal_engineconfigurationcontent());
      break;
    }
    case kEngineConfigurationFilename: {
      _internal_set_engineconfigurationfilename(from._internal_engineconfigurationfilename());
      break;
    }
    case ENGINECONFIGURATION_NOT_SET: {
      break;
    }
  }
  clear_has_Scenario();
  switch (from.Scenario_case()) {
    case kScenarioContent: {
      _internal_set_scenariocontent(from._internal_scenariocontent());
      break;
    }
    case kScenarioFilename: {
      _internal_set_scenariofilename(from._internal_scenariofilename());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ScenarioExecData)
}

void ScenarioExecData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  logfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datarequestcsvfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datarootdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serializationdirectory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  autoserializefilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&logtoconsole_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contentformat_) -
      reinterpret_cast<char*>(&logtoconsole_)) + sizeof(contentformat_));
  clear_has_EngineConfiguration();
  clear_has_Scenario();
}

ScenarioExecData::~ScenarioExecData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ScenarioExecData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioExecData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  logfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datarequestcsvfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datarootdirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serializationdirectory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  autoserializefilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_EngineConfiguration()) {
    clear_EngineConfiguration();
  }
  if (has_Scenario()) {
    clear_Scenario();
  }
}

void ScenarioExecData::ArenaDtor(void* object) {
  ScenarioExecData* _this = reinterpret_cast< ScenarioExecData* >(object);
  (void)_this;
}
void ScenarioExecData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioExecData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioExecData& ScenarioExecData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioExecData_pulse_2fcdm_2fbind_2fScenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioExecData::clear_EngineConfiguration() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ScenarioExecData)
  switch (EngineConfiguration_case()) {
    case kEngineConfigurationContent: {
      EngineConfiguration_.engineconfigurationcontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kEngineConfigurationFilename: {
      EngineConfiguration_.engineconfigurationfilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case ENGINECONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENGINECONFIGURATION_NOT_SET;
}

void ScenarioExecData::clear_Scenario() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ScenarioExecData)
  switch (Scenario_case()) {
    case kScenarioContent: {
      Scenario_.scenariocontent_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kScenarioFilename: {
      Scenario_.scenariofilename_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SCENARIO_NOT_SET;
}


void ScenarioExecData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ScenarioExecData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logfilename_.ClearToEmpty();
  datarequestcsvfilename_.ClearToEmpty();
  datarootdirectory_.ClearToEmpty();
  serializationdirectory_.ClearToEmpty();
  autoserializefilename_.ClearToEmpty();
  ::memset(&logtoconsole_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contentformat_) -
      reinterpret_cast<char*>(&logtoconsole_)) + sizeof(contentformat_));
  clear_EngineConfiguration();
  clear_Scenario();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioExecData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.eSwitch LogToConsole = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logtoconsole(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // string LogFilename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_logfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.LogFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DataRequestCSVFilename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_datarequestcsvfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DataRootDirectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_datarootdirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.DataRootDirectory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SerializationDirectory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_serializationdirectory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.SerializationDirectory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AutoSerializeFilename = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_autoserializefilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch AutoSerializeAfterActions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_autoserializeafteractions(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // double AutoSerializePeriod_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          autoserializeperiod_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch TimeStampSerializedStates = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_timestampserializedstates(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSwitch ReloadSerializedState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reloadserializedstate(static_cast<::pulse::cdm::bind::eSwitch>(val));
        } else goto handle_unusual;
        continue;
      // string EngineConfigurationContent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_engineconfigurationcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EngineConfigurationFilename = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_engineconfigurationfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ScenarioContent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_scenariocontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.ScenarioContent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ScenarioFilename = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_scenariofilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ScenarioExecData.ScenarioFilename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eSerializationFormat ContentFormat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contentformat(static_cast<::pulse::cdm::bind::eSerializationFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioExecData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ScenarioExecData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.eSwitch LogToConsole = 1;
  if (this->logtoconsole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_logtoconsole(), target);
  }

  // string LogFilename = 2;
  if (this->logfilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logfilename().data(), static_cast<int>(this->_internal_logfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.LogFilename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logfilename(), target);
  }

  // string DataRequestCSVFilename = 3;
  if (this->datarequestcsvfilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datarequestcsvfilename().data(), static_cast<int>(this->_internal_datarequestcsvfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.DataRequestCSVFilename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_datarequestcsvfilename(), target);
  }

  // string DataRootDirectory = 4;
  if (this->datarootdirectory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datarootdirectory().data(), static_cast<int>(this->_internal_datarootdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.DataRootDirectory");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_datarootdirectory(), target);
  }

  // string SerializationDirectory = 5;
  if (this->serializationdirectory().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serializationdirectory().data(), static_cast<int>(this->_internal_serializationdirectory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.SerializationDirectory");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serializationdirectory(), target);
  }

  // string AutoSerializeFilename = 6;
  if (this->autoserializefilename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_autoserializefilename().data(), static_cast<int>(this->_internal_autoserializefilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.AutoSerializeFilename");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_autoserializefilename(), target);
  }

  // .pulse.cdm.bind.eSwitch AutoSerializeAfterActions = 7;
  if (this->autoserializeafteractions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_autoserializeafteractions(), target);
  }

  // double AutoSerializePeriod_s = 8;
  if (!(this->autoserializeperiod_s() <= 0 && this->autoserializeperiod_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_autoserializeperiod_s(), target);
  }

  // .pulse.cdm.bind.eSwitch TimeStampSerializedStates = 9;
  if (this->timestampserializedstates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_timestampserializedstates(), target);
  }

  // .pulse.cdm.bind.eSwitch ReloadSerializedState = 10;
  if (this->reloadserializedstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_reloadserializedstate(), target);
  }

  // string EngineConfigurationContent = 11;
  if (_internal_has_engineconfigurationcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_engineconfigurationcontent().data(), static_cast<int>(this->_internal_engineconfigurationcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.EngineConfigurationContent");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_engineconfigurationcontent(), target);
  }

  // string EngineConfigurationFilename = 12;
  if (_internal_has_engineconfigurationfilename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_engineconfigurationfilename().data(), static_cast<int>(this->_internal_engineconfigurationfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.EngineConfigurationFilename");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_engineconfigurationfilename(), target);
  }

  // string ScenarioContent = 13;
  if (_internal_has_scenariocontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scenariocontent().data(), static_cast<int>(this->_internal_scenariocontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.ScenarioContent");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_scenariocontent(), target);
  }

  // string ScenarioFilename = 14;
  if (_internal_has_scenariofilename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scenariofilename().data(), static_cast<int>(this->_internal_scenariofilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ScenarioExecData.ScenarioFilename");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_scenariofilename(), target);
  }

  // .pulse.cdm.bind.eSerializationFormat ContentFormat = 15;
  if (this->contentformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_contentformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ScenarioExecData)
  return target;
}

size_t ScenarioExecData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ScenarioExecData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LogFilename = 2;
  if (this->logfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logfilename());
  }

  // string DataRequestCSVFilename = 3;
  if (this->datarequestcsvfilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datarequestcsvfilename());
  }

  // string DataRootDirectory = 4;
  if (this->datarootdirectory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datarootdirectory());
  }

  // string SerializationDirectory = 5;
  if (this->serializationdirectory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serializationdirectory());
  }

  // string AutoSerializeFilename = 6;
  if (this->autoserializefilename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_autoserializefilename());
  }

  // .pulse.cdm.bind.eSwitch LogToConsole = 1;
  if (this->logtoconsole() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logtoconsole());
  }

  // .pulse.cdm.bind.eSwitch AutoSerializeAfterActions = 7;
  if (this->autoserializeafteractions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_autoserializeafteractions());
  }

  // double AutoSerializePeriod_s = 8;
  if (!(this->autoserializeperiod_s() <= 0 && this->autoserializeperiod_s() >= 0)) {
    total_size += 1 + 8;
  }

  // .pulse.cdm.bind.eSwitch TimeStampSerializedStates = 9;
  if (this->timestampserializedstates() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timestampserializedstates());
  }

  // .pulse.cdm.bind.eSwitch ReloadSerializedState = 10;
  if (this->reloadserializedstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reloadserializedstate());
  }

  // .pulse.cdm.bind.eSerializationFormat ContentFormat = 15;
  if (this->contentformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contentformat());
  }

  switch (EngineConfiguration_case()) {
    // string EngineConfigurationContent = 11;
    case kEngineConfigurationContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_engineconfigurationcontent());
      break;
    }
    // string EngineConfigurationFilename = 12;
    case kEngineConfigurationFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_engineconfigurationfilename());
      break;
    }
    case ENGINECONFIGURATION_NOT_SET: {
      break;
    }
  }
  switch (Scenario_case()) {
    // string ScenarioContent = 13;
    case kScenarioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scenariocontent());
      break;
    }
    // string ScenarioFilename = 14;
    case kScenarioFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scenariofilename());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioExecData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ScenarioExecData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioExecData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioExecData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ScenarioExecData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ScenarioExecData)
    MergeFrom(*source);
  }
}

void ScenarioExecData::MergeFrom(const ScenarioExecData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ScenarioExecData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logfilename().size() > 0) {
    _internal_set_logfilename(from._internal_logfilename());
  }
  if (from.datarequestcsvfilename().size() > 0) {
    _internal_set_datarequestcsvfilename(from._internal_datarequestcsvfilename());
  }
  if (from.datarootdirectory().size() > 0) {
    _internal_set_datarootdirectory(from._internal_datarootdirectory());
  }
  if (from.serializationdirectory().size() > 0) {
    _internal_set_serializationdirectory(from._internal_serializationdirectory());
  }
  if (from.autoserializefilename().size() > 0) {
    _internal_set_autoserializefilename(from._internal_autoserializefilename());
  }
  if (from.logtoconsole() != 0) {
    _internal_set_logtoconsole(from._internal_logtoconsole());
  }
  if (from.autoserializeafteractions() != 0) {
    _internal_set_autoserializeafteractions(from._internal_autoserializeafteractions());
  }
  if (!(from.autoserializeperiod_s() <= 0 && from.autoserializeperiod_s() >= 0)) {
    _internal_set_autoserializeperiod_s(from._internal_autoserializeperiod_s());
  }
  if (from.timestampserializedstates() != 0) {
    _internal_set_timestampserializedstates(from._internal_timestampserializedstates());
  }
  if (from.reloadserializedstate() != 0) {
    _internal_set_reloadserializedstate(from._internal_reloadserializedstate());
  }
  if (from.contentformat() != 0) {
    _internal_set_contentformat(from._internal_contentformat());
  }
  switch (from.EngineConfiguration_case()) {
    case kEngineConfigurationContent: {
      _internal_set_engineconfigurationcontent(from._internal_engineconfigurationcontent());
      break;
    }
    case kEngineConfigurationFilename: {
      _internal_set_engineconfigurationfilename(from._internal_engineconfigurationfilename());
      break;
    }
    case ENGINECONFIGURATION_NOT_SET: {
      break;
    }
  }
  switch (from.Scenario_case()) {
    case kScenarioContent: {
      _internal_set_scenariocontent(from._internal_scenariocontent());
      break;
    }
    case kScenarioFilename: {
      _internal_set_scenariofilename(from._internal_scenariofilename());
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
}

void ScenarioExecData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ScenarioExecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioExecData::CopyFrom(const ScenarioExecData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ScenarioExecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioExecData::IsInitialized() const {
  return true;
}

void ScenarioExecData::InternalSwap(ScenarioExecData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logfilename_.Swap(&other->logfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datarequestcsvfilename_.Swap(&other->datarequestcsvfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datarootdirectory_.Swap(&other->datarootdirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serializationdirectory_.Swap(&other->serializationdirectory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  autoserializefilename_.Swap(&other->autoserializefilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioExecData, contentformat_)
      + sizeof(ScenarioExecData::contentformat_)
      - PROTOBUF_FIELD_OFFSET(ScenarioExecData, logtoconsole_)>(
          reinterpret_cast<char*>(&logtoconsole_),
          reinterpret_cast<char*>(&other->logtoconsole_));
  swap(EngineConfiguration_, other->EngineConfiguration_);
  swap(Scenario_, other->Scenario_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioExecData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScenarioData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScenarioData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScenarioData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ScenarioExecData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ScenarioExecData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ScenarioExecData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
