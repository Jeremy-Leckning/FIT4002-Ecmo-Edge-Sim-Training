// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Substance.pb.h"
#include "pulse/cdm/bind/PatientNutrition.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
#include "pulse/cdm/bind/PatientAssessments.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AcuteRespiratoryDistressSyndromeExacerbationData;
class AcuteRespiratoryDistressSyndromeExacerbationDataDefaultTypeInternal;
extern AcuteRespiratoryDistressSyndromeExacerbationDataDefaultTypeInternal _AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_;
class AcuteStressData;
class AcuteStressDataDefaultTypeInternal;
extern AcuteStressDataDefaultTypeInternal _AcuteStressData_default_instance_;
class AirwayObstructionData;
class AirwayObstructionDataDefaultTypeInternal;
extern AirwayObstructionDataDefaultTypeInternal _AirwayObstructionData_default_instance_;
class AnyConsciousRespirationCommandData;
class AnyConsciousRespirationCommandDataDefaultTypeInternal;
extern AnyConsciousRespirationCommandDataDefaultTypeInternal _AnyConsciousRespirationCommandData_default_instance_;
class AnyPatientActionData;
class AnyPatientActionDataDefaultTypeInternal;
extern AnyPatientActionDataDefaultTypeInternal _AnyPatientActionData_default_instance_;
class AsthmaAttackData;
class AsthmaAttackDataDefaultTypeInternal;
extern AsthmaAttackDataDefaultTypeInternal _AsthmaAttackData_default_instance_;
class BrainInjuryData;
class BrainInjuryDataDefaultTypeInternal;
extern BrainInjuryDataDefaultTypeInternal _BrainInjuryData_default_instance_;
class BronchoconstrictionData;
class BronchoconstrictionDataDefaultTypeInternal;
extern BronchoconstrictionDataDefaultTypeInternal _BronchoconstrictionData_default_instance_;
class CardiacArrestData;
class CardiacArrestDataDefaultTypeInternal;
extern CardiacArrestDataDefaultTypeInternal _CardiacArrestData_default_instance_;
class ChestCompressionForceData;
class ChestCompressionForceDataDefaultTypeInternal;
extern ChestCompressionForceDataDefaultTypeInternal _ChestCompressionForceData_default_instance_;
class ChestCompressionForceScaleData;
class ChestCompressionForceScaleDataDefaultTypeInternal;
extern ChestCompressionForceScaleDataDefaultTypeInternal _ChestCompressionForceScaleData_default_instance_;
class ChestOcclusiveDressingData;
class ChestOcclusiveDressingDataDefaultTypeInternal;
extern ChestOcclusiveDressingDataDefaultTypeInternal _ChestOcclusiveDressingData_default_instance_;
class ChronicObstructivePulmonaryDiseaseExacerbationData;
class ChronicObstructivePulmonaryDiseaseExacerbationDataDefaultTypeInternal;
extern ChronicObstructivePulmonaryDiseaseExacerbationDataDefaultTypeInternal _ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_;
class ConsciousRespirationData;
class ConsciousRespirationDataDefaultTypeInternal;
extern ConsciousRespirationDataDefaultTypeInternal _ConsciousRespirationData_default_instance_;
class ConsumeNutrientsData;
class ConsumeNutrientsDataDefaultTypeInternal;
extern ConsumeNutrientsDataDefaultTypeInternal _ConsumeNutrientsData_default_instance_;
class DyspneaData;
class DyspneaDataDefaultTypeInternal;
extern DyspneaDataDefaultTypeInternal _DyspneaData_default_instance_;
class ExerciseData;
class ExerciseDataDefaultTypeInternal;
extern ExerciseDataDefaultTypeInternal _ExerciseData_default_instance_;
class ForcedExhaleData;
class ForcedExhaleDataDefaultTypeInternal;
extern ForcedExhaleDataDefaultTypeInternal _ForcedExhaleData_default_instance_;
class ForcedInhaleData;
class ForcedInhaleDataDefaultTypeInternal;
extern ForcedInhaleDataDefaultTypeInternal _ForcedInhaleData_default_instance_;
class ForcedPauseData;
class ForcedPauseDataDefaultTypeInternal;
extern ForcedPauseDataDefaultTypeInternal _ForcedPauseData_default_instance_;
class HemorrhageData;
class HemorrhageDataDefaultTypeInternal;
extern HemorrhageDataDefaultTypeInternal _HemorrhageData_default_instance_;
class ImpairedAlveolarExchangeExacerbationData;
class ImpairedAlveolarExchangeExacerbationDataDefaultTypeInternal;
extern ImpairedAlveolarExchangeExacerbationDataDefaultTypeInternal _ImpairedAlveolarExchangeExacerbationData_default_instance_;
class IntubationData;
class IntubationDataDefaultTypeInternal;
extern IntubationDataDefaultTypeInternal _IntubationData_default_instance_;
class LobarPneumoniaExacerbationData;
class LobarPneumoniaExacerbationDataDefaultTypeInternal;
extern LobarPneumoniaExacerbationDataDefaultTypeInternal _LobarPneumoniaExacerbationData_default_instance_;
class MechanicalVentilationData;
class MechanicalVentilationDataDefaultTypeInternal;
extern MechanicalVentilationDataDefaultTypeInternal _MechanicalVentilationData_default_instance_;
class NeedleDecompressionData;
class NeedleDecompressionDataDefaultTypeInternal;
extern NeedleDecompressionDataDefaultTypeInternal _NeedleDecompressionData_default_instance_;
class PatientActionData;
class PatientActionDataDefaultTypeInternal;
extern PatientActionDataDefaultTypeInternal _PatientActionData_default_instance_;
class PatientAssessmentRequestData;
class PatientAssessmentRequestDataDefaultTypeInternal;
extern PatientAssessmentRequestDataDefaultTypeInternal _PatientAssessmentRequestData_default_instance_;
class PericardialEffusionData;
class PericardialEffusionDataDefaultTypeInternal;
extern PericardialEffusionDataDefaultTypeInternal _PericardialEffusionData_default_instance_;
class PulmonaryShuntExacerbationData;
class PulmonaryShuntExacerbationDataDefaultTypeInternal;
extern PulmonaryShuntExacerbationDataDefaultTypeInternal _PulmonaryShuntExacerbationData_default_instance_;
class RespiratoryFatigueData;
class RespiratoryFatigueDataDefaultTypeInternal;
extern RespiratoryFatigueDataDefaultTypeInternal _RespiratoryFatigueData_default_instance_;
class SubstanceBolusData;
class SubstanceBolusDataDefaultTypeInternal;
extern SubstanceBolusDataDefaultTypeInternal _SubstanceBolusData_default_instance_;
class SubstanceCompoundInfusionData;
class SubstanceCompoundInfusionDataDefaultTypeInternal;
extern SubstanceCompoundInfusionDataDefaultTypeInternal _SubstanceCompoundInfusionData_default_instance_;
class SubstanceInfusionData;
class SubstanceInfusionDataDefaultTypeInternal;
extern SubstanceInfusionDataDefaultTypeInternal _SubstanceInfusionData_default_instance_;
class SupplementalOxygenData;
class SupplementalOxygenDataDefaultTypeInternal;
extern SupplementalOxygenDataDefaultTypeInternal _SupplementalOxygenData_default_instance_;
class TensionPneumothoraxData;
class TensionPneumothoraxDataDefaultTypeInternal;
extern TensionPneumothoraxDataDefaultTypeInternal _TensionPneumothoraxData_default_instance_;
class UrinateData;
class UrinateDataDefaultTypeInternal;
extern UrinateDataDefaultTypeInternal _UrinateData_default_instance_;
class UseInhalerData;
class UseInhalerDataDefaultTypeInternal;
extern UseInhalerDataDefaultTypeInternal _UseInhalerData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData>(Arena*);
template<> ::pulse::cdm::bind::AcuteStressData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AcuteStressData>(Arena*);
template<> ::pulse::cdm::bind::AirwayObstructionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AirwayObstructionData>(Arena*);
template<> ::pulse::cdm::bind::AnyConsciousRespirationCommandData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyConsciousRespirationCommandData>(Arena*);
template<> ::pulse::cdm::bind::AnyPatientActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyPatientActionData>(Arena*);
template<> ::pulse::cdm::bind::AsthmaAttackData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AsthmaAttackData>(Arena*);
template<> ::pulse::cdm::bind::BrainInjuryData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BrainInjuryData>(Arena*);
template<> ::pulse::cdm::bind::BronchoconstrictionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::BronchoconstrictionData>(Arena*);
template<> ::pulse::cdm::bind::CardiacArrestData* Arena::CreateMaybeMessage<::pulse::cdm::bind::CardiacArrestData>(Arena*);
template<> ::pulse::cdm::bind::ChestCompressionForceData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChestCompressionForceData>(Arena*);
template<> ::pulse::cdm::bind::ChestCompressionForceScaleData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChestCompressionForceScaleData>(Arena*);
template<> ::pulse::cdm::bind::ChestOcclusiveDressingData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChestOcclusiveDressingData>(Arena*);
template<> ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData>(Arena*);
template<> ::pulse::cdm::bind::ConsciousRespirationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ConsciousRespirationData>(Arena*);
template<> ::pulse::cdm::bind::ConsumeNutrientsData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ConsumeNutrientsData>(Arena*);
template<> ::pulse::cdm::bind::DyspneaData* Arena::CreateMaybeMessage<::pulse::cdm::bind::DyspneaData>(Arena*);
template<> ::pulse::cdm::bind::ExerciseData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ExerciseData>(Arena*);
template<> ::pulse::cdm::bind::ForcedExhaleData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ForcedExhaleData>(Arena*);
template<> ::pulse::cdm::bind::ForcedInhaleData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ForcedInhaleData>(Arena*);
template<> ::pulse::cdm::bind::ForcedPauseData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ForcedPauseData>(Arena*);
template<> ::pulse::cdm::bind::HemorrhageData* Arena::CreateMaybeMessage<::pulse::cdm::bind::HemorrhageData>(Arena*);
template<> ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData>(Arena*);
template<> ::pulse::cdm::bind::IntubationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::IntubationData>(Arena*);
template<> ::pulse::cdm::bind::LobarPneumoniaExacerbationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::LobarPneumoniaExacerbationData>(Arena*);
template<> ::pulse::cdm::bind::MechanicalVentilationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::MechanicalVentilationData>(Arena*);
template<> ::pulse::cdm::bind::NeedleDecompressionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::NeedleDecompressionData>(Arena*);
template<> ::pulse::cdm::bind::PatientActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(Arena*);
template<> ::pulse::cdm::bind::PatientAssessmentRequestData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PatientAssessmentRequestData>(Arena*);
template<> ::pulse::cdm::bind::PericardialEffusionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PericardialEffusionData>(Arena*);
template<> ::pulse::cdm::bind::PulmonaryShuntExacerbationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::PulmonaryShuntExacerbationData>(Arena*);
template<> ::pulse::cdm::bind::RespiratoryFatigueData* Arena::CreateMaybeMessage<::pulse::cdm::bind::RespiratoryFatigueData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceBolusData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceBolusData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceCompoundInfusionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceCompoundInfusionData>(Arena*);
template<> ::pulse::cdm::bind::SubstanceInfusionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SubstanceInfusionData>(Arena*);
template<> ::pulse::cdm::bind::SupplementalOxygenData* Arena::CreateMaybeMessage<::pulse::cdm::bind::SupplementalOxygenData>(Arena*);
template<> ::pulse::cdm::bind::TensionPneumothoraxData* Arena::CreateMaybeMessage<::pulse::cdm::bind::TensionPneumothoraxData>(Arena*);
template<> ::pulse::cdm::bind::UrinateData* Arena::CreateMaybeMessage<::pulse::cdm::bind::UrinateData>(Arena*);
template<> ::pulse::cdm::bind::UseInhalerData* Arena::CreateMaybeMessage<::pulse::cdm::bind::UseInhalerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum BrainInjuryData_eType : int {
  BrainInjuryData_eType_Diffuse = 0,
  BrainInjuryData_eType_LeftFocal = 1,
  BrainInjuryData_eType_RightFocal = 2,
  BrainInjuryData_eType_BrainInjuryData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BrainInjuryData_eType_BrainInjuryData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BrainInjuryData_eType_IsValid(int value);
constexpr BrainInjuryData_eType BrainInjuryData_eType_eType_MIN = BrainInjuryData_eType_Diffuse;
constexpr BrainInjuryData_eType BrainInjuryData_eType_eType_MAX = BrainInjuryData_eType_RightFocal;
constexpr int BrainInjuryData_eType_eType_ARRAYSIZE = BrainInjuryData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BrainInjuryData_eType_descriptor();
template<typename T>
inline const std::string& BrainInjuryData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrainInjuryData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrainInjuryData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BrainInjuryData_eType_descriptor(), enum_t_value);
}
inline bool BrainInjuryData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BrainInjuryData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BrainInjuryData_eType>(
    BrainInjuryData_eType_descriptor(), name, value);
}
enum HemorrhageData_eType : int {
  HemorrhageData_eType_External = 0,
  HemorrhageData_eType_Internal = 1,
  HemorrhageData_eType_HemorrhageData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HemorrhageData_eType_HemorrhageData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HemorrhageData_eType_IsValid(int value);
constexpr HemorrhageData_eType HemorrhageData_eType_eType_MIN = HemorrhageData_eType_External;
constexpr HemorrhageData_eType HemorrhageData_eType_eType_MAX = HemorrhageData_eType_Internal;
constexpr int HemorrhageData_eType_eType_ARRAYSIZE = HemorrhageData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HemorrhageData_eType_descriptor();
template<typename T>
inline const std::string& HemorrhageData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HemorrhageData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HemorrhageData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HemorrhageData_eType_descriptor(), enum_t_value);
}
inline bool HemorrhageData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HemorrhageData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HemorrhageData_eType>(
    HemorrhageData_eType_descriptor(), name, value);
}
enum IntubationData_eType : int {
  IntubationData_eType_Off = 0,
  IntubationData_eType_Esophageal = 1,
  IntubationData_eType_LeftMainstem = 2,
  IntubationData_eType_RightMainstem = 3,
  IntubationData_eType_Tracheal = 4,
  IntubationData_eType_IntubationData_eType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IntubationData_eType_IntubationData_eType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IntubationData_eType_IsValid(int value);
constexpr IntubationData_eType IntubationData_eType_eType_MIN = IntubationData_eType_Off;
constexpr IntubationData_eType IntubationData_eType_eType_MAX = IntubationData_eType_Tracheal;
constexpr int IntubationData_eType_eType_ARRAYSIZE = IntubationData_eType_eType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntubationData_eType_descriptor();
template<typename T>
inline const std::string& IntubationData_eType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntubationData_eType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntubationData_eType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntubationData_eType_descriptor(), enum_t_value);
}
inline bool IntubationData_eType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntubationData_eType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntubationData_eType>(
    IntubationData_eType_descriptor(), name, value);
}
enum SubstanceBolusData_eRoute : int {
  SubstanceBolusData_eRoute_Intravenous = 0,
  SubstanceBolusData_eRoute_Epidural = 1,
  SubstanceBolusData_eRoute_Intraosseous = 2,
  SubstanceBolusData_eRoute_Intraarterial = 3,
  SubstanceBolusData_eRoute_Intracardiac = 4,
  SubstanceBolusData_eRoute_Intracerebral = 5,
  SubstanceBolusData_eRoute_Intracerebroventricular = 6,
  SubstanceBolusData_eRoute_Intradermal = 7,
  SubstanceBolusData_eRoute_Intramuscular = 8,
  SubstanceBolusData_eRoute_Subcutaneous = 9,
  SubstanceBolusData_eRoute_SubstanceBolusData_eRoute_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SubstanceBolusData_eRoute_SubstanceBolusData_eRoute_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SubstanceBolusData_eRoute_IsValid(int value);
constexpr SubstanceBolusData_eRoute SubstanceBolusData_eRoute_eRoute_MIN = SubstanceBolusData_eRoute_Intravenous;
constexpr SubstanceBolusData_eRoute SubstanceBolusData_eRoute_eRoute_MAX = SubstanceBolusData_eRoute_Subcutaneous;
constexpr int SubstanceBolusData_eRoute_eRoute_ARRAYSIZE = SubstanceBolusData_eRoute_eRoute_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubstanceBolusData_eRoute_descriptor();
template<typename T>
inline const std::string& SubstanceBolusData_eRoute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubstanceBolusData_eRoute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubstanceBolusData_eRoute_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubstanceBolusData_eRoute_descriptor(), enum_t_value);
}
inline bool SubstanceBolusData_eRoute_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubstanceBolusData_eRoute* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubstanceBolusData_eRoute>(
    SubstanceBolusData_eRoute_descriptor(), name, value);
}
enum SupplementalOxygenData_eDevice : int {
  SupplementalOxygenData_eDevice_None = 0,
  SupplementalOxygenData_eDevice_NasalCannula = 1,
  SupplementalOxygenData_eDevice_SimpleMask = 2,
  SupplementalOxygenData_eDevice_NonRebreatherMask = 3,
  SupplementalOxygenData_eDevice_SupplementalOxygenData_eDevice_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SupplementalOxygenData_eDevice_SupplementalOxygenData_eDevice_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SupplementalOxygenData_eDevice_IsValid(int value);
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData_eDevice_eDevice_MIN = SupplementalOxygenData_eDevice_None;
constexpr SupplementalOxygenData_eDevice SupplementalOxygenData_eDevice_eDevice_MAX = SupplementalOxygenData_eDevice_NonRebreatherMask;
constexpr int SupplementalOxygenData_eDevice_eDevice_ARRAYSIZE = SupplementalOxygenData_eDevice_eDevice_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SupplementalOxygenData_eDevice_descriptor();
template<typename T>
inline const std::string& SupplementalOxygenData_eDevice_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SupplementalOxygenData_eDevice>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SupplementalOxygenData_eDevice_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SupplementalOxygenData_eDevice_descriptor(), enum_t_value);
}
inline bool SupplementalOxygenData_eDevice_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SupplementalOxygenData_eDevice* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SupplementalOxygenData_eDevice>(
    SupplementalOxygenData_eDevice_descriptor(), name, value);
}
// ===================================================================

class AnyPatientActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyPatientActionData) */ {
 public:
  inline AnyPatientActionData() : AnyPatientActionData(nullptr) {}
  virtual ~AnyPatientActionData();

  AnyPatientActionData(const AnyPatientActionData& from);
  AnyPatientActionData(AnyPatientActionData&& from) noexcept
    : AnyPatientActionData() {
    *this = ::std::move(from);
  }

  inline AnyPatientActionData& operator=(const AnyPatientActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyPatientActionData& operator=(AnyPatientActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyPatientActionData& default_instance();

  enum ActionCase {
    kAssessment = 1,
    kAcuteRespiratoryDistressSyndromeExacerbation = 2,
    kAcuteStress = 3,
    kAirwayObstruction = 4,
    kAsthmaAttack = 5,
    kBrainInjury = 6,
    kBronchoconstriction = 7,
    kCardiacArrest = 8,
    kChestCompressionForce = 9,
    kChestCompressionForceScale = 10,
    kChestOcclusiveDressing = 11,
    kChronicObstructivePulmonaryDiseaseExacerbation = 12,
    kConsciousRespiration = 13,
    kConsumeNutrients = 14,
    kDyspnea = 15,
    kExercise = 16,
    kHemorrhage = 17,
    kImpairedAlveolarExchangeExacerbation = 18,
    kIntubation = 19,
    kLobarPneumoniaExacerbation = 20,
    kMechanicalVentilation = 21,
    kNeedleDecompression = 22,
    kPericardialEffusion = 23,
    kPulmonaryShuntExacerbation = 24,
    kRespiratoryFatigue = 25,
    kSubstanceBolus = 26,
    kSubstanceCompoundInfusion = 27,
    kSubstanceInfusion = 28,
    kSupplementalOxygen = 29,
    kTensionPneumothorax = 30,
    kUrinate = 31,
    ACTION_NOT_SET = 0,
  };

  static inline const AnyPatientActionData* internal_default_instance() {
    return reinterpret_cast<const AnyPatientActionData*>(
               &_AnyPatientActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyPatientActionData& a, AnyPatientActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyPatientActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyPatientActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyPatientActionData* New() const final {
    return CreateMaybeMessage<AnyPatientActionData>(nullptr);
  }

  AnyPatientActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyPatientActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyPatientActionData& from);
  void MergeFrom(const AnyPatientActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyPatientActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyPatientActionData";
  }
  protected:
  explicit AnyPatientActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssessmentFieldNumber = 1,
    kAcuteRespiratoryDistressSyndromeExacerbationFieldNumber = 2,
    kAcuteStressFieldNumber = 3,
    kAirwayObstructionFieldNumber = 4,
    kAsthmaAttackFieldNumber = 5,
    kBrainInjuryFieldNumber = 6,
    kBronchoconstrictionFieldNumber = 7,
    kCardiacArrestFieldNumber = 8,
    kChestCompressionForceFieldNumber = 9,
    kChestCompressionForceScaleFieldNumber = 10,
    kChestOcclusiveDressingFieldNumber = 11,
    kChronicObstructivePulmonaryDiseaseExacerbationFieldNumber = 12,
    kConsciousRespirationFieldNumber = 13,
    kConsumeNutrientsFieldNumber = 14,
    kDyspneaFieldNumber = 15,
    kExerciseFieldNumber = 16,
    kHemorrhageFieldNumber = 17,
    kImpairedAlveolarExchangeExacerbationFieldNumber = 18,
    kIntubationFieldNumber = 19,
    kLobarPneumoniaExacerbationFieldNumber = 20,
    kMechanicalVentilationFieldNumber = 21,
    kNeedleDecompressionFieldNumber = 22,
    kPericardialEffusionFieldNumber = 23,
    kPulmonaryShuntExacerbationFieldNumber = 24,
    kRespiratoryFatigueFieldNumber = 25,
    kSubstanceBolusFieldNumber = 26,
    kSubstanceCompoundInfusionFieldNumber = 27,
    kSubstanceInfusionFieldNumber = 28,
    kSupplementalOxygenFieldNumber = 29,
    kTensionPneumothoraxFieldNumber = 30,
    kUrinateFieldNumber = 31,
  };
  // .pulse.cdm.bind.PatientAssessmentRequestData Assessment = 1;
  bool has_assessment() const;
  private:
  bool _internal_has_assessment() const;
  public:
  void clear_assessment();
  const ::pulse::cdm::bind::PatientAssessmentRequestData& assessment() const;
  ::pulse::cdm::bind::PatientAssessmentRequestData* release_assessment();
  ::pulse::cdm::bind::PatientAssessmentRequestData* mutable_assessment();
  void set_allocated_assessment(::pulse::cdm::bind::PatientAssessmentRequestData* assessment);
  private:
  const ::pulse::cdm::bind::PatientAssessmentRequestData& _internal_assessment() const;
  ::pulse::cdm::bind::PatientAssessmentRequestData* _internal_mutable_assessment();
  public:
  void unsafe_arena_set_allocated_assessment(
      ::pulse::cdm::bind::PatientAssessmentRequestData* assessment);
  ::pulse::cdm::bind::PatientAssessmentRequestData* unsafe_arena_release_assessment();

  // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData AcuteRespiratoryDistressSyndromeExacerbation = 2;
  bool has_acuterespiratorydistresssyndromeexacerbation() const;
  private:
  bool _internal_has_acuterespiratorydistresssyndromeexacerbation() const;
  public:
  void clear_acuterespiratorydistresssyndromeexacerbation();
  const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData& acuterespiratorydistresssyndromeexacerbation() const;
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* release_acuterespiratorydistresssyndromeexacerbation();
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* mutable_acuterespiratorydistresssyndromeexacerbation();
  void set_allocated_acuterespiratorydistresssyndromeexacerbation(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* acuterespiratorydistresssyndromeexacerbation);
  private:
  const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData& _internal_acuterespiratorydistresssyndromeexacerbation() const;
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* _internal_mutable_acuterespiratorydistresssyndromeexacerbation();
  public:
  void unsafe_arena_set_allocated_acuterespiratorydistresssyndromeexacerbation(
      ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* acuterespiratorydistresssyndromeexacerbation);
  ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* unsafe_arena_release_acuterespiratorydistresssyndromeexacerbation();

  // .pulse.cdm.bind.AcuteStressData AcuteStress = 3;
  bool has_acutestress() const;
  private:
  bool _internal_has_acutestress() const;
  public:
  void clear_acutestress();
  const ::pulse::cdm::bind::AcuteStressData& acutestress() const;
  ::pulse::cdm::bind::AcuteStressData* release_acutestress();
  ::pulse::cdm::bind::AcuteStressData* mutable_acutestress();
  void set_allocated_acutestress(::pulse::cdm::bind::AcuteStressData* acutestress);
  private:
  const ::pulse::cdm::bind::AcuteStressData& _internal_acutestress() const;
  ::pulse::cdm::bind::AcuteStressData* _internal_mutable_acutestress();
  public:
  void unsafe_arena_set_allocated_acutestress(
      ::pulse::cdm::bind::AcuteStressData* acutestress);
  ::pulse::cdm::bind::AcuteStressData* unsafe_arena_release_acutestress();

  // .pulse.cdm.bind.AirwayObstructionData AirwayObstruction = 4;
  bool has_airwayobstruction() const;
  private:
  bool _internal_has_airwayobstruction() const;
  public:
  void clear_airwayobstruction();
  const ::pulse::cdm::bind::AirwayObstructionData& airwayobstruction() const;
  ::pulse::cdm::bind::AirwayObstructionData* release_airwayobstruction();
  ::pulse::cdm::bind::AirwayObstructionData* mutable_airwayobstruction();
  void set_allocated_airwayobstruction(::pulse::cdm::bind::AirwayObstructionData* airwayobstruction);
  private:
  const ::pulse::cdm::bind::AirwayObstructionData& _internal_airwayobstruction() const;
  ::pulse::cdm::bind::AirwayObstructionData* _internal_mutable_airwayobstruction();
  public:
  void unsafe_arena_set_allocated_airwayobstruction(
      ::pulse::cdm::bind::AirwayObstructionData* airwayobstruction);
  ::pulse::cdm::bind::AirwayObstructionData* unsafe_arena_release_airwayobstruction();

  // .pulse.cdm.bind.AsthmaAttackData AsthmaAttack = 5;
  bool has_asthmaattack() const;
  private:
  bool _internal_has_asthmaattack() const;
  public:
  void clear_asthmaattack();
  const ::pulse::cdm::bind::AsthmaAttackData& asthmaattack() const;
  ::pulse::cdm::bind::AsthmaAttackData* release_asthmaattack();
  ::pulse::cdm::bind::AsthmaAttackData* mutable_asthmaattack();
  void set_allocated_asthmaattack(::pulse::cdm::bind::AsthmaAttackData* asthmaattack);
  private:
  const ::pulse::cdm::bind::AsthmaAttackData& _internal_asthmaattack() const;
  ::pulse::cdm::bind::AsthmaAttackData* _internal_mutable_asthmaattack();
  public:
  void unsafe_arena_set_allocated_asthmaattack(
      ::pulse::cdm::bind::AsthmaAttackData* asthmaattack);
  ::pulse::cdm::bind::AsthmaAttackData* unsafe_arena_release_asthmaattack();

  // .pulse.cdm.bind.BrainInjuryData BrainInjury = 6;
  bool has_braininjury() const;
  private:
  bool _internal_has_braininjury() const;
  public:
  void clear_braininjury();
  const ::pulse::cdm::bind::BrainInjuryData& braininjury() const;
  ::pulse::cdm::bind::BrainInjuryData* release_braininjury();
  ::pulse::cdm::bind::BrainInjuryData* mutable_braininjury();
  void set_allocated_braininjury(::pulse::cdm::bind::BrainInjuryData* braininjury);
  private:
  const ::pulse::cdm::bind::BrainInjuryData& _internal_braininjury() const;
  ::pulse::cdm::bind::BrainInjuryData* _internal_mutable_braininjury();
  public:
  void unsafe_arena_set_allocated_braininjury(
      ::pulse::cdm::bind::BrainInjuryData* braininjury);
  ::pulse::cdm::bind::BrainInjuryData* unsafe_arena_release_braininjury();

  // .pulse.cdm.bind.BronchoconstrictionData Bronchoconstriction = 7;
  bool has_bronchoconstriction() const;
  private:
  bool _internal_has_bronchoconstriction() const;
  public:
  void clear_bronchoconstriction();
  const ::pulse::cdm::bind::BronchoconstrictionData& bronchoconstriction() const;
  ::pulse::cdm::bind::BronchoconstrictionData* release_bronchoconstriction();
  ::pulse::cdm::bind::BronchoconstrictionData* mutable_bronchoconstriction();
  void set_allocated_bronchoconstriction(::pulse::cdm::bind::BronchoconstrictionData* bronchoconstriction);
  private:
  const ::pulse::cdm::bind::BronchoconstrictionData& _internal_bronchoconstriction() const;
  ::pulse::cdm::bind::BronchoconstrictionData* _internal_mutable_bronchoconstriction();
  public:
  void unsafe_arena_set_allocated_bronchoconstriction(
      ::pulse::cdm::bind::BronchoconstrictionData* bronchoconstriction);
  ::pulse::cdm::bind::BronchoconstrictionData* unsafe_arena_release_bronchoconstriction();

  // .pulse.cdm.bind.CardiacArrestData CardiacArrest = 8;
  bool has_cardiacarrest() const;
  private:
  bool _internal_has_cardiacarrest() const;
  public:
  void clear_cardiacarrest();
  const ::pulse::cdm::bind::CardiacArrestData& cardiacarrest() const;
  ::pulse::cdm::bind::CardiacArrestData* release_cardiacarrest();
  ::pulse::cdm::bind::CardiacArrestData* mutable_cardiacarrest();
  void set_allocated_cardiacarrest(::pulse::cdm::bind::CardiacArrestData* cardiacarrest);
  private:
  const ::pulse::cdm::bind::CardiacArrestData& _internal_cardiacarrest() const;
  ::pulse::cdm::bind::CardiacArrestData* _internal_mutable_cardiacarrest();
  public:
  void unsafe_arena_set_allocated_cardiacarrest(
      ::pulse::cdm::bind::CardiacArrestData* cardiacarrest);
  ::pulse::cdm::bind::CardiacArrestData* unsafe_arena_release_cardiacarrest();

  // .pulse.cdm.bind.ChestCompressionForceData ChestCompressionForce = 9;
  bool has_chestcompressionforce() const;
  private:
  bool _internal_has_chestcompressionforce() const;
  public:
  void clear_chestcompressionforce();
  const ::pulse::cdm::bind::ChestCompressionForceData& chestcompressionforce() const;
  ::pulse::cdm::bind::ChestCompressionForceData* release_chestcompressionforce();
  ::pulse::cdm::bind::ChestCompressionForceData* mutable_chestcompressionforce();
  void set_allocated_chestcompressionforce(::pulse::cdm::bind::ChestCompressionForceData* chestcompressionforce);
  private:
  const ::pulse::cdm::bind::ChestCompressionForceData& _internal_chestcompressionforce() const;
  ::pulse::cdm::bind::ChestCompressionForceData* _internal_mutable_chestcompressionforce();
  public:
  void unsafe_arena_set_allocated_chestcompressionforce(
      ::pulse::cdm::bind::ChestCompressionForceData* chestcompressionforce);
  ::pulse::cdm::bind::ChestCompressionForceData* unsafe_arena_release_chestcompressionforce();

  // .pulse.cdm.bind.ChestCompressionForceScaleData ChestCompressionForceScale = 10;
  bool has_chestcompressionforcescale() const;
  private:
  bool _internal_has_chestcompressionforcescale() const;
  public:
  void clear_chestcompressionforcescale();
  const ::pulse::cdm::bind::ChestCompressionForceScaleData& chestcompressionforcescale() const;
  ::pulse::cdm::bind::ChestCompressionForceScaleData* release_chestcompressionforcescale();
  ::pulse::cdm::bind::ChestCompressionForceScaleData* mutable_chestcompressionforcescale();
  void set_allocated_chestcompressionforcescale(::pulse::cdm::bind::ChestCompressionForceScaleData* chestcompressionforcescale);
  private:
  const ::pulse::cdm::bind::ChestCompressionForceScaleData& _internal_chestcompressionforcescale() const;
  ::pulse::cdm::bind::ChestCompressionForceScaleData* _internal_mutable_chestcompressionforcescale();
  public:
  void unsafe_arena_set_allocated_chestcompressionforcescale(
      ::pulse::cdm::bind::ChestCompressionForceScaleData* chestcompressionforcescale);
  ::pulse::cdm::bind::ChestCompressionForceScaleData* unsafe_arena_release_chestcompressionforcescale();

  // .pulse.cdm.bind.ChestOcclusiveDressingData ChestOcclusiveDressing = 11;
  bool has_chestocclusivedressing() const;
  private:
  bool _internal_has_chestocclusivedressing() const;
  public:
  void clear_chestocclusivedressing();
  const ::pulse::cdm::bind::ChestOcclusiveDressingData& chestocclusivedressing() const;
  ::pulse::cdm::bind::ChestOcclusiveDressingData* release_chestocclusivedressing();
  ::pulse::cdm::bind::ChestOcclusiveDressingData* mutable_chestocclusivedressing();
  void set_allocated_chestocclusivedressing(::pulse::cdm::bind::ChestOcclusiveDressingData* chestocclusivedressing);
  private:
  const ::pulse::cdm::bind::ChestOcclusiveDressingData& _internal_chestocclusivedressing() const;
  ::pulse::cdm::bind::ChestOcclusiveDressingData* _internal_mutable_chestocclusivedressing();
  public:
  void unsafe_arena_set_allocated_chestocclusivedressing(
      ::pulse::cdm::bind::ChestOcclusiveDressingData* chestocclusivedressing);
  ::pulse::cdm::bind::ChestOcclusiveDressingData* unsafe_arena_release_chestocclusivedressing();

  // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData ChronicObstructivePulmonaryDiseaseExacerbation = 12;
  bool has_chronicobstructivepulmonarydiseaseexacerbation() const;
  private:
  bool _internal_has_chronicobstructivepulmonarydiseaseexacerbation() const;
  public:
  void clear_chronicobstructivepulmonarydiseaseexacerbation();
  const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData& chronicobstructivepulmonarydiseaseexacerbation() const;
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* release_chronicobstructivepulmonarydiseaseexacerbation();
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* mutable_chronicobstructivepulmonarydiseaseexacerbation();
  void set_allocated_chronicobstructivepulmonarydiseaseexacerbation(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* chronicobstructivepulmonarydiseaseexacerbation);
  private:
  const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData& _internal_chronicobstructivepulmonarydiseaseexacerbation() const;
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* _internal_mutable_chronicobstructivepulmonarydiseaseexacerbation();
  public:
  void unsafe_arena_set_allocated_chronicobstructivepulmonarydiseaseexacerbation(
      ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* chronicobstructivepulmonarydiseaseexacerbation);
  ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* unsafe_arena_release_chronicobstructivepulmonarydiseaseexacerbation();

  // .pulse.cdm.bind.ConsciousRespirationData ConsciousRespiration = 13;
  bool has_consciousrespiration() const;
  private:
  bool _internal_has_consciousrespiration() const;
  public:
  void clear_consciousrespiration();
  const ::pulse::cdm::bind::ConsciousRespirationData& consciousrespiration() const;
  ::pulse::cdm::bind::ConsciousRespirationData* release_consciousrespiration();
  ::pulse::cdm::bind::ConsciousRespirationData* mutable_consciousrespiration();
  void set_allocated_consciousrespiration(::pulse::cdm::bind::ConsciousRespirationData* consciousrespiration);
  private:
  const ::pulse::cdm::bind::ConsciousRespirationData& _internal_consciousrespiration() const;
  ::pulse::cdm::bind::ConsciousRespirationData* _internal_mutable_consciousrespiration();
  public:
  void unsafe_arena_set_allocated_consciousrespiration(
      ::pulse::cdm::bind::ConsciousRespirationData* consciousrespiration);
  ::pulse::cdm::bind::ConsciousRespirationData* unsafe_arena_release_consciousrespiration();

  // .pulse.cdm.bind.ConsumeNutrientsData ConsumeNutrients = 14;
  bool has_consumenutrients() const;
  private:
  bool _internal_has_consumenutrients() const;
  public:
  void clear_consumenutrients();
  const ::pulse::cdm::bind::ConsumeNutrientsData& consumenutrients() const;
  ::pulse::cdm::bind::ConsumeNutrientsData* release_consumenutrients();
  ::pulse::cdm::bind::ConsumeNutrientsData* mutable_consumenutrients();
  void set_allocated_consumenutrients(::pulse::cdm::bind::ConsumeNutrientsData* consumenutrients);
  private:
  const ::pulse::cdm::bind::ConsumeNutrientsData& _internal_consumenutrients() const;
  ::pulse::cdm::bind::ConsumeNutrientsData* _internal_mutable_consumenutrients();
  public:
  void unsafe_arena_set_allocated_consumenutrients(
      ::pulse::cdm::bind::ConsumeNutrientsData* consumenutrients);
  ::pulse::cdm::bind::ConsumeNutrientsData* unsafe_arena_release_consumenutrients();

  // .pulse.cdm.bind.DyspneaData Dyspnea = 15;
  bool has_dyspnea() const;
  private:
  bool _internal_has_dyspnea() const;
  public:
  void clear_dyspnea();
  const ::pulse::cdm::bind::DyspneaData& dyspnea() const;
  ::pulse::cdm::bind::DyspneaData* release_dyspnea();
  ::pulse::cdm::bind::DyspneaData* mutable_dyspnea();
  void set_allocated_dyspnea(::pulse::cdm::bind::DyspneaData* dyspnea);
  private:
  const ::pulse::cdm::bind::DyspneaData& _internal_dyspnea() const;
  ::pulse::cdm::bind::DyspneaData* _internal_mutable_dyspnea();
  public:
  void unsafe_arena_set_allocated_dyspnea(
      ::pulse::cdm::bind::DyspneaData* dyspnea);
  ::pulse::cdm::bind::DyspneaData* unsafe_arena_release_dyspnea();

  // .pulse.cdm.bind.ExerciseData Exercise = 16;
  bool has_exercise() const;
  private:
  bool _internal_has_exercise() const;
  public:
  void clear_exercise();
  const ::pulse::cdm::bind::ExerciseData& exercise() const;
  ::pulse::cdm::bind::ExerciseData* release_exercise();
  ::pulse::cdm::bind::ExerciseData* mutable_exercise();
  void set_allocated_exercise(::pulse::cdm::bind::ExerciseData* exercise);
  private:
  const ::pulse::cdm::bind::ExerciseData& _internal_exercise() const;
  ::pulse::cdm::bind::ExerciseData* _internal_mutable_exercise();
  public:
  void unsafe_arena_set_allocated_exercise(
      ::pulse::cdm::bind::ExerciseData* exercise);
  ::pulse::cdm::bind::ExerciseData* unsafe_arena_release_exercise();

  // .pulse.cdm.bind.HemorrhageData Hemorrhage = 17;
  bool has_hemorrhage() const;
  private:
  bool _internal_has_hemorrhage() const;
  public:
  void clear_hemorrhage();
  const ::pulse::cdm::bind::HemorrhageData& hemorrhage() const;
  ::pulse::cdm::bind::HemorrhageData* release_hemorrhage();
  ::pulse::cdm::bind::HemorrhageData* mutable_hemorrhage();
  void set_allocated_hemorrhage(::pulse::cdm::bind::HemorrhageData* hemorrhage);
  private:
  const ::pulse::cdm::bind::HemorrhageData& _internal_hemorrhage() const;
  ::pulse::cdm::bind::HemorrhageData* _internal_mutable_hemorrhage();
  public:
  void unsafe_arena_set_allocated_hemorrhage(
      ::pulse::cdm::bind::HemorrhageData* hemorrhage);
  ::pulse::cdm::bind::HemorrhageData* unsafe_arena_release_hemorrhage();

  // .pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData ImpairedAlveolarExchangeExacerbation = 18;
  bool has_impairedalveolarexchangeexacerbation() const;
  private:
  bool _internal_has_impairedalveolarexchangeexacerbation() const;
  public:
  void clear_impairedalveolarexchangeexacerbation();
  const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData& impairedalveolarexchangeexacerbation() const;
  ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* release_impairedalveolarexchangeexacerbation();
  ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* mutable_impairedalveolarexchangeexacerbation();
  void set_allocated_impairedalveolarexchangeexacerbation(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* impairedalveolarexchangeexacerbation);
  private:
  const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData& _internal_impairedalveolarexchangeexacerbation() const;
  ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* _internal_mutable_impairedalveolarexchangeexacerbation();
  public:
  void unsafe_arena_set_allocated_impairedalveolarexchangeexacerbation(
      ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* impairedalveolarexchangeexacerbation);
  ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* unsafe_arena_release_impairedalveolarexchangeexacerbation();

  // .pulse.cdm.bind.IntubationData Intubation = 19;
  bool has_intubation() const;
  private:
  bool _internal_has_intubation() const;
  public:
  void clear_intubation();
  const ::pulse::cdm::bind::IntubationData& intubation() const;
  ::pulse::cdm::bind::IntubationData* release_intubation();
  ::pulse::cdm::bind::IntubationData* mutable_intubation();
  void set_allocated_intubation(::pulse::cdm::bind::IntubationData* intubation);
  private:
  const ::pulse::cdm::bind::IntubationData& _internal_intubation() const;
  ::pulse::cdm::bind::IntubationData* _internal_mutable_intubation();
  public:
  void unsafe_arena_set_allocated_intubation(
      ::pulse::cdm::bind::IntubationData* intubation);
  ::pulse::cdm::bind::IntubationData* unsafe_arena_release_intubation();

  // .pulse.cdm.bind.LobarPneumoniaExacerbationData LobarPneumoniaExacerbation = 20;
  bool has_lobarpneumoniaexacerbation() const;
  private:
  bool _internal_has_lobarpneumoniaexacerbation() const;
  public:
  void clear_lobarpneumoniaexacerbation();
  const ::pulse::cdm::bind::LobarPneumoniaExacerbationData& lobarpneumoniaexacerbation() const;
  ::pulse::cdm::bind::LobarPneumoniaExacerbationData* release_lobarpneumoniaexacerbation();
  ::pulse::cdm::bind::LobarPneumoniaExacerbationData* mutable_lobarpneumoniaexacerbation();
  void set_allocated_lobarpneumoniaexacerbation(::pulse::cdm::bind::LobarPneumoniaExacerbationData* lobarpneumoniaexacerbation);
  private:
  const ::pulse::cdm::bind::LobarPneumoniaExacerbationData& _internal_lobarpneumoniaexacerbation() const;
  ::pulse::cdm::bind::LobarPneumoniaExacerbationData* _internal_mutable_lobarpneumoniaexacerbation();
  public:
  void unsafe_arena_set_allocated_lobarpneumoniaexacerbation(
      ::pulse::cdm::bind::LobarPneumoniaExacerbationData* lobarpneumoniaexacerbation);
  ::pulse::cdm::bind::LobarPneumoniaExacerbationData* unsafe_arena_release_lobarpneumoniaexacerbation();

  // .pulse.cdm.bind.MechanicalVentilationData MechanicalVentilation = 21;
  bool has_mechanicalventilation() const;
  private:
  bool _internal_has_mechanicalventilation() const;
  public:
  void clear_mechanicalventilation();
  const ::pulse::cdm::bind::MechanicalVentilationData& mechanicalventilation() const;
  ::pulse::cdm::bind::MechanicalVentilationData* release_mechanicalventilation();
  ::pulse::cdm::bind::MechanicalVentilationData* mutable_mechanicalventilation();
  void set_allocated_mechanicalventilation(::pulse::cdm::bind::MechanicalVentilationData* mechanicalventilation);
  private:
  const ::pulse::cdm::bind::MechanicalVentilationData& _internal_mechanicalventilation() const;
  ::pulse::cdm::bind::MechanicalVentilationData* _internal_mutable_mechanicalventilation();
  public:
  void unsafe_arena_set_allocated_mechanicalventilation(
      ::pulse::cdm::bind::MechanicalVentilationData* mechanicalventilation);
  ::pulse::cdm::bind::MechanicalVentilationData* unsafe_arena_release_mechanicalventilation();

  // .pulse.cdm.bind.NeedleDecompressionData NeedleDecompression = 22;
  bool has_needledecompression() const;
  private:
  bool _internal_has_needledecompression() const;
  public:
  void clear_needledecompression();
  const ::pulse::cdm::bind::NeedleDecompressionData& needledecompression() const;
  ::pulse::cdm::bind::NeedleDecompressionData* release_needledecompression();
  ::pulse::cdm::bind::NeedleDecompressionData* mutable_needledecompression();
  void set_allocated_needledecompression(::pulse::cdm::bind::NeedleDecompressionData* needledecompression);
  private:
  const ::pulse::cdm::bind::NeedleDecompressionData& _internal_needledecompression() const;
  ::pulse::cdm::bind::NeedleDecompressionData* _internal_mutable_needledecompression();
  public:
  void unsafe_arena_set_allocated_needledecompression(
      ::pulse::cdm::bind::NeedleDecompressionData* needledecompression);
  ::pulse::cdm::bind::NeedleDecompressionData* unsafe_arena_release_needledecompression();

  // .pulse.cdm.bind.PericardialEffusionData PericardialEffusion = 23;
  bool has_pericardialeffusion() const;
  private:
  bool _internal_has_pericardialeffusion() const;
  public:
  void clear_pericardialeffusion();
  const ::pulse::cdm::bind::PericardialEffusionData& pericardialeffusion() const;
  ::pulse::cdm::bind::PericardialEffusionData* release_pericardialeffusion();
  ::pulse::cdm::bind::PericardialEffusionData* mutable_pericardialeffusion();
  void set_allocated_pericardialeffusion(::pulse::cdm::bind::PericardialEffusionData* pericardialeffusion);
  private:
  const ::pulse::cdm::bind::PericardialEffusionData& _internal_pericardialeffusion() const;
  ::pulse::cdm::bind::PericardialEffusionData* _internal_mutable_pericardialeffusion();
  public:
  void unsafe_arena_set_allocated_pericardialeffusion(
      ::pulse::cdm::bind::PericardialEffusionData* pericardialeffusion);
  ::pulse::cdm::bind::PericardialEffusionData* unsafe_arena_release_pericardialeffusion();

  // .pulse.cdm.bind.PulmonaryShuntExacerbationData PulmonaryShuntExacerbation = 24;
  bool has_pulmonaryshuntexacerbation() const;
  private:
  bool _internal_has_pulmonaryshuntexacerbation() const;
  public:
  void clear_pulmonaryshuntexacerbation();
  const ::pulse::cdm::bind::PulmonaryShuntExacerbationData& pulmonaryshuntexacerbation() const;
  ::pulse::cdm::bind::PulmonaryShuntExacerbationData* release_pulmonaryshuntexacerbation();
  ::pulse::cdm::bind::PulmonaryShuntExacerbationData* mutable_pulmonaryshuntexacerbation();
  void set_allocated_pulmonaryshuntexacerbation(::pulse::cdm::bind::PulmonaryShuntExacerbationData* pulmonaryshuntexacerbation);
  private:
  const ::pulse::cdm::bind::PulmonaryShuntExacerbationData& _internal_pulmonaryshuntexacerbation() const;
  ::pulse::cdm::bind::PulmonaryShuntExacerbationData* _internal_mutable_pulmonaryshuntexacerbation();
  public:
  void unsafe_arena_set_allocated_pulmonaryshuntexacerbation(
      ::pulse::cdm::bind::PulmonaryShuntExacerbationData* pulmonaryshuntexacerbation);
  ::pulse::cdm::bind::PulmonaryShuntExacerbationData* unsafe_arena_release_pulmonaryshuntexacerbation();

  // .pulse.cdm.bind.RespiratoryFatigueData RespiratoryFatigue = 25;
  bool has_respiratoryfatigue() const;
  private:
  bool _internal_has_respiratoryfatigue() const;
  public:
  void clear_respiratoryfatigue();
  const ::pulse::cdm::bind::RespiratoryFatigueData& respiratoryfatigue() const;
  ::pulse::cdm::bind::RespiratoryFatigueData* release_respiratoryfatigue();
  ::pulse::cdm::bind::RespiratoryFatigueData* mutable_respiratoryfatigue();
  void set_allocated_respiratoryfatigue(::pulse::cdm::bind::RespiratoryFatigueData* respiratoryfatigue);
  private:
  const ::pulse::cdm::bind::RespiratoryFatigueData& _internal_respiratoryfatigue() const;
  ::pulse::cdm::bind::RespiratoryFatigueData* _internal_mutable_respiratoryfatigue();
  public:
  void unsafe_arena_set_allocated_respiratoryfatigue(
      ::pulse::cdm::bind::RespiratoryFatigueData* respiratoryfatigue);
  ::pulse::cdm::bind::RespiratoryFatigueData* unsafe_arena_release_respiratoryfatigue();

  // .pulse.cdm.bind.SubstanceBolusData SubstanceBolus = 26;
  bool has_substancebolus() const;
  private:
  bool _internal_has_substancebolus() const;
  public:
  void clear_substancebolus();
  const ::pulse::cdm::bind::SubstanceBolusData& substancebolus() const;
  ::pulse::cdm::bind::SubstanceBolusData* release_substancebolus();
  ::pulse::cdm::bind::SubstanceBolusData* mutable_substancebolus();
  void set_allocated_substancebolus(::pulse::cdm::bind::SubstanceBolusData* substancebolus);
  private:
  const ::pulse::cdm::bind::SubstanceBolusData& _internal_substancebolus() const;
  ::pulse::cdm::bind::SubstanceBolusData* _internal_mutable_substancebolus();
  public:
  void unsafe_arena_set_allocated_substancebolus(
      ::pulse::cdm::bind::SubstanceBolusData* substancebolus);
  ::pulse::cdm::bind::SubstanceBolusData* unsafe_arena_release_substancebolus();

  // .pulse.cdm.bind.SubstanceCompoundInfusionData SubstanceCompoundInfusion = 27;
  bool has_substancecompoundinfusion() const;
  private:
  bool _internal_has_substancecompoundinfusion() const;
  public:
  void clear_substancecompoundinfusion();
  const ::pulse::cdm::bind::SubstanceCompoundInfusionData& substancecompoundinfusion() const;
  ::pulse::cdm::bind::SubstanceCompoundInfusionData* release_substancecompoundinfusion();
  ::pulse::cdm::bind::SubstanceCompoundInfusionData* mutable_substancecompoundinfusion();
  void set_allocated_substancecompoundinfusion(::pulse::cdm::bind::SubstanceCompoundInfusionData* substancecompoundinfusion);
  private:
  const ::pulse::cdm::bind::SubstanceCompoundInfusionData& _internal_substancecompoundinfusion() const;
  ::pulse::cdm::bind::SubstanceCompoundInfusionData* _internal_mutable_substancecompoundinfusion();
  public:
  void unsafe_arena_set_allocated_substancecompoundinfusion(
      ::pulse::cdm::bind::SubstanceCompoundInfusionData* substancecompoundinfusion);
  ::pulse::cdm::bind::SubstanceCompoundInfusionData* unsafe_arena_release_substancecompoundinfusion();

  // .pulse.cdm.bind.SubstanceInfusionData SubstanceInfusion = 28;
  bool has_substanceinfusion() const;
  private:
  bool _internal_has_substanceinfusion() const;
  public:
  void clear_substanceinfusion();
  const ::pulse::cdm::bind::SubstanceInfusionData& substanceinfusion() const;
  ::pulse::cdm::bind::SubstanceInfusionData* release_substanceinfusion();
  ::pulse::cdm::bind::SubstanceInfusionData* mutable_substanceinfusion();
  void set_allocated_substanceinfusion(::pulse::cdm::bind::SubstanceInfusionData* substanceinfusion);
  private:
  const ::pulse::cdm::bind::SubstanceInfusionData& _internal_substanceinfusion() const;
  ::pulse::cdm::bind::SubstanceInfusionData* _internal_mutable_substanceinfusion();
  public:
  void unsafe_arena_set_allocated_substanceinfusion(
      ::pulse::cdm::bind::SubstanceInfusionData* substanceinfusion);
  ::pulse::cdm::bind::SubstanceInfusionData* unsafe_arena_release_substanceinfusion();

  // .pulse.cdm.bind.SupplementalOxygenData SupplementalOxygen = 29;
  bool has_supplementaloxygen() const;
  private:
  bool _internal_has_supplementaloxygen() const;
  public:
  void clear_supplementaloxygen();
  const ::pulse::cdm::bind::SupplementalOxygenData& supplementaloxygen() const;
  ::pulse::cdm::bind::SupplementalOxygenData* release_supplementaloxygen();
  ::pulse::cdm::bind::SupplementalOxygenData* mutable_supplementaloxygen();
  void set_allocated_supplementaloxygen(::pulse::cdm::bind::SupplementalOxygenData* supplementaloxygen);
  private:
  const ::pulse::cdm::bind::SupplementalOxygenData& _internal_supplementaloxygen() const;
  ::pulse::cdm::bind::SupplementalOxygenData* _internal_mutable_supplementaloxygen();
  public:
  void unsafe_arena_set_allocated_supplementaloxygen(
      ::pulse::cdm::bind::SupplementalOxygenData* supplementaloxygen);
  ::pulse::cdm::bind::SupplementalOxygenData* unsafe_arena_release_supplementaloxygen();

  // .pulse.cdm.bind.TensionPneumothoraxData TensionPneumothorax = 30;
  bool has_tensionpneumothorax() const;
  private:
  bool _internal_has_tensionpneumothorax() const;
  public:
  void clear_tensionpneumothorax();
  const ::pulse::cdm::bind::TensionPneumothoraxData& tensionpneumothorax() const;
  ::pulse::cdm::bind::TensionPneumothoraxData* release_tensionpneumothorax();
  ::pulse::cdm::bind::TensionPneumothoraxData* mutable_tensionpneumothorax();
  void set_allocated_tensionpneumothorax(::pulse::cdm::bind::TensionPneumothoraxData* tensionpneumothorax);
  private:
  const ::pulse::cdm::bind::TensionPneumothoraxData& _internal_tensionpneumothorax() const;
  ::pulse::cdm::bind::TensionPneumothoraxData* _internal_mutable_tensionpneumothorax();
  public:
  void unsafe_arena_set_allocated_tensionpneumothorax(
      ::pulse::cdm::bind::TensionPneumothoraxData* tensionpneumothorax);
  ::pulse::cdm::bind::TensionPneumothoraxData* unsafe_arena_release_tensionpneumothorax();

  // .pulse.cdm.bind.UrinateData Urinate = 31;
  bool has_urinate() const;
  private:
  bool _internal_has_urinate() const;
  public:
  void clear_urinate();
  const ::pulse::cdm::bind::UrinateData& urinate() const;
  ::pulse::cdm::bind::UrinateData* release_urinate();
  ::pulse::cdm::bind::UrinateData* mutable_urinate();
  void set_allocated_urinate(::pulse::cdm::bind::UrinateData* urinate);
  private:
  const ::pulse::cdm::bind::UrinateData& _internal_urinate() const;
  ::pulse::cdm::bind::UrinateData* _internal_mutable_urinate();
  public:
  void unsafe_arena_set_allocated_urinate(
      ::pulse::cdm::bind::UrinateData* urinate);
  ::pulse::cdm::bind::UrinateData* unsafe_arena_release_urinate();

  void clear_Action();
  ActionCase Action_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyPatientActionData)
 private:
  class _Internal;
  void set_has_assessment();
  void set_has_acuterespiratorydistresssyndromeexacerbation();
  void set_has_acutestress();
  void set_has_airwayobstruction();
  void set_has_asthmaattack();
  void set_has_braininjury();
  void set_has_bronchoconstriction();
  void set_has_cardiacarrest();
  void set_has_chestcompressionforce();
  void set_has_chestcompressionforcescale();
  void set_has_chestocclusivedressing();
  void set_has_chronicobstructivepulmonarydiseaseexacerbation();
  void set_has_consciousrespiration();
  void set_has_consumenutrients();
  void set_has_dyspnea();
  void set_has_exercise();
  void set_has_hemorrhage();
  void set_has_impairedalveolarexchangeexacerbation();
  void set_has_intubation();
  void set_has_lobarpneumoniaexacerbation();
  void set_has_mechanicalventilation();
  void set_has_needledecompression();
  void set_has_pericardialeffusion();
  void set_has_pulmonaryshuntexacerbation();
  void set_has_respiratoryfatigue();
  void set_has_substancebolus();
  void set_has_substancecompoundinfusion();
  void set_has_substanceinfusion();
  void set_has_supplementaloxygen();
  void set_has_tensionpneumothorax();
  void set_has_urinate();

  inline bool has_Action() const;
  inline void clear_has_Action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::pulse::cdm::bind::PatientAssessmentRequestData* assessment_;
    ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* acuterespiratorydistresssyndromeexacerbation_;
    ::pulse::cdm::bind::AcuteStressData* acutestress_;
    ::pulse::cdm::bind::AirwayObstructionData* airwayobstruction_;
    ::pulse::cdm::bind::AsthmaAttackData* asthmaattack_;
    ::pulse::cdm::bind::BrainInjuryData* braininjury_;
    ::pulse::cdm::bind::BronchoconstrictionData* bronchoconstriction_;
    ::pulse::cdm::bind::CardiacArrestData* cardiacarrest_;
    ::pulse::cdm::bind::ChestCompressionForceData* chestcompressionforce_;
    ::pulse::cdm::bind::ChestCompressionForceScaleData* chestcompressionforcescale_;
    ::pulse::cdm::bind::ChestOcclusiveDressingData* chestocclusivedressing_;
    ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* chronicobstructivepulmonarydiseaseexacerbation_;
    ::pulse::cdm::bind::ConsciousRespirationData* consciousrespiration_;
    ::pulse::cdm::bind::ConsumeNutrientsData* consumenutrients_;
    ::pulse::cdm::bind::DyspneaData* dyspnea_;
    ::pulse::cdm::bind::ExerciseData* exercise_;
    ::pulse::cdm::bind::HemorrhageData* hemorrhage_;
    ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* impairedalveolarexchangeexacerbation_;
    ::pulse::cdm::bind::IntubationData* intubation_;
    ::pulse::cdm::bind::LobarPneumoniaExacerbationData* lobarpneumoniaexacerbation_;
    ::pulse::cdm::bind::MechanicalVentilationData* mechanicalventilation_;
    ::pulse::cdm::bind::NeedleDecompressionData* needledecompression_;
    ::pulse::cdm::bind::PericardialEffusionData* pericardialeffusion_;
    ::pulse::cdm::bind::PulmonaryShuntExacerbationData* pulmonaryshuntexacerbation_;
    ::pulse::cdm::bind::RespiratoryFatigueData* respiratoryfatigue_;
    ::pulse::cdm::bind::SubstanceBolusData* substancebolus_;
    ::pulse::cdm::bind::SubstanceCompoundInfusionData* substancecompoundinfusion_;
    ::pulse::cdm::bind::SubstanceInfusionData* substanceinfusion_;
    ::pulse::cdm::bind::SupplementalOxygenData* supplementaloxygen_;
    ::pulse::cdm::bind::TensionPneumothoraxData* tensionpneumothorax_;
    ::pulse::cdm::bind::UrinateData* urinate_;
  } Action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class PatientActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientActionData) */ {
 public:
  inline PatientActionData() : PatientActionData(nullptr) {}
  virtual ~PatientActionData();

  PatientActionData(const PatientActionData& from);
  PatientActionData(PatientActionData&& from) noexcept
    : PatientActionData() {
    *this = ::std::move(from);
  }

  inline PatientActionData& operator=(const PatientActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientActionData& operator=(PatientActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientActionData& default_instance();

  static inline const PatientActionData* internal_default_instance() {
    return reinterpret_cast<const PatientActionData*>(
               &_PatientActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PatientActionData& a, PatientActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientActionData* New() const final {
    return CreateMaybeMessage<PatientActionData>(nullptr);
  }

  PatientActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientActionData& from);
  void MergeFrom(const PatientActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientActionData";
  }
  protected:
  explicit PatientActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.ActionData Action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::pulse::cdm::bind::ActionData& action() const;
  ::pulse::cdm::bind::ActionData* release_action();
  ::pulse::cdm::bind::ActionData* mutable_action();
  void set_allocated_action(::pulse::cdm::bind::ActionData* action);
  private:
  const ::pulse::cdm::bind::ActionData& _internal_action() const;
  ::pulse::cdm::bind::ActionData* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::pulse::cdm::bind::ActionData* action);
  ::pulse::cdm::bind::ActionData* unsafe_arena_release_action();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientActionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ActionData* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class PatientAssessmentRequestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PatientAssessmentRequestData) */ {
 public:
  inline PatientAssessmentRequestData() : PatientAssessmentRequestData(nullptr) {}
  virtual ~PatientAssessmentRequestData();

  PatientAssessmentRequestData(const PatientAssessmentRequestData& from);
  PatientAssessmentRequestData(PatientAssessmentRequestData&& from) noexcept
    : PatientAssessmentRequestData() {
    *this = ::std::move(from);
  }

  inline PatientAssessmentRequestData& operator=(const PatientAssessmentRequestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientAssessmentRequestData& operator=(PatientAssessmentRequestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientAssessmentRequestData& default_instance();

  static inline const PatientAssessmentRequestData* internal_default_instance() {
    return reinterpret_cast<const PatientAssessmentRequestData*>(
               &_PatientAssessmentRequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PatientAssessmentRequestData& a, PatientAssessmentRequestData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientAssessmentRequestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientAssessmentRequestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientAssessmentRequestData* New() const final {
    return CreateMaybeMessage<PatientAssessmentRequestData>(nullptr);
  }

  PatientAssessmentRequestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientAssessmentRequestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientAssessmentRequestData& from);
  void MergeFrom(const PatientAssessmentRequestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientAssessmentRequestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PatientAssessmentRequestData";
  }
  protected:
  explicit PatientAssessmentRequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ePatientAssessmentType Type = 2;
  void clear_type();
  ::pulse::cdm::bind::ePatientAssessmentType type() const;
  void set_type(::pulse::cdm::bind::ePatientAssessmentType value);
  private:
  ::pulse::cdm::bind::ePatientAssessmentType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::ePatientAssessmentType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PatientAssessmentRequestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class AcuteRespiratoryDistressSyndromeExacerbationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData) */ {
 public:
  inline AcuteRespiratoryDistressSyndromeExacerbationData() : AcuteRespiratoryDistressSyndromeExacerbationData(nullptr) {}
  virtual ~AcuteRespiratoryDistressSyndromeExacerbationData();

  AcuteRespiratoryDistressSyndromeExacerbationData(const AcuteRespiratoryDistressSyndromeExacerbationData& from);
  AcuteRespiratoryDistressSyndromeExacerbationData(AcuteRespiratoryDistressSyndromeExacerbationData&& from) noexcept
    : AcuteRespiratoryDistressSyndromeExacerbationData() {
    *this = ::std::move(from);
  }

  inline AcuteRespiratoryDistressSyndromeExacerbationData& operator=(const AcuteRespiratoryDistressSyndromeExacerbationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcuteRespiratoryDistressSyndromeExacerbationData& operator=(AcuteRespiratoryDistressSyndromeExacerbationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcuteRespiratoryDistressSyndromeExacerbationData& default_instance();

  static inline const AcuteRespiratoryDistressSyndromeExacerbationData* internal_default_instance() {
    return reinterpret_cast<const AcuteRespiratoryDistressSyndromeExacerbationData*>(
               &_AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcuteRespiratoryDistressSyndromeExacerbationData& a, AcuteRespiratoryDistressSyndromeExacerbationData& b) {
    a.Swap(&b);
  }
  inline void Swap(AcuteRespiratoryDistressSyndromeExacerbationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcuteRespiratoryDistressSyndromeExacerbationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcuteRespiratoryDistressSyndromeExacerbationData* New() const final {
    return CreateMaybeMessage<AcuteRespiratoryDistressSyndromeExacerbationData>(nullptr);
  }

  AcuteRespiratoryDistressSyndromeExacerbationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcuteRespiratoryDistressSyndromeExacerbationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcuteRespiratoryDistressSyndromeExacerbationData& from);
  void MergeFrom(const AcuteRespiratoryDistressSyndromeExacerbationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcuteRespiratoryDistressSyndromeExacerbationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData";
  }
  protected:
  explicit AcuteRespiratoryDistressSyndromeExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kLeftLungAffectedFieldNumber = 3,
    kRightLungAffectedFieldNumber = 4,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  bool has_leftlungaffected() const;
  private:
  bool _internal_has_leftlungaffected() const;
  public:
  void clear_leftlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftlungaffected();
  void set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftlungaffected();
  public:
  void unsafe_arena_set_allocated_leftlungaffected(
      ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_leftlungaffected();

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  bool has_rightlungaffected() const;
  private:
  bool _internal_has_rightlungaffected() const;
  public:
  void clear_rightlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightlungaffected();
  void set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightlungaffected();
  public:
  void unsafe_arena_set_allocated_rightlungaffected(
      ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_rightlungaffected();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected_;
  ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class AcuteStressData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AcuteStressData) */ {
 public:
  inline AcuteStressData() : AcuteStressData(nullptr) {}
  virtual ~AcuteStressData();

  AcuteStressData(const AcuteStressData& from);
  AcuteStressData(AcuteStressData&& from) noexcept
    : AcuteStressData() {
    *this = ::std::move(from);
  }

  inline AcuteStressData& operator=(const AcuteStressData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcuteStressData& operator=(AcuteStressData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcuteStressData& default_instance();

  static inline const AcuteStressData* internal_default_instance() {
    return reinterpret_cast<const AcuteStressData*>(
               &_AcuteStressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AcuteStressData& a, AcuteStressData& b) {
    a.Swap(&b);
  }
  inline void Swap(AcuteStressData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcuteStressData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcuteStressData* New() const final {
    return CreateMaybeMessage<AcuteStressData>(nullptr);
  }

  AcuteStressData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcuteStressData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcuteStressData& from);
  void MergeFrom(const AcuteStressData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcuteStressData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AcuteStressData";
  }
  protected:
  explicit AcuteStressData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AcuteStressData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class AirwayObstructionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AirwayObstructionData) */ {
 public:
  inline AirwayObstructionData() : AirwayObstructionData(nullptr) {}
  virtual ~AirwayObstructionData();

  AirwayObstructionData(const AirwayObstructionData& from);
  AirwayObstructionData(AirwayObstructionData&& from) noexcept
    : AirwayObstructionData() {
    *this = ::std::move(from);
  }

  inline AirwayObstructionData& operator=(const AirwayObstructionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirwayObstructionData& operator=(AirwayObstructionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirwayObstructionData& default_instance();

  static inline const AirwayObstructionData* internal_default_instance() {
    return reinterpret_cast<const AirwayObstructionData*>(
               &_AirwayObstructionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AirwayObstructionData& a, AirwayObstructionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AirwayObstructionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirwayObstructionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirwayObstructionData* New() const final {
    return CreateMaybeMessage<AirwayObstructionData>(nullptr);
  }

  AirwayObstructionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirwayObstructionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirwayObstructionData& from);
  void MergeFrom(const AirwayObstructionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirwayObstructionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AirwayObstructionData";
  }
  protected:
  explicit AirwayObstructionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AirwayObstructionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class AsthmaAttackData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AsthmaAttackData) */ {
 public:
  inline AsthmaAttackData() : AsthmaAttackData(nullptr) {}
  virtual ~AsthmaAttackData();

  AsthmaAttackData(const AsthmaAttackData& from);
  AsthmaAttackData(AsthmaAttackData&& from) noexcept
    : AsthmaAttackData() {
    *this = ::std::move(from);
  }

  inline AsthmaAttackData& operator=(const AsthmaAttackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsthmaAttackData& operator=(AsthmaAttackData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsthmaAttackData& default_instance();

  static inline const AsthmaAttackData* internal_default_instance() {
    return reinterpret_cast<const AsthmaAttackData*>(
               &_AsthmaAttackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AsthmaAttackData& a, AsthmaAttackData& b) {
    a.Swap(&b);
  }
  inline void Swap(AsthmaAttackData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsthmaAttackData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsthmaAttackData* New() const final {
    return CreateMaybeMessage<AsthmaAttackData>(nullptr);
  }

  AsthmaAttackData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsthmaAttackData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsthmaAttackData& from);
  void MergeFrom(const AsthmaAttackData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsthmaAttackData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AsthmaAttackData";
  }
  protected:
  explicit AsthmaAttackData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AsthmaAttackData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class BrainInjuryData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BrainInjuryData) */ {
 public:
  inline BrainInjuryData() : BrainInjuryData(nullptr) {}
  virtual ~BrainInjuryData();

  BrainInjuryData(const BrainInjuryData& from);
  BrainInjuryData(BrainInjuryData&& from) noexcept
    : BrainInjuryData() {
    *this = ::std::move(from);
  }

  inline BrainInjuryData& operator=(const BrainInjuryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrainInjuryData& operator=(BrainInjuryData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrainInjuryData& default_instance();

  static inline const BrainInjuryData* internal_default_instance() {
    return reinterpret_cast<const BrainInjuryData*>(
               &_BrainInjuryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BrainInjuryData& a, BrainInjuryData& b) {
    a.Swap(&b);
  }
  inline void Swap(BrainInjuryData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrainInjuryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrainInjuryData* New() const final {
    return CreateMaybeMessage<BrainInjuryData>(nullptr);
  }

  BrainInjuryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrainInjuryData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrainInjuryData& from);
  void MergeFrom(const BrainInjuryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrainInjuryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BrainInjuryData";
  }
  protected:
  explicit BrainInjuryData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BrainInjuryData_eType eType;
  static constexpr eType Diffuse =
    BrainInjuryData_eType_Diffuse;
  static constexpr eType LeftFocal =
    BrainInjuryData_eType_LeftFocal;
  static constexpr eType RightFocal =
    BrainInjuryData_eType_RightFocal;
  static inline bool eType_IsValid(int value) {
    return BrainInjuryData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    BrainInjuryData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    BrainInjuryData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    BrainInjuryData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return BrainInjuryData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return BrainInjuryData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return BrainInjuryData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 3;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // .pulse.cdm.bind.BrainInjuryData.eType Type = 2;
  void clear_type();
  ::pulse::cdm::bind::BrainInjuryData_eType type() const;
  void set_type(::pulse::cdm::bind::BrainInjuryData_eType value);
  private:
  ::pulse::cdm::bind::BrainInjuryData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::BrainInjuryData_eType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BrainInjuryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class BronchoconstrictionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.BronchoconstrictionData) */ {
 public:
  inline BronchoconstrictionData() : BronchoconstrictionData(nullptr) {}
  virtual ~BronchoconstrictionData();

  BronchoconstrictionData(const BronchoconstrictionData& from);
  BronchoconstrictionData(BronchoconstrictionData&& from) noexcept
    : BronchoconstrictionData() {
    *this = ::std::move(from);
  }

  inline BronchoconstrictionData& operator=(const BronchoconstrictionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BronchoconstrictionData& operator=(BronchoconstrictionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BronchoconstrictionData& default_instance();

  static inline const BronchoconstrictionData* internal_default_instance() {
    return reinterpret_cast<const BronchoconstrictionData*>(
               &_BronchoconstrictionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BronchoconstrictionData& a, BronchoconstrictionData& b) {
    a.Swap(&b);
  }
  inline void Swap(BronchoconstrictionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BronchoconstrictionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BronchoconstrictionData* New() const final {
    return CreateMaybeMessage<BronchoconstrictionData>(nullptr);
  }

  BronchoconstrictionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BronchoconstrictionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BronchoconstrictionData& from);
  void MergeFrom(const BronchoconstrictionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BronchoconstrictionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.BronchoconstrictionData";
  }
  protected:
  explicit BronchoconstrictionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.BronchoconstrictionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class CardiacArrestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.CardiacArrestData) */ {
 public:
  inline CardiacArrestData() : CardiacArrestData(nullptr) {}
  virtual ~CardiacArrestData();

  CardiacArrestData(const CardiacArrestData& from);
  CardiacArrestData(CardiacArrestData&& from) noexcept
    : CardiacArrestData() {
    *this = ::std::move(from);
  }

  inline CardiacArrestData& operator=(const CardiacArrestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardiacArrestData& operator=(CardiacArrestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardiacArrestData& default_instance();

  static inline const CardiacArrestData* internal_default_instance() {
    return reinterpret_cast<const CardiacArrestData*>(
               &_CardiacArrestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CardiacArrestData& a, CardiacArrestData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardiacArrestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardiacArrestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardiacArrestData* New() const final {
    return CreateMaybeMessage<CardiacArrestData>(nullptr);
  }

  CardiacArrestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardiacArrestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardiacArrestData& from);
  void MergeFrom(const CardiacArrestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardiacArrestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.CardiacArrestData";
  }
  protected:
  explicit CardiacArrestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.CardiacArrestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ChestCompressionForceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChestCompressionForceData) */ {
 public:
  inline ChestCompressionForceData() : ChestCompressionForceData(nullptr) {}
  virtual ~ChestCompressionForceData();

  ChestCompressionForceData(const ChestCompressionForceData& from);
  ChestCompressionForceData(ChestCompressionForceData&& from) noexcept
    : ChestCompressionForceData() {
    *this = ::std::move(from);
  }

  inline ChestCompressionForceData& operator=(const ChestCompressionForceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestCompressionForceData& operator=(ChestCompressionForceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestCompressionForceData& default_instance();

  static inline const ChestCompressionForceData* internal_default_instance() {
    return reinterpret_cast<const ChestCompressionForceData*>(
               &_ChestCompressionForceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChestCompressionForceData& a, ChestCompressionForceData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestCompressionForceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestCompressionForceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestCompressionForceData* New() const final {
    return CreateMaybeMessage<ChestCompressionForceData>(nullptr);
  }

  ChestCompressionForceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestCompressionForceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestCompressionForceData& from);
  void MergeFrom(const ChestCompressionForceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestCompressionForceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChestCompressionForceData";
  }
  protected:
  explicit ChestCompressionForceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kForceFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarForceData Force = 2;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::pulse::cdm::bind::ScalarForceData& force() const;
  ::pulse::cdm::bind::ScalarForceData* release_force();
  ::pulse::cdm::bind::ScalarForceData* mutable_force();
  void set_allocated_force(::pulse::cdm::bind::ScalarForceData* force);
  private:
  const ::pulse::cdm::bind::ScalarForceData& _internal_force() const;
  ::pulse::cdm::bind::ScalarForceData* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::pulse::cdm::bind::ScalarForceData* force);
  ::pulse::cdm::bind::ScalarForceData* unsafe_arena_release_force();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChestCompressionForceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarForceData* force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ChestCompressionForceScaleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChestCompressionForceScaleData) */ {
 public:
  inline ChestCompressionForceScaleData() : ChestCompressionForceScaleData(nullptr) {}
  virtual ~ChestCompressionForceScaleData();

  ChestCompressionForceScaleData(const ChestCompressionForceScaleData& from);
  ChestCompressionForceScaleData(ChestCompressionForceScaleData&& from) noexcept
    : ChestCompressionForceScaleData() {
    *this = ::std::move(from);
  }

  inline ChestCompressionForceScaleData& operator=(const ChestCompressionForceScaleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestCompressionForceScaleData& operator=(ChestCompressionForceScaleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestCompressionForceScaleData& default_instance();

  static inline const ChestCompressionForceScaleData* internal_default_instance() {
    return reinterpret_cast<const ChestCompressionForceScaleData*>(
               &_ChestCompressionForceScaleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChestCompressionForceScaleData& a, ChestCompressionForceScaleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestCompressionForceScaleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestCompressionForceScaleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestCompressionForceScaleData* New() const final {
    return CreateMaybeMessage<ChestCompressionForceScaleData>(nullptr);
  }

  ChestCompressionForceScaleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestCompressionForceScaleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestCompressionForceScaleData& from);
  void MergeFrom(const ChestCompressionForceScaleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestCompressionForceScaleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChestCompressionForceScaleData";
  }
  protected:
  explicit ChestCompressionForceScaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kForceScaleFieldNumber = 2,
    kForcePeriodFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data ForceScale = 2;
  bool has_forcescale() const;
  private:
  bool _internal_has_forcescale() const;
  public:
  void clear_forcescale();
  const ::pulse::cdm::bind::Scalar0To1Data& forcescale() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_forcescale();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_forcescale();
  void set_allocated_forcescale(::pulse::cdm::bind::Scalar0To1Data* forcescale);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_forcescale() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_forcescale();
  public:
  void unsafe_arena_set_allocated_forcescale(
      ::pulse::cdm::bind::Scalar0To1Data* forcescale);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_forcescale();

  // .pulse.cdm.bind.ScalarTimeData ForcePeriod = 3;
  bool has_forceperiod() const;
  private:
  bool _internal_has_forceperiod() const;
  public:
  void clear_forceperiod();
  const ::pulse::cdm::bind::ScalarTimeData& forceperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_forceperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_forceperiod();
  void set_allocated_forceperiod(::pulse::cdm::bind::ScalarTimeData* forceperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_forceperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_forceperiod();
  public:
  void unsafe_arena_set_allocated_forceperiod(
      ::pulse::cdm::bind::ScalarTimeData* forceperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_forceperiod();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChestCompressionForceScaleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* forcescale_;
  ::pulse::cdm::bind::ScalarTimeData* forceperiod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ChestOcclusiveDressingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChestOcclusiveDressingData) */ {
 public:
  inline ChestOcclusiveDressingData() : ChestOcclusiveDressingData(nullptr) {}
  virtual ~ChestOcclusiveDressingData();

  ChestOcclusiveDressingData(const ChestOcclusiveDressingData& from);
  ChestOcclusiveDressingData(ChestOcclusiveDressingData&& from) noexcept
    : ChestOcclusiveDressingData() {
    *this = ::std::move(from);
  }

  inline ChestOcclusiveDressingData& operator=(const ChestOcclusiveDressingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChestOcclusiveDressingData& operator=(ChestOcclusiveDressingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChestOcclusiveDressingData& default_instance();

  static inline const ChestOcclusiveDressingData* internal_default_instance() {
    return reinterpret_cast<const ChestOcclusiveDressingData*>(
               &_ChestOcclusiveDressingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChestOcclusiveDressingData& a, ChestOcclusiveDressingData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChestOcclusiveDressingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChestOcclusiveDressingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChestOcclusiveDressingData* New() const final {
    return CreateMaybeMessage<ChestOcclusiveDressingData>(nullptr);
  }

  ChestOcclusiveDressingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChestOcclusiveDressingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChestOcclusiveDressingData& from);
  void MergeFrom(const ChestOcclusiveDressingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChestOcclusiveDressingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChestOcclusiveDressingData";
  }
  protected:
  explicit ChestOcclusiveDressingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kStateFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSide Side = 3;
  void clear_side();
  ::pulse::cdm::bind::eSide side() const;
  void set_side(::pulse::cdm::bind::eSide value);
  private:
  ::pulse::cdm::bind::eSide _internal_side() const;
  void _internal_set_side(::pulse::cdm::bind::eSide value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChestOcclusiveDressingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  int state_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ChronicObstructivePulmonaryDiseaseExacerbationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData) */ {
 public:
  inline ChronicObstructivePulmonaryDiseaseExacerbationData() : ChronicObstructivePulmonaryDiseaseExacerbationData(nullptr) {}
  virtual ~ChronicObstructivePulmonaryDiseaseExacerbationData();

  ChronicObstructivePulmonaryDiseaseExacerbationData(const ChronicObstructivePulmonaryDiseaseExacerbationData& from);
  ChronicObstructivePulmonaryDiseaseExacerbationData(ChronicObstructivePulmonaryDiseaseExacerbationData&& from) noexcept
    : ChronicObstructivePulmonaryDiseaseExacerbationData() {
    *this = ::std::move(from);
  }

  inline ChronicObstructivePulmonaryDiseaseExacerbationData& operator=(const ChronicObstructivePulmonaryDiseaseExacerbationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronicObstructivePulmonaryDiseaseExacerbationData& operator=(ChronicObstructivePulmonaryDiseaseExacerbationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChronicObstructivePulmonaryDiseaseExacerbationData& default_instance();

  static inline const ChronicObstructivePulmonaryDiseaseExacerbationData* internal_default_instance() {
    return reinterpret_cast<const ChronicObstructivePulmonaryDiseaseExacerbationData*>(
               &_ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChronicObstructivePulmonaryDiseaseExacerbationData& a, ChronicObstructivePulmonaryDiseaseExacerbationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronicObstructivePulmonaryDiseaseExacerbationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChronicObstructivePulmonaryDiseaseExacerbationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronicObstructivePulmonaryDiseaseExacerbationData* New() const final {
    return CreateMaybeMessage<ChronicObstructivePulmonaryDiseaseExacerbationData>(nullptr);
  }

  ChronicObstructivePulmonaryDiseaseExacerbationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronicObstructivePulmonaryDiseaseExacerbationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChronicObstructivePulmonaryDiseaseExacerbationData& from);
  void MergeFrom(const ChronicObstructivePulmonaryDiseaseExacerbationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronicObstructivePulmonaryDiseaseExacerbationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData";
  }
  protected:
  explicit ChronicObstructivePulmonaryDiseaseExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kBronchitisSeverityFieldNumber = 2,
    kEmphysemaSeverityFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  bool has_bronchitisseverity() const;
  private:
  bool _internal_has_bronchitisseverity() const;
  public:
  void clear_bronchitisseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& bronchitisseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_bronchitisseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_bronchitisseverity();
  void set_allocated_bronchitisseverity(::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_bronchitisseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_bronchitisseverity();
  public:
  void unsafe_arena_set_allocated_bronchitisseverity(
      ::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_bronchitisseverity();

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  bool has_emphysemaseverity() const;
  private:
  bool _internal_has_emphysemaseverity() const;
  public:
  void clear_emphysemaseverity();
  const ::pulse::cdm::bind::Scalar0To1Data& emphysemaseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_emphysemaseverity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_emphysemaseverity();
  void set_allocated_emphysemaseverity(::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_emphysemaseverity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_emphysemaseverity();
  public:
  void unsafe_arena_set_allocated_emphysemaseverity(
      ::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_emphysemaseverity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity_;
  ::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class DyspneaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.DyspneaData) */ {
 public:
  inline DyspneaData() : DyspneaData(nullptr) {}
  virtual ~DyspneaData();

  DyspneaData(const DyspneaData& from);
  DyspneaData(DyspneaData&& from) noexcept
    : DyspneaData() {
    *this = ::std::move(from);
  }

  inline DyspneaData& operator=(const DyspneaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DyspneaData& operator=(DyspneaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DyspneaData& default_instance();

  static inline const DyspneaData* internal_default_instance() {
    return reinterpret_cast<const DyspneaData*>(
               &_DyspneaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DyspneaData& a, DyspneaData& b) {
    a.Swap(&b);
  }
  inline void Swap(DyspneaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DyspneaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DyspneaData* New() const final {
    return CreateMaybeMessage<DyspneaData>(nullptr);
  }

  DyspneaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DyspneaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DyspneaData& from);
  void MergeFrom(const DyspneaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DyspneaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.DyspneaData";
  }
  protected:
  explicit DyspneaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.DyspneaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ForcedInhaleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ForcedInhaleData) */ {
 public:
  inline ForcedInhaleData() : ForcedInhaleData(nullptr) {}
  virtual ~ForcedInhaleData();

  ForcedInhaleData(const ForcedInhaleData& from);
  ForcedInhaleData(ForcedInhaleData&& from) noexcept
    : ForcedInhaleData() {
    *this = ::std::move(from);
  }

  inline ForcedInhaleData& operator=(const ForcedInhaleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForcedInhaleData& operator=(ForcedInhaleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForcedInhaleData& default_instance();

  static inline const ForcedInhaleData* internal_default_instance() {
    return reinterpret_cast<const ForcedInhaleData*>(
               &_ForcedInhaleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ForcedInhaleData& a, ForcedInhaleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ForcedInhaleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForcedInhaleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForcedInhaleData* New() const final {
    return CreateMaybeMessage<ForcedInhaleData>(nullptr);
  }

  ForcedInhaleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForcedInhaleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForcedInhaleData& from);
  void MergeFrom(const ForcedInhaleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForcedInhaleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ForcedInhaleData";
  }
  protected:
  explicit ForcedInhaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInspiratoryCapacityFractionFieldNumber = 1,
    kInhalePeriodFieldNumber = 2,
    kHoldPeriodFieldNumber = 3,
    kReleasePeriodFieldNumber = 4,
  };
  // .pulse.cdm.bind.Scalar0To1Data InspiratoryCapacityFraction = 1;
  bool has_inspiratorycapacityfraction() const;
  private:
  bool _internal_has_inspiratorycapacityfraction() const;
  public:
  void clear_inspiratorycapacityfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& inspiratorycapacityfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_inspiratorycapacityfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_inspiratorycapacityfraction();
  void set_allocated_inspiratorycapacityfraction(::pulse::cdm::bind::Scalar0To1Data* inspiratorycapacityfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_inspiratorycapacityfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_inspiratorycapacityfraction();
  public:
  void unsafe_arena_set_allocated_inspiratorycapacityfraction(
      ::pulse::cdm::bind::Scalar0To1Data* inspiratorycapacityfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_inspiratorycapacityfraction();

  // .pulse.cdm.bind.ScalarTimeData InhalePeriod = 2;
  bool has_inhaleperiod() const;
  private:
  bool _internal_has_inhaleperiod() const;
  public:
  void clear_inhaleperiod();
  const ::pulse::cdm::bind::ScalarTimeData& inhaleperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_inhaleperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_inhaleperiod();
  void set_allocated_inhaleperiod(::pulse::cdm::bind::ScalarTimeData* inhaleperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_inhaleperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_inhaleperiod();
  public:
  void unsafe_arena_set_allocated_inhaleperiod(
      ::pulse::cdm::bind::ScalarTimeData* inhaleperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_inhaleperiod();

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  bool has_holdperiod() const;
  private:
  bool _internal_has_holdperiod() const;
  public:
  void clear_holdperiod();
  const ::pulse::cdm::bind::ScalarTimeData& holdperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_holdperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_holdperiod();
  void set_allocated_holdperiod(::pulse::cdm::bind::ScalarTimeData* holdperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_holdperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_holdperiod();
  public:
  void unsafe_arena_set_allocated_holdperiod(
      ::pulse::cdm::bind::ScalarTimeData* holdperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_holdperiod();

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  bool has_releaseperiod() const;
  private:
  bool _internal_has_releaseperiod() const;
  public:
  void clear_releaseperiod();
  const ::pulse::cdm::bind::ScalarTimeData& releaseperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_releaseperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_releaseperiod();
  void set_allocated_releaseperiod(::pulse::cdm::bind::ScalarTimeData* releaseperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_releaseperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_releaseperiod();
  public:
  void unsafe_arena_set_allocated_releaseperiod(
      ::pulse::cdm::bind::ScalarTimeData* releaseperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_releaseperiod();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ForcedInhaleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* inspiratorycapacityfraction_;
  ::pulse::cdm::bind::ScalarTimeData* inhaleperiod_;
  ::pulse::cdm::bind::ScalarTimeData* holdperiod_;
  ::pulse::cdm::bind::ScalarTimeData* releaseperiod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ForcedExhaleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ForcedExhaleData) */ {
 public:
  inline ForcedExhaleData() : ForcedExhaleData(nullptr) {}
  virtual ~ForcedExhaleData();

  ForcedExhaleData(const ForcedExhaleData& from);
  ForcedExhaleData(ForcedExhaleData&& from) noexcept
    : ForcedExhaleData() {
    *this = ::std::move(from);
  }

  inline ForcedExhaleData& operator=(const ForcedExhaleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForcedExhaleData& operator=(ForcedExhaleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForcedExhaleData& default_instance();

  static inline const ForcedExhaleData* internal_default_instance() {
    return reinterpret_cast<const ForcedExhaleData*>(
               &_ForcedExhaleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ForcedExhaleData& a, ForcedExhaleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ForcedExhaleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForcedExhaleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForcedExhaleData* New() const final {
    return CreateMaybeMessage<ForcedExhaleData>(nullptr);
  }

  ForcedExhaleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForcedExhaleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForcedExhaleData& from);
  void MergeFrom(const ForcedExhaleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForcedExhaleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ForcedExhaleData";
  }
  protected:
  explicit ForcedExhaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpiratoryReserveVolumeFractionFieldNumber = 1,
    kExhalePeriodFieldNumber = 2,
    kHoldPeriodFieldNumber = 3,
    kReleasePeriodFieldNumber = 4,
  };
  // .pulse.cdm.bind.Scalar0To1Data ExpiratoryReserveVolumeFraction = 1;
  bool has_expiratoryreservevolumefraction() const;
  private:
  bool _internal_has_expiratoryreservevolumefraction() const;
  public:
  void clear_expiratoryreservevolumefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& expiratoryreservevolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_expiratoryreservevolumefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_expiratoryreservevolumefraction();
  void set_allocated_expiratoryreservevolumefraction(::pulse::cdm::bind::Scalar0To1Data* expiratoryreservevolumefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_expiratoryreservevolumefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_expiratoryreservevolumefraction();
  public:
  void unsafe_arena_set_allocated_expiratoryreservevolumefraction(
      ::pulse::cdm::bind::Scalar0To1Data* expiratoryreservevolumefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_expiratoryreservevolumefraction();

  // .pulse.cdm.bind.ScalarTimeData ExhalePeriod = 2;
  bool has_exhaleperiod() const;
  private:
  bool _internal_has_exhaleperiod() const;
  public:
  void clear_exhaleperiod();
  const ::pulse::cdm::bind::ScalarTimeData& exhaleperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_exhaleperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_exhaleperiod();
  void set_allocated_exhaleperiod(::pulse::cdm::bind::ScalarTimeData* exhaleperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_exhaleperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_exhaleperiod();
  public:
  void unsafe_arena_set_allocated_exhaleperiod(
      ::pulse::cdm::bind::ScalarTimeData* exhaleperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_exhaleperiod();

  // .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
  bool has_holdperiod() const;
  private:
  bool _internal_has_holdperiod() const;
  public:
  void clear_holdperiod();
  const ::pulse::cdm::bind::ScalarTimeData& holdperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_holdperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_holdperiod();
  void set_allocated_holdperiod(::pulse::cdm::bind::ScalarTimeData* holdperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_holdperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_holdperiod();
  public:
  void unsafe_arena_set_allocated_holdperiod(
      ::pulse::cdm::bind::ScalarTimeData* holdperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_holdperiod();

  // .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
  bool has_releaseperiod() const;
  private:
  bool _internal_has_releaseperiod() const;
  public:
  void clear_releaseperiod();
  const ::pulse::cdm::bind::ScalarTimeData& releaseperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* release_releaseperiod();
  ::pulse::cdm::bind::ScalarTimeData* mutable_releaseperiod();
  void set_allocated_releaseperiod(::pulse::cdm::bind::ScalarTimeData* releaseperiod);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_releaseperiod() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_releaseperiod();
  public:
  void unsafe_arena_set_allocated_releaseperiod(
      ::pulse::cdm::bind::ScalarTimeData* releaseperiod);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_releaseperiod();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ForcedExhaleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::Scalar0To1Data* expiratoryreservevolumefraction_;
  ::pulse::cdm::bind::ScalarTimeData* exhaleperiod_;
  ::pulse::cdm::bind::ScalarTimeData* holdperiod_;
  ::pulse::cdm::bind::ScalarTimeData* releaseperiod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ForcedPauseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ForcedPauseData) */ {
 public:
  inline ForcedPauseData() : ForcedPauseData(nullptr) {}
  virtual ~ForcedPauseData();

  ForcedPauseData(const ForcedPauseData& from);
  ForcedPauseData(ForcedPauseData&& from) noexcept
    : ForcedPauseData() {
    *this = ::std::move(from);
  }

  inline ForcedPauseData& operator=(const ForcedPauseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForcedPauseData& operator=(ForcedPauseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForcedPauseData& default_instance();

  static inline const ForcedPauseData* internal_default_instance() {
    return reinterpret_cast<const ForcedPauseData*>(
               &_ForcedPauseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ForcedPauseData& a, ForcedPauseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ForcedPauseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForcedPauseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForcedPauseData* New() const final {
    return CreateMaybeMessage<ForcedPauseData>(nullptr);
  }

  ForcedPauseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForcedPauseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForcedPauseData& from);
  void MergeFrom(const ForcedPauseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForcedPauseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ForcedPauseData";
  }
  protected:
  explicit ForcedPauseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarTimeData Period = 1;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::pulse::cdm::bind::ScalarTimeData& period() const;
  ::pulse::cdm::bind::ScalarTimeData* release_period();
  ::pulse::cdm::bind::ScalarTimeData* mutable_period();
  void set_allocated_period(::pulse::cdm::bind::ScalarTimeData* period);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_period() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_period();
  public:
  void unsafe_arena_set_allocated_period(
      ::pulse::cdm::bind::ScalarTimeData* period);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_period();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ForcedPauseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarTimeData* period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class UseInhalerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.UseInhalerData) */ {
 public:
  inline UseInhalerData() : UseInhalerData(nullptr) {}
  virtual ~UseInhalerData();

  UseInhalerData(const UseInhalerData& from);
  UseInhalerData(UseInhalerData&& from) noexcept
    : UseInhalerData() {
    *this = ::std::move(from);
  }

  inline UseInhalerData& operator=(const UseInhalerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseInhalerData& operator=(UseInhalerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseInhalerData& default_instance();

  static inline const UseInhalerData* internal_default_instance() {
    return reinterpret_cast<const UseInhalerData*>(
               &_UseInhalerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UseInhalerData& a, UseInhalerData& b) {
    a.Swap(&b);
  }
  inline void Swap(UseInhalerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UseInhalerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseInhalerData* New() const final {
    return CreateMaybeMessage<UseInhalerData>(nullptr);
  }

  UseInhalerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseInhalerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseInhalerData& from);
  void MergeFrom(const UseInhalerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseInhalerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.UseInhalerData";
  }
  protected:
  explicit UseInhalerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.UseInhalerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class AnyConsciousRespirationCommandData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyConsciousRespirationCommandData) */ {
 public:
  inline AnyConsciousRespirationCommandData() : AnyConsciousRespirationCommandData(nullptr) {}
  virtual ~AnyConsciousRespirationCommandData();

  AnyConsciousRespirationCommandData(const AnyConsciousRespirationCommandData& from);
  AnyConsciousRespirationCommandData(AnyConsciousRespirationCommandData&& from) noexcept
    : AnyConsciousRespirationCommandData() {
    *this = ::std::move(from);
  }

  inline AnyConsciousRespirationCommandData& operator=(const AnyConsciousRespirationCommandData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyConsciousRespirationCommandData& operator=(AnyConsciousRespirationCommandData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyConsciousRespirationCommandData& default_instance();

  enum CommandCase {
    kForcedInhale = 2,
    kForcedExhale = 3,
    kForcedPause = 4,
    kUseInhaler = 5,
    COMMAND_NOT_SET = 0,
  };

  static inline const AnyConsciousRespirationCommandData* internal_default_instance() {
    return reinterpret_cast<const AnyConsciousRespirationCommandData*>(
               &_AnyConsciousRespirationCommandData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AnyConsciousRespirationCommandData& a, AnyConsciousRespirationCommandData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyConsciousRespirationCommandData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyConsciousRespirationCommandData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyConsciousRespirationCommandData* New() const final {
    return CreateMaybeMessage<AnyConsciousRespirationCommandData>(nullptr);
  }

  AnyConsciousRespirationCommandData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyConsciousRespirationCommandData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyConsciousRespirationCommandData& from);
  void MergeFrom(const AnyConsciousRespirationCommandData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyConsciousRespirationCommandData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyConsciousRespirationCommandData";
  }
  protected:
  explicit AnyConsciousRespirationCommandData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 1,
    kForcedInhaleFieldNumber = 2,
    kForcedExhaleFieldNumber = 3,
    kForcedPauseFieldNumber = 4,
    kUseInhalerFieldNumber = 5,
  };
  // string Comment = 1;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .pulse.cdm.bind.ForcedInhaleData ForcedInhale = 2;
  bool has_forcedinhale() const;
  private:
  bool _internal_has_forcedinhale() const;
  public:
  void clear_forcedinhale();
  const ::pulse::cdm::bind::ForcedInhaleData& forcedinhale() const;
  ::pulse::cdm::bind::ForcedInhaleData* release_forcedinhale();
  ::pulse::cdm::bind::ForcedInhaleData* mutable_forcedinhale();
  void set_allocated_forcedinhale(::pulse::cdm::bind::ForcedInhaleData* forcedinhale);
  private:
  const ::pulse::cdm::bind::ForcedInhaleData& _internal_forcedinhale() const;
  ::pulse::cdm::bind::ForcedInhaleData* _internal_mutable_forcedinhale();
  public:
  void unsafe_arena_set_allocated_forcedinhale(
      ::pulse::cdm::bind::ForcedInhaleData* forcedinhale);
  ::pulse::cdm::bind::ForcedInhaleData* unsafe_arena_release_forcedinhale();

  // .pulse.cdm.bind.ForcedExhaleData ForcedExhale = 3;
  bool has_forcedexhale() const;
  private:
  bool _internal_has_forcedexhale() const;
  public:
  void clear_forcedexhale();
  const ::pulse::cdm::bind::ForcedExhaleData& forcedexhale() const;
  ::pulse::cdm::bind::ForcedExhaleData* release_forcedexhale();
  ::pulse::cdm::bind::ForcedExhaleData* mutable_forcedexhale();
  void set_allocated_forcedexhale(::pulse::cdm::bind::ForcedExhaleData* forcedexhale);
  private:
  const ::pulse::cdm::bind::ForcedExhaleData& _internal_forcedexhale() const;
  ::pulse::cdm::bind::ForcedExhaleData* _internal_mutable_forcedexhale();
  public:
  void unsafe_arena_set_allocated_forcedexhale(
      ::pulse::cdm::bind::ForcedExhaleData* forcedexhale);
  ::pulse::cdm::bind::ForcedExhaleData* unsafe_arena_release_forcedexhale();

  // .pulse.cdm.bind.ForcedPauseData ForcedPause = 4;
  bool has_forcedpause() const;
  private:
  bool _internal_has_forcedpause() const;
  public:
  void clear_forcedpause();
  const ::pulse::cdm::bind::ForcedPauseData& forcedpause() const;
  ::pulse::cdm::bind::ForcedPauseData* release_forcedpause();
  ::pulse::cdm::bind::ForcedPauseData* mutable_forcedpause();
  void set_allocated_forcedpause(::pulse::cdm::bind::ForcedPauseData* forcedpause);
  private:
  const ::pulse::cdm::bind::ForcedPauseData& _internal_forcedpause() const;
  ::pulse::cdm::bind::ForcedPauseData* _internal_mutable_forcedpause();
  public:
  void unsafe_arena_set_allocated_forcedpause(
      ::pulse::cdm::bind::ForcedPauseData* forcedpause);
  ::pulse::cdm::bind::ForcedPauseData* unsafe_arena_release_forcedpause();

  // .pulse.cdm.bind.UseInhalerData UseInhaler = 5;
  bool has_useinhaler() const;
  private:
  bool _internal_has_useinhaler() const;
  public:
  void clear_useinhaler();
  const ::pulse::cdm::bind::UseInhalerData& useinhaler() const;
  ::pulse::cdm::bind::UseInhalerData* release_useinhaler();
  ::pulse::cdm::bind::UseInhalerData* mutable_useinhaler();
  void set_allocated_useinhaler(::pulse::cdm::bind::UseInhalerData* useinhaler);
  private:
  const ::pulse::cdm::bind::UseInhalerData& _internal_useinhaler() const;
  ::pulse::cdm::bind::UseInhalerData* _internal_mutable_useinhaler();
  public:
  void unsafe_arena_set_allocated_useinhaler(
      ::pulse::cdm::bind::UseInhalerData* useinhaler);
  ::pulse::cdm::bind::UseInhalerData* unsafe_arena_release_useinhaler();

  void clear_Command();
  CommandCase Command_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyConsciousRespirationCommandData)
 private:
  class _Internal;
  void set_has_forcedinhale();
  void set_has_forcedexhale();
  void set_has_forcedpause();
  void set_has_useinhaler();

  inline bool has_Command() const;
  inline void clear_has_Command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  union CommandUnion {
    CommandUnion() {}
    ::pulse::cdm::bind::ForcedInhaleData* forcedinhale_;
    ::pulse::cdm::bind::ForcedExhaleData* forcedexhale_;
    ::pulse::cdm::bind::ForcedPauseData* forcedpause_;
    ::pulse::cdm::bind::UseInhalerData* useinhaler_;
  } Command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ConsciousRespirationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ConsciousRespirationData) */ {
 public:
  inline ConsciousRespirationData() : ConsciousRespirationData(nullptr) {}
  virtual ~ConsciousRespirationData();

  ConsciousRespirationData(const ConsciousRespirationData& from);
  ConsciousRespirationData(ConsciousRespirationData&& from) noexcept
    : ConsciousRespirationData() {
    *this = ::std::move(from);
  }

  inline ConsciousRespirationData& operator=(const ConsciousRespirationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsciousRespirationData& operator=(ConsciousRespirationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsciousRespirationData& default_instance();

  static inline const ConsciousRespirationData* internal_default_instance() {
    return reinterpret_cast<const ConsciousRespirationData*>(
               &_ConsciousRespirationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ConsciousRespirationData& a, ConsciousRespirationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsciousRespirationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsciousRespirationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsciousRespirationData* New() const final {
    return CreateMaybeMessage<ConsciousRespirationData>(nullptr);
  }

  ConsciousRespirationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsciousRespirationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsciousRespirationData& from);
  void MergeFrom(const ConsciousRespirationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsciousRespirationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ConsciousRespirationData";
  }
  protected:
  explicit ConsciousRespirationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kPatientActionFieldNumber = 1,
    kStartImmediatelyFieldNumber = 2,
  };
  // repeated .pulse.cdm.bind.AnyConsciousRespirationCommandData Command = 3;
  int command_size() const;
  private:
  int _internal_command_size() const;
  public:
  void clear_command();
  ::pulse::cdm::bind::AnyConsciousRespirationCommandData* mutable_command(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >*
      mutable_command();
  private:
  const ::pulse::cdm::bind::AnyConsciousRespirationCommandData& _internal_command(int index) const;
  ::pulse::cdm::bind::AnyConsciousRespirationCommandData* _internal_add_command();
  public:
  const ::pulse::cdm::bind::AnyConsciousRespirationCommandData& command(int index) const;
  ::pulse::cdm::bind::AnyConsciousRespirationCommandData* add_command();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >&
      command() const;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // bool StartImmediately = 2;
  void clear_startimmediately();
  bool startimmediately() const;
  void set_startimmediately(bool value);
  private:
  bool _internal_startimmediately() const;
  void _internal_set_startimmediately(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ConsciousRespirationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConsciousRespirationCommandData > command_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  bool startimmediately_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ConsumeNutrientsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ConsumeNutrientsData) */ {
 public:
  inline ConsumeNutrientsData() : ConsumeNutrientsData(nullptr) {}
  virtual ~ConsumeNutrientsData();

  ConsumeNutrientsData(const ConsumeNutrientsData& from);
  ConsumeNutrientsData(ConsumeNutrientsData&& from) noexcept
    : ConsumeNutrientsData() {
    *this = ::std::move(from);
  }

  inline ConsumeNutrientsData& operator=(const ConsumeNutrientsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsumeNutrientsData& operator=(ConsumeNutrientsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsumeNutrientsData& default_instance();

  enum OptionCase {
    kNutrition = 2,
    kNutritionFile = 3,
    OPTION_NOT_SET = 0,
  };

  static inline const ConsumeNutrientsData* internal_default_instance() {
    return reinterpret_cast<const ConsumeNutrientsData*>(
               &_ConsumeNutrientsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ConsumeNutrientsData& a, ConsumeNutrientsData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsumeNutrientsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsumeNutrientsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsumeNutrientsData* New() const final {
    return CreateMaybeMessage<ConsumeNutrientsData>(nullptr);
  }

  ConsumeNutrientsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeNutrientsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsumeNutrientsData& from);
  void MergeFrom(const ConsumeNutrientsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeNutrientsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ConsumeNutrientsData";
  }
  protected:
  explicit ConsumeNutrientsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kNutritionFieldNumber = 2,
    kNutritionFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.NutritionData Nutrition = 2;
  bool has_nutrition() const;
  private:
  bool _internal_has_nutrition() const;
  public:
  void clear_nutrition();
  const ::pulse::cdm::bind::NutritionData& nutrition() const;
  ::pulse::cdm::bind::NutritionData* release_nutrition();
  ::pulse::cdm::bind::NutritionData* mutable_nutrition();
  void set_allocated_nutrition(::pulse::cdm::bind::NutritionData* nutrition);
  private:
  const ::pulse::cdm::bind::NutritionData& _internal_nutrition() const;
  ::pulse::cdm::bind::NutritionData* _internal_mutable_nutrition();
  public:
  void unsafe_arena_set_allocated_nutrition(
      ::pulse::cdm::bind::NutritionData* nutrition);
  ::pulse::cdm::bind::NutritionData* unsafe_arena_release_nutrition();

  // string NutritionFile = 3;
  private:
  bool _internal_has_nutritionfile() const;
  public:
  void clear_nutritionfile();
  const std::string& nutritionfile() const;
  void set_nutritionfile(const std::string& value);
  void set_nutritionfile(std::string&& value);
  void set_nutritionfile(const char* value);
  void set_nutritionfile(const char* value, size_t size);
  std::string* mutable_nutritionfile();
  std::string* release_nutritionfile();
  void set_allocated_nutritionfile(std::string* nutritionfile);
  private:
  const std::string& _internal_nutritionfile() const;
  void _internal_set_nutritionfile(const std::string& value);
  std::string* _internal_mutable_nutritionfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ConsumeNutrientsData)
 private:
  class _Internal;
  void set_has_nutrition();
  void set_has_nutritionfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::NutritionData* nutrition_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nutritionfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ExerciseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ExerciseData) */ {
 public:
  inline ExerciseData() : ExerciseData(nullptr) {}
  virtual ~ExerciseData();

  ExerciseData(const ExerciseData& from);
  ExerciseData(ExerciseData&& from) noexcept
    : ExerciseData() {
    *this = ::std::move(from);
  }

  inline ExerciseData& operator=(const ExerciseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExerciseData& operator=(ExerciseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExerciseData& default_instance();

  static inline const ExerciseData* internal_default_instance() {
    return reinterpret_cast<const ExerciseData*>(
               &_ExerciseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ExerciseData& a, ExerciseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExerciseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExerciseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExerciseData* New() const final {
    return CreateMaybeMessage<ExerciseData>(nullptr);
  }

  ExerciseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExerciseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExerciseData& from);
  void MergeFrom(const ExerciseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExerciseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ExerciseData";
  }
  protected:
  explicit ExerciseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kIntensityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Intensity = 2;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  const ::pulse::cdm::bind::Scalar0To1Data& intensity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_intensity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_intensity();
  void set_allocated_intensity(::pulse::cdm::bind::Scalar0To1Data* intensity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_intensity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_intensity();
  public:
  void unsafe_arena_set_allocated_intensity(
      ::pulse::cdm::bind::Scalar0To1Data* intensity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_intensity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ExerciseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* intensity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class HemorrhageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.HemorrhageData) */ {
 public:
  inline HemorrhageData() : HemorrhageData(nullptr) {}
  virtual ~HemorrhageData();

  HemorrhageData(const HemorrhageData& from);
  HemorrhageData(HemorrhageData&& from) noexcept
    : HemorrhageData() {
    *this = ::std::move(from);
  }

  inline HemorrhageData& operator=(const HemorrhageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HemorrhageData& operator=(HemorrhageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HemorrhageData& default_instance();

  static inline const HemorrhageData* internal_default_instance() {
    return reinterpret_cast<const HemorrhageData*>(
               &_HemorrhageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HemorrhageData& a, HemorrhageData& b) {
    a.Swap(&b);
  }
  inline void Swap(HemorrhageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HemorrhageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HemorrhageData* New() const final {
    return CreateMaybeMessage<HemorrhageData>(nullptr);
  }

  HemorrhageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HemorrhageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HemorrhageData& from);
  void MergeFrom(const HemorrhageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HemorrhageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.HemorrhageData";
  }
  protected:
  explicit HemorrhageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HemorrhageData_eType eType;
  static constexpr eType External =
    HemorrhageData_eType_External;
  static constexpr eType Internal =
    HemorrhageData_eType_Internal;
  static inline bool eType_IsValid(int value) {
    return HemorrhageData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    HemorrhageData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    HemorrhageData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    HemorrhageData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return HemorrhageData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return HemorrhageData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return HemorrhageData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCompartmentFieldNumber = 3,
    kPatientActionFieldNumber = 1,
    kFlowRateFieldNumber = 4,
    kSeverityFieldNumber = 5,
    kTotalBloodLostFieldNumber = 6,
    kTypeFieldNumber = 2,
  };
  // string Compartment = 3;
  void clear_compartment();
  const std::string& compartment() const;
  void set_compartment(const std::string& value);
  void set_compartment(std::string&& value);
  void set_compartment(const char* value);
  void set_compartment(const char* value, size_t size);
  std::string* mutable_compartment();
  std::string* release_compartment();
  void set_allocated_compartment(std::string* compartment);
  private:
  const std::string& _internal_compartment() const;
  void _internal_set_compartment(const std::string& value);
  std::string* _internal_mutable_compartment();
  public:

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData FlowRate = 4;
  bool has_flowrate() const;
  private:
  bool _internal_has_flowrate() const;
  public:
  void clear_flowrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& flowrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_flowrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_flowrate();
  void set_allocated_flowrate(::pulse::cdm::bind::ScalarVolumePerTimeData* flowrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_flowrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_flowrate();
  public:
  void unsafe_arena_set_allocated_flowrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* flowrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_flowrate();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 5;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // .pulse.cdm.bind.ScalarVolumeData TotalBloodLost = 6;
  bool has_totalbloodlost() const;
  private:
  bool _internal_has_totalbloodlost() const;
  public:
  void clear_totalbloodlost();
  const ::pulse::cdm::bind::ScalarVolumeData& totalbloodlost() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totalbloodlost();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totalbloodlost();
  void set_allocated_totalbloodlost(::pulse::cdm::bind::ScalarVolumeData* totalbloodlost);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totalbloodlost() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totalbloodlost();
  public:
  void unsafe_arena_set_allocated_totalbloodlost(
      ::pulse::cdm::bind::ScalarVolumeData* totalbloodlost);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_totalbloodlost();

  // .pulse.cdm.bind.HemorrhageData.eType Type = 2;
  void clear_type();
  ::pulse::cdm::bind::HemorrhageData_eType type() const;
  void set_type(::pulse::cdm::bind::HemorrhageData_eType value);
  private:
  ::pulse::cdm::bind::HemorrhageData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::HemorrhageData_eType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.HemorrhageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compartment_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* flowrate_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  ::pulse::cdm::bind::ScalarVolumeData* totalbloodlost_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class ImpairedAlveolarExchangeExacerbationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData) */ {
 public:
  inline ImpairedAlveolarExchangeExacerbationData() : ImpairedAlveolarExchangeExacerbationData(nullptr) {}
  virtual ~ImpairedAlveolarExchangeExacerbationData();

  ImpairedAlveolarExchangeExacerbationData(const ImpairedAlveolarExchangeExacerbationData& from);
  ImpairedAlveolarExchangeExacerbationData(ImpairedAlveolarExchangeExacerbationData&& from) noexcept
    : ImpairedAlveolarExchangeExacerbationData() {
    *this = ::std::move(from);
  }

  inline ImpairedAlveolarExchangeExacerbationData& operator=(const ImpairedAlveolarExchangeExacerbationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpairedAlveolarExchangeExacerbationData& operator=(ImpairedAlveolarExchangeExacerbationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImpairedAlveolarExchangeExacerbationData& default_instance();

  enum ValueCase {
    kImpairedSurfaceArea = 2,
    kImpairedFraction = 3,
    kSeverity = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const ImpairedAlveolarExchangeExacerbationData* internal_default_instance() {
    return reinterpret_cast<const ImpairedAlveolarExchangeExacerbationData*>(
               &_ImpairedAlveolarExchangeExacerbationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ImpairedAlveolarExchangeExacerbationData& a, ImpairedAlveolarExchangeExacerbationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImpairedAlveolarExchangeExacerbationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImpairedAlveolarExchangeExacerbationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImpairedAlveolarExchangeExacerbationData* New() const final {
    return CreateMaybeMessage<ImpairedAlveolarExchangeExacerbationData>(nullptr);
  }

  ImpairedAlveolarExchangeExacerbationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImpairedAlveolarExchangeExacerbationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImpairedAlveolarExchangeExacerbationData& from);
  void MergeFrom(const ImpairedAlveolarExchangeExacerbationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpairedAlveolarExchangeExacerbationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData";
  }
  protected:
  explicit ImpairedAlveolarExchangeExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kImpairedSurfaceAreaFieldNumber = 2,
    kImpairedFractionFieldNumber = 3,
    kSeverityFieldNumber = 4,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
  bool has_impairedsurfacearea() const;
  private:
  bool _internal_has_impairedsurfacearea() const;
  public:
  void clear_impairedsurfacearea();
  const ::pulse::cdm::bind::ScalarAreaData& impairedsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* release_impairedsurfacearea();
  ::pulse::cdm::bind::ScalarAreaData* mutable_impairedsurfacearea();
  void set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea);
  private:
  const ::pulse::cdm::bind::ScalarAreaData& _internal_impairedsurfacearea() const;
  ::pulse::cdm::bind::ScalarAreaData* _internal_mutable_impairedsurfacearea();
  public:
  void unsafe_arena_set_allocated_impairedsurfacearea(
      ::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea);
  ::pulse::cdm::bind::ScalarAreaData* unsafe_arena_release_impairedsurfacearea();

  // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
  bool has_impairedfraction() const;
  private:
  bool _internal_has_impairedfraction() const;
  public:
  void clear_impairedfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& impairedfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_impairedfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_impairedfraction();
  void set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_impairedfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_impairedfraction();
  public:
  void unsafe_arena_set_allocated_impairedfraction(
      ::pulse::cdm::bind::Scalar0To1Data* impairedfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_impairedfraction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData)
 private:
  class _Internal;
  void set_has_impairedsurfacearea();
  void set_has_impairedfraction();
  void set_has_severity();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  union ValueUnion {
    ValueUnion() {}
    ::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea_;
    ::pulse::cdm::bind::Scalar0To1Data* impairedfraction_;
    ::pulse::cdm::bind::Scalar0To1Data* severity_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class IntubationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.IntubationData) */ {
 public:
  inline IntubationData() : IntubationData(nullptr) {}
  virtual ~IntubationData();

  IntubationData(const IntubationData& from);
  IntubationData(IntubationData&& from) noexcept
    : IntubationData() {
    *this = ::std::move(from);
  }

  inline IntubationData& operator=(const IntubationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntubationData& operator=(IntubationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntubationData& default_instance();

  static inline const IntubationData* internal_default_instance() {
    return reinterpret_cast<const IntubationData*>(
               &_IntubationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IntubationData& a, IntubationData& b) {
    a.Swap(&b);
  }
  inline void Swap(IntubationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntubationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntubationData* New() const final {
    return CreateMaybeMessage<IntubationData>(nullptr);
  }

  IntubationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntubationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntubationData& from);
  void MergeFrom(const IntubationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntubationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.IntubationData";
  }
  protected:
  explicit IntubationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IntubationData_eType eType;
  static constexpr eType Off =
    IntubationData_eType_Off;
  static constexpr eType Esophageal =
    IntubationData_eType_Esophageal;
  static constexpr eType LeftMainstem =
    IntubationData_eType_LeftMainstem;
  static constexpr eType RightMainstem =
    IntubationData_eType_RightMainstem;
  static constexpr eType Tracheal =
    IntubationData_eType_Tracheal;
  static inline bool eType_IsValid(int value) {
    return IntubationData_eType_IsValid(value);
  }
  static constexpr eType eType_MIN =
    IntubationData_eType_eType_MIN;
  static constexpr eType eType_MAX =
    IntubationData_eType_eType_MAX;
  static constexpr int eType_ARRAYSIZE =
    IntubationData_eType_eType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eType_descriptor() {
    return IntubationData_eType_descriptor();
  }
  template<typename T>
  static inline const std::string& eType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eType_Name.");
    return IntubationData_eType_Name(enum_t_value);
  }
  static inline bool eType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eType* value) {
    return IntubationData_eType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.IntubationData.eType Type = 2;
  void clear_type();
  ::pulse::cdm::bind::IntubationData_eType type() const;
  void set_type(::pulse::cdm::bind::IntubationData_eType value);
  private:
  ::pulse::cdm::bind::IntubationData_eType _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::IntubationData_eType value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.IntubationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class LobarPneumoniaExacerbationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.LobarPneumoniaExacerbationData) */ {
 public:
  inline LobarPneumoniaExacerbationData() : LobarPneumoniaExacerbationData(nullptr) {}
  virtual ~LobarPneumoniaExacerbationData();

  LobarPneumoniaExacerbationData(const LobarPneumoniaExacerbationData& from);
  LobarPneumoniaExacerbationData(LobarPneumoniaExacerbationData&& from) noexcept
    : LobarPneumoniaExacerbationData() {
    *this = ::std::move(from);
  }

  inline LobarPneumoniaExacerbationData& operator=(const LobarPneumoniaExacerbationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobarPneumoniaExacerbationData& operator=(LobarPneumoniaExacerbationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LobarPneumoniaExacerbationData& default_instance();

  static inline const LobarPneumoniaExacerbationData* internal_default_instance() {
    return reinterpret_cast<const LobarPneumoniaExacerbationData*>(
               &_LobarPneumoniaExacerbationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LobarPneumoniaExacerbationData& a, LobarPneumoniaExacerbationData& b) {
    a.Swap(&b);
  }
  inline void Swap(LobarPneumoniaExacerbationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobarPneumoniaExacerbationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LobarPneumoniaExacerbationData* New() const final {
    return CreateMaybeMessage<LobarPneumoniaExacerbationData>(nullptr);
  }

  LobarPneumoniaExacerbationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LobarPneumoniaExacerbationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LobarPneumoniaExacerbationData& from);
  void MergeFrom(const LobarPneumoniaExacerbationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobarPneumoniaExacerbationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.LobarPneumoniaExacerbationData";
  }
  protected:
  explicit LobarPneumoniaExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kLeftLungAffectedFieldNumber = 3,
    kRightLungAffectedFieldNumber = 4,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  bool has_leftlungaffected() const;
  private:
  bool _internal_has_leftlungaffected() const;
  public:
  void clear_leftlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_leftlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_leftlungaffected();
  void set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_leftlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_leftlungaffected();
  public:
  void unsafe_arena_set_allocated_leftlungaffected(
      ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_leftlungaffected();

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  bool has_rightlungaffected() const;
  private:
  bool _internal_has_rightlungaffected() const;
  public:
  void clear_rightlungaffected();
  const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_rightlungaffected();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_rightlungaffected();
  void set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_rightlungaffected() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_rightlungaffected();
  public:
  void unsafe_arena_set_allocated_rightlungaffected(
      ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_rightlungaffected();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.LobarPneumoniaExacerbationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected_;
  ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class MechanicalVentilationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.MechanicalVentilationData) */ {
 public:
  inline MechanicalVentilationData() : MechanicalVentilationData(nullptr) {}
  virtual ~MechanicalVentilationData();

  MechanicalVentilationData(const MechanicalVentilationData& from);
  MechanicalVentilationData(MechanicalVentilationData&& from) noexcept
    : MechanicalVentilationData() {
    *this = ::std::move(from);
  }

  inline MechanicalVentilationData& operator=(const MechanicalVentilationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MechanicalVentilationData& operator=(MechanicalVentilationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MechanicalVentilationData& default_instance();

  static inline const MechanicalVentilationData* internal_default_instance() {
    return reinterpret_cast<const MechanicalVentilationData*>(
               &_MechanicalVentilationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MechanicalVentilationData& a, MechanicalVentilationData& b) {
    a.Swap(&b);
  }
  inline void Swap(MechanicalVentilationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MechanicalVentilationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MechanicalVentilationData* New() const final {
    return CreateMaybeMessage<MechanicalVentilationData>(nullptr);
  }

  MechanicalVentilationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MechanicalVentilationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MechanicalVentilationData& from);
  void MergeFrom(const MechanicalVentilationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MechanicalVentilationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.MechanicalVentilationData";
  }
  protected:
  explicit MechanicalVentilationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasFractionFieldNumber = 5,
    kAerosolFieldNumber = 6,
    kPatientActionFieldNumber = 1,
    kFlowFieldNumber = 3,
    kPressureFieldNumber = 4,
    kStateFieldNumber = 2,
  };
  // repeated .pulse.cdm.bind.SubstanceFractionData GasFraction = 5;
  int gasfraction_size() const;
  private:
  int _internal_gasfraction_size() const;
  public:
  void clear_gasfraction();
  ::pulse::cdm::bind::SubstanceFractionData* mutable_gasfraction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >*
      mutable_gasfraction();
  private:
  const ::pulse::cdm::bind::SubstanceFractionData& _internal_gasfraction(int index) const;
  ::pulse::cdm::bind::SubstanceFractionData* _internal_add_gasfraction();
  public:
  const ::pulse::cdm::bind::SubstanceFractionData& gasfraction(int index) const;
  ::pulse::cdm::bind::SubstanceFractionData* add_gasfraction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >&
      gasfraction() const;

  // repeated .pulse.cdm.bind.SubstanceConcentrationData Aerosol = 6;
  int aerosol_size() const;
  private:
  int _internal_aerosol_size() const;
  public:
  void clear_aerosol();
  ::pulse::cdm::bind::SubstanceConcentrationData* mutable_aerosol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
      mutable_aerosol();
  private:
  const ::pulse::cdm::bind::SubstanceConcentrationData& _internal_aerosol(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* _internal_add_aerosol();
  public:
  const ::pulse::cdm::bind::SubstanceConcentrationData& aerosol(int index) const;
  ::pulse::cdm::bind::SubstanceConcentrationData* add_aerosol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
      aerosol() const;

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;
  public:
  void clear_flow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_flow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_flow();
  void set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_flow();
  public:
  void unsafe_arena_set_allocated_flow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_flow();

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  bool has_pressure() const;
  private:
  bool _internal_has_pressure() const;
  public:
  void clear_pressure();
  const ::pulse::cdm::bind::ScalarPressureData& pressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_pressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_pressure();
  void set_allocated_pressure(::pulse::cdm::bind::ScalarPressureData* pressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_pressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_pressure();
  public:
  void unsafe_arena_set_allocated_pressure(
      ::pulse::cdm::bind::ScalarPressureData* pressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_pressure();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.MechanicalVentilationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData > gasfraction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData > aerosol_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* flow_;
  ::pulse::cdm::bind::ScalarPressureData* pressure_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class NeedleDecompressionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.NeedleDecompressionData) */ {
 public:
  inline NeedleDecompressionData() : NeedleDecompressionData(nullptr) {}
  virtual ~NeedleDecompressionData();

  NeedleDecompressionData(const NeedleDecompressionData& from);
  NeedleDecompressionData(NeedleDecompressionData&& from) noexcept
    : NeedleDecompressionData() {
    *this = ::std::move(from);
  }

  inline NeedleDecompressionData& operator=(const NeedleDecompressionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeedleDecompressionData& operator=(NeedleDecompressionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NeedleDecompressionData& default_instance();

  static inline const NeedleDecompressionData* internal_default_instance() {
    return reinterpret_cast<const NeedleDecompressionData*>(
               &_NeedleDecompressionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(NeedleDecompressionData& a, NeedleDecompressionData& b) {
    a.Swap(&b);
  }
  inline void Swap(NeedleDecompressionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeedleDecompressionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeedleDecompressionData* New() const final {
    return CreateMaybeMessage<NeedleDecompressionData>(nullptr);
  }

  NeedleDecompressionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeedleDecompressionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NeedleDecompressionData& from);
  void MergeFrom(const NeedleDecompressionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeedleDecompressionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.NeedleDecompressionData";
  }
  protected:
  explicit NeedleDecompressionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kStateFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.eSwitch State = 2;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // .pulse.cdm.bind.eSide Side = 3;
  void clear_side();
  ::pulse::cdm::bind::eSide side() const;
  void set_side(::pulse::cdm::bind::eSide value);
  private:
  ::pulse::cdm::bind::eSide _internal_side() const;
  void _internal_set_side(::pulse::cdm::bind::eSide value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.NeedleDecompressionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  int state_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class PericardialEffusionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PericardialEffusionData) */ {
 public:
  inline PericardialEffusionData() : PericardialEffusionData(nullptr) {}
  virtual ~PericardialEffusionData();

  PericardialEffusionData(const PericardialEffusionData& from);
  PericardialEffusionData(PericardialEffusionData&& from) noexcept
    : PericardialEffusionData() {
    *this = ::std::move(from);
  }

  inline PericardialEffusionData& operator=(const PericardialEffusionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PericardialEffusionData& operator=(PericardialEffusionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PericardialEffusionData& default_instance();

  static inline const PericardialEffusionData* internal_default_instance() {
    return reinterpret_cast<const PericardialEffusionData*>(
               &_PericardialEffusionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PericardialEffusionData& a, PericardialEffusionData& b) {
    a.Swap(&b);
  }
  inline void Swap(PericardialEffusionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PericardialEffusionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PericardialEffusionData* New() const final {
    return CreateMaybeMessage<PericardialEffusionData>(nullptr);
  }

  PericardialEffusionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PericardialEffusionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PericardialEffusionData& from);
  void MergeFrom(const PericardialEffusionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PericardialEffusionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PericardialEffusionData";
  }
  protected:
  explicit PericardialEffusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kEffusionRateFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData EffusionRate = 2;
  bool has_effusionrate() const;
  private:
  bool _internal_has_effusionrate() const;
  public:
  void clear_effusionrate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& effusionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_effusionrate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_effusionrate();
  void set_allocated_effusionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* effusionrate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_effusionrate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_effusionrate();
  public:
  void unsafe_arena_set_allocated_effusionrate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* effusionrate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_effusionrate();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PericardialEffusionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* effusionrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class PulmonaryShuntExacerbationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.PulmonaryShuntExacerbationData) */ {
 public:
  inline PulmonaryShuntExacerbationData() : PulmonaryShuntExacerbationData(nullptr) {}
  virtual ~PulmonaryShuntExacerbationData();

  PulmonaryShuntExacerbationData(const PulmonaryShuntExacerbationData& from);
  PulmonaryShuntExacerbationData(PulmonaryShuntExacerbationData&& from) noexcept
    : PulmonaryShuntExacerbationData() {
    *this = ::std::move(from);
  }

  inline PulmonaryShuntExacerbationData& operator=(const PulmonaryShuntExacerbationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulmonaryShuntExacerbationData& operator=(PulmonaryShuntExacerbationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PulmonaryShuntExacerbationData& default_instance();

  static inline const PulmonaryShuntExacerbationData* internal_default_instance() {
    return reinterpret_cast<const PulmonaryShuntExacerbationData*>(
               &_PulmonaryShuntExacerbationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PulmonaryShuntExacerbationData& a, PulmonaryShuntExacerbationData& b) {
    a.Swap(&b);
  }
  inline void Swap(PulmonaryShuntExacerbationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PulmonaryShuntExacerbationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulmonaryShuntExacerbationData* New() const final {
    return CreateMaybeMessage<PulmonaryShuntExacerbationData>(nullptr);
  }

  PulmonaryShuntExacerbationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulmonaryShuntExacerbationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PulmonaryShuntExacerbationData& from);
  void MergeFrom(const PulmonaryShuntExacerbationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PulmonaryShuntExacerbationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.PulmonaryShuntExacerbationData";
  }
  protected:
  explicit PulmonaryShuntExacerbationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.PulmonaryShuntExacerbationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class RespiratoryFatigueData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.RespiratoryFatigueData) */ {
 public:
  inline RespiratoryFatigueData() : RespiratoryFatigueData(nullptr) {}
  virtual ~RespiratoryFatigueData();

  RespiratoryFatigueData(const RespiratoryFatigueData& from);
  RespiratoryFatigueData(RespiratoryFatigueData&& from) noexcept
    : RespiratoryFatigueData() {
    *this = ::std::move(from);
  }

  inline RespiratoryFatigueData& operator=(const RespiratoryFatigueData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespiratoryFatigueData& operator=(RespiratoryFatigueData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespiratoryFatigueData& default_instance();

  static inline const RespiratoryFatigueData* internal_default_instance() {
    return reinterpret_cast<const RespiratoryFatigueData*>(
               &_RespiratoryFatigueData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RespiratoryFatigueData& a, RespiratoryFatigueData& b) {
    a.Swap(&b);
  }
  inline void Swap(RespiratoryFatigueData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespiratoryFatigueData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespiratoryFatigueData* New() const final {
    return CreateMaybeMessage<RespiratoryFatigueData>(nullptr);
  }

  RespiratoryFatigueData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespiratoryFatigueData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespiratoryFatigueData& from);
  void MergeFrom(const RespiratoryFatigueData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespiratoryFatigueData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.RespiratoryFatigueData";
  }
  protected:
  explicit RespiratoryFatigueData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.RespiratoryFatigueData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class SubstanceBolusData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceBolusData) */ {
 public:
  inline SubstanceBolusData() : SubstanceBolusData(nullptr) {}
  virtual ~SubstanceBolusData();

  SubstanceBolusData(const SubstanceBolusData& from);
  SubstanceBolusData(SubstanceBolusData&& from) noexcept
    : SubstanceBolusData() {
    *this = ::std::move(from);
  }

  inline SubstanceBolusData& operator=(const SubstanceBolusData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceBolusData& operator=(SubstanceBolusData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceBolusData& default_instance();

  static inline const SubstanceBolusData* internal_default_instance() {
    return reinterpret_cast<const SubstanceBolusData*>(
               &_SubstanceBolusData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubstanceBolusData& a, SubstanceBolusData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceBolusData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceBolusData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceBolusData* New() const final {
    return CreateMaybeMessage<SubstanceBolusData>(nullptr);
  }

  SubstanceBolusData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceBolusData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceBolusData& from);
  void MergeFrom(const SubstanceBolusData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceBolusData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceBolusData";
  }
  protected:
  explicit SubstanceBolusData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SubstanceBolusData_eRoute eRoute;
  static constexpr eRoute Intravenous =
    SubstanceBolusData_eRoute_Intravenous;
  static constexpr eRoute Epidural =
    SubstanceBolusData_eRoute_Epidural;
  static constexpr eRoute Intraosseous =
    SubstanceBolusData_eRoute_Intraosseous;
  static constexpr eRoute Intraarterial =
    SubstanceBolusData_eRoute_Intraarterial;
  static constexpr eRoute Intracardiac =
    SubstanceBolusData_eRoute_Intracardiac;
  static constexpr eRoute Intracerebral =
    SubstanceBolusData_eRoute_Intracerebral;
  static constexpr eRoute Intracerebroventricular =
    SubstanceBolusData_eRoute_Intracerebroventricular;
  static constexpr eRoute Intradermal =
    SubstanceBolusData_eRoute_Intradermal;
  static constexpr eRoute Intramuscular =
    SubstanceBolusData_eRoute_Intramuscular;
  static constexpr eRoute Subcutaneous =
    SubstanceBolusData_eRoute_Subcutaneous;
  static inline bool eRoute_IsValid(int value) {
    return SubstanceBolusData_eRoute_IsValid(value);
  }
  static constexpr eRoute eRoute_MIN =
    SubstanceBolusData_eRoute_eRoute_MIN;
  static constexpr eRoute eRoute_MAX =
    SubstanceBolusData_eRoute_eRoute_MAX;
  static constexpr int eRoute_ARRAYSIZE =
    SubstanceBolusData_eRoute_eRoute_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eRoute_descriptor() {
    return SubstanceBolusData_eRoute_descriptor();
  }
  template<typename T>
  static inline const std::string& eRoute_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eRoute>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eRoute_Name.");
    return SubstanceBolusData_eRoute_Name(enum_t_value);
  }
  static inline bool eRoute_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eRoute* value) {
    return SubstanceBolusData_eRoute_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceFieldNumber = 2,
    kPatientActionFieldNumber = 1,
    kAdministrationDurationFieldNumber = 4,
    kConcentrationFieldNumber = 5,
    kDoseFieldNumber = 6,
    kTotalInfusedDoseFieldNumber = 7,
    kAdministrationRouteFieldNumber = 3,
  };
  // string Substance = 2;
  void clear_substance();
  const std::string& substance() const;
  void set_substance(const std::string& value);
  void set_substance(std::string&& value);
  void set_substance(const char* value);
  void set_substance(const char* value, size_t size);
  std::string* mutable_substance();
  std::string* release_substance();
  void set_allocated_substance(std::string* substance);
  private:
  const std::string& _internal_substance() const;
  void _internal_set_substance(const std::string& value);
  std::string* _internal_mutable_substance();
  public:

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarTimeData AdministrationDuration = 4;
  bool has_administrationduration() const;
  private:
  bool _internal_has_administrationduration() const;
  public:
  void clear_administrationduration();
  const ::pulse::cdm::bind::ScalarTimeData& administrationduration() const;
  ::pulse::cdm::bind::ScalarTimeData* release_administrationduration();
  ::pulse::cdm::bind::ScalarTimeData* mutable_administrationduration();
  void set_allocated_administrationduration(::pulse::cdm::bind::ScalarTimeData* administrationduration);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_administrationduration() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_administrationduration();
  public:
  void unsafe_arena_set_allocated_administrationduration(
      ::pulse::cdm::bind::ScalarTimeData* administrationduration);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_administrationduration();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 5;
  bool has_concentration() const;
  private:
  bool _internal_has_concentration() const;
  public:
  void clear_concentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_concentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_concentration();
  void set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_concentration();
  public:
  void unsafe_arena_set_allocated_concentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_concentration();

  // .pulse.cdm.bind.ScalarVolumeData Dose = 6;
  bool has_dose() const;
  private:
  bool _internal_has_dose() const;
  public:
  void clear_dose();
  const ::pulse::cdm::bind::ScalarVolumeData& dose() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_dose();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_dose();
  void set_allocated_dose(::pulse::cdm::bind::ScalarVolumeData* dose);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_dose() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_dose();
  public:
  void unsafe_arena_set_allocated_dose(
      ::pulse::cdm::bind::ScalarVolumeData* dose);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_dose();

  // .pulse.cdm.bind.ScalarVolumeData TotalInfusedDose = 7;
  bool has_totalinfuseddose() const;
  private:
  bool _internal_has_totalinfuseddose() const;
  public:
  void clear_totalinfuseddose();
  const ::pulse::cdm::bind::ScalarVolumeData& totalinfuseddose() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_totalinfuseddose();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_totalinfuseddose();
  void set_allocated_totalinfuseddose(::pulse::cdm::bind::ScalarVolumeData* totalinfuseddose);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_totalinfuseddose() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_totalinfuseddose();
  public:
  void unsafe_arena_set_allocated_totalinfuseddose(
      ::pulse::cdm::bind::ScalarVolumeData* totalinfuseddose);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_totalinfuseddose();

  // .pulse.cdm.bind.SubstanceBolusData.eRoute AdministrationRoute = 3;
  void clear_administrationroute();
  ::pulse::cdm::bind::SubstanceBolusData_eRoute administrationroute() const;
  void set_administrationroute(::pulse::cdm::bind::SubstanceBolusData_eRoute value);
  private:
  ::pulse::cdm::bind::SubstanceBolusData_eRoute _internal_administrationroute() const;
  void _internal_set_administrationroute(::pulse::cdm::bind::SubstanceBolusData_eRoute value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceBolusData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substance_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarTimeData* administrationduration_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration_;
  ::pulse::cdm::bind::ScalarVolumeData* dose_;
  ::pulse::cdm::bind::ScalarVolumeData* totalinfuseddose_;
  int administrationroute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class SubstanceCompoundInfusionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceCompoundInfusionData) */ {
 public:
  inline SubstanceCompoundInfusionData() : SubstanceCompoundInfusionData(nullptr) {}
  virtual ~SubstanceCompoundInfusionData();

  SubstanceCompoundInfusionData(const SubstanceCompoundInfusionData& from);
  SubstanceCompoundInfusionData(SubstanceCompoundInfusionData&& from) noexcept
    : SubstanceCompoundInfusionData() {
    *this = ::std::move(from);
  }

  inline SubstanceCompoundInfusionData& operator=(const SubstanceCompoundInfusionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceCompoundInfusionData& operator=(SubstanceCompoundInfusionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceCompoundInfusionData& default_instance();

  static inline const SubstanceCompoundInfusionData* internal_default_instance() {
    return reinterpret_cast<const SubstanceCompoundInfusionData*>(
               &_SubstanceCompoundInfusionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SubstanceCompoundInfusionData& a, SubstanceCompoundInfusionData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceCompoundInfusionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceCompoundInfusionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceCompoundInfusionData* New() const final {
    return CreateMaybeMessage<SubstanceCompoundInfusionData>(nullptr);
  }

  SubstanceCompoundInfusionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceCompoundInfusionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceCompoundInfusionData& from);
  void MergeFrom(const SubstanceCompoundInfusionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceCompoundInfusionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceCompoundInfusionData";
  }
  protected:
  explicit SubstanceCompoundInfusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceCompoundFieldNumber = 2,
    kPatientActionFieldNumber = 1,
    kBagVolumeFieldNumber = 3,
    kRateFieldNumber = 4,
  };
  // string SubstanceCompound = 2;
  void clear_substancecompound();
  const std::string& substancecompound() const;
  void set_substancecompound(const std::string& value);
  void set_substancecompound(std::string&& value);
  void set_substancecompound(const char* value);
  void set_substancecompound(const char* value, size_t size);
  std::string* mutable_substancecompound();
  std::string* release_substancecompound();
  void set_allocated_substancecompound(std::string* substancecompound);
  private:
  const std::string& _internal_substancecompound() const;
  void _internal_set_substancecompound(const std::string& value);
  std::string* _internal_mutable_substancecompound();
  public:

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarVolumeData BagVolume = 3;
  bool has_bagvolume() const;
  private:
  bool _internal_has_bagvolume() const;
  public:
  void clear_bagvolume();
  const ::pulse::cdm::bind::ScalarVolumeData& bagvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_bagvolume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_bagvolume();
  void set_allocated_bagvolume(::pulse::cdm::bind::ScalarVolumeData* bagvolume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_bagvolume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_bagvolume();
  public:
  void unsafe_arena_set_allocated_bagvolume(
      ::pulse::cdm::bind::ScalarVolumeData* bagvolume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_bagvolume();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& rate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_rate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_rate();
  void set_allocated_rate(::pulse::cdm::bind::ScalarVolumePerTimeData* rate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_rate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_rate();
  public:
  void unsafe_arena_set_allocated_rate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* rate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_rate();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceCompoundInfusionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substancecompound_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarVolumeData* bagvolume_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class SubstanceInfusionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SubstanceInfusionData) */ {
 public:
  inline SubstanceInfusionData() : SubstanceInfusionData(nullptr) {}
  virtual ~SubstanceInfusionData();

  SubstanceInfusionData(const SubstanceInfusionData& from);
  SubstanceInfusionData(SubstanceInfusionData&& from) noexcept
    : SubstanceInfusionData() {
    *this = ::std::move(from);
  }

  inline SubstanceInfusionData& operator=(const SubstanceInfusionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubstanceInfusionData& operator=(SubstanceInfusionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubstanceInfusionData& default_instance();

  static inline const SubstanceInfusionData* internal_default_instance() {
    return reinterpret_cast<const SubstanceInfusionData*>(
               &_SubstanceInfusionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SubstanceInfusionData& a, SubstanceInfusionData& b) {
    a.Swap(&b);
  }
  inline void Swap(SubstanceInfusionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubstanceInfusionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubstanceInfusionData* New() const final {
    return CreateMaybeMessage<SubstanceInfusionData>(nullptr);
  }

  SubstanceInfusionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubstanceInfusionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubstanceInfusionData& from);
  void MergeFrom(const SubstanceInfusionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubstanceInfusionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SubstanceInfusionData";
  }
  protected:
  explicit SubstanceInfusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceFieldNumber = 2,
    kPatientActionFieldNumber = 1,
    kConcentrationFieldNumber = 3,
    kRateFieldNumber = 4,
  };
  // string Substance = 2;
  void clear_substance();
  const std::string& substance() const;
  void set_substance(const std::string& value);
  void set_substance(std::string&& value);
  void set_substance(const char* value);
  void set_substance(const char* value, size_t size);
  std::string* mutable_substance();
  std::string* release_substance();
  void set_allocated_substance(std::string* substance);
  private:
  const std::string& _internal_substance() const;
  void _internal_set_substance(const std::string& value);
  std::string* _internal_mutable_substance();
  public:

  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 3;
  bool has_concentration() const;
  private:
  bool _internal_has_concentration() const;
  public:
  void clear_concentration();
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* release_concentration();
  ::pulse::cdm::bind::ScalarMassPerVolumeData* mutable_concentration();
  void set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  private:
  const ::pulse::cdm::bind::ScalarMassPerVolumeData& _internal_concentration() const;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* _internal_mutable_concentration();
  public:
  void unsafe_arena_set_allocated_concentration(
      ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration);
  ::pulse::cdm::bind::ScalarMassPerVolumeData* unsafe_arena_release_concentration();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& rate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_rate();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_rate();
  void set_allocated_rate(::pulse::cdm::bind::ScalarVolumePerTimeData* rate);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_rate() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_rate();
  public:
  void unsafe_arena_set_allocated_rate(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* rate);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_rate();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SubstanceInfusionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substance_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class SupplementalOxygenData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.SupplementalOxygenData) */ {
 public:
  inline SupplementalOxygenData() : SupplementalOxygenData(nullptr) {}
  virtual ~SupplementalOxygenData();

  SupplementalOxygenData(const SupplementalOxygenData& from);
  SupplementalOxygenData(SupplementalOxygenData&& from) noexcept
    : SupplementalOxygenData() {
    *this = ::std::move(from);
  }

  inline SupplementalOxygenData& operator=(const SupplementalOxygenData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplementalOxygenData& operator=(SupplementalOxygenData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupplementalOxygenData& default_instance();

  static inline const SupplementalOxygenData* internal_default_instance() {
    return reinterpret_cast<const SupplementalOxygenData*>(
               &_SupplementalOxygenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SupplementalOxygenData& a, SupplementalOxygenData& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplementalOxygenData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplementalOxygenData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupplementalOxygenData* New() const final {
    return CreateMaybeMessage<SupplementalOxygenData>(nullptr);
  }

  SupplementalOxygenData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupplementalOxygenData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupplementalOxygenData& from);
  void MergeFrom(const SupplementalOxygenData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplementalOxygenData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.SupplementalOxygenData";
  }
  protected:
  explicit SupplementalOxygenData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SupplementalOxygenData_eDevice eDevice;
  static constexpr eDevice None =
    SupplementalOxygenData_eDevice_None;
  static constexpr eDevice NasalCannula =
    SupplementalOxygenData_eDevice_NasalCannula;
  static constexpr eDevice SimpleMask =
    SupplementalOxygenData_eDevice_SimpleMask;
  static constexpr eDevice NonRebreatherMask =
    SupplementalOxygenData_eDevice_NonRebreatherMask;
  static inline bool eDevice_IsValid(int value) {
    return SupplementalOxygenData_eDevice_IsValid(value);
  }
  static constexpr eDevice eDevice_MIN =
    SupplementalOxygenData_eDevice_eDevice_MIN;
  static constexpr eDevice eDevice_MAX =
    SupplementalOxygenData_eDevice_eDevice_MAX;
  static constexpr int eDevice_ARRAYSIZE =
    SupplementalOxygenData_eDevice_eDevice_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eDevice_descriptor() {
    return SupplementalOxygenData_eDevice_descriptor();
  }
  template<typename T>
  static inline const std::string& eDevice_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eDevice>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eDevice_Name.");
    return SupplementalOxygenData_eDevice_Name(enum_t_value);
  }
  static inline bool eDevice_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eDevice* value) {
    return SupplementalOxygenData_eDevice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kFlowFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kDeviceFieldNumber = 2,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;
  public:
  void clear_flow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_flow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_flow();
  void set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_flow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_flow();
  public:
  void unsafe_arena_set_allocated_flow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* flow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_flow();

  // .pulse.cdm.bind.ScalarVolumeData Volume = 4;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::pulse::cdm::bind::ScalarVolumeData& volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_volume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_volume();
  void set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::pulse::cdm::bind::ScalarVolumeData* volume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_volume();

  // .pulse.cdm.bind.SupplementalOxygenData.eDevice Device = 2;
  void clear_device();
  ::pulse::cdm::bind::SupplementalOxygenData_eDevice device() const;
  void set_device(::pulse::cdm::bind::SupplementalOxygenData_eDevice value);
  private:
  ::pulse::cdm::bind::SupplementalOxygenData_eDevice _internal_device() const;
  void _internal_set_device(::pulse::cdm::bind::SupplementalOxygenData_eDevice value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.SupplementalOxygenData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* flow_;
  ::pulse::cdm::bind::ScalarVolumeData* volume_;
  int device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class TensionPneumothoraxData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.TensionPneumothoraxData) */ {
 public:
  inline TensionPneumothoraxData() : TensionPneumothoraxData(nullptr) {}
  virtual ~TensionPneumothoraxData();

  TensionPneumothoraxData(const TensionPneumothoraxData& from);
  TensionPneumothoraxData(TensionPneumothoraxData&& from) noexcept
    : TensionPneumothoraxData() {
    *this = ::std::move(from);
  }

  inline TensionPneumothoraxData& operator=(const TensionPneumothoraxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensionPneumothoraxData& operator=(TensionPneumothoraxData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensionPneumothoraxData& default_instance();

  static inline const TensionPneumothoraxData* internal_default_instance() {
    return reinterpret_cast<const TensionPneumothoraxData*>(
               &_TensionPneumothoraxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TensionPneumothoraxData& a, TensionPneumothoraxData& b) {
    a.Swap(&b);
  }
  inline void Swap(TensionPneumothoraxData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensionPneumothoraxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensionPneumothoraxData* New() const final {
    return CreateMaybeMessage<TensionPneumothoraxData>(nullptr);
  }

  TensionPneumothoraxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensionPneumothoraxData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensionPneumothoraxData& from);
  void MergeFrom(const TensionPneumothoraxData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensionPneumothoraxData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.TensionPneumothoraxData";
  }
  protected:
  explicit TensionPneumothoraxData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
    kSeverityFieldNumber = 4,
    kTypeFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  const ::pulse::cdm::bind::Scalar0To1Data& severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_severity();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_severity();
  void set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_severity() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_severity();
  public:
  void unsafe_arena_set_allocated_severity(
      ::pulse::cdm::bind::Scalar0To1Data* severity);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_severity();

  // .pulse.cdm.bind.eGate Type = 2;
  void clear_type();
  ::pulse::cdm::bind::eGate type() const;
  void set_type(::pulse::cdm::bind::eGate value);
  private:
  ::pulse::cdm::bind::eGate _internal_type() const;
  void _internal_set_type(::pulse::cdm::bind::eGate value);
  public:

  // .pulse.cdm.bind.eSide Side = 3;
  void clear_side();
  ::pulse::cdm::bind::eSide side() const;
  void set_side(::pulse::cdm::bind::eSide value);
  private:
  ::pulse::cdm::bind::eSide _internal_side() const;
  void _internal_set_side(::pulse::cdm::bind::eSide value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.TensionPneumothoraxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  ::pulse::cdm::bind::Scalar0To1Data* severity_;
  int type_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// -------------------------------------------------------------------

class UrinateData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.UrinateData) */ {
 public:
  inline UrinateData() : UrinateData(nullptr) {}
  virtual ~UrinateData();

  UrinateData(const UrinateData& from);
  UrinateData(UrinateData&& from) noexcept
    : UrinateData() {
    *this = ::std::move(from);
  }

  inline UrinateData& operator=(const UrinateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrinateData& operator=(UrinateData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UrinateData& default_instance();

  static inline const UrinateData* internal_default_instance() {
    return reinterpret_cast<const UrinateData*>(
               &_UrinateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UrinateData& a, UrinateData& b) {
    a.Swap(&b);
  }
  inline void Swap(UrinateData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrinateData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrinateData* New() const final {
    return CreateMaybeMessage<UrinateData>(nullptr);
  }

  UrinateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrinateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UrinateData& from);
  void MergeFrom(const UrinateData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrinateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.UrinateData";
  }
  protected:
  explicit UrinateData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.PatientActionData PatientAction = 1;
  bool has_patientaction() const;
  private:
  bool _internal_has_patientaction() const;
  public:
  void clear_patientaction();
  const ::pulse::cdm::bind::PatientActionData& patientaction() const;
  ::pulse::cdm::bind::PatientActionData* release_patientaction();
  ::pulse::cdm::bind::PatientActionData* mutable_patientaction();
  void set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction);
  private:
  const ::pulse::cdm::bind::PatientActionData& _internal_patientaction() const;
  ::pulse::cdm::bind::PatientActionData* _internal_mutable_patientaction();
  public:
  void unsafe_arena_set_allocated_patientaction(
      ::pulse::cdm::bind::PatientActionData* patientaction);
  ::pulse::cdm::bind::PatientActionData* unsafe_arena_release_patientaction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.UrinateData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::PatientActionData* patientaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyPatientActionData

// .pulse.cdm.bind.PatientAssessmentRequestData Assessment = 1;
inline bool AnyPatientActionData::_internal_has_assessment() const {
  return Action_case() == kAssessment;
}
inline bool AnyPatientActionData::has_assessment() const {
  return _internal_has_assessment();
}
inline void AnyPatientActionData::set_has_assessment() {
  _oneof_case_[0] = kAssessment;
}
inline void AnyPatientActionData::clear_assessment() {
  if (_internal_has_assessment()) {
    if (GetArena() == nullptr) {
      delete Action_.assessment_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::PatientAssessmentRequestData* AnyPatientActionData::release_assessment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Assessment)
  if (_internal_has_assessment()) {
    clear_has_Action();
      ::pulse::cdm::bind::PatientAssessmentRequestData* temp = Action_.assessment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.assessment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PatientAssessmentRequestData& AnyPatientActionData::_internal_assessment() const {
  return _internal_has_assessment()
      ? *Action_.assessment_
      : reinterpret_cast< ::pulse::cdm::bind::PatientAssessmentRequestData&>(::pulse::cdm::bind::_PatientAssessmentRequestData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientAssessmentRequestData& AnyPatientActionData::assessment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Assessment)
  return _internal_assessment();
}
inline ::pulse::cdm::bind::PatientAssessmentRequestData* AnyPatientActionData::unsafe_arena_release_assessment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Assessment)
  if (_internal_has_assessment()) {
    clear_has_Action();
    ::pulse::cdm::bind::PatientAssessmentRequestData* temp = Action_.assessment_;
    Action_.assessment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_assessment(::pulse::cdm::bind::PatientAssessmentRequestData* assessment) {
  clear_Action();
  if (assessment) {
    set_has_assessment();
    Action_.assessment_ = assessment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Assessment)
}
inline ::pulse::cdm::bind::PatientAssessmentRequestData* AnyPatientActionData::_internal_mutable_assessment() {
  if (!_internal_has_assessment()) {
    clear_Action();
    set_has_assessment();
    Action_.assessment_ = CreateMaybeMessage< ::pulse::cdm::bind::PatientAssessmentRequestData >(GetArena());
  }
  return Action_.assessment_;
}
inline ::pulse::cdm::bind::PatientAssessmentRequestData* AnyPatientActionData::mutable_assessment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Assessment)
  return _internal_mutable_assessment();
}

// .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData AcuteRespiratoryDistressSyndromeExacerbation = 2;
inline bool AnyPatientActionData::_internal_has_acuterespiratorydistresssyndromeexacerbation() const {
  return Action_case() == kAcuteRespiratoryDistressSyndromeExacerbation;
}
inline bool AnyPatientActionData::has_acuterespiratorydistresssyndromeexacerbation() const {
  return _internal_has_acuterespiratorydistresssyndromeexacerbation();
}
inline void AnyPatientActionData::set_has_acuterespiratorydistresssyndromeexacerbation() {
  _oneof_case_[0] = kAcuteRespiratoryDistressSyndromeExacerbation;
}
inline void AnyPatientActionData::clear_acuterespiratorydistresssyndromeexacerbation() {
  if (_internal_has_acuterespiratorydistresssyndromeexacerbation()) {
    if (GetArena() == nullptr) {
      delete Action_.acuterespiratorydistresssyndromeexacerbation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* AnyPatientActionData::release_acuterespiratorydistresssyndromeexacerbation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
  if (_internal_has_acuterespiratorydistresssyndromeexacerbation()) {
    clear_has_Action();
      ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* temp = Action_.acuterespiratorydistresssyndromeexacerbation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.acuterespiratorydistresssyndromeexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData& AnyPatientActionData::_internal_acuterespiratorydistresssyndromeexacerbation() const {
  return _internal_has_acuterespiratorydistresssyndromeexacerbation()
      ? *Action_.acuterespiratorydistresssyndromeexacerbation_
      : reinterpret_cast< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData&>(::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeExacerbationData_default_instance_);
}
inline const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData& AnyPatientActionData::acuterespiratorydistresssyndromeexacerbation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
  return _internal_acuterespiratorydistresssyndromeexacerbation();
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* AnyPatientActionData::unsafe_arena_release_acuterespiratorydistresssyndromeexacerbation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
  if (_internal_has_acuterespiratorydistresssyndromeexacerbation()) {
    clear_has_Action();
    ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* temp = Action_.acuterespiratorydistresssyndromeexacerbation_;
    Action_.acuterespiratorydistresssyndromeexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_acuterespiratorydistresssyndromeexacerbation(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* acuterespiratorydistresssyndromeexacerbation) {
  clear_Action();
  if (acuterespiratorydistresssyndromeexacerbation) {
    set_has_acuterespiratorydistresssyndromeexacerbation();
    Action_.acuterespiratorydistresssyndromeexacerbation_ = acuterespiratorydistresssyndromeexacerbation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* AnyPatientActionData::_internal_mutable_acuterespiratorydistresssyndromeexacerbation() {
  if (!_internal_has_acuterespiratorydistresssyndromeexacerbation()) {
    clear_Action();
    set_has_acuterespiratorydistresssyndromeexacerbation();
    Action_.acuterespiratorydistresssyndromeexacerbation_ = CreateMaybeMessage< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData >(GetArena());
  }
  return Action_.acuterespiratorydistresssyndromeexacerbation_;
}
inline ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeExacerbationData* AnyPatientActionData::mutable_acuterespiratorydistresssyndromeexacerbation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.AcuteRespiratoryDistressSyndromeExacerbation)
  return _internal_mutable_acuterespiratorydistresssyndromeexacerbation();
}

// .pulse.cdm.bind.AcuteStressData AcuteStress = 3;
inline bool AnyPatientActionData::_internal_has_acutestress() const {
  return Action_case() == kAcuteStress;
}
inline bool AnyPatientActionData::has_acutestress() const {
  return _internal_has_acutestress();
}
inline void AnyPatientActionData::set_has_acutestress() {
  _oneof_case_[0] = kAcuteStress;
}
inline void AnyPatientActionData::clear_acutestress() {
  if (_internal_has_acutestress()) {
    if (GetArena() == nullptr) {
      delete Action_.acutestress_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::AcuteStressData* AnyPatientActionData::release_acutestress() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
  if (_internal_has_acutestress()) {
    clear_has_Action();
      ::pulse::cdm::bind::AcuteStressData* temp = Action_.acutestress_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.acutestress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AcuteStressData& AnyPatientActionData::_internal_acutestress() const {
  return _internal_has_acutestress()
      ? *Action_.acutestress_
      : reinterpret_cast< ::pulse::cdm::bind::AcuteStressData&>(::pulse::cdm::bind::_AcuteStressData_default_instance_);
}
inline const ::pulse::cdm::bind::AcuteStressData& AnyPatientActionData::acutestress() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
  return _internal_acutestress();
}
inline ::pulse::cdm::bind::AcuteStressData* AnyPatientActionData::unsafe_arena_release_acutestress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
  if (_internal_has_acutestress()) {
    clear_has_Action();
    ::pulse::cdm::bind::AcuteStressData* temp = Action_.acutestress_;
    Action_.acutestress_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_acutestress(::pulse::cdm::bind::AcuteStressData* acutestress) {
  clear_Action();
  if (acutestress) {
    set_has_acutestress();
    Action_.acutestress_ = acutestress;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
}
inline ::pulse::cdm::bind::AcuteStressData* AnyPatientActionData::_internal_mutable_acutestress() {
  if (!_internal_has_acutestress()) {
    clear_Action();
    set_has_acutestress();
    Action_.acutestress_ = CreateMaybeMessage< ::pulse::cdm::bind::AcuteStressData >(GetArena());
  }
  return Action_.acutestress_;
}
inline ::pulse::cdm::bind::AcuteStressData* AnyPatientActionData::mutable_acutestress() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.AcuteStress)
  return _internal_mutable_acutestress();
}

// .pulse.cdm.bind.AirwayObstructionData AirwayObstruction = 4;
inline bool AnyPatientActionData::_internal_has_airwayobstruction() const {
  return Action_case() == kAirwayObstruction;
}
inline bool AnyPatientActionData::has_airwayobstruction() const {
  return _internal_has_airwayobstruction();
}
inline void AnyPatientActionData::set_has_airwayobstruction() {
  _oneof_case_[0] = kAirwayObstruction;
}
inline void AnyPatientActionData::clear_airwayobstruction() {
  if (_internal_has_airwayobstruction()) {
    if (GetArena() == nullptr) {
      delete Action_.airwayobstruction_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::AirwayObstructionData* AnyPatientActionData::release_airwayobstruction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
  if (_internal_has_airwayobstruction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AirwayObstructionData* temp = Action_.airwayobstruction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.airwayobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AirwayObstructionData& AnyPatientActionData::_internal_airwayobstruction() const {
  return _internal_has_airwayobstruction()
      ? *Action_.airwayobstruction_
      : reinterpret_cast< ::pulse::cdm::bind::AirwayObstructionData&>(::pulse::cdm::bind::_AirwayObstructionData_default_instance_);
}
inline const ::pulse::cdm::bind::AirwayObstructionData& AnyPatientActionData::airwayobstruction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
  return _internal_airwayobstruction();
}
inline ::pulse::cdm::bind::AirwayObstructionData* AnyPatientActionData::unsafe_arena_release_airwayobstruction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
  if (_internal_has_airwayobstruction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AirwayObstructionData* temp = Action_.airwayobstruction_;
    Action_.airwayobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_airwayobstruction(::pulse::cdm::bind::AirwayObstructionData* airwayobstruction) {
  clear_Action();
  if (airwayobstruction) {
    set_has_airwayobstruction();
    Action_.airwayobstruction_ = airwayobstruction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
}
inline ::pulse::cdm::bind::AirwayObstructionData* AnyPatientActionData::_internal_mutable_airwayobstruction() {
  if (!_internal_has_airwayobstruction()) {
    clear_Action();
    set_has_airwayobstruction();
    Action_.airwayobstruction_ = CreateMaybeMessage< ::pulse::cdm::bind::AirwayObstructionData >(GetArena());
  }
  return Action_.airwayobstruction_;
}
inline ::pulse::cdm::bind::AirwayObstructionData* AnyPatientActionData::mutable_airwayobstruction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.AirwayObstruction)
  return _internal_mutable_airwayobstruction();
}

// .pulse.cdm.bind.AsthmaAttackData AsthmaAttack = 5;
inline bool AnyPatientActionData::_internal_has_asthmaattack() const {
  return Action_case() == kAsthmaAttack;
}
inline bool AnyPatientActionData::has_asthmaattack() const {
  return _internal_has_asthmaattack();
}
inline void AnyPatientActionData::set_has_asthmaattack() {
  _oneof_case_[0] = kAsthmaAttack;
}
inline void AnyPatientActionData::clear_asthmaattack() {
  if (_internal_has_asthmaattack()) {
    if (GetArena() == nullptr) {
      delete Action_.asthmaattack_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::AsthmaAttackData* AnyPatientActionData::release_asthmaattack() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
  if (_internal_has_asthmaattack()) {
    clear_has_Action();
      ::pulse::cdm::bind::AsthmaAttackData* temp = Action_.asthmaattack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.asthmaattack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AsthmaAttackData& AnyPatientActionData::_internal_asthmaattack() const {
  return _internal_has_asthmaattack()
      ? *Action_.asthmaattack_
      : reinterpret_cast< ::pulse::cdm::bind::AsthmaAttackData&>(::pulse::cdm::bind::_AsthmaAttackData_default_instance_);
}
inline const ::pulse::cdm::bind::AsthmaAttackData& AnyPatientActionData::asthmaattack() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
  return _internal_asthmaattack();
}
inline ::pulse::cdm::bind::AsthmaAttackData* AnyPatientActionData::unsafe_arena_release_asthmaattack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
  if (_internal_has_asthmaattack()) {
    clear_has_Action();
    ::pulse::cdm::bind::AsthmaAttackData* temp = Action_.asthmaattack_;
    Action_.asthmaattack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_asthmaattack(::pulse::cdm::bind::AsthmaAttackData* asthmaattack) {
  clear_Action();
  if (asthmaattack) {
    set_has_asthmaattack();
    Action_.asthmaattack_ = asthmaattack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
}
inline ::pulse::cdm::bind::AsthmaAttackData* AnyPatientActionData::_internal_mutable_asthmaattack() {
  if (!_internal_has_asthmaattack()) {
    clear_Action();
    set_has_asthmaattack();
    Action_.asthmaattack_ = CreateMaybeMessage< ::pulse::cdm::bind::AsthmaAttackData >(GetArena());
  }
  return Action_.asthmaattack_;
}
inline ::pulse::cdm::bind::AsthmaAttackData* AnyPatientActionData::mutable_asthmaattack() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.AsthmaAttack)
  return _internal_mutable_asthmaattack();
}

// .pulse.cdm.bind.BrainInjuryData BrainInjury = 6;
inline bool AnyPatientActionData::_internal_has_braininjury() const {
  return Action_case() == kBrainInjury;
}
inline bool AnyPatientActionData::has_braininjury() const {
  return _internal_has_braininjury();
}
inline void AnyPatientActionData::set_has_braininjury() {
  _oneof_case_[0] = kBrainInjury;
}
inline void AnyPatientActionData::clear_braininjury() {
  if (_internal_has_braininjury()) {
    if (GetArena() == nullptr) {
      delete Action_.braininjury_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::BrainInjuryData* AnyPatientActionData::release_braininjury() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
  if (_internal_has_braininjury()) {
    clear_has_Action();
      ::pulse::cdm::bind::BrainInjuryData* temp = Action_.braininjury_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.braininjury_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::BrainInjuryData& AnyPatientActionData::_internal_braininjury() const {
  return _internal_has_braininjury()
      ? *Action_.braininjury_
      : reinterpret_cast< ::pulse::cdm::bind::BrainInjuryData&>(::pulse::cdm::bind::_BrainInjuryData_default_instance_);
}
inline const ::pulse::cdm::bind::BrainInjuryData& AnyPatientActionData::braininjury() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
  return _internal_braininjury();
}
inline ::pulse::cdm::bind::BrainInjuryData* AnyPatientActionData::unsafe_arena_release_braininjury() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
  if (_internal_has_braininjury()) {
    clear_has_Action();
    ::pulse::cdm::bind::BrainInjuryData* temp = Action_.braininjury_;
    Action_.braininjury_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_braininjury(::pulse::cdm::bind::BrainInjuryData* braininjury) {
  clear_Action();
  if (braininjury) {
    set_has_braininjury();
    Action_.braininjury_ = braininjury;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
}
inline ::pulse::cdm::bind::BrainInjuryData* AnyPatientActionData::_internal_mutable_braininjury() {
  if (!_internal_has_braininjury()) {
    clear_Action();
    set_has_braininjury();
    Action_.braininjury_ = CreateMaybeMessage< ::pulse::cdm::bind::BrainInjuryData >(GetArena());
  }
  return Action_.braininjury_;
}
inline ::pulse::cdm::bind::BrainInjuryData* AnyPatientActionData::mutable_braininjury() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.BrainInjury)
  return _internal_mutable_braininjury();
}

// .pulse.cdm.bind.BronchoconstrictionData Bronchoconstriction = 7;
inline bool AnyPatientActionData::_internal_has_bronchoconstriction() const {
  return Action_case() == kBronchoconstriction;
}
inline bool AnyPatientActionData::has_bronchoconstriction() const {
  return _internal_has_bronchoconstriction();
}
inline void AnyPatientActionData::set_has_bronchoconstriction() {
  _oneof_case_[0] = kBronchoconstriction;
}
inline void AnyPatientActionData::clear_bronchoconstriction() {
  if (_internal_has_bronchoconstriction()) {
    if (GetArena() == nullptr) {
      delete Action_.bronchoconstriction_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::BronchoconstrictionData* AnyPatientActionData::release_bronchoconstriction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
  if (_internal_has_bronchoconstriction()) {
    clear_has_Action();
      ::pulse::cdm::bind::BronchoconstrictionData* temp = Action_.bronchoconstriction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.bronchoconstriction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::BronchoconstrictionData& AnyPatientActionData::_internal_bronchoconstriction() const {
  return _internal_has_bronchoconstriction()
      ? *Action_.bronchoconstriction_
      : reinterpret_cast< ::pulse::cdm::bind::BronchoconstrictionData&>(::pulse::cdm::bind::_BronchoconstrictionData_default_instance_);
}
inline const ::pulse::cdm::bind::BronchoconstrictionData& AnyPatientActionData::bronchoconstriction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
  return _internal_bronchoconstriction();
}
inline ::pulse::cdm::bind::BronchoconstrictionData* AnyPatientActionData::unsafe_arena_release_bronchoconstriction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
  if (_internal_has_bronchoconstriction()) {
    clear_has_Action();
    ::pulse::cdm::bind::BronchoconstrictionData* temp = Action_.bronchoconstriction_;
    Action_.bronchoconstriction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_bronchoconstriction(::pulse::cdm::bind::BronchoconstrictionData* bronchoconstriction) {
  clear_Action();
  if (bronchoconstriction) {
    set_has_bronchoconstriction();
    Action_.bronchoconstriction_ = bronchoconstriction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
}
inline ::pulse::cdm::bind::BronchoconstrictionData* AnyPatientActionData::_internal_mutable_bronchoconstriction() {
  if (!_internal_has_bronchoconstriction()) {
    clear_Action();
    set_has_bronchoconstriction();
    Action_.bronchoconstriction_ = CreateMaybeMessage< ::pulse::cdm::bind::BronchoconstrictionData >(GetArena());
  }
  return Action_.bronchoconstriction_;
}
inline ::pulse::cdm::bind::BronchoconstrictionData* AnyPatientActionData::mutable_bronchoconstriction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Bronchoconstriction)
  return _internal_mutable_bronchoconstriction();
}

// .pulse.cdm.bind.CardiacArrestData CardiacArrest = 8;
inline bool AnyPatientActionData::_internal_has_cardiacarrest() const {
  return Action_case() == kCardiacArrest;
}
inline bool AnyPatientActionData::has_cardiacarrest() const {
  return _internal_has_cardiacarrest();
}
inline void AnyPatientActionData::set_has_cardiacarrest() {
  _oneof_case_[0] = kCardiacArrest;
}
inline void AnyPatientActionData::clear_cardiacarrest() {
  if (_internal_has_cardiacarrest()) {
    if (GetArena() == nullptr) {
      delete Action_.cardiacarrest_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::CardiacArrestData* AnyPatientActionData::release_cardiacarrest() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
  if (_internal_has_cardiacarrest()) {
    clear_has_Action();
      ::pulse::cdm::bind::CardiacArrestData* temp = Action_.cardiacarrest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.cardiacarrest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::CardiacArrestData& AnyPatientActionData::_internal_cardiacarrest() const {
  return _internal_has_cardiacarrest()
      ? *Action_.cardiacarrest_
      : reinterpret_cast< ::pulse::cdm::bind::CardiacArrestData&>(::pulse::cdm::bind::_CardiacArrestData_default_instance_);
}
inline const ::pulse::cdm::bind::CardiacArrestData& AnyPatientActionData::cardiacarrest() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
  return _internal_cardiacarrest();
}
inline ::pulse::cdm::bind::CardiacArrestData* AnyPatientActionData::unsafe_arena_release_cardiacarrest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
  if (_internal_has_cardiacarrest()) {
    clear_has_Action();
    ::pulse::cdm::bind::CardiacArrestData* temp = Action_.cardiacarrest_;
    Action_.cardiacarrest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_cardiacarrest(::pulse::cdm::bind::CardiacArrestData* cardiacarrest) {
  clear_Action();
  if (cardiacarrest) {
    set_has_cardiacarrest();
    Action_.cardiacarrest_ = cardiacarrest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
}
inline ::pulse::cdm::bind::CardiacArrestData* AnyPatientActionData::_internal_mutable_cardiacarrest() {
  if (!_internal_has_cardiacarrest()) {
    clear_Action();
    set_has_cardiacarrest();
    Action_.cardiacarrest_ = CreateMaybeMessage< ::pulse::cdm::bind::CardiacArrestData >(GetArena());
  }
  return Action_.cardiacarrest_;
}
inline ::pulse::cdm::bind::CardiacArrestData* AnyPatientActionData::mutable_cardiacarrest() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.CardiacArrest)
  return _internal_mutable_cardiacarrest();
}

// .pulse.cdm.bind.ChestCompressionForceData ChestCompressionForce = 9;
inline bool AnyPatientActionData::_internal_has_chestcompressionforce() const {
  return Action_case() == kChestCompressionForce;
}
inline bool AnyPatientActionData::has_chestcompressionforce() const {
  return _internal_has_chestcompressionforce();
}
inline void AnyPatientActionData::set_has_chestcompressionforce() {
  _oneof_case_[0] = kChestCompressionForce;
}
inline void AnyPatientActionData::clear_chestcompressionforce() {
  if (_internal_has_chestcompressionforce()) {
    if (GetArena() == nullptr) {
      delete Action_.chestcompressionforce_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ChestCompressionForceData* AnyPatientActionData::release_chestcompressionforce() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
  if (_internal_has_chestcompressionforce()) {
    clear_has_Action();
      ::pulse::cdm::bind::ChestCompressionForceData* temp = Action_.chestcompressionforce_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.chestcompressionforce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChestCompressionForceData& AnyPatientActionData::_internal_chestcompressionforce() const {
  return _internal_has_chestcompressionforce()
      ? *Action_.chestcompressionforce_
      : reinterpret_cast< ::pulse::cdm::bind::ChestCompressionForceData&>(::pulse::cdm::bind::_ChestCompressionForceData_default_instance_);
}
inline const ::pulse::cdm::bind::ChestCompressionForceData& AnyPatientActionData::chestcompressionforce() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
  return _internal_chestcompressionforce();
}
inline ::pulse::cdm::bind::ChestCompressionForceData* AnyPatientActionData::unsafe_arena_release_chestcompressionforce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
  if (_internal_has_chestcompressionforce()) {
    clear_has_Action();
    ::pulse::cdm::bind::ChestCompressionForceData* temp = Action_.chestcompressionforce_;
    Action_.chestcompressionforce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_chestcompressionforce(::pulse::cdm::bind::ChestCompressionForceData* chestcompressionforce) {
  clear_Action();
  if (chestcompressionforce) {
    set_has_chestcompressionforce();
    Action_.chestcompressionforce_ = chestcompressionforce;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
}
inline ::pulse::cdm::bind::ChestCompressionForceData* AnyPatientActionData::_internal_mutable_chestcompressionforce() {
  if (!_internal_has_chestcompressionforce()) {
    clear_Action();
    set_has_chestcompressionforce();
    Action_.chestcompressionforce_ = CreateMaybeMessage< ::pulse::cdm::bind::ChestCompressionForceData >(GetArena());
  }
  return Action_.chestcompressionforce_;
}
inline ::pulse::cdm::bind::ChestCompressionForceData* AnyPatientActionData::mutable_chestcompressionforce() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForce)
  return _internal_mutable_chestcompressionforce();
}

// .pulse.cdm.bind.ChestCompressionForceScaleData ChestCompressionForceScale = 10;
inline bool AnyPatientActionData::_internal_has_chestcompressionforcescale() const {
  return Action_case() == kChestCompressionForceScale;
}
inline bool AnyPatientActionData::has_chestcompressionforcescale() const {
  return _internal_has_chestcompressionforcescale();
}
inline void AnyPatientActionData::set_has_chestcompressionforcescale() {
  _oneof_case_[0] = kChestCompressionForceScale;
}
inline void AnyPatientActionData::clear_chestcompressionforcescale() {
  if (_internal_has_chestcompressionforcescale()) {
    if (GetArena() == nullptr) {
      delete Action_.chestcompressionforcescale_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ChestCompressionForceScaleData* AnyPatientActionData::release_chestcompressionforcescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
  if (_internal_has_chestcompressionforcescale()) {
    clear_has_Action();
      ::pulse::cdm::bind::ChestCompressionForceScaleData* temp = Action_.chestcompressionforcescale_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.chestcompressionforcescale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChestCompressionForceScaleData& AnyPatientActionData::_internal_chestcompressionforcescale() const {
  return _internal_has_chestcompressionforcescale()
      ? *Action_.chestcompressionforcescale_
      : reinterpret_cast< ::pulse::cdm::bind::ChestCompressionForceScaleData&>(::pulse::cdm::bind::_ChestCompressionForceScaleData_default_instance_);
}
inline const ::pulse::cdm::bind::ChestCompressionForceScaleData& AnyPatientActionData::chestcompressionforcescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
  return _internal_chestcompressionforcescale();
}
inline ::pulse::cdm::bind::ChestCompressionForceScaleData* AnyPatientActionData::unsafe_arena_release_chestcompressionforcescale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
  if (_internal_has_chestcompressionforcescale()) {
    clear_has_Action();
    ::pulse::cdm::bind::ChestCompressionForceScaleData* temp = Action_.chestcompressionforcescale_;
    Action_.chestcompressionforcescale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_chestcompressionforcescale(::pulse::cdm::bind::ChestCompressionForceScaleData* chestcompressionforcescale) {
  clear_Action();
  if (chestcompressionforcescale) {
    set_has_chestcompressionforcescale();
    Action_.chestcompressionforcescale_ = chestcompressionforcescale;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
}
inline ::pulse::cdm::bind::ChestCompressionForceScaleData* AnyPatientActionData::_internal_mutable_chestcompressionforcescale() {
  if (!_internal_has_chestcompressionforcescale()) {
    clear_Action();
    set_has_chestcompressionforcescale();
    Action_.chestcompressionforcescale_ = CreateMaybeMessage< ::pulse::cdm::bind::ChestCompressionForceScaleData >(GetArena());
  }
  return Action_.chestcompressionforcescale_;
}
inline ::pulse::cdm::bind::ChestCompressionForceScaleData* AnyPatientActionData::mutable_chestcompressionforcescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ChestCompressionForceScale)
  return _internal_mutable_chestcompressionforcescale();
}

// .pulse.cdm.bind.ChestOcclusiveDressingData ChestOcclusiveDressing = 11;
inline bool AnyPatientActionData::_internal_has_chestocclusivedressing() const {
  return Action_case() == kChestOcclusiveDressing;
}
inline bool AnyPatientActionData::has_chestocclusivedressing() const {
  return _internal_has_chestocclusivedressing();
}
inline void AnyPatientActionData::set_has_chestocclusivedressing() {
  _oneof_case_[0] = kChestOcclusiveDressing;
}
inline void AnyPatientActionData::clear_chestocclusivedressing() {
  if (_internal_has_chestocclusivedressing()) {
    if (GetArena() == nullptr) {
      delete Action_.chestocclusivedressing_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ChestOcclusiveDressingData* AnyPatientActionData::release_chestocclusivedressing() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
  if (_internal_has_chestocclusivedressing()) {
    clear_has_Action();
      ::pulse::cdm::bind::ChestOcclusiveDressingData* temp = Action_.chestocclusivedressing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.chestocclusivedressing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChestOcclusiveDressingData& AnyPatientActionData::_internal_chestocclusivedressing() const {
  return _internal_has_chestocclusivedressing()
      ? *Action_.chestocclusivedressing_
      : reinterpret_cast< ::pulse::cdm::bind::ChestOcclusiveDressingData&>(::pulse::cdm::bind::_ChestOcclusiveDressingData_default_instance_);
}
inline const ::pulse::cdm::bind::ChestOcclusiveDressingData& AnyPatientActionData::chestocclusivedressing() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
  return _internal_chestocclusivedressing();
}
inline ::pulse::cdm::bind::ChestOcclusiveDressingData* AnyPatientActionData::unsafe_arena_release_chestocclusivedressing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
  if (_internal_has_chestocclusivedressing()) {
    clear_has_Action();
    ::pulse::cdm::bind::ChestOcclusiveDressingData* temp = Action_.chestocclusivedressing_;
    Action_.chestocclusivedressing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_chestocclusivedressing(::pulse::cdm::bind::ChestOcclusiveDressingData* chestocclusivedressing) {
  clear_Action();
  if (chestocclusivedressing) {
    set_has_chestocclusivedressing();
    Action_.chestocclusivedressing_ = chestocclusivedressing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
}
inline ::pulse::cdm::bind::ChestOcclusiveDressingData* AnyPatientActionData::_internal_mutable_chestocclusivedressing() {
  if (!_internal_has_chestocclusivedressing()) {
    clear_Action();
    set_has_chestocclusivedressing();
    Action_.chestocclusivedressing_ = CreateMaybeMessage< ::pulse::cdm::bind::ChestOcclusiveDressingData >(GetArena());
  }
  return Action_.chestocclusivedressing_;
}
inline ::pulse::cdm::bind::ChestOcclusiveDressingData* AnyPatientActionData::mutable_chestocclusivedressing() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ChestOcclusiveDressing)
  return _internal_mutable_chestocclusivedressing();
}

// .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData ChronicObstructivePulmonaryDiseaseExacerbation = 12;
inline bool AnyPatientActionData::_internal_has_chronicobstructivepulmonarydiseaseexacerbation() const {
  return Action_case() == kChronicObstructivePulmonaryDiseaseExacerbation;
}
inline bool AnyPatientActionData::has_chronicobstructivepulmonarydiseaseexacerbation() const {
  return _internal_has_chronicobstructivepulmonarydiseaseexacerbation();
}
inline void AnyPatientActionData::set_has_chronicobstructivepulmonarydiseaseexacerbation() {
  _oneof_case_[0] = kChronicObstructivePulmonaryDiseaseExacerbation;
}
inline void AnyPatientActionData::clear_chronicobstructivepulmonarydiseaseexacerbation() {
  if (_internal_has_chronicobstructivepulmonarydiseaseexacerbation()) {
    if (GetArena() == nullptr) {
      delete Action_.chronicobstructivepulmonarydiseaseexacerbation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* AnyPatientActionData::release_chronicobstructivepulmonarydiseaseexacerbation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
  if (_internal_has_chronicobstructivepulmonarydiseaseexacerbation()) {
    clear_has_Action();
      ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* temp = Action_.chronicobstructivepulmonarydiseaseexacerbation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.chronicobstructivepulmonarydiseaseexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData& AnyPatientActionData::_internal_chronicobstructivepulmonarydiseaseexacerbation() const {
  return _internal_has_chronicobstructivepulmonarydiseaseexacerbation()
      ? *Action_.chronicobstructivepulmonarydiseaseexacerbation_
      : reinterpret_cast< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData&>(::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseExacerbationData_default_instance_);
}
inline const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData& AnyPatientActionData::chronicobstructivepulmonarydiseaseexacerbation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
  return _internal_chronicobstructivepulmonarydiseaseexacerbation();
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* AnyPatientActionData::unsafe_arena_release_chronicobstructivepulmonarydiseaseexacerbation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
  if (_internal_has_chronicobstructivepulmonarydiseaseexacerbation()) {
    clear_has_Action();
    ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* temp = Action_.chronicobstructivepulmonarydiseaseexacerbation_;
    Action_.chronicobstructivepulmonarydiseaseexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_chronicobstructivepulmonarydiseaseexacerbation(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* chronicobstructivepulmonarydiseaseexacerbation) {
  clear_Action();
  if (chronicobstructivepulmonarydiseaseexacerbation) {
    set_has_chronicobstructivepulmonarydiseaseexacerbation();
    Action_.chronicobstructivepulmonarydiseaseexacerbation_ = chronicobstructivepulmonarydiseaseexacerbation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* AnyPatientActionData::_internal_mutable_chronicobstructivepulmonarydiseaseexacerbation() {
  if (!_internal_has_chronicobstructivepulmonarydiseaseexacerbation()) {
    clear_Action();
    set_has_chronicobstructivepulmonarydiseaseexacerbation();
    Action_.chronicobstructivepulmonarydiseaseexacerbation_ = CreateMaybeMessage< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData >(GetArena());
  }
  return Action_.chronicobstructivepulmonarydiseaseexacerbation_;
}
inline ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseExacerbationData* AnyPatientActionData::mutable_chronicobstructivepulmonarydiseaseexacerbation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ChronicObstructivePulmonaryDiseaseExacerbation)
  return _internal_mutable_chronicobstructivepulmonarydiseaseexacerbation();
}

// .pulse.cdm.bind.ConsciousRespirationData ConsciousRespiration = 13;
inline bool AnyPatientActionData::_internal_has_consciousrespiration() const {
  return Action_case() == kConsciousRespiration;
}
inline bool AnyPatientActionData::has_consciousrespiration() const {
  return _internal_has_consciousrespiration();
}
inline void AnyPatientActionData::set_has_consciousrespiration() {
  _oneof_case_[0] = kConsciousRespiration;
}
inline void AnyPatientActionData::clear_consciousrespiration() {
  if (_internal_has_consciousrespiration()) {
    if (GetArena() == nullptr) {
      delete Action_.consciousrespiration_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ConsciousRespirationData* AnyPatientActionData::release_consciousrespiration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
  if (_internal_has_consciousrespiration()) {
    clear_has_Action();
      ::pulse::cdm::bind::ConsciousRespirationData* temp = Action_.consciousrespiration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.consciousrespiration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ConsciousRespirationData& AnyPatientActionData::_internal_consciousrespiration() const {
  return _internal_has_consciousrespiration()
      ? *Action_.consciousrespiration_
      : reinterpret_cast< ::pulse::cdm::bind::ConsciousRespirationData&>(::pulse::cdm::bind::_ConsciousRespirationData_default_instance_);
}
inline const ::pulse::cdm::bind::ConsciousRespirationData& AnyPatientActionData::consciousrespiration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
  return _internal_consciousrespiration();
}
inline ::pulse::cdm::bind::ConsciousRespirationData* AnyPatientActionData::unsafe_arena_release_consciousrespiration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
  if (_internal_has_consciousrespiration()) {
    clear_has_Action();
    ::pulse::cdm::bind::ConsciousRespirationData* temp = Action_.consciousrespiration_;
    Action_.consciousrespiration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_consciousrespiration(::pulse::cdm::bind::ConsciousRespirationData* consciousrespiration) {
  clear_Action();
  if (consciousrespiration) {
    set_has_consciousrespiration();
    Action_.consciousrespiration_ = consciousrespiration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
}
inline ::pulse::cdm::bind::ConsciousRespirationData* AnyPatientActionData::_internal_mutable_consciousrespiration() {
  if (!_internal_has_consciousrespiration()) {
    clear_Action();
    set_has_consciousrespiration();
    Action_.consciousrespiration_ = CreateMaybeMessage< ::pulse::cdm::bind::ConsciousRespirationData >(GetArena());
  }
  return Action_.consciousrespiration_;
}
inline ::pulse::cdm::bind::ConsciousRespirationData* AnyPatientActionData::mutable_consciousrespiration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ConsciousRespiration)
  return _internal_mutable_consciousrespiration();
}

// .pulse.cdm.bind.ConsumeNutrientsData ConsumeNutrients = 14;
inline bool AnyPatientActionData::_internal_has_consumenutrients() const {
  return Action_case() == kConsumeNutrients;
}
inline bool AnyPatientActionData::has_consumenutrients() const {
  return _internal_has_consumenutrients();
}
inline void AnyPatientActionData::set_has_consumenutrients() {
  _oneof_case_[0] = kConsumeNutrients;
}
inline void AnyPatientActionData::clear_consumenutrients() {
  if (_internal_has_consumenutrients()) {
    if (GetArena() == nullptr) {
      delete Action_.consumenutrients_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ConsumeNutrientsData* AnyPatientActionData::release_consumenutrients() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
  if (_internal_has_consumenutrients()) {
    clear_has_Action();
      ::pulse::cdm::bind::ConsumeNutrientsData* temp = Action_.consumenutrients_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.consumenutrients_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ConsumeNutrientsData& AnyPatientActionData::_internal_consumenutrients() const {
  return _internal_has_consumenutrients()
      ? *Action_.consumenutrients_
      : reinterpret_cast< ::pulse::cdm::bind::ConsumeNutrientsData&>(::pulse::cdm::bind::_ConsumeNutrientsData_default_instance_);
}
inline const ::pulse::cdm::bind::ConsumeNutrientsData& AnyPatientActionData::consumenutrients() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
  return _internal_consumenutrients();
}
inline ::pulse::cdm::bind::ConsumeNutrientsData* AnyPatientActionData::unsafe_arena_release_consumenutrients() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
  if (_internal_has_consumenutrients()) {
    clear_has_Action();
    ::pulse::cdm::bind::ConsumeNutrientsData* temp = Action_.consumenutrients_;
    Action_.consumenutrients_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_consumenutrients(::pulse::cdm::bind::ConsumeNutrientsData* consumenutrients) {
  clear_Action();
  if (consumenutrients) {
    set_has_consumenutrients();
    Action_.consumenutrients_ = consumenutrients;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
}
inline ::pulse::cdm::bind::ConsumeNutrientsData* AnyPatientActionData::_internal_mutable_consumenutrients() {
  if (!_internal_has_consumenutrients()) {
    clear_Action();
    set_has_consumenutrients();
    Action_.consumenutrients_ = CreateMaybeMessage< ::pulse::cdm::bind::ConsumeNutrientsData >(GetArena());
  }
  return Action_.consumenutrients_;
}
inline ::pulse::cdm::bind::ConsumeNutrientsData* AnyPatientActionData::mutable_consumenutrients() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ConsumeNutrients)
  return _internal_mutable_consumenutrients();
}

// .pulse.cdm.bind.DyspneaData Dyspnea = 15;
inline bool AnyPatientActionData::_internal_has_dyspnea() const {
  return Action_case() == kDyspnea;
}
inline bool AnyPatientActionData::has_dyspnea() const {
  return _internal_has_dyspnea();
}
inline void AnyPatientActionData::set_has_dyspnea() {
  _oneof_case_[0] = kDyspnea;
}
inline void AnyPatientActionData::clear_dyspnea() {
  if (_internal_has_dyspnea()) {
    if (GetArena() == nullptr) {
      delete Action_.dyspnea_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::DyspneaData* AnyPatientActionData::release_dyspnea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
  if (_internal_has_dyspnea()) {
    clear_has_Action();
      ::pulse::cdm::bind::DyspneaData* temp = Action_.dyspnea_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.dyspnea_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::DyspneaData& AnyPatientActionData::_internal_dyspnea() const {
  return _internal_has_dyspnea()
      ? *Action_.dyspnea_
      : reinterpret_cast< ::pulse::cdm::bind::DyspneaData&>(::pulse::cdm::bind::_DyspneaData_default_instance_);
}
inline const ::pulse::cdm::bind::DyspneaData& AnyPatientActionData::dyspnea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
  return _internal_dyspnea();
}
inline ::pulse::cdm::bind::DyspneaData* AnyPatientActionData::unsafe_arena_release_dyspnea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
  if (_internal_has_dyspnea()) {
    clear_has_Action();
    ::pulse::cdm::bind::DyspneaData* temp = Action_.dyspnea_;
    Action_.dyspnea_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_dyspnea(::pulse::cdm::bind::DyspneaData* dyspnea) {
  clear_Action();
  if (dyspnea) {
    set_has_dyspnea();
    Action_.dyspnea_ = dyspnea;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
}
inline ::pulse::cdm::bind::DyspneaData* AnyPatientActionData::_internal_mutable_dyspnea() {
  if (!_internal_has_dyspnea()) {
    clear_Action();
    set_has_dyspnea();
    Action_.dyspnea_ = CreateMaybeMessage< ::pulse::cdm::bind::DyspneaData >(GetArena());
  }
  return Action_.dyspnea_;
}
inline ::pulse::cdm::bind::DyspneaData* AnyPatientActionData::mutable_dyspnea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Dyspnea)
  return _internal_mutable_dyspnea();
}

// .pulse.cdm.bind.ExerciseData Exercise = 16;
inline bool AnyPatientActionData::_internal_has_exercise() const {
  return Action_case() == kExercise;
}
inline bool AnyPatientActionData::has_exercise() const {
  return _internal_has_exercise();
}
inline void AnyPatientActionData::set_has_exercise() {
  _oneof_case_[0] = kExercise;
}
inline void AnyPatientActionData::clear_exercise() {
  if (_internal_has_exercise()) {
    if (GetArena() == nullptr) {
      delete Action_.exercise_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ExerciseData* AnyPatientActionData::release_exercise() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Exercise)
  if (_internal_has_exercise()) {
    clear_has_Action();
      ::pulse::cdm::bind::ExerciseData* temp = Action_.exercise_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.exercise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ExerciseData& AnyPatientActionData::_internal_exercise() const {
  return _internal_has_exercise()
      ? *Action_.exercise_
      : reinterpret_cast< ::pulse::cdm::bind::ExerciseData&>(::pulse::cdm::bind::_ExerciseData_default_instance_);
}
inline const ::pulse::cdm::bind::ExerciseData& AnyPatientActionData::exercise() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Exercise)
  return _internal_exercise();
}
inline ::pulse::cdm::bind::ExerciseData* AnyPatientActionData::unsafe_arena_release_exercise() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Exercise)
  if (_internal_has_exercise()) {
    clear_has_Action();
    ::pulse::cdm::bind::ExerciseData* temp = Action_.exercise_;
    Action_.exercise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_exercise(::pulse::cdm::bind::ExerciseData* exercise) {
  clear_Action();
  if (exercise) {
    set_has_exercise();
    Action_.exercise_ = exercise;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Exercise)
}
inline ::pulse::cdm::bind::ExerciseData* AnyPatientActionData::_internal_mutable_exercise() {
  if (!_internal_has_exercise()) {
    clear_Action();
    set_has_exercise();
    Action_.exercise_ = CreateMaybeMessage< ::pulse::cdm::bind::ExerciseData >(GetArena());
  }
  return Action_.exercise_;
}
inline ::pulse::cdm::bind::ExerciseData* AnyPatientActionData::mutable_exercise() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Exercise)
  return _internal_mutable_exercise();
}

// .pulse.cdm.bind.HemorrhageData Hemorrhage = 17;
inline bool AnyPatientActionData::_internal_has_hemorrhage() const {
  return Action_case() == kHemorrhage;
}
inline bool AnyPatientActionData::has_hemorrhage() const {
  return _internal_has_hemorrhage();
}
inline void AnyPatientActionData::set_has_hemorrhage() {
  _oneof_case_[0] = kHemorrhage;
}
inline void AnyPatientActionData::clear_hemorrhage() {
  if (_internal_has_hemorrhage()) {
    if (GetArena() == nullptr) {
      delete Action_.hemorrhage_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::HemorrhageData* AnyPatientActionData::release_hemorrhage() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
  if (_internal_has_hemorrhage()) {
    clear_has_Action();
      ::pulse::cdm::bind::HemorrhageData* temp = Action_.hemorrhage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.hemorrhage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::HemorrhageData& AnyPatientActionData::_internal_hemorrhage() const {
  return _internal_has_hemorrhage()
      ? *Action_.hemorrhage_
      : reinterpret_cast< ::pulse::cdm::bind::HemorrhageData&>(::pulse::cdm::bind::_HemorrhageData_default_instance_);
}
inline const ::pulse::cdm::bind::HemorrhageData& AnyPatientActionData::hemorrhage() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
  return _internal_hemorrhage();
}
inline ::pulse::cdm::bind::HemorrhageData* AnyPatientActionData::unsafe_arena_release_hemorrhage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
  if (_internal_has_hemorrhage()) {
    clear_has_Action();
    ::pulse::cdm::bind::HemorrhageData* temp = Action_.hemorrhage_;
    Action_.hemorrhage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_hemorrhage(::pulse::cdm::bind::HemorrhageData* hemorrhage) {
  clear_Action();
  if (hemorrhage) {
    set_has_hemorrhage();
    Action_.hemorrhage_ = hemorrhage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
}
inline ::pulse::cdm::bind::HemorrhageData* AnyPatientActionData::_internal_mutable_hemorrhage() {
  if (!_internal_has_hemorrhage()) {
    clear_Action();
    set_has_hemorrhage();
    Action_.hemorrhage_ = CreateMaybeMessage< ::pulse::cdm::bind::HemorrhageData >(GetArena());
  }
  return Action_.hemorrhage_;
}
inline ::pulse::cdm::bind::HemorrhageData* AnyPatientActionData::mutable_hemorrhage() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Hemorrhage)
  return _internal_mutable_hemorrhage();
}

// .pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData ImpairedAlveolarExchangeExacerbation = 18;
inline bool AnyPatientActionData::_internal_has_impairedalveolarexchangeexacerbation() const {
  return Action_case() == kImpairedAlveolarExchangeExacerbation;
}
inline bool AnyPatientActionData::has_impairedalveolarexchangeexacerbation() const {
  return _internal_has_impairedalveolarexchangeexacerbation();
}
inline void AnyPatientActionData::set_has_impairedalveolarexchangeexacerbation() {
  _oneof_case_[0] = kImpairedAlveolarExchangeExacerbation;
}
inline void AnyPatientActionData::clear_impairedalveolarexchangeexacerbation() {
  if (_internal_has_impairedalveolarexchangeexacerbation()) {
    if (GetArena() == nullptr) {
      delete Action_.impairedalveolarexchangeexacerbation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* AnyPatientActionData::release_impairedalveolarexchangeexacerbation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
  if (_internal_has_impairedalveolarexchangeexacerbation()) {
    clear_has_Action();
      ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* temp = Action_.impairedalveolarexchangeexacerbation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.impairedalveolarexchangeexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData& AnyPatientActionData::_internal_impairedalveolarexchangeexacerbation() const {
  return _internal_has_impairedalveolarexchangeexacerbation()
      ? *Action_.impairedalveolarexchangeexacerbation_
      : reinterpret_cast< ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData&>(::pulse::cdm::bind::_ImpairedAlveolarExchangeExacerbationData_default_instance_);
}
inline const ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData& AnyPatientActionData::impairedalveolarexchangeexacerbation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
  return _internal_impairedalveolarexchangeexacerbation();
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* AnyPatientActionData::unsafe_arena_release_impairedalveolarexchangeexacerbation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
  if (_internal_has_impairedalveolarexchangeexacerbation()) {
    clear_has_Action();
    ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* temp = Action_.impairedalveolarexchangeexacerbation_;
    Action_.impairedalveolarexchangeexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_impairedalveolarexchangeexacerbation(::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* impairedalveolarexchangeexacerbation) {
  clear_Action();
  if (impairedalveolarexchangeexacerbation) {
    set_has_impairedalveolarexchangeexacerbation();
    Action_.impairedalveolarexchangeexacerbation_ = impairedalveolarexchangeexacerbation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* AnyPatientActionData::_internal_mutable_impairedalveolarexchangeexacerbation() {
  if (!_internal_has_impairedalveolarexchangeexacerbation()) {
    clear_Action();
    set_has_impairedalveolarexchangeexacerbation();
    Action_.impairedalveolarexchangeexacerbation_ = CreateMaybeMessage< ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData >(GetArena());
  }
  return Action_.impairedalveolarexchangeexacerbation_;
}
inline ::pulse::cdm::bind::ImpairedAlveolarExchangeExacerbationData* AnyPatientActionData::mutable_impairedalveolarexchangeexacerbation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.ImpairedAlveolarExchangeExacerbation)
  return _internal_mutable_impairedalveolarexchangeexacerbation();
}

// .pulse.cdm.bind.IntubationData Intubation = 19;
inline bool AnyPatientActionData::_internal_has_intubation() const {
  return Action_case() == kIntubation;
}
inline bool AnyPatientActionData::has_intubation() const {
  return _internal_has_intubation();
}
inline void AnyPatientActionData::set_has_intubation() {
  _oneof_case_[0] = kIntubation;
}
inline void AnyPatientActionData::clear_intubation() {
  if (_internal_has_intubation()) {
    if (GetArena() == nullptr) {
      delete Action_.intubation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::IntubationData* AnyPatientActionData::release_intubation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Intubation)
  if (_internal_has_intubation()) {
    clear_has_Action();
      ::pulse::cdm::bind::IntubationData* temp = Action_.intubation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.intubation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::IntubationData& AnyPatientActionData::_internal_intubation() const {
  return _internal_has_intubation()
      ? *Action_.intubation_
      : reinterpret_cast< ::pulse::cdm::bind::IntubationData&>(::pulse::cdm::bind::_IntubationData_default_instance_);
}
inline const ::pulse::cdm::bind::IntubationData& AnyPatientActionData::intubation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Intubation)
  return _internal_intubation();
}
inline ::pulse::cdm::bind::IntubationData* AnyPatientActionData::unsafe_arena_release_intubation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Intubation)
  if (_internal_has_intubation()) {
    clear_has_Action();
    ::pulse::cdm::bind::IntubationData* temp = Action_.intubation_;
    Action_.intubation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_intubation(::pulse::cdm::bind::IntubationData* intubation) {
  clear_Action();
  if (intubation) {
    set_has_intubation();
    Action_.intubation_ = intubation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Intubation)
}
inline ::pulse::cdm::bind::IntubationData* AnyPatientActionData::_internal_mutable_intubation() {
  if (!_internal_has_intubation()) {
    clear_Action();
    set_has_intubation();
    Action_.intubation_ = CreateMaybeMessage< ::pulse::cdm::bind::IntubationData >(GetArena());
  }
  return Action_.intubation_;
}
inline ::pulse::cdm::bind::IntubationData* AnyPatientActionData::mutable_intubation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Intubation)
  return _internal_mutable_intubation();
}

// .pulse.cdm.bind.LobarPneumoniaExacerbationData LobarPneumoniaExacerbation = 20;
inline bool AnyPatientActionData::_internal_has_lobarpneumoniaexacerbation() const {
  return Action_case() == kLobarPneumoniaExacerbation;
}
inline bool AnyPatientActionData::has_lobarpneumoniaexacerbation() const {
  return _internal_has_lobarpneumoniaexacerbation();
}
inline void AnyPatientActionData::set_has_lobarpneumoniaexacerbation() {
  _oneof_case_[0] = kLobarPneumoniaExacerbation;
}
inline void AnyPatientActionData::clear_lobarpneumoniaexacerbation() {
  if (_internal_has_lobarpneumoniaexacerbation()) {
    if (GetArena() == nullptr) {
      delete Action_.lobarpneumoniaexacerbation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::LobarPneumoniaExacerbationData* AnyPatientActionData::release_lobarpneumoniaexacerbation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
  if (_internal_has_lobarpneumoniaexacerbation()) {
    clear_has_Action();
      ::pulse::cdm::bind::LobarPneumoniaExacerbationData* temp = Action_.lobarpneumoniaexacerbation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.lobarpneumoniaexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::LobarPneumoniaExacerbationData& AnyPatientActionData::_internal_lobarpneumoniaexacerbation() const {
  return _internal_has_lobarpneumoniaexacerbation()
      ? *Action_.lobarpneumoniaexacerbation_
      : reinterpret_cast< ::pulse::cdm::bind::LobarPneumoniaExacerbationData&>(::pulse::cdm::bind::_LobarPneumoniaExacerbationData_default_instance_);
}
inline const ::pulse::cdm::bind::LobarPneumoniaExacerbationData& AnyPatientActionData::lobarpneumoniaexacerbation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
  return _internal_lobarpneumoniaexacerbation();
}
inline ::pulse::cdm::bind::LobarPneumoniaExacerbationData* AnyPatientActionData::unsafe_arena_release_lobarpneumoniaexacerbation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
  if (_internal_has_lobarpneumoniaexacerbation()) {
    clear_has_Action();
    ::pulse::cdm::bind::LobarPneumoniaExacerbationData* temp = Action_.lobarpneumoniaexacerbation_;
    Action_.lobarpneumoniaexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_lobarpneumoniaexacerbation(::pulse::cdm::bind::LobarPneumoniaExacerbationData* lobarpneumoniaexacerbation) {
  clear_Action();
  if (lobarpneumoniaexacerbation) {
    set_has_lobarpneumoniaexacerbation();
    Action_.lobarpneumoniaexacerbation_ = lobarpneumoniaexacerbation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
}
inline ::pulse::cdm::bind::LobarPneumoniaExacerbationData* AnyPatientActionData::_internal_mutable_lobarpneumoniaexacerbation() {
  if (!_internal_has_lobarpneumoniaexacerbation()) {
    clear_Action();
    set_has_lobarpneumoniaexacerbation();
    Action_.lobarpneumoniaexacerbation_ = CreateMaybeMessage< ::pulse::cdm::bind::LobarPneumoniaExacerbationData >(GetArena());
  }
  return Action_.lobarpneumoniaexacerbation_;
}
inline ::pulse::cdm::bind::LobarPneumoniaExacerbationData* AnyPatientActionData::mutable_lobarpneumoniaexacerbation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.LobarPneumoniaExacerbation)
  return _internal_mutable_lobarpneumoniaexacerbation();
}

// .pulse.cdm.bind.MechanicalVentilationData MechanicalVentilation = 21;
inline bool AnyPatientActionData::_internal_has_mechanicalventilation() const {
  return Action_case() == kMechanicalVentilation;
}
inline bool AnyPatientActionData::has_mechanicalventilation() const {
  return _internal_has_mechanicalventilation();
}
inline void AnyPatientActionData::set_has_mechanicalventilation() {
  _oneof_case_[0] = kMechanicalVentilation;
}
inline void AnyPatientActionData::clear_mechanicalventilation() {
  if (_internal_has_mechanicalventilation()) {
    if (GetArena() == nullptr) {
      delete Action_.mechanicalventilation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::MechanicalVentilationData* AnyPatientActionData::release_mechanicalventilation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
  if (_internal_has_mechanicalventilation()) {
    clear_has_Action();
      ::pulse::cdm::bind::MechanicalVentilationData* temp = Action_.mechanicalventilation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.mechanicalventilation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::MechanicalVentilationData& AnyPatientActionData::_internal_mechanicalventilation() const {
  return _internal_has_mechanicalventilation()
      ? *Action_.mechanicalventilation_
      : reinterpret_cast< ::pulse::cdm::bind::MechanicalVentilationData&>(::pulse::cdm::bind::_MechanicalVentilationData_default_instance_);
}
inline const ::pulse::cdm::bind::MechanicalVentilationData& AnyPatientActionData::mechanicalventilation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
  return _internal_mechanicalventilation();
}
inline ::pulse::cdm::bind::MechanicalVentilationData* AnyPatientActionData::unsafe_arena_release_mechanicalventilation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
  if (_internal_has_mechanicalventilation()) {
    clear_has_Action();
    ::pulse::cdm::bind::MechanicalVentilationData* temp = Action_.mechanicalventilation_;
    Action_.mechanicalventilation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_mechanicalventilation(::pulse::cdm::bind::MechanicalVentilationData* mechanicalventilation) {
  clear_Action();
  if (mechanicalventilation) {
    set_has_mechanicalventilation();
    Action_.mechanicalventilation_ = mechanicalventilation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
}
inline ::pulse::cdm::bind::MechanicalVentilationData* AnyPatientActionData::_internal_mutable_mechanicalventilation() {
  if (!_internal_has_mechanicalventilation()) {
    clear_Action();
    set_has_mechanicalventilation();
    Action_.mechanicalventilation_ = CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilationData >(GetArena());
  }
  return Action_.mechanicalventilation_;
}
inline ::pulse::cdm::bind::MechanicalVentilationData* AnyPatientActionData::mutable_mechanicalventilation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.MechanicalVentilation)
  return _internal_mutable_mechanicalventilation();
}

// .pulse.cdm.bind.NeedleDecompressionData NeedleDecompression = 22;
inline bool AnyPatientActionData::_internal_has_needledecompression() const {
  return Action_case() == kNeedleDecompression;
}
inline bool AnyPatientActionData::has_needledecompression() const {
  return _internal_has_needledecompression();
}
inline void AnyPatientActionData::set_has_needledecompression() {
  _oneof_case_[0] = kNeedleDecompression;
}
inline void AnyPatientActionData::clear_needledecompression() {
  if (_internal_has_needledecompression()) {
    if (GetArena() == nullptr) {
      delete Action_.needledecompression_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::NeedleDecompressionData* AnyPatientActionData::release_needledecompression() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
  if (_internal_has_needledecompression()) {
    clear_has_Action();
      ::pulse::cdm::bind::NeedleDecompressionData* temp = Action_.needledecompression_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.needledecompression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::NeedleDecompressionData& AnyPatientActionData::_internal_needledecompression() const {
  return _internal_has_needledecompression()
      ? *Action_.needledecompression_
      : reinterpret_cast< ::pulse::cdm::bind::NeedleDecompressionData&>(::pulse::cdm::bind::_NeedleDecompressionData_default_instance_);
}
inline const ::pulse::cdm::bind::NeedleDecompressionData& AnyPatientActionData::needledecompression() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
  return _internal_needledecompression();
}
inline ::pulse::cdm::bind::NeedleDecompressionData* AnyPatientActionData::unsafe_arena_release_needledecompression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
  if (_internal_has_needledecompression()) {
    clear_has_Action();
    ::pulse::cdm::bind::NeedleDecompressionData* temp = Action_.needledecompression_;
    Action_.needledecompression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_needledecompression(::pulse::cdm::bind::NeedleDecompressionData* needledecompression) {
  clear_Action();
  if (needledecompression) {
    set_has_needledecompression();
    Action_.needledecompression_ = needledecompression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
}
inline ::pulse::cdm::bind::NeedleDecompressionData* AnyPatientActionData::_internal_mutable_needledecompression() {
  if (!_internal_has_needledecompression()) {
    clear_Action();
    set_has_needledecompression();
    Action_.needledecompression_ = CreateMaybeMessage< ::pulse::cdm::bind::NeedleDecompressionData >(GetArena());
  }
  return Action_.needledecompression_;
}
inline ::pulse::cdm::bind::NeedleDecompressionData* AnyPatientActionData::mutable_needledecompression() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.NeedleDecompression)
  return _internal_mutable_needledecompression();
}

// .pulse.cdm.bind.PericardialEffusionData PericardialEffusion = 23;
inline bool AnyPatientActionData::_internal_has_pericardialeffusion() const {
  return Action_case() == kPericardialEffusion;
}
inline bool AnyPatientActionData::has_pericardialeffusion() const {
  return _internal_has_pericardialeffusion();
}
inline void AnyPatientActionData::set_has_pericardialeffusion() {
  _oneof_case_[0] = kPericardialEffusion;
}
inline void AnyPatientActionData::clear_pericardialeffusion() {
  if (_internal_has_pericardialeffusion()) {
    if (GetArena() == nullptr) {
      delete Action_.pericardialeffusion_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::PericardialEffusionData* AnyPatientActionData::release_pericardialeffusion() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
  if (_internal_has_pericardialeffusion()) {
    clear_has_Action();
      ::pulse::cdm::bind::PericardialEffusionData* temp = Action_.pericardialeffusion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.pericardialeffusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PericardialEffusionData& AnyPatientActionData::_internal_pericardialeffusion() const {
  return _internal_has_pericardialeffusion()
      ? *Action_.pericardialeffusion_
      : reinterpret_cast< ::pulse::cdm::bind::PericardialEffusionData&>(::pulse::cdm::bind::_PericardialEffusionData_default_instance_);
}
inline const ::pulse::cdm::bind::PericardialEffusionData& AnyPatientActionData::pericardialeffusion() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
  return _internal_pericardialeffusion();
}
inline ::pulse::cdm::bind::PericardialEffusionData* AnyPatientActionData::unsafe_arena_release_pericardialeffusion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
  if (_internal_has_pericardialeffusion()) {
    clear_has_Action();
    ::pulse::cdm::bind::PericardialEffusionData* temp = Action_.pericardialeffusion_;
    Action_.pericardialeffusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_pericardialeffusion(::pulse::cdm::bind::PericardialEffusionData* pericardialeffusion) {
  clear_Action();
  if (pericardialeffusion) {
    set_has_pericardialeffusion();
    Action_.pericardialeffusion_ = pericardialeffusion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
}
inline ::pulse::cdm::bind::PericardialEffusionData* AnyPatientActionData::_internal_mutable_pericardialeffusion() {
  if (!_internal_has_pericardialeffusion()) {
    clear_Action();
    set_has_pericardialeffusion();
    Action_.pericardialeffusion_ = CreateMaybeMessage< ::pulse::cdm::bind::PericardialEffusionData >(GetArena());
  }
  return Action_.pericardialeffusion_;
}
inline ::pulse::cdm::bind::PericardialEffusionData* AnyPatientActionData::mutable_pericardialeffusion() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.PericardialEffusion)
  return _internal_mutable_pericardialeffusion();
}

// .pulse.cdm.bind.PulmonaryShuntExacerbationData PulmonaryShuntExacerbation = 24;
inline bool AnyPatientActionData::_internal_has_pulmonaryshuntexacerbation() const {
  return Action_case() == kPulmonaryShuntExacerbation;
}
inline bool AnyPatientActionData::has_pulmonaryshuntexacerbation() const {
  return _internal_has_pulmonaryshuntexacerbation();
}
inline void AnyPatientActionData::set_has_pulmonaryshuntexacerbation() {
  _oneof_case_[0] = kPulmonaryShuntExacerbation;
}
inline void AnyPatientActionData::clear_pulmonaryshuntexacerbation() {
  if (_internal_has_pulmonaryshuntexacerbation()) {
    if (GetArena() == nullptr) {
      delete Action_.pulmonaryshuntexacerbation_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::PulmonaryShuntExacerbationData* AnyPatientActionData::release_pulmonaryshuntexacerbation() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
  if (_internal_has_pulmonaryshuntexacerbation()) {
    clear_has_Action();
      ::pulse::cdm::bind::PulmonaryShuntExacerbationData* temp = Action_.pulmonaryshuntexacerbation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.pulmonaryshuntexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::PulmonaryShuntExacerbationData& AnyPatientActionData::_internal_pulmonaryshuntexacerbation() const {
  return _internal_has_pulmonaryshuntexacerbation()
      ? *Action_.pulmonaryshuntexacerbation_
      : reinterpret_cast< ::pulse::cdm::bind::PulmonaryShuntExacerbationData&>(::pulse::cdm::bind::_PulmonaryShuntExacerbationData_default_instance_);
}
inline const ::pulse::cdm::bind::PulmonaryShuntExacerbationData& AnyPatientActionData::pulmonaryshuntexacerbation() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
  return _internal_pulmonaryshuntexacerbation();
}
inline ::pulse::cdm::bind::PulmonaryShuntExacerbationData* AnyPatientActionData::unsafe_arena_release_pulmonaryshuntexacerbation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
  if (_internal_has_pulmonaryshuntexacerbation()) {
    clear_has_Action();
    ::pulse::cdm::bind::PulmonaryShuntExacerbationData* temp = Action_.pulmonaryshuntexacerbation_;
    Action_.pulmonaryshuntexacerbation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_pulmonaryshuntexacerbation(::pulse::cdm::bind::PulmonaryShuntExacerbationData* pulmonaryshuntexacerbation) {
  clear_Action();
  if (pulmonaryshuntexacerbation) {
    set_has_pulmonaryshuntexacerbation();
    Action_.pulmonaryshuntexacerbation_ = pulmonaryshuntexacerbation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
}
inline ::pulse::cdm::bind::PulmonaryShuntExacerbationData* AnyPatientActionData::_internal_mutable_pulmonaryshuntexacerbation() {
  if (!_internal_has_pulmonaryshuntexacerbation()) {
    clear_Action();
    set_has_pulmonaryshuntexacerbation();
    Action_.pulmonaryshuntexacerbation_ = CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryShuntExacerbationData >(GetArena());
  }
  return Action_.pulmonaryshuntexacerbation_;
}
inline ::pulse::cdm::bind::PulmonaryShuntExacerbationData* AnyPatientActionData::mutable_pulmonaryshuntexacerbation() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.PulmonaryShuntExacerbation)
  return _internal_mutable_pulmonaryshuntexacerbation();
}

// .pulse.cdm.bind.RespiratoryFatigueData RespiratoryFatigue = 25;
inline bool AnyPatientActionData::_internal_has_respiratoryfatigue() const {
  return Action_case() == kRespiratoryFatigue;
}
inline bool AnyPatientActionData::has_respiratoryfatigue() const {
  return _internal_has_respiratoryfatigue();
}
inline void AnyPatientActionData::set_has_respiratoryfatigue() {
  _oneof_case_[0] = kRespiratoryFatigue;
}
inline void AnyPatientActionData::clear_respiratoryfatigue() {
  if (_internal_has_respiratoryfatigue()) {
    if (GetArena() == nullptr) {
      delete Action_.respiratoryfatigue_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::RespiratoryFatigueData* AnyPatientActionData::release_respiratoryfatigue() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
  if (_internal_has_respiratoryfatigue()) {
    clear_has_Action();
      ::pulse::cdm::bind::RespiratoryFatigueData* temp = Action_.respiratoryfatigue_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.respiratoryfatigue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::RespiratoryFatigueData& AnyPatientActionData::_internal_respiratoryfatigue() const {
  return _internal_has_respiratoryfatigue()
      ? *Action_.respiratoryfatigue_
      : reinterpret_cast< ::pulse::cdm::bind::RespiratoryFatigueData&>(::pulse::cdm::bind::_RespiratoryFatigueData_default_instance_);
}
inline const ::pulse::cdm::bind::RespiratoryFatigueData& AnyPatientActionData::respiratoryfatigue() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
  return _internal_respiratoryfatigue();
}
inline ::pulse::cdm::bind::RespiratoryFatigueData* AnyPatientActionData::unsafe_arena_release_respiratoryfatigue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
  if (_internal_has_respiratoryfatigue()) {
    clear_has_Action();
    ::pulse::cdm::bind::RespiratoryFatigueData* temp = Action_.respiratoryfatigue_;
    Action_.respiratoryfatigue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_respiratoryfatigue(::pulse::cdm::bind::RespiratoryFatigueData* respiratoryfatigue) {
  clear_Action();
  if (respiratoryfatigue) {
    set_has_respiratoryfatigue();
    Action_.respiratoryfatigue_ = respiratoryfatigue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
}
inline ::pulse::cdm::bind::RespiratoryFatigueData* AnyPatientActionData::_internal_mutable_respiratoryfatigue() {
  if (!_internal_has_respiratoryfatigue()) {
    clear_Action();
    set_has_respiratoryfatigue();
    Action_.respiratoryfatigue_ = CreateMaybeMessage< ::pulse::cdm::bind::RespiratoryFatigueData >(GetArena());
  }
  return Action_.respiratoryfatigue_;
}
inline ::pulse::cdm::bind::RespiratoryFatigueData* AnyPatientActionData::mutable_respiratoryfatigue() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.RespiratoryFatigue)
  return _internal_mutable_respiratoryfatigue();
}

// .pulse.cdm.bind.SubstanceBolusData SubstanceBolus = 26;
inline bool AnyPatientActionData::_internal_has_substancebolus() const {
  return Action_case() == kSubstanceBolus;
}
inline bool AnyPatientActionData::has_substancebolus() const {
  return _internal_has_substancebolus();
}
inline void AnyPatientActionData::set_has_substancebolus() {
  _oneof_case_[0] = kSubstanceBolus;
}
inline void AnyPatientActionData::clear_substancebolus() {
  if (_internal_has_substancebolus()) {
    if (GetArena() == nullptr) {
      delete Action_.substancebolus_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::SubstanceBolusData* AnyPatientActionData::release_substancebolus() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
  if (_internal_has_substancebolus()) {
    clear_has_Action();
      ::pulse::cdm::bind::SubstanceBolusData* temp = Action_.substancebolus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.substancebolus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SubstanceBolusData& AnyPatientActionData::_internal_substancebolus() const {
  return _internal_has_substancebolus()
      ? *Action_.substancebolus_
      : reinterpret_cast< ::pulse::cdm::bind::SubstanceBolusData&>(::pulse::cdm::bind::_SubstanceBolusData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceBolusData& AnyPatientActionData::substancebolus() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
  return _internal_substancebolus();
}
inline ::pulse::cdm::bind::SubstanceBolusData* AnyPatientActionData::unsafe_arena_release_substancebolus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
  if (_internal_has_substancebolus()) {
    clear_has_Action();
    ::pulse::cdm::bind::SubstanceBolusData* temp = Action_.substancebolus_;
    Action_.substancebolus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_substancebolus(::pulse::cdm::bind::SubstanceBolusData* substancebolus) {
  clear_Action();
  if (substancebolus) {
    set_has_substancebolus();
    Action_.substancebolus_ = substancebolus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
}
inline ::pulse::cdm::bind::SubstanceBolusData* AnyPatientActionData::_internal_mutable_substancebolus() {
  if (!_internal_has_substancebolus()) {
    clear_Action();
    set_has_substancebolus();
    Action_.substancebolus_ = CreateMaybeMessage< ::pulse::cdm::bind::SubstanceBolusData >(GetArena());
  }
  return Action_.substancebolus_;
}
inline ::pulse::cdm::bind::SubstanceBolusData* AnyPatientActionData::mutable_substancebolus() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.SubstanceBolus)
  return _internal_mutable_substancebolus();
}

// .pulse.cdm.bind.SubstanceCompoundInfusionData SubstanceCompoundInfusion = 27;
inline bool AnyPatientActionData::_internal_has_substancecompoundinfusion() const {
  return Action_case() == kSubstanceCompoundInfusion;
}
inline bool AnyPatientActionData::has_substancecompoundinfusion() const {
  return _internal_has_substancecompoundinfusion();
}
inline void AnyPatientActionData::set_has_substancecompoundinfusion() {
  _oneof_case_[0] = kSubstanceCompoundInfusion;
}
inline void AnyPatientActionData::clear_substancecompoundinfusion() {
  if (_internal_has_substancecompoundinfusion()) {
    if (GetArena() == nullptr) {
      delete Action_.substancecompoundinfusion_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::SubstanceCompoundInfusionData* AnyPatientActionData::release_substancecompoundinfusion() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
  if (_internal_has_substancecompoundinfusion()) {
    clear_has_Action();
      ::pulse::cdm::bind::SubstanceCompoundInfusionData* temp = Action_.substancecompoundinfusion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.substancecompoundinfusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SubstanceCompoundInfusionData& AnyPatientActionData::_internal_substancecompoundinfusion() const {
  return _internal_has_substancecompoundinfusion()
      ? *Action_.substancecompoundinfusion_
      : reinterpret_cast< ::pulse::cdm::bind::SubstanceCompoundInfusionData&>(::pulse::cdm::bind::_SubstanceCompoundInfusionData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceCompoundInfusionData& AnyPatientActionData::substancecompoundinfusion() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
  return _internal_substancecompoundinfusion();
}
inline ::pulse::cdm::bind::SubstanceCompoundInfusionData* AnyPatientActionData::unsafe_arena_release_substancecompoundinfusion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
  if (_internal_has_substancecompoundinfusion()) {
    clear_has_Action();
    ::pulse::cdm::bind::SubstanceCompoundInfusionData* temp = Action_.substancecompoundinfusion_;
    Action_.substancecompoundinfusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_substancecompoundinfusion(::pulse::cdm::bind::SubstanceCompoundInfusionData* substancecompoundinfusion) {
  clear_Action();
  if (substancecompoundinfusion) {
    set_has_substancecompoundinfusion();
    Action_.substancecompoundinfusion_ = substancecompoundinfusion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
}
inline ::pulse::cdm::bind::SubstanceCompoundInfusionData* AnyPatientActionData::_internal_mutable_substancecompoundinfusion() {
  if (!_internal_has_substancecompoundinfusion()) {
    clear_Action();
    set_has_substancecompoundinfusion();
    Action_.substancecompoundinfusion_ = CreateMaybeMessage< ::pulse::cdm::bind::SubstanceCompoundInfusionData >(GetArena());
  }
  return Action_.substancecompoundinfusion_;
}
inline ::pulse::cdm::bind::SubstanceCompoundInfusionData* AnyPatientActionData::mutable_substancecompoundinfusion() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.SubstanceCompoundInfusion)
  return _internal_mutable_substancecompoundinfusion();
}

// .pulse.cdm.bind.SubstanceInfusionData SubstanceInfusion = 28;
inline bool AnyPatientActionData::_internal_has_substanceinfusion() const {
  return Action_case() == kSubstanceInfusion;
}
inline bool AnyPatientActionData::has_substanceinfusion() const {
  return _internal_has_substanceinfusion();
}
inline void AnyPatientActionData::set_has_substanceinfusion() {
  _oneof_case_[0] = kSubstanceInfusion;
}
inline void AnyPatientActionData::clear_substanceinfusion() {
  if (_internal_has_substanceinfusion()) {
    if (GetArena() == nullptr) {
      delete Action_.substanceinfusion_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::SubstanceInfusionData* AnyPatientActionData::release_substanceinfusion() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
  if (_internal_has_substanceinfusion()) {
    clear_has_Action();
      ::pulse::cdm::bind::SubstanceInfusionData* temp = Action_.substanceinfusion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.substanceinfusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SubstanceInfusionData& AnyPatientActionData::_internal_substanceinfusion() const {
  return _internal_has_substanceinfusion()
      ? *Action_.substanceinfusion_
      : reinterpret_cast< ::pulse::cdm::bind::SubstanceInfusionData&>(::pulse::cdm::bind::_SubstanceInfusionData_default_instance_);
}
inline const ::pulse::cdm::bind::SubstanceInfusionData& AnyPatientActionData::substanceinfusion() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
  return _internal_substanceinfusion();
}
inline ::pulse::cdm::bind::SubstanceInfusionData* AnyPatientActionData::unsafe_arena_release_substanceinfusion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
  if (_internal_has_substanceinfusion()) {
    clear_has_Action();
    ::pulse::cdm::bind::SubstanceInfusionData* temp = Action_.substanceinfusion_;
    Action_.substanceinfusion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_substanceinfusion(::pulse::cdm::bind::SubstanceInfusionData* substanceinfusion) {
  clear_Action();
  if (substanceinfusion) {
    set_has_substanceinfusion();
    Action_.substanceinfusion_ = substanceinfusion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
}
inline ::pulse::cdm::bind::SubstanceInfusionData* AnyPatientActionData::_internal_mutable_substanceinfusion() {
  if (!_internal_has_substanceinfusion()) {
    clear_Action();
    set_has_substanceinfusion();
    Action_.substanceinfusion_ = CreateMaybeMessage< ::pulse::cdm::bind::SubstanceInfusionData >(GetArena());
  }
  return Action_.substanceinfusion_;
}
inline ::pulse::cdm::bind::SubstanceInfusionData* AnyPatientActionData::mutable_substanceinfusion() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.SubstanceInfusion)
  return _internal_mutable_substanceinfusion();
}

// .pulse.cdm.bind.SupplementalOxygenData SupplementalOxygen = 29;
inline bool AnyPatientActionData::_internal_has_supplementaloxygen() const {
  return Action_case() == kSupplementalOxygen;
}
inline bool AnyPatientActionData::has_supplementaloxygen() const {
  return _internal_has_supplementaloxygen();
}
inline void AnyPatientActionData::set_has_supplementaloxygen() {
  _oneof_case_[0] = kSupplementalOxygen;
}
inline void AnyPatientActionData::clear_supplementaloxygen() {
  if (_internal_has_supplementaloxygen()) {
    if (GetArena() == nullptr) {
      delete Action_.supplementaloxygen_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::SupplementalOxygenData* AnyPatientActionData::release_supplementaloxygen() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
  if (_internal_has_supplementaloxygen()) {
    clear_has_Action();
      ::pulse::cdm::bind::SupplementalOxygenData* temp = Action_.supplementaloxygen_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.supplementaloxygen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::SupplementalOxygenData& AnyPatientActionData::_internal_supplementaloxygen() const {
  return _internal_has_supplementaloxygen()
      ? *Action_.supplementaloxygen_
      : reinterpret_cast< ::pulse::cdm::bind::SupplementalOxygenData&>(::pulse::cdm::bind::_SupplementalOxygenData_default_instance_);
}
inline const ::pulse::cdm::bind::SupplementalOxygenData& AnyPatientActionData::supplementaloxygen() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
  return _internal_supplementaloxygen();
}
inline ::pulse::cdm::bind::SupplementalOxygenData* AnyPatientActionData::unsafe_arena_release_supplementaloxygen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
  if (_internal_has_supplementaloxygen()) {
    clear_has_Action();
    ::pulse::cdm::bind::SupplementalOxygenData* temp = Action_.supplementaloxygen_;
    Action_.supplementaloxygen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_supplementaloxygen(::pulse::cdm::bind::SupplementalOxygenData* supplementaloxygen) {
  clear_Action();
  if (supplementaloxygen) {
    set_has_supplementaloxygen();
    Action_.supplementaloxygen_ = supplementaloxygen;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
}
inline ::pulse::cdm::bind::SupplementalOxygenData* AnyPatientActionData::_internal_mutable_supplementaloxygen() {
  if (!_internal_has_supplementaloxygen()) {
    clear_Action();
    set_has_supplementaloxygen();
    Action_.supplementaloxygen_ = CreateMaybeMessage< ::pulse::cdm::bind::SupplementalOxygenData >(GetArena());
  }
  return Action_.supplementaloxygen_;
}
inline ::pulse::cdm::bind::SupplementalOxygenData* AnyPatientActionData::mutable_supplementaloxygen() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.SupplementalOxygen)
  return _internal_mutable_supplementaloxygen();
}

// .pulse.cdm.bind.TensionPneumothoraxData TensionPneumothorax = 30;
inline bool AnyPatientActionData::_internal_has_tensionpneumothorax() const {
  return Action_case() == kTensionPneumothorax;
}
inline bool AnyPatientActionData::has_tensionpneumothorax() const {
  return _internal_has_tensionpneumothorax();
}
inline void AnyPatientActionData::set_has_tensionpneumothorax() {
  _oneof_case_[0] = kTensionPneumothorax;
}
inline void AnyPatientActionData::clear_tensionpneumothorax() {
  if (_internal_has_tensionpneumothorax()) {
    if (GetArena() == nullptr) {
      delete Action_.tensionpneumothorax_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::TensionPneumothoraxData* AnyPatientActionData::release_tensionpneumothorax() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
  if (_internal_has_tensionpneumothorax()) {
    clear_has_Action();
      ::pulse::cdm::bind::TensionPneumothoraxData* temp = Action_.tensionpneumothorax_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.tensionpneumothorax_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::TensionPneumothoraxData& AnyPatientActionData::_internal_tensionpneumothorax() const {
  return _internal_has_tensionpneumothorax()
      ? *Action_.tensionpneumothorax_
      : reinterpret_cast< ::pulse::cdm::bind::TensionPneumothoraxData&>(::pulse::cdm::bind::_TensionPneumothoraxData_default_instance_);
}
inline const ::pulse::cdm::bind::TensionPneumothoraxData& AnyPatientActionData::tensionpneumothorax() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
  return _internal_tensionpneumothorax();
}
inline ::pulse::cdm::bind::TensionPneumothoraxData* AnyPatientActionData::unsafe_arena_release_tensionpneumothorax() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
  if (_internal_has_tensionpneumothorax()) {
    clear_has_Action();
    ::pulse::cdm::bind::TensionPneumothoraxData* temp = Action_.tensionpneumothorax_;
    Action_.tensionpneumothorax_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_tensionpneumothorax(::pulse::cdm::bind::TensionPneumothoraxData* tensionpneumothorax) {
  clear_Action();
  if (tensionpneumothorax) {
    set_has_tensionpneumothorax();
    Action_.tensionpneumothorax_ = tensionpneumothorax;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
}
inline ::pulse::cdm::bind::TensionPneumothoraxData* AnyPatientActionData::_internal_mutable_tensionpneumothorax() {
  if (!_internal_has_tensionpneumothorax()) {
    clear_Action();
    set_has_tensionpneumothorax();
    Action_.tensionpneumothorax_ = CreateMaybeMessage< ::pulse::cdm::bind::TensionPneumothoraxData >(GetArena());
  }
  return Action_.tensionpneumothorax_;
}
inline ::pulse::cdm::bind::TensionPneumothoraxData* AnyPatientActionData::mutable_tensionpneumothorax() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.TensionPneumothorax)
  return _internal_mutable_tensionpneumothorax();
}

// .pulse.cdm.bind.UrinateData Urinate = 31;
inline bool AnyPatientActionData::_internal_has_urinate() const {
  return Action_case() == kUrinate;
}
inline bool AnyPatientActionData::has_urinate() const {
  return _internal_has_urinate();
}
inline void AnyPatientActionData::set_has_urinate() {
  _oneof_case_[0] = kUrinate;
}
inline void AnyPatientActionData::clear_urinate() {
  if (_internal_has_urinate()) {
    if (GetArena() == nullptr) {
      delete Action_.urinate_;
    }
    clear_has_Action();
  }
}
inline ::pulse::cdm::bind::UrinateData* AnyPatientActionData::release_urinate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyPatientActionData.Urinate)
  if (_internal_has_urinate()) {
    clear_has_Action();
      ::pulse::cdm::bind::UrinateData* temp = Action_.urinate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.urinate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::UrinateData& AnyPatientActionData::_internal_urinate() const {
  return _internal_has_urinate()
      ? *Action_.urinate_
      : reinterpret_cast< ::pulse::cdm::bind::UrinateData&>(::pulse::cdm::bind::_UrinateData_default_instance_);
}
inline const ::pulse::cdm::bind::UrinateData& AnyPatientActionData::urinate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyPatientActionData.Urinate)
  return _internal_urinate();
}
inline ::pulse::cdm::bind::UrinateData* AnyPatientActionData::unsafe_arena_release_urinate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyPatientActionData.Urinate)
  if (_internal_has_urinate()) {
    clear_has_Action();
    ::pulse::cdm::bind::UrinateData* temp = Action_.urinate_;
    Action_.urinate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyPatientActionData::unsafe_arena_set_allocated_urinate(::pulse::cdm::bind::UrinateData* urinate) {
  clear_Action();
  if (urinate) {
    set_has_urinate();
    Action_.urinate_ = urinate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyPatientActionData.Urinate)
}
inline ::pulse::cdm::bind::UrinateData* AnyPatientActionData::_internal_mutable_urinate() {
  if (!_internal_has_urinate()) {
    clear_Action();
    set_has_urinate();
    Action_.urinate_ = CreateMaybeMessage< ::pulse::cdm::bind::UrinateData >(GetArena());
  }
  return Action_.urinate_;
}
inline ::pulse::cdm::bind::UrinateData* AnyPatientActionData::mutable_urinate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyPatientActionData.Urinate)
  return _internal_mutable_urinate();
}

inline bool AnyPatientActionData::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
inline void AnyPatientActionData::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline AnyPatientActionData::ActionCase AnyPatientActionData::Action_case() const {
  return AnyPatientActionData::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PatientActionData

// .pulse.cdm.bind.ActionData Action = 1;
inline bool PatientActionData::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool PatientActionData::has_action() const {
  return _internal_has_action();
}
inline const ::pulse::cdm::bind::ActionData& PatientActionData::_internal_action() const {
  const ::pulse::cdm::bind::ActionData* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ActionData&>(
      ::pulse::cdm::bind::_ActionData_default_instance_);
}
inline const ::pulse::cdm::bind::ActionData& PatientActionData::action() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientActionData.Action)
  return _internal_action();
}
inline void PatientActionData::unsafe_arena_set_allocated_action(
    ::pulse::cdm::bind::ActionData* action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PatientActionData.Action)
}
inline ::pulse::cdm::bind::ActionData* PatientActionData::release_action() {
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ActionData* PatientActionData::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientActionData.Action)
  
  ::pulse::cdm::bind::ActionData* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ActionData* PatientActionData::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ActionData>(GetArena());
    action_ = p;
  }
  return action_;
}
inline ::pulse::cdm::bind::ActionData* PatientActionData::mutable_action() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientActionData.Action)
  return _internal_mutable_action();
}
inline void PatientActionData::set_allocated_action(::pulse::cdm::bind::ActionData* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action)->GetArena();
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientActionData.Action)
}

// -------------------------------------------------------------------

// PatientAssessmentRequestData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool PatientAssessmentRequestData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool PatientAssessmentRequestData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void PatientAssessmentRequestData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& PatientAssessmentRequestData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& PatientAssessmentRequestData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientAssessmentRequestData.PatientAction)
  return _internal_patientaction();
}
inline void PatientAssessmentRequestData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PatientAssessmentRequestData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* PatientAssessmentRequestData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PatientAssessmentRequestData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PatientAssessmentRequestData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PatientAssessmentRequestData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* PatientAssessmentRequestData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PatientAssessmentRequestData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void PatientAssessmentRequestData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PatientAssessmentRequestData.PatientAction)
}

// .pulse.cdm.bind.ePatientAssessmentType Type = 2;
inline void PatientAssessmentRequestData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::ePatientAssessmentType PatientAssessmentRequestData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::ePatientAssessmentType >(type_);
}
inline ::pulse::cdm::bind::ePatientAssessmentType PatientAssessmentRequestData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PatientAssessmentRequestData.Type)
  return _internal_type();
}
inline void PatientAssessmentRequestData::_internal_set_type(::pulse::cdm::bind::ePatientAssessmentType value) {
  
  type_ = value;
}
inline void PatientAssessmentRequestData::set_type(::pulse::cdm::bind::ePatientAssessmentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.PatientAssessmentRequestData.Type)
}

// -------------------------------------------------------------------

// AcuteRespiratoryDistressSyndromeExacerbationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& AcuteRespiratoryDistressSyndromeExacerbationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& AcuteRespiratoryDistressSyndromeExacerbationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.PatientAction)
  return _internal_patientaction();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* AcuteRespiratoryDistressSyndromeExacerbationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteRespiratoryDistressSyndromeExacerbationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteRespiratoryDistressSyndromeExacerbationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.Severity)
  return _internal_severity();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.Severity)
  return _internal_mutable_severity();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.Severity)
}

// .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::_internal_has_leftlungaffected() const {
  return this != internal_default_instance() && leftlungaffected_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::has_leftlungaffected() const {
  return _internal_has_leftlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::_internal_leftlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftlungaffected_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::leftlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.LeftLungAffected)
  return _internal_leftlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_set_allocated_leftlungaffected(
    ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  leftlungaffected_ = leftlungaffected;
  if (leftlungaffected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.LeftLungAffected)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::release_leftlungaffected() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_release_leftlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.LeftLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::_internal_mutable_leftlungaffected() {
  
  if (leftlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    leftlungaffected_ = p;
  }
  return leftlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::mutable_leftlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.LeftLungAffected)
  return _internal_mutable_leftlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  if (leftlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected)->GetArena();
    if (message_arena != submessage_arena) {
      leftlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  leftlungaffected_ = leftlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.LeftLungAffected)
}

// .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::_internal_has_rightlungaffected() const {
  return this != internal_default_instance() && rightlungaffected_ != nullptr;
}
inline bool AcuteRespiratoryDistressSyndromeExacerbationData::has_rightlungaffected() const {
  return _internal_has_rightlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::_internal_rightlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightlungaffected_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteRespiratoryDistressSyndromeExacerbationData::rightlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.RightLungAffected)
  return _internal_rightlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_set_allocated_rightlungaffected(
    ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  rightlungaffected_ = rightlungaffected;
  if (rightlungaffected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.RightLungAffected)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::release_rightlungaffected() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::unsafe_arena_release_rightlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.RightLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::_internal_mutable_rightlungaffected() {
  
  if (rightlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    rightlungaffected_ = p;
  }
  return rightlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteRespiratoryDistressSyndromeExacerbationData::mutable_rightlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.RightLungAffected)
  return _internal_mutable_rightlungaffected();
}
inline void AcuteRespiratoryDistressSyndromeExacerbationData::set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  if (rightlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected)->GetArena();
    if (message_arena != submessage_arena) {
      rightlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  rightlungaffected_ = rightlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeExacerbationData.RightLungAffected)
}

// -------------------------------------------------------------------

// AcuteStressData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool AcuteStressData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool AcuteStressData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void AcuteStressData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& AcuteStressData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& AcuteStressData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteStressData.PatientAction)
  return _internal_patientaction();
}
inline void AcuteStressData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteStressData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* AcuteStressData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteStressData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteStressData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteStressData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* AcuteStressData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteStressData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void AcuteStressData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteStressData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AcuteStressData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AcuteStressData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteStressData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AcuteStressData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AcuteStressData.Severity)
  return _internal_severity();
}
inline void AcuteStressData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AcuteStressData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteStressData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteStressData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AcuteStressData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteStressData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AcuteStressData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AcuteStressData.Severity)
  return _internal_mutable_severity();
}
inline void AcuteStressData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AcuteStressData.Severity)
}

// -------------------------------------------------------------------

// AirwayObstructionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool AirwayObstructionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool AirwayObstructionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void AirwayObstructionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& AirwayObstructionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& AirwayObstructionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AirwayObstructionData.PatientAction)
  return _internal_patientaction();
}
inline void AirwayObstructionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AirwayObstructionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* AirwayObstructionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AirwayObstructionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AirwayObstructionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AirwayObstructionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* AirwayObstructionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AirwayObstructionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void AirwayObstructionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AirwayObstructionData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AirwayObstructionData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AirwayObstructionData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AirwayObstructionData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AirwayObstructionData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AirwayObstructionData.Severity)
  return _internal_severity();
}
inline void AirwayObstructionData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AirwayObstructionData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AirwayObstructionData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AirwayObstructionData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AirwayObstructionData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AirwayObstructionData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AirwayObstructionData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AirwayObstructionData.Severity)
  return _internal_mutable_severity();
}
inline void AirwayObstructionData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AirwayObstructionData.Severity)
}

// -------------------------------------------------------------------

// AsthmaAttackData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool AsthmaAttackData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool AsthmaAttackData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void AsthmaAttackData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& AsthmaAttackData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& AsthmaAttackData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AsthmaAttackData.PatientAction)
  return _internal_patientaction();
}
inline void AsthmaAttackData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AsthmaAttackData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* AsthmaAttackData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AsthmaAttackData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AsthmaAttackData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* AsthmaAttackData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* AsthmaAttackData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AsthmaAttackData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void AsthmaAttackData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AsthmaAttackData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool AsthmaAttackData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool AsthmaAttackData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AsthmaAttackData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AsthmaAttackData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AsthmaAttackData.Severity)
  return _internal_severity();
}
inline void AsthmaAttackData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AsthmaAttackData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AsthmaAttackData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AsthmaAttackData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AsthmaAttackData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AsthmaAttackData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AsthmaAttackData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AsthmaAttackData.Severity)
  return _internal_mutable_severity();
}
inline void AsthmaAttackData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AsthmaAttackData.Severity)
}

// -------------------------------------------------------------------

// BrainInjuryData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool BrainInjuryData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool BrainInjuryData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void BrainInjuryData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& BrainInjuryData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& BrainInjuryData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BrainInjuryData.PatientAction)
  return _internal_patientaction();
}
inline void BrainInjuryData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BrainInjuryData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* BrainInjuryData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* BrainInjuryData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BrainInjuryData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* BrainInjuryData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* BrainInjuryData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BrainInjuryData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void BrainInjuryData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BrainInjuryData.PatientAction)
}

// .pulse.cdm.bind.BrainInjuryData.eType Type = 2;
inline void BrainInjuryData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::BrainInjuryData_eType BrainInjuryData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::BrainInjuryData_eType >(type_);
}
inline ::pulse::cdm::bind::BrainInjuryData_eType BrainInjuryData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BrainInjuryData.Type)
  return _internal_type();
}
inline void BrainInjuryData::_internal_set_type(::pulse::cdm::bind::BrainInjuryData_eType value) {
  
  type_ = value;
}
inline void BrainInjuryData::set_type(::pulse::cdm::bind::BrainInjuryData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.BrainInjuryData.Type)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 3;
inline bool BrainInjuryData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool BrainInjuryData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BrainInjuryData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BrainInjuryData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BrainInjuryData.Severity)
  return _internal_severity();
}
inline void BrainInjuryData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BrainInjuryData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BrainInjuryData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BrainInjuryData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BrainInjuryData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BrainInjuryData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BrainInjuryData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BrainInjuryData.Severity)
  return _internal_mutable_severity();
}
inline void BrainInjuryData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BrainInjuryData.Severity)
}

// -------------------------------------------------------------------

// BronchoconstrictionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool BronchoconstrictionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool BronchoconstrictionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void BronchoconstrictionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& BronchoconstrictionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& BronchoconstrictionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BronchoconstrictionData.PatientAction)
  return _internal_patientaction();
}
inline void BronchoconstrictionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BronchoconstrictionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* BronchoconstrictionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* BronchoconstrictionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BronchoconstrictionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* BronchoconstrictionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* BronchoconstrictionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BronchoconstrictionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void BronchoconstrictionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BronchoconstrictionData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool BronchoconstrictionData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool BronchoconstrictionData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BronchoconstrictionData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& BronchoconstrictionData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.BronchoconstrictionData.Severity)
  return _internal_severity();
}
inline void BronchoconstrictionData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.BronchoconstrictionData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* BronchoconstrictionData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BronchoconstrictionData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.BronchoconstrictionData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BronchoconstrictionData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* BronchoconstrictionData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.BronchoconstrictionData.Severity)
  return _internal_mutable_severity();
}
inline void BronchoconstrictionData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.BronchoconstrictionData.Severity)
}

// -------------------------------------------------------------------

// CardiacArrestData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool CardiacArrestData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool CardiacArrestData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void CardiacArrestData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& CardiacArrestData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& CardiacArrestData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiacArrestData.PatientAction)
  return _internal_patientaction();
}
inline void CardiacArrestData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.CardiacArrestData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* CardiacArrestData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* CardiacArrestData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.CardiacArrestData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* CardiacArrestData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* CardiacArrestData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.CardiacArrestData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void CardiacArrestData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.CardiacArrestData.PatientAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void CardiacArrestData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch CardiacArrestData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch CardiacArrestData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.CardiacArrestData.State)
  return _internal_state();
}
inline void CardiacArrestData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void CardiacArrestData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.CardiacArrestData.State)
}

// -------------------------------------------------------------------

// ChestCompressionForceData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ChestCompressionForceData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ChestCompressionForceData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ChestCompressionForceData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ChestCompressionForceData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ChestCompressionForceData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestCompressionForceData.PatientAction)
  return _internal_patientaction();
}
inline void ChestCompressionForceData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestCompressionForceData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestCompressionForceData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestCompressionForceData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ChestCompressionForceData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestCompressionForceData.PatientAction)
}

// .pulse.cdm.bind.ScalarForceData Force = 2;
inline bool ChestCompressionForceData::_internal_has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline bool ChestCompressionForceData::has_force() const {
  return _internal_has_force();
}
inline const ::pulse::cdm::bind::ScalarForceData& ChestCompressionForceData::_internal_force() const {
  const ::pulse::cdm::bind::ScalarForceData* p = force_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarForceData&>(
      ::pulse::cdm::bind::_ScalarForceData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarForceData& ChestCompressionForceData::force() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestCompressionForceData.Force)
  return _internal_force();
}
inline void ChestCompressionForceData::unsafe_arena_set_allocated_force(
    ::pulse::cdm::bind::ScalarForceData* force) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestCompressionForceData.Force)
}
inline ::pulse::cdm::bind::ScalarForceData* ChestCompressionForceData::release_force() {
  
  ::pulse::cdm::bind::ScalarForceData* temp = force_;
  force_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarForceData* ChestCompressionForceData::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestCompressionForceData.Force)
  
  ::pulse::cdm::bind::ScalarForceData* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarForceData* ChestCompressionForceData::_internal_mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarForceData>(GetArena());
    force_ = p;
  }
  return force_;
}
inline ::pulse::cdm::bind::ScalarForceData* ChestCompressionForceData::mutable_force() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestCompressionForceData.Force)
  return _internal_mutable_force();
}
inline void ChestCompressionForceData::set_allocated_force(::pulse::cdm::bind::ScalarForceData* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force)->GetArena();
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestCompressionForceData.Force)
}

// -------------------------------------------------------------------

// ChestCompressionForceScaleData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ChestCompressionForceScaleData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ChestCompressionForceScaleData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ChestCompressionForceScaleData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ChestCompressionForceScaleData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ChestCompressionForceScaleData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestCompressionForceScaleData.PatientAction)
  return _internal_patientaction();
}
inline void ChestCompressionForceScaleData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceScaleData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceScaleData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestCompressionForceScaleData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceScaleData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ChestCompressionForceScaleData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestCompressionForceScaleData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ChestCompressionForceScaleData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data ForceScale = 2;
inline bool ChestCompressionForceScaleData::_internal_has_forcescale() const {
  return this != internal_default_instance() && forcescale_ != nullptr;
}
inline bool ChestCompressionForceScaleData::has_forcescale() const {
  return _internal_has_forcescale();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChestCompressionForceScaleData::_internal_forcescale() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = forcescale_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChestCompressionForceScaleData::forcescale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestCompressionForceScaleData.ForceScale)
  return _internal_forcescale();
}
inline void ChestCompressionForceScaleData::unsafe_arena_set_allocated_forcescale(
    ::pulse::cdm::bind::Scalar0To1Data* forcescale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcescale_);
  }
  forcescale_ = forcescale;
  if (forcescale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.ForceScale)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChestCompressionForceScaleData::release_forcescale() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = forcescale_;
  forcescale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChestCompressionForceScaleData::unsafe_arena_release_forcescale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestCompressionForceScaleData.ForceScale)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = forcescale_;
  forcescale_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChestCompressionForceScaleData::_internal_mutable_forcescale() {
  
  if (forcescale_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    forcescale_ = p;
  }
  return forcescale_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChestCompressionForceScaleData::mutable_forcescale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestCompressionForceScaleData.ForceScale)
  return _internal_mutable_forcescale();
}
inline void ChestCompressionForceScaleData::set_allocated_forcescale(::pulse::cdm::bind::Scalar0To1Data* forcescale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcescale_);
  }
  if (forcescale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forcescale)->GetArena();
    if (message_arena != submessage_arena) {
      forcescale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forcescale, submessage_arena);
    }
    
  } else {
    
  }
  forcescale_ = forcescale;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.ForceScale)
}

// .pulse.cdm.bind.ScalarTimeData ForcePeriod = 3;
inline bool ChestCompressionForceScaleData::_internal_has_forceperiod() const {
  return this != internal_default_instance() && forceperiod_ != nullptr;
}
inline bool ChestCompressionForceScaleData::has_forceperiod() const {
  return _internal_has_forceperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ChestCompressionForceScaleData::_internal_forceperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = forceperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ChestCompressionForceScaleData::forceperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestCompressionForceScaleData.ForcePeriod)
  return _internal_forceperiod();
}
inline void ChestCompressionForceScaleData::unsafe_arena_set_allocated_forceperiod(
    ::pulse::cdm::bind::ScalarTimeData* forceperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forceperiod_);
  }
  forceperiod_ = forceperiod;
  if (forceperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.ForcePeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ChestCompressionForceScaleData::release_forceperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = forceperiod_;
  forceperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ChestCompressionForceScaleData::unsafe_arena_release_forceperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestCompressionForceScaleData.ForcePeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = forceperiod_;
  forceperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ChestCompressionForceScaleData::_internal_mutable_forceperiod() {
  
  if (forceperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    forceperiod_ = p;
  }
  return forceperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ChestCompressionForceScaleData::mutable_forceperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestCompressionForceScaleData.ForcePeriod)
  return _internal_mutable_forceperiod();
}
inline void ChestCompressionForceScaleData::set_allocated_forceperiod(::pulse::cdm::bind::ScalarTimeData* forceperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forceperiod_);
  }
  if (forceperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forceperiod)->GetArena();
    if (message_arena != submessage_arena) {
      forceperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forceperiod, submessage_arena);
    }
    
  } else {
    
  }
  forceperiod_ = forceperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestCompressionForceScaleData.ForcePeriod)
}

// -------------------------------------------------------------------

// ChestOcclusiveDressingData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ChestOcclusiveDressingData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ChestOcclusiveDressingData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ChestOcclusiveDressingData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ChestOcclusiveDressingData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ChestOcclusiveDressingData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestOcclusiveDressingData.PatientAction)
  return _internal_patientaction();
}
inline void ChestOcclusiveDressingData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChestOcclusiveDressingData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ChestOcclusiveDressingData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestOcclusiveDressingData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChestOcclusiveDressingData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChestOcclusiveDressingData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ChestOcclusiveDressingData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChestOcclusiveDressingData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ChestOcclusiveDressingData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChestOcclusiveDressingData.PatientAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void ChestOcclusiveDressingData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch ChestOcclusiveDressingData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch ChestOcclusiveDressingData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestOcclusiveDressingData.State)
  return _internal_state();
}
inline void ChestOcclusiveDressingData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void ChestOcclusiveDressingData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ChestOcclusiveDressingData.State)
}

// .pulse.cdm.bind.eSide Side = 3;
inline void ChestOcclusiveDressingData::clear_side() {
  side_ = 0;
}
inline ::pulse::cdm::bind::eSide ChestOcclusiveDressingData::_internal_side() const {
  return static_cast< ::pulse::cdm::bind::eSide >(side_);
}
inline ::pulse::cdm::bind::eSide ChestOcclusiveDressingData::side() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChestOcclusiveDressingData.Side)
  return _internal_side();
}
inline void ChestOcclusiveDressingData::_internal_set_side(::pulse::cdm::bind::eSide value) {
  
  side_ = value;
}
inline void ChestOcclusiveDressingData::set_side(::pulse::cdm::bind::eSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ChestOcclusiveDressingData.Side)
}

// -------------------------------------------------------------------

// ChronicObstructivePulmonaryDiseaseExacerbationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ChronicObstructivePulmonaryDiseaseExacerbationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.PatientAction)
  return _internal_patientaction();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ChronicObstructivePulmonaryDiseaseExacerbationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ChronicObstructivePulmonaryDiseaseExacerbationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_has_bronchitisseverity() const {
  return this != internal_default_instance() && bronchitisseverity_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::has_bronchitisseverity() const {
  return _internal_has_bronchitisseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_bronchitisseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = bronchitisseverity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseExacerbationData::bronchitisseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.BronchitisSeverity)
  return _internal_bronchitisseverity();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_set_allocated_bronchitisseverity(
    ::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchitisseverity_);
  }
  bronchitisseverity_ = bronchitisseverity;
  if (bronchitisseverity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.BronchitisSeverity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::release_bronchitisseverity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = bronchitisseverity_;
  bronchitisseverity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_release_bronchitisseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.BronchitisSeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = bronchitisseverity_;
  bronchitisseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_mutable_bronchitisseverity() {
  
  if (bronchitisseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    bronchitisseverity_ = p;
  }
  return bronchitisseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::mutable_bronchitisseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.BronchitisSeverity)
  return _internal_mutable_bronchitisseverity();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::set_allocated_bronchitisseverity(::pulse::cdm::bind::Scalar0To1Data* bronchitisseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchitisseverity_);
  }
  if (bronchitisseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bronchitisseverity)->GetArena();
    if (message_arena != submessage_arena) {
      bronchitisseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bronchitisseverity, submessage_arena);
    }
    
  } else {
    
  }
  bronchitisseverity_ = bronchitisseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.BronchitisSeverity)
}

// .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_has_emphysemaseverity() const {
  return this != internal_default_instance() && emphysemaseverity_ != nullptr;
}
inline bool ChronicObstructivePulmonaryDiseaseExacerbationData::has_emphysemaseverity() const {
  return _internal_has_emphysemaseverity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_emphysemaseverity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = emphysemaseverity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ChronicObstructivePulmonaryDiseaseExacerbationData::emphysemaseverity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.EmphysemaSeverity)
  return _internal_emphysemaseverity();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_set_allocated_emphysemaseverity(
    ::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emphysemaseverity_);
  }
  emphysemaseverity_ = emphysemaseverity;
  if (emphysemaseverity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.EmphysemaSeverity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::release_emphysemaseverity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = emphysemaseverity_;
  emphysemaseverity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::unsafe_arena_release_emphysemaseverity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.EmphysemaSeverity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = emphysemaseverity_;
  emphysemaseverity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::_internal_mutable_emphysemaseverity() {
  
  if (emphysemaseverity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    emphysemaseverity_ = p;
  }
  return emphysemaseverity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ChronicObstructivePulmonaryDiseaseExacerbationData::mutable_emphysemaseverity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.EmphysemaSeverity)
  return _internal_mutable_emphysemaseverity();
}
inline void ChronicObstructivePulmonaryDiseaseExacerbationData::set_allocated_emphysemaseverity(::pulse::cdm::bind::Scalar0To1Data* emphysemaseverity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emphysemaseverity_);
  }
  if (emphysemaseverity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emphysemaseverity)->GetArena();
    if (message_arena != submessage_arena) {
      emphysemaseverity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emphysemaseverity, submessage_arena);
    }
    
  } else {
    
  }
  emphysemaseverity_ = emphysemaseverity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseExacerbationData.EmphysemaSeverity)
}

// -------------------------------------------------------------------

// DyspneaData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool DyspneaData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool DyspneaData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void DyspneaData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& DyspneaData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& DyspneaData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DyspneaData.PatientAction)
  return _internal_patientaction();
}
inline void DyspneaData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DyspneaData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* DyspneaData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* DyspneaData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DyspneaData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* DyspneaData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* DyspneaData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DyspneaData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void DyspneaData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DyspneaData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool DyspneaData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool DyspneaData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DyspneaData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& DyspneaData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.DyspneaData.Severity)
  return _internal_severity();
}
inline void DyspneaData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.DyspneaData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* DyspneaData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DyspneaData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.DyspneaData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DyspneaData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* DyspneaData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.DyspneaData.Severity)
  return _internal_mutable_severity();
}
inline void DyspneaData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.DyspneaData.Severity)
}

// -------------------------------------------------------------------

// ForcedInhaleData

// .pulse.cdm.bind.Scalar0To1Data InspiratoryCapacityFraction = 1;
inline bool ForcedInhaleData::_internal_has_inspiratorycapacityfraction() const {
  return this != internal_default_instance() && inspiratorycapacityfraction_ != nullptr;
}
inline bool ForcedInhaleData::has_inspiratorycapacityfraction() const {
  return _internal_has_inspiratorycapacityfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ForcedInhaleData::_internal_inspiratorycapacityfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = inspiratorycapacityfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ForcedInhaleData::inspiratorycapacityfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedInhaleData.InspiratoryCapacityFraction)
  return _internal_inspiratorycapacityfraction();
}
inline void ForcedInhaleData::unsafe_arena_set_allocated_inspiratorycapacityfraction(
    ::pulse::cdm::bind::Scalar0To1Data* inspiratorycapacityfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacityfraction_);
  }
  inspiratorycapacityfraction_ = inspiratorycapacityfraction;
  if (inspiratorycapacityfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedInhaleData.InspiratoryCapacityFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedInhaleData::release_inspiratorycapacityfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = inspiratorycapacityfraction_;
  inspiratorycapacityfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedInhaleData::unsafe_arena_release_inspiratorycapacityfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedInhaleData.InspiratoryCapacityFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = inspiratorycapacityfraction_;
  inspiratorycapacityfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedInhaleData::_internal_mutable_inspiratorycapacityfraction() {
  
  if (inspiratorycapacityfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    inspiratorycapacityfraction_ = p;
  }
  return inspiratorycapacityfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedInhaleData::mutable_inspiratorycapacityfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedInhaleData.InspiratoryCapacityFraction)
  return _internal_mutable_inspiratorycapacityfraction();
}
inline void ForcedInhaleData::set_allocated_inspiratorycapacityfraction(::pulse::cdm::bind::Scalar0To1Data* inspiratorycapacityfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacityfraction_);
  }
  if (inspiratorycapacityfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratorycapacityfraction)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratorycapacityfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratorycapacityfraction, submessage_arena);
    }
    
  } else {
    
  }
  inspiratorycapacityfraction_ = inspiratorycapacityfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedInhaleData.InspiratoryCapacityFraction)
}

// .pulse.cdm.bind.ScalarTimeData InhalePeriod = 2;
inline bool ForcedInhaleData::_internal_has_inhaleperiod() const {
  return this != internal_default_instance() && inhaleperiod_ != nullptr;
}
inline bool ForcedInhaleData::has_inhaleperiod() const {
  return _internal_has_inhaleperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::_internal_inhaleperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = inhaleperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::inhaleperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedInhaleData.InhalePeriod)
  return _internal_inhaleperiod();
}
inline void ForcedInhaleData::unsafe_arena_set_allocated_inhaleperiod(
    ::pulse::cdm::bind::ScalarTimeData* inhaleperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inhaleperiod_);
  }
  inhaleperiod_ = inhaleperiod;
  if (inhaleperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedInhaleData.InhalePeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::release_inhaleperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = inhaleperiod_;
  inhaleperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::unsafe_arena_release_inhaleperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedInhaleData.InhalePeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = inhaleperiod_;
  inhaleperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::_internal_mutable_inhaleperiod() {
  
  if (inhaleperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    inhaleperiod_ = p;
  }
  return inhaleperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::mutable_inhaleperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedInhaleData.InhalePeriod)
  return _internal_mutable_inhaleperiod();
}
inline void ForcedInhaleData::set_allocated_inhaleperiod(::pulse::cdm::bind::ScalarTimeData* inhaleperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inhaleperiod_);
  }
  if (inhaleperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inhaleperiod)->GetArena();
    if (message_arena != submessage_arena) {
      inhaleperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inhaleperiod, submessage_arena);
    }
    
  } else {
    
  }
  inhaleperiod_ = inhaleperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedInhaleData.InhalePeriod)
}

// .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
inline bool ForcedInhaleData::_internal_has_holdperiod() const {
  return this != internal_default_instance() && holdperiod_ != nullptr;
}
inline bool ForcedInhaleData::has_holdperiod() const {
  return _internal_has_holdperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::_internal_holdperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = holdperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::holdperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedInhaleData.HoldPeriod)
  return _internal_holdperiod();
}
inline void ForcedInhaleData::unsafe_arena_set_allocated_holdperiod(
    ::pulse::cdm::bind::ScalarTimeData* holdperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod_);
  }
  holdperiod_ = holdperiod;
  if (holdperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedInhaleData.HoldPeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::release_holdperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = holdperiod_;
  holdperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::unsafe_arena_release_holdperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedInhaleData.HoldPeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = holdperiod_;
  holdperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::_internal_mutable_holdperiod() {
  
  if (holdperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    holdperiod_ = p;
  }
  return holdperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::mutable_holdperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedInhaleData.HoldPeriod)
  return _internal_mutable_holdperiod();
}
inline void ForcedInhaleData::set_allocated_holdperiod(::pulse::cdm::bind::ScalarTimeData* holdperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod_);
  }
  if (holdperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod)->GetArena();
    if (message_arena != submessage_arena) {
      holdperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holdperiod, submessage_arena);
    }
    
  } else {
    
  }
  holdperiod_ = holdperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedInhaleData.HoldPeriod)
}

// .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
inline bool ForcedInhaleData::_internal_has_releaseperiod() const {
  return this != internal_default_instance() && releaseperiod_ != nullptr;
}
inline bool ForcedInhaleData::has_releaseperiod() const {
  return _internal_has_releaseperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::_internal_releaseperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = releaseperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedInhaleData::releaseperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedInhaleData.ReleasePeriod)
  return _internal_releaseperiod();
}
inline void ForcedInhaleData::unsafe_arena_set_allocated_releaseperiod(
    ::pulse::cdm::bind::ScalarTimeData* releaseperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod_);
  }
  releaseperiod_ = releaseperiod;
  if (releaseperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedInhaleData.ReleasePeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::release_releaseperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = releaseperiod_;
  releaseperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::unsafe_arena_release_releaseperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedInhaleData.ReleasePeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = releaseperiod_;
  releaseperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::_internal_mutable_releaseperiod() {
  
  if (releaseperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    releaseperiod_ = p;
  }
  return releaseperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedInhaleData::mutable_releaseperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedInhaleData.ReleasePeriod)
  return _internal_mutable_releaseperiod();
}
inline void ForcedInhaleData::set_allocated_releaseperiod(::pulse::cdm::bind::ScalarTimeData* releaseperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod_);
  }
  if (releaseperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod)->GetArena();
    if (message_arena != submessage_arena) {
      releaseperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, releaseperiod, submessage_arena);
    }
    
  } else {
    
  }
  releaseperiod_ = releaseperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedInhaleData.ReleasePeriod)
}

// -------------------------------------------------------------------

// ForcedExhaleData

// .pulse.cdm.bind.Scalar0To1Data ExpiratoryReserveVolumeFraction = 1;
inline bool ForcedExhaleData::_internal_has_expiratoryreservevolumefraction() const {
  return this != internal_default_instance() && expiratoryreservevolumefraction_ != nullptr;
}
inline bool ForcedExhaleData::has_expiratoryreservevolumefraction() const {
  return _internal_has_expiratoryreservevolumefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ForcedExhaleData::_internal_expiratoryreservevolumefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = expiratoryreservevolumefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ForcedExhaleData::expiratoryreservevolumefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedExhaleData.ExpiratoryReserveVolumeFraction)
  return _internal_expiratoryreservevolumefraction();
}
inline void ForcedExhaleData::unsafe_arena_set_allocated_expiratoryreservevolumefraction(
    ::pulse::cdm::bind::Scalar0To1Data* expiratoryreservevolumefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolumefraction_);
  }
  expiratoryreservevolumefraction_ = expiratoryreservevolumefraction;
  if (expiratoryreservevolumefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedExhaleData.ExpiratoryReserveVolumeFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedExhaleData::release_expiratoryreservevolumefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = expiratoryreservevolumefraction_;
  expiratoryreservevolumefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedExhaleData::unsafe_arena_release_expiratoryreservevolumefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedExhaleData.ExpiratoryReserveVolumeFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = expiratoryreservevolumefraction_;
  expiratoryreservevolumefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedExhaleData::_internal_mutable_expiratoryreservevolumefraction() {
  
  if (expiratoryreservevolumefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    expiratoryreservevolumefraction_ = p;
  }
  return expiratoryreservevolumefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ForcedExhaleData::mutable_expiratoryreservevolumefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedExhaleData.ExpiratoryReserveVolumeFraction)
  return _internal_mutable_expiratoryreservevolumefraction();
}
inline void ForcedExhaleData::set_allocated_expiratoryreservevolumefraction(::pulse::cdm::bind::Scalar0To1Data* expiratoryreservevolumefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolumefraction_);
  }
  if (expiratoryreservevolumefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiratoryreservevolumefraction)->GetArena();
    if (message_arena != submessage_arena) {
      expiratoryreservevolumefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiratoryreservevolumefraction, submessage_arena);
    }
    
  } else {
    
  }
  expiratoryreservevolumefraction_ = expiratoryreservevolumefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedExhaleData.ExpiratoryReserveVolumeFraction)
}

// .pulse.cdm.bind.ScalarTimeData ExhalePeriod = 2;
inline bool ForcedExhaleData::_internal_has_exhaleperiod() const {
  return this != internal_default_instance() && exhaleperiod_ != nullptr;
}
inline bool ForcedExhaleData::has_exhaleperiod() const {
  return _internal_has_exhaleperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::_internal_exhaleperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = exhaleperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::exhaleperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedExhaleData.ExhalePeriod)
  return _internal_exhaleperiod();
}
inline void ForcedExhaleData::unsafe_arena_set_allocated_exhaleperiod(
    ::pulse::cdm::bind::ScalarTimeData* exhaleperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exhaleperiod_);
  }
  exhaleperiod_ = exhaleperiod;
  if (exhaleperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedExhaleData.ExhalePeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::release_exhaleperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = exhaleperiod_;
  exhaleperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::unsafe_arena_release_exhaleperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedExhaleData.ExhalePeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = exhaleperiod_;
  exhaleperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::_internal_mutable_exhaleperiod() {
  
  if (exhaleperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    exhaleperiod_ = p;
  }
  return exhaleperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::mutable_exhaleperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedExhaleData.ExhalePeriod)
  return _internal_mutable_exhaleperiod();
}
inline void ForcedExhaleData::set_allocated_exhaleperiod(::pulse::cdm::bind::ScalarTimeData* exhaleperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exhaleperiod_);
  }
  if (exhaleperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exhaleperiod)->GetArena();
    if (message_arena != submessage_arena) {
      exhaleperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exhaleperiod, submessage_arena);
    }
    
  } else {
    
  }
  exhaleperiod_ = exhaleperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedExhaleData.ExhalePeriod)
}

// .pulse.cdm.bind.ScalarTimeData HoldPeriod = 3;
inline bool ForcedExhaleData::_internal_has_holdperiod() const {
  return this != internal_default_instance() && holdperiod_ != nullptr;
}
inline bool ForcedExhaleData::has_holdperiod() const {
  return _internal_has_holdperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::_internal_holdperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = holdperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::holdperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedExhaleData.HoldPeriod)
  return _internal_holdperiod();
}
inline void ForcedExhaleData::unsafe_arena_set_allocated_holdperiod(
    ::pulse::cdm::bind::ScalarTimeData* holdperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod_);
  }
  holdperiod_ = holdperiod;
  if (holdperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedExhaleData.HoldPeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::release_holdperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = holdperiod_;
  holdperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::unsafe_arena_release_holdperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedExhaleData.HoldPeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = holdperiod_;
  holdperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::_internal_mutable_holdperiod() {
  
  if (holdperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    holdperiod_ = p;
  }
  return holdperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::mutable_holdperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedExhaleData.HoldPeriod)
  return _internal_mutable_holdperiod();
}
inline void ForcedExhaleData::set_allocated_holdperiod(::pulse::cdm::bind::ScalarTimeData* holdperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod_);
  }
  if (holdperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(holdperiod)->GetArena();
    if (message_arena != submessage_arena) {
      holdperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holdperiod, submessage_arena);
    }
    
  } else {
    
  }
  holdperiod_ = holdperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedExhaleData.HoldPeriod)
}

// .pulse.cdm.bind.ScalarTimeData ReleasePeriod = 4;
inline bool ForcedExhaleData::_internal_has_releaseperiod() const {
  return this != internal_default_instance() && releaseperiod_ != nullptr;
}
inline bool ForcedExhaleData::has_releaseperiod() const {
  return _internal_has_releaseperiod();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::_internal_releaseperiod() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = releaseperiod_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedExhaleData::releaseperiod() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedExhaleData.ReleasePeriod)
  return _internal_releaseperiod();
}
inline void ForcedExhaleData::unsafe_arena_set_allocated_releaseperiod(
    ::pulse::cdm::bind::ScalarTimeData* releaseperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod_);
  }
  releaseperiod_ = releaseperiod;
  if (releaseperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedExhaleData.ReleasePeriod)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::release_releaseperiod() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = releaseperiod_;
  releaseperiod_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::unsafe_arena_release_releaseperiod() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedExhaleData.ReleasePeriod)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = releaseperiod_;
  releaseperiod_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::_internal_mutable_releaseperiod() {
  
  if (releaseperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    releaseperiod_ = p;
  }
  return releaseperiod_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedExhaleData::mutable_releaseperiod() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedExhaleData.ReleasePeriod)
  return _internal_mutable_releaseperiod();
}
inline void ForcedExhaleData::set_allocated_releaseperiod(::pulse::cdm::bind::ScalarTimeData* releaseperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod_);
  }
  if (releaseperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(releaseperiod)->GetArena();
    if (message_arena != submessage_arena) {
      releaseperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, releaseperiod, submessage_arena);
    }
    
  } else {
    
  }
  releaseperiod_ = releaseperiod;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedExhaleData.ReleasePeriod)
}

// -------------------------------------------------------------------

// ForcedPauseData

// .pulse.cdm.bind.ScalarTimeData Period = 1;
inline bool ForcedPauseData::_internal_has_period() const {
  return this != internal_default_instance() && period_ != nullptr;
}
inline bool ForcedPauseData::has_period() const {
  return _internal_has_period();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedPauseData::_internal_period() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = period_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ForcedPauseData::period() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ForcedPauseData.Period)
  return _internal_period();
}
inline void ForcedPauseData::unsafe_arena_set_allocated_period(
    ::pulse::cdm::bind::ScalarTimeData* period) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_);
  }
  period_ = period;
  if (period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ForcedPauseData.Period)
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedPauseData::release_period() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = period_;
  period_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedPauseData::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ForcedPauseData.Period)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = period_;
  period_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedPauseData::_internal_mutable_period() {
  
  if (period_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    period_ = p;
  }
  return period_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ForcedPauseData::mutable_period() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ForcedPauseData.Period)
  return _internal_mutable_period();
}
inline void ForcedPauseData::set_allocated_period(::pulse::cdm::bind::ScalarTimeData* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_);
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period)->GetArena();
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ForcedPauseData.Period)
}

// -------------------------------------------------------------------

// UseInhalerData

// -------------------------------------------------------------------

// AnyConsciousRespirationCommandData

// string Comment = 1;
inline void AnyConsciousRespirationCommandData::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& AnyConsciousRespirationCommandData::comment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
  return _internal_comment();
}
inline void AnyConsciousRespirationCommandData::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
}
inline std::string* AnyConsciousRespirationCommandData::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
  return _internal_mutable_comment();
}
inline const std::string& AnyConsciousRespirationCommandData::_internal_comment() const {
  return comment_.Get();
}
inline void AnyConsciousRespirationCommandData::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnyConsciousRespirationCommandData::set_comment(std::string&& value) {
  
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
}
inline void AnyConsciousRespirationCommandData::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
}
inline void AnyConsciousRespirationCommandData::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
}
inline std::string* AnyConsciousRespirationCommandData::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnyConsciousRespirationCommandData::release_comment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnyConsciousRespirationCommandData::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.Comment)
}

// .pulse.cdm.bind.ForcedInhaleData ForcedInhale = 2;
inline bool AnyConsciousRespirationCommandData::_internal_has_forcedinhale() const {
  return Command_case() == kForcedInhale;
}
inline bool AnyConsciousRespirationCommandData::has_forcedinhale() const {
  return _internal_has_forcedinhale();
}
inline void AnyConsciousRespirationCommandData::set_has_forcedinhale() {
  _oneof_case_[0] = kForcedInhale;
}
inline void AnyConsciousRespirationCommandData::clear_forcedinhale() {
  if (_internal_has_forcedinhale()) {
    if (GetArena() == nullptr) {
      delete Command_.forcedinhale_;
    }
    clear_has_Command();
  }
}
inline ::pulse::cdm::bind::ForcedInhaleData* AnyConsciousRespirationCommandData::release_forcedinhale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
  if (_internal_has_forcedinhale()) {
    clear_has_Command();
      ::pulse::cdm::bind::ForcedInhaleData* temp = Command_.forcedinhale_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.forcedinhale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ForcedInhaleData& AnyConsciousRespirationCommandData::_internal_forcedinhale() const {
  return _internal_has_forcedinhale()
      ? *Command_.forcedinhale_
      : reinterpret_cast< ::pulse::cdm::bind::ForcedInhaleData&>(::pulse::cdm::bind::_ForcedInhaleData_default_instance_);
}
inline const ::pulse::cdm::bind::ForcedInhaleData& AnyConsciousRespirationCommandData::forcedinhale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
  return _internal_forcedinhale();
}
inline ::pulse::cdm::bind::ForcedInhaleData* AnyConsciousRespirationCommandData::unsafe_arena_release_forcedinhale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
  if (_internal_has_forcedinhale()) {
    clear_has_Command();
    ::pulse::cdm::bind::ForcedInhaleData* temp = Command_.forcedinhale_;
    Command_.forcedinhale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConsciousRespirationCommandData::unsafe_arena_set_allocated_forcedinhale(::pulse::cdm::bind::ForcedInhaleData* forcedinhale) {
  clear_Command();
  if (forcedinhale) {
    set_has_forcedinhale();
    Command_.forcedinhale_ = forcedinhale;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
}
inline ::pulse::cdm::bind::ForcedInhaleData* AnyConsciousRespirationCommandData::_internal_mutable_forcedinhale() {
  if (!_internal_has_forcedinhale()) {
    clear_Command();
    set_has_forcedinhale();
    Command_.forcedinhale_ = CreateMaybeMessage< ::pulse::cdm::bind::ForcedInhaleData >(GetArena());
  }
  return Command_.forcedinhale_;
}
inline ::pulse::cdm::bind::ForcedInhaleData* AnyConsciousRespirationCommandData::mutable_forcedinhale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedInhale)
  return _internal_mutable_forcedinhale();
}

// .pulse.cdm.bind.ForcedExhaleData ForcedExhale = 3;
inline bool AnyConsciousRespirationCommandData::_internal_has_forcedexhale() const {
  return Command_case() == kForcedExhale;
}
inline bool AnyConsciousRespirationCommandData::has_forcedexhale() const {
  return _internal_has_forcedexhale();
}
inline void AnyConsciousRespirationCommandData::set_has_forcedexhale() {
  _oneof_case_[0] = kForcedExhale;
}
inline void AnyConsciousRespirationCommandData::clear_forcedexhale() {
  if (_internal_has_forcedexhale()) {
    if (GetArena() == nullptr) {
      delete Command_.forcedexhale_;
    }
    clear_has_Command();
  }
}
inline ::pulse::cdm::bind::ForcedExhaleData* AnyConsciousRespirationCommandData::release_forcedexhale() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
  if (_internal_has_forcedexhale()) {
    clear_has_Command();
      ::pulse::cdm::bind::ForcedExhaleData* temp = Command_.forcedexhale_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.forcedexhale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ForcedExhaleData& AnyConsciousRespirationCommandData::_internal_forcedexhale() const {
  return _internal_has_forcedexhale()
      ? *Command_.forcedexhale_
      : reinterpret_cast< ::pulse::cdm::bind::ForcedExhaleData&>(::pulse::cdm::bind::_ForcedExhaleData_default_instance_);
}
inline const ::pulse::cdm::bind::ForcedExhaleData& AnyConsciousRespirationCommandData::forcedexhale() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
  return _internal_forcedexhale();
}
inline ::pulse::cdm::bind::ForcedExhaleData* AnyConsciousRespirationCommandData::unsafe_arena_release_forcedexhale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
  if (_internal_has_forcedexhale()) {
    clear_has_Command();
    ::pulse::cdm::bind::ForcedExhaleData* temp = Command_.forcedexhale_;
    Command_.forcedexhale_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConsciousRespirationCommandData::unsafe_arena_set_allocated_forcedexhale(::pulse::cdm::bind::ForcedExhaleData* forcedexhale) {
  clear_Command();
  if (forcedexhale) {
    set_has_forcedexhale();
    Command_.forcedexhale_ = forcedexhale;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
}
inline ::pulse::cdm::bind::ForcedExhaleData* AnyConsciousRespirationCommandData::_internal_mutable_forcedexhale() {
  if (!_internal_has_forcedexhale()) {
    clear_Command();
    set_has_forcedexhale();
    Command_.forcedexhale_ = CreateMaybeMessage< ::pulse::cdm::bind::ForcedExhaleData >(GetArena());
  }
  return Command_.forcedexhale_;
}
inline ::pulse::cdm::bind::ForcedExhaleData* AnyConsciousRespirationCommandData::mutable_forcedexhale() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedExhale)
  return _internal_mutable_forcedexhale();
}

// .pulse.cdm.bind.ForcedPauseData ForcedPause = 4;
inline bool AnyConsciousRespirationCommandData::_internal_has_forcedpause() const {
  return Command_case() == kForcedPause;
}
inline bool AnyConsciousRespirationCommandData::has_forcedpause() const {
  return _internal_has_forcedpause();
}
inline void AnyConsciousRespirationCommandData::set_has_forcedpause() {
  _oneof_case_[0] = kForcedPause;
}
inline void AnyConsciousRespirationCommandData::clear_forcedpause() {
  if (_internal_has_forcedpause()) {
    if (GetArena() == nullptr) {
      delete Command_.forcedpause_;
    }
    clear_has_Command();
  }
}
inline ::pulse::cdm::bind::ForcedPauseData* AnyConsciousRespirationCommandData::release_forcedpause() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
  if (_internal_has_forcedpause()) {
    clear_has_Command();
      ::pulse::cdm::bind::ForcedPauseData* temp = Command_.forcedpause_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.forcedpause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ForcedPauseData& AnyConsciousRespirationCommandData::_internal_forcedpause() const {
  return _internal_has_forcedpause()
      ? *Command_.forcedpause_
      : reinterpret_cast< ::pulse::cdm::bind::ForcedPauseData&>(::pulse::cdm::bind::_ForcedPauseData_default_instance_);
}
inline const ::pulse::cdm::bind::ForcedPauseData& AnyConsciousRespirationCommandData::forcedpause() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
  return _internal_forcedpause();
}
inline ::pulse::cdm::bind::ForcedPauseData* AnyConsciousRespirationCommandData::unsafe_arena_release_forcedpause() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
  if (_internal_has_forcedpause()) {
    clear_has_Command();
    ::pulse::cdm::bind::ForcedPauseData* temp = Command_.forcedpause_;
    Command_.forcedpause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConsciousRespirationCommandData::unsafe_arena_set_allocated_forcedpause(::pulse::cdm::bind::ForcedPauseData* forcedpause) {
  clear_Command();
  if (forcedpause) {
    set_has_forcedpause();
    Command_.forcedpause_ = forcedpause;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
}
inline ::pulse::cdm::bind::ForcedPauseData* AnyConsciousRespirationCommandData::_internal_mutable_forcedpause() {
  if (!_internal_has_forcedpause()) {
    clear_Command();
    set_has_forcedpause();
    Command_.forcedpause_ = CreateMaybeMessage< ::pulse::cdm::bind::ForcedPauseData >(GetArena());
  }
  return Command_.forcedpause_;
}
inline ::pulse::cdm::bind::ForcedPauseData* AnyConsciousRespirationCommandData::mutable_forcedpause() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConsciousRespirationCommandData.ForcedPause)
  return _internal_mutable_forcedpause();
}

// .pulse.cdm.bind.UseInhalerData UseInhaler = 5;
inline bool AnyConsciousRespirationCommandData::_internal_has_useinhaler() const {
  return Command_case() == kUseInhaler;
}
inline bool AnyConsciousRespirationCommandData::has_useinhaler() const {
  return _internal_has_useinhaler();
}
inline void AnyConsciousRespirationCommandData::set_has_useinhaler() {
  _oneof_case_[0] = kUseInhaler;
}
inline void AnyConsciousRespirationCommandData::clear_useinhaler() {
  if (_internal_has_useinhaler()) {
    if (GetArena() == nullptr) {
      delete Command_.useinhaler_;
    }
    clear_has_Command();
  }
}
inline ::pulse::cdm::bind::UseInhalerData* AnyConsciousRespirationCommandData::release_useinhaler() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
  if (_internal_has_useinhaler()) {
    clear_has_Command();
      ::pulse::cdm::bind::UseInhalerData* temp = Command_.useinhaler_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Command_.useinhaler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::UseInhalerData& AnyConsciousRespirationCommandData::_internal_useinhaler() const {
  return _internal_has_useinhaler()
      ? *Command_.useinhaler_
      : reinterpret_cast< ::pulse::cdm::bind::UseInhalerData&>(::pulse::cdm::bind::_UseInhalerData_default_instance_);
}
inline const ::pulse::cdm::bind::UseInhalerData& AnyConsciousRespirationCommandData::useinhaler() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
  return _internal_useinhaler();
}
inline ::pulse::cdm::bind::UseInhalerData* AnyConsciousRespirationCommandData::unsafe_arena_release_useinhaler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
  if (_internal_has_useinhaler()) {
    clear_has_Command();
    ::pulse::cdm::bind::UseInhalerData* temp = Command_.useinhaler_;
    Command_.useinhaler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyConsciousRespirationCommandData::unsafe_arena_set_allocated_useinhaler(::pulse::cdm::bind::UseInhalerData* useinhaler) {
  clear_Command();
  if (useinhaler) {
    set_has_useinhaler();
    Command_.useinhaler_ = useinhaler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
}
inline ::pulse::cdm::bind::UseInhalerData* AnyConsciousRespirationCommandData::_internal_mutable_useinhaler() {
  if (!_internal_has_useinhaler()) {
    clear_Command();
    set_has_useinhaler();
    Command_.useinhaler_ = CreateMaybeMessage< ::pulse::cdm::bind::UseInhalerData >(GetArena());
  }
  return Command_.useinhaler_;
}
inline ::pulse::cdm::bind::UseInhalerData* AnyConsciousRespirationCommandData::mutable_useinhaler() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyConsciousRespirationCommandData.UseInhaler)
  return _internal_mutable_useinhaler();
}

inline bool AnyConsciousRespirationCommandData::has_Command() const {
  return Command_case() != COMMAND_NOT_SET;
}
inline void AnyConsciousRespirationCommandData::clear_has_Command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline AnyConsciousRespirationCommandData::CommandCase AnyConsciousRespirationCommandData::Command_case() const {
  return AnyConsciousRespirationCommandData::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsciousRespirationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ConsciousRespirationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ConsciousRespirationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ConsciousRespirationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ConsciousRespirationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ConsciousRespirationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsciousRespirationData.PatientAction)
  return _internal_patientaction();
}
inline void ConsciousRespirationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ConsciousRespirationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ConsciousRespirationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ConsciousRespirationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsciousRespirationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ConsciousRespirationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ConsciousRespirationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsciousRespirationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ConsciousRespirationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsciousRespirationData.PatientAction)
}

// bool StartImmediately = 2;
inline void ConsciousRespirationData::clear_startimmediately() {
  startimmediately_ = false;
}
inline bool ConsciousRespirationData::_internal_startimmediately() const {
  return startimmediately_;
}
inline bool ConsciousRespirationData::startimmediately() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsciousRespirationData.StartImmediately)
  return _internal_startimmediately();
}
inline void ConsciousRespirationData::_internal_set_startimmediately(bool value) {
  
  startimmediately_ = value;
}
inline void ConsciousRespirationData::set_startimmediately(bool value) {
  _internal_set_startimmediately(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ConsciousRespirationData.StartImmediately)
}

// repeated .pulse.cdm.bind.AnyConsciousRespirationCommandData Command = 3;
inline int ConsciousRespirationData::_internal_command_size() const {
  return command_.size();
}
inline int ConsciousRespirationData::command_size() const {
  return _internal_command_size();
}
inline void ConsciousRespirationData::clear_command() {
  command_.Clear();
}
inline ::pulse::cdm::bind::AnyConsciousRespirationCommandData* ConsciousRespirationData::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsciousRespirationData.Command)
  return command_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >*
ConsciousRespirationData::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ConsciousRespirationData.Command)
  return &command_;
}
inline const ::pulse::cdm::bind::AnyConsciousRespirationCommandData& ConsciousRespirationData::_internal_command(int index) const {
  return command_.Get(index);
}
inline const ::pulse::cdm::bind::AnyConsciousRespirationCommandData& ConsciousRespirationData::command(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsciousRespirationData.Command)
  return _internal_command(index);
}
inline ::pulse::cdm::bind::AnyConsciousRespirationCommandData* ConsciousRespirationData::_internal_add_command() {
  return command_.Add();
}
inline ::pulse::cdm::bind::AnyConsciousRespirationCommandData* ConsciousRespirationData::add_command() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ConsciousRespirationData.Command)
  return _internal_add_command();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::AnyConsciousRespirationCommandData >&
ConsciousRespirationData::command() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ConsciousRespirationData.Command)
  return command_;
}

// -------------------------------------------------------------------

// ConsumeNutrientsData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ConsumeNutrientsData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ConsumeNutrientsData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ConsumeNutrientsData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ConsumeNutrientsData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ConsumeNutrientsData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeNutrientsData.PatientAction)
  return _internal_patientaction();
}
inline void ConsumeNutrientsData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ConsumeNutrientsData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ConsumeNutrientsData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ConsumeNutrientsData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeNutrientsData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ConsumeNutrientsData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ConsumeNutrientsData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeNutrientsData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ConsumeNutrientsData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeNutrientsData.PatientAction)
}

// .pulse.cdm.bind.NutritionData Nutrition = 2;
inline bool ConsumeNutrientsData::_internal_has_nutrition() const {
  return Option_case() == kNutrition;
}
inline bool ConsumeNutrientsData::has_nutrition() const {
  return _internal_has_nutrition();
}
inline void ConsumeNutrientsData::set_has_nutrition() {
  _oneof_case_[0] = kNutrition;
}
inline ::pulse::cdm::bind::NutritionData* ConsumeNutrientsData::release_nutrition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
  if (_internal_has_nutrition()) {
    clear_has_Option();
      ::pulse::cdm::bind::NutritionData* temp = Option_.nutrition_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.nutrition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::NutritionData& ConsumeNutrientsData::_internal_nutrition() const {
  return _internal_has_nutrition()
      ? *Option_.nutrition_
      : reinterpret_cast< ::pulse::cdm::bind::NutritionData&>(::pulse::cdm::bind::_NutritionData_default_instance_);
}
inline const ::pulse::cdm::bind::NutritionData& ConsumeNutrientsData::nutrition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
  return _internal_nutrition();
}
inline ::pulse::cdm::bind::NutritionData* ConsumeNutrientsData::unsafe_arena_release_nutrition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
  if (_internal_has_nutrition()) {
    clear_has_Option();
    ::pulse::cdm::bind::NutritionData* temp = Option_.nutrition_;
    Option_.nutrition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConsumeNutrientsData::unsafe_arena_set_allocated_nutrition(::pulse::cdm::bind::NutritionData* nutrition) {
  clear_Option();
  if (nutrition) {
    set_has_nutrition();
    Option_.nutrition_ = nutrition;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
}
inline ::pulse::cdm::bind::NutritionData* ConsumeNutrientsData::_internal_mutable_nutrition() {
  if (!_internal_has_nutrition()) {
    clear_Option();
    set_has_nutrition();
    Option_.nutrition_ = CreateMaybeMessage< ::pulse::cdm::bind::NutritionData >(GetArena());
  }
  return Option_.nutrition_;
}
inline ::pulse::cdm::bind::NutritionData* ConsumeNutrientsData::mutable_nutrition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeNutrientsData.Nutrition)
  return _internal_mutable_nutrition();
}

// string NutritionFile = 3;
inline bool ConsumeNutrientsData::_internal_has_nutritionfile() const {
  return Option_case() == kNutritionFile;
}
inline void ConsumeNutrientsData::set_has_nutritionfile() {
  _oneof_case_[0] = kNutritionFile;
}
inline void ConsumeNutrientsData::clear_nutritionfile() {
  if (_internal_has_nutritionfile()) {
    Option_.nutritionfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& ConsumeNutrientsData::nutritionfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
  return _internal_nutritionfile();
}
inline void ConsumeNutrientsData::set_nutritionfile(const std::string& value) {
  _internal_set_nutritionfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
}
inline std::string* ConsumeNutrientsData::mutable_nutritionfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
  return _internal_mutable_nutritionfile();
}
inline const std::string& ConsumeNutrientsData::_internal_nutritionfile() const {
  if (_internal_has_nutritionfile()) {
    return Option_.nutritionfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConsumeNutrientsData::_internal_set_nutritionfile(const std::string& value) {
  if (!_internal_has_nutritionfile()) {
    clear_Option();
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.nutritionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConsumeNutrientsData::set_nutritionfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
  if (!_internal_has_nutritionfile()) {
    clear_Option();
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.nutritionfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
}
inline void ConsumeNutrientsData::set_nutritionfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_nutritionfile()) {
    clear_Option();
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.nutritionfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
}
inline void ConsumeNutrientsData::set_nutritionfile(const char* value,
                             size_t size) {
  if (!_internal_has_nutritionfile()) {
    clear_Option();
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.nutritionfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
}
inline std::string* ConsumeNutrientsData::_internal_mutable_nutritionfile() {
  if (!_internal_has_nutritionfile()) {
    clear_Option();
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.nutritionfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConsumeNutrientsData::release_nutritionfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
  if (_internal_has_nutritionfile()) {
    clear_has_Option();
    return Option_.nutritionfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConsumeNutrientsData::set_allocated_nutritionfile(std::string* nutritionfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (nutritionfile != nullptr) {
    set_has_nutritionfile();
    Option_.nutritionfile_.UnsafeSetDefault(nutritionfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(nutritionfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeNutrientsData.NutritionFile)
}

inline bool ConsumeNutrientsData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void ConsumeNutrientsData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline ConsumeNutrientsData::OptionCase ConsumeNutrientsData::Option_case() const {
  return ConsumeNutrientsData::OptionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExerciseData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ExerciseData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ExerciseData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ExerciseData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ExerciseData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ExerciseData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ExerciseData.PatientAction)
  return _internal_patientaction();
}
inline void ExerciseData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ExerciseData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ExerciseData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ExerciseData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ExerciseData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ExerciseData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ExerciseData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ExerciseData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ExerciseData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ExerciseData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Intensity = 2;
inline bool ExerciseData::_internal_has_intensity() const {
  return this != internal_default_instance() && intensity_ != nullptr;
}
inline bool ExerciseData::has_intensity() const {
  return _internal_has_intensity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ExerciseData::_internal_intensity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = intensity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ExerciseData::intensity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ExerciseData.Intensity)
  return _internal_intensity();
}
inline void ExerciseData::unsafe_arena_set_allocated_intensity(
    ::pulse::cdm::bind::Scalar0To1Data* intensity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity_);
  }
  intensity_ = intensity;
  if (intensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ExerciseData.Intensity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ExerciseData::release_intensity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = intensity_;
  intensity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ExerciseData::unsafe_arena_release_intensity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ExerciseData.Intensity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = intensity_;
  intensity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ExerciseData::_internal_mutable_intensity() {
  
  if (intensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    intensity_ = p;
  }
  return intensity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ExerciseData::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ExerciseData.Intensity)
  return _internal_mutable_intensity();
}
inline void ExerciseData::set_allocated_intensity(::pulse::cdm::bind::Scalar0To1Data* intensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity_);
  }
  if (intensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity)->GetArena();
    if (message_arena != submessage_arena) {
      intensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intensity, submessage_arena);
    }
    
  } else {
    
  }
  intensity_ = intensity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ExerciseData.Intensity)
}

// -------------------------------------------------------------------

// HemorrhageData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool HemorrhageData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool HemorrhageData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void HemorrhageData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& HemorrhageData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& HemorrhageData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.PatientAction)
  return _internal_patientaction();
}
inline void HemorrhageData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.HemorrhageData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* HemorrhageData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* HemorrhageData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HemorrhageData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* HemorrhageData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* HemorrhageData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HemorrhageData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void HemorrhageData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HemorrhageData.PatientAction)
}

// .pulse.cdm.bind.HemorrhageData.eType Type = 2;
inline void HemorrhageData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::HemorrhageData_eType HemorrhageData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::HemorrhageData_eType >(type_);
}
inline ::pulse::cdm::bind::HemorrhageData_eType HemorrhageData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.Type)
  return _internal_type();
}
inline void HemorrhageData::_internal_set_type(::pulse::cdm::bind::HemorrhageData_eType value) {
  
  type_ = value;
}
inline void HemorrhageData::set_type(::pulse::cdm::bind::HemorrhageData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.HemorrhageData.Type)
}

// string Compartment = 3;
inline void HemorrhageData::clear_compartment() {
  compartment_.ClearToEmpty();
}
inline const std::string& HemorrhageData::compartment() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.Compartment)
  return _internal_compartment();
}
inline void HemorrhageData::set_compartment(const std::string& value) {
  _internal_set_compartment(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.HemorrhageData.Compartment)
}
inline std::string* HemorrhageData::mutable_compartment() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HemorrhageData.Compartment)
  return _internal_mutable_compartment();
}
inline const std::string& HemorrhageData::_internal_compartment() const {
  return compartment_.Get();
}
inline void HemorrhageData::_internal_set_compartment(const std::string& value) {
  
  compartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HemorrhageData::set_compartment(std::string&& value) {
  
  compartment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.HemorrhageData.Compartment)
}
inline void HemorrhageData::set_compartment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.HemorrhageData.Compartment)
}
inline void HemorrhageData::set_compartment(const char* value,
    size_t size) {
  
  compartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.HemorrhageData.Compartment)
}
inline std::string* HemorrhageData::_internal_mutable_compartment() {
  
  return compartment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HemorrhageData::release_compartment() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HemorrhageData.Compartment)
  return compartment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HemorrhageData::set_allocated_compartment(std::string* compartment) {
  if (compartment != nullptr) {
    
  } else {
    
  }
  compartment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compartment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HemorrhageData.Compartment)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData FlowRate = 4;
inline bool HemorrhageData::_internal_has_flowrate() const {
  return this != internal_default_instance() && flowrate_ != nullptr;
}
inline bool HemorrhageData::has_flowrate() const {
  return _internal_has_flowrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& HemorrhageData::_internal_flowrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = flowrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& HemorrhageData::flowrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.FlowRate)
  return _internal_flowrate();
}
inline void HemorrhageData::unsafe_arena_set_allocated_flowrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* flowrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowrate_);
  }
  flowrate_ = flowrate;
  if (flowrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.HemorrhageData.FlowRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* HemorrhageData::release_flowrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flowrate_;
  flowrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* HemorrhageData::unsafe_arena_release_flowrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HemorrhageData.FlowRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flowrate_;
  flowrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* HemorrhageData::_internal_mutable_flowrate() {
  
  if (flowrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    flowrate_ = p;
  }
  return flowrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* HemorrhageData::mutable_flowrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HemorrhageData.FlowRate)
  return _internal_mutable_flowrate();
}
inline void HemorrhageData::set_allocated_flowrate(::pulse::cdm::bind::ScalarVolumePerTimeData* flowrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowrate_);
  }
  if (flowrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flowrate)->GetArena();
    if (message_arena != submessage_arena) {
      flowrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flowrate, submessage_arena);
    }
    
  } else {
    
  }
  flowrate_ = flowrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HemorrhageData.FlowRate)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 5;
inline bool HemorrhageData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool HemorrhageData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& HemorrhageData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& HemorrhageData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.Severity)
  return _internal_severity();
}
inline void HemorrhageData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.HemorrhageData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* HemorrhageData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* HemorrhageData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HemorrhageData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* HemorrhageData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* HemorrhageData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HemorrhageData.Severity)
  return _internal_mutable_severity();
}
inline void HemorrhageData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HemorrhageData.Severity)
}

// .pulse.cdm.bind.ScalarVolumeData TotalBloodLost = 6;
inline bool HemorrhageData::_internal_has_totalbloodlost() const {
  return this != internal_default_instance() && totalbloodlost_ != nullptr;
}
inline bool HemorrhageData::has_totalbloodlost() const {
  return _internal_has_totalbloodlost();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& HemorrhageData::_internal_totalbloodlost() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totalbloodlost_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& HemorrhageData::totalbloodlost() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.HemorrhageData.TotalBloodLost)
  return _internal_totalbloodlost();
}
inline void HemorrhageData::unsafe_arena_set_allocated_totalbloodlost(
    ::pulse::cdm::bind::ScalarVolumeData* totalbloodlost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbloodlost_);
  }
  totalbloodlost_ = totalbloodlost;
  if (totalbloodlost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.HemorrhageData.TotalBloodLost)
}
inline ::pulse::cdm::bind::ScalarVolumeData* HemorrhageData::release_totalbloodlost() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalbloodlost_;
  totalbloodlost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* HemorrhageData::unsafe_arena_release_totalbloodlost() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.HemorrhageData.TotalBloodLost)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalbloodlost_;
  totalbloodlost_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* HemorrhageData::_internal_mutable_totalbloodlost() {
  
  if (totalbloodlost_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    totalbloodlost_ = p;
  }
  return totalbloodlost_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* HemorrhageData::mutable_totalbloodlost() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.HemorrhageData.TotalBloodLost)
  return _internal_mutable_totalbloodlost();
}
inline void HemorrhageData::set_allocated_totalbloodlost(::pulse::cdm::bind::ScalarVolumeData* totalbloodlost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbloodlost_);
  }
  if (totalbloodlost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalbloodlost)->GetArena();
    if (message_arena != submessage_arena) {
      totalbloodlost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalbloodlost, submessage_arena);
    }
    
  } else {
    
  }
  totalbloodlost_ = totalbloodlost;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.HemorrhageData.TotalBloodLost)
}

// -------------------------------------------------------------------

// ImpairedAlveolarExchangeExacerbationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool ImpairedAlveolarExchangeExacerbationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool ImpairedAlveolarExchangeExacerbationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void ImpairedAlveolarExchangeExacerbationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& ImpairedAlveolarExchangeExacerbationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& ImpairedAlveolarExchangeExacerbationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.PatientAction)
  return _internal_patientaction();
}
inline void ImpairedAlveolarExchangeExacerbationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* ImpairedAlveolarExchangeExacerbationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ImpairedAlveolarExchangeExacerbationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* ImpairedAlveolarExchangeExacerbationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* ImpairedAlveolarExchangeExacerbationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void ImpairedAlveolarExchangeExacerbationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.PatientAction)
}

// .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
inline bool ImpairedAlveolarExchangeExacerbationData::_internal_has_impairedsurfacearea() const {
  return Value_case() == kImpairedSurfaceArea;
}
inline bool ImpairedAlveolarExchangeExacerbationData::has_impairedsurfacearea() const {
  return _internal_has_impairedsurfacearea();
}
inline void ImpairedAlveolarExchangeExacerbationData::set_has_impairedsurfacearea() {
  _oneof_case_[0] = kImpairedSurfaceArea;
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeExacerbationData::release_impairedsurfacearea() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
  if (_internal_has_impairedsurfacearea()) {
    clear_has_Value();
      ::pulse::cdm::bind::ScalarAreaData* temp = Value_.impairedsurfacearea_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.impairedsurfacearea_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::ScalarAreaData& ImpairedAlveolarExchangeExacerbationData::_internal_impairedsurfacearea() const {
  return _internal_has_impairedsurfacearea()
      ? *Value_.impairedsurfacearea_
      : reinterpret_cast< ::pulse::cdm::bind::ScalarAreaData&>(::pulse::cdm::bind::_ScalarAreaData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarAreaData& ImpairedAlveolarExchangeExacerbationData::impairedsurfacearea() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
  return _internal_impairedsurfacearea();
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeExacerbationData::unsafe_arena_release_impairedsurfacearea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
  if (_internal_has_impairedsurfacearea()) {
    clear_has_Value();
    ::pulse::cdm::bind::ScalarAreaData* temp = Value_.impairedsurfacearea_;
    Value_.impairedsurfacearea_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImpairedAlveolarExchangeExacerbationData::unsafe_arena_set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea) {
  clear_Value();
  if (impairedsurfacearea) {
    set_has_impairedsurfacearea();
    Value_.impairedsurfacearea_ = impairedsurfacearea;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeExacerbationData::_internal_mutable_impairedsurfacearea() {
  if (!_internal_has_impairedsurfacearea()) {
    clear_Value();
    set_has_impairedsurfacearea();
    Value_.impairedsurfacearea_ = CreateMaybeMessage< ::pulse::cdm::bind::ScalarAreaData >(GetArena());
  }
  return Value_.impairedsurfacearea_;
}
inline ::pulse::cdm::bind::ScalarAreaData* ImpairedAlveolarExchangeExacerbationData::mutable_impairedsurfacearea() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedSurfaceArea)
  return _internal_mutable_impairedsurfacearea();
}

// .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
inline bool ImpairedAlveolarExchangeExacerbationData::_internal_has_impairedfraction() const {
  return Value_case() == kImpairedFraction;
}
inline bool ImpairedAlveolarExchangeExacerbationData::has_impairedfraction() const {
  return _internal_has_impairedfraction();
}
inline void ImpairedAlveolarExchangeExacerbationData::set_has_impairedfraction() {
  _oneof_case_[0] = kImpairedFraction;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::release_impairedfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
  if (_internal_has_impairedfraction()) {
    clear_has_Value();
      ::pulse::cdm::bind::Scalar0To1Data* temp = Value_.impairedfraction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.impairedfraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeExacerbationData::_internal_impairedfraction() const {
  return _internal_has_impairedfraction()
      ? *Value_.impairedfraction_
      : reinterpret_cast< ::pulse::cdm::bind::Scalar0To1Data&>(::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeExacerbationData::impairedfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
  return _internal_impairedfraction();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::unsafe_arena_release_impairedfraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
  if (_internal_has_impairedfraction()) {
    clear_has_Value();
    ::pulse::cdm::bind::Scalar0To1Data* temp = Value_.impairedfraction_;
    Value_.impairedfraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImpairedAlveolarExchangeExacerbationData::unsafe_arena_set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction) {
  clear_Value();
  if (impairedfraction) {
    set_has_impairedfraction();
    Value_.impairedfraction_ = impairedfraction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::_internal_mutable_impairedfraction() {
  if (!_internal_has_impairedfraction()) {
    clear_Value();
    set_has_impairedfraction();
    Value_.impairedfraction_ = CreateMaybeMessage< ::pulse::cdm::bind::Scalar0To1Data >(GetArena());
  }
  return Value_.impairedfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::mutable_impairedfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.ImpairedFraction)
  return _internal_mutable_impairedfraction();
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 4;
inline bool ImpairedAlveolarExchangeExacerbationData::_internal_has_severity() const {
  return Value_case() == kSeverity;
}
inline bool ImpairedAlveolarExchangeExacerbationData::has_severity() const {
  return _internal_has_severity();
}
inline void ImpairedAlveolarExchangeExacerbationData::set_has_severity() {
  _oneof_case_[0] = kSeverity;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
  if (_internal_has_severity()) {
    clear_has_Value();
      ::pulse::cdm::bind::Scalar0To1Data* temp = Value_.severity_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.severity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeExacerbationData::_internal_severity() const {
  return _internal_has_severity()
      ? *Value_.severity_
      : reinterpret_cast< ::pulse::cdm::bind::Scalar0To1Data&>(::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& ImpairedAlveolarExchangeExacerbationData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
  return _internal_severity();
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
  if (_internal_has_severity()) {
    clear_has_Value();
    ::pulse::cdm::bind::Scalar0To1Data* temp = Value_.severity_;
    Value_.severity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImpairedAlveolarExchangeExacerbationData::unsafe_arena_set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  clear_Value();
  if (severity) {
    set_has_severity();
    Value_.severity_ = severity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::_internal_mutable_severity() {
  if (!_internal_has_severity()) {
    clear_Value();
    set_has_severity();
    Value_.severity_ = CreateMaybeMessage< ::pulse::cdm::bind::Scalar0To1Data >(GetArena());
  }
  return Value_.severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* ImpairedAlveolarExchangeExacerbationData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ImpairedAlveolarExchangeExacerbationData.Severity)
  return _internal_mutable_severity();
}

inline bool ImpairedAlveolarExchangeExacerbationData::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void ImpairedAlveolarExchangeExacerbationData::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ImpairedAlveolarExchangeExacerbationData::ValueCase ImpairedAlveolarExchangeExacerbationData::Value_case() const {
  return ImpairedAlveolarExchangeExacerbationData::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IntubationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool IntubationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool IntubationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void IntubationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& IntubationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& IntubationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.IntubationData.PatientAction)
  return _internal_patientaction();
}
inline void IntubationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.IntubationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* IntubationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* IntubationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.IntubationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* IntubationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* IntubationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.IntubationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void IntubationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.IntubationData.PatientAction)
}

// .pulse.cdm.bind.IntubationData.eType Type = 2;
inline void IntubationData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::IntubationData_eType IntubationData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::IntubationData_eType >(type_);
}
inline ::pulse::cdm::bind::IntubationData_eType IntubationData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.IntubationData.Type)
  return _internal_type();
}
inline void IntubationData::_internal_set_type(::pulse::cdm::bind::IntubationData_eType value) {
  
  type_ = value;
}
inline void IntubationData::set_type(::pulse::cdm::bind::IntubationData_eType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.IntubationData.Type)
}

// -------------------------------------------------------------------

// LobarPneumoniaExacerbationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool LobarPneumoniaExacerbationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool LobarPneumoniaExacerbationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void LobarPneumoniaExacerbationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& LobarPneumoniaExacerbationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& LobarPneumoniaExacerbationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaExacerbationData.PatientAction)
  return _internal_patientaction();
}
inline void LobarPneumoniaExacerbationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* LobarPneumoniaExacerbationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* LobarPneumoniaExacerbationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaExacerbationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* LobarPneumoniaExacerbationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* LobarPneumoniaExacerbationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaExacerbationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void LobarPneumoniaExacerbationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool LobarPneumoniaExacerbationData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool LobarPneumoniaExacerbationData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaExacerbationData.Severity)
  return _internal_severity();
}
inline void LobarPneumoniaExacerbationData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaExacerbationData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaExacerbationData.Severity)
  return _internal_mutable_severity();
}
inline void LobarPneumoniaExacerbationData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.Severity)
}

// .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
inline bool LobarPneumoniaExacerbationData::_internal_has_leftlungaffected() const {
  return this != internal_default_instance() && leftlungaffected_ != nullptr;
}
inline bool LobarPneumoniaExacerbationData::has_leftlungaffected() const {
  return _internal_has_leftlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::_internal_leftlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = leftlungaffected_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::leftlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaExacerbationData.LeftLungAffected)
  return _internal_leftlungaffected();
}
inline void LobarPneumoniaExacerbationData::unsafe_arena_set_allocated_leftlungaffected(
    ::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  leftlungaffected_ = leftlungaffected;
  if (leftlungaffected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.LeftLungAffected)
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::release_leftlungaffected() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::unsafe_arena_release_leftlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaExacerbationData.LeftLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = leftlungaffected_;
  leftlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::_internal_mutable_leftlungaffected() {
  
  if (leftlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    leftlungaffected_ = p;
  }
  return leftlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::mutable_leftlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaExacerbationData.LeftLungAffected)
  return _internal_mutable_leftlungaffected();
}
inline void LobarPneumoniaExacerbationData::set_allocated_leftlungaffected(::pulse::cdm::bind::Scalar0To1Data* leftlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected_);
  }
  if (leftlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftlungaffected)->GetArena();
    if (message_arena != submessage_arena) {
      leftlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  leftlungaffected_ = leftlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.LeftLungAffected)
}

// .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
inline bool LobarPneumoniaExacerbationData::_internal_has_rightlungaffected() const {
  return this != internal_default_instance() && rightlungaffected_ != nullptr;
}
inline bool LobarPneumoniaExacerbationData::has_rightlungaffected() const {
  return _internal_has_rightlungaffected();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::_internal_rightlungaffected() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = rightlungaffected_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& LobarPneumoniaExacerbationData::rightlungaffected() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.LobarPneumoniaExacerbationData.RightLungAffected)
  return _internal_rightlungaffected();
}
inline void LobarPneumoniaExacerbationData::unsafe_arena_set_allocated_rightlungaffected(
    ::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  rightlungaffected_ = rightlungaffected;
  if (rightlungaffected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.RightLungAffected)
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::release_rightlungaffected() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::unsafe_arena_release_rightlungaffected() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.LobarPneumoniaExacerbationData.RightLungAffected)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = rightlungaffected_;
  rightlungaffected_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::_internal_mutable_rightlungaffected() {
  
  if (rightlungaffected_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    rightlungaffected_ = p;
  }
  return rightlungaffected_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* LobarPneumoniaExacerbationData::mutable_rightlungaffected() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.LobarPneumoniaExacerbationData.RightLungAffected)
  return _internal_mutable_rightlungaffected();
}
inline void LobarPneumoniaExacerbationData::set_allocated_rightlungaffected(::pulse::cdm::bind::Scalar0To1Data* rightlungaffected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected_);
  }
  if (rightlungaffected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightlungaffected)->GetArena();
    if (message_arena != submessage_arena) {
      rightlungaffected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightlungaffected, submessage_arena);
    }
    
  } else {
    
  }
  rightlungaffected_ = rightlungaffected;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.LobarPneumoniaExacerbationData.RightLungAffected)
}

// -------------------------------------------------------------------

// MechanicalVentilationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool MechanicalVentilationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool MechanicalVentilationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void MechanicalVentilationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& MechanicalVentilationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& MechanicalVentilationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.PatientAction)
  return _internal_patientaction();
}
inline void MechanicalVentilationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* MechanicalVentilationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* MechanicalVentilationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* MechanicalVentilationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* MechanicalVentilationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void MechanicalVentilationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilationData.PatientAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void MechanicalVentilationData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch MechanicalVentilationData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch MechanicalVentilationData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.State)
  return _internal_state();
}
inline void MechanicalVentilationData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void MechanicalVentilationData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.MechanicalVentilationData.State)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
inline bool MechanicalVentilationData::_internal_has_flow() const {
  return this != internal_default_instance() && flow_ != nullptr;
}
inline bool MechanicalVentilationData::has_flow() const {
  return _internal_has_flow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& MechanicalVentilationData::_internal_flow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = flow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& MechanicalVentilationData::flow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.Flow)
  return _internal_flow();
}
inline void MechanicalVentilationData::unsafe_arena_set_allocated_flow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  flow_ = flow;
  if (flow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilationData.Flow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* MechanicalVentilationData::release_flow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* MechanicalVentilationData::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilationData.Flow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* MechanicalVentilationData::_internal_mutable_flow() {
  
  if (flow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    flow_ = p;
  }
  return flow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* MechanicalVentilationData::mutable_flow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilationData.Flow)
  return _internal_mutable_flow();
}
inline void MechanicalVentilationData::set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  if (flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow)->GetArena();
    if (message_arena != submessage_arena) {
      flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    
  } else {
    
  }
  flow_ = flow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilationData.Flow)
}

// .pulse.cdm.bind.ScalarPressureData Pressure = 4;
inline bool MechanicalVentilationData::_internal_has_pressure() const {
  return this != internal_default_instance() && pressure_ != nullptr;
}
inline bool MechanicalVentilationData::has_pressure() const {
  return _internal_has_pressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& MechanicalVentilationData::_internal_pressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = pressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& MechanicalVentilationData::pressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.Pressure)
  return _internal_pressure();
}
inline void MechanicalVentilationData::unsafe_arena_set_allocated_pressure(
    ::pulse::cdm::bind::ScalarPressureData* pressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure_);
  }
  pressure_ = pressure;
  if (pressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilationData.Pressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* MechanicalVentilationData::release_pressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pressure_;
  pressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* MechanicalVentilationData::unsafe_arena_release_pressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilationData.Pressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = pressure_;
  pressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* MechanicalVentilationData::_internal_mutable_pressure() {
  
  if (pressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    pressure_ = p;
  }
  return pressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* MechanicalVentilationData::mutable_pressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilationData.Pressure)
  return _internal_mutable_pressure();
}
inline void MechanicalVentilationData::set_allocated_pressure(::pulse::cdm::bind::ScalarPressureData* pressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure_);
  }
  if (pressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pressure)->GetArena();
    if (message_arena != submessage_arena) {
      pressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pressure, submessage_arena);
    }
    
  } else {
    
  }
  pressure_ = pressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilationData.Pressure)
}

// repeated .pulse.cdm.bind.SubstanceFractionData GasFraction = 5;
inline int MechanicalVentilationData::_internal_gasfraction_size() const {
  return gasfraction_.size();
}
inline int MechanicalVentilationData::gasfraction_size() const {
  return _internal_gasfraction_size();
}
inline ::pulse::cdm::bind::SubstanceFractionData* MechanicalVentilationData::mutable_gasfraction(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilationData.GasFraction)
  return gasfraction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >*
MechanicalVentilationData::mutable_gasfraction() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.MechanicalVentilationData.GasFraction)
  return &gasfraction_;
}
inline const ::pulse::cdm::bind::SubstanceFractionData& MechanicalVentilationData::_internal_gasfraction(int index) const {
  return gasfraction_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceFractionData& MechanicalVentilationData::gasfraction(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.GasFraction)
  return _internal_gasfraction(index);
}
inline ::pulse::cdm::bind::SubstanceFractionData* MechanicalVentilationData::_internal_add_gasfraction() {
  return gasfraction_.Add();
}
inline ::pulse::cdm::bind::SubstanceFractionData* MechanicalVentilationData::add_gasfraction() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.MechanicalVentilationData.GasFraction)
  return _internal_add_gasfraction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceFractionData >&
MechanicalVentilationData::gasfraction() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.MechanicalVentilationData.GasFraction)
  return gasfraction_;
}

// repeated .pulse.cdm.bind.SubstanceConcentrationData Aerosol = 6;
inline int MechanicalVentilationData::_internal_aerosol_size() const {
  return aerosol_.size();
}
inline int MechanicalVentilationData::aerosol_size() const {
  return _internal_aerosol_size();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* MechanicalVentilationData::mutable_aerosol(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilationData.Aerosol)
  return aerosol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >*
MechanicalVentilationData::mutable_aerosol() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.MechanicalVentilationData.Aerosol)
  return &aerosol_;
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& MechanicalVentilationData::_internal_aerosol(int index) const {
  return aerosol_.Get(index);
}
inline const ::pulse::cdm::bind::SubstanceConcentrationData& MechanicalVentilationData::aerosol(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilationData.Aerosol)
  return _internal_aerosol(index);
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* MechanicalVentilationData::_internal_add_aerosol() {
  return aerosol_.Add();
}
inline ::pulse::cdm::bind::SubstanceConcentrationData* MechanicalVentilationData::add_aerosol() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.MechanicalVentilationData.Aerosol)
  return _internal_add_aerosol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::SubstanceConcentrationData >&
MechanicalVentilationData::aerosol() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.MechanicalVentilationData.Aerosol)
  return aerosol_;
}

// -------------------------------------------------------------------

// NeedleDecompressionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool NeedleDecompressionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool NeedleDecompressionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void NeedleDecompressionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& NeedleDecompressionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& NeedleDecompressionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NeedleDecompressionData.PatientAction)
  return _internal_patientaction();
}
inline void NeedleDecompressionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NeedleDecompressionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* NeedleDecompressionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* NeedleDecompressionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NeedleDecompressionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* NeedleDecompressionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* NeedleDecompressionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NeedleDecompressionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void NeedleDecompressionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NeedleDecompressionData.PatientAction)
}

// .pulse.cdm.bind.eSwitch State = 2;
inline void NeedleDecompressionData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch NeedleDecompressionData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch NeedleDecompressionData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NeedleDecompressionData.State)
  return _internal_state();
}
inline void NeedleDecompressionData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void NeedleDecompressionData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.NeedleDecompressionData.State)
}

// .pulse.cdm.bind.eSide Side = 3;
inline void NeedleDecompressionData::clear_side() {
  side_ = 0;
}
inline ::pulse::cdm::bind::eSide NeedleDecompressionData::_internal_side() const {
  return static_cast< ::pulse::cdm::bind::eSide >(side_);
}
inline ::pulse::cdm::bind::eSide NeedleDecompressionData::side() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NeedleDecompressionData.Side)
  return _internal_side();
}
inline void NeedleDecompressionData::_internal_set_side(::pulse::cdm::bind::eSide value) {
  
  side_ = value;
}
inline void NeedleDecompressionData::set_side(::pulse::cdm::bind::eSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.NeedleDecompressionData.Side)
}

// -------------------------------------------------------------------

// PericardialEffusionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool PericardialEffusionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool PericardialEffusionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void PericardialEffusionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& PericardialEffusionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& PericardialEffusionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PericardialEffusionData.PatientAction)
  return _internal_patientaction();
}
inline void PericardialEffusionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PericardialEffusionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* PericardialEffusionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PericardialEffusionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PericardialEffusionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PericardialEffusionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* PericardialEffusionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PericardialEffusionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void PericardialEffusionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PericardialEffusionData.PatientAction)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData EffusionRate = 2;
inline bool PericardialEffusionData::_internal_has_effusionrate() const {
  return this != internal_default_instance() && effusionrate_ != nullptr;
}
inline bool PericardialEffusionData::has_effusionrate() const {
  return _internal_has_effusionrate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PericardialEffusionData::_internal_effusionrate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = effusionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& PericardialEffusionData::effusionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PericardialEffusionData.EffusionRate)
  return _internal_effusionrate();
}
inline void PericardialEffusionData::unsafe_arena_set_allocated_effusionrate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* effusionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effusionrate_);
  }
  effusionrate_ = effusionrate;
  if (effusionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PericardialEffusionData.EffusionRate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PericardialEffusionData::release_effusionrate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = effusionrate_;
  effusionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PericardialEffusionData::unsafe_arena_release_effusionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PericardialEffusionData.EffusionRate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = effusionrate_;
  effusionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PericardialEffusionData::_internal_mutable_effusionrate() {
  
  if (effusionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    effusionrate_ = p;
  }
  return effusionrate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* PericardialEffusionData::mutable_effusionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PericardialEffusionData.EffusionRate)
  return _internal_mutable_effusionrate();
}
inline void PericardialEffusionData::set_allocated_effusionrate(::pulse::cdm::bind::ScalarVolumePerTimeData* effusionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effusionrate_);
  }
  if (effusionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(effusionrate)->GetArena();
    if (message_arena != submessage_arena) {
      effusionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effusionrate, submessage_arena);
    }
    
  } else {
    
  }
  effusionrate_ = effusionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PericardialEffusionData.EffusionRate)
}

// -------------------------------------------------------------------

// PulmonaryShuntExacerbationData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool PulmonaryShuntExacerbationData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool PulmonaryShuntExacerbationData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void PulmonaryShuntExacerbationData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& PulmonaryShuntExacerbationData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& PulmonaryShuntExacerbationData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryShuntExacerbationData.PatientAction)
  return _internal_patientaction();
}
inline void PulmonaryShuntExacerbationData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryShuntExacerbationData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* PulmonaryShuntExacerbationData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PulmonaryShuntExacerbationData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryShuntExacerbationData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* PulmonaryShuntExacerbationData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* PulmonaryShuntExacerbationData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryShuntExacerbationData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void PulmonaryShuntExacerbationData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryShuntExacerbationData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool PulmonaryShuntExacerbationData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool PulmonaryShuntExacerbationData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PulmonaryShuntExacerbationData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& PulmonaryShuntExacerbationData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.PulmonaryShuntExacerbationData.Severity)
  return _internal_severity();
}
inline void PulmonaryShuntExacerbationData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.PulmonaryShuntExacerbationData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryShuntExacerbationData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryShuntExacerbationData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.PulmonaryShuntExacerbationData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryShuntExacerbationData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* PulmonaryShuntExacerbationData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.PulmonaryShuntExacerbationData.Severity)
  return _internal_mutable_severity();
}
inline void PulmonaryShuntExacerbationData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.PulmonaryShuntExacerbationData.Severity)
}

// -------------------------------------------------------------------

// RespiratoryFatigueData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool RespiratoryFatigueData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool RespiratoryFatigueData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void RespiratoryFatigueData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& RespiratoryFatigueData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& RespiratoryFatigueData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratoryFatigueData.PatientAction)
  return _internal_patientaction();
}
inline void RespiratoryFatigueData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratoryFatigueData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* RespiratoryFatigueData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* RespiratoryFatigueData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratoryFatigueData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* RespiratoryFatigueData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* RespiratoryFatigueData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratoryFatigueData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void RespiratoryFatigueData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratoryFatigueData.PatientAction)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 2;
inline bool RespiratoryFatigueData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool RespiratoryFatigueData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratoryFatigueData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& RespiratoryFatigueData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.RespiratoryFatigueData.Severity)
  return _internal_severity();
}
inline void RespiratoryFatigueData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.RespiratoryFatigueData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratoryFatigueData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratoryFatigueData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.RespiratoryFatigueData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratoryFatigueData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* RespiratoryFatigueData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.RespiratoryFatigueData.Severity)
  return _internal_mutable_severity();
}
inline void RespiratoryFatigueData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.RespiratoryFatigueData.Severity)
}

// -------------------------------------------------------------------

// SubstanceBolusData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool SubstanceBolusData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool SubstanceBolusData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void SubstanceBolusData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceBolusData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceBolusData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.PatientAction)
  return _internal_patientaction();
}
inline void SubstanceBolusData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceBolusData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceBolusData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceBolusData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceBolusData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceBolusData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void SubstanceBolusData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.PatientAction)
}

// string Substance = 2;
inline void SubstanceBolusData::clear_substance() {
  substance_.ClearToEmpty();
}
inline const std::string& SubstanceBolusData::substance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.Substance)
  return _internal_substance();
}
inline void SubstanceBolusData::set_substance(const std::string& value) {
  _internal_set_substance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceBolusData.Substance)
}
inline std::string* SubstanceBolusData::mutable_substance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.Substance)
  return _internal_mutable_substance();
}
inline const std::string& SubstanceBolusData::_internal_substance() const {
  return substance_.Get();
}
inline void SubstanceBolusData::_internal_set_substance(const std::string& value) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceBolusData::set_substance(std::string&& value) {
  
  substance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceBolusData.Substance)
}
inline void SubstanceBolusData::set_substance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceBolusData.Substance)
}
inline void SubstanceBolusData::set_substance(const char* value,
    size_t size) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceBolusData.Substance)
}
inline std::string* SubstanceBolusData::_internal_mutable_substance() {
  
  return substance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceBolusData::release_substance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.Substance)
  return substance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceBolusData::set_allocated_substance(std::string* substance) {
  if (substance != nullptr) {
    
  } else {
    
  }
  substance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.Substance)
}

// .pulse.cdm.bind.SubstanceBolusData.eRoute AdministrationRoute = 3;
inline void SubstanceBolusData::clear_administrationroute() {
  administrationroute_ = 0;
}
inline ::pulse::cdm::bind::SubstanceBolusData_eRoute SubstanceBolusData::_internal_administrationroute() const {
  return static_cast< ::pulse::cdm::bind::SubstanceBolusData_eRoute >(administrationroute_);
}
inline ::pulse::cdm::bind::SubstanceBolusData_eRoute SubstanceBolusData::administrationroute() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.AdministrationRoute)
  return _internal_administrationroute();
}
inline void SubstanceBolusData::_internal_set_administrationroute(::pulse::cdm::bind::SubstanceBolusData_eRoute value) {
  
  administrationroute_ = value;
}
inline void SubstanceBolusData::set_administrationroute(::pulse::cdm::bind::SubstanceBolusData_eRoute value) {
  _internal_set_administrationroute(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceBolusData.AdministrationRoute)
}

// .pulse.cdm.bind.ScalarTimeData AdministrationDuration = 4;
inline bool SubstanceBolusData::_internal_has_administrationduration() const {
  return this != internal_default_instance() && administrationduration_ != nullptr;
}
inline bool SubstanceBolusData::has_administrationduration() const {
  return _internal_has_administrationduration();
}
inline const ::pulse::cdm::bind::ScalarTimeData& SubstanceBolusData::_internal_administrationduration() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = administrationduration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& SubstanceBolusData::administrationduration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.AdministrationDuration)
  return _internal_administrationduration();
}
inline void SubstanceBolusData::unsafe_arena_set_allocated_administrationduration(
    ::pulse::cdm::bind::ScalarTimeData* administrationduration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(administrationduration_);
  }
  administrationduration_ = administrationduration;
  if (administrationduration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceBolusData.AdministrationDuration)
}
inline ::pulse::cdm::bind::ScalarTimeData* SubstanceBolusData::release_administrationduration() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = administrationduration_;
  administrationduration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* SubstanceBolusData::unsafe_arena_release_administrationduration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.AdministrationDuration)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = administrationduration_;
  administrationduration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* SubstanceBolusData::_internal_mutable_administrationduration() {
  
  if (administrationduration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    administrationduration_ = p;
  }
  return administrationduration_;
}
inline ::pulse::cdm::bind::ScalarTimeData* SubstanceBolusData::mutable_administrationduration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.AdministrationDuration)
  return _internal_mutable_administrationduration();
}
inline void SubstanceBolusData::set_allocated_administrationduration(::pulse::cdm::bind::ScalarTimeData* administrationduration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(administrationduration_);
  }
  if (administrationduration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(administrationduration)->GetArena();
    if (message_arena != submessage_arena) {
      administrationduration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, administrationduration, submessage_arena);
    }
    
  } else {
    
  }
  administrationduration_ = administrationduration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.AdministrationDuration)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 5;
inline bool SubstanceBolusData::_internal_has_concentration() const {
  return this != internal_default_instance() && concentration_ != nullptr;
}
inline bool SubstanceBolusData::has_concentration() const {
  return _internal_has_concentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceBolusData::_internal_concentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = concentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceBolusData::concentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.Concentration)
  return _internal_concentration();
}
inline void SubstanceBolusData::unsafe_arena_set_allocated_concentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  concentration_ = concentration;
  if (concentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceBolusData.Concentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceBolusData::release_concentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceBolusData::unsafe_arena_release_concentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.Concentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceBolusData::_internal_mutable_concentration() {
  
  if (concentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    concentration_ = p;
  }
  return concentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceBolusData::mutable_concentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.Concentration)
  return _internal_mutable_concentration();
}
inline void SubstanceBolusData::set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  if (concentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration)->GetArena();
    if (message_arena != submessage_arena) {
      concentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concentration, submessage_arena);
    }
    
  } else {
    
  }
  concentration_ = concentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.Concentration)
}

// .pulse.cdm.bind.ScalarVolumeData Dose = 6;
inline bool SubstanceBolusData::_internal_has_dose() const {
  return this != internal_default_instance() && dose_ != nullptr;
}
inline bool SubstanceBolusData::has_dose() const {
  return _internal_has_dose();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceBolusData::_internal_dose() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = dose_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceBolusData::dose() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.Dose)
  return _internal_dose();
}
inline void SubstanceBolusData::unsafe_arena_set_allocated_dose(
    ::pulse::cdm::bind::ScalarVolumeData* dose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dose_);
  }
  dose_ = dose;
  if (dose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceBolusData.Dose)
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::release_dose() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = dose_;
  dose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::unsafe_arena_release_dose() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.Dose)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = dose_;
  dose_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::_internal_mutable_dose() {
  
  if (dose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    dose_ = p;
  }
  return dose_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::mutable_dose() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.Dose)
  return _internal_mutable_dose();
}
inline void SubstanceBolusData::set_allocated_dose(::pulse::cdm::bind::ScalarVolumeData* dose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dose_);
  }
  if (dose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dose)->GetArena();
    if (message_arena != submessage_arena) {
      dose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dose, submessage_arena);
    }
    
  } else {
    
  }
  dose_ = dose;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.Dose)
}

// .pulse.cdm.bind.ScalarVolumeData TotalInfusedDose = 7;
inline bool SubstanceBolusData::_internal_has_totalinfuseddose() const {
  return this != internal_default_instance() && totalinfuseddose_ != nullptr;
}
inline bool SubstanceBolusData::has_totalinfuseddose() const {
  return _internal_has_totalinfuseddose();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceBolusData::_internal_totalinfuseddose() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = totalinfuseddose_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceBolusData::totalinfuseddose() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceBolusData.TotalInfusedDose)
  return _internal_totalinfuseddose();
}
inline void SubstanceBolusData::unsafe_arena_set_allocated_totalinfuseddose(
    ::pulse::cdm::bind::ScalarVolumeData* totalinfuseddose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalinfuseddose_);
  }
  totalinfuseddose_ = totalinfuseddose;
  if (totalinfuseddose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceBolusData.TotalInfusedDose)
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::release_totalinfuseddose() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalinfuseddose_;
  totalinfuseddose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::unsafe_arena_release_totalinfuseddose() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceBolusData.TotalInfusedDose)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = totalinfuseddose_;
  totalinfuseddose_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::_internal_mutable_totalinfuseddose() {
  
  if (totalinfuseddose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    totalinfuseddose_ = p;
  }
  return totalinfuseddose_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceBolusData::mutable_totalinfuseddose() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceBolusData.TotalInfusedDose)
  return _internal_mutable_totalinfuseddose();
}
inline void SubstanceBolusData::set_allocated_totalinfuseddose(::pulse::cdm::bind::ScalarVolumeData* totalinfuseddose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalinfuseddose_);
  }
  if (totalinfuseddose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(totalinfuseddose)->GetArena();
    if (message_arena != submessage_arena) {
      totalinfuseddose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, totalinfuseddose, submessage_arena);
    }
    
  } else {
    
  }
  totalinfuseddose_ = totalinfuseddose;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceBolusData.TotalInfusedDose)
}

// -------------------------------------------------------------------

// SubstanceCompoundInfusionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool SubstanceCompoundInfusionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool SubstanceCompoundInfusionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void SubstanceCompoundInfusionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceCompoundInfusionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceCompoundInfusionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundInfusionData.PatientAction)
  return _internal_patientaction();
}
inline void SubstanceCompoundInfusionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceCompoundInfusionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceCompoundInfusionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceCompoundInfusionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceCompoundInfusionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceCompoundInfusionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundInfusionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void SubstanceCompoundInfusionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.PatientAction)
}

// string SubstanceCompound = 2;
inline void SubstanceCompoundInfusionData::clear_substancecompound() {
  substancecompound_.ClearToEmpty();
}
inline const std::string& SubstanceCompoundInfusionData::substancecompound() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
  return _internal_substancecompound();
}
inline void SubstanceCompoundInfusionData::set_substancecompound(const std::string& value) {
  _internal_set_substancecompound(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
}
inline std::string* SubstanceCompoundInfusionData::mutable_substancecompound() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
  return _internal_mutable_substancecompound();
}
inline const std::string& SubstanceCompoundInfusionData::_internal_substancecompound() const {
  return substancecompound_.Get();
}
inline void SubstanceCompoundInfusionData::_internal_set_substancecompound(const std::string& value) {
  
  substancecompound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceCompoundInfusionData::set_substancecompound(std::string&& value) {
  
  substancecompound_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
}
inline void SubstanceCompoundInfusionData::set_substancecompound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substancecompound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
}
inline void SubstanceCompoundInfusionData::set_substancecompound(const char* value,
    size_t size) {
  
  substancecompound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
}
inline std::string* SubstanceCompoundInfusionData::_internal_mutable_substancecompound() {
  
  return substancecompound_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceCompoundInfusionData::release_substancecompound() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
  return substancecompound_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceCompoundInfusionData::set_allocated_substancecompound(std::string* substancecompound) {
  if (substancecompound != nullptr) {
    
  } else {
    
  }
  substancecompound_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substancecompound,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.SubstanceCompound)
}

// .pulse.cdm.bind.ScalarVolumeData BagVolume = 3;
inline bool SubstanceCompoundInfusionData::_internal_has_bagvolume() const {
  return this != internal_default_instance() && bagvolume_ != nullptr;
}
inline bool SubstanceCompoundInfusionData::has_bagvolume() const {
  return _internal_has_bagvolume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceCompoundInfusionData::_internal_bagvolume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = bagvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SubstanceCompoundInfusionData::bagvolume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundInfusionData.BagVolume)
  return _internal_bagvolume();
}
inline void SubstanceCompoundInfusionData::unsafe_arena_set_allocated_bagvolume(
    ::pulse::cdm::bind::ScalarVolumeData* bagvolume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagvolume_);
  }
  bagvolume_ = bagvolume;
  if (bagvolume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.BagVolume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceCompoundInfusionData::release_bagvolume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = bagvolume_;
  bagvolume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceCompoundInfusionData::unsafe_arena_release_bagvolume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceCompoundInfusionData.BagVolume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = bagvolume_;
  bagvolume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceCompoundInfusionData::_internal_mutable_bagvolume() {
  
  if (bagvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    bagvolume_ = p;
  }
  return bagvolume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SubstanceCompoundInfusionData::mutable_bagvolume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundInfusionData.BagVolume)
  return _internal_mutable_bagvolume();
}
inline void SubstanceCompoundInfusionData::set_allocated_bagvolume(::pulse::cdm::bind::ScalarVolumeData* bagvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagvolume_);
  }
  if (bagvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagvolume)->GetArena();
    if (message_arena != submessage_arena) {
      bagvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bagvolume, submessage_arena);
    }
    
  } else {
    
  }
  bagvolume_ = bagvolume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.BagVolume)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
inline bool SubstanceCompoundInfusionData::_internal_has_rate() const {
  return this != internal_default_instance() && rate_ != nullptr;
}
inline bool SubstanceCompoundInfusionData::has_rate() const {
  return _internal_has_rate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceCompoundInfusionData::_internal_rate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceCompoundInfusionData::rate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceCompoundInfusionData.Rate)
  return _internal_rate();
}
inline void SubstanceCompoundInfusionData::unsafe_arena_set_allocated_rate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_);
  }
  rate_ = rate;
  if (rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.Rate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceCompoundInfusionData::release_rate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rate_;
  rate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceCompoundInfusionData::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceCompoundInfusionData.Rate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rate_;
  rate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceCompoundInfusionData::_internal_mutable_rate() {
  
  if (rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    rate_ = p;
  }
  return rate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceCompoundInfusionData::mutable_rate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceCompoundInfusionData.Rate)
  return _internal_mutable_rate();
}
inline void SubstanceCompoundInfusionData::set_allocated_rate(::pulse::cdm::bind::ScalarVolumePerTimeData* rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_);
  }
  if (rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate)->GetArena();
    if (message_arena != submessage_arena) {
      rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceCompoundInfusionData.Rate)
}

// -------------------------------------------------------------------

// SubstanceInfusionData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool SubstanceInfusionData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool SubstanceInfusionData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void SubstanceInfusionData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceInfusionData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& SubstanceInfusionData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceInfusionData.PatientAction)
  return _internal_patientaction();
}
inline void SubstanceInfusionData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceInfusionData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceInfusionData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceInfusionData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceInfusionData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceInfusionData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* SubstanceInfusionData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceInfusionData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void SubstanceInfusionData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceInfusionData.PatientAction)
}

// string Substance = 2;
inline void SubstanceInfusionData::clear_substance() {
  substance_.ClearToEmpty();
}
inline const std::string& SubstanceInfusionData::substance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceInfusionData.Substance)
  return _internal_substance();
}
inline void SubstanceInfusionData::set_substance(const std::string& value) {
  _internal_set_substance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SubstanceInfusionData.Substance)
}
inline std::string* SubstanceInfusionData::mutable_substance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceInfusionData.Substance)
  return _internal_mutable_substance();
}
inline const std::string& SubstanceInfusionData::_internal_substance() const {
  return substance_.Get();
}
inline void SubstanceInfusionData::_internal_set_substance(const std::string& value) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SubstanceInfusionData::set_substance(std::string&& value) {
  
  substance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.SubstanceInfusionData.Substance)
}
inline void SubstanceInfusionData::set_substance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.SubstanceInfusionData.Substance)
}
inline void SubstanceInfusionData::set_substance(const char* value,
    size_t size) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.SubstanceInfusionData.Substance)
}
inline std::string* SubstanceInfusionData::_internal_mutable_substance() {
  
  return substance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SubstanceInfusionData::release_substance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceInfusionData.Substance)
  return substance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubstanceInfusionData::set_allocated_substance(std::string* substance) {
  if (substance != nullptr) {
    
  } else {
    
  }
  substance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceInfusionData.Substance)
}

// .pulse.cdm.bind.ScalarMassPerVolumeData Concentration = 3;
inline bool SubstanceInfusionData::_internal_has_concentration() const {
  return this != internal_default_instance() && concentration_ != nullptr;
}
inline bool SubstanceInfusionData::has_concentration() const {
  return _internal_has_concentration();
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceInfusionData::_internal_concentration() const {
  const ::pulse::cdm::bind::ScalarMassPerVolumeData* p = concentration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerVolumeData&>(
      ::pulse::cdm::bind::_ScalarMassPerVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerVolumeData& SubstanceInfusionData::concentration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceInfusionData.Concentration)
  return _internal_concentration();
}
inline void SubstanceInfusionData::unsafe_arena_set_allocated_concentration(
    ::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  concentration_ = concentration;
  if (concentration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceInfusionData.Concentration)
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceInfusionData::release_concentration() {
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceInfusionData::unsafe_arena_release_concentration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceInfusionData.Concentration)
  
  ::pulse::cdm::bind::ScalarMassPerVolumeData* temp = concentration_;
  concentration_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceInfusionData::_internal_mutable_concentration() {
  
  if (concentration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerVolumeData>(GetArena());
    concentration_ = p;
  }
  return concentration_;
}
inline ::pulse::cdm::bind::ScalarMassPerVolumeData* SubstanceInfusionData::mutable_concentration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceInfusionData.Concentration)
  return _internal_mutable_concentration();
}
inline void SubstanceInfusionData::set_allocated_concentration(::pulse::cdm::bind::ScalarMassPerVolumeData* concentration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration_);
  }
  if (concentration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(concentration)->GetArena();
    if (message_arena != submessage_arena) {
      concentration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concentration, submessage_arena);
    }
    
  } else {
    
  }
  concentration_ = concentration;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceInfusionData.Concentration)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Rate = 4;
inline bool SubstanceInfusionData::_internal_has_rate() const {
  return this != internal_default_instance() && rate_ != nullptr;
}
inline bool SubstanceInfusionData::has_rate() const {
  return _internal_has_rate();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceInfusionData::_internal_rate() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SubstanceInfusionData::rate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SubstanceInfusionData.Rate)
  return _internal_rate();
}
inline void SubstanceInfusionData::unsafe_arena_set_allocated_rate(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_);
  }
  rate_ = rate;
  if (rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SubstanceInfusionData.Rate)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceInfusionData::release_rate() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rate_;
  rate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceInfusionData::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SubstanceInfusionData.Rate)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = rate_;
  rate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceInfusionData::_internal_mutable_rate() {
  
  if (rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    rate_ = p;
  }
  return rate_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SubstanceInfusionData::mutable_rate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SubstanceInfusionData.Rate)
  return _internal_mutable_rate();
}
inline void SubstanceInfusionData::set_allocated_rate(::pulse::cdm::bind::ScalarVolumePerTimeData* rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_);
  }
  if (rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate)->GetArena();
    if (message_arena != submessage_arena) {
      rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SubstanceInfusionData.Rate)
}

// -------------------------------------------------------------------

// SupplementalOxygenData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool SupplementalOxygenData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool SupplementalOxygenData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void SupplementalOxygenData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& SupplementalOxygenData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& SupplementalOxygenData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SupplementalOxygenData.PatientAction)
  return _internal_patientaction();
}
inline void SupplementalOxygenData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SupplementalOxygenData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* SupplementalOxygenData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SupplementalOxygenData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SupplementalOxygenData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* SupplementalOxygenData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* SupplementalOxygenData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SupplementalOxygenData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void SupplementalOxygenData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SupplementalOxygenData.PatientAction)
}

// .pulse.cdm.bind.SupplementalOxygenData.eDevice Device = 2;
inline void SupplementalOxygenData::clear_device() {
  device_ = 0;
}
inline ::pulse::cdm::bind::SupplementalOxygenData_eDevice SupplementalOxygenData::_internal_device() const {
  return static_cast< ::pulse::cdm::bind::SupplementalOxygenData_eDevice >(device_);
}
inline ::pulse::cdm::bind::SupplementalOxygenData_eDevice SupplementalOxygenData::device() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SupplementalOxygenData.Device)
  return _internal_device();
}
inline void SupplementalOxygenData::_internal_set_device(::pulse::cdm::bind::SupplementalOxygenData_eDevice value) {
  
  device_ = value;
}
inline void SupplementalOxygenData::set_device(::pulse::cdm::bind::SupplementalOxygenData_eDevice value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.SupplementalOxygenData.Device)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 3;
inline bool SupplementalOxygenData::_internal_has_flow() const {
  return this != internal_default_instance() && flow_ != nullptr;
}
inline bool SupplementalOxygenData::has_flow() const {
  return _internal_has_flow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SupplementalOxygenData::_internal_flow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = flow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& SupplementalOxygenData::flow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SupplementalOxygenData.Flow)
  return _internal_flow();
}
inline void SupplementalOxygenData::unsafe_arena_set_allocated_flow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  flow_ = flow;
  if (flow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SupplementalOxygenData.Flow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SupplementalOxygenData::release_flow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SupplementalOxygenData::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SupplementalOxygenData.Flow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = flow_;
  flow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SupplementalOxygenData::_internal_mutable_flow() {
  
  if (flow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    flow_ = p;
  }
  return flow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* SupplementalOxygenData::mutable_flow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SupplementalOxygenData.Flow)
  return _internal_mutable_flow();
}
inline void SupplementalOxygenData::set_allocated_flow(::pulse::cdm::bind::ScalarVolumePerTimeData* flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow_);
  }
  if (flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flow)->GetArena();
    if (message_arena != submessage_arena) {
      flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    
  } else {
    
  }
  flow_ = flow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SupplementalOxygenData.Flow)
}

// .pulse.cdm.bind.ScalarVolumeData Volume = 4;
inline bool SupplementalOxygenData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool SupplementalOxygenData::has_volume() const {
  return _internal_has_volume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SupplementalOxygenData::_internal_volume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& SupplementalOxygenData::volume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.SupplementalOxygenData.Volume)
  return _internal_volume();
}
inline void SupplementalOxygenData::unsafe_arena_set_allocated_volume(
    ::pulse::cdm::bind::ScalarVolumeData* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.SupplementalOxygenData.Volume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* SupplementalOxygenData::release_volume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SupplementalOxygenData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.SupplementalOxygenData.Volume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SupplementalOxygenData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* SupplementalOxygenData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.SupplementalOxygenData.Volume)
  return _internal_mutable_volume();
}
inline void SupplementalOxygenData::set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume)->GetArena();
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.SupplementalOxygenData.Volume)
}

// -------------------------------------------------------------------

// TensionPneumothoraxData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool TensionPneumothoraxData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool TensionPneumothoraxData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void TensionPneumothoraxData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& TensionPneumothoraxData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& TensionPneumothoraxData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TensionPneumothoraxData.PatientAction)
  return _internal_patientaction();
}
inline void TensionPneumothoraxData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TensionPneumothoraxData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* TensionPneumothoraxData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* TensionPneumothoraxData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TensionPneumothoraxData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* TensionPneumothoraxData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* TensionPneumothoraxData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TensionPneumothoraxData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void TensionPneumothoraxData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TensionPneumothoraxData.PatientAction)
}

// .pulse.cdm.bind.eGate Type = 2;
inline void TensionPneumothoraxData::clear_type() {
  type_ = 0;
}
inline ::pulse::cdm::bind::eGate TensionPneumothoraxData::_internal_type() const {
  return static_cast< ::pulse::cdm::bind::eGate >(type_);
}
inline ::pulse::cdm::bind::eGate TensionPneumothoraxData::type() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TensionPneumothoraxData.Type)
  return _internal_type();
}
inline void TensionPneumothoraxData::_internal_set_type(::pulse::cdm::bind::eGate value) {
  
  type_ = value;
}
inline void TensionPneumothoraxData::set_type(::pulse::cdm::bind::eGate value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TensionPneumothoraxData.Type)
}

// .pulse.cdm.bind.eSide Side = 3;
inline void TensionPneumothoraxData::clear_side() {
  side_ = 0;
}
inline ::pulse::cdm::bind::eSide TensionPneumothoraxData::_internal_side() const {
  return static_cast< ::pulse::cdm::bind::eSide >(side_);
}
inline ::pulse::cdm::bind::eSide TensionPneumothoraxData::side() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TensionPneumothoraxData.Side)
  return _internal_side();
}
inline void TensionPneumothoraxData::_internal_set_side(::pulse::cdm::bind::eSide value) {
  
  side_ = value;
}
inline void TensionPneumothoraxData::set_side(::pulse::cdm::bind::eSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.TensionPneumothoraxData.Side)
}

// .pulse.cdm.bind.Scalar0To1Data Severity = 4;
inline bool TensionPneumothoraxData::_internal_has_severity() const {
  return this != internal_default_instance() && severity_ != nullptr;
}
inline bool TensionPneumothoraxData::has_severity() const {
  return _internal_has_severity();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TensionPneumothoraxData::_internal_severity() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = severity_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& TensionPneumothoraxData::severity() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.TensionPneumothoraxData.Severity)
  return _internal_severity();
}
inline void TensionPneumothoraxData::unsafe_arena_set_allocated_severity(
    ::pulse::cdm::bind::Scalar0To1Data* severity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  severity_ = severity;
  if (severity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.TensionPneumothoraxData.Severity)
}
inline ::pulse::cdm::bind::Scalar0To1Data* TensionPneumothoraxData::release_severity() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TensionPneumothoraxData::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.TensionPneumothoraxData.Severity)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = severity_;
  severity_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TensionPneumothoraxData::_internal_mutable_severity() {
  
  if (severity_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    severity_ = p;
  }
  return severity_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* TensionPneumothoraxData::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.TensionPneumothoraxData.Severity)
  return _internal_mutable_severity();
}
inline void TensionPneumothoraxData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity_);
  }
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    
  } else {
    
  }
  severity_ = severity;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.TensionPneumothoraxData.Severity)
}

// -------------------------------------------------------------------

// UrinateData

// .pulse.cdm.bind.PatientActionData PatientAction = 1;
inline bool UrinateData::_internal_has_patientaction() const {
  return this != internal_default_instance() && patientaction_ != nullptr;
}
inline bool UrinateData::has_patientaction() const {
  return _internal_has_patientaction();
}
inline void UrinateData::clear_patientaction() {
  if (GetArena() == nullptr && patientaction_ != nullptr) {
    delete patientaction_;
  }
  patientaction_ = nullptr;
}
inline const ::pulse::cdm::bind::PatientActionData& UrinateData::_internal_patientaction() const {
  const ::pulse::cdm::bind::PatientActionData* p = patientaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::PatientActionData&>(
      ::pulse::cdm::bind::_PatientActionData_default_instance_);
}
inline const ::pulse::cdm::bind::PatientActionData& UrinateData::patientaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.UrinateData.PatientAction)
  return _internal_patientaction();
}
inline void UrinateData::unsafe_arena_set_allocated_patientaction(
    ::pulse::cdm::bind::PatientActionData* patientaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(patientaction_);
  }
  patientaction_ = patientaction;
  if (patientaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.UrinateData.PatientAction)
}
inline ::pulse::cdm::bind::PatientActionData* UrinateData::release_patientaction() {
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* UrinateData::unsafe_arena_release_patientaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.UrinateData.PatientAction)
  
  ::pulse::cdm::bind::PatientActionData* temp = patientaction_;
  patientaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::PatientActionData* UrinateData::_internal_mutable_patientaction() {
  
  if (patientaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::PatientActionData>(GetArena());
    patientaction_ = p;
  }
  return patientaction_;
}
inline ::pulse::cdm::bind::PatientActionData* UrinateData::mutable_patientaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.UrinateData.PatientAction)
  return _internal_mutable_patientaction();
}
inline void UrinateData::set_allocated_patientaction(::pulse::cdm::bind::PatientActionData* patientaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete patientaction_;
  }
  if (patientaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(patientaction);
    if (message_arena != submessage_arena) {
      patientaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patientaction, submessage_arena);
    }
    
  } else {
    
  }
  patientaction_ = patientaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.UrinateData.PatientAction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::BrainInjuryData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::BrainInjuryData_eType>() {
  return ::pulse::cdm::bind::BrainInjuryData_eType_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::HemorrhageData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::HemorrhageData_eType>() {
  return ::pulse::cdm::bind::HemorrhageData_eType_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::IntubationData_eType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::IntubationData_eType>() {
  return ::pulse::cdm::bind::IntubationData_eType_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::SubstanceBolusData_eRoute> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SubstanceBolusData_eRoute>() {
  return ::pulse::cdm::bind::SubstanceBolusData_eRoute_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::SupplementalOxygenData_eDevice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::SupplementalOxygenData_eDevice>() {
  return ::pulse::cdm::bind::SupplementalOxygenData_eDevice_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientActions_2eproto
