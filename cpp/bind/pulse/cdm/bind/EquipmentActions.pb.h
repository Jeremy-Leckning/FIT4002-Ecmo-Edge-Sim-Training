// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EquipmentActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/AnesthesiaMachineActions.pb.h"
#include "pulse/cdm/bind/InhalerActions.pb.h"
#include "pulse/cdm/bind/MechanicalVentilatorActions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEquipmentActionData;
class AnyEquipmentActionDataDefaultTypeInternal;
extern AnyEquipmentActionDataDefaultTypeInternal _AnyEquipmentActionData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnyEquipmentActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnyEquipmentActionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyEquipmentActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnyEquipmentActionData) */ {
 public:
  inline AnyEquipmentActionData() : AnyEquipmentActionData(nullptr) {}
  virtual ~AnyEquipmentActionData();

  AnyEquipmentActionData(const AnyEquipmentActionData& from);
  AnyEquipmentActionData(AnyEquipmentActionData&& from) noexcept
    : AnyEquipmentActionData() {
    *this = ::std::move(from);
  }

  inline AnyEquipmentActionData& operator=(const AnyEquipmentActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyEquipmentActionData& operator=(AnyEquipmentActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyEquipmentActionData& default_instance();

  enum ActionCase {
    kAnesthesiaMachineConfiguration = 1,
    kAnesthesiaMachineExpiratoryValveLeak = 2,
    kAnesthesiaMachineExpiratoryValveObstruction = 3,
    kAnesthesiaMachineInspiratoryValveLeak = 4,
    kAnesthesiaMachineInspiratoryValveObstruction = 5,
    kAnesthesiaMachineMaskLeak = 6,
    kAnesthesiaMachineSodaLimeFailure = 7,
    kAnesthesiaMachineTubeCuffLeak = 8,
    kAnesthesiaMachineVaporizerFailure = 9,
    kAnesthesiaMachineVentilatorPressureLoss = 10,
    kAnesthesiaMachineYPieceDisconnect = 11,
    kAnesthesiaMachineOxygenWallPortPressureLoss = 12,
    kAnesthesiaMachineOxygenTankPressureLoss = 13,
    kInhalerConfiguration = 101,
    kMechanicalVentilatorConfiguration = 201,
    ACTION_NOT_SET = 0,
  };

  static inline const AnyEquipmentActionData* internal_default_instance() {
    return reinterpret_cast<const AnyEquipmentActionData*>(
               &_AnyEquipmentActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnyEquipmentActionData& a, AnyEquipmentActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyEquipmentActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyEquipmentActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyEquipmentActionData* New() const final {
    return CreateMaybeMessage<AnyEquipmentActionData>(nullptr);
  }

  AnyEquipmentActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyEquipmentActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyEquipmentActionData& from);
  void MergeFrom(const AnyEquipmentActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyEquipmentActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnyEquipmentActionData";
  }
  protected:
  explicit AnyEquipmentActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnesthesiaMachineConfigurationFieldNumber = 1,
    kAnesthesiaMachineExpiratoryValveLeakFieldNumber = 2,
    kAnesthesiaMachineExpiratoryValveObstructionFieldNumber = 3,
    kAnesthesiaMachineInspiratoryValveLeakFieldNumber = 4,
    kAnesthesiaMachineInspiratoryValveObstructionFieldNumber = 5,
    kAnesthesiaMachineMaskLeakFieldNumber = 6,
    kAnesthesiaMachineSodaLimeFailureFieldNumber = 7,
    kAnesthesiaMachineTubeCuffLeakFieldNumber = 8,
    kAnesthesiaMachineVaporizerFailureFieldNumber = 9,
    kAnesthesiaMachineVentilatorPressureLossFieldNumber = 10,
    kAnesthesiaMachineYPieceDisconnectFieldNumber = 11,
    kAnesthesiaMachineOxygenWallPortPressureLossFieldNumber = 12,
    kAnesthesiaMachineOxygenTankPressureLossFieldNumber = 13,
    kInhalerConfigurationFieldNumber = 101,
    kMechanicalVentilatorConfigurationFieldNumber = 201,
  };
  // .pulse.cdm.bind.AnesthesiaMachineConfigurationData AnesthesiaMachineConfiguration = 1;
  bool has_anesthesiamachineconfiguration() const;
  private:
  bool _internal_has_anesthesiamachineconfiguration() const;
  public:
  void clear_anesthesiamachineconfiguration();
  const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& anesthesiamachineconfiguration() const;
  ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* release_anesthesiamachineconfiguration();
  ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* mutable_anesthesiamachineconfiguration();
  void set_allocated_anesthesiamachineconfiguration(::pulse::cdm::bind::AnesthesiaMachineConfigurationData* anesthesiamachineconfiguration);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& _internal_anesthesiamachineconfiguration() const;
  ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* _internal_mutable_anesthesiamachineconfiguration();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineconfiguration(
      ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* anesthesiamachineconfiguration);
  ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* unsafe_arena_release_anesthesiamachineconfiguration();

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData AnesthesiaMachineExpiratoryValveLeak = 2;
  bool has_anesthesiamachineexpiratoryvalveleak() const;
  private:
  bool _internal_has_anesthesiamachineexpiratoryvalveleak() const;
  public:
  void clear_anesthesiamachineexpiratoryvalveleak();
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& anesthesiamachineexpiratoryvalveleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* release_anesthesiamachineexpiratoryvalveleak();
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* mutable_anesthesiamachineexpiratoryvalveleak();
  void set_allocated_anesthesiamachineexpiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* anesthesiamachineexpiratoryvalveleak);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& _internal_anesthesiamachineexpiratoryvalveleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* _internal_mutable_anesthesiamachineexpiratoryvalveleak();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineexpiratoryvalveleak(
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* anesthesiamachineexpiratoryvalveleak);
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* unsafe_arena_release_anesthesiamachineexpiratoryvalveleak();

  // .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData AnesthesiaMachineExpiratoryValveObstruction = 3;
  bool has_anesthesiamachineexpiratoryvalveobstruction() const;
  private:
  bool _internal_has_anesthesiamachineexpiratoryvalveobstruction() const;
  public:
  void clear_anesthesiamachineexpiratoryvalveobstruction();
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& anesthesiamachineexpiratoryvalveobstruction() const;
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* release_anesthesiamachineexpiratoryvalveobstruction();
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* mutable_anesthesiamachineexpiratoryvalveobstruction();
  void set_allocated_anesthesiamachineexpiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* anesthesiamachineexpiratoryvalveobstruction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& _internal_anesthesiamachineexpiratoryvalveobstruction() const;
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* _internal_mutable_anesthesiamachineexpiratoryvalveobstruction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineexpiratoryvalveobstruction(
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* anesthesiamachineexpiratoryvalveobstruction);
  ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* unsafe_arena_release_anesthesiamachineexpiratoryvalveobstruction();

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData AnesthesiaMachineInspiratoryValveLeak = 4;
  bool has_anesthesiamachineinspiratoryvalveleak() const;
  private:
  bool _internal_has_anesthesiamachineinspiratoryvalveleak() const;
  public:
  void clear_anesthesiamachineinspiratoryvalveleak();
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& anesthesiamachineinspiratoryvalveleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* release_anesthesiamachineinspiratoryvalveleak();
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* mutable_anesthesiamachineinspiratoryvalveleak();
  void set_allocated_anesthesiamachineinspiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* anesthesiamachineinspiratoryvalveleak);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& _internal_anesthesiamachineinspiratoryvalveleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* _internal_mutable_anesthesiamachineinspiratoryvalveleak();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineinspiratoryvalveleak(
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* anesthesiamachineinspiratoryvalveleak);
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* unsafe_arena_release_anesthesiamachineinspiratoryvalveleak();

  // .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData AnesthesiaMachineInspiratoryValveObstruction = 5;
  bool has_anesthesiamachineinspiratoryvalveobstruction() const;
  private:
  bool _internal_has_anesthesiamachineinspiratoryvalveobstruction() const;
  public:
  void clear_anesthesiamachineinspiratoryvalveobstruction();
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& anesthesiamachineinspiratoryvalveobstruction() const;
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* release_anesthesiamachineinspiratoryvalveobstruction();
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* mutable_anesthesiamachineinspiratoryvalveobstruction();
  void set_allocated_anesthesiamachineinspiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* anesthesiamachineinspiratoryvalveobstruction);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& _internal_anesthesiamachineinspiratoryvalveobstruction() const;
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* _internal_mutable_anesthesiamachineinspiratoryvalveobstruction();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineinspiratoryvalveobstruction(
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* anesthesiamachineinspiratoryvalveobstruction);
  ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* unsafe_arena_release_anesthesiamachineinspiratoryvalveobstruction();

  // .pulse.cdm.bind.AnesthesiaMachineMaskLeakData AnesthesiaMachineMaskLeak = 6;
  bool has_anesthesiamachinemaskleak() const;
  private:
  bool _internal_has_anesthesiamachinemaskleak() const;
  public:
  void clear_anesthesiamachinemaskleak();
  const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& anesthesiamachinemaskleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* release_anesthesiamachinemaskleak();
  ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* mutable_anesthesiamachinemaskleak();
  void set_allocated_anesthesiamachinemaskleak(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* anesthesiamachinemaskleak);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& _internal_anesthesiamachinemaskleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* _internal_mutable_anesthesiamachinemaskleak();
  public:
  void unsafe_arena_set_allocated_anesthesiamachinemaskleak(
      ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* anesthesiamachinemaskleak);
  ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* unsafe_arena_release_anesthesiamachinemaskleak();

  // .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData AnesthesiaMachineSodaLimeFailure = 7;
  bool has_anesthesiamachinesodalimefailure() const;
  private:
  bool _internal_has_anesthesiamachinesodalimefailure() const;
  public:
  void clear_anesthesiamachinesodalimefailure();
  const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& anesthesiamachinesodalimefailure() const;
  ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* release_anesthesiamachinesodalimefailure();
  ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* mutable_anesthesiamachinesodalimefailure();
  void set_allocated_anesthesiamachinesodalimefailure(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* anesthesiamachinesodalimefailure);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& _internal_anesthesiamachinesodalimefailure() const;
  ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* _internal_mutable_anesthesiamachinesodalimefailure();
  public:
  void unsafe_arena_set_allocated_anesthesiamachinesodalimefailure(
      ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* anesthesiamachinesodalimefailure);
  ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* unsafe_arena_release_anesthesiamachinesodalimefailure();

  // .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData AnesthesiaMachineTubeCuffLeak = 8;
  bool has_anesthesiamachinetubecuffleak() const;
  private:
  bool _internal_has_anesthesiamachinetubecuffleak() const;
  public:
  void clear_anesthesiamachinetubecuffleak();
  const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& anesthesiamachinetubecuffleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* release_anesthesiamachinetubecuffleak();
  ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* mutable_anesthesiamachinetubecuffleak();
  void set_allocated_anesthesiamachinetubecuffleak(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* anesthesiamachinetubecuffleak);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& _internal_anesthesiamachinetubecuffleak() const;
  ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* _internal_mutable_anesthesiamachinetubecuffleak();
  public:
  void unsafe_arena_set_allocated_anesthesiamachinetubecuffleak(
      ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* anesthesiamachinetubecuffleak);
  ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* unsafe_arena_release_anesthesiamachinetubecuffleak();

  // .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData AnesthesiaMachineVaporizerFailure = 9;
  bool has_anesthesiamachinevaporizerfailure() const;
  private:
  bool _internal_has_anesthesiamachinevaporizerfailure() const;
  public:
  void clear_anesthesiamachinevaporizerfailure();
  const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& anesthesiamachinevaporizerfailure() const;
  ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* release_anesthesiamachinevaporizerfailure();
  ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* mutable_anesthesiamachinevaporizerfailure();
  void set_allocated_anesthesiamachinevaporizerfailure(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* anesthesiamachinevaporizerfailure);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& _internal_anesthesiamachinevaporizerfailure() const;
  ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* _internal_mutable_anesthesiamachinevaporizerfailure();
  public:
  void unsafe_arena_set_allocated_anesthesiamachinevaporizerfailure(
      ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* anesthesiamachinevaporizerfailure);
  ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* unsafe_arena_release_anesthesiamachinevaporizerfailure();

  // .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData AnesthesiaMachineVentilatorPressureLoss = 10;
  bool has_anesthesiamachineventilatorpressureloss() const;
  private:
  bool _internal_has_anesthesiamachineventilatorpressureloss() const;
  public:
  void clear_anesthesiamachineventilatorpressureloss();
  const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& anesthesiamachineventilatorpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* release_anesthesiamachineventilatorpressureloss();
  ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* mutable_anesthesiamachineventilatorpressureloss();
  void set_allocated_anesthesiamachineventilatorpressureloss(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* anesthesiamachineventilatorpressureloss);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& _internal_anesthesiamachineventilatorpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* _internal_mutable_anesthesiamachineventilatorpressureloss();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineventilatorpressureloss(
      ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* anesthesiamachineventilatorpressureloss);
  ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* unsafe_arena_release_anesthesiamachineventilatorpressureloss();

  // .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData AnesthesiaMachineYPieceDisconnect = 11;
  bool has_anesthesiamachineypiecedisconnect() const;
  private:
  bool _internal_has_anesthesiamachineypiecedisconnect() const;
  public:
  void clear_anesthesiamachineypiecedisconnect();
  const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& anesthesiamachineypiecedisconnect() const;
  ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* release_anesthesiamachineypiecedisconnect();
  ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* mutable_anesthesiamachineypiecedisconnect();
  void set_allocated_anesthesiamachineypiecedisconnect(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* anesthesiamachineypiecedisconnect);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& _internal_anesthesiamachineypiecedisconnect() const;
  ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* _internal_mutable_anesthesiamachineypiecedisconnect();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineypiecedisconnect(
      ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* anesthesiamachineypiecedisconnect);
  ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* unsafe_arena_release_anesthesiamachineypiecedisconnect();

  // .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData AnesthesiaMachineOxygenWallPortPressureLoss = 12;
  bool has_anesthesiamachineoxygenwallportpressureloss() const;
  private:
  bool _internal_has_anesthesiamachineoxygenwallportpressureloss() const;
  public:
  void clear_anesthesiamachineoxygenwallportpressureloss();
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& anesthesiamachineoxygenwallportpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* release_anesthesiamachineoxygenwallportpressureloss();
  ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* mutable_anesthesiamachineoxygenwallportpressureloss();
  void set_allocated_anesthesiamachineoxygenwallportpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* anesthesiamachineoxygenwallportpressureloss);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& _internal_anesthesiamachineoxygenwallportpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* _internal_mutable_anesthesiamachineoxygenwallportpressureloss();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineoxygenwallportpressureloss(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* anesthesiamachineoxygenwallportpressureloss);
  ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* unsafe_arena_release_anesthesiamachineoxygenwallportpressureloss();

  // .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData AnesthesiaMachineOxygenTankPressureLoss = 13;
  bool has_anesthesiamachineoxygentankpressureloss() const;
  private:
  bool _internal_has_anesthesiamachineoxygentankpressureloss() const;
  public:
  void clear_anesthesiamachineoxygentankpressureloss();
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& anesthesiamachineoxygentankpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* release_anesthesiamachineoxygentankpressureloss();
  ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* mutable_anesthesiamachineoxygentankpressureloss();
  void set_allocated_anesthesiamachineoxygentankpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* anesthesiamachineoxygentankpressureloss);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& _internal_anesthesiamachineoxygentankpressureloss() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* _internal_mutable_anesthesiamachineoxygentankpressureloss();
  public:
  void unsafe_arena_set_allocated_anesthesiamachineoxygentankpressureloss(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* anesthesiamachineoxygentankpressureloss);
  ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* unsafe_arena_release_anesthesiamachineoxygentankpressureloss();

  // .pulse.cdm.bind.InhalerConfigurationData InhalerConfiguration = 101;
  bool has_inhalerconfiguration() const;
  private:
  bool _internal_has_inhalerconfiguration() const;
  public:
  void clear_inhalerconfiguration();
  const ::pulse::cdm::bind::InhalerConfigurationData& inhalerconfiguration() const;
  ::pulse::cdm::bind::InhalerConfigurationData* release_inhalerconfiguration();
  ::pulse::cdm::bind::InhalerConfigurationData* mutable_inhalerconfiguration();
  void set_allocated_inhalerconfiguration(::pulse::cdm::bind::InhalerConfigurationData* inhalerconfiguration);
  private:
  const ::pulse::cdm::bind::InhalerConfigurationData& _internal_inhalerconfiguration() const;
  ::pulse::cdm::bind::InhalerConfigurationData* _internal_mutable_inhalerconfiguration();
  public:
  void unsafe_arena_set_allocated_inhalerconfiguration(
      ::pulse::cdm::bind::InhalerConfigurationData* inhalerconfiguration);
  ::pulse::cdm::bind::InhalerConfigurationData* unsafe_arena_release_inhalerconfiguration();

  // .pulse.cdm.bind.MechanicalVentilatorConfigurationData MechanicalVentilatorConfiguration = 201;
  bool has_mechanicalventilatorconfiguration() const;
  private:
  bool _internal_has_mechanicalventilatorconfiguration() const;
  public:
  void clear_mechanicalventilatorconfiguration();
  const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData& mechanicalventilatorconfiguration() const;
  ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* release_mechanicalventilatorconfiguration();
  ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mutable_mechanicalventilatorconfiguration();
  void set_allocated_mechanicalventilatorconfiguration(::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mechanicalventilatorconfiguration);
  private:
  const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData& _internal_mechanicalventilatorconfiguration() const;
  ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* _internal_mutable_mechanicalventilatorconfiguration();
  public:
  void unsafe_arena_set_allocated_mechanicalventilatorconfiguration(
      ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mechanicalventilatorconfiguration);
  ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* unsafe_arena_release_mechanicalventilatorconfiguration();

  void clear_Action();
  ActionCase Action_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnyEquipmentActionData)
 private:
  class _Internal;
  void set_has_anesthesiamachineconfiguration();
  void set_has_anesthesiamachineexpiratoryvalveleak();
  void set_has_anesthesiamachineexpiratoryvalveobstruction();
  void set_has_anesthesiamachineinspiratoryvalveleak();
  void set_has_anesthesiamachineinspiratoryvalveobstruction();
  void set_has_anesthesiamachinemaskleak();
  void set_has_anesthesiamachinesodalimefailure();
  void set_has_anesthesiamachinetubecuffleak();
  void set_has_anesthesiamachinevaporizerfailure();
  void set_has_anesthesiamachineventilatorpressureloss();
  void set_has_anesthesiamachineypiecedisconnect();
  void set_has_anesthesiamachineoxygenwallportpressureloss();
  void set_has_anesthesiamachineoxygentankpressureloss();
  void set_has_inhalerconfiguration();
  void set_has_mechanicalventilatorconfiguration();

  inline bool has_Action() const;
  inline void clear_has_Action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* anesthesiamachineconfiguration_;
    ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* anesthesiamachineexpiratoryvalveleak_;
    ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* anesthesiamachineexpiratoryvalveobstruction_;
    ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* anesthesiamachineinspiratoryvalveleak_;
    ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* anesthesiamachineinspiratoryvalveobstruction_;
    ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* anesthesiamachinemaskleak_;
    ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* anesthesiamachinesodalimefailure_;
    ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* anesthesiamachinetubecuffleak_;
    ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* anesthesiamachinevaporizerfailure_;
    ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* anesthesiamachineventilatorpressureloss_;
    ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* anesthesiamachineypiecedisconnect_;
    ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* anesthesiamachineoxygenwallportpressureloss_;
    ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* anesthesiamachineoxygentankpressureloss_;
    ::pulse::cdm::bind::InhalerConfigurationData* inhalerconfiguration_;
    ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mechanicalventilatorconfiguration_;
  } Action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnyEquipmentActionData

// .pulse.cdm.bind.AnesthesiaMachineConfigurationData AnesthesiaMachineConfiguration = 1;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineconfiguration() const {
  return Action_case() == kAnesthesiaMachineConfiguration;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineconfiguration() const {
  return _internal_has_anesthesiamachineconfiguration();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineconfiguration() {
  _oneof_case_[0] = kAnesthesiaMachineConfiguration;
}
inline ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* AnyEquipmentActionData::release_anesthesiamachineconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
  if (_internal_has_anesthesiamachineconfiguration()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* temp = Action_.anesthesiamachineconfiguration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& AnyEquipmentActionData::_internal_anesthesiamachineconfiguration() const {
  return _internal_has_anesthesiamachineconfiguration()
      ? *Action_.anesthesiamachineconfiguration_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineConfigurationData&>(::pulse::cdm::bind::_AnesthesiaMachineConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineConfigurationData& AnyEquipmentActionData::anesthesiamachineconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
  return _internal_anesthesiamachineconfiguration();
}
inline ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineconfiguration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
  if (_internal_has_anesthesiamachineconfiguration()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* temp = Action_.anesthesiamachineconfiguration_;
    Action_.anesthesiamachineconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineconfiguration(::pulse::cdm::bind::AnesthesiaMachineConfigurationData* anesthesiamachineconfiguration) {
  clear_Action();
  if (anesthesiamachineconfiguration) {
    set_has_anesthesiamachineconfiguration();
    Action_.anesthesiamachineconfiguration_ = anesthesiamachineconfiguration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
}
inline ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineconfiguration() {
  if (!_internal_has_anesthesiamachineconfiguration()) {
    clear_Action();
    set_has_anesthesiamachineconfiguration();
    Action_.anesthesiamachineconfiguration_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineConfigurationData >(GetArena());
  }
  return Action_.anesthesiamachineconfiguration_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineConfigurationData* AnyEquipmentActionData::mutable_anesthesiamachineconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineConfiguration)
  return _internal_mutable_anesthesiamachineconfiguration();
}

// .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveLeakData AnesthesiaMachineExpiratoryValveLeak = 2;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineexpiratoryvalveleak() const {
  return Action_case() == kAnesthesiaMachineExpiratoryValveLeak;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineexpiratoryvalveleak() const {
  return _internal_has_anesthesiamachineexpiratoryvalveleak();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineexpiratoryvalveleak() {
  _oneof_case_[0] = kAnesthesiaMachineExpiratoryValveLeak;
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* AnyEquipmentActionData::release_anesthesiamachineexpiratoryvalveleak() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
  if (_internal_has_anesthesiamachineexpiratoryvalveleak()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* temp = Action_.anesthesiamachineexpiratoryvalveleak_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineexpiratoryvalveleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& AnyEquipmentActionData::_internal_anesthesiamachineexpiratoryvalveleak() const {
  return _internal_has_anesthesiamachineexpiratoryvalveleak()
      ? *Action_.anesthesiamachineexpiratoryvalveleak_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData&>(::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveLeakData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData& AnyEquipmentActionData::anesthesiamachineexpiratoryvalveleak() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
  return _internal_anesthesiamachineexpiratoryvalveleak();
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineexpiratoryvalveleak() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
  if (_internal_has_anesthesiamachineexpiratoryvalveleak()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* temp = Action_.anesthesiamachineexpiratoryvalveleak_;
    Action_.anesthesiamachineexpiratoryvalveleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineexpiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* anesthesiamachineexpiratoryvalveleak) {
  clear_Action();
  if (anesthesiamachineexpiratoryvalveleak) {
    set_has_anesthesiamachineexpiratoryvalveleak();
    Action_.anesthesiamachineexpiratoryvalveleak_ = anesthesiamachineexpiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineexpiratoryvalveleak() {
  if (!_internal_has_anesthesiamachineexpiratoryvalveleak()) {
    clear_Action();
    set_has_anesthesiamachineexpiratoryvalveleak();
    Action_.anesthesiamachineexpiratoryvalveleak_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData >(GetArena());
  }
  return Action_.anesthesiamachineexpiratoryvalveleak_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveLeakData* AnyEquipmentActionData::mutable_anesthesiamachineexpiratoryvalveleak() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveLeak)
  return _internal_mutable_anesthesiamachineexpiratoryvalveleak();
}

// .pulse.cdm.bind.AnesthesiaMachineExpiratoryValveObstructionData AnesthesiaMachineExpiratoryValveObstruction = 3;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineexpiratoryvalveobstruction() const {
  return Action_case() == kAnesthesiaMachineExpiratoryValveObstruction;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineexpiratoryvalveobstruction() const {
  return _internal_has_anesthesiamachineexpiratoryvalveobstruction();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineexpiratoryvalveobstruction() {
  _oneof_case_[0] = kAnesthesiaMachineExpiratoryValveObstruction;
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* AnyEquipmentActionData::release_anesthesiamachineexpiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
  if (_internal_has_anesthesiamachineexpiratoryvalveobstruction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* temp = Action_.anesthesiamachineexpiratoryvalveobstruction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineexpiratoryvalveobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& AnyEquipmentActionData::_internal_anesthesiamachineexpiratoryvalveobstruction() const {
  return _internal_has_anesthesiamachineexpiratoryvalveobstruction()
      ? *Action_.anesthesiamachineexpiratoryvalveobstruction_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData&>(::pulse::cdm::bind::_AnesthesiaMachineExpiratoryValveObstructionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData& AnyEquipmentActionData::anesthesiamachineexpiratoryvalveobstruction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
  return _internal_anesthesiamachineexpiratoryvalveobstruction();
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineexpiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
  if (_internal_has_anesthesiamachineexpiratoryvalveobstruction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* temp = Action_.anesthesiamachineexpiratoryvalveobstruction_;
    Action_.anesthesiamachineexpiratoryvalveobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineexpiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* anesthesiamachineexpiratoryvalveobstruction) {
  clear_Action();
  if (anesthesiamachineexpiratoryvalveobstruction) {
    set_has_anesthesiamachineexpiratoryvalveobstruction();
    Action_.anesthesiamachineexpiratoryvalveobstruction_ = anesthesiamachineexpiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineexpiratoryvalveobstruction() {
  if (!_internal_has_anesthesiamachineexpiratoryvalveobstruction()) {
    clear_Action();
    set_has_anesthesiamachineexpiratoryvalveobstruction();
    Action_.anesthesiamachineexpiratoryvalveobstruction_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData >(GetArena());
  }
  return Action_.anesthesiamachineexpiratoryvalveobstruction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineExpiratoryValveObstructionData* AnyEquipmentActionData::mutable_anesthesiamachineexpiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineExpiratoryValveObstruction)
  return _internal_mutable_anesthesiamachineexpiratoryvalveobstruction();
}

// .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveLeakData AnesthesiaMachineInspiratoryValveLeak = 4;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineinspiratoryvalveleak() const {
  return Action_case() == kAnesthesiaMachineInspiratoryValveLeak;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineinspiratoryvalveleak() const {
  return _internal_has_anesthesiamachineinspiratoryvalveleak();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineinspiratoryvalveleak() {
  _oneof_case_[0] = kAnesthesiaMachineInspiratoryValveLeak;
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* AnyEquipmentActionData::release_anesthesiamachineinspiratoryvalveleak() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
  if (_internal_has_anesthesiamachineinspiratoryvalveleak()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* temp = Action_.anesthesiamachineinspiratoryvalveleak_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineinspiratoryvalveleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& AnyEquipmentActionData::_internal_anesthesiamachineinspiratoryvalveleak() const {
  return _internal_has_anesthesiamachineinspiratoryvalveleak()
      ? *Action_.anesthesiamachineinspiratoryvalveleak_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData&>(::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveLeakData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData& AnyEquipmentActionData::anesthesiamachineinspiratoryvalveleak() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
  return _internal_anesthesiamachineinspiratoryvalveleak();
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineinspiratoryvalveleak() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
  if (_internal_has_anesthesiamachineinspiratoryvalveleak()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* temp = Action_.anesthesiamachineinspiratoryvalveleak_;
    Action_.anesthesiamachineinspiratoryvalveleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineinspiratoryvalveleak(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* anesthesiamachineinspiratoryvalveleak) {
  clear_Action();
  if (anesthesiamachineinspiratoryvalveleak) {
    set_has_anesthesiamachineinspiratoryvalveleak();
    Action_.anesthesiamachineinspiratoryvalveleak_ = anesthesiamachineinspiratoryvalveleak;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineinspiratoryvalveleak() {
  if (!_internal_has_anesthesiamachineinspiratoryvalveleak()) {
    clear_Action();
    set_has_anesthesiamachineinspiratoryvalveleak();
    Action_.anesthesiamachineinspiratoryvalveleak_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData >(GetArena());
  }
  return Action_.anesthesiamachineinspiratoryvalveleak_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveLeakData* AnyEquipmentActionData::mutable_anesthesiamachineinspiratoryvalveleak() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveLeak)
  return _internal_mutable_anesthesiamachineinspiratoryvalveleak();
}

// .pulse.cdm.bind.AnesthesiaMachineInspiratoryValveObstructionData AnesthesiaMachineInspiratoryValveObstruction = 5;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineinspiratoryvalveobstruction() const {
  return Action_case() == kAnesthesiaMachineInspiratoryValveObstruction;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineinspiratoryvalveobstruction() const {
  return _internal_has_anesthesiamachineinspiratoryvalveobstruction();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineinspiratoryvalveobstruction() {
  _oneof_case_[0] = kAnesthesiaMachineInspiratoryValveObstruction;
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* AnyEquipmentActionData::release_anesthesiamachineinspiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
  if (_internal_has_anesthesiamachineinspiratoryvalveobstruction()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* temp = Action_.anesthesiamachineinspiratoryvalveobstruction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineinspiratoryvalveobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& AnyEquipmentActionData::_internal_anesthesiamachineinspiratoryvalveobstruction() const {
  return _internal_has_anesthesiamachineinspiratoryvalveobstruction()
      ? *Action_.anesthesiamachineinspiratoryvalveobstruction_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData&>(::pulse::cdm::bind::_AnesthesiaMachineInspiratoryValveObstructionData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData& AnyEquipmentActionData::anesthesiamachineinspiratoryvalveobstruction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
  return _internal_anesthesiamachineinspiratoryvalveobstruction();
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineinspiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
  if (_internal_has_anesthesiamachineinspiratoryvalveobstruction()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* temp = Action_.anesthesiamachineinspiratoryvalveobstruction_;
    Action_.anesthesiamachineinspiratoryvalveobstruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineinspiratoryvalveobstruction(::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* anesthesiamachineinspiratoryvalveobstruction) {
  clear_Action();
  if (anesthesiamachineinspiratoryvalveobstruction) {
    set_has_anesthesiamachineinspiratoryvalveobstruction();
    Action_.anesthesiamachineinspiratoryvalveobstruction_ = anesthesiamachineinspiratoryvalveobstruction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineinspiratoryvalveobstruction() {
  if (!_internal_has_anesthesiamachineinspiratoryvalveobstruction()) {
    clear_Action();
    set_has_anesthesiamachineinspiratoryvalveobstruction();
    Action_.anesthesiamachineinspiratoryvalveobstruction_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData >(GetArena());
  }
  return Action_.anesthesiamachineinspiratoryvalveobstruction_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineInspiratoryValveObstructionData* AnyEquipmentActionData::mutable_anesthesiamachineinspiratoryvalveobstruction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineInspiratoryValveObstruction)
  return _internal_mutable_anesthesiamachineinspiratoryvalveobstruction();
}

// .pulse.cdm.bind.AnesthesiaMachineMaskLeakData AnesthesiaMachineMaskLeak = 6;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachinemaskleak() const {
  return Action_case() == kAnesthesiaMachineMaskLeak;
}
inline bool AnyEquipmentActionData::has_anesthesiamachinemaskleak() const {
  return _internal_has_anesthesiamachinemaskleak();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachinemaskleak() {
  _oneof_case_[0] = kAnesthesiaMachineMaskLeak;
}
inline ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* AnyEquipmentActionData::release_anesthesiamachinemaskleak() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
  if (_internal_has_anesthesiamachinemaskleak()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* temp = Action_.anesthesiamachinemaskleak_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachinemaskleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& AnyEquipmentActionData::_internal_anesthesiamachinemaskleak() const {
  return _internal_has_anesthesiamachinemaskleak()
      ? *Action_.anesthesiamachinemaskleak_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData&>(::pulse::cdm::bind::_AnesthesiaMachineMaskLeakData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData& AnyEquipmentActionData::anesthesiamachinemaskleak() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
  return _internal_anesthesiamachinemaskleak();
}
inline ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachinemaskleak() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
  if (_internal_has_anesthesiamachinemaskleak()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* temp = Action_.anesthesiamachinemaskleak_;
    Action_.anesthesiamachinemaskleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachinemaskleak(::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* anesthesiamachinemaskleak) {
  clear_Action();
  if (anesthesiamachinemaskleak) {
    set_has_anesthesiamachinemaskleak();
    Action_.anesthesiamachinemaskleak_ = anesthesiamachinemaskleak;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
}
inline ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* AnyEquipmentActionData::_internal_mutable_anesthesiamachinemaskleak() {
  if (!_internal_has_anesthesiamachinemaskleak()) {
    clear_Action();
    set_has_anesthesiamachinemaskleak();
    Action_.anesthesiamachinemaskleak_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData >(GetArena());
  }
  return Action_.anesthesiamachinemaskleak_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineMaskLeakData* AnyEquipmentActionData::mutable_anesthesiamachinemaskleak() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineMaskLeak)
  return _internal_mutable_anesthesiamachinemaskleak();
}

// .pulse.cdm.bind.AnesthesiaMachineSodaLimeFailureData AnesthesiaMachineSodaLimeFailure = 7;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachinesodalimefailure() const {
  return Action_case() == kAnesthesiaMachineSodaLimeFailure;
}
inline bool AnyEquipmentActionData::has_anesthesiamachinesodalimefailure() const {
  return _internal_has_anesthesiamachinesodalimefailure();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachinesodalimefailure() {
  _oneof_case_[0] = kAnesthesiaMachineSodaLimeFailure;
}
inline ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* AnyEquipmentActionData::release_anesthesiamachinesodalimefailure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
  if (_internal_has_anesthesiamachinesodalimefailure()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* temp = Action_.anesthesiamachinesodalimefailure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachinesodalimefailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& AnyEquipmentActionData::_internal_anesthesiamachinesodalimefailure() const {
  return _internal_has_anesthesiamachinesodalimefailure()
      ? *Action_.anesthesiamachinesodalimefailure_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData&>(::pulse::cdm::bind::_AnesthesiaMachineSodaLimeFailureData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData& AnyEquipmentActionData::anesthesiamachinesodalimefailure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
  return _internal_anesthesiamachinesodalimefailure();
}
inline ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachinesodalimefailure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
  if (_internal_has_anesthesiamachinesodalimefailure()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* temp = Action_.anesthesiamachinesodalimefailure_;
    Action_.anesthesiamachinesodalimefailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachinesodalimefailure(::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* anesthesiamachinesodalimefailure) {
  clear_Action();
  if (anesthesiamachinesodalimefailure) {
    set_has_anesthesiamachinesodalimefailure();
    Action_.anesthesiamachinesodalimefailure_ = anesthesiamachinesodalimefailure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
}
inline ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* AnyEquipmentActionData::_internal_mutable_anesthesiamachinesodalimefailure() {
  if (!_internal_has_anesthesiamachinesodalimefailure()) {
    clear_Action();
    set_has_anesthesiamachinesodalimefailure();
    Action_.anesthesiamachinesodalimefailure_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData >(GetArena());
  }
  return Action_.anesthesiamachinesodalimefailure_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineSodaLimeFailureData* AnyEquipmentActionData::mutable_anesthesiamachinesodalimefailure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineSodaLimeFailure)
  return _internal_mutable_anesthesiamachinesodalimefailure();
}

// .pulse.cdm.bind.AnesthesiaMachineTubeCuffLeakData AnesthesiaMachineTubeCuffLeak = 8;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachinetubecuffleak() const {
  return Action_case() == kAnesthesiaMachineTubeCuffLeak;
}
inline bool AnyEquipmentActionData::has_anesthesiamachinetubecuffleak() const {
  return _internal_has_anesthesiamachinetubecuffleak();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachinetubecuffleak() {
  _oneof_case_[0] = kAnesthesiaMachineTubeCuffLeak;
}
inline ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* AnyEquipmentActionData::release_anesthesiamachinetubecuffleak() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
  if (_internal_has_anesthesiamachinetubecuffleak()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* temp = Action_.anesthesiamachinetubecuffleak_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachinetubecuffleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& AnyEquipmentActionData::_internal_anesthesiamachinetubecuffleak() const {
  return _internal_has_anesthesiamachinetubecuffleak()
      ? *Action_.anesthesiamachinetubecuffleak_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData&>(::pulse::cdm::bind::_AnesthesiaMachineTubeCuffLeakData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData& AnyEquipmentActionData::anesthesiamachinetubecuffleak() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
  return _internal_anesthesiamachinetubecuffleak();
}
inline ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachinetubecuffleak() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
  if (_internal_has_anesthesiamachinetubecuffleak()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* temp = Action_.anesthesiamachinetubecuffleak_;
    Action_.anesthesiamachinetubecuffleak_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachinetubecuffleak(::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* anesthesiamachinetubecuffleak) {
  clear_Action();
  if (anesthesiamachinetubecuffleak) {
    set_has_anesthesiamachinetubecuffleak();
    Action_.anesthesiamachinetubecuffleak_ = anesthesiamachinetubecuffleak;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
}
inline ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* AnyEquipmentActionData::_internal_mutable_anesthesiamachinetubecuffleak() {
  if (!_internal_has_anesthesiamachinetubecuffleak()) {
    clear_Action();
    set_has_anesthesiamachinetubecuffleak();
    Action_.anesthesiamachinetubecuffleak_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData >(GetArena());
  }
  return Action_.anesthesiamachinetubecuffleak_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineTubeCuffLeakData* AnyEquipmentActionData::mutable_anesthesiamachinetubecuffleak() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineTubeCuffLeak)
  return _internal_mutable_anesthesiamachinetubecuffleak();
}

// .pulse.cdm.bind.AnesthesiaMachineVaporizerFailureData AnesthesiaMachineVaporizerFailure = 9;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachinevaporizerfailure() const {
  return Action_case() == kAnesthesiaMachineVaporizerFailure;
}
inline bool AnyEquipmentActionData::has_anesthesiamachinevaporizerfailure() const {
  return _internal_has_anesthesiamachinevaporizerfailure();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachinevaporizerfailure() {
  _oneof_case_[0] = kAnesthesiaMachineVaporizerFailure;
}
inline ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* AnyEquipmentActionData::release_anesthesiamachinevaporizerfailure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
  if (_internal_has_anesthesiamachinevaporizerfailure()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* temp = Action_.anesthesiamachinevaporizerfailure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachinevaporizerfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& AnyEquipmentActionData::_internal_anesthesiamachinevaporizerfailure() const {
  return _internal_has_anesthesiamachinevaporizerfailure()
      ? *Action_.anesthesiamachinevaporizerfailure_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData&>(::pulse::cdm::bind::_AnesthesiaMachineVaporizerFailureData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData& AnyEquipmentActionData::anesthesiamachinevaporizerfailure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
  return _internal_anesthesiamachinevaporizerfailure();
}
inline ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachinevaporizerfailure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
  if (_internal_has_anesthesiamachinevaporizerfailure()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* temp = Action_.anesthesiamachinevaporizerfailure_;
    Action_.anesthesiamachinevaporizerfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachinevaporizerfailure(::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* anesthesiamachinevaporizerfailure) {
  clear_Action();
  if (anesthesiamachinevaporizerfailure) {
    set_has_anesthesiamachinevaporizerfailure();
    Action_.anesthesiamachinevaporizerfailure_ = anesthesiamachinevaporizerfailure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
}
inline ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* AnyEquipmentActionData::_internal_mutable_anesthesiamachinevaporizerfailure() {
  if (!_internal_has_anesthesiamachinevaporizerfailure()) {
    clear_Action();
    set_has_anesthesiamachinevaporizerfailure();
    Action_.anesthesiamachinevaporizerfailure_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData >(GetArena());
  }
  return Action_.anesthesiamachinevaporizerfailure_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineVaporizerFailureData* AnyEquipmentActionData::mutable_anesthesiamachinevaporizerfailure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVaporizerFailure)
  return _internal_mutable_anesthesiamachinevaporizerfailure();
}

// .pulse.cdm.bind.AnesthesiaMachineVentilatorPressureLossData AnesthesiaMachineVentilatorPressureLoss = 10;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineventilatorpressureloss() const {
  return Action_case() == kAnesthesiaMachineVentilatorPressureLoss;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineventilatorpressureloss() const {
  return _internal_has_anesthesiamachineventilatorpressureloss();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineventilatorpressureloss() {
  _oneof_case_[0] = kAnesthesiaMachineVentilatorPressureLoss;
}
inline ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* AnyEquipmentActionData::release_anesthesiamachineventilatorpressureloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
  if (_internal_has_anesthesiamachineventilatorpressureloss()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* temp = Action_.anesthesiamachineventilatorpressureloss_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineventilatorpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& AnyEquipmentActionData::_internal_anesthesiamachineventilatorpressureloss() const {
  return _internal_has_anesthesiamachineventilatorpressureloss()
      ? *Action_.anesthesiamachineventilatorpressureloss_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData&>(::pulse::cdm::bind::_AnesthesiaMachineVentilatorPressureLossData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData& AnyEquipmentActionData::anesthesiamachineventilatorpressureloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
  return _internal_anesthesiamachineventilatorpressureloss();
}
inline ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineventilatorpressureloss() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
  if (_internal_has_anesthesiamachineventilatorpressureloss()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* temp = Action_.anesthesiamachineventilatorpressureloss_;
    Action_.anesthesiamachineventilatorpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineventilatorpressureloss(::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* anesthesiamachineventilatorpressureloss) {
  clear_Action();
  if (anesthesiamachineventilatorpressureloss) {
    set_has_anesthesiamachineventilatorpressureloss();
    Action_.anesthesiamachineventilatorpressureloss_ = anesthesiamachineventilatorpressureloss;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
}
inline ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineventilatorpressureloss() {
  if (!_internal_has_anesthesiamachineventilatorpressureloss()) {
    clear_Action();
    set_has_anesthesiamachineventilatorpressureloss();
    Action_.anesthesiamachineventilatorpressureloss_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData >(GetArena());
  }
  return Action_.anesthesiamachineventilatorpressureloss_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineVentilatorPressureLossData* AnyEquipmentActionData::mutable_anesthesiamachineventilatorpressureloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineVentilatorPressureLoss)
  return _internal_mutable_anesthesiamachineventilatorpressureloss();
}

// .pulse.cdm.bind.AnesthesiaMachineYPieceDisconnectData AnesthesiaMachineYPieceDisconnect = 11;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineypiecedisconnect() const {
  return Action_case() == kAnesthesiaMachineYPieceDisconnect;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineypiecedisconnect() const {
  return _internal_has_anesthesiamachineypiecedisconnect();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineypiecedisconnect() {
  _oneof_case_[0] = kAnesthesiaMachineYPieceDisconnect;
}
inline ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* AnyEquipmentActionData::release_anesthesiamachineypiecedisconnect() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
  if (_internal_has_anesthesiamachineypiecedisconnect()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* temp = Action_.anesthesiamachineypiecedisconnect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineypiecedisconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& AnyEquipmentActionData::_internal_anesthesiamachineypiecedisconnect() const {
  return _internal_has_anesthesiamachineypiecedisconnect()
      ? *Action_.anesthesiamachineypiecedisconnect_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData&>(::pulse::cdm::bind::_AnesthesiaMachineYPieceDisconnectData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData& AnyEquipmentActionData::anesthesiamachineypiecedisconnect() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
  return _internal_anesthesiamachineypiecedisconnect();
}
inline ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineypiecedisconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
  if (_internal_has_anesthesiamachineypiecedisconnect()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* temp = Action_.anesthesiamachineypiecedisconnect_;
    Action_.anesthesiamachineypiecedisconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineypiecedisconnect(::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* anesthesiamachineypiecedisconnect) {
  clear_Action();
  if (anesthesiamachineypiecedisconnect) {
    set_has_anesthesiamachineypiecedisconnect();
    Action_.anesthesiamachineypiecedisconnect_ = anesthesiamachineypiecedisconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
}
inline ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineypiecedisconnect() {
  if (!_internal_has_anesthesiamachineypiecedisconnect()) {
    clear_Action();
    set_has_anesthesiamachineypiecedisconnect();
    Action_.anesthesiamachineypiecedisconnect_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData >(GetArena());
  }
  return Action_.anesthesiamachineypiecedisconnect_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineYPieceDisconnectData* AnyEquipmentActionData::mutable_anesthesiamachineypiecedisconnect() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineYPieceDisconnect)
  return _internal_mutable_anesthesiamachineypiecedisconnect();
}

// .pulse.cdm.bind.AnesthesiaMachineOxygenWallPortPressureLossData AnesthesiaMachineOxygenWallPortPressureLoss = 12;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineoxygenwallportpressureloss() const {
  return Action_case() == kAnesthesiaMachineOxygenWallPortPressureLoss;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineoxygenwallportpressureloss() const {
  return _internal_has_anesthesiamachineoxygenwallportpressureloss();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineoxygenwallportpressureloss() {
  _oneof_case_[0] = kAnesthesiaMachineOxygenWallPortPressureLoss;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* AnyEquipmentActionData::release_anesthesiamachineoxygenwallportpressureloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
  if (_internal_has_anesthesiamachineoxygenwallportpressureloss()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* temp = Action_.anesthesiamachineoxygenwallportpressureloss_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineoxygenwallportpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& AnyEquipmentActionData::_internal_anesthesiamachineoxygenwallportpressureloss() const {
  return _internal_has_anesthesiamachineoxygenwallportpressureloss()
      ? *Action_.anesthesiamachineoxygenwallportpressureloss_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData&>(::pulse::cdm::bind::_AnesthesiaMachineOxygenWallPortPressureLossData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData& AnyEquipmentActionData::anesthesiamachineoxygenwallportpressureloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
  return _internal_anesthesiamachineoxygenwallportpressureloss();
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineoxygenwallportpressureloss() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
  if (_internal_has_anesthesiamachineoxygenwallportpressureloss()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* temp = Action_.anesthesiamachineoxygenwallportpressureloss_;
    Action_.anesthesiamachineoxygenwallportpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineoxygenwallportpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* anesthesiamachineoxygenwallportpressureloss) {
  clear_Action();
  if (anesthesiamachineoxygenwallportpressureloss) {
    set_has_anesthesiamachineoxygenwallportpressureloss();
    Action_.anesthesiamachineoxygenwallportpressureloss_ = anesthesiamachineoxygenwallportpressureloss;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineoxygenwallportpressureloss() {
  if (!_internal_has_anesthesiamachineoxygenwallportpressureloss()) {
    clear_Action();
    set_has_anesthesiamachineoxygenwallportpressureloss();
    Action_.anesthesiamachineoxygenwallportpressureloss_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData >(GetArena());
  }
  return Action_.anesthesiamachineoxygenwallportpressureloss_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenWallPortPressureLossData* AnyEquipmentActionData::mutable_anesthesiamachineoxygenwallportpressureloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenWallPortPressureLoss)
  return _internal_mutable_anesthesiamachineoxygenwallportpressureloss();
}

// .pulse.cdm.bind.AnesthesiaMachineOxygenTankPressureLossData AnesthesiaMachineOxygenTankPressureLoss = 13;
inline bool AnyEquipmentActionData::_internal_has_anesthesiamachineoxygentankpressureloss() const {
  return Action_case() == kAnesthesiaMachineOxygenTankPressureLoss;
}
inline bool AnyEquipmentActionData::has_anesthesiamachineoxygentankpressureloss() const {
  return _internal_has_anesthesiamachineoxygentankpressureloss();
}
inline void AnyEquipmentActionData::set_has_anesthesiamachineoxygentankpressureloss() {
  _oneof_case_[0] = kAnesthesiaMachineOxygenTankPressureLoss;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* AnyEquipmentActionData::release_anesthesiamachineoxygentankpressureloss() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
  if (_internal_has_anesthesiamachineoxygentankpressureloss()) {
    clear_has_Action();
      ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* temp = Action_.anesthesiamachineoxygentankpressureloss_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.anesthesiamachineoxygentankpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& AnyEquipmentActionData::_internal_anesthesiamachineoxygentankpressureloss() const {
  return _internal_has_anesthesiamachineoxygentankpressureloss()
      ? *Action_.anesthesiamachineoxygentankpressureloss_
      : reinterpret_cast< ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData&>(::pulse::cdm::bind::_AnesthesiaMachineOxygenTankPressureLossData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData& AnyEquipmentActionData::anesthesiamachineoxygentankpressureloss() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
  return _internal_anesthesiamachineoxygentankpressureloss();
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* AnyEquipmentActionData::unsafe_arena_release_anesthesiamachineoxygentankpressureloss() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
  if (_internal_has_anesthesiamachineoxygentankpressureloss()) {
    clear_has_Action();
    ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* temp = Action_.anesthesiamachineoxygentankpressureloss_;
    Action_.anesthesiamachineoxygentankpressureloss_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_anesthesiamachineoxygentankpressureloss(::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* anesthesiamachineoxygentankpressureloss) {
  clear_Action();
  if (anesthesiamachineoxygentankpressureloss) {
    set_has_anesthesiamachineoxygentankpressureloss();
    Action_.anesthesiamachineoxygentankpressureloss_ = anesthesiamachineoxygentankpressureloss;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* AnyEquipmentActionData::_internal_mutable_anesthesiamachineoxygentankpressureloss() {
  if (!_internal_has_anesthesiamachineoxygentankpressureloss()) {
    clear_Action();
    set_has_anesthesiamachineoxygentankpressureloss();
    Action_.anesthesiamachineoxygentankpressureloss_ = CreateMaybeMessage< ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData >(GetArena());
  }
  return Action_.anesthesiamachineoxygentankpressureloss_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenTankPressureLossData* AnyEquipmentActionData::mutable_anesthesiamachineoxygentankpressureloss() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.AnesthesiaMachineOxygenTankPressureLoss)
  return _internal_mutable_anesthesiamachineoxygentankpressureloss();
}

// .pulse.cdm.bind.InhalerConfigurationData InhalerConfiguration = 101;
inline bool AnyEquipmentActionData::_internal_has_inhalerconfiguration() const {
  return Action_case() == kInhalerConfiguration;
}
inline bool AnyEquipmentActionData::has_inhalerconfiguration() const {
  return _internal_has_inhalerconfiguration();
}
inline void AnyEquipmentActionData::set_has_inhalerconfiguration() {
  _oneof_case_[0] = kInhalerConfiguration;
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyEquipmentActionData::release_inhalerconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
  if (_internal_has_inhalerconfiguration()) {
    clear_has_Action();
      ::pulse::cdm::bind::InhalerConfigurationData* temp = Action_.inhalerconfiguration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.inhalerconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::InhalerConfigurationData& AnyEquipmentActionData::_internal_inhalerconfiguration() const {
  return _internal_has_inhalerconfiguration()
      ? *Action_.inhalerconfiguration_
      : reinterpret_cast< ::pulse::cdm::bind::InhalerConfigurationData&>(::pulse::cdm::bind::_InhalerConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::InhalerConfigurationData& AnyEquipmentActionData::inhalerconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
  return _internal_inhalerconfiguration();
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyEquipmentActionData::unsafe_arena_release_inhalerconfiguration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
  if (_internal_has_inhalerconfiguration()) {
    clear_has_Action();
    ::pulse::cdm::bind::InhalerConfigurationData* temp = Action_.inhalerconfiguration_;
    Action_.inhalerconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_inhalerconfiguration(::pulse::cdm::bind::InhalerConfigurationData* inhalerconfiguration) {
  clear_Action();
  if (inhalerconfiguration) {
    set_has_inhalerconfiguration();
    Action_.inhalerconfiguration_ = inhalerconfiguration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyEquipmentActionData::_internal_mutable_inhalerconfiguration() {
  if (!_internal_has_inhalerconfiguration()) {
    clear_Action();
    set_has_inhalerconfiguration();
    Action_.inhalerconfiguration_ = CreateMaybeMessage< ::pulse::cdm::bind::InhalerConfigurationData >(GetArena());
  }
  return Action_.inhalerconfiguration_;
}
inline ::pulse::cdm::bind::InhalerConfigurationData* AnyEquipmentActionData::mutable_inhalerconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.InhalerConfiguration)
  return _internal_mutable_inhalerconfiguration();
}

// .pulse.cdm.bind.MechanicalVentilatorConfigurationData MechanicalVentilatorConfiguration = 201;
inline bool AnyEquipmentActionData::_internal_has_mechanicalventilatorconfiguration() const {
  return Action_case() == kMechanicalVentilatorConfiguration;
}
inline bool AnyEquipmentActionData::has_mechanicalventilatorconfiguration() const {
  return _internal_has_mechanicalventilatorconfiguration();
}
inline void AnyEquipmentActionData::set_has_mechanicalventilatorconfiguration() {
  _oneof_case_[0] = kMechanicalVentilatorConfiguration;
}
inline ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* AnyEquipmentActionData::release_mechanicalventilatorconfiguration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
  if (_internal_has_mechanicalventilatorconfiguration()) {
    clear_has_Action();
      ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* temp = Action_.mechanicalventilatorconfiguration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Action_.mechanicalventilatorconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData& AnyEquipmentActionData::_internal_mechanicalventilatorconfiguration() const {
  return _internal_has_mechanicalventilatorconfiguration()
      ? *Action_.mechanicalventilatorconfiguration_
      : reinterpret_cast< ::pulse::cdm::bind::MechanicalVentilatorConfigurationData&>(::pulse::cdm::bind::_MechanicalVentilatorConfigurationData_default_instance_);
}
inline const ::pulse::cdm::bind::MechanicalVentilatorConfigurationData& AnyEquipmentActionData::mechanicalventilatorconfiguration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
  return _internal_mechanicalventilatorconfiguration();
}
inline ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* AnyEquipmentActionData::unsafe_arena_release_mechanicalventilatorconfiguration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
  if (_internal_has_mechanicalventilatorconfiguration()) {
    clear_has_Action();
    ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* temp = Action_.mechanicalventilatorconfiguration_;
    Action_.mechanicalventilatorconfiguration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyEquipmentActionData::unsafe_arena_set_allocated_mechanicalventilatorconfiguration(::pulse::cdm::bind::MechanicalVentilatorConfigurationData* mechanicalventilatorconfiguration) {
  clear_Action();
  if (mechanicalventilatorconfiguration) {
    set_has_mechanicalventilatorconfiguration();
    Action_.mechanicalventilatorconfiguration_ = mechanicalventilatorconfiguration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
}
inline ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* AnyEquipmentActionData::_internal_mutable_mechanicalventilatorconfiguration() {
  if (!_internal_has_mechanicalventilatorconfiguration()) {
    clear_Action();
    set_has_mechanicalventilatorconfiguration();
    Action_.mechanicalventilatorconfiguration_ = CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilatorConfigurationData >(GetArena());
  }
  return Action_.mechanicalventilatorconfiguration_;
}
inline ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* AnyEquipmentActionData::mutable_mechanicalventilatorconfiguration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnyEquipmentActionData.MechanicalVentilatorConfiguration)
  return _internal_mutable_mechanicalventilatorconfiguration();
}

inline bool AnyEquipmentActionData::has_Action() const {
  return Action_case() != ACTION_NOT_SET;
}
inline void AnyEquipmentActionData::clear_has_Action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline AnyEquipmentActionData::ActionCase AnyEquipmentActionData::Action_case() const {
  return AnyEquipmentActionData::ActionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fEquipmentActions_2eproto
