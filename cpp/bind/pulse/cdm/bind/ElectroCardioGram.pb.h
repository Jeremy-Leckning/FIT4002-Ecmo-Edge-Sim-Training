// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/ElectroCardioGram.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
#include "pulse/cdm/bind/Physiology.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ElectroCardioGramData;
class ElectroCardioGramDataDefaultTypeInternal;
extern ElectroCardioGramDataDefaultTypeInternal _ElectroCardioGramData_default_instance_;
class ElectroCardioGramWaveformData;
class ElectroCardioGramWaveformDataDefaultTypeInternal;
extern ElectroCardioGramWaveformDataDefaultTypeInternal _ElectroCardioGramWaveformData_default_instance_;
class ElectroCardioGramWaveformListData;
class ElectroCardioGramWaveformListDataDefaultTypeInternal;
extern ElectroCardioGramWaveformListDataDefaultTypeInternal _ElectroCardioGramWaveformListData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::ElectroCardioGramData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectroCardioGramData>(Arena*);
template<> ::pulse::cdm::bind::ElectroCardioGramWaveformData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectroCardioGramWaveformData>(Arena*);
template<> ::pulse::cdm::bind::ElectroCardioGramWaveformListData* Arena::CreateMaybeMessage<::pulse::cdm::bind::ElectroCardioGramWaveformListData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum ElectroCardioGramWaveformData_eWaveformLead : int {
  ElectroCardioGramWaveformData_eWaveformLead_NullLead = 0,
  ElectroCardioGramWaveformData_eWaveformLead_Lead1 = 1,
  ElectroCardioGramWaveformData_eWaveformLead_Lead2 = 2,
  ElectroCardioGramWaveformData_eWaveformLead_Lead3 = 3,
  ElectroCardioGramWaveformData_eWaveformLead_Lead4 = 4,
  ElectroCardioGramWaveformData_eWaveformLead_Lead5 = 5,
  ElectroCardioGramWaveformData_eWaveformLead_Lead6 = 6,
  ElectroCardioGramWaveformData_eWaveformLead_Lead7 = 7,
  ElectroCardioGramWaveformData_eWaveformLead_Lead8 = 8,
  ElectroCardioGramWaveformData_eWaveformLead_Lead9 = 9,
  ElectroCardioGramWaveformData_eWaveformLead_Lead10 = 10,
  ElectroCardioGramWaveformData_eWaveformLead_Lead11 = 11,
  ElectroCardioGramWaveformData_eWaveformLead_Lead12 = 12,
  ElectroCardioGramWaveformData_eWaveformLead_ElectroCardioGramWaveformData_eWaveformLead_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ElectroCardioGramWaveformData_eWaveformLead_ElectroCardioGramWaveformData_eWaveformLead_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ElectroCardioGramWaveformData_eWaveformLead_IsValid(int value);
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_MIN = ElectroCardioGramWaveformData_eWaveformLead_NullLead;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_MAX = ElectroCardioGramWaveformData_eWaveformLead_Lead12;
constexpr int ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_ARRAYSIZE = ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElectroCardioGramWaveformData_eWaveformLead_descriptor();
template<typename T>
inline const std::string& ElectroCardioGramWaveformData_eWaveformLead_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElectroCardioGramWaveformData_eWaveformLead>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElectroCardioGramWaveformData_eWaveformLead_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElectroCardioGramWaveformData_eWaveformLead_descriptor(), enum_t_value);
}
inline bool ElectroCardioGramWaveformData_eWaveformLead_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElectroCardioGramWaveformData_eWaveformLead* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElectroCardioGramWaveformData_eWaveformLead>(
    ElectroCardioGramWaveformData_eWaveformLead_descriptor(), name, value);
}
// ===================================================================

class ElectroCardioGramData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectroCardioGramData) */ {
 public:
  inline ElectroCardioGramData() : ElectroCardioGramData(nullptr) {}
  virtual ~ElectroCardioGramData();

  ElectroCardioGramData(const ElectroCardioGramData& from);
  ElectroCardioGramData(ElectroCardioGramData&& from) noexcept
    : ElectroCardioGramData() {
    *this = ::std::move(from);
  }

  inline ElectroCardioGramData& operator=(const ElectroCardioGramData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectroCardioGramData& operator=(ElectroCardioGramData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectroCardioGramData& default_instance();

  static inline const ElectroCardioGramData* internal_default_instance() {
    return reinterpret_cast<const ElectroCardioGramData*>(
               &_ElectroCardioGramData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ElectroCardioGramData& a, ElectroCardioGramData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectroCardioGramData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectroCardioGramData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectroCardioGramData* New() const final {
    return CreateMaybeMessage<ElectroCardioGramData>(nullptr);
  }

  ElectroCardioGramData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectroCardioGramData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectroCardioGramData& from);
  void MergeFrom(const ElectroCardioGramData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectroCardioGramData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectroCardioGramData";
  }
  protected:
  explicit ElectroCardioGramData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLead1ElectricPotentialFieldNumber = 1,
    kLead2ElectricPotentialFieldNumber = 2,
    kLead3ElectricPotentialFieldNumber = 3,
    kLead4ElectricPotentialFieldNumber = 4,
    kLead5ElectricPotentialFieldNumber = 5,
    kLead6ElectricPotentialFieldNumber = 6,
    kLead7ElectricPotentialFieldNumber = 7,
    kLead8ElectricPotentialFieldNumber = 8,
    kLead9ElectricPotentialFieldNumber = 9,
    kLead10ElectricPotentialFieldNumber = 10,
    kLead11ElectricPotentialFieldNumber = 11,
    kLead12ElectricPotentialFieldNumber = 12,
  };
  // .pulse.cdm.bind.ScalarElectricPotentialData Lead1ElectricPotential = 1;
  bool has_lead1electricpotential() const;
  private:
  bool _internal_has_lead1electricpotential() const;
  public:
  void clear_lead1electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead1electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead1electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead1electricpotential();
  void set_allocated_lead1electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead1electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead1electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead1electricpotential();
  public:
  void unsafe_arena_set_allocated_lead1electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead1electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead1electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead2ElectricPotential = 2;
  bool has_lead2electricpotential() const;
  private:
  bool _internal_has_lead2electricpotential() const;
  public:
  void clear_lead2electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead2electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead2electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead2electricpotential();
  void set_allocated_lead2electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead2electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead2electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead2electricpotential();
  public:
  void unsafe_arena_set_allocated_lead2electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead2electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead2electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead3ElectricPotential = 3;
  bool has_lead3electricpotential() const;
  private:
  bool _internal_has_lead3electricpotential() const;
  public:
  void clear_lead3electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead3electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead3electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead3electricpotential();
  void set_allocated_lead3electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead3electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead3electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead3electricpotential();
  public:
  void unsafe_arena_set_allocated_lead3electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead3electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead3electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead4ElectricPotential = 4;
  bool has_lead4electricpotential() const;
  private:
  bool _internal_has_lead4electricpotential() const;
  public:
  void clear_lead4electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead4electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead4electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead4electricpotential();
  void set_allocated_lead4electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead4electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead4electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead4electricpotential();
  public:
  void unsafe_arena_set_allocated_lead4electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead4electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead4electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead5ElectricPotential = 5;
  bool has_lead5electricpotential() const;
  private:
  bool _internal_has_lead5electricpotential() const;
  public:
  void clear_lead5electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead5electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead5electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead5electricpotential();
  void set_allocated_lead5electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead5electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead5electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead5electricpotential();
  public:
  void unsafe_arena_set_allocated_lead5electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead5electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead5electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead6ElectricPotential = 6;
  bool has_lead6electricpotential() const;
  private:
  bool _internal_has_lead6electricpotential() const;
  public:
  void clear_lead6electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead6electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead6electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead6electricpotential();
  void set_allocated_lead6electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead6electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead6electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead6electricpotential();
  public:
  void unsafe_arena_set_allocated_lead6electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead6electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead6electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead7ElectricPotential = 7;
  bool has_lead7electricpotential() const;
  private:
  bool _internal_has_lead7electricpotential() const;
  public:
  void clear_lead7electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead7electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead7electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead7electricpotential();
  void set_allocated_lead7electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead7electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead7electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead7electricpotential();
  public:
  void unsafe_arena_set_allocated_lead7electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead7electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead7electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead8ElectricPotential = 8;
  bool has_lead8electricpotential() const;
  private:
  bool _internal_has_lead8electricpotential() const;
  public:
  void clear_lead8electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead8electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead8electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead8electricpotential();
  void set_allocated_lead8electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead8electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead8electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead8electricpotential();
  public:
  void unsafe_arena_set_allocated_lead8electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead8electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead8electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead9ElectricPotential = 9;
  bool has_lead9electricpotential() const;
  private:
  bool _internal_has_lead9electricpotential() const;
  public:
  void clear_lead9electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead9electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead9electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead9electricpotential();
  void set_allocated_lead9electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead9electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead9electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead9electricpotential();
  public:
  void unsafe_arena_set_allocated_lead9electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead9electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead9electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead10ElectricPotential = 10;
  bool has_lead10electricpotential() const;
  private:
  bool _internal_has_lead10electricpotential() const;
  public:
  void clear_lead10electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead10electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead10electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead10electricpotential();
  void set_allocated_lead10electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead10electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead10electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead10electricpotential();
  public:
  void unsafe_arena_set_allocated_lead10electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead10electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead10electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead11ElectricPotential = 11;
  bool has_lead11electricpotential() const;
  private:
  bool _internal_has_lead11electricpotential() const;
  public:
  void clear_lead11electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead11electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead11electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead11electricpotential();
  void set_allocated_lead11electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead11electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead11electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead11electricpotential();
  public:
  void unsafe_arena_set_allocated_lead11electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead11electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead11electricpotential();

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead12ElectricPotential = 12;
  bool has_lead12electricpotential() const;
  private:
  bool _internal_has_lead12electricpotential() const;
  public:
  void clear_lead12electricpotential();
  const ::pulse::cdm::bind::ScalarElectricPotentialData& lead12electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* release_lead12electricpotential();
  ::pulse::cdm::bind::ScalarElectricPotentialData* mutable_lead12electricpotential();
  void set_allocated_lead12electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead12electricpotential);
  private:
  const ::pulse::cdm::bind::ScalarElectricPotentialData& _internal_lead12electricpotential() const;
  ::pulse::cdm::bind::ScalarElectricPotentialData* _internal_mutable_lead12electricpotential();
  public:
  void unsafe_arena_set_allocated_lead12electricpotential(
      ::pulse::cdm::bind::ScalarElectricPotentialData* lead12electricpotential);
  ::pulse::cdm::bind::ScalarElectricPotentialData* unsafe_arena_release_lead12electricpotential();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectroCardioGramData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead1electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead2electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead3electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead4electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead5electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead6electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead7electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead8electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead9electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead10electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead11electricpotential_;
  ::pulse::cdm::bind::ScalarElectricPotentialData* lead12electricpotential_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
};
// -------------------------------------------------------------------

class ElectroCardioGramWaveformData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectroCardioGramWaveformData) */ {
 public:
  inline ElectroCardioGramWaveformData() : ElectroCardioGramWaveformData(nullptr) {}
  virtual ~ElectroCardioGramWaveformData();

  ElectroCardioGramWaveformData(const ElectroCardioGramWaveformData& from);
  ElectroCardioGramWaveformData(ElectroCardioGramWaveformData&& from) noexcept
    : ElectroCardioGramWaveformData() {
    *this = ::std::move(from);
  }

  inline ElectroCardioGramWaveformData& operator=(const ElectroCardioGramWaveformData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectroCardioGramWaveformData& operator=(ElectroCardioGramWaveformData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectroCardioGramWaveformData& default_instance();

  static inline const ElectroCardioGramWaveformData* internal_default_instance() {
    return reinterpret_cast<const ElectroCardioGramWaveformData*>(
               &_ElectroCardioGramWaveformData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ElectroCardioGramWaveformData& a, ElectroCardioGramWaveformData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectroCardioGramWaveformData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectroCardioGramWaveformData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectroCardioGramWaveformData* New() const final {
    return CreateMaybeMessage<ElectroCardioGramWaveformData>(nullptr);
  }

  ElectroCardioGramWaveformData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectroCardioGramWaveformData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectroCardioGramWaveformData& from);
  void MergeFrom(const ElectroCardioGramWaveformData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectroCardioGramWaveformData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectroCardioGramWaveformData";
  }
  protected:
  explicit ElectroCardioGramWaveformData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ElectroCardioGramWaveformData_eWaveformLead eWaveformLead;
  static constexpr eWaveformLead NullLead =
    ElectroCardioGramWaveformData_eWaveformLead_NullLead;
  static constexpr eWaveformLead Lead1 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead1;
  static constexpr eWaveformLead Lead2 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead2;
  static constexpr eWaveformLead Lead3 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead3;
  static constexpr eWaveformLead Lead4 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead4;
  static constexpr eWaveformLead Lead5 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead5;
  static constexpr eWaveformLead Lead6 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead6;
  static constexpr eWaveformLead Lead7 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead7;
  static constexpr eWaveformLead Lead8 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead8;
  static constexpr eWaveformLead Lead9 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead9;
  static constexpr eWaveformLead Lead10 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead10;
  static constexpr eWaveformLead Lead11 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead11;
  static constexpr eWaveformLead Lead12 =
    ElectroCardioGramWaveformData_eWaveformLead_Lead12;
  static inline bool eWaveformLead_IsValid(int value) {
    return ElectroCardioGramWaveformData_eWaveformLead_IsValid(value);
  }
  static constexpr eWaveformLead eWaveformLead_MIN =
    ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_MIN;
  static constexpr eWaveformLead eWaveformLead_MAX =
    ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_MAX;
  static constexpr int eWaveformLead_ARRAYSIZE =
    ElectroCardioGramWaveformData_eWaveformLead_eWaveformLead_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eWaveformLead_descriptor() {
    return ElectroCardioGramWaveformData_eWaveformLead_descriptor();
  }
  template<typename T>
  static inline const std::string& eWaveformLead_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eWaveformLead>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eWaveformLead_Name.");
    return ElectroCardioGramWaveformData_eWaveformLead_Name(enum_t_value);
  }
  static inline bool eWaveformLead_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eWaveformLead* value) {
    return ElectroCardioGramWaveformData_eWaveformLead_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActiveIndiciesFieldNumber = 5,
    kDataFieldNumber = 3,
    kTimeStepFieldNumber = 4,
    kLeadFieldNumber = 1,
    kRhythmFieldNumber = 2,
  };
  // repeated int32 ActiveIndicies = 5;
  int activeindicies_size() const;
  private:
  int _internal_activeindicies_size() const;
  public:
  void clear_activeindicies();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activeindicies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_activeindicies() const;
  void _internal_add_activeindicies(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_activeindicies();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 activeindicies(int index) const;
  void set_activeindicies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_activeindicies(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      activeindicies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_activeindicies();

  // .pulse.cdm.bind.FunctionElectricPotentialVsTimeData Data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData& data() const;
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* release_data();
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* mutable_data();
  void set_allocated_data(::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* data);
  private:
  const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData& _internal_data() const;
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* data);
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* unsafe_arena_release_data();

  // .pulse.cdm.bind.ScalarTimeData TimeStep = 4;
  bool has_timestep() const;
  private:
  bool _internal_has_timestep() const;
  public:
  void clear_timestep();
  const ::pulse::cdm::bind::ScalarTimeData& timestep() const;
  ::pulse::cdm::bind::ScalarTimeData* release_timestep();
  ::pulse::cdm::bind::ScalarTimeData* mutable_timestep();
  void set_allocated_timestep(::pulse::cdm::bind::ScalarTimeData* timestep);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_timestep() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_timestep();
  public:
  void unsafe_arena_set_allocated_timestep(
      ::pulse::cdm::bind::ScalarTimeData* timestep);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_timestep();

  // .pulse.cdm.bind.ElectroCardioGramWaveformData.eWaveformLead Lead = 1;
  void clear_lead();
  ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead lead() const;
  void set_lead(::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead value);
  private:
  ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead _internal_lead() const;
  void _internal_set_lead(::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead value);
  public:

  // .pulse.cdm.bind.eHeartRhythm Rhythm = 2;
  void clear_rhythm();
  ::pulse::cdm::bind::eHeartRhythm rhythm() const;
  void set_rhythm(::pulse::cdm::bind::eHeartRhythm value);
  private:
  ::pulse::cdm::bind::eHeartRhythm _internal_rhythm() const;
  void _internal_set_rhythm(::pulse::cdm::bind::eHeartRhythm value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectroCardioGramWaveformData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > activeindicies_;
  mutable std::atomic<int> _activeindicies_cached_byte_size_;
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* data_;
  ::pulse::cdm::bind::ScalarTimeData* timestep_;
  int lead_;
  int rhythm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
};
// -------------------------------------------------------------------

class ElectroCardioGramWaveformListData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.ElectroCardioGramWaveformListData) */ {
 public:
  inline ElectroCardioGramWaveformListData() : ElectroCardioGramWaveformListData(nullptr) {}
  virtual ~ElectroCardioGramWaveformListData();

  ElectroCardioGramWaveformListData(const ElectroCardioGramWaveformListData& from);
  ElectroCardioGramWaveformListData(ElectroCardioGramWaveformListData&& from) noexcept
    : ElectroCardioGramWaveformListData() {
    *this = ::std::move(from);
  }

  inline ElectroCardioGramWaveformListData& operator=(const ElectroCardioGramWaveformListData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElectroCardioGramWaveformListData& operator=(ElectroCardioGramWaveformListData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElectroCardioGramWaveformListData& default_instance();

  static inline const ElectroCardioGramWaveformListData* internal_default_instance() {
    return reinterpret_cast<const ElectroCardioGramWaveformListData*>(
               &_ElectroCardioGramWaveformListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ElectroCardioGramWaveformListData& a, ElectroCardioGramWaveformListData& b) {
    a.Swap(&b);
  }
  inline void Swap(ElectroCardioGramWaveformListData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElectroCardioGramWaveformListData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElectroCardioGramWaveformListData* New() const final {
    return CreateMaybeMessage<ElectroCardioGramWaveformListData>(nullptr);
  }

  ElectroCardioGramWaveformListData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElectroCardioGramWaveformListData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElectroCardioGramWaveformListData& from);
  void MergeFrom(const ElectroCardioGramWaveformListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElectroCardioGramWaveformListData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.ElectroCardioGramWaveformListData";
  }
  protected:
  explicit ElectroCardioGramWaveformListData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaveformFieldNumber = 1,
  };
  // repeated .pulse.cdm.bind.ElectroCardioGramWaveformData Waveform = 1;
  int waveform_size() const;
  private:
  int _internal_waveform_size() const;
  public:
  void clear_waveform();
  ::pulse::cdm::bind::ElectroCardioGramWaveformData* mutable_waveform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectroCardioGramWaveformData >*
      mutable_waveform();
  private:
  const ::pulse::cdm::bind::ElectroCardioGramWaveformData& _internal_waveform(int index) const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformData* _internal_add_waveform();
  public:
  const ::pulse::cdm::bind::ElectroCardioGramWaveformData& waveform(int index) const;
  ::pulse::cdm::bind::ElectroCardioGramWaveformData* add_waveform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectroCardioGramWaveformData >&
      waveform() const;

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.ElectroCardioGramWaveformListData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectroCardioGramWaveformData > waveform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ElectroCardioGramData

// .pulse.cdm.bind.ScalarElectricPotentialData Lead1ElectricPotential = 1;
inline bool ElectroCardioGramData::_internal_has_lead1electricpotential() const {
  return this != internal_default_instance() && lead1electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead1electricpotential() const {
  return _internal_has_lead1electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead1electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead1electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead1electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead1ElectricPotential)
  return _internal_lead1electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead1electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead1electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead1electricpotential_);
  }
  lead1electricpotential_ = lead1electricpotential;
  if (lead1electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead1ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead1electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead1electricpotential_;
  lead1electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead1electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead1ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead1electricpotential_;
  lead1electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead1electricpotential() {
  
  if (lead1electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead1electricpotential_ = p;
  }
  return lead1electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead1electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead1ElectricPotential)
  return _internal_mutable_lead1electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead1electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead1electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead1electricpotential_);
  }
  if (lead1electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead1electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead1electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead1electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead1electricpotential_ = lead1electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead1ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead2ElectricPotential = 2;
inline bool ElectroCardioGramData::_internal_has_lead2electricpotential() const {
  return this != internal_default_instance() && lead2electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead2electricpotential() const {
  return _internal_has_lead2electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead2electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead2electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead2electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead2ElectricPotential)
  return _internal_lead2electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead2electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead2electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead2electricpotential_);
  }
  lead2electricpotential_ = lead2electricpotential;
  if (lead2electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead2ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead2electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead2electricpotential_;
  lead2electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead2electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead2ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead2electricpotential_;
  lead2electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead2electricpotential() {
  
  if (lead2electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead2electricpotential_ = p;
  }
  return lead2electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead2electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead2ElectricPotential)
  return _internal_mutable_lead2electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead2electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead2electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead2electricpotential_);
  }
  if (lead2electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead2electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead2electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead2electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead2electricpotential_ = lead2electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead2ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead3ElectricPotential = 3;
inline bool ElectroCardioGramData::_internal_has_lead3electricpotential() const {
  return this != internal_default_instance() && lead3electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead3electricpotential() const {
  return _internal_has_lead3electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead3electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead3electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead3electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead3ElectricPotential)
  return _internal_lead3electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead3electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead3electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead3electricpotential_);
  }
  lead3electricpotential_ = lead3electricpotential;
  if (lead3electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead3ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead3electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead3electricpotential_;
  lead3electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead3electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead3ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead3electricpotential_;
  lead3electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead3electricpotential() {
  
  if (lead3electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead3electricpotential_ = p;
  }
  return lead3electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead3electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead3ElectricPotential)
  return _internal_mutable_lead3electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead3electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead3electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead3electricpotential_);
  }
  if (lead3electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead3electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead3electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead3electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead3electricpotential_ = lead3electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead3ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead4ElectricPotential = 4;
inline bool ElectroCardioGramData::_internal_has_lead4electricpotential() const {
  return this != internal_default_instance() && lead4electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead4electricpotential() const {
  return _internal_has_lead4electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead4electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead4electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead4electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead4ElectricPotential)
  return _internal_lead4electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead4electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead4electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead4electricpotential_);
  }
  lead4electricpotential_ = lead4electricpotential;
  if (lead4electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead4ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead4electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead4electricpotential_;
  lead4electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead4electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead4ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead4electricpotential_;
  lead4electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead4electricpotential() {
  
  if (lead4electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead4electricpotential_ = p;
  }
  return lead4electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead4electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead4ElectricPotential)
  return _internal_mutable_lead4electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead4electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead4electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead4electricpotential_);
  }
  if (lead4electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead4electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead4electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead4electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead4electricpotential_ = lead4electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead4ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead5ElectricPotential = 5;
inline bool ElectroCardioGramData::_internal_has_lead5electricpotential() const {
  return this != internal_default_instance() && lead5electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead5electricpotential() const {
  return _internal_has_lead5electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead5electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead5electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead5electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead5ElectricPotential)
  return _internal_lead5electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead5electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead5electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead5electricpotential_);
  }
  lead5electricpotential_ = lead5electricpotential;
  if (lead5electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead5ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead5electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead5electricpotential_;
  lead5electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead5electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead5ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead5electricpotential_;
  lead5electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead5electricpotential() {
  
  if (lead5electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead5electricpotential_ = p;
  }
  return lead5electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead5electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead5ElectricPotential)
  return _internal_mutable_lead5electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead5electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead5electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead5electricpotential_);
  }
  if (lead5electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead5electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead5electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead5electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead5electricpotential_ = lead5electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead5ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead6ElectricPotential = 6;
inline bool ElectroCardioGramData::_internal_has_lead6electricpotential() const {
  return this != internal_default_instance() && lead6electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead6electricpotential() const {
  return _internal_has_lead6electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead6electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead6electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead6electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead6ElectricPotential)
  return _internal_lead6electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead6electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead6electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead6electricpotential_);
  }
  lead6electricpotential_ = lead6electricpotential;
  if (lead6electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead6ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead6electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead6electricpotential_;
  lead6electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead6electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead6ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead6electricpotential_;
  lead6electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead6electricpotential() {
  
  if (lead6electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead6electricpotential_ = p;
  }
  return lead6electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead6electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead6ElectricPotential)
  return _internal_mutable_lead6electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead6electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead6electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead6electricpotential_);
  }
  if (lead6electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead6electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead6electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead6electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead6electricpotential_ = lead6electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead6ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead7ElectricPotential = 7;
inline bool ElectroCardioGramData::_internal_has_lead7electricpotential() const {
  return this != internal_default_instance() && lead7electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead7electricpotential() const {
  return _internal_has_lead7electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead7electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead7electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead7electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead7ElectricPotential)
  return _internal_lead7electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead7electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead7electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead7electricpotential_);
  }
  lead7electricpotential_ = lead7electricpotential;
  if (lead7electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead7ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead7electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead7electricpotential_;
  lead7electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead7electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead7ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead7electricpotential_;
  lead7electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead7electricpotential() {
  
  if (lead7electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead7electricpotential_ = p;
  }
  return lead7electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead7electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead7ElectricPotential)
  return _internal_mutable_lead7electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead7electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead7electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead7electricpotential_);
  }
  if (lead7electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead7electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead7electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead7electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead7electricpotential_ = lead7electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead7ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead8ElectricPotential = 8;
inline bool ElectroCardioGramData::_internal_has_lead8electricpotential() const {
  return this != internal_default_instance() && lead8electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead8electricpotential() const {
  return _internal_has_lead8electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead8electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead8electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead8electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead8ElectricPotential)
  return _internal_lead8electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead8electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead8electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead8electricpotential_);
  }
  lead8electricpotential_ = lead8electricpotential;
  if (lead8electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead8ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead8electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead8electricpotential_;
  lead8electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead8electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead8ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead8electricpotential_;
  lead8electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead8electricpotential() {
  
  if (lead8electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead8electricpotential_ = p;
  }
  return lead8electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead8electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead8ElectricPotential)
  return _internal_mutable_lead8electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead8electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead8electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead8electricpotential_);
  }
  if (lead8electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead8electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead8electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead8electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead8electricpotential_ = lead8electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead8ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead9ElectricPotential = 9;
inline bool ElectroCardioGramData::_internal_has_lead9electricpotential() const {
  return this != internal_default_instance() && lead9electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead9electricpotential() const {
  return _internal_has_lead9electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead9electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead9electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead9electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead9ElectricPotential)
  return _internal_lead9electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead9electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead9electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead9electricpotential_);
  }
  lead9electricpotential_ = lead9electricpotential;
  if (lead9electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead9ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead9electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead9electricpotential_;
  lead9electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead9electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead9ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead9electricpotential_;
  lead9electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead9electricpotential() {
  
  if (lead9electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead9electricpotential_ = p;
  }
  return lead9electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead9electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead9ElectricPotential)
  return _internal_mutable_lead9electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead9electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead9electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead9electricpotential_);
  }
  if (lead9electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead9electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead9electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead9electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead9electricpotential_ = lead9electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead9ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead10ElectricPotential = 10;
inline bool ElectroCardioGramData::_internal_has_lead10electricpotential() const {
  return this != internal_default_instance() && lead10electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead10electricpotential() const {
  return _internal_has_lead10electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead10electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead10electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead10electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead10ElectricPotential)
  return _internal_lead10electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead10electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead10electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead10electricpotential_);
  }
  lead10electricpotential_ = lead10electricpotential;
  if (lead10electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead10ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead10electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead10electricpotential_;
  lead10electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead10electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead10ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead10electricpotential_;
  lead10electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead10electricpotential() {
  
  if (lead10electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead10electricpotential_ = p;
  }
  return lead10electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead10electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead10ElectricPotential)
  return _internal_mutable_lead10electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead10electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead10electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead10electricpotential_);
  }
  if (lead10electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead10electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead10electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead10electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead10electricpotential_ = lead10electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead10ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead11ElectricPotential = 11;
inline bool ElectroCardioGramData::_internal_has_lead11electricpotential() const {
  return this != internal_default_instance() && lead11electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead11electricpotential() const {
  return _internal_has_lead11electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead11electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead11electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead11electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead11ElectricPotential)
  return _internal_lead11electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead11electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead11electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead11electricpotential_);
  }
  lead11electricpotential_ = lead11electricpotential;
  if (lead11electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead11ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead11electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead11electricpotential_;
  lead11electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead11electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead11ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead11electricpotential_;
  lead11electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead11electricpotential() {
  
  if (lead11electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead11electricpotential_ = p;
  }
  return lead11electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead11electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead11ElectricPotential)
  return _internal_mutable_lead11electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead11electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead11electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead11electricpotential_);
  }
  if (lead11electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead11electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead11electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead11electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead11electricpotential_ = lead11electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead11ElectricPotential)
}

// .pulse.cdm.bind.ScalarElectricPotentialData Lead12ElectricPotential = 12;
inline bool ElectroCardioGramData::_internal_has_lead12electricpotential() const {
  return this != internal_default_instance() && lead12electricpotential_ != nullptr;
}
inline bool ElectroCardioGramData::has_lead12electricpotential() const {
  return _internal_has_lead12electricpotential();
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::_internal_lead12electricpotential() const {
  const ::pulse::cdm::bind::ScalarElectricPotentialData* p = lead12electricpotential_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarElectricPotentialData&>(
      ::pulse::cdm::bind::_ScalarElectricPotentialData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarElectricPotentialData& ElectroCardioGramData::lead12electricpotential() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramData.Lead12ElectricPotential)
  return _internal_lead12electricpotential();
}
inline void ElectroCardioGramData::unsafe_arena_set_allocated_lead12electricpotential(
    ::pulse::cdm::bind::ScalarElectricPotentialData* lead12electricpotential) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead12electricpotential_);
  }
  lead12electricpotential_ = lead12electricpotential;
  if (lead12electricpotential) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead12ElectricPotential)
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::release_lead12electricpotential() {
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead12electricpotential_;
  lead12electricpotential_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::unsafe_arena_release_lead12electricpotential() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramData.Lead12ElectricPotential)
  
  ::pulse::cdm::bind::ScalarElectricPotentialData* temp = lead12electricpotential_;
  lead12electricpotential_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::_internal_mutable_lead12electricpotential() {
  
  if (lead12electricpotential_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarElectricPotentialData>(GetArena());
    lead12electricpotential_ = p;
  }
  return lead12electricpotential_;
}
inline ::pulse::cdm::bind::ScalarElectricPotentialData* ElectroCardioGramData::mutable_lead12electricpotential() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramData.Lead12ElectricPotential)
  return _internal_mutable_lead12electricpotential();
}
inline void ElectroCardioGramData::set_allocated_lead12electricpotential(::pulse::cdm::bind::ScalarElectricPotentialData* lead12electricpotential) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead12electricpotential_);
  }
  if (lead12electricpotential) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lead12electricpotential)->GetArena();
    if (message_arena != submessage_arena) {
      lead12electricpotential = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lead12electricpotential, submessage_arena);
    }
    
  } else {
    
  }
  lead12electricpotential_ = lead12electricpotential;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramData.Lead12ElectricPotential)
}

// -------------------------------------------------------------------

// ElectroCardioGramWaveformData

// .pulse.cdm.bind.ElectroCardioGramWaveformData.eWaveformLead Lead = 1;
inline void ElectroCardioGramWaveformData::clear_lead() {
  lead_ = 0;
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::_internal_lead() const {
  return static_cast< ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead >(lead_);
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::lead() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformData.Lead)
  return _internal_lead();
}
inline void ElectroCardioGramWaveformData::_internal_set_lead(::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead value) {
  
  lead_ = value;
}
inline void ElectroCardioGramWaveformData::set_lead(::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead value) {
  _internal_set_lead(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ElectroCardioGramWaveformData.Lead)
}

// .pulse.cdm.bind.eHeartRhythm Rhythm = 2;
inline void ElectroCardioGramWaveformData::clear_rhythm() {
  rhythm_ = 0;
}
inline ::pulse::cdm::bind::eHeartRhythm ElectroCardioGramWaveformData::_internal_rhythm() const {
  return static_cast< ::pulse::cdm::bind::eHeartRhythm >(rhythm_);
}
inline ::pulse::cdm::bind::eHeartRhythm ElectroCardioGramWaveformData::rhythm() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformData.Rhythm)
  return _internal_rhythm();
}
inline void ElectroCardioGramWaveformData::_internal_set_rhythm(::pulse::cdm::bind::eHeartRhythm value) {
  
  rhythm_ = value;
}
inline void ElectroCardioGramWaveformData::set_rhythm(::pulse::cdm::bind::eHeartRhythm value) {
  _internal_set_rhythm(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ElectroCardioGramWaveformData.Rhythm)
}

// .pulse.cdm.bind.FunctionElectricPotentialVsTimeData Data = 3;
inline bool ElectroCardioGramWaveformData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ElectroCardioGramWaveformData::has_data() const {
  return _internal_has_data();
}
inline const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData& ElectroCardioGramWaveformData::_internal_data() const {
  const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData&>(
      ::pulse::cdm::bind::_FunctionElectricPotentialVsTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData& ElectroCardioGramWaveformData::data() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformData.Data)
  return _internal_data();
}
inline void ElectroCardioGramWaveformData::unsafe_arena_set_allocated_data(
    ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramWaveformData.Data)
}
inline ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* ElectroCardioGramWaveformData::release_data() {
  
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* ElectroCardioGramWaveformData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramWaveformData.Data)
  
  ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* ElectroCardioGramWaveformData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::FunctionElectricPotentialVsTimeData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* ElectroCardioGramWaveformData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramWaveformData.Data)
  return _internal_mutable_data();
}
inline void ElectroCardioGramWaveformData::set_allocated_data(::pulse::cdm::bind::FunctionElectricPotentialVsTimeData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramWaveformData.Data)
}

// .pulse.cdm.bind.ScalarTimeData TimeStep = 4;
inline bool ElectroCardioGramWaveformData::_internal_has_timestep() const {
  return this != internal_default_instance() && timestep_ != nullptr;
}
inline bool ElectroCardioGramWaveformData::has_timestep() const {
  return _internal_has_timestep();
}
inline const ::pulse::cdm::bind::ScalarTimeData& ElectroCardioGramWaveformData::_internal_timestep() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = timestep_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& ElectroCardioGramWaveformData::timestep() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformData.TimeStep)
  return _internal_timestep();
}
inline void ElectroCardioGramWaveformData::unsafe_arena_set_allocated_timestep(
    ::pulse::cdm::bind::ScalarTimeData* timestep) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep_);
  }
  timestep_ = timestep;
  if (timestep) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.ElectroCardioGramWaveformData.TimeStep)
}
inline ::pulse::cdm::bind::ScalarTimeData* ElectroCardioGramWaveformData::release_timestep() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = timestep_;
  timestep_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ElectroCardioGramWaveformData::unsafe_arena_release_timestep() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.ElectroCardioGramWaveformData.TimeStep)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = timestep_;
  timestep_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* ElectroCardioGramWaveformData::_internal_mutable_timestep() {
  
  if (timestep_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    timestep_ = p;
  }
  return timestep_;
}
inline ::pulse::cdm::bind::ScalarTimeData* ElectroCardioGramWaveformData::mutable_timestep() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramWaveformData.TimeStep)
  return _internal_mutable_timestep();
}
inline void ElectroCardioGramWaveformData::set_allocated_timestep(::pulse::cdm::bind::ScalarTimeData* timestep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep_);
  }
  if (timestep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestep)->GetArena();
    if (message_arena != submessage_arena) {
      timestep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestep, submessage_arena);
    }
    
  } else {
    
  }
  timestep_ = timestep;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ElectroCardioGramWaveformData.TimeStep)
}

// repeated int32 ActiveIndicies = 5;
inline int ElectroCardioGramWaveformData::_internal_activeindicies_size() const {
  return activeindicies_.size();
}
inline int ElectroCardioGramWaveformData::activeindicies_size() const {
  return _internal_activeindicies_size();
}
inline void ElectroCardioGramWaveformData::clear_activeindicies() {
  activeindicies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ElectroCardioGramWaveformData::_internal_activeindicies(int index) const {
  return activeindicies_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ElectroCardioGramWaveformData::activeindicies(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformData.ActiveIndicies)
  return _internal_activeindicies(index);
}
inline void ElectroCardioGramWaveformData::set_activeindicies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  activeindicies_.Set(index, value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.ElectroCardioGramWaveformData.ActiveIndicies)
}
inline void ElectroCardioGramWaveformData::_internal_add_activeindicies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  activeindicies_.Add(value);
}
inline void ElectroCardioGramWaveformData::add_activeindicies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_activeindicies(value);
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ElectroCardioGramWaveformData.ActiveIndicies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ElectroCardioGramWaveformData::_internal_activeindicies() const {
  return activeindicies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ElectroCardioGramWaveformData::activeindicies() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ElectroCardioGramWaveformData.ActiveIndicies)
  return _internal_activeindicies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ElectroCardioGramWaveformData::_internal_mutable_activeindicies() {
  return &activeindicies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ElectroCardioGramWaveformData::mutable_activeindicies() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ElectroCardioGramWaveformData.ActiveIndicies)
  return _internal_mutable_activeindicies();
}

// -------------------------------------------------------------------

// ElectroCardioGramWaveformListData

// repeated .pulse.cdm.bind.ElectroCardioGramWaveformData Waveform = 1;
inline int ElectroCardioGramWaveformListData::_internal_waveform_size() const {
  return waveform_.size();
}
inline int ElectroCardioGramWaveformListData::waveform_size() const {
  return _internal_waveform_size();
}
inline void ElectroCardioGramWaveformListData::clear_waveform() {
  waveform_.Clear();
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformData* ElectroCardioGramWaveformListData::mutable_waveform(int index) {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.ElectroCardioGramWaveformListData.Waveform)
  return waveform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectroCardioGramWaveformData >*
ElectroCardioGramWaveformListData::mutable_waveform() {
  // @@protoc_insertion_point(field_mutable_list:pulse.cdm.bind.ElectroCardioGramWaveformListData.Waveform)
  return &waveform_;
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformData& ElectroCardioGramWaveformListData::_internal_waveform(int index) const {
  return waveform_.Get(index);
}
inline const ::pulse::cdm::bind::ElectroCardioGramWaveformData& ElectroCardioGramWaveformListData::waveform(int index) const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.ElectroCardioGramWaveformListData.Waveform)
  return _internal_waveform(index);
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformData* ElectroCardioGramWaveformListData::_internal_add_waveform() {
  return waveform_.Add();
}
inline ::pulse::cdm::bind::ElectroCardioGramWaveformData* ElectroCardioGramWaveformListData::add_waveform() {
  // @@protoc_insertion_point(field_add:pulse.cdm.bind.ElectroCardioGramWaveformListData.Waveform)
  return _internal_add_waveform();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pulse::cdm::bind::ElectroCardioGramWaveformData >&
ElectroCardioGramWaveformListData::waveform() const {
  // @@protoc_insertion_point(field_list:pulse.cdm.bind.ElectroCardioGramWaveformListData.Waveform)
  return waveform_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead>() {
  return ::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto
