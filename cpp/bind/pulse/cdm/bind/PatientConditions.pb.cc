// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientConditions.proto

#include "pulse/cdm/bind/PatientConditions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionData_pulse_2fcdm_2fbind_2fConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyPatientConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyPatientConditionData> _instance;
} _AnyPatientConditionData_default_instance_;
class PatientConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientConditionData> _instance;
} _PatientConditionData_default_instance_;
class AcuteRespiratoryDistressSyndromeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcuteRespiratoryDistressSyndromeData> _instance;
} _AcuteRespiratoryDistressSyndromeData_default_instance_;
class ChronicAnemiaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicAnemiaData> _instance;
} _ChronicAnemiaData_default_instance_;
class ChronicVentricularSystolicDysfunctionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicVentricularSystolicDysfunctionData> _instance;
} _ChronicVentricularSystolicDysfunctionData_default_instance_;
class ChronicObstructivePulmonaryDiseaseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicObstructivePulmonaryDiseaseData> _instance;
} _ChronicObstructivePulmonaryDiseaseData_default_instance_;
class ChronicPericardialEffusionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicPericardialEffusionData> _instance;
} _ChronicPericardialEffusionData_default_instance_;
class ChronicRenalStenosisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChronicRenalStenosisData> _instance;
} _ChronicRenalStenosisData_default_instance_;
class ConsumeMealDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsumeMealData> _instance;
} _ConsumeMealData_default_instance_;
class ImpairedAlveolarExchangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImpairedAlveolarExchangeData> _instance;
} _ImpairedAlveolarExchangeData_default_instance_;
class LobarPneumoniaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LobarPneumoniaData> _instance;
} _LobarPneumoniaData_default_instance_;
class PulmonaryFibrosisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulmonaryFibrosisData> _instance;
} _PulmonaryFibrosisData_default_instance_;
class PulmonaryShuntDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulmonaryShuntData> _instance;
} _PulmonaryShuntData_default_instance_;
class SepsisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SepsisData> _instance;
} _SepsisData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyPatientConditionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyPatientConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,}};

static void InitDefaultsscc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicAnemiaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicAnemiaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicPericardialEffusionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicPericardialEffusionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicRenalStenosisData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicRenalStenosisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ChronicVentricularSystolicDysfunctionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,}};

static void InitDefaultsscc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ConsumeMealData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ConsumeMealData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_MealData_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.base,}};

static void InitDefaultsscc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ImpairedAlveolarExchangeData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ImpairedAlveolarExchangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_ScalarAreaData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LobarPneumoniaData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LobarPneumoniaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientConditionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_ConditionData_pulse_2fcdm_2fbind_2fConditions_2eproto.base,}};

static void InitDefaultsscc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PulmonaryFibrosisData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PulmonaryFibrosisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PulmonaryShuntData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PulmonaryShuntData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_SepsisData_default_instance_;
    new (ptr) ::pulse::cdm::bind::SepsisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto}, {
      &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPatientConditions_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientConditions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientConditions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientConditionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyPatientConditionData, Condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientConditionData, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData, severity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData, leftlungaffected_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData, rightlungaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicAnemiaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicAnemiaData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicAnemiaData, reductionfactor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData, patientcondition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData, bronchitisseverity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData, emphysemaseverity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicPericardialEffusionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicPericardialEffusionData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicPericardialEffusionData, accumulatedvolume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicRenalStenosisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicRenalStenosisData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicRenalStenosisData, leftkidneyseverity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ChronicRenalStenosisData, rightkidneyseverity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeMealData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeMealData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeMealData, patientcondition_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ConsumeMealData, Option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeData, patientcondition_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ImpairedAlveolarExchangeData, Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaData, severity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaData, leftlungaffected_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LobarPneumoniaData, rightlungaffected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFibrosisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFibrosisData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFibrosisData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryShuntData, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SepsisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SepsisData, patientcondition_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::SepsisData, severity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyPatientConditionData)},
  { 18, -1, sizeof(::pulse::cdm::bind::PatientConditionData)},
  { 24, -1, sizeof(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData)},
  { 33, -1, sizeof(::pulse::cdm::bind::ChronicAnemiaData)},
  { 40, -1, sizeof(::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData)},
  { 46, -1, sizeof(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData)},
  { 54, -1, sizeof(::pulse::cdm::bind::ChronicPericardialEffusionData)},
  { 61, -1, sizeof(::pulse::cdm::bind::ChronicRenalStenosisData)},
  { 69, -1, sizeof(::pulse::cdm::bind::ConsumeMealData)},
  { 78, -1, sizeof(::pulse::cdm::bind::ImpairedAlveolarExchangeData)},
  { 88, -1, sizeof(::pulse::cdm::bind::LobarPneumoniaData)},
  { 97, -1, sizeof(::pulse::cdm::bind::PulmonaryFibrosisData)},
  { 104, -1, sizeof(::pulse::cdm::bind::PulmonaryShuntData)},
  { 111, -1, sizeof(::pulse::cdm::bind::SepsisData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyPatientConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AcuteRespiratoryDistressSyndromeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicAnemiaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicVentricularSystolicDysfunctionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicObstructivePulmonaryDiseaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicPericardialEffusionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ChronicRenalStenosisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ConsumeMealData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ImpairedAlveolarExchangeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LobarPneumoniaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PulmonaryFibrosisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PulmonaryShuntData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_SepsisData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientConditions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pulse/cdm/bind/PatientConditions.proto"
  "\022\016pulse.cdm.bind\032\037pulse/cdm/bind/Propert"
  "ies.proto\032%pulse/cdm/bind/PatientNutriti"
  "on.proto\032\037pulse/cdm/bind/Conditions.prot"
  "o\"\256\007\n\027AnyPatientConditionData\022`\n AcuteRe"
  "spiratoryDistressSyndrome\030\001 \001(\01324.pulse."
  "cdm.bind.AcuteRespiratoryDistressSyndrom"
  "eDataH\000\022:\n\rChronicAnemia\030\002 \001(\0132!.pulse.c"
  "dm.bind.ChronicAnemiaDataH\000\022d\n\"ChronicOb"
  "structivePulmonaryDisease\030\003 \001(\01326.pulse."
  "cdm.bind.ChronicObstructivePulmonaryDise"
  "aseDataH\000\022T\n\032ChronicPericardialEffusion\030"
  "\004 \001(\0132..pulse.cdm.bind.ChronicPericardia"
  "lEffusionDataH\000\022H\n\024ChronicRenalStenosis\030"
  "\005 \001(\0132(.pulse.cdm.bind.ChronicRenalSteno"
  "sisDataH\000\022j\n%ChronicVentricularSystolicD"
  "ysfunction\030\006 \001(\01329.pulse.cdm.bind.Chroni"
  "cVentricularSystolicDysfunctionDataH\000\0226\n"
  "\013ConsumeMeal\030\007 \001(\0132\037.pulse.cdm.bind.Cons"
  "umeMealDataH\000\022P\n\030ImpairedAlveolarExchang"
  "e\030\010 \001(\0132,.pulse.cdm.bind.ImpairedAlveola"
  "rExchangeDataH\000\022<\n\016LobarPneumonia\030\t \001(\0132"
  "\".pulse.cdm.bind.LobarPneumoniaDataH\000\022B\n"
  "\021PulmonaryFibrosis\030\n \001(\0132%.pulse.cdm.bin"
  "d.PulmonaryFibrosisDataH\000\022<\n\016PulmonarySh"
  "unt\030\013 \001(\0132\".pulse.cdm.bind.PulmonaryShun"
  "tDataH\000\022,\n\006Sepsis\030\014 \001(\0132\032.pulse.cdm.bind"
  ".SepsisDataH\000B\013\n\tCondition\"H\n\024PatientCon"
  "ditionData\0220\n\tCondition\030\001 \001(\0132\035.pulse.cd"
  "m.bind.ConditionData\"\215\002\n$AcuteRespirator"
  "yDistressSyndromeData\022>\n\020PatientConditio"
  "n\030\001 \001(\0132$.pulse.cdm.bind.PatientConditio"
  "nData\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bind"
  ".Scalar0To1Data\0228\n\020LeftLungAffected\030\003 \001("
  "\0132\036.pulse.cdm.bind.Scalar0To1Data\0229\n\021Rig"
  "htLungAffected\030\004 \001(\0132\036.pulse.cdm.bind.Sc"
  "alar0To1Data\"\214\001\n\021ChronicAnemiaData\022>\n\020Pa"
  "tientCondition\030\001 \001(\0132$.pulse.cdm.bind.Pa"
  "tientConditionData\0227\n\017ReductionFactor\030\002 "
  "\001(\0132\036.pulse.cdm.bind.Scalar0To1Data\"k\n)C"
  "hronicVentricularSystolicDysfunctionData"
  "\022>\n\020PatientCondition\030\001 \001(\0132$.pulse.cdm.b"
  "ind.PatientConditionData\"\337\001\n&ChronicObst"
  "ructivePulmonaryDiseaseData\022>\n\020PatientCo"
  "ndition\030\001 \001(\0132$.pulse.cdm.bind.PatientCo"
  "nditionData\022:\n\022BronchitisSeverity\030\002 \001(\0132"
  "\036.pulse.cdm.bind.Scalar0To1Data\0229\n\021Emphy"
  "semaSeverity\030\003 \001(\0132\036.pulse.cdm.bind.Scal"
  "ar0To1Data\"\235\001\n\036ChronicPericardialEffusio"
  "nData\022>\n\020PatientCondition\030\001 \001(\0132$.pulse."
  "cdm.bind.PatientConditionData\022;\n\021Accumul"
  "atedVolume\030\002 \001(\0132 .pulse.cdm.bind.Scalar"
  "VolumeData\"\323\001\n\030ChronicRenalStenosisData\022"
  ">\n\020PatientCondition\030\001 \001(\0132$.pulse.cdm.bi"
  "nd.PatientConditionData\022:\n\022LeftKidneySev"
  "erity\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1D"
  "ata\022;\n\023RightKidneySeverity\030\003 \001(\0132\036.pulse"
  ".cdm.bind.Scalar0To1Data\"\231\001\n\017ConsumeMeal"
  "Data\022>\n\020PatientCondition\030\001 \001(\0132$.pulse.c"
  "dm.bind.PatientConditionData\022(\n\004Meal\030\002 \001"
  "(\0132\030.pulse.cdm.bind.MealDataH\000\022\022\n\010MealFi"
  "le\030\003 \001(\tH\000B\010\n\006Option\"\226\002\n\034ImpairedAlveola"
  "rExchangeData\022>\n\020PatientCondition\030\001 \001(\0132"
  "$.pulse.cdm.bind.PatientConditionData\022=\n"
  "\023ImpairedSurfaceArea\030\002 \001(\0132\036.pulse.cdm.b"
  "ind.ScalarAreaDataH\000\022:\n\020ImpairedFraction"
  "\030\003 \001(\0132\036.pulse.cdm.bind.Scalar0To1DataH\000"
  "\0222\n\010Severity\030\004 \001(\0132\036.pulse.cdm.bind.Scal"
  "ar0To1DataH\000B\007\n\005Value\"\373\001\n\022LobarPneumonia"
  "Data\022>\n\020PatientCondition\030\001 \001(\0132$.pulse.c"
  "dm.bind.PatientConditionData\0220\n\010Severity"
  "\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1Data\0228"
  "\n\020LeftLungAffected\030\003 \001(\0132\036.pulse.cdm.bin"
  "d.Scalar0To1Data\0229\n\021RightLungAffected\030\004 "
  "\001(\0132\036.pulse.cdm.bind.Scalar0To1Data\"\211\001\n\025"
  "PulmonaryFibrosisData\022>\n\020PatientConditio"
  "n\030\001 \001(\0132$.pulse.cdm.bind.PatientConditio"
  "nData\0220\n\010Severity\030\002 \001(\0132\036.pulse.cdm.bind"
  ".Scalar0To1Data\"\206\001\n\022PulmonaryShuntData\022>"
  "\n\020PatientCondition\030\001 \001(\0132$.pulse.cdm.bin"
  "d.PatientConditionData\0220\n\010Severity\030\002 \001(\013"
  "2\036.pulse.cdm.bind.Scalar0To1Data\"~\n\nSeps"
  "isData\022>\n\020PatientCondition\030\001 \001(\0132$.pulse"
  ".cdm.bind.PatientConditionData\0220\n\010Severi"
  "ty\030\002 \001(\0132\036.pulse.cdm.bind.Scalar0To1Data"
  "B/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pulse"
  ".cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_deps[3] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fConditions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_sccs[14] = {
  &scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
  &scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientConditions_2eproto, "pulse/cdm/bind/PatientConditions.proto", 3457,
  &descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto_deps, 14, 3,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPatientConditions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPatientConditions_2eproto, 14, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientConditions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientConditions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPatientConditions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientConditions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyPatientConditionData::_Internal {
 public:
  static const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData& acuterespiratorydistresssyndrome(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ChronicAnemiaData& chronicanemia(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData& chronicobstructivepulmonarydisease(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ChronicPericardialEffusionData& chronicpericardialeffusion(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ChronicRenalStenosisData& chronicrenalstenosis(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData& chronicventricularsystolicdysfunction(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ConsumeMealData& consumemeal(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::ImpairedAlveolarExchangeData& impairedalveolarexchange(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::LobarPneumoniaData& lobarpneumonia(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::PulmonaryFibrosisData& pulmonaryfibrosis(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::PulmonaryShuntData& pulmonaryshunt(const AnyPatientConditionData* msg);
  static const ::pulse::cdm::bind::SepsisData& sepsis(const AnyPatientConditionData* msg);
};

const ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData&
AnyPatientConditionData::_Internal::acuterespiratorydistresssyndrome(const AnyPatientConditionData* msg) {
  return *msg->Condition_.acuterespiratorydistresssyndrome_;
}
const ::pulse::cdm::bind::ChronicAnemiaData&
AnyPatientConditionData::_Internal::chronicanemia(const AnyPatientConditionData* msg) {
  return *msg->Condition_.chronicanemia_;
}
const ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData&
AnyPatientConditionData::_Internal::chronicobstructivepulmonarydisease(const AnyPatientConditionData* msg) {
  return *msg->Condition_.chronicobstructivepulmonarydisease_;
}
const ::pulse::cdm::bind::ChronicPericardialEffusionData&
AnyPatientConditionData::_Internal::chronicpericardialeffusion(const AnyPatientConditionData* msg) {
  return *msg->Condition_.chronicpericardialeffusion_;
}
const ::pulse::cdm::bind::ChronicRenalStenosisData&
AnyPatientConditionData::_Internal::chronicrenalstenosis(const AnyPatientConditionData* msg) {
  return *msg->Condition_.chronicrenalstenosis_;
}
const ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData&
AnyPatientConditionData::_Internal::chronicventricularsystolicdysfunction(const AnyPatientConditionData* msg) {
  return *msg->Condition_.chronicventricularsystolicdysfunction_;
}
const ::pulse::cdm::bind::ConsumeMealData&
AnyPatientConditionData::_Internal::consumemeal(const AnyPatientConditionData* msg) {
  return *msg->Condition_.consumemeal_;
}
const ::pulse::cdm::bind::ImpairedAlveolarExchangeData&
AnyPatientConditionData::_Internal::impairedalveolarexchange(const AnyPatientConditionData* msg) {
  return *msg->Condition_.impairedalveolarexchange_;
}
const ::pulse::cdm::bind::LobarPneumoniaData&
AnyPatientConditionData::_Internal::lobarpneumonia(const AnyPatientConditionData* msg) {
  return *msg->Condition_.lobarpneumonia_;
}
const ::pulse::cdm::bind::PulmonaryFibrosisData&
AnyPatientConditionData::_Internal::pulmonaryfibrosis(const AnyPatientConditionData* msg) {
  return *msg->Condition_.pulmonaryfibrosis_;
}
const ::pulse::cdm::bind::PulmonaryShuntData&
AnyPatientConditionData::_Internal::pulmonaryshunt(const AnyPatientConditionData* msg) {
  return *msg->Condition_.pulmonaryshunt_;
}
const ::pulse::cdm::bind::SepsisData&
AnyPatientConditionData::_Internal::sepsis(const AnyPatientConditionData* msg) {
  return *msg->Condition_.sepsis_;
}
void AnyPatientConditionData::set_allocated_acuterespiratorydistresssyndrome(::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* acuterespiratorydistresssyndrome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (acuterespiratorydistresssyndrome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acuterespiratorydistresssyndrome);
    if (message_arena != submessage_arena) {
      acuterespiratorydistresssyndrome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acuterespiratorydistresssyndrome, submessage_arena);
    }
    set_has_acuterespiratorydistresssyndrome();
    Condition_.acuterespiratorydistresssyndrome_ = acuterespiratorydistresssyndrome;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.AcuteRespiratoryDistressSyndrome)
}
void AnyPatientConditionData::set_allocated_chronicanemia(::pulse::cdm::bind::ChronicAnemiaData* chronicanemia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (chronicanemia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicanemia);
    if (message_arena != submessage_arena) {
      chronicanemia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicanemia, submessage_arena);
    }
    set_has_chronicanemia();
    Condition_.chronicanemia_ = chronicanemia;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ChronicAnemia)
}
void AnyPatientConditionData::set_allocated_chronicobstructivepulmonarydisease(::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* chronicobstructivepulmonarydisease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (chronicobstructivepulmonarydisease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicobstructivepulmonarydisease);
    if (message_arena != submessage_arena) {
      chronicobstructivepulmonarydisease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicobstructivepulmonarydisease, submessage_arena);
    }
    set_has_chronicobstructivepulmonarydisease();
    Condition_.chronicobstructivepulmonarydisease_ = chronicobstructivepulmonarydisease;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ChronicObstructivePulmonaryDisease)
}
void AnyPatientConditionData::set_allocated_chronicpericardialeffusion(::pulse::cdm::bind::ChronicPericardialEffusionData* chronicpericardialeffusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (chronicpericardialeffusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicpericardialeffusion);
    if (message_arena != submessage_arena) {
      chronicpericardialeffusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicpericardialeffusion, submessage_arena);
    }
    set_has_chronicpericardialeffusion();
    Condition_.chronicpericardialeffusion_ = chronicpericardialeffusion;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ChronicPericardialEffusion)
}
void AnyPatientConditionData::set_allocated_chronicrenalstenosis(::pulse::cdm::bind::ChronicRenalStenosisData* chronicrenalstenosis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (chronicrenalstenosis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicrenalstenosis);
    if (message_arena != submessage_arena) {
      chronicrenalstenosis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicrenalstenosis, submessage_arena);
    }
    set_has_chronicrenalstenosis();
    Condition_.chronicrenalstenosis_ = chronicrenalstenosis;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ChronicRenalStenosis)
}
void AnyPatientConditionData::set_allocated_chronicventricularsystolicdysfunction(::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* chronicventricularsystolicdysfunction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (chronicventricularsystolicdysfunction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chronicventricularsystolicdysfunction);
    if (message_arena != submessage_arena) {
      chronicventricularsystolicdysfunction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chronicventricularsystolicdysfunction, submessage_arena);
    }
    set_has_chronicventricularsystolicdysfunction();
    Condition_.chronicventricularsystolicdysfunction_ = chronicventricularsystolicdysfunction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ChronicVentricularSystolicDysfunction)
}
void AnyPatientConditionData::set_allocated_consumemeal(::pulse::cdm::bind::ConsumeMealData* consumemeal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (consumemeal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consumemeal);
    if (message_arena != submessage_arena) {
      consumemeal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumemeal, submessage_arena);
    }
    set_has_consumemeal();
    Condition_.consumemeal_ = consumemeal;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ConsumeMeal)
}
void AnyPatientConditionData::set_allocated_impairedalveolarexchange(::pulse::cdm::bind::ImpairedAlveolarExchangeData* impairedalveolarexchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (impairedalveolarexchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(impairedalveolarexchange);
    if (message_arena != submessage_arena) {
      impairedalveolarexchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedalveolarexchange, submessage_arena);
    }
    set_has_impairedalveolarexchange();
    Condition_.impairedalveolarexchange_ = impairedalveolarexchange;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.ImpairedAlveolarExchange)
}
void AnyPatientConditionData::set_allocated_lobarpneumonia(::pulse::cdm::bind::LobarPneumoniaData* lobarpneumonia) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (lobarpneumonia) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lobarpneumonia);
    if (message_arena != submessage_arena) {
      lobarpneumonia = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobarpneumonia, submessage_arena);
    }
    set_has_lobarpneumonia();
    Condition_.lobarpneumonia_ = lobarpneumonia;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.LobarPneumonia)
}
void AnyPatientConditionData::set_allocated_pulmonaryfibrosis(::pulse::cdm::bind::PulmonaryFibrosisData* pulmonaryfibrosis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (pulmonaryfibrosis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pulmonaryfibrosis);
    if (message_arena != submessage_arena) {
      pulmonaryfibrosis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryfibrosis, submessage_arena);
    }
    set_has_pulmonaryfibrosis();
    Condition_.pulmonaryfibrosis_ = pulmonaryfibrosis;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.PulmonaryFibrosis)
}
void AnyPatientConditionData::set_allocated_pulmonaryshunt(::pulse::cdm::bind::PulmonaryShuntData* pulmonaryshunt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (pulmonaryshunt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pulmonaryshunt);
    if (message_arena != submessage_arena) {
      pulmonaryshunt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulmonaryshunt, submessage_arena);
    }
    set_has_pulmonaryshunt();
    Condition_.pulmonaryshunt_ = pulmonaryshunt;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.PulmonaryShunt)
}
void AnyPatientConditionData::set_allocated_sepsis(::pulse::cdm::bind::SepsisData* sepsis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (sepsis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sepsis);
    if (message_arena != submessage_arena) {
      sepsis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sepsis, submessage_arena);
    }
    set_has_sepsis();
    Condition_.sepsis_ = sepsis;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyPatientConditionData.Sepsis)
}
AnyPatientConditionData::AnyPatientConditionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AnyPatientConditionData)
}
AnyPatientConditionData::AnyPatientConditionData(const AnyPatientConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Condition();
  switch (from.Condition_case()) {
    case kAcuteRespiratoryDistressSyndrome: {
      _internal_mutable_acuterespiratorydistresssyndrome()->::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData::MergeFrom(from._internal_acuterespiratorydistresssyndrome());
      break;
    }
    case kChronicAnemia: {
      _internal_mutable_chronicanemia()->::pulse::cdm::bind::ChronicAnemiaData::MergeFrom(from._internal_chronicanemia());
      break;
    }
    case kChronicObstructivePulmonaryDisease: {
      _internal_mutable_chronicobstructivepulmonarydisease()->::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData::MergeFrom(from._internal_chronicobstructivepulmonarydisease());
      break;
    }
    case kChronicPericardialEffusion: {
      _internal_mutable_chronicpericardialeffusion()->::pulse::cdm::bind::ChronicPericardialEffusionData::MergeFrom(from._internal_chronicpericardialeffusion());
      break;
    }
    case kChronicRenalStenosis: {
      _internal_mutable_chronicrenalstenosis()->::pulse::cdm::bind::ChronicRenalStenosisData::MergeFrom(from._internal_chronicrenalstenosis());
      break;
    }
    case kChronicVentricularSystolicDysfunction: {
      _internal_mutable_chronicventricularsystolicdysfunction()->::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData::MergeFrom(from._internal_chronicventricularsystolicdysfunction());
      break;
    }
    case kConsumeMeal: {
      _internal_mutable_consumemeal()->::pulse::cdm::bind::ConsumeMealData::MergeFrom(from._internal_consumemeal());
      break;
    }
    case kImpairedAlveolarExchange: {
      _internal_mutable_impairedalveolarexchange()->::pulse::cdm::bind::ImpairedAlveolarExchangeData::MergeFrom(from._internal_impairedalveolarexchange());
      break;
    }
    case kLobarPneumonia: {
      _internal_mutable_lobarpneumonia()->::pulse::cdm::bind::LobarPneumoniaData::MergeFrom(from._internal_lobarpneumonia());
      break;
    }
    case kPulmonaryFibrosis: {
      _internal_mutable_pulmonaryfibrosis()->::pulse::cdm::bind::PulmonaryFibrosisData::MergeFrom(from._internal_pulmonaryfibrosis());
      break;
    }
    case kPulmonaryShunt: {
      _internal_mutable_pulmonaryshunt()->::pulse::cdm::bind::PulmonaryShuntData::MergeFrom(from._internal_pulmonaryshunt());
      break;
    }
    case kSepsis: {
      _internal_mutable_sepsis()->::pulse::cdm::bind::SepsisData::MergeFrom(from._internal_sepsis());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyPatientConditionData)
}

void AnyPatientConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  clear_has_Condition();
}

AnyPatientConditionData::~AnyPatientConditionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyPatientConditionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyPatientConditionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Condition()) {
    clear_Condition();
  }
}

void AnyPatientConditionData::ArenaDtor(void* object) {
  AnyPatientConditionData* _this = reinterpret_cast< AnyPatientConditionData* >(object);
  (void)_this;
}
void AnyPatientConditionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyPatientConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyPatientConditionData& AnyPatientConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyPatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void AnyPatientConditionData::clear_Condition() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyPatientConditionData)
  switch (Condition_case()) {
    case kAcuteRespiratoryDistressSyndrome: {
      if (GetArena() == nullptr) {
        delete Condition_.acuterespiratorydistresssyndrome_;
      }
      break;
    }
    case kChronicAnemia: {
      if (GetArena() == nullptr) {
        delete Condition_.chronicanemia_;
      }
      break;
    }
    case kChronicObstructivePulmonaryDisease: {
      if (GetArena() == nullptr) {
        delete Condition_.chronicobstructivepulmonarydisease_;
      }
      break;
    }
    case kChronicPericardialEffusion: {
      if (GetArena() == nullptr) {
        delete Condition_.chronicpericardialeffusion_;
      }
      break;
    }
    case kChronicRenalStenosis: {
      if (GetArena() == nullptr) {
        delete Condition_.chronicrenalstenosis_;
      }
      break;
    }
    case kChronicVentricularSystolicDysfunction: {
      if (GetArena() == nullptr) {
        delete Condition_.chronicventricularsystolicdysfunction_;
      }
      break;
    }
    case kConsumeMeal: {
      if (GetArena() == nullptr) {
        delete Condition_.consumemeal_;
      }
      break;
    }
    case kImpairedAlveolarExchange: {
      if (GetArena() == nullptr) {
        delete Condition_.impairedalveolarexchange_;
      }
      break;
    }
    case kLobarPneumonia: {
      if (GetArena() == nullptr) {
        delete Condition_.lobarpneumonia_;
      }
      break;
    }
    case kPulmonaryFibrosis: {
      if (GetArena() == nullptr) {
        delete Condition_.pulmonaryfibrosis_;
      }
      break;
    }
    case kPulmonaryShunt: {
      if (GetArena() == nullptr) {
        delete Condition_.pulmonaryshunt_;
      }
      break;
    }
    case kSepsis: {
      if (GetArena() == nullptr) {
        delete Condition_.sepsis_;
      }
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_NOT_SET;
}


void AnyPatientConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyPatientConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Condition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyPatientConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData AcuteRespiratoryDistressSyndrome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acuterespiratorydistresssyndrome(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicAnemiaData ChronicAnemia = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicanemia(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData ChronicObstructivePulmonaryDisease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicobstructivepulmonarydisease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicPericardialEffusionData ChronicPericardialEffusion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicpericardialeffusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicRenalStenosisData ChronicRenalStenosis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicrenalstenosis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData ChronicVentricularSystolicDysfunction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chronicventricularsystolicdysfunction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ConsumeMealData ConsumeMeal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_consumemeal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ImpairedAlveolarExchangeData ImpairedAlveolarExchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedalveolarexchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.LobarPneumoniaData LobarPneumonia = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobarpneumonia(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PulmonaryFibrosisData PulmonaryFibrosis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryfibrosis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.PulmonaryShuntData PulmonaryShunt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pulmonaryshunt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.SepsisData Sepsis = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sepsis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyPatientConditionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyPatientConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData AcuteRespiratoryDistressSyndrome = 1;
  if (_internal_has_acuterespiratorydistresssyndrome()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acuterespiratorydistresssyndrome(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicAnemiaData ChronicAnemia = 2;
  if (_internal_has_chronicanemia()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chronicanemia(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData ChronicObstructivePulmonaryDisease = 3;
  if (_internal_has_chronicobstructivepulmonarydisease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chronicobstructivepulmonarydisease(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicPericardialEffusionData ChronicPericardialEffusion = 4;
  if (_internal_has_chronicpericardialeffusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chronicpericardialeffusion(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicRenalStenosisData ChronicRenalStenosis = 5;
  if (_internal_has_chronicrenalstenosis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chronicrenalstenosis(this), target, stream);
  }

  // .pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData ChronicVentricularSystolicDysfunction = 6;
  if (_internal_has_chronicventricularsystolicdysfunction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::chronicventricularsystolicdysfunction(this), target, stream);
  }

  // .pulse.cdm.bind.ConsumeMealData ConsumeMeal = 7;
  if (_internal_has_consumemeal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::consumemeal(this), target, stream);
  }

  // .pulse.cdm.bind.ImpairedAlveolarExchangeData ImpairedAlveolarExchange = 8;
  if (_internal_has_impairedalveolarexchange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::impairedalveolarexchange(this), target, stream);
  }

  // .pulse.cdm.bind.LobarPneumoniaData LobarPneumonia = 9;
  if (_internal_has_lobarpneumonia()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lobarpneumonia(this), target, stream);
  }

  // .pulse.cdm.bind.PulmonaryFibrosisData PulmonaryFibrosis = 10;
  if (_internal_has_pulmonaryfibrosis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pulmonaryfibrosis(this), target, stream);
  }

  // .pulse.cdm.bind.PulmonaryShuntData PulmonaryShunt = 11;
  if (_internal_has_pulmonaryshunt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::pulmonaryshunt(this), target, stream);
  }

  // .pulse.cdm.bind.SepsisData Sepsis = 12;
  if (_internal_has_sepsis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sepsis(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyPatientConditionData)
  return target;
}

size_t AnyPatientConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyPatientConditionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Condition_case()) {
    // .pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData AcuteRespiratoryDistressSyndrome = 1;
    case kAcuteRespiratoryDistressSyndrome: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.acuterespiratorydistresssyndrome_);
      break;
    }
    // .pulse.cdm.bind.ChronicAnemiaData ChronicAnemia = 2;
    case kChronicAnemia: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.chronicanemia_);
      break;
    }
    // .pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData ChronicObstructivePulmonaryDisease = 3;
    case kChronicObstructivePulmonaryDisease: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.chronicobstructivepulmonarydisease_);
      break;
    }
    // .pulse.cdm.bind.ChronicPericardialEffusionData ChronicPericardialEffusion = 4;
    case kChronicPericardialEffusion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.chronicpericardialeffusion_);
      break;
    }
    // .pulse.cdm.bind.ChronicRenalStenosisData ChronicRenalStenosis = 5;
    case kChronicRenalStenosis: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.chronicrenalstenosis_);
      break;
    }
    // .pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData ChronicVentricularSystolicDysfunction = 6;
    case kChronicVentricularSystolicDysfunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.chronicventricularsystolicdysfunction_);
      break;
    }
    // .pulse.cdm.bind.ConsumeMealData ConsumeMeal = 7;
    case kConsumeMeal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.consumemeal_);
      break;
    }
    // .pulse.cdm.bind.ImpairedAlveolarExchangeData ImpairedAlveolarExchange = 8;
    case kImpairedAlveolarExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.impairedalveolarexchange_);
      break;
    }
    // .pulse.cdm.bind.LobarPneumoniaData LobarPneumonia = 9;
    case kLobarPneumonia: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.lobarpneumonia_);
      break;
    }
    // .pulse.cdm.bind.PulmonaryFibrosisData PulmonaryFibrosis = 10;
    case kPulmonaryFibrosis: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.pulmonaryfibrosis_);
      break;
    }
    // .pulse.cdm.bind.PulmonaryShuntData PulmonaryShunt = 11;
    case kPulmonaryShunt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.pulmonaryshunt_);
      break;
    }
    // .pulse.cdm.bind.SepsisData Sepsis = 12;
    case kSepsis: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.sepsis_);
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyPatientConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyPatientConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyPatientConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyPatientConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyPatientConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyPatientConditionData)
    MergeFrom(*source);
  }
}

void AnyPatientConditionData::MergeFrom(const AnyPatientConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyPatientConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Condition_case()) {
    case kAcuteRespiratoryDistressSyndrome: {
      _internal_mutable_acuterespiratorydistresssyndrome()->::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData::MergeFrom(from._internal_acuterespiratorydistresssyndrome());
      break;
    }
    case kChronicAnemia: {
      _internal_mutable_chronicanemia()->::pulse::cdm::bind::ChronicAnemiaData::MergeFrom(from._internal_chronicanemia());
      break;
    }
    case kChronicObstructivePulmonaryDisease: {
      _internal_mutable_chronicobstructivepulmonarydisease()->::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData::MergeFrom(from._internal_chronicobstructivepulmonarydisease());
      break;
    }
    case kChronicPericardialEffusion: {
      _internal_mutable_chronicpericardialeffusion()->::pulse::cdm::bind::ChronicPericardialEffusionData::MergeFrom(from._internal_chronicpericardialeffusion());
      break;
    }
    case kChronicRenalStenosis: {
      _internal_mutable_chronicrenalstenosis()->::pulse::cdm::bind::ChronicRenalStenosisData::MergeFrom(from._internal_chronicrenalstenosis());
      break;
    }
    case kChronicVentricularSystolicDysfunction: {
      _internal_mutable_chronicventricularsystolicdysfunction()->::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData::MergeFrom(from._internal_chronicventricularsystolicdysfunction());
      break;
    }
    case kConsumeMeal: {
      _internal_mutable_consumemeal()->::pulse::cdm::bind::ConsumeMealData::MergeFrom(from._internal_consumemeal());
      break;
    }
    case kImpairedAlveolarExchange: {
      _internal_mutable_impairedalveolarexchange()->::pulse::cdm::bind::ImpairedAlveolarExchangeData::MergeFrom(from._internal_impairedalveolarexchange());
      break;
    }
    case kLobarPneumonia: {
      _internal_mutable_lobarpneumonia()->::pulse::cdm::bind::LobarPneumoniaData::MergeFrom(from._internal_lobarpneumonia());
      break;
    }
    case kPulmonaryFibrosis: {
      _internal_mutable_pulmonaryfibrosis()->::pulse::cdm::bind::PulmonaryFibrosisData::MergeFrom(from._internal_pulmonaryfibrosis());
      break;
    }
    case kPulmonaryShunt: {
      _internal_mutable_pulmonaryshunt()->::pulse::cdm::bind::PulmonaryShuntData::MergeFrom(from._internal_pulmonaryshunt());
      break;
    }
    case kSepsis: {
      _internal_mutable_sepsis()->::pulse::cdm::bind::SepsisData::MergeFrom(from._internal_sepsis());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
}

void AnyPatientConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyPatientConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyPatientConditionData::CopyFrom(const AnyPatientConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyPatientConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyPatientConditionData::IsInitialized() const {
  return true;
}

void AnyPatientConditionData::InternalSwap(AnyPatientConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Condition_, other->Condition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyPatientConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PatientConditionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ConditionData& condition(const PatientConditionData* msg);
};

const ::pulse::cdm::bind::ConditionData&
PatientConditionData::_Internal::condition(const PatientConditionData* msg) {
  return *msg->condition_;
}
void PatientConditionData::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
PatientConditionData::PatientConditionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PatientConditionData)
}
PatientConditionData::PatientConditionData(const PatientConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::pulse::cdm::bind::ConditionData(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientConditionData)
}

void PatientConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  condition_ = nullptr;
}

PatientConditionData::~PatientConditionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientConditionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientConditionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete condition_;
}

void PatientConditionData::ArenaDtor(void* object) {
  PatientConditionData* _this = reinterpret_cast< PatientConditionData* >(object);
  (void)_this;
}
void PatientConditionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientConditionData& PatientConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientConditionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void PatientConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ConditionData Condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientConditionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ConditionData Condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientConditionData)
  return target;
}

size_t PatientConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientConditionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ConditionData Condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientConditionData)
    MergeFrom(*source);
  }
}

void PatientConditionData::MergeFrom(const PatientConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    _internal_mutable_condition()->::pulse::cdm::bind::ConditionData::MergeFrom(from._internal_condition());
  }
}

void PatientConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientConditionData::CopyFrom(const PatientConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientConditionData::IsInitialized() const {
  return true;
}

void PatientConditionData::InternalSwap(PatientConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AcuteRespiratoryDistressSyndromeData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const AcuteRespiratoryDistressSyndromeData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const AcuteRespiratoryDistressSyndromeData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected(const AcuteRespiratoryDistressSyndromeData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected(const AcuteRespiratoryDistressSyndromeData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
AcuteRespiratoryDistressSyndromeData::_Internal::patientcondition(const AcuteRespiratoryDistressSyndromeData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeData::_Internal::severity(const AcuteRespiratoryDistressSyndromeData* msg) {
  return *msg->severity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeData::_Internal::leftlungaffected(const AcuteRespiratoryDistressSyndromeData* msg) {
  return *msg->leftlungaffected_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
AcuteRespiratoryDistressSyndromeData::_Internal::rightlungaffected(const AcuteRespiratoryDistressSyndromeData* msg) {
  return *msg->rightlungaffected_;
}
void AcuteRespiratoryDistressSyndromeData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
void AcuteRespiratoryDistressSyndromeData::clear_leftlungaffected() {
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
}
void AcuteRespiratoryDistressSyndromeData::clear_rightlungaffected() {
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
}
AcuteRespiratoryDistressSyndromeData::AcuteRespiratoryDistressSyndromeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
}
AcuteRespiratoryDistressSyndromeData::AcuteRespiratoryDistressSyndromeData(const AcuteRespiratoryDistressSyndromeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_leftlungaffected()) {
    leftlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftlungaffected_);
  } else {
    leftlungaffected_ = nullptr;
  }
  if (from._internal_has_rightlungaffected()) {
    rightlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightlungaffected_);
  } else {
    rightlungaffected_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
}

void AcuteRespiratoryDistressSyndromeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rightlungaffected_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(rightlungaffected_));
}

AcuteRespiratoryDistressSyndromeData::~AcuteRespiratoryDistressSyndromeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AcuteRespiratoryDistressSyndromeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete leftlungaffected_;
  if (this != internal_default_instance()) delete rightlungaffected_;
}

void AcuteRespiratoryDistressSyndromeData::ArenaDtor(void* object) {
  AcuteRespiratoryDistressSyndromeData* _this = reinterpret_cast< AcuteRespiratoryDistressSyndromeData* >(object);
  (void)_this;
}
void AcuteRespiratoryDistressSyndromeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcuteRespiratoryDistressSyndromeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcuteRespiratoryDistressSyndromeData& AcuteRespiratoryDistressSyndromeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcuteRespiratoryDistressSyndromeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void AcuteRespiratoryDistressSyndromeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcuteRespiratoryDistressSyndromeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcuteRespiratoryDistressSyndromeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leftlungaffected(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rightlungaffected(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  return target;
}

size_t AcuteRespiratoryDistressSyndromeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftlungaffected_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightlungaffected_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcuteRespiratoryDistressSyndromeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  GOOGLE_DCHECK_NE(&from, this);
  const AcuteRespiratoryDistressSyndromeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcuteRespiratoryDistressSyndromeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
    MergeFrom(*source);
  }
}

void AcuteRespiratoryDistressSyndromeData::MergeFrom(const AcuteRespiratoryDistressSyndromeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.has_leftlungaffected()) {
    _internal_mutable_leftlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftlungaffected());
  }
  if (from.has_rightlungaffected()) {
    _internal_mutable_rightlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightlungaffected());
  }
}

void AcuteRespiratoryDistressSyndromeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcuteRespiratoryDistressSyndromeData::CopyFrom(const AcuteRespiratoryDistressSyndromeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AcuteRespiratoryDistressSyndromeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcuteRespiratoryDistressSyndromeData::IsInitialized() const {
  return true;
}

void AcuteRespiratoryDistressSyndromeData::InternalSwap(AcuteRespiratoryDistressSyndromeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AcuteRespiratoryDistressSyndromeData, rightlungaffected_)
      + sizeof(AcuteRespiratoryDistressSyndromeData::rightlungaffected_)
      - PROTOBUF_FIELD_OFFSET(AcuteRespiratoryDistressSyndromeData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AcuteRespiratoryDistressSyndromeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicAnemiaData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ChronicAnemiaData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& reductionfactor(const ChronicAnemiaData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ChronicAnemiaData::_Internal::patientcondition(const ChronicAnemiaData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicAnemiaData::_Internal::reductionfactor(const ChronicAnemiaData* msg) {
  return *msg->reductionfactor_;
}
void ChronicAnemiaData::clear_reductionfactor() {
  if (GetArena() == nullptr && reductionfactor_ != nullptr) {
    delete reductionfactor_;
  }
  reductionfactor_ = nullptr;
}
ChronicAnemiaData::ChronicAnemiaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicAnemiaData)
}
ChronicAnemiaData::ChronicAnemiaData(const ChronicAnemiaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_reductionfactor()) {
    reductionfactor_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.reductionfactor_);
  } else {
    reductionfactor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicAnemiaData)
}

void ChronicAnemiaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reductionfactor_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(reductionfactor_));
}

ChronicAnemiaData::~ChronicAnemiaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicAnemiaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicAnemiaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete reductionfactor_;
}

void ChronicAnemiaData::ArenaDtor(void* object) {
  ChronicAnemiaData* _this = reinterpret_cast< ChronicAnemiaData* >(object);
  (void)_this;
}
void ChronicAnemiaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicAnemiaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicAnemiaData& ChronicAnemiaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicAnemiaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ChronicAnemiaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicAnemiaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && reductionfactor_ != nullptr) {
    delete reductionfactor_;
  }
  reductionfactor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicAnemiaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ReductionFactor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reductionfactor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicAnemiaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicAnemiaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ReductionFactor = 2;
  if (this->has_reductionfactor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reductionfactor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicAnemiaData)
  return target;
}

size_t ChronicAnemiaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicAnemiaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data ReductionFactor = 2;
  if (this->has_reductionfactor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reductionfactor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicAnemiaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicAnemiaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicAnemiaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicAnemiaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicAnemiaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicAnemiaData)
    MergeFrom(*source);
  }
}

void ChronicAnemiaData::MergeFrom(const ChronicAnemiaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicAnemiaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_reductionfactor()) {
    _internal_mutable_reductionfactor()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_reductionfactor());
  }
}

void ChronicAnemiaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicAnemiaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicAnemiaData::CopyFrom(const ChronicAnemiaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicAnemiaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicAnemiaData::IsInitialized() const {
  return true;
}

void ChronicAnemiaData::InternalSwap(ChronicAnemiaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronicAnemiaData, reductionfactor_)
      + sizeof(ChronicAnemiaData::reductionfactor_)
      - PROTOBUF_FIELD_OFFSET(ChronicAnemiaData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicAnemiaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicVentricularSystolicDysfunctionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ChronicVentricularSystolicDysfunctionData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ChronicVentricularSystolicDysfunctionData::_Internal::patientcondition(const ChronicVentricularSystolicDysfunctionData* msg) {
  return *msg->patientcondition_;
}
ChronicVentricularSystolicDysfunctionData::ChronicVentricularSystolicDysfunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
}
ChronicVentricularSystolicDysfunctionData::ChronicVentricularSystolicDysfunctionData(const ChronicVentricularSystolicDysfunctionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
}

void ChronicVentricularSystolicDysfunctionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  patientcondition_ = nullptr;
}

ChronicVentricularSystolicDysfunctionData::~ChronicVentricularSystolicDysfunctionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicVentricularSystolicDysfunctionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
}

void ChronicVentricularSystolicDysfunctionData::ArenaDtor(void* object) {
  ChronicVentricularSystolicDysfunctionData* _this = reinterpret_cast< ChronicVentricularSystolicDysfunctionData* >(object);
  (void)_this;
}
void ChronicVentricularSystolicDysfunctionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicVentricularSystolicDysfunctionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicVentricularSystolicDysfunctionData& ChronicVentricularSystolicDysfunctionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicVentricularSystolicDysfunctionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ChronicVentricularSystolicDysfunctionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicVentricularSystolicDysfunctionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicVentricularSystolicDysfunctionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  return target;
}

size_t ChronicVentricularSystolicDysfunctionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicVentricularSystolicDysfunctionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicVentricularSystolicDysfunctionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicVentricularSystolicDysfunctionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
    MergeFrom(*source);
  }
}

void ChronicVentricularSystolicDysfunctionData::MergeFrom(const ChronicVentricularSystolicDysfunctionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
}

void ChronicVentricularSystolicDysfunctionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicVentricularSystolicDysfunctionData::CopyFrom(const ChronicVentricularSystolicDysfunctionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicVentricularSystolicDysfunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicVentricularSystolicDysfunctionData::IsInitialized() const {
  return true;
}

void ChronicVentricularSystolicDysfunctionData::InternalSwap(ChronicVentricularSystolicDysfunctionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientcondition_, other->patientcondition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicVentricularSystolicDysfunctionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicObstructivePulmonaryDiseaseData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ChronicObstructivePulmonaryDiseaseData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& bronchitisseverity(const ChronicObstructivePulmonaryDiseaseData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& emphysemaseverity(const ChronicObstructivePulmonaryDiseaseData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ChronicObstructivePulmonaryDiseaseData::_Internal::patientcondition(const ChronicObstructivePulmonaryDiseaseData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicObstructivePulmonaryDiseaseData::_Internal::bronchitisseverity(const ChronicObstructivePulmonaryDiseaseData* msg) {
  return *msg->bronchitisseverity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicObstructivePulmonaryDiseaseData::_Internal::emphysemaseverity(const ChronicObstructivePulmonaryDiseaseData* msg) {
  return *msg->emphysemaseverity_;
}
void ChronicObstructivePulmonaryDiseaseData::clear_bronchitisseverity() {
  if (GetArena() == nullptr && bronchitisseverity_ != nullptr) {
    delete bronchitisseverity_;
  }
  bronchitisseverity_ = nullptr;
}
void ChronicObstructivePulmonaryDiseaseData::clear_emphysemaseverity() {
  if (GetArena() == nullptr && emphysemaseverity_ != nullptr) {
    delete emphysemaseverity_;
  }
  emphysemaseverity_ = nullptr;
}
ChronicObstructivePulmonaryDiseaseData::ChronicObstructivePulmonaryDiseaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
}
ChronicObstructivePulmonaryDiseaseData::ChronicObstructivePulmonaryDiseaseData(const ChronicObstructivePulmonaryDiseaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_bronchitisseverity()) {
    bronchitisseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.bronchitisseverity_);
  } else {
    bronchitisseverity_ = nullptr;
  }
  if (from._internal_has_emphysemaseverity()) {
    emphysemaseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.emphysemaseverity_);
  } else {
    emphysemaseverity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
}

void ChronicObstructivePulmonaryDiseaseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&emphysemaseverity_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(emphysemaseverity_));
}

ChronicObstructivePulmonaryDiseaseData::~ChronicObstructivePulmonaryDiseaseData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicObstructivePulmonaryDiseaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete bronchitisseverity_;
  if (this != internal_default_instance()) delete emphysemaseverity_;
}

void ChronicObstructivePulmonaryDiseaseData::ArenaDtor(void* object) {
  ChronicObstructivePulmonaryDiseaseData* _this = reinterpret_cast< ChronicObstructivePulmonaryDiseaseData* >(object);
  (void)_this;
}
void ChronicObstructivePulmonaryDiseaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicObstructivePulmonaryDiseaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicObstructivePulmonaryDiseaseData& ChronicObstructivePulmonaryDiseaseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicObstructivePulmonaryDiseaseData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ChronicObstructivePulmonaryDiseaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && bronchitisseverity_ != nullptr) {
    delete bronchitisseverity_;
  }
  bronchitisseverity_ = nullptr;
  if (GetArena() == nullptr && emphysemaseverity_ != nullptr) {
    delete emphysemaseverity_;
  }
  emphysemaseverity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicObstructivePulmonaryDiseaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bronchitisseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_emphysemaseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicObstructivePulmonaryDiseaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  if (this->has_bronchitisseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bronchitisseverity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  if (this->has_emphysemaseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::emphysemaseverity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  return target;
}

size_t ChronicObstructivePulmonaryDiseaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data BronchitisSeverity = 2;
  if (this->has_bronchitisseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bronchitisseverity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data EmphysemaSeverity = 3;
  if (this->has_emphysemaseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emphysemaseverity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicObstructivePulmonaryDiseaseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicObstructivePulmonaryDiseaseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicObstructivePulmonaryDiseaseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
    MergeFrom(*source);
  }
}

void ChronicObstructivePulmonaryDiseaseData::MergeFrom(const ChronicObstructivePulmonaryDiseaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_bronchitisseverity()) {
    _internal_mutable_bronchitisseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_bronchitisseverity());
  }
  if (from.has_emphysemaseverity()) {
    _internal_mutable_emphysemaseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_emphysemaseverity());
  }
}

void ChronicObstructivePulmonaryDiseaseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicObstructivePulmonaryDiseaseData::CopyFrom(const ChronicObstructivePulmonaryDiseaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicObstructivePulmonaryDiseaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicObstructivePulmonaryDiseaseData::IsInitialized() const {
  return true;
}

void ChronicObstructivePulmonaryDiseaseData::InternalSwap(ChronicObstructivePulmonaryDiseaseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronicObstructivePulmonaryDiseaseData, emphysemaseverity_)
      + sizeof(ChronicObstructivePulmonaryDiseaseData::emphysemaseverity_)
      - PROTOBUF_FIELD_OFFSET(ChronicObstructivePulmonaryDiseaseData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicObstructivePulmonaryDiseaseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicPericardialEffusionData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ChronicPericardialEffusionData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& accumulatedvolume(const ChronicPericardialEffusionData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ChronicPericardialEffusionData::_Internal::patientcondition(const ChronicPericardialEffusionData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
ChronicPericardialEffusionData::_Internal::accumulatedvolume(const ChronicPericardialEffusionData* msg) {
  return *msg->accumulatedvolume_;
}
void ChronicPericardialEffusionData::clear_accumulatedvolume() {
  if (GetArena() == nullptr && accumulatedvolume_ != nullptr) {
    delete accumulatedvolume_;
  }
  accumulatedvolume_ = nullptr;
}
ChronicPericardialEffusionData::ChronicPericardialEffusionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicPericardialEffusionData)
}
ChronicPericardialEffusionData::ChronicPericardialEffusionData(const ChronicPericardialEffusionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_accumulatedvolume()) {
    accumulatedvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.accumulatedvolume_);
  } else {
    accumulatedvolume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicPericardialEffusionData)
}

void ChronicPericardialEffusionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&accumulatedvolume_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(accumulatedvolume_));
}

ChronicPericardialEffusionData::~ChronicPericardialEffusionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicPericardialEffusionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicPericardialEffusionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete accumulatedvolume_;
}

void ChronicPericardialEffusionData::ArenaDtor(void* object) {
  ChronicPericardialEffusionData* _this = reinterpret_cast< ChronicPericardialEffusionData* >(object);
  (void)_this;
}
void ChronicPericardialEffusionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicPericardialEffusionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicPericardialEffusionData& ChronicPericardialEffusionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicPericardialEffusionData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ChronicPericardialEffusionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && accumulatedvolume_ != nullptr) {
    delete accumulatedvolume_;
  }
  accumulatedvolume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicPericardialEffusionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData AccumulatedVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accumulatedvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicPericardialEffusionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData AccumulatedVolume = 2;
  if (this->has_accumulatedvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accumulatedvolume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicPericardialEffusionData)
  return target;
}

size_t ChronicPericardialEffusionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.ScalarVolumeData AccumulatedVolume = 2;
  if (this->has_accumulatedvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accumulatedvolume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicPericardialEffusionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicPericardialEffusionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicPericardialEffusionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicPericardialEffusionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicPericardialEffusionData)
    MergeFrom(*source);
  }
}

void ChronicPericardialEffusionData::MergeFrom(const ChronicPericardialEffusionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_accumulatedvolume()) {
    _internal_mutable_accumulatedvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_accumulatedvolume());
  }
}

void ChronicPericardialEffusionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicPericardialEffusionData::CopyFrom(const ChronicPericardialEffusionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicPericardialEffusionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicPericardialEffusionData::IsInitialized() const {
  return true;
}

void ChronicPericardialEffusionData::InternalSwap(ChronicPericardialEffusionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronicPericardialEffusionData, accumulatedvolume_)
      + sizeof(ChronicPericardialEffusionData::accumulatedvolume_)
      - PROTOBUF_FIELD_OFFSET(ChronicPericardialEffusionData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicPericardialEffusionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChronicRenalStenosisData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ChronicRenalStenosisData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftkidneyseverity(const ChronicRenalStenosisData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightkidneyseverity(const ChronicRenalStenosisData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ChronicRenalStenosisData::_Internal::patientcondition(const ChronicRenalStenosisData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicRenalStenosisData::_Internal::leftkidneyseverity(const ChronicRenalStenosisData* msg) {
  return *msg->leftkidneyseverity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ChronicRenalStenosisData::_Internal::rightkidneyseverity(const ChronicRenalStenosisData* msg) {
  return *msg->rightkidneyseverity_;
}
void ChronicRenalStenosisData::clear_leftkidneyseverity() {
  if (GetArena() == nullptr && leftkidneyseverity_ != nullptr) {
    delete leftkidneyseverity_;
  }
  leftkidneyseverity_ = nullptr;
}
void ChronicRenalStenosisData::clear_rightkidneyseverity() {
  if (GetArena() == nullptr && rightkidneyseverity_ != nullptr) {
    delete rightkidneyseverity_;
  }
  rightkidneyseverity_ = nullptr;
}
ChronicRenalStenosisData::ChronicRenalStenosisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ChronicRenalStenosisData)
}
ChronicRenalStenosisData::ChronicRenalStenosisData(const ChronicRenalStenosisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_leftkidneyseverity()) {
    leftkidneyseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftkidneyseverity_);
  } else {
    leftkidneyseverity_ = nullptr;
  }
  if (from._internal_has_rightkidneyseverity()) {
    rightkidneyseverity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightkidneyseverity_);
  } else {
    rightkidneyseverity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ChronicRenalStenosisData)
}

void ChronicRenalStenosisData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rightkidneyseverity_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(rightkidneyseverity_));
}

ChronicRenalStenosisData::~ChronicRenalStenosisData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ChronicRenalStenosisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChronicRenalStenosisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete leftkidneyseverity_;
  if (this != internal_default_instance()) delete rightkidneyseverity_;
}

void ChronicRenalStenosisData::ArenaDtor(void* object) {
  ChronicRenalStenosisData* _this = reinterpret_cast< ChronicRenalStenosisData* >(object);
  (void)_this;
}
void ChronicRenalStenosisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChronicRenalStenosisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChronicRenalStenosisData& ChronicRenalStenosisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChronicRenalStenosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ChronicRenalStenosisData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ChronicRenalStenosisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && leftkidneyseverity_ != nullptr) {
    delete leftkidneyseverity_;
  }
  leftkidneyseverity_ = nullptr;
  if (GetArena() == nullptr && rightkidneyseverity_ != nullptr) {
    delete rightkidneyseverity_;
  }
  rightkidneyseverity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronicRenalStenosisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftKidneySeverity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftkidneyseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightKidneySeverity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightkidneyseverity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronicRenalStenosisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ChronicRenalStenosisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftKidneySeverity = 2;
  if (this->has_leftkidneyseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leftkidneyseverity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightKidneySeverity = 3;
  if (this->has_rightkidneyseverity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rightkidneyseverity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ChronicRenalStenosisData)
  return target;
}

size_t ChronicRenalStenosisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ChronicRenalStenosisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftKidneySeverity = 2;
  if (this->has_leftkidneyseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftkidneyseverity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightKidneySeverity = 3;
  if (this->has_rightkidneyseverity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightkidneyseverity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronicRenalStenosisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ChronicRenalStenosisData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronicRenalStenosisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChronicRenalStenosisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ChronicRenalStenosisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ChronicRenalStenosisData)
    MergeFrom(*source);
  }
}

void ChronicRenalStenosisData::MergeFrom(const ChronicRenalStenosisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ChronicRenalStenosisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_leftkidneyseverity()) {
    _internal_mutable_leftkidneyseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftkidneyseverity());
  }
  if (from.has_rightkidneyseverity()) {
    _internal_mutable_rightkidneyseverity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightkidneyseverity());
  }
}

void ChronicRenalStenosisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ChronicRenalStenosisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronicRenalStenosisData::CopyFrom(const ChronicRenalStenosisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ChronicRenalStenosisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronicRenalStenosisData::IsInitialized() const {
  return true;
}

void ChronicRenalStenosisData::InternalSwap(ChronicRenalStenosisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronicRenalStenosisData, rightkidneyseverity_)
      + sizeof(ChronicRenalStenosisData::rightkidneyseverity_)
      - PROTOBUF_FIELD_OFFSET(ChronicRenalStenosisData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronicRenalStenosisData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ConsumeMealData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ConsumeMealData* msg);
  static const ::pulse::cdm::bind::MealData& meal(const ConsumeMealData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ConsumeMealData::_Internal::patientcondition(const ConsumeMealData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::MealData&
ConsumeMealData::_Internal::meal(const ConsumeMealData* msg) {
  return *msg->Option_.meal_;
}
void ConsumeMealData::set_allocated_meal(::pulse::cdm::bind::MealData* meal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (meal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meal)->GetArena();
    if (message_arena != submessage_arena) {
      meal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meal, submessage_arena);
    }
    set_has_meal();
    Option_.meal_ = meal;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ConsumeMealData.Meal)
}
void ConsumeMealData::clear_meal() {
  if (_internal_has_meal()) {
    if (GetArena() == nullptr) {
      delete Option_.meal_;
    }
    clear_has_Option();
  }
}
ConsumeMealData::ConsumeMealData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ConsumeMealData)
}
ConsumeMealData::ConsumeMealData(const ConsumeMealData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kMeal: {
      _internal_mutable_meal()->::pulse::cdm::bind::MealData::MergeFrom(from._internal_meal());
      break;
    }
    case kMealFile: {
      _internal_set_mealfile(from._internal_mealfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ConsumeMealData)
}

void ConsumeMealData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  patientcondition_ = nullptr;
  clear_has_Option();
}

ConsumeMealData::~ConsumeMealData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ConsumeMealData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsumeMealData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (has_Option()) {
    clear_Option();
  }
}

void ConsumeMealData::ArenaDtor(void* object) {
  ConsumeMealData* _this = reinterpret_cast< ConsumeMealData* >(object);
  (void)_this;
}
void ConsumeMealData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsumeMealData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsumeMealData& ConsumeMealData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsumeMealData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ConsumeMealData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ConsumeMealData)
  switch (Option_case()) {
    case kMeal: {
      if (GetArena() == nullptr) {
        delete Option_.meal_;
      }
      break;
    }
    case kMealFile: {
      Option_.mealfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void ConsumeMealData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ConsumeMealData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsumeMealData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.MealData Meal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MealFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mealfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.ConsumeMealData.MealFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsumeMealData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ConsumeMealData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.MealData Meal = 2;
  if (_internal_has_meal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meal(this), target, stream);
  }

  // string MealFile = 3;
  if (_internal_has_mealfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mealfile().data(), static_cast<int>(this->_internal_mealfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.ConsumeMealData.MealFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mealfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ConsumeMealData)
  return target;
}

size_t ConsumeMealData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ConsumeMealData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.MealData Meal = 2;
    case kMeal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.meal_);
      break;
    }
    // string MealFile = 3;
    case kMealFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mealfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsumeMealData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ConsumeMealData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsumeMealData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsumeMealData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ConsumeMealData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ConsumeMealData)
    MergeFrom(*source);
  }
}

void ConsumeMealData::MergeFrom(const ConsumeMealData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ConsumeMealData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  switch (from.Option_case()) {
    case kMeal: {
      _internal_mutable_meal()->::pulse::cdm::bind::MealData::MergeFrom(from._internal_meal());
      break;
    }
    case kMealFile: {
      _internal_set_mealfile(from._internal_mealfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void ConsumeMealData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ConsumeMealData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeMealData::CopyFrom(const ConsumeMealData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ConsumeMealData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeMealData::IsInitialized() const {
  return true;
}

void ConsumeMealData::InternalSwap(ConsumeMealData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientcondition_, other->patientcondition_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsumeMealData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImpairedAlveolarExchangeData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const ImpairedAlveolarExchangeData* msg);
  static const ::pulse::cdm::bind::ScalarAreaData& impairedsurfacearea(const ImpairedAlveolarExchangeData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& impairedfraction(const ImpairedAlveolarExchangeData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const ImpairedAlveolarExchangeData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
ImpairedAlveolarExchangeData::_Internal::patientcondition(const ImpairedAlveolarExchangeData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::ScalarAreaData&
ImpairedAlveolarExchangeData::_Internal::impairedsurfacearea(const ImpairedAlveolarExchangeData* msg) {
  return *msg->Value_.impairedsurfacearea_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ImpairedAlveolarExchangeData::_Internal::impairedfraction(const ImpairedAlveolarExchangeData* msg) {
  return *msg->Value_.impairedfraction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
ImpairedAlveolarExchangeData::_Internal::severity(const ImpairedAlveolarExchangeData* msg) {
  return *msg->Value_.severity_;
}
void ImpairedAlveolarExchangeData::set_allocated_impairedsurfacearea(::pulse::cdm::bind::ScalarAreaData* impairedsurfacearea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (impairedsurfacearea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedsurfacearea)->GetArena();
    if (message_arena != submessage_arena) {
      impairedsurfacearea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedsurfacearea, submessage_arena);
    }
    set_has_impairedsurfacearea();
    Value_.impairedsurfacearea_ = impairedsurfacearea;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedSurfaceArea)
}
void ImpairedAlveolarExchangeData::clear_impairedsurfacearea() {
  if (_internal_has_impairedsurfacearea()) {
    if (GetArena() == nullptr) {
      delete Value_.impairedsurfacearea_;
    }
    clear_has_Value();
  }
}
void ImpairedAlveolarExchangeData::set_allocated_impairedfraction(::pulse::cdm::bind::Scalar0To1Data* impairedfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (impairedfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impairedfraction)->GetArena();
    if (message_arena != submessage_arena) {
      impairedfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impairedfraction, submessage_arena);
    }
    set_has_impairedfraction();
    Value_.impairedfraction_ = impairedfraction;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.ImpairedFraction)
}
void ImpairedAlveolarExchangeData::clear_impairedfraction() {
  if (_internal_has_impairedfraction()) {
    if (GetArena() == nullptr) {
      delete Value_.impairedfraction_;
    }
    clear_has_Value();
  }
}
void ImpairedAlveolarExchangeData::set_allocated_severity(::pulse::cdm::bind::Scalar0To1Data* severity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Value();
  if (severity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(severity)->GetArena();
    if (message_arena != submessage_arena) {
      severity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, severity, submessage_arena);
    }
    set_has_severity();
    Value_.severity_ = severity;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.ImpairedAlveolarExchangeData.Severity)
}
void ImpairedAlveolarExchangeData::clear_severity() {
  if (_internal_has_severity()) {
    if (GetArena() == nullptr) {
      delete Value_.severity_;
    }
    clear_has_Value();
  }
}
ImpairedAlveolarExchangeData::ImpairedAlveolarExchangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ImpairedAlveolarExchangeData)
}
ImpairedAlveolarExchangeData::ImpairedAlveolarExchangeData(const ImpairedAlveolarExchangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  clear_has_Value();
  switch (from.Value_case()) {
    case kImpairedSurfaceArea: {
      _internal_mutable_impairedsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_impairedsurfacearea());
      break;
    }
    case kImpairedFraction: {
      _internal_mutable_impairedfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_impairedfraction());
      break;
    }
    case kSeverity: {
      _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ImpairedAlveolarExchangeData)
}

void ImpairedAlveolarExchangeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  patientcondition_ = nullptr;
  clear_has_Value();
}

ImpairedAlveolarExchangeData::~ImpairedAlveolarExchangeData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImpairedAlveolarExchangeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (has_Value()) {
    clear_Value();
  }
}

void ImpairedAlveolarExchangeData::ArenaDtor(void* object) {
  ImpairedAlveolarExchangeData* _this = reinterpret_cast< ImpairedAlveolarExchangeData* >(object);
  (void)_this;
}
void ImpairedAlveolarExchangeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImpairedAlveolarExchangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImpairedAlveolarExchangeData& ImpairedAlveolarExchangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImpairedAlveolarExchangeData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void ImpairedAlveolarExchangeData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  switch (Value_case()) {
    case kImpairedSurfaceArea: {
      if (GetArena() == nullptr) {
        delete Value_.impairedsurfacearea_;
      }
      break;
    }
    case kImpairedFraction: {
      if (GetArena() == nullptr) {
        delete Value_.impairedfraction_;
      }
      break;
    }
    case kSeverity: {
      if (GetArena() == nullptr) {
        delete Value_.severity_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ImpairedAlveolarExchangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImpairedAlveolarExchangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedsurfacearea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_impairedfraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImpairedAlveolarExchangeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
  if (_internal_has_impairedsurfacearea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::impairedsurfacearea(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
  if (_internal_has_impairedfraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::impairedfraction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
  if (_internal_has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  return target;
}

size_t ImpairedAlveolarExchangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  switch (Value_case()) {
    // .pulse.cdm.bind.ScalarAreaData ImpairedSurfaceArea = 2;
    case kImpairedSurfaceArea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.impairedsurfacearea_);
      break;
    }
    // .pulse.cdm.bind.Scalar0To1Data ImpairedFraction = 3;
    case kImpairedFraction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.impairedfraction_);
      break;
    }
    // .pulse.cdm.bind.Scalar0To1Data Severity = 4;
    case kSeverity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Value_.severity_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImpairedAlveolarExchangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImpairedAlveolarExchangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImpairedAlveolarExchangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ImpairedAlveolarExchangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ImpairedAlveolarExchangeData)
    MergeFrom(*source);
  }
}

void ImpairedAlveolarExchangeData::MergeFrom(const ImpairedAlveolarExchangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  switch (from.Value_case()) {
    case kImpairedSurfaceArea: {
      _internal_mutable_impairedsurfacearea()->::pulse::cdm::bind::ScalarAreaData::MergeFrom(from._internal_impairedsurfacearea());
      break;
    }
    case kImpairedFraction: {
      _internal_mutable_impairedfraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_impairedfraction());
      break;
    }
    case kSeverity: {
      _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ImpairedAlveolarExchangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpairedAlveolarExchangeData::CopyFrom(const ImpairedAlveolarExchangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ImpairedAlveolarExchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpairedAlveolarExchangeData::IsInitialized() const {
  return true;
}

void ImpairedAlveolarExchangeData::InternalSwap(ImpairedAlveolarExchangeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(patientcondition_, other->patientcondition_);
  swap(Value_, other->Value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImpairedAlveolarExchangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LobarPneumoniaData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const LobarPneumoniaData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const LobarPneumoniaData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& leftlungaffected(const LobarPneumoniaData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& rightlungaffected(const LobarPneumoniaData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
LobarPneumoniaData::_Internal::patientcondition(const LobarPneumoniaData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaData::_Internal::severity(const LobarPneumoniaData* msg) {
  return *msg->severity_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaData::_Internal::leftlungaffected(const LobarPneumoniaData* msg) {
  return *msg->leftlungaffected_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LobarPneumoniaData::_Internal::rightlungaffected(const LobarPneumoniaData* msg) {
  return *msg->rightlungaffected_;
}
void LobarPneumoniaData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
void LobarPneumoniaData::clear_leftlungaffected() {
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
}
void LobarPneumoniaData::clear_rightlungaffected() {
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
}
LobarPneumoniaData::LobarPneumoniaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LobarPneumoniaData)
}
LobarPneumoniaData::LobarPneumoniaData(const LobarPneumoniaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_leftlungaffected()) {
    leftlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.leftlungaffected_);
  } else {
    leftlungaffected_ = nullptr;
  }
  if (from._internal_has_rightlungaffected()) {
    rightlungaffected_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.rightlungaffected_);
  } else {
    rightlungaffected_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LobarPneumoniaData)
}

void LobarPneumoniaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rightlungaffected_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(rightlungaffected_));
}

LobarPneumoniaData::~LobarPneumoniaData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LobarPneumoniaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LobarPneumoniaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete leftlungaffected_;
  if (this != internal_default_instance()) delete rightlungaffected_;
}

void LobarPneumoniaData::ArenaDtor(void* object) {
  LobarPneumoniaData* _this = reinterpret_cast< LobarPneumoniaData* >(object);
  (void)_this;
}
void LobarPneumoniaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobarPneumoniaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LobarPneumoniaData& LobarPneumoniaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LobarPneumoniaData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void LobarPneumoniaData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LobarPneumoniaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArena() == nullptr && leftlungaffected_ != nullptr) {
    delete leftlungaffected_;
  }
  leftlungaffected_ = nullptr;
  if (GetArena() == nullptr && rightlungaffected_ != nullptr) {
    delete rightlungaffected_;
  }
  rightlungaffected_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobarPneumoniaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightlungaffected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LobarPneumoniaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LobarPneumoniaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leftlungaffected(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rightlungaffected(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LobarPneumoniaData)
  return target;
}

size_t LobarPneumoniaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LobarPneumoniaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .pulse.cdm.bind.Scalar0To1Data LeftLungAffected = 3;
  if (this->has_leftlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leftlungaffected_);
  }

  // .pulse.cdm.bind.Scalar0To1Data RightLungAffected = 4;
  if (this->has_rightlungaffected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightlungaffected_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LobarPneumoniaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LobarPneumoniaData)
  GOOGLE_DCHECK_NE(&from, this);
  const LobarPneumoniaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LobarPneumoniaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LobarPneumoniaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LobarPneumoniaData)
    MergeFrom(*source);
  }
}

void LobarPneumoniaData::MergeFrom(const LobarPneumoniaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LobarPneumoniaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
  if (from.has_leftlungaffected()) {
    _internal_mutable_leftlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_leftlungaffected());
  }
  if (from.has_rightlungaffected()) {
    _internal_mutable_rightlungaffected()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_rightlungaffected());
  }
}

void LobarPneumoniaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LobarPneumoniaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobarPneumoniaData::CopyFrom(const LobarPneumoniaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LobarPneumoniaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobarPneumoniaData::IsInitialized() const {
  return true;
}

void LobarPneumoniaData::InternalSwap(LobarPneumoniaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobarPneumoniaData, rightlungaffected_)
      + sizeof(LobarPneumoniaData::rightlungaffected_)
      - PROTOBUF_FIELD_OFFSET(LobarPneumoniaData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobarPneumoniaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PulmonaryFibrosisData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const PulmonaryFibrosisData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const PulmonaryFibrosisData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
PulmonaryFibrosisData::_Internal::patientcondition(const PulmonaryFibrosisData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
PulmonaryFibrosisData::_Internal::severity(const PulmonaryFibrosisData* msg) {
  return *msg->severity_;
}
void PulmonaryFibrosisData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
PulmonaryFibrosisData::PulmonaryFibrosisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PulmonaryFibrosisData)
}
PulmonaryFibrosisData::PulmonaryFibrosisData(const PulmonaryFibrosisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PulmonaryFibrosisData)
}

void PulmonaryFibrosisData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(severity_));
}

PulmonaryFibrosisData::~PulmonaryFibrosisData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PulmonaryFibrosisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulmonaryFibrosisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete severity_;
}

void PulmonaryFibrosisData::ArenaDtor(void* object) {
  PulmonaryFibrosisData* _this = reinterpret_cast< PulmonaryFibrosisData* >(object);
  (void)_this;
}
void PulmonaryFibrosisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulmonaryFibrosisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulmonaryFibrosisData& PulmonaryFibrosisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulmonaryFibrosisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void PulmonaryFibrosisData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PulmonaryFibrosisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulmonaryFibrosisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulmonaryFibrosisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PulmonaryFibrosisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PulmonaryFibrosisData)
  return target;
}

size_t PulmonaryFibrosisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PulmonaryFibrosisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulmonaryFibrosisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PulmonaryFibrosisData)
  GOOGLE_DCHECK_NE(&from, this);
  const PulmonaryFibrosisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulmonaryFibrosisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PulmonaryFibrosisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PulmonaryFibrosisData)
    MergeFrom(*source);
  }
}

void PulmonaryFibrosisData::MergeFrom(const PulmonaryFibrosisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PulmonaryFibrosisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void PulmonaryFibrosisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PulmonaryFibrosisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulmonaryFibrosisData::CopyFrom(const PulmonaryFibrosisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PulmonaryFibrosisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulmonaryFibrosisData::IsInitialized() const {
  return true;
}

void PulmonaryFibrosisData::InternalSwap(PulmonaryFibrosisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulmonaryFibrosisData, severity_)
      + sizeof(PulmonaryFibrosisData::severity_)
      - PROTOBUF_FIELD_OFFSET(PulmonaryFibrosisData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulmonaryFibrosisData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PulmonaryShuntData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const PulmonaryShuntData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const PulmonaryShuntData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
PulmonaryShuntData::_Internal::patientcondition(const PulmonaryShuntData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
PulmonaryShuntData::_Internal::severity(const PulmonaryShuntData* msg) {
  return *msg->severity_;
}
void PulmonaryShuntData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
PulmonaryShuntData::PulmonaryShuntData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PulmonaryShuntData)
}
PulmonaryShuntData::PulmonaryShuntData(const PulmonaryShuntData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PulmonaryShuntData)
}

void PulmonaryShuntData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(severity_));
}

PulmonaryShuntData::~PulmonaryShuntData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PulmonaryShuntData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulmonaryShuntData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete severity_;
}

void PulmonaryShuntData::ArenaDtor(void* object) {
  PulmonaryShuntData* _this = reinterpret_cast< PulmonaryShuntData* >(object);
  (void)_this;
}
void PulmonaryShuntData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulmonaryShuntData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulmonaryShuntData& PulmonaryShuntData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulmonaryShuntData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void PulmonaryShuntData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PulmonaryShuntData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulmonaryShuntData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulmonaryShuntData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PulmonaryShuntData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PulmonaryShuntData)
  return target;
}

size_t PulmonaryShuntData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PulmonaryShuntData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulmonaryShuntData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PulmonaryShuntData)
  GOOGLE_DCHECK_NE(&from, this);
  const PulmonaryShuntData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulmonaryShuntData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PulmonaryShuntData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PulmonaryShuntData)
    MergeFrom(*source);
  }
}

void PulmonaryShuntData::MergeFrom(const PulmonaryShuntData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PulmonaryShuntData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void PulmonaryShuntData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PulmonaryShuntData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulmonaryShuntData::CopyFrom(const PulmonaryShuntData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PulmonaryShuntData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulmonaryShuntData::IsInitialized() const {
  return true;
}

void PulmonaryShuntData::InternalSwap(PulmonaryShuntData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulmonaryShuntData, severity_)
      + sizeof(PulmonaryShuntData::severity_)
      - PROTOBUF_FIELD_OFFSET(PulmonaryShuntData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulmonaryShuntData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SepsisData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientConditionData& patientcondition(const SepsisData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& severity(const SepsisData* msg);
};

const ::pulse::cdm::bind::PatientConditionData&
SepsisData::_Internal::patientcondition(const SepsisData* msg) {
  return *msg->patientcondition_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
SepsisData::_Internal::severity(const SepsisData* msg) {
  return *msg->severity_;
}
void SepsisData::clear_severity() {
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
}
SepsisData::SepsisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.SepsisData)
}
SepsisData::SepsisData(const SepsisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientcondition()) {
    patientcondition_ = new ::pulse::cdm::bind::PatientConditionData(*from.patientcondition_);
  } else {
    patientcondition_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.SepsisData)
}

void SepsisData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientcondition_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&patientcondition_)) + sizeof(severity_));
}

SepsisData::~SepsisData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.SepsisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SepsisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientcondition_;
  if (this != internal_default_instance()) delete severity_;
}

void SepsisData::ArenaDtor(void* object) {
  SepsisData* _this = reinterpret_cast< SepsisData* >(object);
  (void)_this;
}
void SepsisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SepsisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SepsisData& SepsisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SepsisData_pulse_2fcdm_2fbind_2fPatientConditions_2eproto.base);
  return *internal_default_instance();
}


void SepsisData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.SepsisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientcondition_ != nullptr) {
    delete patientcondition_;
  }
  patientcondition_ = nullptr;
  if (GetArena() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SepsisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SepsisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.SepsisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientcondition(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::severity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.SepsisData)
  return target;
}

size_t SepsisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.SepsisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientConditionData PatientCondition = 1;
  if (this->has_patientcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientcondition_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Severity = 2;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SepsisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.SepsisData)
  GOOGLE_DCHECK_NE(&from, this);
  const SepsisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SepsisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.SepsisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.SepsisData)
    MergeFrom(*source);
  }
}

void SepsisData::MergeFrom(const SepsisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.SepsisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientcondition()) {
    _internal_mutable_patientcondition()->::pulse::cdm::bind::PatientConditionData::MergeFrom(from._internal_patientcondition());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_severity());
  }
}

void SepsisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.SepsisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SepsisData::CopyFrom(const SepsisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.SepsisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SepsisData::IsInitialized() const {
  return true;
}

void SepsisData::InternalSwap(SepsisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SepsisData, severity_)
      + sizeof(SepsisData::severity_)
      - PROTOBUF_FIELD_OFFSET(SepsisData, patientcondition_)>(
          reinterpret_cast<char*>(&patientcondition_),
          reinterpret_cast<char*>(&other->patientcondition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SepsisData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyPatientConditionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyPatientConditionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AnyPatientConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientConditionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientConditionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PatientConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AcuteRespiratoryDistressSyndromeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicAnemiaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicAnemiaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicAnemiaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicVentricularSystolicDysfunctionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicObstructivePulmonaryDiseaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicPericardialEffusionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicPericardialEffusionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicPericardialEffusionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ChronicRenalStenosisData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ChronicRenalStenosisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ChronicRenalStenosisData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ConsumeMealData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ConsumeMealData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ConsumeMealData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ImpairedAlveolarExchangeData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ImpairedAlveolarExchangeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ImpairedAlveolarExchangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LobarPneumoniaData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LobarPneumoniaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LobarPneumoniaData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PulmonaryFibrosisData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryFibrosisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PulmonaryFibrosisData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PulmonaryShuntData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryShuntData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PulmonaryShuntData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::SepsisData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::SepsisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::SepsisData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
