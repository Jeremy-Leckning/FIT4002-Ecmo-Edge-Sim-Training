// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/MechanicalVentilatorActions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/MechanicalVentilator.pb.h"
#include "pulse/cdm/bind/Actions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class MechanicalVentilatorActionData;
class MechanicalVentilatorActionDataDefaultTypeInternal;
extern MechanicalVentilatorActionDataDefaultTypeInternal _MechanicalVentilatorActionData_default_instance_;
class MechanicalVentilatorConfigurationData;
class MechanicalVentilatorConfigurationDataDefaultTypeInternal;
extern MechanicalVentilatorConfigurationDataDefaultTypeInternal _MechanicalVentilatorConfigurationData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::MechanicalVentilatorActionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::MechanicalVentilatorActionData>(Arena*);
template<> ::pulse::cdm::bind::MechanicalVentilatorConfigurationData* Arena::CreateMaybeMessage<::pulse::cdm::bind::MechanicalVentilatorConfigurationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class MechanicalVentilatorActionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.MechanicalVentilatorActionData) */ {
 public:
  inline MechanicalVentilatorActionData() : MechanicalVentilatorActionData(nullptr) {}
  virtual ~MechanicalVentilatorActionData();

  MechanicalVentilatorActionData(const MechanicalVentilatorActionData& from);
  MechanicalVentilatorActionData(MechanicalVentilatorActionData&& from) noexcept
    : MechanicalVentilatorActionData() {
    *this = ::std::move(from);
  }

  inline MechanicalVentilatorActionData& operator=(const MechanicalVentilatorActionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MechanicalVentilatorActionData& operator=(MechanicalVentilatorActionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MechanicalVentilatorActionData& default_instance();

  static inline const MechanicalVentilatorActionData* internal_default_instance() {
    return reinterpret_cast<const MechanicalVentilatorActionData*>(
               &_MechanicalVentilatorActionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MechanicalVentilatorActionData& a, MechanicalVentilatorActionData& b) {
    a.Swap(&b);
  }
  inline void Swap(MechanicalVentilatorActionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MechanicalVentilatorActionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MechanicalVentilatorActionData* New() const final {
    return CreateMaybeMessage<MechanicalVentilatorActionData>(nullptr);
  }

  MechanicalVentilatorActionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MechanicalVentilatorActionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MechanicalVentilatorActionData& from);
  void MergeFrom(const MechanicalVentilatorActionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MechanicalVentilatorActionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.MechanicalVentilatorActionData";
  }
  protected:
  explicit MechanicalVentilatorActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentActionFieldNumber = 1,
  };
  // .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
  bool has_equipmentaction() const;
  private:
  bool _internal_has_equipmentaction() const;
  public:
  void clear_equipmentaction();
  const ::pulse::cdm::bind::EquipmentActionData& equipmentaction() const;
  ::pulse::cdm::bind::EquipmentActionData* release_equipmentaction();
  ::pulse::cdm::bind::EquipmentActionData* mutable_equipmentaction();
  void set_allocated_equipmentaction(::pulse::cdm::bind::EquipmentActionData* equipmentaction);
  private:
  const ::pulse::cdm::bind::EquipmentActionData& _internal_equipmentaction() const;
  ::pulse::cdm::bind::EquipmentActionData* _internal_mutable_equipmentaction();
  public:
  void unsafe_arena_set_allocated_equipmentaction(
      ::pulse::cdm::bind::EquipmentActionData* equipmentaction);
  ::pulse::cdm::bind::EquipmentActionData* unsafe_arena_release_equipmentaction();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.MechanicalVentilatorActionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::EquipmentActionData* equipmentaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto;
};
// -------------------------------------------------------------------

class MechanicalVentilatorConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.MechanicalVentilatorConfigurationData) */ {
 public:
  inline MechanicalVentilatorConfigurationData() : MechanicalVentilatorConfigurationData(nullptr) {}
  virtual ~MechanicalVentilatorConfigurationData();

  MechanicalVentilatorConfigurationData(const MechanicalVentilatorConfigurationData& from);
  MechanicalVentilatorConfigurationData(MechanicalVentilatorConfigurationData&& from) noexcept
    : MechanicalVentilatorConfigurationData() {
    *this = ::std::move(from);
  }

  inline MechanicalVentilatorConfigurationData& operator=(const MechanicalVentilatorConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MechanicalVentilatorConfigurationData& operator=(MechanicalVentilatorConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MechanicalVentilatorConfigurationData& default_instance();

  enum OptionCase {
    kConfiguration = 2,
    kConfigurationFile = 3,
    OPTION_NOT_SET = 0,
  };

  static inline const MechanicalVentilatorConfigurationData* internal_default_instance() {
    return reinterpret_cast<const MechanicalVentilatorConfigurationData*>(
               &_MechanicalVentilatorConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MechanicalVentilatorConfigurationData& a, MechanicalVentilatorConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(MechanicalVentilatorConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MechanicalVentilatorConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MechanicalVentilatorConfigurationData* New() const final {
    return CreateMaybeMessage<MechanicalVentilatorConfigurationData>(nullptr);
  }

  MechanicalVentilatorConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MechanicalVentilatorConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MechanicalVentilatorConfigurationData& from);
  void MergeFrom(const MechanicalVentilatorConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MechanicalVentilatorConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.MechanicalVentilatorConfigurationData";
  }
  protected:
  explicit MechanicalVentilatorConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMechanicalVentilatorActionFieldNumber = 1,
    kConfigurationFieldNumber = 2,
    kConfigurationFileFieldNumber = 3,
  };
  // .pulse.cdm.bind.MechanicalVentilatorActionData MechanicalVentilatorAction = 1;
  bool has_mechanicalventilatoraction() const;
  private:
  bool _internal_has_mechanicalventilatoraction() const;
  public:
  void clear_mechanicalventilatoraction();
  const ::pulse::cdm::bind::MechanicalVentilatorActionData& mechanicalventilatoraction() const;
  ::pulse::cdm::bind::MechanicalVentilatorActionData* release_mechanicalventilatoraction();
  ::pulse::cdm::bind::MechanicalVentilatorActionData* mutable_mechanicalventilatoraction();
  void set_allocated_mechanicalventilatoraction(::pulse::cdm::bind::MechanicalVentilatorActionData* mechanicalventilatoraction);
  private:
  const ::pulse::cdm::bind::MechanicalVentilatorActionData& _internal_mechanicalventilatoraction() const;
  ::pulse::cdm::bind::MechanicalVentilatorActionData* _internal_mutable_mechanicalventilatoraction();
  public:
  void unsafe_arena_set_allocated_mechanicalventilatoraction(
      ::pulse::cdm::bind::MechanicalVentilatorActionData* mechanicalventilatoraction);
  ::pulse::cdm::bind::MechanicalVentilatorActionData* unsafe_arena_release_mechanicalventilatoraction();

  // .pulse.cdm.bind.MechanicalVentilatorData Configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::pulse::cdm::bind::MechanicalVentilatorData& configuration() const;
  ::pulse::cdm::bind::MechanicalVentilatorData* release_configuration();
  ::pulse::cdm::bind::MechanicalVentilatorData* mutable_configuration();
  void set_allocated_configuration(::pulse::cdm::bind::MechanicalVentilatorData* configuration);
  private:
  const ::pulse::cdm::bind::MechanicalVentilatorData& _internal_configuration() const;
  ::pulse::cdm::bind::MechanicalVentilatorData* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::pulse::cdm::bind::MechanicalVentilatorData* configuration);
  ::pulse::cdm::bind::MechanicalVentilatorData* unsafe_arena_release_configuration();

  // string ConfigurationFile = 3;
  private:
  bool _internal_has_configurationfile() const;
  public:
  void clear_configurationfile();
  const std::string& configurationfile() const;
  void set_configurationfile(const std::string& value);
  void set_configurationfile(std::string&& value);
  void set_configurationfile(const char* value);
  void set_configurationfile(const char* value, size_t size);
  std::string* mutable_configurationfile();
  std::string* release_configurationfile();
  void set_allocated_configurationfile(std::string* configurationfile);
  private:
  const std::string& _internal_configurationfile() const;
  void _internal_set_configurationfile(const std::string& value);
  std::string* _internal_mutable_configurationfile();
  public:

  void clear_Option();
  OptionCase Option_case() const;
  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.MechanicalVentilatorConfigurationData)
 private:
  class _Internal;
  void set_has_configuration();
  void set_has_configurationfile();

  inline bool has_Option() const;
  inline void clear_has_Option();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::MechanicalVentilatorActionData* mechanicalventilatoraction_;
  union OptionUnion {
    OptionUnion() {}
    ::pulse::cdm::bind::MechanicalVentilatorData* configuration_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationfile_;
  } Option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MechanicalVentilatorActionData

// .pulse.cdm.bind.EquipmentActionData EquipmentAction = 1;
inline bool MechanicalVentilatorActionData::_internal_has_equipmentaction() const {
  return this != internal_default_instance() && equipmentaction_ != nullptr;
}
inline bool MechanicalVentilatorActionData::has_equipmentaction() const {
  return _internal_has_equipmentaction();
}
inline const ::pulse::cdm::bind::EquipmentActionData& MechanicalVentilatorActionData::_internal_equipmentaction() const {
  const ::pulse::cdm::bind::EquipmentActionData* p = equipmentaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::EquipmentActionData&>(
      ::pulse::cdm::bind::_EquipmentActionData_default_instance_);
}
inline const ::pulse::cdm::bind::EquipmentActionData& MechanicalVentilatorActionData::equipmentaction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilatorActionData.EquipmentAction)
  return _internal_equipmentaction();
}
inline void MechanicalVentilatorActionData::unsafe_arena_set_allocated_equipmentaction(
    ::pulse::cdm::bind::EquipmentActionData* equipmentaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction_);
  }
  equipmentaction_ = equipmentaction;
  if (equipmentaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilatorActionData.EquipmentAction)
}
inline ::pulse::cdm::bind::EquipmentActionData* MechanicalVentilatorActionData::release_equipmentaction() {
  
  ::pulse::cdm::bind::EquipmentActionData* temp = equipmentaction_;
  equipmentaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::EquipmentActionData* MechanicalVentilatorActionData::unsafe_arena_release_equipmentaction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilatorActionData.EquipmentAction)
  
  ::pulse::cdm::bind::EquipmentActionData* temp = equipmentaction_;
  equipmentaction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::EquipmentActionData* MechanicalVentilatorActionData::_internal_mutable_equipmentaction() {
  
  if (equipmentaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::EquipmentActionData>(GetArena());
    equipmentaction_ = p;
  }
  return equipmentaction_;
}
inline ::pulse::cdm::bind::EquipmentActionData* MechanicalVentilatorActionData::mutable_equipmentaction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilatorActionData.EquipmentAction)
  return _internal_mutable_equipmentaction();
}
inline void MechanicalVentilatorActionData::set_allocated_equipmentaction(::pulse::cdm::bind::EquipmentActionData* equipmentaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction_);
  }
  if (equipmentaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipmentaction)->GetArena();
    if (message_arena != submessage_arena) {
      equipmentaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipmentaction, submessage_arena);
    }
    
  } else {
    
  }
  equipmentaction_ = equipmentaction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorActionData.EquipmentAction)
}

// -------------------------------------------------------------------

// MechanicalVentilatorConfigurationData

// .pulse.cdm.bind.MechanicalVentilatorActionData MechanicalVentilatorAction = 1;
inline bool MechanicalVentilatorConfigurationData::_internal_has_mechanicalventilatoraction() const {
  return this != internal_default_instance() && mechanicalventilatoraction_ != nullptr;
}
inline bool MechanicalVentilatorConfigurationData::has_mechanicalventilatoraction() const {
  return _internal_has_mechanicalventilatoraction();
}
inline void MechanicalVentilatorConfigurationData::clear_mechanicalventilatoraction() {
  if (GetArena() == nullptr && mechanicalventilatoraction_ != nullptr) {
    delete mechanicalventilatoraction_;
  }
  mechanicalventilatoraction_ = nullptr;
}
inline const ::pulse::cdm::bind::MechanicalVentilatorActionData& MechanicalVentilatorConfigurationData::_internal_mechanicalventilatoraction() const {
  const ::pulse::cdm::bind::MechanicalVentilatorActionData* p = mechanicalventilatoraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::MechanicalVentilatorActionData&>(
      ::pulse::cdm::bind::_MechanicalVentilatorActionData_default_instance_);
}
inline const ::pulse::cdm::bind::MechanicalVentilatorActionData& MechanicalVentilatorConfigurationData::mechanicalventilatoraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilatorConfigurationData.MechanicalVentilatorAction)
  return _internal_mechanicalventilatoraction();
}
inline void MechanicalVentilatorConfigurationData::unsafe_arena_set_allocated_mechanicalventilatoraction(
    ::pulse::cdm::bind::MechanicalVentilatorActionData* mechanicalventilatoraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mechanicalventilatoraction_);
  }
  mechanicalventilatoraction_ = mechanicalventilatoraction;
  if (mechanicalventilatoraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilatorConfigurationData.MechanicalVentilatorAction)
}
inline ::pulse::cdm::bind::MechanicalVentilatorActionData* MechanicalVentilatorConfigurationData::release_mechanicalventilatoraction() {
  
  ::pulse::cdm::bind::MechanicalVentilatorActionData* temp = mechanicalventilatoraction_;
  mechanicalventilatoraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::MechanicalVentilatorActionData* MechanicalVentilatorConfigurationData::unsafe_arena_release_mechanicalventilatoraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilatorConfigurationData.MechanicalVentilatorAction)
  
  ::pulse::cdm::bind::MechanicalVentilatorActionData* temp = mechanicalventilatoraction_;
  mechanicalventilatoraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::MechanicalVentilatorActionData* MechanicalVentilatorConfigurationData::_internal_mutable_mechanicalventilatoraction() {
  
  if (mechanicalventilatoraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::MechanicalVentilatorActionData>(GetArena());
    mechanicalventilatoraction_ = p;
  }
  return mechanicalventilatoraction_;
}
inline ::pulse::cdm::bind::MechanicalVentilatorActionData* MechanicalVentilatorConfigurationData::mutable_mechanicalventilatoraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilatorConfigurationData.MechanicalVentilatorAction)
  return _internal_mutable_mechanicalventilatoraction();
}
inline void MechanicalVentilatorConfigurationData::set_allocated_mechanicalventilatoraction(::pulse::cdm::bind::MechanicalVentilatorActionData* mechanicalventilatoraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mechanicalventilatoraction_;
  }
  if (mechanicalventilatoraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mechanicalventilatoraction);
    if (message_arena != submessage_arena) {
      mechanicalventilatoraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mechanicalventilatoraction, submessage_arena);
    }
    
  } else {
    
  }
  mechanicalventilatoraction_ = mechanicalventilatoraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorConfigurationData.MechanicalVentilatorAction)
}

// .pulse.cdm.bind.MechanicalVentilatorData Configuration = 2;
inline bool MechanicalVentilatorConfigurationData::_internal_has_configuration() const {
  return Option_case() == kConfiguration;
}
inline bool MechanicalVentilatorConfigurationData::has_configuration() const {
  return _internal_has_configuration();
}
inline void MechanicalVentilatorConfigurationData::set_has_configuration() {
  _oneof_case_[0] = kConfiguration;
}
inline ::pulse::cdm::bind::MechanicalVentilatorData* MechanicalVentilatorConfigurationData::release_configuration() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
  if (_internal_has_configuration()) {
    clear_has_Option();
      ::pulse::cdm::bind::MechanicalVentilatorData* temp = Option_.configuration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Option_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pulse::cdm::bind::MechanicalVentilatorData& MechanicalVentilatorConfigurationData::_internal_configuration() const {
  return _internal_has_configuration()
      ? *Option_.configuration_
      : reinterpret_cast< ::pulse::cdm::bind::MechanicalVentilatorData&>(::pulse::cdm::bind::_MechanicalVentilatorData_default_instance_);
}
inline const ::pulse::cdm::bind::MechanicalVentilatorData& MechanicalVentilatorConfigurationData::configuration() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
  return _internal_configuration();
}
inline ::pulse::cdm::bind::MechanicalVentilatorData* MechanicalVentilatorConfigurationData::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
  if (_internal_has_configuration()) {
    clear_has_Option();
    ::pulse::cdm::bind::MechanicalVentilatorData* temp = Option_.configuration_;
    Option_.configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MechanicalVentilatorConfigurationData::unsafe_arena_set_allocated_configuration(::pulse::cdm::bind::MechanicalVentilatorData* configuration) {
  clear_Option();
  if (configuration) {
    set_has_configuration();
    Option_.configuration_ = configuration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
}
inline ::pulse::cdm::bind::MechanicalVentilatorData* MechanicalVentilatorConfigurationData::_internal_mutable_configuration() {
  if (!_internal_has_configuration()) {
    clear_Option();
    set_has_configuration();
    Option_.configuration_ = CreateMaybeMessage< ::pulse::cdm::bind::MechanicalVentilatorData >(GetArena());
  }
  return Option_.configuration_;
}
inline ::pulse::cdm::bind::MechanicalVentilatorData* MechanicalVentilatorConfigurationData::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilatorConfigurationData.Configuration)
  return _internal_mutable_configuration();
}

// string ConfigurationFile = 3;
inline bool MechanicalVentilatorConfigurationData::_internal_has_configurationfile() const {
  return Option_case() == kConfigurationFile;
}
inline void MechanicalVentilatorConfigurationData::set_has_configurationfile() {
  _oneof_case_[0] = kConfigurationFile;
}
inline void MechanicalVentilatorConfigurationData::clear_configurationfile() {
  if (_internal_has_configurationfile()) {
    Option_.configurationfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_Option();
  }
}
inline const std::string& MechanicalVentilatorConfigurationData::configurationfile() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
  return _internal_configurationfile();
}
inline void MechanicalVentilatorConfigurationData::set_configurationfile(const std::string& value) {
  _internal_set_configurationfile(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
}
inline std::string* MechanicalVentilatorConfigurationData::mutable_configurationfile() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
  return _internal_mutable_configurationfile();
}
inline const std::string& MechanicalVentilatorConfigurationData::_internal_configurationfile() const {
  if (_internal_has_configurationfile()) {
    return Option_.configurationfile_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MechanicalVentilatorConfigurationData::_internal_set_configurationfile(const std::string& value) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MechanicalVentilatorConfigurationData::set_configurationfile(std::string&& value) {
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
}
inline void MechanicalVentilatorConfigurationData::set_configurationfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
}
inline void MechanicalVentilatorConfigurationData::set_configurationfile(const char* value,
                             size_t size) {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Option_.configurationfile_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
}
inline std::string* MechanicalVentilatorConfigurationData::_internal_mutable_configurationfile() {
  if (!_internal_has_configurationfile()) {
    clear_Option();
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Option_.configurationfile_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MechanicalVentilatorConfigurationData::release_configurationfile() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
  if (_internal_has_configurationfile()) {
    clear_has_Option();
    return Option_.configurationfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void MechanicalVentilatorConfigurationData::set_allocated_configurationfile(std::string* configurationfile) {
  if (has_Option()) {
    clear_Option();
  }
  if (configurationfile != nullptr) {
    set_has_configurationfile();
    Option_.configurationfile_.UnsafeSetDefault(configurationfile);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(configurationfile);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MechanicalVentilatorConfigurationData.ConfigurationFile)
}

inline bool MechanicalVentilatorConfigurationData::has_Option() const {
  return Option_case() != OPTION_NOT_SET;
}
inline void MechanicalVentilatorConfigurationData::clear_has_Option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
inline MechanicalVentilatorConfigurationData::OptionCase MechanicalVentilatorConfigurationData::Option_case() const {
  return MechanicalVentilatorConfigurationData::OptionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fMechanicalVentilatorActions_2eproto
