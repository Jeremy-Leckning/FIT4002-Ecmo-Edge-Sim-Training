// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientAssessments.proto

#include "pulse/cdm/bind/PatientAssessments.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class PatientAssessmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientAssessmentData> _instance;
} _PatientAssessmentData_default_instance_;
class PulmonaryFunctionTestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulmonaryFunctionTestData> _instance;
} _PulmonaryFunctionTestData_default_instance_;
class CompleteBloodCountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteBloodCountData> _instance;
} _CompleteBloodCountData_default_instance_;
class ComprehensiveMetabolicPanelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComprehensiveMetabolicPanelData> _instance;
} _ComprehensiveMetabolicPanelData_default_instance_;
class UrinalysisMicroscopicDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrinalysisMicroscopicData> _instance;
} _UrinalysisMicroscopicData_default_instance_;
class UrinalysisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrinalysisData> _instance;
} _UrinalysisData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CompleteBloodCountData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CompleteBloodCountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {
      &scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ComprehensiveMetabolicPanelData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ComprehensiveMetabolicPanelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {
      &scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarAmountPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PatientAssessmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PatientAssessmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {}};

static void InitDefaultsscc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_PulmonaryFunctionTestData_default_instance_;
    new (ptr) ::pulse::cdm::bind::PulmonaryFunctionTestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {
      &scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_FunctionVolumeVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_UrinalysisData_default_instance_;
    new (ptr) ::pulse::cdm::bind::UrinalysisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {
      &scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassPerVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,}};

static void InitDefaultsscc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_UrinalysisMicroscopicData_default_instance_;
    new (ptr) ::pulse::cdm::bind::UrinalysisMicroscopicData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto}, {
      &scc_info_ScalarAmountData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PatientAssessmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, patientassessment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, expiratoryreservevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, forcedvitalcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, forcedexpiratoryvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, forcedexpiratoryflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, functionalresidualcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, inspiratorycapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, inspiratoryreservevolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, maximumvoluntaryventilation_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, peakexpiratoryflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, residualvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, slowvitalcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, totallungcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, vitalcapacity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::PulmonaryFunctionTestData, lungvolumeplot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, patientassessment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, hematocrit_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, hemoglobin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, plateletcount_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, meancorpuscularhemoglobin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, meancorpuscularhemoglobinconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, meancorpuscularvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, redbloodcellcount_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompleteBloodCountData, whitebloodcellcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, patientassessment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, albumin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, alp_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, alt_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, ast_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, bun_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, calcium_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, chloride_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, co2_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, creatinine_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, glucose_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, potassium_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, sodium_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, totalbilirubin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ComprehensiveMetabolicPanelData, totalprotein_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, observationtype_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, redbloodcells_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, whitebloodcells_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, epithelialcells_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, casts_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, crystals_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, bacteria_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, trichomonads_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisMicroscopicData, yeast_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, patientassessment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, color_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, appearance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, glucose_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, ketone_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, bilirubin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, specificgravity_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, blood_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, ph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, protein_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, urobilinogen_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, nitrite_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, leukocyteesterase_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::UrinalysisData, microscopic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::PatientAssessmentData)},
  { 5, -1, sizeof(::pulse::cdm::bind::PulmonaryFunctionTestData)},
  { 25, -1, sizeof(::pulse::cdm::bind::CompleteBloodCountData)},
  { 39, -1, sizeof(::pulse::cdm::bind::ComprehensiveMetabolicPanelData)},
  { 59, -1, sizeof(::pulse::cdm::bind::UrinalysisMicroscopicData)},
  { 73, -1, sizeof(::pulse::cdm::bind::UrinalysisData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PatientAssessmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_PulmonaryFunctionTestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CompleteBloodCountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ComprehensiveMetabolicPanelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_UrinalysisMicroscopicData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_UrinalysisData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'pulse/cdm/bind/PatientAssessments.prot"
  "o\022\016pulse.cdm.bind\032\037pulse/cdm/bind/Proper"
  "ties.proto\"\027\n\025PatientAssessmentData\"\354\007\n\031"
  "PulmonaryFunctionTestData\022@\n\021PatientAsse"
  "ssment\030\001 \001(\0132%.pulse.cdm.bind.PatientAss"
  "essmentData\022A\n\027ExpiratoryReserveVolume\030\002"
  " \001(\0132 .pulse.cdm.bind.ScalarVolumeData\022="
  "\n\023ForcedVitalCapacity\030\003 \001(\0132 .pulse.cdm."
  "bind.ScalarVolumeData\022@\n\026ForcedExpirator"
  "yVolume\030\004 \001(\0132 .pulse.cdm.bind.ScalarVol"
  "umeData\022E\n\024ForcedExpiratoryFlow\030\005 \001(\0132\'."
  "pulse.cdm.bind.ScalarVolumePerTimeData\022D"
  "\n\032FunctionalResidualCapacity\030\006 \001(\0132 .pul"
  "se.cdm.bind.ScalarVolumeData\022=\n\023Inspirat"
  "oryCapacity\030\007 \001(\0132 .pulse.cdm.bind.Scala"
  "rVolumeData\022B\n\030InspiratoryReserveVolume\030"
  "\010 \001(\0132 .pulse.cdm.bind.ScalarVolumeData\022"
  "E\n\033MaximumVoluntaryVentilation\030\t \001(\0132 .p"
  "ulse.cdm.bind.ScalarVolumeData\022C\n\022PeakEx"
  "piratoryFlow\030\n \001(\0132\'.pulse.cdm.bind.Scal"
  "arVolumePerTimeData\0228\n\016ResidualVolume\030\013 "
  "\001(\0132 .pulse.cdm.bind.ScalarVolumeData\022;\n"
  "\021SlowVitalCapacity\030\014 \001(\0132 .pulse.cdm.bin"
  "d.ScalarVolumeData\022;\n\021TotalLungCapacity\030"
  "\r \001(\0132 .pulse.cdm.bind.ScalarVolumeData\022"
  "7\n\rVitalCapacity\030\016 \001(\0132 .pulse.cdm.bind."
  "ScalarVolumeData\022@\n\016LungVolumePlot\030\017 \001(\013"
  "2(.pulse.cdm.bind.FunctionVolumeVsTimeDa"
  "ta\"\201\005\n\026CompleteBloodCountData\022@\n\021Patient"
  "Assessment\030\001 \001(\0132%.pulse.cdm.bind.Patien"
  "tAssessmentData\0222\n\nHematocrit\030\002 \001(\0132\036.pu"
  "lse.cdm.bind.Scalar0To1Data\022;\n\nHemoglobi"
  "n\030\003 \001(\0132\'.pulse.cdm.bind.ScalarMassPerVo"
  "lumeData\022@\n\rPlateletCount\030\004 \001(\0132).pulse."
  "cdm.bind.ScalarAmountPerVolumeData\022J\n\031Me"
  "anCorpuscularHemoglobin\030\005 \001(\0132\'.pulse.cd"
  "m.bind.ScalarMassPerAmountData\022W\n&MeanCo"
  "rpuscularHemoglobinConcentration\030\006 \001(\0132\'"
  ".pulse.cdm.bind.ScalarMassPerVolumeData\022"
  "\?\n\025MeanCorpuscularVolume\030\007 \001(\0132 .pulse.c"
  "dm.bind.ScalarVolumeData\022D\n\021RedBloodCell"
  "Count\030\010 \001(\0132).pulse.cdm.bind.ScalarAmoun"
  "tPerVolumeData\022F\n\023WhiteBloodCellCount\030\t "
  "\001(\0132).pulse.cdm.bind.ScalarAmountPerVolu"
  "meData\"\224\007\n\037ComprehensiveMetabolicPanelDa"
  "ta\022@\n\021PatientAssessment\030\001 \001(\0132%.pulse.cd"
  "m.bind.PatientAssessmentData\0228\n\007Albumin\030"
  "\002 \001(\0132\'.pulse.cdm.bind.ScalarMassPerVolu"
  "meData\0224\n\003ALP\030\003 \001(\0132\'.pulse.cdm.bind.Sca"
  "larMassPerVolumeData\0224\n\003ALT\030\004 \001(\0132\'.puls"
  "e.cdm.bind.ScalarMassPerVolumeData\0224\n\003AS"
  "T\030\005 \001(\0132\'.pulse.cdm.bind.ScalarMassPerVo"
  "lumeData\0224\n\003BUN\030\006 \001(\0132\'.pulse.cdm.bind.S"
  "calarMassPerVolumeData\0228\n\007Calcium\030\007 \001(\0132"
  "\'.pulse.cdm.bind.ScalarMassPerVolumeData"
  "\022;\n\010Chloride\030\010 \001(\0132).pulse.cdm.bind.Scal"
  "arAmountPerVolumeData\0226\n\003CO2\030\t \001(\0132).pul"
  "se.cdm.bind.ScalarAmountPerVolumeData\022;\n"
  "\nCreatinine\030\n \001(\0132\'.pulse.cdm.bind.Scala"
  "rMassPerVolumeData\0228\n\007Glucose\030\013 \001(\0132\'.pu"
  "lse.cdm.bind.ScalarMassPerVolumeData\022<\n\t"
  "Potassium\030\014 \001(\0132).pulse.cdm.bind.ScalarA"
  "mountPerVolumeData\0229\n\006Sodium\030\r \001(\0132).pul"
  "se.cdm.bind.ScalarAmountPerVolumeData\022\?\n"
  "\016TotalBilirubin\030\016 \001(\0132\'.pulse.cdm.bind.S"
  "calarMassPerVolumeData\022=\n\014TotalProtein\030\017"
  " \001(\0132\'.pulse.cdm.bind.ScalarMassPerVolum"
  "eData\"\323\006\n\031UrinalysisMicroscopicData\022S\n\017O"
  "bservationType\030\001 \001(\0162:.pulse.cdm.bind.Ur"
  "inalysisMicroscopicData.eObservationType"
  "\0227\n\rRedBloodCells\030\002 \001(\0132 .pulse.cdm.bind"
  ".ScalarAmountData\0229\n\017WhiteBloodCells\030\003 \001"
  "(\0132 .pulse.cdm.bind.ScalarAmountData\022U\n\017"
  "EpithelialCells\030\004 \001(\0162<.pulse.cdm.bind.U"
  "rinalysisMicroscopicData.eObservationAmo"
  "unt\022/\n\005Casts\030\005 \001(\0132 .pulse.cdm.bind.Scal"
  "arAmountData\022N\n\010Crystals\030\006 \001(\0162<.pulse.c"
  "dm.bind.UrinalysisMicroscopicData.eObser"
  "vationAmount\022N\n\010Bacteria\030\007 \001(\0162<.pulse.c"
  "dm.bind.UrinalysisMicroscopicData.eObser"
  "vationAmount\022R\n\014Trichomonads\030\010 \001(\0162<.pul"
  "se.cdm.bind.UrinalysisMicroscopicData.eO"
  "bservationAmount\022K\n\005Yeast\030\t \001(\0162<.pulse."
  "cdm.bind.UrinalysisMicroscopicData.eObse"
  "rvationAmount\"R\n\020eObservationType\022\027\n\023Nul"
  "lObservationType\020\000\022\021\n\rLowPowerField\020\001\022\022\n"
  "\016HighPowerField\020\002\"P\n\022eObservationAmount\022"
  "\031\n\025NullObservationAmount\020\000\022\007\n\003Few\020\001\022\014\n\010M"
  "oderate\020\002\022\010\n\004Many\020\003\"\356\010\n\016UrinalysisData\022@"
  "\n\021PatientAssessment\030\001 \001(\0132%.pulse.cdm.bi"
  "nd.PatientAssessmentData\0229\n\005Color\030\002 \001(\0162"
  "*.pulse.cdm.bind.UrinalysisData.eUrineCo"
  "lor\022D\n\nAppearance\030\003 \001(\01620.pulse.cdm.bind"
  ".UrinalysisData.eClarityIndicator\022B\n\007Glu"
  "cose\030\004 \001(\01621.pulse.cdm.bind.UrinalysisDa"
  "ta.ePresenceIndicator\022A\n\006Ketone\030\005 \001(\01621."
  "pulse.cdm.bind.UrinalysisData.ePresenceI"
  "ndicator\022-\n\tBilirubin\030\006 \001(\0132\032.pulse.cdm."
  "bind.ScalarData\0223\n\017SpecificGravity\030\007 \001(\013"
  "2\032.pulse.cdm.bind.ScalarData\022@\n\005Blood\030\010 "
  "\001(\01621.pulse.cdm.bind.UrinalysisData.ePre"
  "senceIndicator\022&\n\002pH\030\t \001(\0132\032.pulse.cdm.b"
  "ind.ScalarData\022B\n\007Protein\030\n \001(\01621.pulse."
  "cdm.bind.UrinalysisData.ePresenceIndicat"
  "or\022=\n\014Urobilinogen\030\013 \001(\0132\'.pulse.cdm.bin"
  "d.ScalarMassPerVolumeData\022B\n\007Nitrite\030\014 \001"
  "(\01621.pulse.cdm.bind.UrinalysisData.ePres"
  "enceIndicator\022L\n\021LeukocyteEsterase\030\r \001(\016"
  "21.pulse.cdm.bind.UrinalysisData.ePresen"
  "ceIndicator\022>\n\013Microscopic\030\016 \001(\0132).pulse"
  ".cdm.bind.UrinalysisMicroscopicData\"B\n\022e"
  "PresenceIndicator\022\020\n\014NullPresence\020\000\022\014\n\010P"
  "ositive\020\001\022\014\n\010Negative\020\002\"a\n\021eClarityIndic"
  "ator\022\017\n\013NullClarity\020\000\022\017\n\013Translucent\020\001\022\022"
  "\n\016SlightlyCloudy\020\002\022\n\n\006Cloudy\020\003\022\n\n\006Turbid"
  "\020\004\"H\n\013eUrineColor\022\r\n\tNullColor\020\000\022\016\n\nPale"
  "Yellow\020\001\022\n\n\006Yellow\020\002\022\016\n\nDarkYellow\020\003*|\n\026"
  "ePatientAssessmentType\022\026\n\022CompleteBloodC"
  "ount\020\000\022\037\n\033ComprehensiveMetabolicPanel\020\001\022"
  "\031\n\025PulmonaryFunctionTest\020\002\022\016\n\nUrinalysis"
  "\020\003B/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pul"
  "se.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_deps[1] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_sccs[6] = {
  &scc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
  &scc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
  &scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
  &scc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
  &scc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
  &scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto, "pulse/cdm/bind/PatientAssessments.proto", 4859,
  &descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto, 6, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisMicroscopicData_eObservationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[0];
}
bool UrinalysisMicroscopicData_eObservationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::NullObservationType;
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::LowPowerField;
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::HighPowerField;
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::eObservationType_MIN;
constexpr UrinalysisMicroscopicData_eObservationType UrinalysisMicroscopicData::eObservationType_MAX;
constexpr int UrinalysisMicroscopicData::eObservationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisMicroscopicData_eObservationAmount_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[1];
}
bool UrinalysisMicroscopicData_eObservationAmount_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::NullObservationAmount;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::Few;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::Moderate;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::Many;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::eObservationAmount_MIN;
constexpr UrinalysisMicroscopicData_eObservationAmount UrinalysisMicroscopicData::eObservationAmount_MAX;
constexpr int UrinalysisMicroscopicData::eObservationAmount_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_ePresenceIndicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[2];
}
bool UrinalysisData_ePresenceIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UrinalysisData_ePresenceIndicator UrinalysisData::NullPresence;
constexpr UrinalysisData_ePresenceIndicator UrinalysisData::Positive;
constexpr UrinalysisData_ePresenceIndicator UrinalysisData::Negative;
constexpr UrinalysisData_ePresenceIndicator UrinalysisData::ePresenceIndicator_MIN;
constexpr UrinalysisData_ePresenceIndicator UrinalysisData::ePresenceIndicator_MAX;
constexpr int UrinalysisData::ePresenceIndicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_eClarityIndicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[3];
}
bool UrinalysisData_eClarityIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UrinalysisData_eClarityIndicator UrinalysisData::NullClarity;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::Translucent;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::SlightlyCloudy;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::Cloudy;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::Turbid;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::eClarityIndicator_MIN;
constexpr UrinalysisData_eClarityIndicator UrinalysisData::eClarityIndicator_MAX;
constexpr int UrinalysisData::eClarityIndicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UrinalysisData_eUrineColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[4];
}
bool UrinalysisData_eUrineColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UrinalysisData_eUrineColor UrinalysisData::NullColor;
constexpr UrinalysisData_eUrineColor UrinalysisData::PaleYellow;
constexpr UrinalysisData_eUrineColor UrinalysisData::Yellow;
constexpr UrinalysisData_eUrineColor UrinalysisData::DarkYellow;
constexpr UrinalysisData_eUrineColor UrinalysisData::eUrineColor_MIN;
constexpr UrinalysisData_eUrineColor UrinalysisData::eUrineColor_MAX;
constexpr int UrinalysisData::eUrineColor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ePatientAssessmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto[5];
}
bool ePatientAssessmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PatientAssessmentData::_Internal {
 public:
};

PatientAssessmentData::PatientAssessmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PatientAssessmentData)
}
PatientAssessmentData::PatientAssessmentData(const PatientAssessmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PatientAssessmentData)
}

void PatientAssessmentData::SharedCtor() {
}

PatientAssessmentData::~PatientAssessmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PatientAssessmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatientAssessmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PatientAssessmentData::ArenaDtor(void* object) {
  PatientAssessmentData* _this = reinterpret_cast< PatientAssessmentData* >(object);
  (void)_this;
}
void PatientAssessmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatientAssessmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientAssessmentData& PatientAssessmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientAssessmentData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void PatientAssessmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PatientAssessmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientAssessmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientAssessmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PatientAssessmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PatientAssessmentData)
  return target;
}

size_t PatientAssessmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PatientAssessmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientAssessmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PatientAssessmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientAssessmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientAssessmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PatientAssessmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PatientAssessmentData)
    MergeFrom(*source);
  }
}

void PatientAssessmentData::MergeFrom(const PatientAssessmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PatientAssessmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PatientAssessmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PatientAssessmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientAssessmentData::CopyFrom(const PatientAssessmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PatientAssessmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientAssessmentData::IsInitialized() const {
  return true;
}

void PatientAssessmentData::InternalSwap(PatientAssessmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientAssessmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PulmonaryFunctionTestData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientAssessmentData& patientassessment(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& expiratoryreservevolume(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& forcedvitalcapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& forcedexpiratoryvolume(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& forcedexpiratoryflow(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& functionalresidualcapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& inspiratorycapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& inspiratoryreservevolume(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& maximumvoluntaryventilation(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& peakexpiratoryflow(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& residualvolume(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& slowvitalcapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& totallungcapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& vitalcapacity(const PulmonaryFunctionTestData* msg);
  static const ::pulse::cdm::bind::FunctionVolumeVsTimeData& lungvolumeplot(const PulmonaryFunctionTestData* msg);
};

const ::pulse::cdm::bind::PatientAssessmentData&
PulmonaryFunctionTestData::_Internal::patientassessment(const PulmonaryFunctionTestData* msg) {
  return *msg->patientassessment_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::expiratoryreservevolume(const PulmonaryFunctionTestData* msg) {
  return *msg->expiratoryreservevolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::forcedvitalcapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->forcedvitalcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::forcedexpiratoryvolume(const PulmonaryFunctionTestData* msg) {
  return *msg->forcedexpiratoryvolume_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
PulmonaryFunctionTestData::_Internal::forcedexpiratoryflow(const PulmonaryFunctionTestData* msg) {
  return *msg->forcedexpiratoryflow_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::functionalresidualcapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->functionalresidualcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::inspiratorycapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->inspiratorycapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::inspiratoryreservevolume(const PulmonaryFunctionTestData* msg) {
  return *msg->inspiratoryreservevolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::maximumvoluntaryventilation(const PulmonaryFunctionTestData* msg) {
  return *msg->maximumvoluntaryventilation_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
PulmonaryFunctionTestData::_Internal::peakexpiratoryflow(const PulmonaryFunctionTestData* msg) {
  return *msg->peakexpiratoryflow_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::residualvolume(const PulmonaryFunctionTestData* msg) {
  return *msg->residualvolume_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::slowvitalcapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->slowvitalcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::totallungcapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->totallungcapacity_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
PulmonaryFunctionTestData::_Internal::vitalcapacity(const PulmonaryFunctionTestData* msg) {
  return *msg->vitalcapacity_;
}
const ::pulse::cdm::bind::FunctionVolumeVsTimeData&
PulmonaryFunctionTestData::_Internal::lungvolumeplot(const PulmonaryFunctionTestData* msg) {
  return *msg->lungvolumeplot_;
}
void PulmonaryFunctionTestData::clear_expiratoryreservevolume() {
  if (GetArena() == nullptr && expiratoryreservevolume_ != nullptr) {
    delete expiratoryreservevolume_;
  }
  expiratoryreservevolume_ = nullptr;
}
void PulmonaryFunctionTestData::clear_forcedvitalcapacity() {
  if (GetArena() == nullptr && forcedvitalcapacity_ != nullptr) {
    delete forcedvitalcapacity_;
  }
  forcedvitalcapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_forcedexpiratoryvolume() {
  if (GetArena() == nullptr && forcedexpiratoryvolume_ != nullptr) {
    delete forcedexpiratoryvolume_;
  }
  forcedexpiratoryvolume_ = nullptr;
}
void PulmonaryFunctionTestData::clear_forcedexpiratoryflow() {
  if (GetArena() == nullptr && forcedexpiratoryflow_ != nullptr) {
    delete forcedexpiratoryflow_;
  }
  forcedexpiratoryflow_ = nullptr;
}
void PulmonaryFunctionTestData::clear_functionalresidualcapacity() {
  if (GetArena() == nullptr && functionalresidualcapacity_ != nullptr) {
    delete functionalresidualcapacity_;
  }
  functionalresidualcapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_inspiratorycapacity() {
  if (GetArena() == nullptr && inspiratorycapacity_ != nullptr) {
    delete inspiratorycapacity_;
  }
  inspiratorycapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_inspiratoryreservevolume() {
  if (GetArena() == nullptr && inspiratoryreservevolume_ != nullptr) {
    delete inspiratoryreservevolume_;
  }
  inspiratoryreservevolume_ = nullptr;
}
void PulmonaryFunctionTestData::clear_maximumvoluntaryventilation() {
  if (GetArena() == nullptr && maximumvoluntaryventilation_ != nullptr) {
    delete maximumvoluntaryventilation_;
  }
  maximumvoluntaryventilation_ = nullptr;
}
void PulmonaryFunctionTestData::clear_peakexpiratoryflow() {
  if (GetArena() == nullptr && peakexpiratoryflow_ != nullptr) {
    delete peakexpiratoryflow_;
  }
  peakexpiratoryflow_ = nullptr;
}
void PulmonaryFunctionTestData::clear_residualvolume() {
  if (GetArena() == nullptr && residualvolume_ != nullptr) {
    delete residualvolume_;
  }
  residualvolume_ = nullptr;
}
void PulmonaryFunctionTestData::clear_slowvitalcapacity() {
  if (GetArena() == nullptr && slowvitalcapacity_ != nullptr) {
    delete slowvitalcapacity_;
  }
  slowvitalcapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_totallungcapacity() {
  if (GetArena() == nullptr && totallungcapacity_ != nullptr) {
    delete totallungcapacity_;
  }
  totallungcapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_vitalcapacity() {
  if (GetArena() == nullptr && vitalcapacity_ != nullptr) {
    delete vitalcapacity_;
  }
  vitalcapacity_ = nullptr;
}
void PulmonaryFunctionTestData::clear_lungvolumeplot() {
  if (GetArena() == nullptr && lungvolumeplot_ != nullptr) {
    delete lungvolumeplot_;
  }
  lungvolumeplot_ = nullptr;
}
PulmonaryFunctionTestData::PulmonaryFunctionTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.PulmonaryFunctionTestData)
}
PulmonaryFunctionTestData::PulmonaryFunctionTestData(const PulmonaryFunctionTestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientassessment()) {
    patientassessment_ = new ::pulse::cdm::bind::PatientAssessmentData(*from.patientassessment_);
  } else {
    patientassessment_ = nullptr;
  }
  if (from._internal_has_expiratoryreservevolume()) {
    expiratoryreservevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.expiratoryreservevolume_);
  } else {
    expiratoryreservevolume_ = nullptr;
  }
  if (from._internal_has_forcedvitalcapacity()) {
    forcedvitalcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.forcedvitalcapacity_);
  } else {
    forcedvitalcapacity_ = nullptr;
  }
  if (from._internal_has_forcedexpiratoryvolume()) {
    forcedexpiratoryvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.forcedexpiratoryvolume_);
  } else {
    forcedexpiratoryvolume_ = nullptr;
  }
  if (from._internal_has_forcedexpiratoryflow()) {
    forcedexpiratoryflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.forcedexpiratoryflow_);
  } else {
    forcedexpiratoryflow_ = nullptr;
  }
  if (from._internal_has_functionalresidualcapacity()) {
    functionalresidualcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.functionalresidualcapacity_);
  } else {
    functionalresidualcapacity_ = nullptr;
  }
  if (from._internal_has_inspiratorycapacity()) {
    inspiratorycapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.inspiratorycapacity_);
  } else {
    inspiratorycapacity_ = nullptr;
  }
  if (from._internal_has_inspiratoryreservevolume()) {
    inspiratoryreservevolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.inspiratoryreservevolume_);
  } else {
    inspiratoryreservevolume_ = nullptr;
  }
  if (from._internal_has_maximumvoluntaryventilation()) {
    maximumvoluntaryventilation_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.maximumvoluntaryventilation_);
  } else {
    maximumvoluntaryventilation_ = nullptr;
  }
  if (from._internal_has_peakexpiratoryflow()) {
    peakexpiratoryflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.peakexpiratoryflow_);
  } else {
    peakexpiratoryflow_ = nullptr;
  }
  if (from._internal_has_residualvolume()) {
    residualvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.residualvolume_);
  } else {
    residualvolume_ = nullptr;
  }
  if (from._internal_has_slowvitalcapacity()) {
    slowvitalcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.slowvitalcapacity_);
  } else {
    slowvitalcapacity_ = nullptr;
  }
  if (from._internal_has_totallungcapacity()) {
    totallungcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.totallungcapacity_);
  } else {
    totallungcapacity_ = nullptr;
  }
  if (from._internal_has_vitalcapacity()) {
    vitalcapacity_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.vitalcapacity_);
  } else {
    vitalcapacity_ = nullptr;
  }
  if (from._internal_has_lungvolumeplot()) {
    lungvolumeplot_ = new ::pulse::cdm::bind::FunctionVolumeVsTimeData(*from.lungvolumeplot_);
  } else {
    lungvolumeplot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.PulmonaryFunctionTestData)
}

void PulmonaryFunctionTestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientassessment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lungvolumeplot_) -
      reinterpret_cast<char*>(&patientassessment_)) + sizeof(lungvolumeplot_));
}

PulmonaryFunctionTestData::~PulmonaryFunctionTestData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.PulmonaryFunctionTestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulmonaryFunctionTestData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientassessment_;
  if (this != internal_default_instance()) delete expiratoryreservevolume_;
  if (this != internal_default_instance()) delete forcedvitalcapacity_;
  if (this != internal_default_instance()) delete forcedexpiratoryvolume_;
  if (this != internal_default_instance()) delete forcedexpiratoryflow_;
  if (this != internal_default_instance()) delete functionalresidualcapacity_;
  if (this != internal_default_instance()) delete inspiratorycapacity_;
  if (this != internal_default_instance()) delete inspiratoryreservevolume_;
  if (this != internal_default_instance()) delete maximumvoluntaryventilation_;
  if (this != internal_default_instance()) delete peakexpiratoryflow_;
  if (this != internal_default_instance()) delete residualvolume_;
  if (this != internal_default_instance()) delete slowvitalcapacity_;
  if (this != internal_default_instance()) delete totallungcapacity_;
  if (this != internal_default_instance()) delete vitalcapacity_;
  if (this != internal_default_instance()) delete lungvolumeplot_;
}

void PulmonaryFunctionTestData::ArenaDtor(void* object) {
  PulmonaryFunctionTestData* _this = reinterpret_cast< PulmonaryFunctionTestData* >(object);
  (void)_this;
}
void PulmonaryFunctionTestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulmonaryFunctionTestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulmonaryFunctionTestData& PulmonaryFunctionTestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulmonaryFunctionTestData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void PulmonaryFunctionTestData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
  if (GetArena() == nullptr && expiratoryreservevolume_ != nullptr) {
    delete expiratoryreservevolume_;
  }
  expiratoryreservevolume_ = nullptr;
  if (GetArena() == nullptr && forcedvitalcapacity_ != nullptr) {
    delete forcedvitalcapacity_;
  }
  forcedvitalcapacity_ = nullptr;
  if (GetArena() == nullptr && forcedexpiratoryvolume_ != nullptr) {
    delete forcedexpiratoryvolume_;
  }
  forcedexpiratoryvolume_ = nullptr;
  if (GetArena() == nullptr && forcedexpiratoryflow_ != nullptr) {
    delete forcedexpiratoryflow_;
  }
  forcedexpiratoryflow_ = nullptr;
  if (GetArena() == nullptr && functionalresidualcapacity_ != nullptr) {
    delete functionalresidualcapacity_;
  }
  functionalresidualcapacity_ = nullptr;
  if (GetArena() == nullptr && inspiratorycapacity_ != nullptr) {
    delete inspiratorycapacity_;
  }
  inspiratorycapacity_ = nullptr;
  if (GetArena() == nullptr && inspiratoryreservevolume_ != nullptr) {
    delete inspiratoryreservevolume_;
  }
  inspiratoryreservevolume_ = nullptr;
  if (GetArena() == nullptr && maximumvoluntaryventilation_ != nullptr) {
    delete maximumvoluntaryventilation_;
  }
  maximumvoluntaryventilation_ = nullptr;
  if (GetArena() == nullptr && peakexpiratoryflow_ != nullptr) {
    delete peakexpiratoryflow_;
  }
  peakexpiratoryflow_ = nullptr;
  if (GetArena() == nullptr && residualvolume_ != nullptr) {
    delete residualvolume_;
  }
  residualvolume_ = nullptr;
  if (GetArena() == nullptr && slowvitalcapacity_ != nullptr) {
    delete slowvitalcapacity_;
  }
  slowvitalcapacity_ = nullptr;
  if (GetArena() == nullptr && totallungcapacity_ != nullptr) {
    delete totallungcapacity_;
  }
  totallungcapacity_ = nullptr;
  if (GetArena() == nullptr && vitalcapacity_ != nullptr) {
    delete vitalcapacity_;
  }
  vitalcapacity_ = nullptr;
  if (GetArena() == nullptr && lungvolumeplot_ != nullptr) {
    delete lungvolumeplot_;
  }
  lungvolumeplot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulmonaryFunctionTestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientassessment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiratoryreservevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ForcedVitalCapacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedvitalcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ForcedExpiratoryVolume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedexpiratoryvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData ForcedExpiratoryFlow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_forcedexpiratoryflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionalresidualcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratorycapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inspiratoryreservevolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData MaximumVoluntaryVentilation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumvoluntaryventilation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData PeakExpiratoryFlow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_peakexpiratoryflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_residualvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData SlowVitalCapacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_slowvitalcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_totallungcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vitalcapacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.FunctionVolumeVsTimeData LungVolumePlot = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_lungvolumeplot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulmonaryFunctionTestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientassessment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 2;
  if (this->has_expiratoryreservevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expiratoryreservevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ForcedVitalCapacity = 3;
  if (this->has_forcedvitalcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::forcedvitalcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ForcedExpiratoryVolume = 4;
  if (this->has_forcedexpiratoryvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forcedexpiratoryvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData ForcedExpiratoryFlow = 5;
  if (this->has_forcedexpiratoryflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::forcedexpiratoryflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 6;
  if (this->has_functionalresidualcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::functionalresidualcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 7;
  if (this->has_inspiratorycapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::inspiratorycapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 8;
  if (this->has_inspiratoryreservevolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::inspiratoryreservevolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData MaximumVoluntaryVentilation = 9;
  if (this->has_maximumvoluntaryventilation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::maximumvoluntaryventilation(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PeakExpiratoryFlow = 10;
  if (this->has_peakexpiratoryflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::peakexpiratoryflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 11;
  if (this->has_residualvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::residualvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData SlowVitalCapacity = 12;
  if (this->has_slowvitalcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::slowvitalcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 13;
  if (this->has_totallungcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::totallungcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 14;
  if (this->has_vitalcapacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vitalcapacity(this), target, stream);
  }

  // .pulse.cdm.bind.FunctionVolumeVsTimeData LungVolumePlot = 15;
  if (this->has_lungvolumeplot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::lungvolumeplot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.PulmonaryFunctionTestData)
  return target;
}

size_t PulmonaryFunctionTestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientassessment_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ExpiratoryReserveVolume = 2;
  if (this->has_expiratoryreservevolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiratoryreservevolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ForcedVitalCapacity = 3;
  if (this->has_forcedvitalcapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forcedvitalcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ForcedExpiratoryVolume = 4;
  if (this->has_forcedexpiratoryvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forcedexpiratoryvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData ForcedExpiratoryFlow = 5;
  if (this->has_forcedexpiratoryflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *forcedexpiratoryflow_);
  }

  // .pulse.cdm.bind.ScalarVolumeData FunctionalResidualCapacity = 6;
  if (this->has_functionalresidualcapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *functionalresidualcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryCapacity = 7;
  if (this->has_inspiratorycapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratorycapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData InspiratoryReserveVolume = 8;
  if (this->has_inspiratoryreservevolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inspiratoryreservevolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData MaximumVoluntaryVentilation = 9;
  if (this->has_maximumvoluntaryventilation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximumvoluntaryventilation_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData PeakExpiratoryFlow = 10;
  if (this->has_peakexpiratoryflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peakexpiratoryflow_);
  }

  // .pulse.cdm.bind.ScalarVolumeData ResidualVolume = 11;
  if (this->has_residualvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *residualvolume_);
  }

  // .pulse.cdm.bind.ScalarVolumeData SlowVitalCapacity = 12;
  if (this->has_slowvitalcapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slowvitalcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData TotalLungCapacity = 13;
  if (this->has_totallungcapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totallungcapacity_);
  }

  // .pulse.cdm.bind.ScalarVolumeData VitalCapacity = 14;
  if (this->has_vitalcapacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vitalcapacity_);
  }

  // .pulse.cdm.bind.FunctionVolumeVsTimeData LungVolumePlot = 15;
  if (this->has_lungvolumeplot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lungvolumeplot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulmonaryFunctionTestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  GOOGLE_DCHECK_NE(&from, this);
  const PulmonaryFunctionTestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulmonaryFunctionTestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.PulmonaryFunctionTestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.PulmonaryFunctionTestData)
    MergeFrom(*source);
  }
}

void PulmonaryFunctionTestData::MergeFrom(const PulmonaryFunctionTestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientassessment()) {
    _internal_mutable_patientassessment()->::pulse::cdm::bind::PatientAssessmentData::MergeFrom(from._internal_patientassessment());
  }
  if (from.has_expiratoryreservevolume()) {
    _internal_mutable_expiratoryreservevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_expiratoryreservevolume());
  }
  if (from.has_forcedvitalcapacity()) {
    _internal_mutable_forcedvitalcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_forcedvitalcapacity());
  }
  if (from.has_forcedexpiratoryvolume()) {
    _internal_mutable_forcedexpiratoryvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_forcedexpiratoryvolume());
  }
  if (from.has_forcedexpiratoryflow()) {
    _internal_mutable_forcedexpiratoryflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_forcedexpiratoryflow());
  }
  if (from.has_functionalresidualcapacity()) {
    _internal_mutable_functionalresidualcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_functionalresidualcapacity());
  }
  if (from.has_inspiratorycapacity()) {
    _internal_mutable_inspiratorycapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspiratorycapacity());
  }
  if (from.has_inspiratoryreservevolume()) {
    _internal_mutable_inspiratoryreservevolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_inspiratoryreservevolume());
  }
  if (from.has_maximumvoluntaryventilation()) {
    _internal_mutable_maximumvoluntaryventilation()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_maximumvoluntaryventilation());
  }
  if (from.has_peakexpiratoryflow()) {
    _internal_mutable_peakexpiratoryflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_peakexpiratoryflow());
  }
  if (from.has_residualvolume()) {
    _internal_mutable_residualvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_residualvolume());
  }
  if (from.has_slowvitalcapacity()) {
    _internal_mutable_slowvitalcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_slowvitalcapacity());
  }
  if (from.has_totallungcapacity()) {
    _internal_mutable_totallungcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_totallungcapacity());
  }
  if (from.has_vitalcapacity()) {
    _internal_mutable_vitalcapacity()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_vitalcapacity());
  }
  if (from.has_lungvolumeplot()) {
    _internal_mutable_lungvolumeplot()->::pulse::cdm::bind::FunctionVolumeVsTimeData::MergeFrom(from._internal_lungvolumeplot());
  }
}

void PulmonaryFunctionTestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulmonaryFunctionTestData::CopyFrom(const PulmonaryFunctionTestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.PulmonaryFunctionTestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulmonaryFunctionTestData::IsInitialized() const {
  return true;
}

void PulmonaryFunctionTestData::InternalSwap(PulmonaryFunctionTestData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulmonaryFunctionTestData, lungvolumeplot_)
      + sizeof(PulmonaryFunctionTestData::lungvolumeplot_)
      - PROTOBUF_FIELD_OFFSET(PulmonaryFunctionTestData, patientassessment_)>(
          reinterpret_cast<char*>(&patientassessment_),
          reinterpret_cast<char*>(&other->patientassessment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulmonaryFunctionTestData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteBloodCountData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientAssessmentData& patientassessment(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& hematocrit(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& hemoglobin(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& plateletcount(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerAmountData& meancorpuscularhemoglobin(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& meancorpuscularhemoglobinconcentration(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& meancorpuscularvolume(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& redbloodcellcount(const CompleteBloodCountData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& whitebloodcellcount(const CompleteBloodCountData* msg);
};

const ::pulse::cdm::bind::PatientAssessmentData&
CompleteBloodCountData::_Internal::patientassessment(const CompleteBloodCountData* msg) {
  return *msg->patientassessment_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
CompleteBloodCountData::_Internal::hematocrit(const CompleteBloodCountData* msg) {
  return *msg->hematocrit_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
CompleteBloodCountData::_Internal::hemoglobin(const CompleteBloodCountData* msg) {
  return *msg->hemoglobin_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
CompleteBloodCountData::_Internal::plateletcount(const CompleteBloodCountData* msg) {
  return *msg->plateletcount_;
}
const ::pulse::cdm::bind::ScalarMassPerAmountData&
CompleteBloodCountData::_Internal::meancorpuscularhemoglobin(const CompleteBloodCountData* msg) {
  return *msg->meancorpuscularhemoglobin_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
CompleteBloodCountData::_Internal::meancorpuscularhemoglobinconcentration(const CompleteBloodCountData* msg) {
  return *msg->meancorpuscularhemoglobinconcentration_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
CompleteBloodCountData::_Internal::meancorpuscularvolume(const CompleteBloodCountData* msg) {
  return *msg->meancorpuscularvolume_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
CompleteBloodCountData::_Internal::redbloodcellcount(const CompleteBloodCountData* msg) {
  return *msg->redbloodcellcount_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
CompleteBloodCountData::_Internal::whitebloodcellcount(const CompleteBloodCountData* msg) {
  return *msg->whitebloodcellcount_;
}
void CompleteBloodCountData::clear_hematocrit() {
  if (GetArena() == nullptr && hematocrit_ != nullptr) {
    delete hematocrit_;
  }
  hematocrit_ = nullptr;
}
void CompleteBloodCountData::clear_hemoglobin() {
  if (GetArena() == nullptr && hemoglobin_ != nullptr) {
    delete hemoglobin_;
  }
  hemoglobin_ = nullptr;
}
void CompleteBloodCountData::clear_plateletcount() {
  if (GetArena() == nullptr && plateletcount_ != nullptr) {
    delete plateletcount_;
  }
  plateletcount_ = nullptr;
}
void CompleteBloodCountData::clear_meancorpuscularhemoglobin() {
  if (GetArena() == nullptr && meancorpuscularhemoglobin_ != nullptr) {
    delete meancorpuscularhemoglobin_;
  }
  meancorpuscularhemoglobin_ = nullptr;
}
void CompleteBloodCountData::clear_meancorpuscularhemoglobinconcentration() {
  if (GetArena() == nullptr && meancorpuscularhemoglobinconcentration_ != nullptr) {
    delete meancorpuscularhemoglobinconcentration_;
  }
  meancorpuscularhemoglobinconcentration_ = nullptr;
}
void CompleteBloodCountData::clear_meancorpuscularvolume() {
  if (GetArena() == nullptr && meancorpuscularvolume_ != nullptr) {
    delete meancorpuscularvolume_;
  }
  meancorpuscularvolume_ = nullptr;
}
void CompleteBloodCountData::clear_redbloodcellcount() {
  if (GetArena() == nullptr && redbloodcellcount_ != nullptr) {
    delete redbloodcellcount_;
  }
  redbloodcellcount_ = nullptr;
}
void CompleteBloodCountData::clear_whitebloodcellcount() {
  if (GetArena() == nullptr && whitebloodcellcount_ != nullptr) {
    delete whitebloodcellcount_;
  }
  whitebloodcellcount_ = nullptr;
}
CompleteBloodCountData::CompleteBloodCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CompleteBloodCountData)
}
CompleteBloodCountData::CompleteBloodCountData(const CompleteBloodCountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientassessment()) {
    patientassessment_ = new ::pulse::cdm::bind::PatientAssessmentData(*from.patientassessment_);
  } else {
    patientassessment_ = nullptr;
  }
  if (from._internal_has_hematocrit()) {
    hematocrit_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.hematocrit_);
  } else {
    hematocrit_ = nullptr;
  }
  if (from._internal_has_hemoglobin()) {
    hemoglobin_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.hemoglobin_);
  } else {
    hemoglobin_ = nullptr;
  }
  if (from._internal_has_plateletcount()) {
    plateletcount_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.plateletcount_);
  } else {
    plateletcount_ = nullptr;
  }
  if (from._internal_has_meancorpuscularhemoglobin()) {
    meancorpuscularhemoglobin_ = new ::pulse::cdm::bind::ScalarMassPerAmountData(*from.meancorpuscularhemoglobin_);
  } else {
    meancorpuscularhemoglobin_ = nullptr;
  }
  if (from._internal_has_meancorpuscularhemoglobinconcentration()) {
    meancorpuscularhemoglobinconcentration_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.meancorpuscularhemoglobinconcentration_);
  } else {
    meancorpuscularhemoglobinconcentration_ = nullptr;
  }
  if (from._internal_has_meancorpuscularvolume()) {
    meancorpuscularvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.meancorpuscularvolume_);
  } else {
    meancorpuscularvolume_ = nullptr;
  }
  if (from._internal_has_redbloodcellcount()) {
    redbloodcellcount_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.redbloodcellcount_);
  } else {
    redbloodcellcount_ = nullptr;
  }
  if (from._internal_has_whitebloodcellcount()) {
    whitebloodcellcount_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.whitebloodcellcount_);
  } else {
    whitebloodcellcount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CompleteBloodCountData)
}

void CompleteBloodCountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientassessment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&whitebloodcellcount_) -
      reinterpret_cast<char*>(&patientassessment_)) + sizeof(whitebloodcellcount_));
}

CompleteBloodCountData::~CompleteBloodCountData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CompleteBloodCountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteBloodCountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientassessment_;
  if (this != internal_default_instance()) delete hematocrit_;
  if (this != internal_default_instance()) delete hemoglobin_;
  if (this != internal_default_instance()) delete plateletcount_;
  if (this != internal_default_instance()) delete meancorpuscularhemoglobin_;
  if (this != internal_default_instance()) delete meancorpuscularhemoglobinconcentration_;
  if (this != internal_default_instance()) delete meancorpuscularvolume_;
  if (this != internal_default_instance()) delete redbloodcellcount_;
  if (this != internal_default_instance()) delete whitebloodcellcount_;
}

void CompleteBloodCountData::ArenaDtor(void* object) {
  CompleteBloodCountData* _this = reinterpret_cast< CompleteBloodCountData* >(object);
  (void)_this;
}
void CompleteBloodCountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteBloodCountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteBloodCountData& CompleteBloodCountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteBloodCountData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void CompleteBloodCountData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CompleteBloodCountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
  if (GetArena() == nullptr && hematocrit_ != nullptr) {
    delete hematocrit_;
  }
  hematocrit_ = nullptr;
  if (GetArena() == nullptr && hemoglobin_ != nullptr) {
    delete hemoglobin_;
  }
  hemoglobin_ = nullptr;
  if (GetArena() == nullptr && plateletcount_ != nullptr) {
    delete plateletcount_;
  }
  plateletcount_ = nullptr;
  if (GetArena() == nullptr && meancorpuscularhemoglobin_ != nullptr) {
    delete meancorpuscularhemoglobin_;
  }
  meancorpuscularhemoglobin_ = nullptr;
  if (GetArena() == nullptr && meancorpuscularhemoglobinconcentration_ != nullptr) {
    delete meancorpuscularhemoglobinconcentration_;
  }
  meancorpuscularhemoglobinconcentration_ = nullptr;
  if (GetArena() == nullptr && meancorpuscularvolume_ != nullptr) {
    delete meancorpuscularvolume_;
  }
  meancorpuscularvolume_ = nullptr;
  if (GetArena() == nullptr && redbloodcellcount_ != nullptr) {
    delete redbloodcellcount_;
  }
  redbloodcellcount_ = nullptr;
  if (GetArena() == nullptr && whitebloodcellcount_ != nullptr) {
    delete whitebloodcellcount_;
  }
  whitebloodcellcount_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteBloodCountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientassessment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hematocrit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Hemoglobin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hemoglobin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData PlateletCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_plateletcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancorpuscularhemoglobin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancorpuscularhemoglobinconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_meancorpuscularvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbloodcellcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_whitebloodcellcount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteBloodCountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CompleteBloodCountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientassessment(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 2;
  if (this->has_hematocrit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hematocrit(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Hemoglobin = 3;
  if (this->has_hemoglobin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hemoglobin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData PlateletCount = 4;
  if (this->has_plateletcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::plateletcount(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 5;
  if (this->has_meancorpuscularhemoglobin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::meancorpuscularhemoglobin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration = 6;
  if (this->has_meancorpuscularhemoglobinconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::meancorpuscularhemoglobinconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 7;
  if (this->has_meancorpuscularvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::meancorpuscularvolume(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 8;
  if (this->has_redbloodcellcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::redbloodcellcount(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 9;
  if (this->has_whitebloodcellcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::whitebloodcellcount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CompleteBloodCountData)
  return target;
}

size_t CompleteBloodCountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CompleteBloodCountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientassessment_);
  }

  // .pulse.cdm.bind.Scalar0To1Data Hematocrit = 2;
  if (this->has_hematocrit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hematocrit_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Hemoglobin = 3;
  if (this->has_hemoglobin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hemoglobin_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData PlateletCount = 4;
  if (this->has_plateletcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plateletcount_);
  }

  // .pulse.cdm.bind.ScalarMassPerAmountData MeanCorpuscularHemoglobin = 5;
  if (this->has_meancorpuscularhemoglobin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancorpuscularhemoglobin_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData MeanCorpuscularHemoglobinConcentration = 6;
  if (this->has_meancorpuscularhemoglobinconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancorpuscularhemoglobinconcentration_);
  }

  // .pulse.cdm.bind.ScalarVolumeData MeanCorpuscularVolume = 7;
  if (this->has_meancorpuscularvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meancorpuscularvolume_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData RedBloodCellCount = 8;
  if (this->has_redbloodcellcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redbloodcellcount_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData WhiteBloodCellCount = 9;
  if (this->has_whitebloodcellcount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *whitebloodcellcount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteBloodCountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CompleteBloodCountData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteBloodCountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteBloodCountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CompleteBloodCountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CompleteBloodCountData)
    MergeFrom(*source);
  }
}

void CompleteBloodCountData::MergeFrom(const CompleteBloodCountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CompleteBloodCountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientassessment()) {
    _internal_mutable_patientassessment()->::pulse::cdm::bind::PatientAssessmentData::MergeFrom(from._internal_patientassessment());
  }
  if (from.has_hematocrit()) {
    _internal_mutable_hematocrit()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_hematocrit());
  }
  if (from.has_hemoglobin()) {
    _internal_mutable_hemoglobin()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_hemoglobin());
  }
  if (from.has_plateletcount()) {
    _internal_mutable_plateletcount()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_plateletcount());
  }
  if (from.has_meancorpuscularhemoglobin()) {
    _internal_mutable_meancorpuscularhemoglobin()->::pulse::cdm::bind::ScalarMassPerAmountData::MergeFrom(from._internal_meancorpuscularhemoglobin());
  }
  if (from.has_meancorpuscularhemoglobinconcentration()) {
    _internal_mutable_meancorpuscularhemoglobinconcentration()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_meancorpuscularhemoglobinconcentration());
  }
  if (from.has_meancorpuscularvolume()) {
    _internal_mutable_meancorpuscularvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_meancorpuscularvolume());
  }
  if (from.has_redbloodcellcount()) {
    _internal_mutable_redbloodcellcount()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_redbloodcellcount());
  }
  if (from.has_whitebloodcellcount()) {
    _internal_mutable_whitebloodcellcount()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_whitebloodcellcount());
  }
}

void CompleteBloodCountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CompleteBloodCountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteBloodCountData::CopyFrom(const CompleteBloodCountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CompleteBloodCountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteBloodCountData::IsInitialized() const {
  return true;
}

void CompleteBloodCountData::InternalSwap(CompleteBloodCountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompleteBloodCountData, whitebloodcellcount_)
      + sizeof(CompleteBloodCountData::whitebloodcellcount_)
      - PROTOBUF_FIELD_OFFSET(CompleteBloodCountData, patientassessment_)>(
          reinterpret_cast<char*>(&patientassessment_),
          reinterpret_cast<char*>(&other->patientassessment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteBloodCountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComprehensiveMetabolicPanelData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientAssessmentData& patientassessment(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& albumin(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& alp(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& alt(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& ast(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& bun(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& calcium(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& chloride(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& co2(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& creatinine(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& glucose(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& potassium(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarAmountPerVolumeData& sodium(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalbilirubin(const ComprehensiveMetabolicPanelData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& totalprotein(const ComprehensiveMetabolicPanelData* msg);
};

const ::pulse::cdm::bind::PatientAssessmentData&
ComprehensiveMetabolicPanelData::_Internal::patientassessment(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->patientassessment_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::albumin(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->albumin_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::alp(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->alp_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::alt(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->alt_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::ast(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->ast_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::bun(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->bun_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::calcium(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->calcium_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::chloride(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->chloride_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::co2(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->co2_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::creatinine(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->creatinine_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::glucose(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->glucose_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::potassium(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->potassium_;
}
const ::pulse::cdm::bind::ScalarAmountPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::sodium(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->sodium_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::totalbilirubin(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->totalbilirubin_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
ComprehensiveMetabolicPanelData::_Internal::totalprotein(const ComprehensiveMetabolicPanelData* msg) {
  return *msg->totalprotein_;
}
void ComprehensiveMetabolicPanelData::clear_albumin() {
  if (GetArena() == nullptr && albumin_ != nullptr) {
    delete albumin_;
  }
  albumin_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_alp() {
  if (GetArena() == nullptr && alp_ != nullptr) {
    delete alp_;
  }
  alp_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_alt() {
  if (GetArena() == nullptr && alt_ != nullptr) {
    delete alt_;
  }
  alt_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_ast() {
  if (GetArena() == nullptr && ast_ != nullptr) {
    delete ast_;
  }
  ast_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_bun() {
  if (GetArena() == nullptr && bun_ != nullptr) {
    delete bun_;
  }
  bun_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_calcium() {
  if (GetArena() == nullptr && calcium_ != nullptr) {
    delete calcium_;
  }
  calcium_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_chloride() {
  if (GetArena() == nullptr && chloride_ != nullptr) {
    delete chloride_;
  }
  chloride_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_co2() {
  if (GetArena() == nullptr && co2_ != nullptr) {
    delete co2_;
  }
  co2_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_creatinine() {
  if (GetArena() == nullptr && creatinine_ != nullptr) {
    delete creatinine_;
  }
  creatinine_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_glucose() {
  if (GetArena() == nullptr && glucose_ != nullptr) {
    delete glucose_;
  }
  glucose_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_potassium() {
  if (GetArena() == nullptr && potassium_ != nullptr) {
    delete potassium_;
  }
  potassium_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_sodium() {
  if (GetArena() == nullptr && sodium_ != nullptr) {
    delete sodium_;
  }
  sodium_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_totalbilirubin() {
  if (GetArena() == nullptr && totalbilirubin_ != nullptr) {
    delete totalbilirubin_;
  }
  totalbilirubin_ = nullptr;
}
void ComprehensiveMetabolicPanelData::clear_totalprotein() {
  if (GetArena() == nullptr && totalprotein_ != nullptr) {
    delete totalprotein_;
  }
  totalprotein_ = nullptr;
}
ComprehensiveMetabolicPanelData::ComprehensiveMetabolicPanelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
}
ComprehensiveMetabolicPanelData::ComprehensiveMetabolicPanelData(const ComprehensiveMetabolicPanelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientassessment()) {
    patientassessment_ = new ::pulse::cdm::bind::PatientAssessmentData(*from.patientassessment_);
  } else {
    patientassessment_ = nullptr;
  }
  if (from._internal_has_albumin()) {
    albumin_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.albumin_);
  } else {
    albumin_ = nullptr;
  }
  if (from._internal_has_alp()) {
    alp_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.alp_);
  } else {
    alp_ = nullptr;
  }
  if (from._internal_has_alt()) {
    alt_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.alt_);
  } else {
    alt_ = nullptr;
  }
  if (from._internal_has_ast()) {
    ast_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.ast_);
  } else {
    ast_ = nullptr;
  }
  if (from._internal_has_bun()) {
    bun_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.bun_);
  } else {
    bun_ = nullptr;
  }
  if (from._internal_has_calcium()) {
    calcium_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.calcium_);
  } else {
    calcium_ = nullptr;
  }
  if (from._internal_has_chloride()) {
    chloride_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.chloride_);
  } else {
    chloride_ = nullptr;
  }
  if (from._internal_has_co2()) {
    co2_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.co2_);
  } else {
    co2_ = nullptr;
  }
  if (from._internal_has_creatinine()) {
    creatinine_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.creatinine_);
  } else {
    creatinine_ = nullptr;
  }
  if (from._internal_has_glucose()) {
    glucose_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.glucose_);
  } else {
    glucose_ = nullptr;
  }
  if (from._internal_has_potassium()) {
    potassium_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.potassium_);
  } else {
    potassium_ = nullptr;
  }
  if (from._internal_has_sodium()) {
    sodium_ = new ::pulse::cdm::bind::ScalarAmountPerVolumeData(*from.sodium_);
  } else {
    sodium_ = nullptr;
  }
  if (from._internal_has_totalbilirubin()) {
    totalbilirubin_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.totalbilirubin_);
  } else {
    totalbilirubin_ = nullptr;
  }
  if (from._internal_has_totalprotein()) {
    totalprotein_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.totalprotein_);
  } else {
    totalprotein_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
}

void ComprehensiveMetabolicPanelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientassessment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalprotein_) -
      reinterpret_cast<char*>(&patientassessment_)) + sizeof(totalprotein_));
}

ComprehensiveMetabolicPanelData::~ComprehensiveMetabolicPanelData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComprehensiveMetabolicPanelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientassessment_;
  if (this != internal_default_instance()) delete albumin_;
  if (this != internal_default_instance()) delete alp_;
  if (this != internal_default_instance()) delete alt_;
  if (this != internal_default_instance()) delete ast_;
  if (this != internal_default_instance()) delete bun_;
  if (this != internal_default_instance()) delete calcium_;
  if (this != internal_default_instance()) delete chloride_;
  if (this != internal_default_instance()) delete co2_;
  if (this != internal_default_instance()) delete creatinine_;
  if (this != internal_default_instance()) delete glucose_;
  if (this != internal_default_instance()) delete potassium_;
  if (this != internal_default_instance()) delete sodium_;
  if (this != internal_default_instance()) delete totalbilirubin_;
  if (this != internal_default_instance()) delete totalprotein_;
}

void ComprehensiveMetabolicPanelData::ArenaDtor(void* object) {
  ComprehensiveMetabolicPanelData* _this = reinterpret_cast< ComprehensiveMetabolicPanelData* >(object);
  (void)_this;
}
void ComprehensiveMetabolicPanelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComprehensiveMetabolicPanelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComprehensiveMetabolicPanelData& ComprehensiveMetabolicPanelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComprehensiveMetabolicPanelData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void ComprehensiveMetabolicPanelData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
  if (GetArena() == nullptr && albumin_ != nullptr) {
    delete albumin_;
  }
  albumin_ = nullptr;
  if (GetArena() == nullptr && alp_ != nullptr) {
    delete alp_;
  }
  alp_ = nullptr;
  if (GetArena() == nullptr && alt_ != nullptr) {
    delete alt_;
  }
  alt_ = nullptr;
  if (GetArena() == nullptr && ast_ != nullptr) {
    delete ast_;
  }
  ast_ = nullptr;
  if (GetArena() == nullptr && bun_ != nullptr) {
    delete bun_;
  }
  bun_ = nullptr;
  if (GetArena() == nullptr && calcium_ != nullptr) {
    delete calcium_;
  }
  calcium_ = nullptr;
  if (GetArena() == nullptr && chloride_ != nullptr) {
    delete chloride_;
  }
  chloride_ = nullptr;
  if (GetArena() == nullptr && co2_ != nullptr) {
    delete co2_;
  }
  co2_ = nullptr;
  if (GetArena() == nullptr && creatinine_ != nullptr) {
    delete creatinine_;
  }
  creatinine_ = nullptr;
  if (GetArena() == nullptr && glucose_ != nullptr) {
    delete glucose_;
  }
  glucose_ = nullptr;
  if (GetArena() == nullptr && potassium_ != nullptr) {
    delete potassium_;
  }
  potassium_ = nullptr;
  if (GetArena() == nullptr && sodium_ != nullptr) {
    delete sodium_;
  }
  sodium_ = nullptr;
  if (GetArena() == nullptr && totalbilirubin_ != nullptr) {
    delete totalbilirubin_;
  }
  totalbilirubin_ = nullptr;
  if (GetArena() == nullptr && totalprotein_ != nullptr) {
    delete totalprotein_;
  }
  totalprotein_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComprehensiveMetabolicPanelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientassessment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Albumin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_albumin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData ALP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_alp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData ALT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_alt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData AST = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData BUN = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Calcium = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_calcium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData Chloride = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chloride(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData CO2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_co2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Creatinine = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_creatinine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Glucose = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_glucose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData Potassium = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_potassium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountPerVolumeData Sodium = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sodium(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData TotalBilirubin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalbilirubin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProtein = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalprotein(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComprehensiveMetabolicPanelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientassessment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Albumin = 2;
  if (this->has_albumin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::albumin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALP = 3;
  if (this->has_alp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::alp(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALT = 4;
  if (this->has_alt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::alt(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData AST = 5;
  if (this->has_ast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ast(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BUN = 6;
  if (this->has_bun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bun(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Calcium = 7;
  if (this->has_calcium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::calcium(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Chloride = 8;
  if (this->has_chloride()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chloride(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData CO2 = 9;
  if (this->has_co2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::co2(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Creatinine = 10;
  if (this->has_creatinine()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::creatinine(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Glucose = 11;
  if (this->has_glucose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::glucose(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Potassium = 12;
  if (this->has_potassium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::potassium(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Sodium = 13;
  if (this->has_sodium()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sodium(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalBilirubin = 14;
  if (this->has_totalbilirubin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::totalbilirubin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProtein = 15;
  if (this->has_totalprotein()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::totalprotein(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  return target;
}

size_t ComprehensiveMetabolicPanelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientassessment_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Albumin = 2;
  if (this->has_albumin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *albumin_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALP = 3;
  if (this->has_alp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alp_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData ALT = 4;
  if (this->has_alt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alt_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData AST = 5;
  if (this->has_ast()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData BUN = 6;
  if (this->has_bun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bun_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Calcium = 7;
  if (this->has_calcium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calcium_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Chloride = 8;
  if (this->has_chloride()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chloride_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData CO2 = 9;
  if (this->has_co2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *co2_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Creatinine = 10;
  if (this->has_creatinine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *creatinine_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Glucose = 11;
  if (this->has_glucose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *glucose_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Potassium = 12;
  if (this->has_potassium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *potassium_);
  }

  // .pulse.cdm.bind.ScalarAmountPerVolumeData Sodium = 13;
  if (this->has_sodium()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sodium_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalBilirubin = 14;
  if (this->has_totalbilirubin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalbilirubin_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData TotalProtein = 15;
  if (this->has_totalprotein()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalprotein_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComprehensiveMetabolicPanelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  GOOGLE_DCHECK_NE(&from, this);
  const ComprehensiveMetabolicPanelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComprehensiveMetabolicPanelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
    MergeFrom(*source);
  }
}

void ComprehensiveMetabolicPanelData::MergeFrom(const ComprehensiveMetabolicPanelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientassessment()) {
    _internal_mutable_patientassessment()->::pulse::cdm::bind::PatientAssessmentData::MergeFrom(from._internal_patientassessment());
  }
  if (from.has_albumin()) {
    _internal_mutable_albumin()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_albumin());
  }
  if (from.has_alp()) {
    _internal_mutable_alp()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_alp());
  }
  if (from.has_alt()) {
    _internal_mutable_alt()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_alt());
  }
  if (from.has_ast()) {
    _internal_mutable_ast()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_ast());
  }
  if (from.has_bun()) {
    _internal_mutable_bun()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_bun());
  }
  if (from.has_calcium()) {
    _internal_mutable_calcium()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_calcium());
  }
  if (from.has_chloride()) {
    _internal_mutable_chloride()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_chloride());
  }
  if (from.has_co2()) {
    _internal_mutable_co2()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_co2());
  }
  if (from.has_creatinine()) {
    _internal_mutable_creatinine()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_creatinine());
  }
  if (from.has_glucose()) {
    _internal_mutable_glucose()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_glucose());
  }
  if (from.has_potassium()) {
    _internal_mutable_potassium()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_potassium());
  }
  if (from.has_sodium()) {
    _internal_mutable_sodium()->::pulse::cdm::bind::ScalarAmountPerVolumeData::MergeFrom(from._internal_sodium());
  }
  if (from.has_totalbilirubin()) {
    _internal_mutable_totalbilirubin()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_totalbilirubin());
  }
  if (from.has_totalprotein()) {
    _internal_mutable_totalprotein()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_totalprotein());
  }
}

void ComprehensiveMetabolicPanelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComprehensiveMetabolicPanelData::CopyFrom(const ComprehensiveMetabolicPanelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ComprehensiveMetabolicPanelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComprehensiveMetabolicPanelData::IsInitialized() const {
  return true;
}

void ComprehensiveMetabolicPanelData::InternalSwap(ComprehensiveMetabolicPanelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComprehensiveMetabolicPanelData, totalprotein_)
      + sizeof(ComprehensiveMetabolicPanelData::totalprotein_)
      - PROTOBUF_FIELD_OFFSET(ComprehensiveMetabolicPanelData, patientassessment_)>(
          reinterpret_cast<char*>(&patientassessment_),
          reinterpret_cast<char*>(&other->patientassessment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComprehensiveMetabolicPanelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UrinalysisMicroscopicData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarAmountData& redbloodcells(const UrinalysisMicroscopicData* msg);
  static const ::pulse::cdm::bind::ScalarAmountData& whitebloodcells(const UrinalysisMicroscopicData* msg);
  static const ::pulse::cdm::bind::ScalarAmountData& casts(const UrinalysisMicroscopicData* msg);
};

const ::pulse::cdm::bind::ScalarAmountData&
UrinalysisMicroscopicData::_Internal::redbloodcells(const UrinalysisMicroscopicData* msg) {
  return *msg->redbloodcells_;
}
const ::pulse::cdm::bind::ScalarAmountData&
UrinalysisMicroscopicData::_Internal::whitebloodcells(const UrinalysisMicroscopicData* msg) {
  return *msg->whitebloodcells_;
}
const ::pulse::cdm::bind::ScalarAmountData&
UrinalysisMicroscopicData::_Internal::casts(const UrinalysisMicroscopicData* msg) {
  return *msg->casts_;
}
void UrinalysisMicroscopicData::clear_redbloodcells() {
  if (GetArena() == nullptr && redbloodcells_ != nullptr) {
    delete redbloodcells_;
  }
  redbloodcells_ = nullptr;
}
void UrinalysisMicroscopicData::clear_whitebloodcells() {
  if (GetArena() == nullptr && whitebloodcells_ != nullptr) {
    delete whitebloodcells_;
  }
  whitebloodcells_ = nullptr;
}
void UrinalysisMicroscopicData::clear_casts() {
  if (GetArena() == nullptr && casts_ != nullptr) {
    delete casts_;
  }
  casts_ = nullptr;
}
UrinalysisMicroscopicData::UrinalysisMicroscopicData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.UrinalysisMicroscopicData)
}
UrinalysisMicroscopicData::UrinalysisMicroscopicData(const UrinalysisMicroscopicData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_redbloodcells()) {
    redbloodcells_ = new ::pulse::cdm::bind::ScalarAmountData(*from.redbloodcells_);
  } else {
    redbloodcells_ = nullptr;
  }
  if (from._internal_has_whitebloodcells()) {
    whitebloodcells_ = new ::pulse::cdm::bind::ScalarAmountData(*from.whitebloodcells_);
  } else {
    whitebloodcells_ = nullptr;
  }
  if (from._internal_has_casts()) {
    casts_ = new ::pulse::cdm::bind::ScalarAmountData(*from.casts_);
  } else {
    casts_ = nullptr;
  }
  ::memcpy(&observationtype_, &from.observationtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&yeast_) -
    reinterpret_cast<char*>(&observationtype_)) + sizeof(yeast_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.UrinalysisMicroscopicData)
}

void UrinalysisMicroscopicData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&redbloodcells_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&yeast_) -
      reinterpret_cast<char*>(&redbloodcells_)) + sizeof(yeast_));
}

UrinalysisMicroscopicData::~UrinalysisMicroscopicData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.UrinalysisMicroscopicData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UrinalysisMicroscopicData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete redbloodcells_;
  if (this != internal_default_instance()) delete whitebloodcells_;
  if (this != internal_default_instance()) delete casts_;
}

void UrinalysisMicroscopicData::ArenaDtor(void* object) {
  UrinalysisMicroscopicData* _this = reinterpret_cast< UrinalysisMicroscopicData* >(object);
  (void)_this;
}
void UrinalysisMicroscopicData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrinalysisMicroscopicData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrinalysisMicroscopicData& UrinalysisMicroscopicData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrinalysisMicroscopicData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void UrinalysisMicroscopicData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && redbloodcells_ != nullptr) {
    delete redbloodcells_;
  }
  redbloodcells_ = nullptr;
  if (GetArena() == nullptr && whitebloodcells_ != nullptr) {
    delete whitebloodcells_;
  }
  whitebloodcells_ = nullptr;
  if (GetArena() == nullptr && casts_ != nullptr) {
    delete casts_;
  }
  casts_ = nullptr;
  ::memset(&observationtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yeast_) -
      reinterpret_cast<char*>(&observationtype_)) + sizeof(yeast_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrinalysisMicroscopicData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationType ObservationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_observationtype(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationType>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountData RedBloodCells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbloodcells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountData WhiteBloodCells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_whitebloodcells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount EpithelialCells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_epithelialcells(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarAmountData Casts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_casts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Crystals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_crystals(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Bacteria = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bacteria(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Trichomonads = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trichomonads(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Yeast = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_yeast(static_cast<::pulse::cdm::bind::UrinalysisMicroscopicData_eObservationAmount>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UrinalysisMicroscopicData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationType ObservationType = 1;
  if (this->observationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_observationtype(), target);
  }

  // .pulse.cdm.bind.ScalarAmountData RedBloodCells = 2;
  if (this->has_redbloodcells()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::redbloodcells(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarAmountData WhiteBloodCells = 3;
  if (this->has_whitebloodcells()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::whitebloodcells(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount EpithelialCells = 4;
  if (this->epithelialcells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_epithelialcells(), target);
  }

  // .pulse.cdm.bind.ScalarAmountData Casts = 5;
  if (this->has_casts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::casts(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Crystals = 6;
  if (this->crystals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_crystals(), target);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Bacteria = 7;
  if (this->bacteria() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bacteria(), target);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Trichomonads = 8;
  if (this->trichomonads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_trichomonads(), target);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Yeast = 9;
  if (this->yeast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_yeast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.UrinalysisMicroscopicData)
  return target;
}

size_t UrinalysisMicroscopicData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarAmountData RedBloodCells = 2;
  if (this->has_redbloodcells()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *redbloodcells_);
  }

  // .pulse.cdm.bind.ScalarAmountData WhiteBloodCells = 3;
  if (this->has_whitebloodcells()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *whitebloodcells_);
  }

  // .pulse.cdm.bind.ScalarAmountData Casts = 5;
  if (this->has_casts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *casts_);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationType ObservationType = 1;
  if (this->observationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_observationtype());
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount EpithelialCells = 4;
  if (this->epithelialcells() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epithelialcells());
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Crystals = 6;
  if (this->crystals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crystals());
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Bacteria = 7;
  if (this->bacteria() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bacteria());
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Trichomonads = 8;
  if (this->trichomonads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trichomonads());
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData.eObservationAmount Yeast = 9;
  if (this->yeast() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_yeast());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrinalysisMicroscopicData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  GOOGLE_DCHECK_NE(&from, this);
  const UrinalysisMicroscopicData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UrinalysisMicroscopicData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.UrinalysisMicroscopicData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.UrinalysisMicroscopicData)
    MergeFrom(*source);
  }
}

void UrinalysisMicroscopicData::MergeFrom(const UrinalysisMicroscopicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_redbloodcells()) {
    _internal_mutable_redbloodcells()->::pulse::cdm::bind::ScalarAmountData::MergeFrom(from._internal_redbloodcells());
  }
  if (from.has_whitebloodcells()) {
    _internal_mutable_whitebloodcells()->::pulse::cdm::bind::ScalarAmountData::MergeFrom(from._internal_whitebloodcells());
  }
  if (from.has_casts()) {
    _internal_mutable_casts()->::pulse::cdm::bind::ScalarAmountData::MergeFrom(from._internal_casts());
  }
  if (from.observationtype() != 0) {
    _internal_set_observationtype(from._internal_observationtype());
  }
  if (from.epithelialcells() != 0) {
    _internal_set_epithelialcells(from._internal_epithelialcells());
  }
  if (from.crystals() != 0) {
    _internal_set_crystals(from._internal_crystals());
  }
  if (from.bacteria() != 0) {
    _internal_set_bacteria(from._internal_bacteria());
  }
  if (from.trichomonads() != 0) {
    _internal_set_trichomonads(from._internal_trichomonads());
  }
  if (from.yeast() != 0) {
    _internal_set_yeast(from._internal_yeast());
  }
}

void UrinalysisMicroscopicData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrinalysisMicroscopicData::CopyFrom(const UrinalysisMicroscopicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.UrinalysisMicroscopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrinalysisMicroscopicData::IsInitialized() const {
  return true;
}

void UrinalysisMicroscopicData::InternalSwap(UrinalysisMicroscopicData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UrinalysisMicroscopicData, yeast_)
      + sizeof(UrinalysisMicroscopicData::yeast_)
      - PROTOBUF_FIELD_OFFSET(UrinalysisMicroscopicData, redbloodcells_)>(
          reinterpret_cast<char*>(&redbloodcells_),
          reinterpret_cast<char*>(&other->redbloodcells_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UrinalysisMicroscopicData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UrinalysisData::_Internal {
 public:
  static const ::pulse::cdm::bind::PatientAssessmentData& patientassessment(const UrinalysisData* msg);
  static const ::pulse::cdm::bind::ScalarData& bilirubin(const UrinalysisData* msg);
  static const ::pulse::cdm::bind::ScalarData& specificgravity(const UrinalysisData* msg);
  static const ::pulse::cdm::bind::ScalarData& ph(const UrinalysisData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerVolumeData& urobilinogen(const UrinalysisData* msg);
  static const ::pulse::cdm::bind::UrinalysisMicroscopicData& microscopic(const UrinalysisData* msg);
};

const ::pulse::cdm::bind::PatientAssessmentData&
UrinalysisData::_Internal::patientassessment(const UrinalysisData* msg) {
  return *msg->patientassessment_;
}
const ::pulse::cdm::bind::ScalarData&
UrinalysisData::_Internal::bilirubin(const UrinalysisData* msg) {
  return *msg->bilirubin_;
}
const ::pulse::cdm::bind::ScalarData&
UrinalysisData::_Internal::specificgravity(const UrinalysisData* msg) {
  return *msg->specificgravity_;
}
const ::pulse::cdm::bind::ScalarData&
UrinalysisData::_Internal::ph(const UrinalysisData* msg) {
  return *msg->ph_;
}
const ::pulse::cdm::bind::ScalarMassPerVolumeData&
UrinalysisData::_Internal::urobilinogen(const UrinalysisData* msg) {
  return *msg->urobilinogen_;
}
const ::pulse::cdm::bind::UrinalysisMicroscopicData&
UrinalysisData::_Internal::microscopic(const UrinalysisData* msg) {
  return *msg->microscopic_;
}
void UrinalysisData::clear_bilirubin() {
  if (GetArena() == nullptr && bilirubin_ != nullptr) {
    delete bilirubin_;
  }
  bilirubin_ = nullptr;
}
void UrinalysisData::clear_specificgravity() {
  if (GetArena() == nullptr && specificgravity_ != nullptr) {
    delete specificgravity_;
  }
  specificgravity_ = nullptr;
}
void UrinalysisData::clear_ph() {
  if (GetArena() == nullptr && ph_ != nullptr) {
    delete ph_;
  }
  ph_ = nullptr;
}
void UrinalysisData::clear_urobilinogen() {
  if (GetArena() == nullptr && urobilinogen_ != nullptr) {
    delete urobilinogen_;
  }
  urobilinogen_ = nullptr;
}
UrinalysisData::UrinalysisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.UrinalysisData)
}
UrinalysisData::UrinalysisData(const UrinalysisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patientassessment()) {
    patientassessment_ = new ::pulse::cdm::bind::PatientAssessmentData(*from.patientassessment_);
  } else {
    patientassessment_ = nullptr;
  }
  if (from._internal_has_bilirubin()) {
    bilirubin_ = new ::pulse::cdm::bind::ScalarData(*from.bilirubin_);
  } else {
    bilirubin_ = nullptr;
  }
  if (from._internal_has_specificgravity()) {
    specificgravity_ = new ::pulse::cdm::bind::ScalarData(*from.specificgravity_);
  } else {
    specificgravity_ = nullptr;
  }
  if (from._internal_has_ph()) {
    ph_ = new ::pulse::cdm::bind::ScalarData(*from.ph_);
  } else {
    ph_ = nullptr;
  }
  if (from._internal_has_urobilinogen()) {
    urobilinogen_ = new ::pulse::cdm::bind::ScalarMassPerVolumeData(*from.urobilinogen_);
  } else {
    urobilinogen_ = nullptr;
  }
  if (from._internal_has_microscopic()) {
    microscopic_ = new ::pulse::cdm::bind::UrinalysisMicroscopicData(*from.microscopic_);
  } else {
    microscopic_ = nullptr;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&leukocyteesterase_) -
    reinterpret_cast<char*>(&color_)) + sizeof(leukocyteesterase_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.UrinalysisData)
}

void UrinalysisData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&patientassessment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&leukocyteesterase_) -
      reinterpret_cast<char*>(&patientassessment_)) + sizeof(leukocyteesterase_));
}

UrinalysisData::~UrinalysisData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.UrinalysisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UrinalysisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete patientassessment_;
  if (this != internal_default_instance()) delete bilirubin_;
  if (this != internal_default_instance()) delete specificgravity_;
  if (this != internal_default_instance()) delete ph_;
  if (this != internal_default_instance()) delete urobilinogen_;
  if (this != internal_default_instance()) delete microscopic_;
}

void UrinalysisData::ArenaDtor(void* object) {
  UrinalysisData* _this = reinterpret_cast< UrinalysisData* >(object);
  (void)_this;
}
void UrinalysisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrinalysisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrinalysisData& UrinalysisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrinalysisData_pulse_2fcdm_2fbind_2fPatientAssessments_2eproto.base);
  return *internal_default_instance();
}


void UrinalysisData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.UrinalysisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && patientassessment_ != nullptr) {
    delete patientassessment_;
  }
  patientassessment_ = nullptr;
  if (GetArena() == nullptr && bilirubin_ != nullptr) {
    delete bilirubin_;
  }
  bilirubin_ = nullptr;
  if (GetArena() == nullptr && specificgravity_ != nullptr) {
    delete specificgravity_;
  }
  specificgravity_ = nullptr;
  if (GetArena() == nullptr && ph_ != nullptr) {
    delete ph_;
  }
  ph_ = nullptr;
  if (GetArena() == nullptr && urobilinogen_ != nullptr) {
    delete urobilinogen_;
  }
  urobilinogen_ = nullptr;
  if (GetArena() == nullptr && microscopic_ != nullptr) {
    delete microscopic_;
  }
  microscopic_ = nullptr;
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leukocyteesterase_) -
      reinterpret_cast<char*>(&color_)) + sizeof(leukocyteesterase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrinalysisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patientassessment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.eUrineColor Color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::pulse::cdm::bind::UrinalysisData_eUrineColor>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.eClarityIndicator Appearance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appearance(static_cast<::pulse::cdm::bind::UrinalysisData_eClarityIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Glucose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_glucose(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Ketone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ketone(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData Bilirubin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bilirubin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData SpecificGravity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_specificgravity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Blood = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_blood(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData pH = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Protein = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protein(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerVolumeData Urobilinogen = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_urobilinogen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Nitrite = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nitrite(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator LeukocyteEsterase = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_leukocyteesterase(static_cast<::pulse::cdm::bind::UrinalysisData_ePresenceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.UrinalysisMicroscopicData Microscopic = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_microscopic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UrinalysisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.UrinalysisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::patientassessment(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisData.eUrineColor Color = 2;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // .pulse.cdm.bind.UrinalysisData.eClarityIndicator Appearance = 3;
  if (this->appearance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_appearance(), target);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Glucose = 4;
  if (this->glucose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_glucose(), target);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Ketone = 5;
  if (this->ketone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ketone(), target);
  }

  // .pulse.cdm.bind.ScalarData Bilirubin = 6;
  if (this->has_bilirubin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bilirubin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData SpecificGravity = 7;
  if (this->has_specificgravity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::specificgravity(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Blood = 8;
  if (this->blood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_blood(), target);
  }

  // .pulse.cdm.bind.ScalarData pH = 9;
  if (this->has_ph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ph(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Protein = 10;
  if (this->protein() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_protein(), target);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Urobilinogen = 11;
  if (this->has_urobilinogen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::urobilinogen(this), target, stream);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Nitrite = 12;
  if (this->nitrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_nitrite(), target);
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator LeukocyteEsterase = 13;
  if (this->leukocyteesterase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_leukocyteesterase(), target);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData Microscopic = 14;
  if (this->has_microscopic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::microscopic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.UrinalysisData)
  return target;
}

size_t UrinalysisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.UrinalysisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.PatientAssessmentData PatientAssessment = 1;
  if (this->has_patientassessment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patientassessment_);
  }

  // .pulse.cdm.bind.ScalarData Bilirubin = 6;
  if (this->has_bilirubin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bilirubin_);
  }

  // .pulse.cdm.bind.ScalarData SpecificGravity = 7;
  if (this->has_specificgravity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specificgravity_);
  }

  // .pulse.cdm.bind.ScalarData pH = 9;
  if (this->has_ph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ph_);
  }

  // .pulse.cdm.bind.ScalarMassPerVolumeData Urobilinogen = 11;
  if (this->has_urobilinogen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *urobilinogen_);
  }

  // .pulse.cdm.bind.UrinalysisMicroscopicData Microscopic = 14;
  if (this->has_microscopic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *microscopic_);
  }

  // .pulse.cdm.bind.UrinalysisData.eUrineColor Color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
  }

  // .pulse.cdm.bind.UrinalysisData.eClarityIndicator Appearance = 3;
  if (this->appearance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_appearance());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Glucose = 4;
  if (this->glucose() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_glucose());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Ketone = 5;
  if (this->ketone() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ketone());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Blood = 8;
  if (this->blood() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blood());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Protein = 10;
  if (this->protein() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protein());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator Nitrite = 12;
  if (this->nitrite() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_nitrite());
  }

  // .pulse.cdm.bind.UrinalysisData.ePresenceIndicator LeukocyteEsterase = 13;
  if (this->leukocyteesterase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leukocyteesterase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrinalysisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.UrinalysisData)
  GOOGLE_DCHECK_NE(&from, this);
  const UrinalysisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UrinalysisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.UrinalysisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.UrinalysisData)
    MergeFrom(*source);
  }
}

void UrinalysisData::MergeFrom(const UrinalysisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.UrinalysisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_patientassessment()) {
    _internal_mutable_patientassessment()->::pulse::cdm::bind::PatientAssessmentData::MergeFrom(from._internal_patientassessment());
  }
  if (from.has_bilirubin()) {
    _internal_mutable_bilirubin()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_bilirubin());
  }
  if (from.has_specificgravity()) {
    _internal_mutable_specificgravity()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_specificgravity());
  }
  if (from.has_ph()) {
    _internal_mutable_ph()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_ph());
  }
  if (from.has_urobilinogen()) {
    _internal_mutable_urobilinogen()->::pulse::cdm::bind::ScalarMassPerVolumeData::MergeFrom(from._internal_urobilinogen());
  }
  if (from.has_microscopic()) {
    _internal_mutable_microscopic()->::pulse::cdm::bind::UrinalysisMicroscopicData::MergeFrom(from._internal_microscopic());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.appearance() != 0) {
    _internal_set_appearance(from._internal_appearance());
  }
  if (from.glucose() != 0) {
    _internal_set_glucose(from._internal_glucose());
  }
  if (from.ketone() != 0) {
    _internal_set_ketone(from._internal_ketone());
  }
  if (from.blood() != 0) {
    _internal_set_blood(from._internal_blood());
  }
  if (from.protein() != 0) {
    _internal_set_protein(from._internal_protein());
  }
  if (from.nitrite() != 0) {
    _internal_set_nitrite(from._internal_nitrite());
  }
  if (from.leukocyteesterase() != 0) {
    _internal_set_leukocyteesterase(from._internal_leukocyteesterase());
  }
}

void UrinalysisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.UrinalysisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrinalysisData::CopyFrom(const UrinalysisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.UrinalysisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrinalysisData::IsInitialized() const {
  return true;
}

void UrinalysisData::InternalSwap(UrinalysisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UrinalysisData, leukocyteesterase_)
      + sizeof(UrinalysisData::leukocyteesterase_)
      - PROTOBUF_FIELD_OFFSET(UrinalysisData, patientassessment_)>(
          reinterpret_cast<char*>(&patientassessment_),
          reinterpret_cast<char*>(&other->patientassessment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UrinalysisData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PatientAssessmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PatientAssessmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PatientAssessmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::PulmonaryFunctionTestData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::PulmonaryFunctionTestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::PulmonaryFunctionTestData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CompleteBloodCountData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CompleteBloodCountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CompleteBloodCountData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ComprehensiveMetabolicPanelData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ComprehensiveMetabolicPanelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ComprehensiveMetabolicPanelData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::UrinalysisMicroscopicData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::UrinalysisMicroscopicData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::UrinalysisMicroscopicData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::UrinalysisData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::UrinalysisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::UrinalysisData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
