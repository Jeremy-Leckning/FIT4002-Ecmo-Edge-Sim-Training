// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/PatientNutrition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class MealData;
class MealDataDefaultTypeInternal;
extern MealDataDefaultTypeInternal _MealData_default_instance_;
class NutritionData;
class NutritionDataDefaultTypeInternal;
extern NutritionDataDefaultTypeInternal _NutritionData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::MealData* Arena::CreateMaybeMessage<::pulse::cdm::bind::MealData>(Arena*);
template<> ::pulse::cdm::bind::NutritionData* Arena::CreateMaybeMessage<::pulse::cdm::bind::NutritionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class NutritionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.NutritionData) */ {
 public:
  inline NutritionData() : NutritionData(nullptr) {}
  virtual ~NutritionData();

  NutritionData(const NutritionData& from);
  NutritionData(NutritionData&& from) noexcept
    : NutritionData() {
    *this = ::std::move(from);
  }

  inline NutritionData& operator=(const NutritionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NutritionData& operator=(NutritionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NutritionData& default_instance();

  static inline const NutritionData* internal_default_instance() {
    return reinterpret_cast<const NutritionData*>(
               &_NutritionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NutritionData& a, NutritionData& b) {
    a.Swap(&b);
  }
  inline void Swap(NutritionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NutritionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NutritionData* New() const final {
    return CreateMaybeMessage<NutritionData>(nullptr);
  }

  NutritionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NutritionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NutritionData& from);
  void MergeFrom(const NutritionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NutritionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.NutritionData";
  }
  protected:
  explicit NutritionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarbohydrateFieldNumber = 1,
    kCarbohydrateDigestionRateFieldNumber = 2,
    kFatFieldNumber = 3,
    kFatDigestionRateFieldNumber = 4,
    kProteinFieldNumber = 5,
    kProteinDigestionRateFieldNumber = 6,
    kCalciumFieldNumber = 7,
    kSodiumFieldNumber = 8,
    kWaterFieldNumber = 9,
  };
  // .pulse.cdm.bind.ScalarMassData Carbohydrate = 1;
  bool has_carbohydrate() const;
  private:
  bool _internal_has_carbohydrate() const;
  public:
  void clear_carbohydrate();
  const ::pulse::cdm::bind::ScalarMassData& carbohydrate() const;
  ::pulse::cdm::bind::ScalarMassData* release_carbohydrate();
  ::pulse::cdm::bind::ScalarMassData* mutable_carbohydrate();
  void set_allocated_carbohydrate(::pulse::cdm::bind::ScalarMassData* carbohydrate);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_carbohydrate() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_carbohydrate();
  public:
  void unsafe_arena_set_allocated_carbohydrate(
      ::pulse::cdm::bind::ScalarMassData* carbohydrate);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_carbohydrate();

  // .pulse.cdm.bind.ScalarMassPerTimeData CarbohydrateDigestionRate = 2;
  bool has_carbohydratedigestionrate() const;
  private:
  bool _internal_has_carbohydratedigestionrate() const;
  public:
  void clear_carbohydratedigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& carbohydratedigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_carbohydratedigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_carbohydratedigestionrate();
  void set_allocated_carbohydratedigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* carbohydratedigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_carbohydratedigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_carbohydratedigestionrate();
  public:
  void unsafe_arena_set_allocated_carbohydratedigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* carbohydratedigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_carbohydratedigestionrate();

  // .pulse.cdm.bind.ScalarMassData Fat = 3;
  bool has_fat() const;
  private:
  bool _internal_has_fat() const;
  public:
  void clear_fat();
  const ::pulse::cdm::bind::ScalarMassData& fat() const;
  ::pulse::cdm::bind::ScalarMassData* release_fat();
  ::pulse::cdm::bind::ScalarMassData* mutable_fat();
  void set_allocated_fat(::pulse::cdm::bind::ScalarMassData* fat);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_fat() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_fat();
  public:
  void unsafe_arena_set_allocated_fat(
      ::pulse::cdm::bind::ScalarMassData* fat);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_fat();

  // .pulse.cdm.bind.ScalarMassPerTimeData FatDigestionRate = 4;
  bool has_fatdigestionrate() const;
  private:
  bool _internal_has_fatdigestionrate() const;
  public:
  void clear_fatdigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& fatdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_fatdigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_fatdigestionrate();
  void set_allocated_fatdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* fatdigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_fatdigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_fatdigestionrate();
  public:
  void unsafe_arena_set_allocated_fatdigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* fatdigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_fatdigestionrate();

  // .pulse.cdm.bind.ScalarMassData Protein = 5;
  bool has_protein() const;
  private:
  bool _internal_has_protein() const;
  public:
  void clear_protein();
  const ::pulse::cdm::bind::ScalarMassData& protein() const;
  ::pulse::cdm::bind::ScalarMassData* release_protein();
  ::pulse::cdm::bind::ScalarMassData* mutable_protein();
  void set_allocated_protein(::pulse::cdm::bind::ScalarMassData* protein);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_protein() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_protein();
  public:
  void unsafe_arena_set_allocated_protein(
      ::pulse::cdm::bind::ScalarMassData* protein);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_protein();

  // .pulse.cdm.bind.ScalarMassPerTimeData ProteinDigestionRate = 6;
  bool has_proteindigestionrate() const;
  private:
  bool _internal_has_proteindigestionrate() const;
  public:
  void clear_proteindigestionrate();
  const ::pulse::cdm::bind::ScalarMassPerTimeData& proteindigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* release_proteindigestionrate();
  ::pulse::cdm::bind::ScalarMassPerTimeData* mutable_proteindigestionrate();
  void set_allocated_proteindigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* proteindigestionrate);
  private:
  const ::pulse::cdm::bind::ScalarMassPerTimeData& _internal_proteindigestionrate() const;
  ::pulse::cdm::bind::ScalarMassPerTimeData* _internal_mutable_proteindigestionrate();
  public:
  void unsafe_arena_set_allocated_proteindigestionrate(
      ::pulse::cdm::bind::ScalarMassPerTimeData* proteindigestionrate);
  ::pulse::cdm::bind::ScalarMassPerTimeData* unsafe_arena_release_proteindigestionrate();

  // .pulse.cdm.bind.ScalarMassData Calcium = 7;
  bool has_calcium() const;
  private:
  bool _internal_has_calcium() const;
  public:
  void clear_calcium();
  const ::pulse::cdm::bind::ScalarMassData& calcium() const;
  ::pulse::cdm::bind::ScalarMassData* release_calcium();
  ::pulse::cdm::bind::ScalarMassData* mutable_calcium();
  void set_allocated_calcium(::pulse::cdm::bind::ScalarMassData* calcium);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_calcium() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_calcium();
  public:
  void unsafe_arena_set_allocated_calcium(
      ::pulse::cdm::bind::ScalarMassData* calcium);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_calcium();

  // .pulse.cdm.bind.ScalarMassData Sodium = 8;
  bool has_sodium() const;
  private:
  bool _internal_has_sodium() const;
  public:
  void clear_sodium();
  const ::pulse::cdm::bind::ScalarMassData& sodium() const;
  ::pulse::cdm::bind::ScalarMassData* release_sodium();
  ::pulse::cdm::bind::ScalarMassData* mutable_sodium();
  void set_allocated_sodium(::pulse::cdm::bind::ScalarMassData* sodium);
  private:
  const ::pulse::cdm::bind::ScalarMassData& _internal_sodium() const;
  ::pulse::cdm::bind::ScalarMassData* _internal_mutable_sodium();
  public:
  void unsafe_arena_set_allocated_sodium(
      ::pulse::cdm::bind::ScalarMassData* sodium);
  ::pulse::cdm::bind::ScalarMassData* unsafe_arena_release_sodium();

  // .pulse.cdm.bind.ScalarVolumeData Water = 9;
  bool has_water() const;
  private:
  bool _internal_has_water() const;
  public:
  void clear_water();
  const ::pulse::cdm::bind::ScalarVolumeData& water() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_water();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_water();
  void set_allocated_water(::pulse::cdm::bind::ScalarVolumeData* water);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_water() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_water();
  public:
  void unsafe_arena_set_allocated_water(
      ::pulse::cdm::bind::ScalarVolumeData* water);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_water();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.NutritionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarMassData* carbohydrate_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* carbohydratedigestionrate_;
  ::pulse::cdm::bind::ScalarMassData* fat_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* fatdigestionrate_;
  ::pulse::cdm::bind::ScalarMassData* protein_;
  ::pulse::cdm::bind::ScalarMassPerTimeData* proteindigestionrate_;
  ::pulse::cdm::bind::ScalarMassData* calcium_;
  ::pulse::cdm::bind::ScalarMassData* sodium_;
  ::pulse::cdm::bind::ScalarVolumeData* water_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
};
// -------------------------------------------------------------------

class MealData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.MealData) */ {
 public:
  inline MealData() : MealData(nullptr) {}
  virtual ~MealData();

  MealData(const MealData& from);
  MealData(MealData&& from) noexcept
    : MealData() {
    *this = ::std::move(from);
  }

  inline MealData& operator=(const MealData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MealData& operator=(MealData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MealData& default_instance();

  static inline const MealData* internal_default_instance() {
    return reinterpret_cast<const MealData*>(
               &_MealData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MealData& a, MealData& b) {
    a.Swap(&b);
  }
  inline void Swap(MealData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MealData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MealData* New() const final {
    return CreateMaybeMessage<MealData>(nullptr);
  }

  MealData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MealData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MealData& from);
  void MergeFrom(const MealData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MealData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.MealData";
  }
  protected:
  explicit MealData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNutritionFieldNumber = 1,
    kElapsedTimeFieldNumber = 2,
  };
  // .pulse.cdm.bind.NutritionData Nutrition = 1;
  bool has_nutrition() const;
  private:
  bool _internal_has_nutrition() const;
  public:
  void clear_nutrition();
  const ::pulse::cdm::bind::NutritionData& nutrition() const;
  ::pulse::cdm::bind::NutritionData* release_nutrition();
  ::pulse::cdm::bind::NutritionData* mutable_nutrition();
  void set_allocated_nutrition(::pulse::cdm::bind::NutritionData* nutrition);
  private:
  const ::pulse::cdm::bind::NutritionData& _internal_nutrition() const;
  ::pulse::cdm::bind::NutritionData* _internal_mutable_nutrition();
  public:
  void unsafe_arena_set_allocated_nutrition(
      ::pulse::cdm::bind::NutritionData* nutrition);
  ::pulse::cdm::bind::NutritionData* unsafe_arena_release_nutrition();

  // .pulse.cdm.bind.ScalarTimeData ElapsedTime = 2;
  bool has_elapsedtime() const;
  private:
  bool _internal_has_elapsedtime() const;
  public:
  void clear_elapsedtime();
  const ::pulse::cdm::bind::ScalarTimeData& elapsedtime() const;
  ::pulse::cdm::bind::ScalarTimeData* release_elapsedtime();
  ::pulse::cdm::bind::ScalarTimeData* mutable_elapsedtime();
  void set_allocated_elapsedtime(::pulse::cdm::bind::ScalarTimeData* elapsedtime);
  private:
  const ::pulse::cdm::bind::ScalarTimeData& _internal_elapsedtime() const;
  ::pulse::cdm::bind::ScalarTimeData* _internal_mutable_elapsedtime();
  public:
  void unsafe_arena_set_allocated_elapsedtime(
      ::pulse::cdm::bind::ScalarTimeData* elapsedtime);
  ::pulse::cdm::bind::ScalarTimeData* unsafe_arena_release_elapsedtime();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.MealData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::NutritionData* nutrition_;
  ::pulse::cdm::bind::ScalarTimeData* elapsedtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NutritionData

// .pulse.cdm.bind.ScalarMassData Carbohydrate = 1;
inline bool NutritionData::_internal_has_carbohydrate() const {
  return this != internal_default_instance() && carbohydrate_ != nullptr;
}
inline bool NutritionData::has_carbohydrate() const {
  return _internal_has_carbohydrate();
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::_internal_carbohydrate() const {
  const ::pulse::cdm::bind::ScalarMassData* p = carbohydrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::carbohydrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Carbohydrate)
  return _internal_carbohydrate();
}
inline void NutritionData::unsafe_arena_set_allocated_carbohydrate(
    ::pulse::cdm::bind::ScalarMassData* carbohydrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrate_);
  }
  carbohydrate_ = carbohydrate;
  if (carbohydrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Carbohydrate)
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::release_carbohydrate() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = carbohydrate_;
  carbohydrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::unsafe_arena_release_carbohydrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Carbohydrate)
  
  ::pulse::cdm::bind::ScalarMassData* temp = carbohydrate_;
  carbohydrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::_internal_mutable_carbohydrate() {
  
  if (carbohydrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    carbohydrate_ = p;
  }
  return carbohydrate_;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::mutable_carbohydrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Carbohydrate)
  return _internal_mutable_carbohydrate();
}
inline void NutritionData::set_allocated_carbohydrate(::pulse::cdm::bind::ScalarMassData* carbohydrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrate_);
  }
  if (carbohydrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydrate)->GetArena();
    if (message_arena != submessage_arena) {
      carbohydrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbohydrate, submessage_arena);
    }
    
  } else {
    
  }
  carbohydrate_ = carbohydrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Carbohydrate)
}

// .pulse.cdm.bind.ScalarMassPerTimeData CarbohydrateDigestionRate = 2;
inline bool NutritionData::_internal_has_carbohydratedigestionrate() const {
  return this != internal_default_instance() && carbohydratedigestionrate_ != nullptr;
}
inline bool NutritionData::has_carbohydratedigestionrate() const {
  return _internal_has_carbohydratedigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::_internal_carbohydratedigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = carbohydratedigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::carbohydratedigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.CarbohydrateDigestionRate)
  return _internal_carbohydratedigestionrate();
}
inline void NutritionData::unsafe_arena_set_allocated_carbohydratedigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* carbohydratedigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydratedigestionrate_);
  }
  carbohydratedigestionrate_ = carbohydratedigestionrate;
  if (carbohydratedigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.CarbohydrateDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::release_carbohydratedigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = carbohydratedigestionrate_;
  carbohydratedigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::unsafe_arena_release_carbohydratedigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.CarbohydrateDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = carbohydratedigestionrate_;
  carbohydratedigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::_internal_mutable_carbohydratedigestionrate() {
  
  if (carbohydratedigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    carbohydratedigestionrate_ = p;
  }
  return carbohydratedigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::mutable_carbohydratedigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.CarbohydrateDigestionRate)
  return _internal_mutable_carbohydratedigestionrate();
}
inline void NutritionData::set_allocated_carbohydratedigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* carbohydratedigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydratedigestionrate_);
  }
  if (carbohydratedigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbohydratedigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      carbohydratedigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbohydratedigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  carbohydratedigestionrate_ = carbohydratedigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.CarbohydrateDigestionRate)
}

// .pulse.cdm.bind.ScalarMassData Fat = 3;
inline bool NutritionData::_internal_has_fat() const {
  return this != internal_default_instance() && fat_ != nullptr;
}
inline bool NutritionData::has_fat() const {
  return _internal_has_fat();
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::_internal_fat() const {
  const ::pulse::cdm::bind::ScalarMassData* p = fat_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::fat() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Fat)
  return _internal_fat();
}
inline void NutritionData::unsafe_arena_set_allocated_fat(
    ::pulse::cdm::bind::ScalarMassData* fat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fat_);
  }
  fat_ = fat;
  if (fat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Fat)
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::release_fat() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = fat_;
  fat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::unsafe_arena_release_fat() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Fat)
  
  ::pulse::cdm::bind::ScalarMassData* temp = fat_;
  fat_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::_internal_mutable_fat() {
  
  if (fat_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    fat_ = p;
  }
  return fat_;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::mutable_fat() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Fat)
  return _internal_mutable_fat();
}
inline void NutritionData::set_allocated_fat(::pulse::cdm::bind::ScalarMassData* fat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fat_);
  }
  if (fat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fat)->GetArena();
    if (message_arena != submessage_arena) {
      fat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fat, submessage_arena);
    }
    
  } else {
    
  }
  fat_ = fat;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Fat)
}

// .pulse.cdm.bind.ScalarMassPerTimeData FatDigestionRate = 4;
inline bool NutritionData::_internal_has_fatdigestionrate() const {
  return this != internal_default_instance() && fatdigestionrate_ != nullptr;
}
inline bool NutritionData::has_fatdigestionrate() const {
  return _internal_has_fatdigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::_internal_fatdigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = fatdigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::fatdigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.FatDigestionRate)
  return _internal_fatdigestionrate();
}
inline void NutritionData::unsafe_arena_set_allocated_fatdigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* fatdigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatdigestionrate_);
  }
  fatdigestionrate_ = fatdigestionrate;
  if (fatdigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.FatDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::release_fatdigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = fatdigestionrate_;
  fatdigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::unsafe_arena_release_fatdigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.FatDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = fatdigestionrate_;
  fatdigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::_internal_mutable_fatdigestionrate() {
  
  if (fatdigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    fatdigestionrate_ = p;
  }
  return fatdigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::mutable_fatdigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.FatDigestionRate)
  return _internal_mutable_fatdigestionrate();
}
inline void NutritionData::set_allocated_fatdigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* fatdigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatdigestionrate_);
  }
  if (fatdigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fatdigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      fatdigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fatdigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  fatdigestionrate_ = fatdigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.FatDigestionRate)
}

// .pulse.cdm.bind.ScalarMassData Protein = 5;
inline bool NutritionData::_internal_has_protein() const {
  return this != internal_default_instance() && protein_ != nullptr;
}
inline bool NutritionData::has_protein() const {
  return _internal_has_protein();
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::_internal_protein() const {
  const ::pulse::cdm::bind::ScalarMassData* p = protein_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::protein() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Protein)
  return _internal_protein();
}
inline void NutritionData::unsafe_arena_set_allocated_protein(
    ::pulse::cdm::bind::ScalarMassData* protein) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protein_);
  }
  protein_ = protein;
  if (protein) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Protein)
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::release_protein() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = protein_;
  protein_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::unsafe_arena_release_protein() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Protein)
  
  ::pulse::cdm::bind::ScalarMassData* temp = protein_;
  protein_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::_internal_mutable_protein() {
  
  if (protein_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    protein_ = p;
  }
  return protein_;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::mutable_protein() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Protein)
  return _internal_mutable_protein();
}
inline void NutritionData::set_allocated_protein(::pulse::cdm::bind::ScalarMassData* protein) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(protein_);
  }
  if (protein) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protein)->GetArena();
    if (message_arena != submessage_arena) {
      protein = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protein, submessage_arena);
    }
    
  } else {
    
  }
  protein_ = protein;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Protein)
}

// .pulse.cdm.bind.ScalarMassPerTimeData ProteinDigestionRate = 6;
inline bool NutritionData::_internal_has_proteindigestionrate() const {
  return this != internal_default_instance() && proteindigestionrate_ != nullptr;
}
inline bool NutritionData::has_proteindigestionrate() const {
  return _internal_has_proteindigestionrate();
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::_internal_proteindigestionrate() const {
  const ::pulse::cdm::bind::ScalarMassPerTimeData* p = proteindigestionrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassPerTimeData&>(
      ::pulse::cdm::bind::_ScalarMassPerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassPerTimeData& NutritionData::proteindigestionrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.ProteinDigestionRate)
  return _internal_proteindigestionrate();
}
inline void NutritionData::unsafe_arena_set_allocated_proteindigestionrate(
    ::pulse::cdm::bind::ScalarMassPerTimeData* proteindigestionrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteindigestionrate_);
  }
  proteindigestionrate_ = proteindigestionrate;
  if (proteindigestionrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.ProteinDigestionRate)
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::release_proteindigestionrate() {
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = proteindigestionrate_;
  proteindigestionrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::unsafe_arena_release_proteindigestionrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.ProteinDigestionRate)
  
  ::pulse::cdm::bind::ScalarMassPerTimeData* temp = proteindigestionrate_;
  proteindigestionrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::_internal_mutable_proteindigestionrate() {
  
  if (proteindigestionrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassPerTimeData>(GetArena());
    proteindigestionrate_ = p;
  }
  return proteindigestionrate_;
}
inline ::pulse::cdm::bind::ScalarMassPerTimeData* NutritionData::mutable_proteindigestionrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.ProteinDigestionRate)
  return _internal_mutable_proteindigestionrate();
}
inline void NutritionData::set_allocated_proteindigestionrate(::pulse::cdm::bind::ScalarMassPerTimeData* proteindigestionrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteindigestionrate_);
  }
  if (proteindigestionrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proteindigestionrate)->GetArena();
    if (message_arena != submessage_arena) {
      proteindigestionrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proteindigestionrate, submessage_arena);
    }
    
  } else {
    
  }
  proteindigestionrate_ = proteindigestionrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.ProteinDigestionRate)
}

// .pulse.cdm.bind.ScalarMassData Calcium = 7;
inline bool NutritionData::_internal_has_calcium() const {
  return this != internal_default_instance() && calcium_ != nullptr;
}
inline bool NutritionData::has_calcium() const {
  return _internal_has_calcium();
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::_internal_calcium() const {
  const ::pulse::cdm::bind::ScalarMassData* p = calcium_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::calcium() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Calcium)
  return _internal_calcium();
}
inline void NutritionData::unsafe_arena_set_allocated_calcium(
    ::pulse::cdm::bind::ScalarMassData* calcium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium_);
  }
  calcium_ = calcium;
  if (calcium) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Calcium)
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::release_calcium() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = calcium_;
  calcium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::unsafe_arena_release_calcium() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Calcium)
  
  ::pulse::cdm::bind::ScalarMassData* temp = calcium_;
  calcium_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::_internal_mutable_calcium() {
  
  if (calcium_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    calcium_ = p;
  }
  return calcium_;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::mutable_calcium() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Calcium)
  return _internal_mutable_calcium();
}
inline void NutritionData::set_allocated_calcium(::pulse::cdm::bind::ScalarMassData* calcium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium_);
  }
  if (calcium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcium)->GetArena();
    if (message_arena != submessage_arena) {
      calcium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calcium, submessage_arena);
    }
    
  } else {
    
  }
  calcium_ = calcium;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Calcium)
}

// .pulse.cdm.bind.ScalarMassData Sodium = 8;
inline bool NutritionData::_internal_has_sodium() const {
  return this != internal_default_instance() && sodium_ != nullptr;
}
inline bool NutritionData::has_sodium() const {
  return _internal_has_sodium();
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::_internal_sodium() const {
  const ::pulse::cdm::bind::ScalarMassData* p = sodium_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarMassData&>(
      ::pulse::cdm::bind::_ScalarMassData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarMassData& NutritionData::sodium() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Sodium)
  return _internal_sodium();
}
inline void NutritionData::unsafe_arena_set_allocated_sodium(
    ::pulse::cdm::bind::ScalarMassData* sodium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium_);
  }
  sodium_ = sodium;
  if (sodium) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Sodium)
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::release_sodium() {
  
  ::pulse::cdm::bind::ScalarMassData* temp = sodium_;
  sodium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::unsafe_arena_release_sodium() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Sodium)
  
  ::pulse::cdm::bind::ScalarMassData* temp = sodium_;
  sodium_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::_internal_mutable_sodium() {
  
  if (sodium_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarMassData>(GetArena());
    sodium_ = p;
  }
  return sodium_;
}
inline ::pulse::cdm::bind::ScalarMassData* NutritionData::mutable_sodium() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Sodium)
  return _internal_mutable_sodium();
}
inline void NutritionData::set_allocated_sodium(::pulse::cdm::bind::ScalarMassData* sodium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium_);
  }
  if (sodium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sodium)->GetArena();
    if (message_arena != submessage_arena) {
      sodium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sodium, submessage_arena);
    }
    
  } else {
    
  }
  sodium_ = sodium;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Sodium)
}

// .pulse.cdm.bind.ScalarVolumeData Water = 9;
inline bool NutritionData::_internal_has_water() const {
  return this != internal_default_instance() && water_ != nullptr;
}
inline bool NutritionData::has_water() const {
  return _internal_has_water();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& NutritionData::_internal_water() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = water_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& NutritionData::water() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.NutritionData.Water)
  return _internal_water();
}
inline void NutritionData::unsafe_arena_set_allocated_water(
    ::pulse::cdm::bind::ScalarVolumeData* water) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(water_);
  }
  water_ = water;
  if (water) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.NutritionData.Water)
}
inline ::pulse::cdm::bind::ScalarVolumeData* NutritionData::release_water() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = water_;
  water_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* NutritionData::unsafe_arena_release_water() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.NutritionData.Water)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = water_;
  water_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* NutritionData::_internal_mutable_water() {
  
  if (water_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    water_ = p;
  }
  return water_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* NutritionData::mutable_water() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.NutritionData.Water)
  return _internal_mutable_water();
}
inline void NutritionData::set_allocated_water(::pulse::cdm::bind::ScalarVolumeData* water) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(water_);
  }
  if (water) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(water)->GetArena();
    if (message_arena != submessage_arena) {
      water = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, water, submessage_arena);
    }
    
  } else {
    
  }
  water_ = water;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.NutritionData.Water)
}

// -------------------------------------------------------------------

// MealData

// .pulse.cdm.bind.NutritionData Nutrition = 1;
inline bool MealData::_internal_has_nutrition() const {
  return this != internal_default_instance() && nutrition_ != nullptr;
}
inline bool MealData::has_nutrition() const {
  return _internal_has_nutrition();
}
inline void MealData::clear_nutrition() {
  if (GetArena() == nullptr && nutrition_ != nullptr) {
    delete nutrition_;
  }
  nutrition_ = nullptr;
}
inline const ::pulse::cdm::bind::NutritionData& MealData::_internal_nutrition() const {
  const ::pulse::cdm::bind::NutritionData* p = nutrition_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::NutritionData&>(
      ::pulse::cdm::bind::_NutritionData_default_instance_);
}
inline const ::pulse::cdm::bind::NutritionData& MealData::nutrition() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MealData.Nutrition)
  return _internal_nutrition();
}
inline void MealData::unsafe_arena_set_allocated_nutrition(
    ::pulse::cdm::bind::NutritionData* nutrition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nutrition_);
  }
  nutrition_ = nutrition;
  if (nutrition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MealData.Nutrition)
}
inline ::pulse::cdm::bind::NutritionData* MealData::release_nutrition() {
  
  ::pulse::cdm::bind::NutritionData* temp = nutrition_;
  nutrition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::NutritionData* MealData::unsafe_arena_release_nutrition() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MealData.Nutrition)
  
  ::pulse::cdm::bind::NutritionData* temp = nutrition_;
  nutrition_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::NutritionData* MealData::_internal_mutable_nutrition() {
  
  if (nutrition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::NutritionData>(GetArena());
    nutrition_ = p;
  }
  return nutrition_;
}
inline ::pulse::cdm::bind::NutritionData* MealData::mutable_nutrition() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MealData.Nutrition)
  return _internal_mutable_nutrition();
}
inline void MealData::set_allocated_nutrition(::pulse::cdm::bind::NutritionData* nutrition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nutrition_;
  }
  if (nutrition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nutrition);
    if (message_arena != submessage_arena) {
      nutrition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nutrition, submessage_arena);
    }
    
  } else {
    
  }
  nutrition_ = nutrition;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MealData.Nutrition)
}

// .pulse.cdm.bind.ScalarTimeData ElapsedTime = 2;
inline bool MealData::_internal_has_elapsedtime() const {
  return this != internal_default_instance() && elapsedtime_ != nullptr;
}
inline bool MealData::has_elapsedtime() const {
  return _internal_has_elapsedtime();
}
inline const ::pulse::cdm::bind::ScalarTimeData& MealData::_internal_elapsedtime() const {
  const ::pulse::cdm::bind::ScalarTimeData* p = elapsedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarTimeData&>(
      ::pulse::cdm::bind::_ScalarTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarTimeData& MealData::elapsedtime() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.MealData.ElapsedTime)
  return _internal_elapsedtime();
}
inline void MealData::unsafe_arena_set_allocated_elapsedtime(
    ::pulse::cdm::bind::ScalarTimeData* elapsedtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elapsedtime_);
  }
  elapsedtime_ = elapsedtime;
  if (elapsedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.MealData.ElapsedTime)
}
inline ::pulse::cdm::bind::ScalarTimeData* MealData::release_elapsedtime() {
  
  ::pulse::cdm::bind::ScalarTimeData* temp = elapsedtime_;
  elapsedtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* MealData::unsafe_arena_release_elapsedtime() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.MealData.ElapsedTime)
  
  ::pulse::cdm::bind::ScalarTimeData* temp = elapsedtime_;
  elapsedtime_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarTimeData* MealData::_internal_mutable_elapsedtime() {
  
  if (elapsedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarTimeData>(GetArena());
    elapsedtime_ = p;
  }
  return elapsedtime_;
}
inline ::pulse::cdm::bind::ScalarTimeData* MealData::mutable_elapsedtime() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.MealData.ElapsedTime)
  return _internal_mutable_elapsedtime();
}
inline void MealData::set_allocated_elapsedtime(::pulse::cdm::bind::ScalarTimeData* elapsedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(elapsedtime_);
  }
  if (elapsedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elapsedtime)->GetArena();
    if (message_arena != submessage_arena) {
      elapsedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elapsedtime, submessage_arena);
    }
    
  } else {
    
  }
  elapsedtime_ = elapsedtime;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.MealData.ElapsedTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fPatientNutrition_2eproto
