// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/ElectroCardioGram.proto

#include "pulse/cdm/bind/ElectroCardioGram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class ElectroCardioGramDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectroCardioGramData> _instance;
} _ElectroCardioGramData_default_instance_;
class ElectroCardioGramWaveformDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectroCardioGramWaveformData> _instance;
} _ElectroCardioGramWaveformData_default_instance_;
class ElectroCardioGramWaveformListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectroCardioGramWaveformListData> _instance;
} _ElectroCardioGramWaveformListData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectroCardioGramData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectroCardioGramData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto}, {
      &scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectroCardioGramWaveformData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectroCardioGramWaveformData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto}, {
      &scc_info_FunctionElectricPotentialVsTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectroCardioGramWaveformListData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectroCardioGramWaveformListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto}, {
      &scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead1electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead2electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead3electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead4electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead5electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead6electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead7electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead8electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead9electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead10electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead11electricpotential_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramData, lead12electricpotential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, lead_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, rhythm_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, data_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, timestep_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformData, activeindicies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectroCardioGramWaveformListData, waveform_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::ElectroCardioGramData)},
  { 17, -1, sizeof(::pulse::cdm::bind::ElectroCardioGramWaveformData)},
  { 27, -1, sizeof(::pulse::cdm::bind::ElectroCardioGramWaveformListData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectroCardioGramData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectroCardioGramWaveformData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectroCardioGramWaveformListData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pulse/cdm/bind/ElectroCardioGram.proto"
  "\022\016pulse.cdm.bind\032\037pulse/cdm/bind/Propert"
  "ies.proto\032\037pulse/cdm/bind/Physiology.pro"
  "to\"\266\007\n\025ElectroCardioGramData\022K\n\026Lead1Ele"
  "ctricPotential\030\001 \001(\0132+.pulse.cdm.bind.Sc"
  "alarElectricPotentialData\022K\n\026Lead2Electr"
  "icPotential\030\002 \001(\0132+.pulse.cdm.bind.Scala"
  "rElectricPotentialData\022K\n\026Lead3ElectricP"
  "otential\030\003 \001(\0132+.pulse.cdm.bind.ScalarEl"
  "ectricPotentialData\022K\n\026Lead4ElectricPote"
  "ntial\030\004 \001(\0132+.pulse.cdm.bind.ScalarElect"
  "ricPotentialData\022K\n\026Lead5ElectricPotenti"
  "al\030\005 \001(\0132+.pulse.cdm.bind.ScalarElectric"
  "PotentialData\022K\n\026Lead6ElectricPotential\030"
  "\006 \001(\0132+.pulse.cdm.bind.ScalarElectricPot"
  "entialData\022K\n\026Lead7ElectricPotential\030\007 \001"
  "(\0132+.pulse.cdm.bind.ScalarElectricPotent"
  "ialData\022K\n\026Lead8ElectricPotential\030\010 \001(\0132"
  "+.pulse.cdm.bind.ScalarElectricPotential"
  "Data\022K\n\026Lead9ElectricPotential\030\t \001(\0132+.p"
  "ulse.cdm.bind.ScalarElectricPotentialDat"
  "a\022L\n\027Lead10ElectricPotential\030\n \001(\0132+.pul"
  "se.cdm.bind.ScalarElectricPotentialData\022"
  "L\n\027Lead11ElectricPotential\030\013 \001(\0132+.pulse"
  ".cdm.bind.ScalarElectricPotentialData\022L\n"
  "\027Lead12ElectricPotential\030\014 \001(\0132+.pulse.c"
  "dm.bind.ScalarElectricPotentialData\"\314\003\n\035"
  "ElectroCardioGramWaveformData\022I\n\004Lead\030\001 "
  "\001(\0162;.pulse.cdm.bind.ElectroCardioGramWa"
  "veformData.eWaveformLead\022,\n\006Rhythm\030\002 \001(\016"
  "2\034.pulse.cdm.bind.eHeartRhythm\022A\n\004Data\030\003"
  " \001(\01323.pulse.cdm.bind.FunctionElectricPo"
  "tentialVsTimeData\0220\n\010TimeStep\030\004 \001(\0132\036.pu"
  "lse.cdm.bind.ScalarTimeData\022\026\n\016ActiveInd"
  "icies\030\005 \003(\005\"\244\001\n\reWaveformLead\022\014\n\010NullLea"
  "d\020\000\022\t\n\005Lead1\020\001\022\t\n\005Lead2\020\002\022\t\n\005Lead3\020\003\022\t\n\005"
  "Lead4\020\004\022\t\n\005Lead5\020\005\022\t\n\005Lead6\020\006\022\t\n\005Lead7\020\007"
  "\022\t\n\005Lead8\020\010\022\t\n\005Lead9\020\t\022\n\n\006Lead10\020\n\022\n\n\006Le"
  "ad11\020\013\022\n\n\006Lead12\020\014\"d\n!ElectroCardioGramW"
  "aveformListData\022\?\n\010Waveform\030\001 \003(\0132-.puls"
  "e.cdm.bind.ElectroCardioGramWaveformData"
  "B/\n\032com.kitware.pulse.cdm.bindH\001\252\002\016pulse"
  ".cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fPhysiology_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_sccs[3] = {
  &scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,
  &scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,
  &scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto, "pulse/cdm/bind/ElectroCardioGram.proto", 1697,
  &descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto, 3, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElectroCardioGramWaveformData_eWaveformLead_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto[0];
}
bool ElectroCardioGramWaveformData_eWaveformLead_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::NullLead;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead1;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead2;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead3;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead4;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead5;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead6;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead7;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead8;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead9;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead10;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead11;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::Lead12;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::eWaveformLead_MIN;
constexpr ElectroCardioGramWaveformData_eWaveformLead ElectroCardioGramWaveformData::eWaveformLead_MAX;
constexpr int ElectroCardioGramWaveformData::eWaveformLead_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ElectroCardioGramData::_Internal {
 public:
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead1electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead2electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead3electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead4electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead5electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead6electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead7electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead8electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead9electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead10electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead11electricpotential(const ElectroCardioGramData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& lead12electricpotential(const ElectroCardioGramData* msg);
};

const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead1electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead1electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead2electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead2electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead3electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead3electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead4electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead4electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead5electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead5electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead6electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead6electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead7electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead7electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead8electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead8electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead9electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead9electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead10electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead10electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead11electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead11electricpotential_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectroCardioGramData::_Internal::lead12electricpotential(const ElectroCardioGramData* msg) {
  return *msg->lead12electricpotential_;
}
void ElectroCardioGramData::clear_lead1electricpotential() {
  if (GetArena() == nullptr && lead1electricpotential_ != nullptr) {
    delete lead1electricpotential_;
  }
  lead1electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead2electricpotential() {
  if (GetArena() == nullptr && lead2electricpotential_ != nullptr) {
    delete lead2electricpotential_;
  }
  lead2electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead3electricpotential() {
  if (GetArena() == nullptr && lead3electricpotential_ != nullptr) {
    delete lead3electricpotential_;
  }
  lead3electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead4electricpotential() {
  if (GetArena() == nullptr && lead4electricpotential_ != nullptr) {
    delete lead4electricpotential_;
  }
  lead4electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead5electricpotential() {
  if (GetArena() == nullptr && lead5electricpotential_ != nullptr) {
    delete lead5electricpotential_;
  }
  lead5electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead6electricpotential() {
  if (GetArena() == nullptr && lead6electricpotential_ != nullptr) {
    delete lead6electricpotential_;
  }
  lead6electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead7electricpotential() {
  if (GetArena() == nullptr && lead7electricpotential_ != nullptr) {
    delete lead7electricpotential_;
  }
  lead7electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead8electricpotential() {
  if (GetArena() == nullptr && lead8electricpotential_ != nullptr) {
    delete lead8electricpotential_;
  }
  lead8electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead9electricpotential() {
  if (GetArena() == nullptr && lead9electricpotential_ != nullptr) {
    delete lead9electricpotential_;
  }
  lead9electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead10electricpotential() {
  if (GetArena() == nullptr && lead10electricpotential_ != nullptr) {
    delete lead10electricpotential_;
  }
  lead10electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead11electricpotential() {
  if (GetArena() == nullptr && lead11electricpotential_ != nullptr) {
    delete lead11electricpotential_;
  }
  lead11electricpotential_ = nullptr;
}
void ElectroCardioGramData::clear_lead12electricpotential() {
  if (GetArena() == nullptr && lead12electricpotential_ != nullptr) {
    delete lead12electricpotential_;
  }
  lead12electricpotential_ = nullptr;
}
ElectroCardioGramData::ElectroCardioGramData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectroCardioGramData)
}
ElectroCardioGramData::ElectroCardioGramData(const ElectroCardioGramData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lead1electricpotential()) {
    lead1electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead1electricpotential_);
  } else {
    lead1electricpotential_ = nullptr;
  }
  if (from._internal_has_lead2electricpotential()) {
    lead2electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead2electricpotential_);
  } else {
    lead2electricpotential_ = nullptr;
  }
  if (from._internal_has_lead3electricpotential()) {
    lead3electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead3electricpotential_);
  } else {
    lead3electricpotential_ = nullptr;
  }
  if (from._internal_has_lead4electricpotential()) {
    lead4electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead4electricpotential_);
  } else {
    lead4electricpotential_ = nullptr;
  }
  if (from._internal_has_lead5electricpotential()) {
    lead5electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead5electricpotential_);
  } else {
    lead5electricpotential_ = nullptr;
  }
  if (from._internal_has_lead6electricpotential()) {
    lead6electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead6electricpotential_);
  } else {
    lead6electricpotential_ = nullptr;
  }
  if (from._internal_has_lead7electricpotential()) {
    lead7electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead7electricpotential_);
  } else {
    lead7electricpotential_ = nullptr;
  }
  if (from._internal_has_lead8electricpotential()) {
    lead8electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead8electricpotential_);
  } else {
    lead8electricpotential_ = nullptr;
  }
  if (from._internal_has_lead9electricpotential()) {
    lead9electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead9electricpotential_);
  } else {
    lead9electricpotential_ = nullptr;
  }
  if (from._internal_has_lead10electricpotential()) {
    lead10electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead10electricpotential_);
  } else {
    lead10electricpotential_ = nullptr;
  }
  if (from._internal_has_lead11electricpotential()) {
    lead11electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead11electricpotential_);
  } else {
    lead11electricpotential_ = nullptr;
  }
  if (from._internal_has_lead12electricpotential()) {
    lead12electricpotential_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.lead12electricpotential_);
  } else {
    lead12electricpotential_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectroCardioGramData)
}

void ElectroCardioGramData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lead1electricpotential_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lead12electricpotential_) -
      reinterpret_cast<char*>(&lead1electricpotential_)) + sizeof(lead12electricpotential_));
}

ElectroCardioGramData::~ElectroCardioGramData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectroCardioGramData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectroCardioGramData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lead1electricpotential_;
  if (this != internal_default_instance()) delete lead2electricpotential_;
  if (this != internal_default_instance()) delete lead3electricpotential_;
  if (this != internal_default_instance()) delete lead4electricpotential_;
  if (this != internal_default_instance()) delete lead5electricpotential_;
  if (this != internal_default_instance()) delete lead6electricpotential_;
  if (this != internal_default_instance()) delete lead7electricpotential_;
  if (this != internal_default_instance()) delete lead8electricpotential_;
  if (this != internal_default_instance()) delete lead9electricpotential_;
  if (this != internal_default_instance()) delete lead10electricpotential_;
  if (this != internal_default_instance()) delete lead11electricpotential_;
  if (this != internal_default_instance()) delete lead12electricpotential_;
}

void ElectroCardioGramData::ArenaDtor(void* object) {
  ElectroCardioGramData* _this = reinterpret_cast< ElectroCardioGramData* >(object);
  (void)_this;
}
void ElectroCardioGramData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectroCardioGramData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectroCardioGramData& ElectroCardioGramData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectroCardioGramData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
  return *internal_default_instance();
}


void ElectroCardioGramData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lead1electricpotential_ != nullptr) {
    delete lead1electricpotential_;
  }
  lead1electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead2electricpotential_ != nullptr) {
    delete lead2electricpotential_;
  }
  lead2electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead3electricpotential_ != nullptr) {
    delete lead3electricpotential_;
  }
  lead3electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead4electricpotential_ != nullptr) {
    delete lead4electricpotential_;
  }
  lead4electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead5electricpotential_ != nullptr) {
    delete lead5electricpotential_;
  }
  lead5electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead6electricpotential_ != nullptr) {
    delete lead6electricpotential_;
  }
  lead6electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead7electricpotential_ != nullptr) {
    delete lead7electricpotential_;
  }
  lead7electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead8electricpotential_ != nullptr) {
    delete lead8electricpotential_;
  }
  lead8electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead9electricpotential_ != nullptr) {
    delete lead9electricpotential_;
  }
  lead9electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead10electricpotential_ != nullptr) {
    delete lead10electricpotential_;
  }
  lead10electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead11electricpotential_ != nullptr) {
    delete lead11electricpotential_;
  }
  lead11electricpotential_ = nullptr;
  if (GetArena() == nullptr && lead12electricpotential_ != nullptr) {
    delete lead12electricpotential_;
  }
  lead12electricpotential_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectroCardioGramData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead1ElectricPotential = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead1electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead2ElectricPotential = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead2electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead3ElectricPotential = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead3electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead4ElectricPotential = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead4electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead5ElectricPotential = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead5electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead6ElectricPotential = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead6electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead7ElectricPotential = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead7electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead8ElectricPotential = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead8electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead9ElectricPotential = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead9electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead10ElectricPotential = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead10electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead11ElectricPotential = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead11electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Lead12ElectricPotential = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_lead12electricpotential(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectroCardioGramData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectroCardioGramData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead1ElectricPotential = 1;
  if (this->has_lead1electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lead1electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead2ElectricPotential = 2;
  if (this->has_lead2electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lead2electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead3ElectricPotential = 3;
  if (this->has_lead3electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lead3electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead4ElectricPotential = 4;
  if (this->has_lead4electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lead4electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead5ElectricPotential = 5;
  if (this->has_lead5electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lead5electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead6ElectricPotential = 6;
  if (this->has_lead6electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::lead6electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead7ElectricPotential = 7;
  if (this->has_lead7electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lead7electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead8ElectricPotential = 8;
  if (this->has_lead8electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::lead8electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead9ElectricPotential = 9;
  if (this->has_lead9electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lead9electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead10ElectricPotential = 10;
  if (this->has_lead10electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::lead10electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead11ElectricPotential = 11;
  if (this->has_lead11electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lead11electricpotential(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead12ElectricPotential = 12;
  if (this->has_lead12electricpotential()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::lead12electricpotential(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectroCardioGramData)
  return target;
}

size_t ElectroCardioGramData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectroCardioGramData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead1ElectricPotential = 1;
  if (this->has_lead1electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead1electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead2ElectricPotential = 2;
  if (this->has_lead2electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead2electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead3ElectricPotential = 3;
  if (this->has_lead3electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead3electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead4ElectricPotential = 4;
  if (this->has_lead4electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead4electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead5ElectricPotential = 5;
  if (this->has_lead5electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead5electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead6ElectricPotential = 6;
  if (this->has_lead6electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead6electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead7ElectricPotential = 7;
  if (this->has_lead7electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead7electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead8ElectricPotential = 8;
  if (this->has_lead8electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead8electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead9ElectricPotential = 9;
  if (this->has_lead9electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead9electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead10ElectricPotential = 10;
  if (this->has_lead10electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead10electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead11ElectricPotential = 11;
  if (this->has_lead11electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead11electricpotential_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Lead12ElectricPotential = 12;
  if (this->has_lead12electricpotential()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lead12electricpotential_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectroCardioGramData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectroCardioGramData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectroCardioGramData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectroCardioGramData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectroCardioGramData)
    MergeFrom(*source);
  }
}

void ElectroCardioGramData::MergeFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectroCardioGramData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lead1electricpotential()) {
    _internal_mutable_lead1electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead1electricpotential());
  }
  if (from.has_lead2electricpotential()) {
    _internal_mutable_lead2electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead2electricpotential());
  }
  if (from.has_lead3electricpotential()) {
    _internal_mutable_lead3electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead3electricpotential());
  }
  if (from.has_lead4electricpotential()) {
    _internal_mutable_lead4electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead4electricpotential());
  }
  if (from.has_lead5electricpotential()) {
    _internal_mutable_lead5electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead5electricpotential());
  }
  if (from.has_lead6electricpotential()) {
    _internal_mutable_lead6electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead6electricpotential());
  }
  if (from.has_lead7electricpotential()) {
    _internal_mutable_lead7electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead7electricpotential());
  }
  if (from.has_lead8electricpotential()) {
    _internal_mutable_lead8electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead8electricpotential());
  }
  if (from.has_lead9electricpotential()) {
    _internal_mutable_lead9electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead9electricpotential());
  }
  if (from.has_lead10electricpotential()) {
    _internal_mutable_lead10electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead10electricpotential());
  }
  if (from.has_lead11electricpotential()) {
    _internal_mutable_lead11electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead11electricpotential());
  }
  if (from.has_lead12electricpotential()) {
    _internal_mutable_lead12electricpotential()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_lead12electricpotential());
  }
}

void ElectroCardioGramData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectroCardioGramData::CopyFrom(const ElectroCardioGramData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectroCardioGramData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectroCardioGramData::IsInitialized() const {
  return true;
}

void ElectroCardioGramData::InternalSwap(ElectroCardioGramData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectroCardioGramData, lead12electricpotential_)
      + sizeof(ElectroCardioGramData::lead12electricpotential_)
      - PROTOBUF_FIELD_OFFSET(ElectroCardioGramData, lead1electricpotential_)>(
          reinterpret_cast<char*>(&lead1electricpotential_),
          reinterpret_cast<char*>(&other->lead1electricpotential_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectroCardioGramData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectroCardioGramWaveformData::_Internal {
 public:
  static const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData& data(const ElectroCardioGramWaveformData* msg);
  static const ::pulse::cdm::bind::ScalarTimeData& timestep(const ElectroCardioGramWaveformData* msg);
};

const ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData&
ElectroCardioGramWaveformData::_Internal::data(const ElectroCardioGramWaveformData* msg) {
  return *msg->data_;
}
const ::pulse::cdm::bind::ScalarTimeData&
ElectroCardioGramWaveformData::_Internal::timestep(const ElectroCardioGramWaveformData* msg) {
  return *msg->timestep_;
}
void ElectroCardioGramWaveformData::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void ElectroCardioGramWaveformData::clear_timestep() {
  if (GetArena() == nullptr && timestep_ != nullptr) {
    delete timestep_;
  }
  timestep_ = nullptr;
}
ElectroCardioGramWaveformData::ElectroCardioGramWaveformData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activeindicies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectroCardioGramWaveformData)
}
ElectroCardioGramWaveformData::ElectroCardioGramWaveformData(const ElectroCardioGramWaveformData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      activeindicies_(from.activeindicies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::pulse::cdm::bind::FunctionElectricPotentialVsTimeData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_timestep()) {
    timestep_ = new ::pulse::cdm::bind::ScalarTimeData(*from.timestep_);
  } else {
    timestep_ = nullptr;
  }
  ::memcpy(&lead_, &from.lead_,
    static_cast<size_t>(reinterpret_cast<char*>(&rhythm_) -
    reinterpret_cast<char*>(&lead_)) + sizeof(rhythm_));
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectroCardioGramWaveformData)
}

void ElectroCardioGramWaveformData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rhythm_) -
      reinterpret_cast<char*>(&data_)) + sizeof(rhythm_));
}

ElectroCardioGramWaveformData::~ElectroCardioGramWaveformData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectroCardioGramWaveformData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectroCardioGramWaveformData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete timestep_;
}

void ElectroCardioGramWaveformData::ArenaDtor(void* object) {
  ElectroCardioGramWaveformData* _this = reinterpret_cast< ElectroCardioGramWaveformData* >(object);
  (void)_this;
}
void ElectroCardioGramWaveformData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectroCardioGramWaveformData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectroCardioGramWaveformData& ElectroCardioGramWaveformData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectroCardioGramWaveformData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
  return *internal_default_instance();
}


void ElectroCardioGramWaveformData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activeindicies_.Clear();
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArena() == nullptr && timestep_ != nullptr) {
    delete timestep_;
  }
  timestep_ = nullptr;
  ::memset(&lead_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rhythm_) -
      reinterpret_cast<char*>(&lead_)) + sizeof(rhythm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectroCardioGramWaveformData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ElectroCardioGramWaveformData.eWaveformLead Lead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lead(static_cast<::pulse::cdm::bind::ElectroCardioGramWaveformData_eWaveformLead>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.eHeartRhythm Rhythm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rhythm(static_cast<::pulse::cdm::bind::eHeartRhythm>(val));
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.FunctionElectricPotentialVsTimeData Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTimeData TimeStep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ActiveIndicies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_activeindicies(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_activeindicies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectroCardioGramWaveformData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ElectroCardioGramWaveformData.eWaveformLead Lead = 1;
  if (this->lead() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lead(), target);
  }

  // .pulse.cdm.bind.eHeartRhythm Rhythm = 2;
  if (this->rhythm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rhythm(), target);
  }

  // .pulse.cdm.bind.FunctionElectricPotentialVsTimeData Data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTimeData TimeStep = 4;
  if (this->has_timestep()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestep(this), target, stream);
  }

  // repeated int32 ActiveIndicies = 5;
  {
    int byte_size = _activeindicies_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_activeindicies(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectroCardioGramWaveformData)
  return target;
}

size_t ElectroCardioGramWaveformData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ActiveIndicies = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->activeindicies_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _activeindicies_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pulse.cdm.bind.FunctionElectricPotentialVsTimeData Data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .pulse.cdm.bind.ScalarTimeData TimeStep = 4;
  if (this->has_timestep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestep_);
  }

  // .pulse.cdm.bind.ElectroCardioGramWaveformData.eWaveformLead Lead = 1;
  if (this->lead() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lead());
  }

  // .pulse.cdm.bind.eHeartRhythm Rhythm = 2;
  if (this->rhythm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rhythm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectroCardioGramWaveformData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectroCardioGramWaveformData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectroCardioGramWaveformData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectroCardioGramWaveformData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectroCardioGramWaveformData)
    MergeFrom(*source);
  }
}

void ElectroCardioGramWaveformData::MergeFrom(const ElectroCardioGramWaveformData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activeindicies_.MergeFrom(from.activeindicies_);
  if (from.has_data()) {
    _internal_mutable_data()->::pulse::cdm::bind::FunctionElectricPotentialVsTimeData::MergeFrom(from._internal_data());
  }
  if (from.has_timestep()) {
    _internal_mutable_timestep()->::pulse::cdm::bind::ScalarTimeData::MergeFrom(from._internal_timestep());
  }
  if (from.lead() != 0) {
    _internal_set_lead(from._internal_lead());
  }
  if (from.rhythm() != 0) {
    _internal_set_rhythm(from._internal_rhythm());
  }
}

void ElectroCardioGramWaveformData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectroCardioGramWaveformData::CopyFrom(const ElectroCardioGramWaveformData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectroCardioGramWaveformData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectroCardioGramWaveformData::IsInitialized() const {
  return true;
}

void ElectroCardioGramWaveformData::InternalSwap(ElectroCardioGramWaveformData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  activeindicies_.InternalSwap(&other->activeindicies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectroCardioGramWaveformData, rhythm_)
      + sizeof(ElectroCardioGramWaveformData::rhythm_)
      - PROTOBUF_FIELD_OFFSET(ElectroCardioGramWaveformData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectroCardioGramWaveformData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectroCardioGramWaveformListData::_Internal {
 public:
};

ElectroCardioGramWaveformListData::ElectroCardioGramWaveformListData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waveform_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectroCardioGramWaveformListData)
}
ElectroCardioGramWaveformListData::ElectroCardioGramWaveformListData(const ElectroCardioGramWaveformListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waveform_(from.waveform_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectroCardioGramWaveformListData)
}

void ElectroCardioGramWaveformListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
}

ElectroCardioGramWaveformListData::~ElectroCardioGramWaveformListData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectroCardioGramWaveformListData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ElectroCardioGramWaveformListData::ArenaDtor(void* object) {
  ElectroCardioGramWaveformListData* _this = reinterpret_cast< ElectroCardioGramWaveformListData* >(object);
  (void)_this;
}
void ElectroCardioGramWaveformListData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectroCardioGramWaveformListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectroCardioGramWaveformListData& ElectroCardioGramWaveformListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectroCardioGramWaveformListData_pulse_2fcdm_2fbind_2fElectroCardioGram_2eproto.base);
  return *internal_default_instance();
}


void ElectroCardioGramWaveformListData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waveform_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectroCardioGramWaveformListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.ElectroCardioGramWaveformData Waveform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waveform(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectroCardioGramWaveformListData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ElectroCardioGramWaveformData Waveform = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waveform_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_waveform(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  return target;
}

size_t ElectroCardioGramWaveformListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ElectroCardioGramWaveformData Waveform = 1;
  total_size += 1UL * this->_internal_waveform_size();
  for (const auto& msg : this->waveform_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectroCardioGramWaveformListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectroCardioGramWaveformListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectroCardioGramWaveformListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectroCardioGramWaveformListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectroCardioGramWaveformListData)
    MergeFrom(*source);
  }
}

void ElectroCardioGramWaveformListData::MergeFrom(const ElectroCardioGramWaveformListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waveform_.MergeFrom(from.waveform_);
}

void ElectroCardioGramWaveformListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectroCardioGramWaveformListData::CopyFrom(const ElectroCardioGramWaveformListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectroCardioGramWaveformListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectroCardioGramWaveformListData::IsInitialized() const {
  return true;
}

void ElectroCardioGramWaveformListData::InternalSwap(ElectroCardioGramWaveformListData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waveform_.InternalSwap(&other->waveform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectroCardioGramWaveformListData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectroCardioGramData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectroCardioGramData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectroCardioGramData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectroCardioGramWaveformData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectroCardioGramWaveformData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectroCardioGramWaveformData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectroCardioGramWaveformListData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectroCardioGramWaveformListData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectroCardioGramWaveformListData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
