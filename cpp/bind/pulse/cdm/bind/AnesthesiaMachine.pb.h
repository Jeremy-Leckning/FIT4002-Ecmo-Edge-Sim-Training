// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/AnesthesiaMachine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pulse/cdm/bind/Enums.pb.h"
#include "pulse/cdm/bind/Properties.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnesthesiaMachineChamberData;
class AnesthesiaMachineChamberDataDefaultTypeInternal;
extern AnesthesiaMachineChamberDataDefaultTypeInternal _AnesthesiaMachineChamberData_default_instance_;
class AnesthesiaMachineData;
class AnesthesiaMachineDataDefaultTypeInternal;
extern AnesthesiaMachineDataDefaultTypeInternal _AnesthesiaMachineData_default_instance_;
class AnesthesiaMachineOxygenBottleData;
class AnesthesiaMachineOxygenBottleDataDefaultTypeInternal;
extern AnesthesiaMachineOxygenBottleDataDefaultTypeInternal _AnesthesiaMachineOxygenBottleData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> ::pulse::cdm::bind::AnesthesiaMachineChamberData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineChamberData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineData>(Arena*);
template<> ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* Arena::CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pulse {
namespace cdm {
namespace bind {

enum AnesthesiaMachineData_eConnection : int {
  AnesthesiaMachineData_eConnection_NullConnection = 0,
  AnesthesiaMachineData_eConnection_Off = 1,
  AnesthesiaMachineData_eConnection_Mask = 2,
  AnesthesiaMachineData_eConnection_Tube = 3,
  AnesthesiaMachineData_eConnection_AnesthesiaMachineData_eConnection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnesthesiaMachineData_eConnection_AnesthesiaMachineData_eConnection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnesthesiaMachineData_eConnection_IsValid(int value);
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData_eConnection_eConnection_MIN = AnesthesiaMachineData_eConnection_NullConnection;
constexpr AnesthesiaMachineData_eConnection AnesthesiaMachineData_eConnection_eConnection_MAX = AnesthesiaMachineData_eConnection_Tube;
constexpr int AnesthesiaMachineData_eConnection_eConnection_ARRAYSIZE = AnesthesiaMachineData_eConnection_eConnection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_eConnection_descriptor();
template<typename T>
inline const std::string& AnesthesiaMachineData_eConnection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnesthesiaMachineData_eConnection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnesthesiaMachineData_eConnection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnesthesiaMachineData_eConnection_descriptor(), enum_t_value);
}
inline bool AnesthesiaMachineData_eConnection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnesthesiaMachineData_eConnection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnesthesiaMachineData_eConnection>(
    AnesthesiaMachineData_eConnection_descriptor(), name, value);
}
enum AnesthesiaMachineData_eOxygenSource : int {
  AnesthesiaMachineData_eOxygenSource_NullSource = 0,
  AnesthesiaMachineData_eOxygenSource_NoSource = 1,
  AnesthesiaMachineData_eOxygenSource_Wall = 2,
  AnesthesiaMachineData_eOxygenSource_BottleOne = 3,
  AnesthesiaMachineData_eOxygenSource_BottleTwo = 4,
  AnesthesiaMachineData_eOxygenSource_AnesthesiaMachineData_eOxygenSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnesthesiaMachineData_eOxygenSource_AnesthesiaMachineData_eOxygenSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnesthesiaMachineData_eOxygenSource_IsValid(int value);
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData_eOxygenSource_eOxygenSource_MIN = AnesthesiaMachineData_eOxygenSource_NullSource;
constexpr AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData_eOxygenSource_eOxygenSource_MAX = AnesthesiaMachineData_eOxygenSource_BottleTwo;
constexpr int AnesthesiaMachineData_eOxygenSource_eOxygenSource_ARRAYSIZE = AnesthesiaMachineData_eOxygenSource_eOxygenSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_eOxygenSource_descriptor();
template<typename T>
inline const std::string& AnesthesiaMachineData_eOxygenSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnesthesiaMachineData_eOxygenSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnesthesiaMachineData_eOxygenSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnesthesiaMachineData_eOxygenSource_descriptor(), enum_t_value);
}
inline bool AnesthesiaMachineData_eOxygenSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnesthesiaMachineData_eOxygenSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnesthesiaMachineData_eOxygenSource>(
    AnesthesiaMachineData_eOxygenSource_descriptor(), name, value);
}
enum AnesthesiaMachineData_ePrimaryGas : int {
  AnesthesiaMachineData_ePrimaryGas_NullGas = 0,
  AnesthesiaMachineData_ePrimaryGas_NoGas = 1,
  AnesthesiaMachineData_ePrimaryGas_Air = 2,
  AnesthesiaMachineData_ePrimaryGas_Nitrogen = 3,
  AnesthesiaMachineData_ePrimaryGas_AnesthesiaMachineData_ePrimaryGas_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnesthesiaMachineData_ePrimaryGas_AnesthesiaMachineData_ePrimaryGas_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnesthesiaMachineData_ePrimaryGas_IsValid(int value);
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_MIN = AnesthesiaMachineData_ePrimaryGas_NullGas;
constexpr AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_MAX = AnesthesiaMachineData_ePrimaryGas_Nitrogen;
constexpr int AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_ARRAYSIZE = AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnesthesiaMachineData_ePrimaryGas_descriptor();
template<typename T>
inline const std::string& AnesthesiaMachineData_ePrimaryGas_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnesthesiaMachineData_ePrimaryGas>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnesthesiaMachineData_ePrimaryGas_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnesthesiaMachineData_ePrimaryGas_descriptor(), enum_t_value);
}
inline bool AnesthesiaMachineData_ePrimaryGas_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnesthesiaMachineData_ePrimaryGas* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnesthesiaMachineData_ePrimaryGas>(
    AnesthesiaMachineData_ePrimaryGas_descriptor(), name, value);
}
// ===================================================================

class AnesthesiaMachineChamberData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineChamberData) */ {
 public:
  inline AnesthesiaMachineChamberData() : AnesthesiaMachineChamberData(nullptr) {}
  virtual ~AnesthesiaMachineChamberData();

  AnesthesiaMachineChamberData(const AnesthesiaMachineChamberData& from);
  AnesthesiaMachineChamberData(AnesthesiaMachineChamberData&& from) noexcept
    : AnesthesiaMachineChamberData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineChamberData& operator=(const AnesthesiaMachineChamberData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineChamberData& operator=(AnesthesiaMachineChamberData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineChamberData& default_instance();

  static inline const AnesthesiaMachineChamberData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineChamberData*>(
               &_AnesthesiaMachineChamberData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnesthesiaMachineChamberData& a, AnesthesiaMachineChamberData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineChamberData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineChamberData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineChamberData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineChamberData>(nullptr);
  }

  AnesthesiaMachineChamberData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineChamberData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineChamberData& from);
  void MergeFrom(const AnesthesiaMachineChamberData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineChamberData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineChamberData";
  }
  protected:
  explicit AnesthesiaMachineChamberData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubstanceFieldNumber = 3,
    kSubstanceFractionFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string Substance = 3;
  void clear_substance();
  const std::string& substance() const;
  void set_substance(const std::string& value);
  void set_substance(std::string&& value);
  void set_substance(const char* value);
  void set_substance(const char* value, size_t size);
  std::string* mutable_substance();
  std::string* release_substance();
  void set_allocated_substance(std::string* substance);
  private:
  const std::string& _internal_substance() const;
  void _internal_set_substance(const std::string& value);
  std::string* _internal_mutable_substance();
  public:

  // .pulse.cdm.bind.Scalar0To1Data SubstanceFraction = 2;
  bool has_substancefraction() const;
  private:
  bool _internal_has_substancefraction() const;
  public:
  void clear_substancefraction();
  const ::pulse::cdm::bind::Scalar0To1Data& substancefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_substancefraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_substancefraction();
  void set_allocated_substancefraction(::pulse::cdm::bind::Scalar0To1Data* substancefraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_substancefraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_substancefraction();
  public:
  void unsafe_arena_set_allocated_substancefraction(
      ::pulse::cdm::bind::Scalar0To1Data* substancefraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_substancefraction();

  // .pulse.cdm.bind.eSwitch State = 1;
  void clear_state();
  ::pulse::cdm::bind::eSwitch state() const;
  void set_state(::pulse::cdm::bind::eSwitch value);
  private:
  ::pulse::cdm::bind::eSwitch _internal_state() const;
  void _internal_set_state(::pulse::cdm::bind::eSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineChamberData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substance_;
  ::pulse::cdm::bind::Scalar0To1Data* substancefraction_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineOxygenBottleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData) */ {
 public:
  inline AnesthesiaMachineOxygenBottleData() : AnesthesiaMachineOxygenBottleData(nullptr) {}
  virtual ~AnesthesiaMachineOxygenBottleData();

  AnesthesiaMachineOxygenBottleData(const AnesthesiaMachineOxygenBottleData& from);
  AnesthesiaMachineOxygenBottleData(AnesthesiaMachineOxygenBottleData&& from) noexcept
    : AnesthesiaMachineOxygenBottleData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineOxygenBottleData& operator=(const AnesthesiaMachineOxygenBottleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineOxygenBottleData& operator=(AnesthesiaMachineOxygenBottleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineOxygenBottleData& default_instance();

  static inline const AnesthesiaMachineOxygenBottleData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineOxygenBottleData*>(
               &_AnesthesiaMachineOxygenBottleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnesthesiaMachineOxygenBottleData& a, AnesthesiaMachineOxygenBottleData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineOxygenBottleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineOxygenBottleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineOxygenBottleData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenBottleData>(nullptr);
  }

  AnesthesiaMachineOxygenBottleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineOxygenBottleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineOxygenBottleData& from);
  void MergeFrom(const AnesthesiaMachineOxygenBottleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineOxygenBottleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineOxygenBottleData";
  }
  protected:
  explicit AnesthesiaMachineOxygenBottleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeFieldNumber = 1,
  };
  // .pulse.cdm.bind.ScalarVolumeData Volume = 1;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::pulse::cdm::bind::ScalarVolumeData& volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* release_volume();
  ::pulse::cdm::bind::ScalarVolumeData* mutable_volume();
  void set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume);
  private:
  const ::pulse::cdm::bind::ScalarVolumeData& _internal_volume() const;
  ::pulse::cdm::bind::ScalarVolumeData* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::pulse::cdm::bind::ScalarVolumeData* volume);
  ::pulse::cdm::bind::ScalarVolumeData* unsafe_arena_release_volume();

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarVolumeData* volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
};
// -------------------------------------------------------------------

class AnesthesiaMachineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pulse.cdm.bind.AnesthesiaMachineData) */ {
 public:
  inline AnesthesiaMachineData() : AnesthesiaMachineData(nullptr) {}
  virtual ~AnesthesiaMachineData();

  AnesthesiaMachineData(const AnesthesiaMachineData& from);
  AnesthesiaMachineData(AnesthesiaMachineData&& from) noexcept
    : AnesthesiaMachineData() {
    *this = ::std::move(from);
  }

  inline AnesthesiaMachineData& operator=(const AnesthesiaMachineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnesthesiaMachineData& operator=(AnesthesiaMachineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnesthesiaMachineData& default_instance();

  static inline const AnesthesiaMachineData* internal_default_instance() {
    return reinterpret_cast<const AnesthesiaMachineData*>(
               &_AnesthesiaMachineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnesthesiaMachineData& a, AnesthesiaMachineData& b) {
    a.Swap(&b);
  }
  inline void Swap(AnesthesiaMachineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnesthesiaMachineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnesthesiaMachineData* New() const final {
    return CreateMaybeMessage<AnesthesiaMachineData>(nullptr);
  }

  AnesthesiaMachineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnesthesiaMachineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnesthesiaMachineData& from);
  void MergeFrom(const AnesthesiaMachineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnesthesiaMachineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pulse.cdm.bind.AnesthesiaMachineData";
  }
  protected:
  explicit AnesthesiaMachineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto);
    return ::descriptor_table_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AnesthesiaMachineData_eConnection eConnection;
  static constexpr eConnection NullConnection =
    AnesthesiaMachineData_eConnection_NullConnection;
  static constexpr eConnection Off =
    AnesthesiaMachineData_eConnection_Off;
  static constexpr eConnection Mask =
    AnesthesiaMachineData_eConnection_Mask;
  static constexpr eConnection Tube =
    AnesthesiaMachineData_eConnection_Tube;
  static inline bool eConnection_IsValid(int value) {
    return AnesthesiaMachineData_eConnection_IsValid(value);
  }
  static constexpr eConnection eConnection_MIN =
    AnesthesiaMachineData_eConnection_eConnection_MIN;
  static constexpr eConnection eConnection_MAX =
    AnesthesiaMachineData_eConnection_eConnection_MAX;
  static constexpr int eConnection_ARRAYSIZE =
    AnesthesiaMachineData_eConnection_eConnection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eConnection_descriptor() {
    return AnesthesiaMachineData_eConnection_descriptor();
  }
  template<typename T>
  static inline const std::string& eConnection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eConnection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eConnection_Name.");
    return AnesthesiaMachineData_eConnection_Name(enum_t_value);
  }
  static inline bool eConnection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eConnection* value) {
    return AnesthesiaMachineData_eConnection_Parse(name, value);
  }

  typedef AnesthesiaMachineData_eOxygenSource eOxygenSource;
  static constexpr eOxygenSource NullSource =
    AnesthesiaMachineData_eOxygenSource_NullSource;
  static constexpr eOxygenSource NoSource =
    AnesthesiaMachineData_eOxygenSource_NoSource;
  static constexpr eOxygenSource Wall =
    AnesthesiaMachineData_eOxygenSource_Wall;
  static constexpr eOxygenSource BottleOne =
    AnesthesiaMachineData_eOxygenSource_BottleOne;
  static constexpr eOxygenSource BottleTwo =
    AnesthesiaMachineData_eOxygenSource_BottleTwo;
  static inline bool eOxygenSource_IsValid(int value) {
    return AnesthesiaMachineData_eOxygenSource_IsValid(value);
  }
  static constexpr eOxygenSource eOxygenSource_MIN =
    AnesthesiaMachineData_eOxygenSource_eOxygenSource_MIN;
  static constexpr eOxygenSource eOxygenSource_MAX =
    AnesthesiaMachineData_eOxygenSource_eOxygenSource_MAX;
  static constexpr int eOxygenSource_ARRAYSIZE =
    AnesthesiaMachineData_eOxygenSource_eOxygenSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eOxygenSource_descriptor() {
    return AnesthesiaMachineData_eOxygenSource_descriptor();
  }
  template<typename T>
  static inline const std::string& eOxygenSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eOxygenSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eOxygenSource_Name.");
    return AnesthesiaMachineData_eOxygenSource_Name(enum_t_value);
  }
  static inline bool eOxygenSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eOxygenSource* value) {
    return AnesthesiaMachineData_eOxygenSource_Parse(name, value);
  }

  typedef AnesthesiaMachineData_ePrimaryGas ePrimaryGas;
  static constexpr ePrimaryGas NullGas =
    AnesthesiaMachineData_ePrimaryGas_NullGas;
  static constexpr ePrimaryGas NoGas =
    AnesthesiaMachineData_ePrimaryGas_NoGas;
  static constexpr ePrimaryGas Air =
    AnesthesiaMachineData_ePrimaryGas_Air;
  static constexpr ePrimaryGas Nitrogen =
    AnesthesiaMachineData_ePrimaryGas_Nitrogen;
  static inline bool ePrimaryGas_IsValid(int value) {
    return AnesthesiaMachineData_ePrimaryGas_IsValid(value);
  }
  static constexpr ePrimaryGas ePrimaryGas_MIN =
    AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_MIN;
  static constexpr ePrimaryGas ePrimaryGas_MAX =
    AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_MAX;
  static constexpr int ePrimaryGas_ARRAYSIZE =
    AnesthesiaMachineData_ePrimaryGas_ePrimaryGas_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ePrimaryGas_descriptor() {
    return AnesthesiaMachineData_ePrimaryGas_descriptor();
  }
  template<typename T>
  static inline const std::string& ePrimaryGas_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ePrimaryGas>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ePrimaryGas_Name.");
    return AnesthesiaMachineData_ePrimaryGas_Name(enum_t_value);
  }
  static inline bool ePrimaryGas_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ePrimaryGas* value) {
    return AnesthesiaMachineData_ePrimaryGas_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInletFlowFieldNumber = 2,
    kInspiratoryExpiratoryRatioFieldNumber = 3,
    kOxygenFractionFieldNumber = 4,
    kPositiveEndExpiredPressureFieldNumber = 6,
    kReliefValvePressureFieldNumber = 8,
    kRespiratoryRateFieldNumber = 9,
    kPeakInspiratoryPressureFieldNumber = 10,
    kLeftChamberFieldNumber = 11,
    kRightChamberFieldNumber = 12,
    kOxygenBottleOneFieldNumber = 13,
    kOxygenBottleTwoFieldNumber = 14,
    kConnectionFieldNumber = 1,
    kOxygenSourceFieldNumber = 5,
    kPrimaryGasFieldNumber = 7,
  };
  // .pulse.cdm.bind.ScalarVolumePerTimeData InletFlow = 2;
  bool has_inletflow() const;
  private:
  bool _internal_has_inletflow() const;
  public:
  void clear_inletflow();
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& inletflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* release_inletflow();
  ::pulse::cdm::bind::ScalarVolumePerTimeData* mutable_inletflow();
  void set_allocated_inletflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inletflow);
  private:
  const ::pulse::cdm::bind::ScalarVolumePerTimeData& _internal_inletflow() const;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* _internal_mutable_inletflow();
  public:
  void unsafe_arena_set_allocated_inletflow(
      ::pulse::cdm::bind::ScalarVolumePerTimeData* inletflow);
  ::pulse::cdm::bind::ScalarVolumePerTimeData* unsafe_arena_release_inletflow();

  // .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 3;
  bool has_inspiratoryexpiratoryratio() const;
  private:
  bool _internal_has_inspiratoryexpiratoryratio() const;
  public:
  void clear_inspiratoryexpiratoryratio();
  const ::pulse::cdm::bind::ScalarData& inspiratoryexpiratoryratio() const;
  ::pulse::cdm::bind::ScalarData* release_inspiratoryexpiratoryratio();
  ::pulse::cdm::bind::ScalarData* mutable_inspiratoryexpiratoryratio();
  void set_allocated_inspiratoryexpiratoryratio(::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio);
  private:
  const ::pulse::cdm::bind::ScalarData& _internal_inspiratoryexpiratoryratio() const;
  ::pulse::cdm::bind::ScalarData* _internal_mutable_inspiratoryexpiratoryratio();
  public:
  void unsafe_arena_set_allocated_inspiratoryexpiratoryratio(
      ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio);
  ::pulse::cdm::bind::ScalarData* unsafe_arena_release_inspiratoryexpiratoryratio();

  // .pulse.cdm.bind.Scalar0To1Data OxygenFraction = 4;
  bool has_oxygenfraction() const;
  private:
  bool _internal_has_oxygenfraction() const;
  public:
  void clear_oxygenfraction();
  const ::pulse::cdm::bind::Scalar0To1Data& oxygenfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* release_oxygenfraction();
  ::pulse::cdm::bind::Scalar0To1Data* mutable_oxygenfraction();
  void set_allocated_oxygenfraction(::pulse::cdm::bind::Scalar0To1Data* oxygenfraction);
  private:
  const ::pulse::cdm::bind::Scalar0To1Data& _internal_oxygenfraction() const;
  ::pulse::cdm::bind::Scalar0To1Data* _internal_mutable_oxygenfraction();
  public:
  void unsafe_arena_set_allocated_oxygenfraction(
      ::pulse::cdm::bind::Scalar0To1Data* oxygenfraction);
  ::pulse::cdm::bind::Scalar0To1Data* unsafe_arena_release_oxygenfraction();

  // .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 6;
  bool has_positiveendexpiredpressure() const;
  private:
  bool _internal_has_positiveendexpiredpressure() const;
  public:
  void clear_positiveendexpiredpressure();
  const ::pulse::cdm::bind::ScalarPressureData& positiveendexpiredpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_positiveendexpiredpressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_positiveendexpiredpressure();
  void set_allocated_positiveendexpiredpressure(::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_positiveendexpiredpressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_positiveendexpiredpressure();
  public:
  void unsafe_arena_set_allocated_positiveendexpiredpressure(
      ::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_positiveendexpiredpressure();

  // .pulse.cdm.bind.ScalarPressureData ReliefValvePressure = 8;
  bool has_reliefvalvepressure() const;
  private:
  bool _internal_has_reliefvalvepressure() const;
  public:
  void clear_reliefvalvepressure();
  const ::pulse::cdm::bind::ScalarPressureData& reliefvalvepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_reliefvalvepressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_reliefvalvepressure();
  void set_allocated_reliefvalvepressure(::pulse::cdm::bind::ScalarPressureData* reliefvalvepressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_reliefvalvepressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_reliefvalvepressure();
  public:
  void unsafe_arena_set_allocated_reliefvalvepressure(
      ::pulse::cdm::bind::ScalarPressureData* reliefvalvepressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_reliefvalvepressure();

  // .pulse.cdm.bind.ScalarFrequencyData RespiratoryRate = 9;
  bool has_respiratoryrate() const;
  private:
  bool _internal_has_respiratoryrate() const;
  public:
  void clear_respiratoryrate();
  const ::pulse::cdm::bind::ScalarFrequencyData& respiratoryrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* release_respiratoryrate();
  ::pulse::cdm::bind::ScalarFrequencyData* mutable_respiratoryrate();
  void set_allocated_respiratoryrate(::pulse::cdm::bind::ScalarFrequencyData* respiratoryrate);
  private:
  const ::pulse::cdm::bind::ScalarFrequencyData& _internal_respiratoryrate() const;
  ::pulse::cdm::bind::ScalarFrequencyData* _internal_mutable_respiratoryrate();
  public:
  void unsafe_arena_set_allocated_respiratoryrate(
      ::pulse::cdm::bind::ScalarFrequencyData* respiratoryrate);
  ::pulse::cdm::bind::ScalarFrequencyData* unsafe_arena_release_respiratoryrate();

  // .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 10;
  bool has_peakinspiratorypressure() const;
  private:
  bool _internal_has_peakinspiratorypressure() const;
  public:
  void clear_peakinspiratorypressure();
  const ::pulse::cdm::bind::ScalarPressureData& peakinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* release_peakinspiratorypressure();
  ::pulse::cdm::bind::ScalarPressureData* mutable_peakinspiratorypressure();
  void set_allocated_peakinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure);
  private:
  const ::pulse::cdm::bind::ScalarPressureData& _internal_peakinspiratorypressure() const;
  ::pulse::cdm::bind::ScalarPressureData* _internal_mutable_peakinspiratorypressure();
  public:
  void unsafe_arena_set_allocated_peakinspiratorypressure(
      ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure);
  ::pulse::cdm::bind::ScalarPressureData* unsafe_arena_release_peakinspiratorypressure();

  // .pulse.cdm.bind.AnesthesiaMachineChamberData LeftChamber = 11;
  bool has_leftchamber() const;
  private:
  bool _internal_has_leftchamber() const;
  public:
  void clear_leftchamber();
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData& leftchamber() const;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* release_leftchamber();
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* mutable_leftchamber();
  void set_allocated_leftchamber(::pulse::cdm::bind::AnesthesiaMachineChamberData* leftchamber);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData& _internal_leftchamber() const;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* _internal_mutable_leftchamber();
  public:
  void unsafe_arena_set_allocated_leftchamber(
      ::pulse::cdm::bind::AnesthesiaMachineChamberData* leftchamber);
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* unsafe_arena_release_leftchamber();

  // .pulse.cdm.bind.AnesthesiaMachineChamberData RightChamber = 12;
  bool has_rightchamber() const;
  private:
  bool _internal_has_rightchamber() const;
  public:
  void clear_rightchamber();
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData& rightchamber() const;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* release_rightchamber();
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* mutable_rightchamber();
  void set_allocated_rightchamber(::pulse::cdm::bind::AnesthesiaMachineChamberData* rightchamber);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData& _internal_rightchamber() const;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* _internal_mutable_rightchamber();
  public:
  void unsafe_arena_set_allocated_rightchamber(
      ::pulse::cdm::bind::AnesthesiaMachineChamberData* rightchamber);
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* unsafe_arena_release_rightchamber();

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleOne = 13;
  bool has_oxygenbottleone() const;
  private:
  bool _internal_has_oxygenbottleone() const;
  public:
  void clear_oxygenbottleone();
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& oxygenbottleone() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* release_oxygenbottleone();
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* mutable_oxygenbottleone();
  void set_allocated_oxygenbottleone(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottleone);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& _internal_oxygenbottleone() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* _internal_mutable_oxygenbottleone();
  public:
  void unsafe_arena_set_allocated_oxygenbottleone(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottleone);
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* unsafe_arena_release_oxygenbottleone();

  // .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleTwo = 14;
  bool has_oxygenbottletwo() const;
  private:
  bool _internal_has_oxygenbottletwo() const;
  public:
  void clear_oxygenbottletwo();
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& oxygenbottletwo() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* release_oxygenbottletwo();
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* mutable_oxygenbottletwo();
  void set_allocated_oxygenbottletwo(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottletwo);
  private:
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& _internal_oxygenbottletwo() const;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* _internal_mutable_oxygenbottletwo();
  public:
  void unsafe_arena_set_allocated_oxygenbottletwo(
      ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottletwo);
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* unsafe_arena_release_oxygenbottletwo();

  // .pulse.cdm.bind.AnesthesiaMachineData.eConnection Connection = 1;
  void clear_connection();
  ::pulse::cdm::bind::AnesthesiaMachineData_eConnection connection() const;
  void set_connection(::pulse::cdm::bind::AnesthesiaMachineData_eConnection value);
  private:
  ::pulse::cdm::bind::AnesthesiaMachineData_eConnection _internal_connection() const;
  void _internal_set_connection(::pulse::cdm::bind::AnesthesiaMachineData_eConnection value);
  public:

  // .pulse.cdm.bind.AnesthesiaMachineData.eOxygenSource OxygenSource = 5;
  void clear_oxygensource();
  ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource oxygensource() const;
  void set_oxygensource(::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource value);
  private:
  ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource _internal_oxygensource() const;
  void _internal_set_oxygensource(::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource value);
  public:

  // .pulse.cdm.bind.AnesthesiaMachineData.ePrimaryGas PrimaryGas = 7;
  void clear_primarygas();
  ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas primarygas() const;
  void set_primarygas(::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas value);
  private:
  ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas _internal_primarygas() const;
  void _internal_set_primarygas(::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas value);
  public:

  // @@protoc_insertion_point(class_scope:pulse.cdm.bind.AnesthesiaMachineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pulse::cdm::bind::ScalarVolumePerTimeData* inletflow_;
  ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio_;
  ::pulse::cdm::bind::Scalar0To1Data* oxygenfraction_;
  ::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure_;
  ::pulse::cdm::bind::ScalarPressureData* reliefvalvepressure_;
  ::pulse::cdm::bind::ScalarFrequencyData* respiratoryrate_;
  ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure_;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* leftchamber_;
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* rightchamber_;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottleone_;
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottletwo_;
  int connection_;
  int oxygensource_;
  int primarygas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnesthesiaMachineChamberData

// .pulse.cdm.bind.eSwitch State = 1;
inline void AnesthesiaMachineChamberData::clear_state() {
  state_ = 0;
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineChamberData::_internal_state() const {
  return static_cast< ::pulse::cdm::bind::eSwitch >(state_);
}
inline ::pulse::cdm::bind::eSwitch AnesthesiaMachineChamberData::state() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineChamberData.State)
  return _internal_state();
}
inline void AnesthesiaMachineChamberData::_internal_set_state(::pulse::cdm::bind::eSwitch value) {
  
  state_ = value;
}
inline void AnesthesiaMachineChamberData::set_state(::pulse::cdm::bind::eSwitch value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineChamberData.State)
}

// .pulse.cdm.bind.Scalar0To1Data SubstanceFraction = 2;
inline bool AnesthesiaMachineChamberData::_internal_has_substancefraction() const {
  return this != internal_default_instance() && substancefraction_ != nullptr;
}
inline bool AnesthesiaMachineChamberData::has_substancefraction() const {
  return _internal_has_substancefraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineChamberData::_internal_substancefraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = substancefraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineChamberData::substancefraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineChamberData.SubstanceFraction)
  return _internal_substancefraction();
}
inline void AnesthesiaMachineChamberData::unsafe_arena_set_allocated_substancefraction(
    ::pulse::cdm::bind::Scalar0To1Data* substancefraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancefraction_);
  }
  substancefraction_ = substancefraction;
  if (substancefraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineChamberData.SubstanceFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineChamberData::release_substancefraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = substancefraction_;
  substancefraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineChamberData::unsafe_arena_release_substancefraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineChamberData.SubstanceFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = substancefraction_;
  substancefraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineChamberData::_internal_mutable_substancefraction() {
  
  if (substancefraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    substancefraction_ = p;
  }
  return substancefraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineChamberData::mutable_substancefraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineChamberData.SubstanceFraction)
  return _internal_mutable_substancefraction();
}
inline void AnesthesiaMachineChamberData::set_allocated_substancefraction(::pulse::cdm::bind::Scalar0To1Data* substancefraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancefraction_);
  }
  if (substancefraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(substancefraction)->GetArena();
    if (message_arena != submessage_arena) {
      substancefraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, substancefraction, submessage_arena);
    }
    
  } else {
    
  }
  substancefraction_ = substancefraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineChamberData.SubstanceFraction)
}

// string Substance = 3;
inline void AnesthesiaMachineChamberData::clear_substance() {
  substance_.ClearToEmpty();
}
inline const std::string& AnesthesiaMachineChamberData::substance() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
  return _internal_substance();
}
inline void AnesthesiaMachineChamberData::set_substance(const std::string& value) {
  _internal_set_substance(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
}
inline std::string* AnesthesiaMachineChamberData::mutable_substance() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
  return _internal_mutable_substance();
}
inline const std::string& AnesthesiaMachineChamberData::_internal_substance() const {
  return substance_.Get();
}
inline void AnesthesiaMachineChamberData::_internal_set_substance(const std::string& value) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnesthesiaMachineChamberData::set_substance(std::string&& value) {
  
  substance_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
}
inline void AnesthesiaMachineChamberData::set_substance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
}
inline void AnesthesiaMachineChamberData::set_substance(const char* value,
    size_t size) {
  
  substance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
}
inline std::string* AnesthesiaMachineChamberData::_internal_mutable_substance() {
  
  return substance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnesthesiaMachineChamberData::release_substance() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
  return substance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnesthesiaMachineChamberData::set_allocated_substance(std::string* substance) {
  if (substance != nullptr) {
    
  } else {
    
  }
  substance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), substance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineChamberData.Substance)
}

// -------------------------------------------------------------------

// AnesthesiaMachineOxygenBottleData

// .pulse.cdm.bind.ScalarVolumeData Volume = 1;
inline bool AnesthesiaMachineOxygenBottleData::_internal_has_volume() const {
  return this != internal_default_instance() && volume_ != nullptr;
}
inline bool AnesthesiaMachineOxygenBottleData::has_volume() const {
  return _internal_has_volume();
}
inline const ::pulse::cdm::bind::ScalarVolumeData& AnesthesiaMachineOxygenBottleData::_internal_volume() const {
  const ::pulse::cdm::bind::ScalarVolumeData* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumeData&>(
      ::pulse::cdm::bind::_ScalarVolumeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumeData& AnesthesiaMachineOxygenBottleData::volume() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData.Volume)
  return _internal_volume();
}
inline void AnesthesiaMachineOxygenBottleData::unsafe_arena_set_allocated_volume(
    ::pulse::cdm::bind::ScalarVolumeData* volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData.Volume)
}
inline ::pulse::cdm::bind::ScalarVolumeData* AnesthesiaMachineOxygenBottleData::release_volume() {
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* AnesthesiaMachineOxygenBottleData::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData.Volume)
  
  ::pulse::cdm::bind::ScalarVolumeData* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumeData* AnesthesiaMachineOxygenBottleData::_internal_mutable_volume() {
  
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumeData>(GetArena());
    volume_ = p;
  }
  return volume_;
}
inline ::pulse::cdm::bind::ScalarVolumeData* AnesthesiaMachineOxygenBottleData::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData.Volume)
  return _internal_mutable_volume();
}
inline void AnesthesiaMachineOxygenBottleData::set_allocated_volume(::pulse::cdm::bind::ScalarVolumeData* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume)->GetArena();
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    
  } else {
    
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineOxygenBottleData.Volume)
}

// -------------------------------------------------------------------

// AnesthesiaMachineData

// .pulse.cdm.bind.AnesthesiaMachineData.eConnection Connection = 1;
inline void AnesthesiaMachineData::clear_connection() {
  connection_ = 0;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_eConnection AnesthesiaMachineData::_internal_connection() const {
  return static_cast< ::pulse::cdm::bind::AnesthesiaMachineData_eConnection >(connection_);
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_eConnection AnesthesiaMachineData::connection() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.Connection)
  return _internal_connection();
}
inline void AnesthesiaMachineData::_internal_set_connection(::pulse::cdm::bind::AnesthesiaMachineData_eConnection value) {
  
  connection_ = value;
}
inline void AnesthesiaMachineData::set_connection(::pulse::cdm::bind::AnesthesiaMachineData_eConnection value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineData.Connection)
}

// .pulse.cdm.bind.ScalarVolumePerTimeData InletFlow = 2;
inline bool AnesthesiaMachineData::_internal_has_inletflow() const {
  return this != internal_default_instance() && inletflow_ != nullptr;
}
inline bool AnesthesiaMachineData::has_inletflow() const {
  return _internal_has_inletflow();
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& AnesthesiaMachineData::_internal_inletflow() const {
  const ::pulse::cdm::bind::ScalarVolumePerTimeData* p = inletflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarVolumePerTimeData&>(
      ::pulse::cdm::bind::_ScalarVolumePerTimeData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarVolumePerTimeData& AnesthesiaMachineData::inletflow() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.InletFlow)
  return _internal_inletflow();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_inletflow(
    ::pulse::cdm::bind::ScalarVolumePerTimeData* inletflow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inletflow_);
  }
  inletflow_ = inletflow;
  if (inletflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.InletFlow)
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* AnesthesiaMachineData::release_inletflow() {
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inletflow_;
  inletflow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* AnesthesiaMachineData::unsafe_arena_release_inletflow() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.InletFlow)
  
  ::pulse::cdm::bind::ScalarVolumePerTimeData* temp = inletflow_;
  inletflow_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* AnesthesiaMachineData::_internal_mutable_inletflow() {
  
  if (inletflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarVolumePerTimeData>(GetArena());
    inletflow_ = p;
  }
  return inletflow_;
}
inline ::pulse::cdm::bind::ScalarVolumePerTimeData* AnesthesiaMachineData::mutable_inletflow() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.InletFlow)
  return _internal_mutable_inletflow();
}
inline void AnesthesiaMachineData::set_allocated_inletflow(::pulse::cdm::bind::ScalarVolumePerTimeData* inletflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inletflow_);
  }
  if (inletflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inletflow)->GetArena();
    if (message_arena != submessage_arena) {
      inletflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inletflow, submessage_arena);
    }
    
  } else {
    
  }
  inletflow_ = inletflow;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.InletFlow)
}

// .pulse.cdm.bind.ScalarData InspiratoryExpiratoryRatio = 3;
inline bool AnesthesiaMachineData::_internal_has_inspiratoryexpiratoryratio() const {
  return this != internal_default_instance() && inspiratoryexpiratoryratio_ != nullptr;
}
inline bool AnesthesiaMachineData::has_inspiratoryexpiratoryratio() const {
  return _internal_has_inspiratoryexpiratoryratio();
}
inline const ::pulse::cdm::bind::ScalarData& AnesthesiaMachineData::_internal_inspiratoryexpiratoryratio() const {
  const ::pulse::cdm::bind::ScalarData* p = inspiratoryexpiratoryratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarData&>(
      ::pulse::cdm::bind::_ScalarData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarData& AnesthesiaMachineData::inspiratoryexpiratoryratio() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.InspiratoryExpiratoryRatio)
  return _internal_inspiratoryexpiratoryratio();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_inspiratoryexpiratoryratio(
    ::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio_);
  }
  inspiratoryexpiratoryratio_ = inspiratoryexpiratoryratio;
  if (inspiratoryexpiratoryratio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.InspiratoryExpiratoryRatio)
}
inline ::pulse::cdm::bind::ScalarData* AnesthesiaMachineData::release_inspiratoryexpiratoryratio() {
  
  ::pulse::cdm::bind::ScalarData* temp = inspiratoryexpiratoryratio_;
  inspiratoryexpiratoryratio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* AnesthesiaMachineData::unsafe_arena_release_inspiratoryexpiratoryratio() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.InspiratoryExpiratoryRatio)
  
  ::pulse::cdm::bind::ScalarData* temp = inspiratoryexpiratoryratio_;
  inspiratoryexpiratoryratio_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarData* AnesthesiaMachineData::_internal_mutable_inspiratoryexpiratoryratio() {
  
  if (inspiratoryexpiratoryratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarData>(GetArena());
    inspiratoryexpiratoryratio_ = p;
  }
  return inspiratoryexpiratoryratio_;
}
inline ::pulse::cdm::bind::ScalarData* AnesthesiaMachineData::mutable_inspiratoryexpiratoryratio() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.InspiratoryExpiratoryRatio)
  return _internal_mutable_inspiratoryexpiratoryratio();
}
inline void AnesthesiaMachineData::set_allocated_inspiratoryexpiratoryratio(::pulse::cdm::bind::ScalarData* inspiratoryexpiratoryratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio_);
  }
  if (inspiratoryexpiratoryratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inspiratoryexpiratoryratio)->GetArena();
    if (message_arena != submessage_arena) {
      inspiratoryexpiratoryratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inspiratoryexpiratoryratio, submessage_arena);
    }
    
  } else {
    
  }
  inspiratoryexpiratoryratio_ = inspiratoryexpiratoryratio;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.InspiratoryExpiratoryRatio)
}

// .pulse.cdm.bind.Scalar0To1Data OxygenFraction = 4;
inline bool AnesthesiaMachineData::_internal_has_oxygenfraction() const {
  return this != internal_default_instance() && oxygenfraction_ != nullptr;
}
inline bool AnesthesiaMachineData::has_oxygenfraction() const {
  return _internal_has_oxygenfraction();
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineData::_internal_oxygenfraction() const {
  const ::pulse::cdm::bind::Scalar0To1Data* p = oxygenfraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::Scalar0To1Data&>(
      ::pulse::cdm::bind::_Scalar0To1Data_default_instance_);
}
inline const ::pulse::cdm::bind::Scalar0To1Data& AnesthesiaMachineData::oxygenfraction() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.OxygenFraction)
  return _internal_oxygenfraction();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_oxygenfraction(
    ::pulse::cdm::bind::Scalar0To1Data* oxygenfraction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenfraction_);
  }
  oxygenfraction_ = oxygenfraction;
  if (oxygenfraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenFraction)
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineData::release_oxygenfraction() {
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = oxygenfraction_;
  oxygenfraction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineData::unsafe_arena_release_oxygenfraction() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.OxygenFraction)
  
  ::pulse::cdm::bind::Scalar0To1Data* temp = oxygenfraction_;
  oxygenfraction_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineData::_internal_mutable_oxygenfraction() {
  
  if (oxygenfraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::Scalar0To1Data>(GetArena());
    oxygenfraction_ = p;
  }
  return oxygenfraction_;
}
inline ::pulse::cdm::bind::Scalar0To1Data* AnesthesiaMachineData::mutable_oxygenfraction() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.OxygenFraction)
  return _internal_mutable_oxygenfraction();
}
inline void AnesthesiaMachineData::set_allocated_oxygenfraction(::pulse::cdm::bind::Scalar0To1Data* oxygenfraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenfraction_);
  }
  if (oxygenfraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenfraction)->GetArena();
    if (message_arena != submessage_arena) {
      oxygenfraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenfraction, submessage_arena);
    }
    
  } else {
    
  }
  oxygenfraction_ = oxygenfraction;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenFraction)
}

// .pulse.cdm.bind.AnesthesiaMachineData.eOxygenSource OxygenSource = 5;
inline void AnesthesiaMachineData::clear_oxygensource() {
  oxygensource_ = 0;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::_internal_oxygensource() const {
  return static_cast< ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource >(oxygensource_);
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource AnesthesiaMachineData::oxygensource() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.OxygenSource)
  return _internal_oxygensource();
}
inline void AnesthesiaMachineData::_internal_set_oxygensource(::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource value) {
  
  oxygensource_ = value;
}
inline void AnesthesiaMachineData::set_oxygensource(::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource value) {
  _internal_set_oxygensource(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineData.OxygenSource)
}

// .pulse.cdm.bind.ScalarPressureData PeakInspiratoryPressure = 10;
inline bool AnesthesiaMachineData::_internal_has_peakinspiratorypressure() const {
  return this != internal_default_instance() && peakinspiratorypressure_ != nullptr;
}
inline bool AnesthesiaMachineData::has_peakinspiratorypressure() const {
  return _internal_has_peakinspiratorypressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::_internal_peakinspiratorypressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = peakinspiratorypressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::peakinspiratorypressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.PeakInspiratoryPressure)
  return _internal_peakinspiratorypressure();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_peakinspiratorypressure(
    ::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure_);
  }
  peakinspiratorypressure_ = peakinspiratorypressure;
  if (peakinspiratorypressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.PeakInspiratoryPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::release_peakinspiratorypressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peakinspiratorypressure_;
  peakinspiratorypressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::unsafe_arena_release_peakinspiratorypressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.PeakInspiratoryPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = peakinspiratorypressure_;
  peakinspiratorypressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::_internal_mutable_peakinspiratorypressure() {
  
  if (peakinspiratorypressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    peakinspiratorypressure_ = p;
  }
  return peakinspiratorypressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::mutable_peakinspiratorypressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.PeakInspiratoryPressure)
  return _internal_mutable_peakinspiratorypressure();
}
inline void AnesthesiaMachineData::set_allocated_peakinspiratorypressure(::pulse::cdm::bind::ScalarPressureData* peakinspiratorypressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure_);
  }
  if (peakinspiratorypressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peakinspiratorypressure)->GetArena();
    if (message_arena != submessage_arena) {
      peakinspiratorypressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peakinspiratorypressure, submessage_arena);
    }
    
  } else {
    
  }
  peakinspiratorypressure_ = peakinspiratorypressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.PeakInspiratoryPressure)
}

// .pulse.cdm.bind.ScalarPressureData PositiveEndExpiredPressure = 6;
inline bool AnesthesiaMachineData::_internal_has_positiveendexpiredpressure() const {
  return this != internal_default_instance() && positiveendexpiredpressure_ != nullptr;
}
inline bool AnesthesiaMachineData::has_positiveendexpiredpressure() const {
  return _internal_has_positiveendexpiredpressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::_internal_positiveendexpiredpressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = positiveendexpiredpressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::positiveendexpiredpressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.PositiveEndExpiredPressure)
  return _internal_positiveendexpiredpressure();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_positiveendexpiredpressure(
    ::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiredpressure_);
  }
  positiveendexpiredpressure_ = positiveendexpiredpressure;
  if (positiveendexpiredpressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.PositiveEndExpiredPressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::release_positiveendexpiredpressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = positiveendexpiredpressure_;
  positiveendexpiredpressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::unsafe_arena_release_positiveendexpiredpressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.PositiveEndExpiredPressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = positiveendexpiredpressure_;
  positiveendexpiredpressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::_internal_mutable_positiveendexpiredpressure() {
  
  if (positiveendexpiredpressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    positiveendexpiredpressure_ = p;
  }
  return positiveendexpiredpressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::mutable_positiveendexpiredpressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.PositiveEndExpiredPressure)
  return _internal_mutable_positiveendexpiredpressure();
}
inline void AnesthesiaMachineData::set_allocated_positiveendexpiredpressure(::pulse::cdm::bind::ScalarPressureData* positiveendexpiredpressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiredpressure_);
  }
  if (positiveendexpiredpressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positiveendexpiredpressure)->GetArena();
    if (message_arena != submessage_arena) {
      positiveendexpiredpressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positiveendexpiredpressure, submessage_arena);
    }
    
  } else {
    
  }
  positiveendexpiredpressure_ = positiveendexpiredpressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.PositiveEndExpiredPressure)
}

// .pulse.cdm.bind.AnesthesiaMachineData.ePrimaryGas PrimaryGas = 7;
inline void AnesthesiaMachineData::clear_primarygas() {
  primarygas_ = 0;
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::_internal_primarygas() const {
  return static_cast< ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas >(primarygas_);
}
inline ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas AnesthesiaMachineData::primarygas() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.PrimaryGas)
  return _internal_primarygas();
}
inline void AnesthesiaMachineData::_internal_set_primarygas(::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas value) {
  
  primarygas_ = value;
}
inline void AnesthesiaMachineData::set_primarygas(::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas value) {
  _internal_set_primarygas(value);
  // @@protoc_insertion_point(field_set:pulse.cdm.bind.AnesthesiaMachineData.PrimaryGas)
}

// .pulse.cdm.bind.ScalarPressureData ReliefValvePressure = 8;
inline bool AnesthesiaMachineData::_internal_has_reliefvalvepressure() const {
  return this != internal_default_instance() && reliefvalvepressure_ != nullptr;
}
inline bool AnesthesiaMachineData::has_reliefvalvepressure() const {
  return _internal_has_reliefvalvepressure();
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::_internal_reliefvalvepressure() const {
  const ::pulse::cdm::bind::ScalarPressureData* p = reliefvalvepressure_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarPressureData&>(
      ::pulse::cdm::bind::_ScalarPressureData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarPressureData& AnesthesiaMachineData::reliefvalvepressure() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.ReliefValvePressure)
  return _internal_reliefvalvepressure();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_reliefvalvepressure(
    ::pulse::cdm::bind::ScalarPressureData* reliefvalvepressure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reliefvalvepressure_);
  }
  reliefvalvepressure_ = reliefvalvepressure;
  if (reliefvalvepressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.ReliefValvePressure)
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::release_reliefvalvepressure() {
  
  ::pulse::cdm::bind::ScalarPressureData* temp = reliefvalvepressure_;
  reliefvalvepressure_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::unsafe_arena_release_reliefvalvepressure() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.ReliefValvePressure)
  
  ::pulse::cdm::bind::ScalarPressureData* temp = reliefvalvepressure_;
  reliefvalvepressure_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::_internal_mutable_reliefvalvepressure() {
  
  if (reliefvalvepressure_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarPressureData>(GetArena());
    reliefvalvepressure_ = p;
  }
  return reliefvalvepressure_;
}
inline ::pulse::cdm::bind::ScalarPressureData* AnesthesiaMachineData::mutable_reliefvalvepressure() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.ReliefValvePressure)
  return _internal_mutable_reliefvalvepressure();
}
inline void AnesthesiaMachineData::set_allocated_reliefvalvepressure(::pulse::cdm::bind::ScalarPressureData* reliefvalvepressure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reliefvalvepressure_);
  }
  if (reliefvalvepressure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reliefvalvepressure)->GetArena();
    if (message_arena != submessage_arena) {
      reliefvalvepressure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reliefvalvepressure, submessage_arena);
    }
    
  } else {
    
  }
  reliefvalvepressure_ = reliefvalvepressure;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.ReliefValvePressure)
}

// .pulse.cdm.bind.ScalarFrequencyData RespiratoryRate = 9;
inline bool AnesthesiaMachineData::_internal_has_respiratoryrate() const {
  return this != internal_default_instance() && respiratoryrate_ != nullptr;
}
inline bool AnesthesiaMachineData::has_respiratoryrate() const {
  return _internal_has_respiratoryrate();
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& AnesthesiaMachineData::_internal_respiratoryrate() const {
  const ::pulse::cdm::bind::ScalarFrequencyData* p = respiratoryrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::ScalarFrequencyData&>(
      ::pulse::cdm::bind::_ScalarFrequencyData_default_instance_);
}
inline const ::pulse::cdm::bind::ScalarFrequencyData& AnesthesiaMachineData::respiratoryrate() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.RespiratoryRate)
  return _internal_respiratoryrate();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_respiratoryrate(
    ::pulse::cdm::bind::ScalarFrequencyData* respiratoryrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryrate_);
  }
  respiratoryrate_ = respiratoryrate;
  if (respiratoryrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.RespiratoryRate)
}
inline ::pulse::cdm::bind::ScalarFrequencyData* AnesthesiaMachineData::release_respiratoryrate() {
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respiratoryrate_;
  respiratoryrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* AnesthesiaMachineData::unsafe_arena_release_respiratoryrate() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.RespiratoryRate)
  
  ::pulse::cdm::bind::ScalarFrequencyData* temp = respiratoryrate_;
  respiratoryrate_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* AnesthesiaMachineData::_internal_mutable_respiratoryrate() {
  
  if (respiratoryrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::ScalarFrequencyData>(GetArena());
    respiratoryrate_ = p;
  }
  return respiratoryrate_;
}
inline ::pulse::cdm::bind::ScalarFrequencyData* AnesthesiaMachineData::mutable_respiratoryrate() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.RespiratoryRate)
  return _internal_mutable_respiratoryrate();
}
inline void AnesthesiaMachineData::set_allocated_respiratoryrate(::pulse::cdm::bind::ScalarFrequencyData* respiratoryrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryrate_);
  }
  if (respiratoryrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(respiratoryrate)->GetArena();
    if (message_arena != submessage_arena) {
      respiratoryrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, respiratoryrate, submessage_arena);
    }
    
  } else {
    
  }
  respiratoryrate_ = respiratoryrate;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.RespiratoryRate)
}

// .pulse.cdm.bind.AnesthesiaMachineChamberData LeftChamber = 11;
inline bool AnesthesiaMachineData::_internal_has_leftchamber() const {
  return this != internal_default_instance() && leftchamber_ != nullptr;
}
inline bool AnesthesiaMachineData::has_leftchamber() const {
  return _internal_has_leftchamber();
}
inline void AnesthesiaMachineData::clear_leftchamber() {
  if (GetArena() == nullptr && leftchamber_ != nullptr) {
    delete leftchamber_;
  }
  leftchamber_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineChamberData& AnesthesiaMachineData::_internal_leftchamber() const {
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData* p = leftchamber_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineChamberData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineChamberData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineChamberData& AnesthesiaMachineData::leftchamber() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.LeftChamber)
  return _internal_leftchamber();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_leftchamber(
    ::pulse::cdm::bind::AnesthesiaMachineChamberData* leftchamber) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftchamber_);
  }
  leftchamber_ = leftchamber;
  if (leftchamber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.LeftChamber)
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::release_leftchamber() {
  
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* temp = leftchamber_;
  leftchamber_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::unsafe_arena_release_leftchamber() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.LeftChamber)
  
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* temp = leftchamber_;
  leftchamber_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::_internal_mutable_leftchamber() {
  
  if (leftchamber_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineChamberData>(GetArena());
    leftchamber_ = p;
  }
  return leftchamber_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::mutable_leftchamber() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.LeftChamber)
  return _internal_mutable_leftchamber();
}
inline void AnesthesiaMachineData::set_allocated_leftchamber(::pulse::cdm::bind::AnesthesiaMachineChamberData* leftchamber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leftchamber_;
  }
  if (leftchamber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leftchamber);
    if (message_arena != submessage_arena) {
      leftchamber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftchamber, submessage_arena);
    }
    
  } else {
    
  }
  leftchamber_ = leftchamber;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.LeftChamber)
}

// .pulse.cdm.bind.AnesthesiaMachineChamberData RightChamber = 12;
inline bool AnesthesiaMachineData::_internal_has_rightchamber() const {
  return this != internal_default_instance() && rightchamber_ != nullptr;
}
inline bool AnesthesiaMachineData::has_rightchamber() const {
  return _internal_has_rightchamber();
}
inline void AnesthesiaMachineData::clear_rightchamber() {
  if (GetArena() == nullptr && rightchamber_ != nullptr) {
    delete rightchamber_;
  }
  rightchamber_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineChamberData& AnesthesiaMachineData::_internal_rightchamber() const {
  const ::pulse::cdm::bind::AnesthesiaMachineChamberData* p = rightchamber_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineChamberData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineChamberData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineChamberData& AnesthesiaMachineData::rightchamber() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.RightChamber)
  return _internal_rightchamber();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_rightchamber(
    ::pulse::cdm::bind::AnesthesiaMachineChamberData* rightchamber) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightchamber_);
  }
  rightchamber_ = rightchamber;
  if (rightchamber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.RightChamber)
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::release_rightchamber() {
  
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* temp = rightchamber_;
  rightchamber_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::unsafe_arena_release_rightchamber() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.RightChamber)
  
  ::pulse::cdm::bind::AnesthesiaMachineChamberData* temp = rightchamber_;
  rightchamber_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::_internal_mutable_rightchamber() {
  
  if (rightchamber_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineChamberData>(GetArena());
    rightchamber_ = p;
  }
  return rightchamber_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineChamberData* AnesthesiaMachineData::mutable_rightchamber() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.RightChamber)
  return _internal_mutable_rightchamber();
}
inline void AnesthesiaMachineData::set_allocated_rightchamber(::pulse::cdm::bind::AnesthesiaMachineChamberData* rightchamber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rightchamber_;
  }
  if (rightchamber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rightchamber);
    if (message_arena != submessage_arena) {
      rightchamber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightchamber, submessage_arena);
    }
    
  } else {
    
  }
  rightchamber_ = rightchamber;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.RightChamber)
}

// .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleOne = 13;
inline bool AnesthesiaMachineData::_internal_has_oxygenbottleone() const {
  return this != internal_default_instance() && oxygenbottleone_ != nullptr;
}
inline bool AnesthesiaMachineData::has_oxygenbottleone() const {
  return _internal_has_oxygenbottleone();
}
inline void AnesthesiaMachineData::clear_oxygenbottleone() {
  if (GetArena() == nullptr && oxygenbottleone_ != nullptr) {
    delete oxygenbottleone_;
  }
  oxygenbottleone_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& AnesthesiaMachineData::_internal_oxygenbottleone() const {
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* p = oxygenbottleone_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineOxygenBottleData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& AnesthesiaMachineData::oxygenbottleone() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleOne)
  return _internal_oxygenbottleone();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_oxygenbottleone(
    ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottleone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenbottleone_);
  }
  oxygenbottleone_ = oxygenbottleone;
  if (oxygenbottleone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleOne)
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::release_oxygenbottleone() {
  
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* temp = oxygenbottleone_;
  oxygenbottleone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::unsafe_arena_release_oxygenbottleone() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleOne)
  
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* temp = oxygenbottleone_;
  oxygenbottleone_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::_internal_mutable_oxygenbottleone() {
  
  if (oxygenbottleone_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData>(GetArena());
    oxygenbottleone_ = p;
  }
  return oxygenbottleone_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::mutable_oxygenbottleone() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleOne)
  return _internal_mutable_oxygenbottleone();
}
inline void AnesthesiaMachineData::set_allocated_oxygenbottleone(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottleone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oxygenbottleone_;
  }
  if (oxygenbottleone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oxygenbottleone);
    if (message_arena != submessage_arena) {
      oxygenbottleone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenbottleone, submessage_arena);
    }
    
  } else {
    
  }
  oxygenbottleone_ = oxygenbottleone;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleOne)
}

// .pulse.cdm.bind.AnesthesiaMachineOxygenBottleData OxygenBottleTwo = 14;
inline bool AnesthesiaMachineData::_internal_has_oxygenbottletwo() const {
  return this != internal_default_instance() && oxygenbottletwo_ != nullptr;
}
inline bool AnesthesiaMachineData::has_oxygenbottletwo() const {
  return _internal_has_oxygenbottletwo();
}
inline void AnesthesiaMachineData::clear_oxygenbottletwo() {
  if (GetArena() == nullptr && oxygenbottletwo_ != nullptr) {
    delete oxygenbottletwo_;
  }
  oxygenbottletwo_ = nullptr;
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& AnesthesiaMachineData::_internal_oxygenbottletwo() const {
  const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* p = oxygenbottletwo_;
  return p != nullptr ? *p : reinterpret_cast<const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData&>(
      ::pulse::cdm::bind::_AnesthesiaMachineOxygenBottleData_default_instance_);
}
inline const ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData& AnesthesiaMachineData::oxygenbottletwo() const {
  // @@protoc_insertion_point(field_get:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleTwo)
  return _internal_oxygenbottletwo();
}
inline void AnesthesiaMachineData::unsafe_arena_set_allocated_oxygenbottletwo(
    ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottletwo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oxygenbottletwo_);
  }
  oxygenbottletwo_ = oxygenbottletwo;
  if (oxygenbottletwo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleTwo)
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::release_oxygenbottletwo() {
  
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* temp = oxygenbottletwo_;
  oxygenbottletwo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::unsafe_arena_release_oxygenbottletwo() {
  // @@protoc_insertion_point(field_release:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleTwo)
  
  ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* temp = oxygenbottletwo_;
  oxygenbottletwo_ = nullptr;
  return temp;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::_internal_mutable_oxygenbottletwo() {
  
  if (oxygenbottletwo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData>(GetArena());
    oxygenbottletwo_ = p;
  }
  return oxygenbottletwo_;
}
inline ::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* AnesthesiaMachineData::mutable_oxygenbottletwo() {
  // @@protoc_insertion_point(field_mutable:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleTwo)
  return _internal_mutable_oxygenbottletwo();
}
inline void AnesthesiaMachineData::set_allocated_oxygenbottletwo(::pulse::cdm::bind::AnesthesiaMachineOxygenBottleData* oxygenbottletwo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oxygenbottletwo_;
  }
  if (oxygenbottletwo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oxygenbottletwo);
    if (message_arena != submessage_arena) {
      oxygenbottletwo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oxygenbottletwo, submessage_arena);
    }
    
  } else {
    
  }
  oxygenbottletwo_ = oxygenbottletwo;
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnesthesiaMachineData.OxygenBottleTwo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bind
}  // namespace cdm
}  // namespace pulse

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pulse::cdm::bind::AnesthesiaMachineData_eConnection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::AnesthesiaMachineData_eConnection>() {
  return ::pulse::cdm::bind::AnesthesiaMachineData_eConnection_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource>() {
  return ::pulse::cdm::bind::AnesthesiaMachineData_eOxygenSource_descriptor();
}
template <> struct is_proto_enum< ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas>() {
  return ::pulse::cdm::bind::AnesthesiaMachineData_ePrimaryGas_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pulse_2fcdm_2fbind_2fAnesthesiaMachine_2eproto
