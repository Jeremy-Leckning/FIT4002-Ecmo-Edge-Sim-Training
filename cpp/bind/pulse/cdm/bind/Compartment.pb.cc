// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/Compartment.proto

#include "pulse/cdm/bind/Compartment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fProperties_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fCompartment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class CompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompartmentData> _instance;
} _CompartmentData_default_instance_;
class CompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompartmentLinkData> _instance;
} _CompartmentLinkData_default_instance_;
class CompartmentGraphDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompartmentGraphData> _instance;
} _CompartmentGraphData_default_instance_;
class FluidCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FluidCompartmentData> _instance;
} _FluidCompartmentData_default_instance_;
class FluidCompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FluidCompartmentLinkData> _instance;
} _FluidCompartmentLinkData_default_instance_;
class FluidCompartmentGraphDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FluidCompartmentGraphData> _instance;
} _FluidCompartmentGraphData_default_instance_;
class GasCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasCompartmentData> _instance;
} _GasCompartmentData_default_instance_;
class GasCompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasCompartmentLinkData> _instance;
} _GasCompartmentLinkData_default_instance_;
class GasCompartmentGraphDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GasCompartmentGraphData> _instance;
} _GasCompartmentGraphData_default_instance_;
class LiquidCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidCompartmentData> _instance;
} _LiquidCompartmentData_default_instance_;
class LiquidCompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidCompartmentLinkData> _instance;
} _LiquidCompartmentLinkData_default_instance_;
class LiquidCompartmentGraphDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LiquidCompartmentGraphData> _instance;
} _LiquidCompartmentGraphData_default_instance_;
class TissueCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TissueCompartmentData> _instance;
} _TissueCompartmentData_default_instance_;
class ThermalCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalCompartmentData> _instance;
} _ThermalCompartmentData_default_instance_;
class ThermalCompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalCompartmentLinkData> _instance;
} _ThermalCompartmentLinkData_default_instance_;
class ElectricalCompartmentDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectricalCompartmentData> _instance;
} _ElectricalCompartmentData_default_instance_;
class ElectricalCompartmentLinkDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElectricalCompartmentLinkData> _instance;
} _ElectricalCompartmentLinkData_default_instance_;
class CompartmentManagerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompartmentManagerData> _instance;
} _CompartmentManagerData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {}};

static void InitDefaultsscc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CompartmentGraphData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CompartmentGraphData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {}};

static void InitDefaultsscc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {}};

static void InitDefaultsscc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_CompartmentManagerData_default_instance_;
    new (ptr) ::pulse::cdm::bind::CompartmentManagerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectricalCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectricalCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarElectricPotentialData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarElectricChargeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ElectricalCompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ElectricalCompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarElectricCurrentData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FluidCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FluidCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarPressureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FluidCompartmentGraphData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FluidCompartmentGraphData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_FluidCompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::FluidCompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarVolumePerTimeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_GasSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,}};

static void InitDefaultsscc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasCompartmentGraphData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasCompartmentGraphData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_GasCompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::GasCompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_LiquidSubstanceQuantityData_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto.base,}};

static void InitDefaultsscc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidCompartmentGraphData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidCompartmentGraphData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_LiquidCompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::LiquidCompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,}};

static void InitDefaultsscc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ThermalCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ThermalCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarTemperatureData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarEnergyData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_ThermalCompartmentLinkData_default_instance_;
    new (ptr) ::pulse::cdm::bind::ThermalCompartmentLinkData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarPowerData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static void InitDefaultsscc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_TissueCompartmentData_default_instance_;
    new (ptr) ::pulse::cdm::bind::TissueCompartmentData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto}, {
      &scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
      &scc_info_ScalarMassPerMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarVolumeData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_Scalar0To1Data_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,
      &scc_info_ScalarMassData_pulse_2fcdm_2fbind_2fProperties_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fCompartment_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pulse_2fcdm_2fbind_2fCompartment_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fCompartment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentData, node_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentData, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentLinkData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentLinkData, path_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentLinkData, sourcecompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentLinkData, targetcompartment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentGraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentGraphData, name_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentGraphData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentGraphData, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, inflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, outflow_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, pressure_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentData, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentLinkData, link_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentLinkData, flow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentGraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::FluidCompartmentGraphData, graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentData, fluidcompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentData, substancequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentLinkData, fluidlink_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentGraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::GasCompartmentGraphData, fluidgraph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentData, fluidcompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentData, ph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentData, watervolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentData, substancequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentLinkData, fluidlink_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentGraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::LiquidCompartmentGraphData, fluidgraph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, acidicphospohlipidconcentration_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, matrixvolume_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, neutrallipidsvolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, neutralphospholipidsvolumefraction_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, tissuetoplasmaalbuminratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, tissuetoplasmaalphaacidglycoproteinratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, tissuetoplasmalipoproteinratio_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::TissueCompartmentData, totalmass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, heattransferratein_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, heattransferrateout_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, temperature_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentData, heat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentLinkData, link_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ThermalCompartmentLinkData, heattransferrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, compartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, currentin_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, currentout_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, voltage_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentData, charge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentLinkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentLinkData, link_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::ElectricalCompartmentLinkData, current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, electricalcompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, electricallink_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, liquidcompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, liquidlink_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, liquidsubstance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, liquidgraph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, gascompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, gaslink_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, gassubstance_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, gasgraph_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, thermalcompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, thermallink_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, tissuecompartment_),
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::CompartmentManagerData, tissuesubstance_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::CompartmentData)},
  { 8, -1, sizeof(::pulse::cdm::bind::CompartmentLinkData)},
  { 17, -1, sizeof(::pulse::cdm::bind::CompartmentGraphData)},
  { 25, -1, sizeof(::pulse::cdm::bind::FluidCompartmentData)},
  { 35, -1, sizeof(::pulse::cdm::bind::FluidCompartmentLinkData)},
  { 42, -1, sizeof(::pulse::cdm::bind::FluidCompartmentGraphData)},
  { 48, -1, sizeof(::pulse::cdm::bind::GasCompartmentData)},
  { 55, -1, sizeof(::pulse::cdm::bind::GasCompartmentLinkData)},
  { 61, -1, sizeof(::pulse::cdm::bind::GasCompartmentGraphData)},
  { 67, -1, sizeof(::pulse::cdm::bind::LiquidCompartmentData)},
  { 76, -1, sizeof(::pulse::cdm::bind::LiquidCompartmentLinkData)},
  { 82, -1, sizeof(::pulse::cdm::bind::LiquidCompartmentGraphData)},
  { 88, -1, sizeof(::pulse::cdm::bind::TissueCompartmentData)},
  { 102, -1, sizeof(::pulse::cdm::bind::ThermalCompartmentData)},
  { 112, -1, sizeof(::pulse::cdm::bind::ThermalCompartmentLinkData)},
  { 119, -1, sizeof(::pulse::cdm::bind::ElectricalCompartmentData)},
  { 129, -1, sizeof(::pulse::cdm::bind::ElectricalCompartmentLinkData)},
  { 136, -1, sizeof(::pulse::cdm::bind::CompartmentManagerData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CompartmentGraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FluidCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FluidCompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_FluidCompartmentGraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasCompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_GasCompartmentGraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidCompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_LiquidCompartmentGraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_TissueCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ThermalCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ThermalCompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectricalCompartmentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_ElectricalCompartmentLinkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_CompartmentManagerData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fCompartment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n pulse/cdm/bind/Compartment.proto\022\016puls"
  "e.cdm.bind\032\037pulse/cdm/bind/Properties.pr"
  "oto\032&pulse/cdm/bind/SubstanceQuantity.pr"
  "oto\"\203\001\n\017CompartmentData\022\014\n\004Name\030\001 \001(\t\022\014\n"
  "\004Node\030\002 \003(\t\022\r\n\005Child\030\003 \003(\t\"E\n\005eType\022\016\n\nE"
  "lectrical\020\000\022\007\n\003Gas\020\001\022\n\n\006Liquid\020\002\022\013\n\007Ther"
  "mal\020\003\022\n\n\006Tissue\020\004\"g\n\023CompartmentLinkData"
  "\022\014\n\004Name\030\001 \001(\t\022\014\n\004Path\030\002 \001(\t\022\031\n\021SourceCo"
  "mpartment\030\003 \001(\t\022\031\n\021TargetCompartment\030\004 \001"
  "(\t\"G\n\024CompartmentGraphData\022\014\n\004Name\030\001 \001(\t"
  "\022\023\n\013Compartment\030\002 \003(\t\022\014\n\004Link\030\003 \003(\t\"\247\002\n\024"
  "FluidCompartmentData\0224\n\013Compartment\030\001 \001("
  "\0132\037.pulse.cdm.bind.CompartmentData\0227\n\006In"
  "Flow\030\002 \001(\0132\'.pulse.cdm.bind.ScalarVolume"
  "PerTimeData\0228\n\007OutFlow\030\003 \001(\0132\'.pulse.cdm"
  ".bind.ScalarVolumePerTimeData\0224\n\010Pressur"
  "e\030\004 \001(\0132\".pulse.cdm.bind.ScalarPressureD"
  "ata\0220\n\006Volume\030\005 \001(\0132 .pulse.cdm.bind.Sca"
  "larVolumeData\"\204\001\n\030FluidCompartmentLinkDa"
  "ta\0221\n\004Link\030\001 \001(\0132#.pulse.cdm.bind.Compar"
  "tmentLinkData\0225\n\004Flow\030\002 \001(\0132\'.pulse.cdm."
  "bind.ScalarVolumePerTimeData\"P\n\031FluidCom"
  "partmentGraphData\0223\n\005Graph\030\001 \001(\0132$.pulse"
  ".cdm.bind.CompartmentGraphData\"\231\001\n\022GasCo"
  "mpartmentData\022>\n\020FluidCompartment\030\001 \001(\0132"
  "$.pulse.cdm.bind.FluidCompartmentData\022C\n"
  "\021SubstanceQuantity\030\002 \003(\0132(.pulse.cdm.bin"
  "d.GasSubstanceQuantityData\"U\n\026GasCompart"
  "mentLinkData\022;\n\tFluidLink\030\001 \001(\0132(.pulse."
  "cdm.bind.FluidCompartmentLinkData\"X\n\027Gas"
  "CompartmentGraphData\022=\n\nFluidGraph\030\001 \001(\013"
  "2).pulse.cdm.bind.FluidCompartmentGraphD"
  "ata\"\204\002\n\025LiquidCompartmentData\022>\n\020FluidCo"
  "mpartment\030\001 \001(\0132$.pulse.cdm.bind.FluidCo"
  "mpartmentData\022&\n\002pH\030\002 \001(\0132\032.pulse.cdm.bi"
  "nd.ScalarData\022;\n\023WaterVolumeFraction\030\003 \001"
  "(\0132\036.pulse.cdm.bind.Scalar0To1Data\022F\n\021Su"
  "bstanceQuantity\030\004 \003(\0132+.pulse.cdm.bind.L"
  "iquidSubstanceQuantityData\"X\n\031LiquidComp"
  "artmentLinkData\022;\n\tFluidLink\030\001 \001(\0132(.pul"
  "se.cdm.bind.FluidCompartmentLinkData\"[\n\032"
  "LiquidCompartmentGraphData\022=\n\nFluidGraph"
  "\030\001 \001(\0132).pulse.cdm.bind.FluidCompartment"
  "GraphData\"\353\004\n\025TissueCompartmentData\0224\n\013C"
  "ompartment\030\001 \001(\0132\037.pulse.cdm.bind.Compar"
  "tmentData\022N\n\037AcidicPhospohlipidConcentra"
  "tion\030\002 \001(\0132%.pulse.cdm.bind.ScalarMassPe"
  "rMassData\0226\n\014MatrixVolume\030\003 \001(\0132 .pulse."
  "cdm.bind.ScalarVolumeData\022C\n\033NeutralLipi"
  "dsVolumeFraction\030\004 \001(\0132\036.pulse.cdm.bind."
  "Scalar0To1Data\022J\n\"NeutralPhospholipidsVo"
  "lumeFraction\030\005 \001(\0132\036.pulse.cdm.bind.Scal"
  "ar0To1Data\022>\n\032TissueToPlasmaAlbuminRatio"
  "\030\006 \001(\0132\032.pulse.cdm.bind.ScalarData\022L\n(Ti"
  "ssueToPlasmaAlphaAcidGlycoproteinRatio\030\007"
  " \001(\0132\032.pulse.cdm.bind.ScalarData\022B\n\036Tiss"
  "ueToPlasmaLipoproteinRatio\030\010 \001(\0132\032.pulse"
  ".cdm.bind.ScalarData\0221\n\tTotalMass\030\t \001(\0132"
  "\036.pulse.cdm.bind.ScalarMassData\"\265\002\n\026Ther"
  "malCompartmentData\0224\n\013Compartment\030\001 \001(\0132"
  "\037.pulse.cdm.bind.CompartmentData\022;\n\022Heat"
  "TransferRateIn\030\002 \001(\0132\037.pulse.cdm.bind.Sc"
  "alarPowerData\022<\n\023HeatTransferRateOut\030\003 \001"
  "(\0132\037.pulse.cdm.bind.ScalarPowerData\022:\n\013T"
  "emperature\030\004 \001(\0132%.pulse.cdm.bind.Scalar"
  "TemperatureData\022.\n\004Heat\030\005 \001(\0132 .pulse.cd"
  "m.bind.ScalarEnergyData\"\212\001\n\032ThermalCompa"
  "rtmentLinkData\0221\n\004Link\030\001 \001(\0132#.pulse.cdm"
  ".bind.CompartmentLinkData\0229\n\020HeatTransfe"
  "rRate\030\002 \001(\0132\037.pulse.cdm.bind.ScalarPower"
  "Data\"\306\002\n\031ElectricalCompartmentData\0224\n\013Co"
  "mpartment\030\001 \001(\0132\037.pulse.cdm.bind.Compart"
  "mentData\022<\n\tCurrentIn\030\002 \001(\0132).pulse.cdm."
  "bind.ScalarElectricCurrentData\022=\n\nCurren"
  "tOut\030\003 \001(\0132).pulse.cdm.bind.ScalarElectr"
  "icCurrentData\022<\n\007Voltage\030\004 \001(\0132+.pulse.c"
  "dm.bind.ScalarElectricPotentialData\0228\n\006C"
  "harge\030\005 \001(\0132(.pulse.cdm.bind.ScalarElect"
  "ricChargeData\"\216\001\n\035ElectricalCompartmentL"
  "inkData\0221\n\004Link\030\001 \001(\0132#.pulse.cdm.bind.C"
  "ompartmentLinkData\022:\n\007Current\030\002 \001(\0132).pu"
  "lse.cdm.bind.ScalarElectricCurrentData\"\252"
  "\006\n\026CompartmentManagerData\022H\n\025ElectricalC"
  "ompartment\030\001 \003(\0132).pulse.cdm.bind.Electr"
  "icalCompartmentData\022E\n\016ElectricalLink\030\002 "
  "\003(\0132-.pulse.cdm.bind.ElectricalCompartme"
  "ntLinkData\022@\n\021LiquidCompartment\030\003 \003(\0132%."
  "pulse.cdm.bind.LiquidCompartmentData\022=\n\n"
  "LiquidLink\030\004 \003(\0132).pulse.cdm.bind.Liquid"
  "CompartmentLinkData\022\027\n\017LiquidSubstance\030\005"
  " \003(\t\022\?\n\013LiquidGraph\030\006 \003(\0132*.pulse.cdm.bi"
  "nd.LiquidCompartmentGraphData\022:\n\016GasComp"
  "artment\030\007 \003(\0132\".pulse.cdm.bind.GasCompar"
  "tmentData\0227\n\007GasLink\030\010 \003(\0132&.pulse.cdm.b"
  "ind.GasCompartmentLinkData\022\024\n\014GasSubstan"
  "ce\030\t \003(\t\0229\n\010GasGraph\030\n \003(\0132\'.pulse.cdm.b"
  "ind.GasCompartmentGraphData\022B\n\022ThermalCo"
  "mpartment\030\013 \003(\0132&.pulse.cdm.bind.Thermal"
  "CompartmentData\022\?\n\013ThermalLink\030\014 \003(\0132*.p"
  "ulse.cdm.bind.ThermalCompartmentLinkData"
  "\022@\n\021TissueCompartment\030\r \003(\0132%.pulse.cdm."
  "bind.TissueCompartmentData\022\027\n\017TissueSubs"
  "tance\030\016 \003(\tB/\n\032com.kitware.pulse.cdm.bin"
  "dH\001\252\002\016pulse.cdm.bindb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fProperties_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fSubstanceQuantity_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_sccs[18] = {
  &scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
  &scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fCompartment_2eproto, "pulse/cdm/bind/Compartment.proto", 4148,
  &descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto_deps, 18, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fCompartment_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fCompartment_2eproto, 18, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fCompartment_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fCompartment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fCompartment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompartmentData_eType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fCompartment_2eproto);
  return file_level_enum_descriptors_pulse_2fcdm_2fbind_2fCompartment_2eproto[0];
}
bool CompartmentData_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompartmentData_eType CompartmentData::Electrical;
constexpr CompartmentData_eType CompartmentData::Gas;
constexpr CompartmentData_eType CompartmentData::Liquid;
constexpr CompartmentData_eType CompartmentData::Thermal;
constexpr CompartmentData_eType CompartmentData::Tissue;
constexpr CompartmentData_eType CompartmentData::eType_MIN;
constexpr CompartmentData_eType CompartmentData::eType_MAX;
constexpr int CompartmentData::eType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CompartmentData::_Internal {
 public:
};

CompartmentData::CompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena),
  child_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CompartmentData)
}
CompartmentData::CompartmentData(const CompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_),
      child_(from.child_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CompartmentData)
}

void CompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompartmentData::~CompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompartmentData::ArenaDtor(void* object) {
  CompartmentData* _this = reinterpret_cast< CompartmentData* >(object);
  (void)_this;
}
void CompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompartmentData& CompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void CompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  child_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_node();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentData.Node"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_child();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentData.Child"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string Node = 2;
  for (int i = 0, n = this->_internal_node_size(); i < n; i++) {
    const auto& s = this->_internal_node(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentData.Node");
    target = stream->WriteString(2, s, target);
  }

  // repeated string Child = 3;
  for (int i = 0, n = this->_internal_child_size(); i < n; i++) {
    const auto& s = this->_internal_child(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentData.Child");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CompartmentData)
  return target;
}

size_t CompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Node = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(node_.size());
  for (int i = 0, n = node_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      node_.Get(i));
  }

  // repeated string Child = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(child_.size());
  for (int i = 0, n = child_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      child_.Get(i));
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CompartmentData)
    MergeFrom(*source);
  }
}

void CompartmentData::MergeFrom(const CompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  child_.MergeFrom(from.child_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void CompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompartmentData::CopyFrom(const CompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompartmentData::IsInitialized() const {
  return true;
}

void CompartmentData::InternalSwap(CompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  child_.InternalSwap(&other->child_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompartmentLinkData::_Internal {
 public:
};

CompartmentLinkData::CompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CompartmentLinkData)
}
CompartmentLinkData::CompartmentLinkData(const CompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArena());
  }
  sourcecompartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcecompartment().empty()) {
    sourcecompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcecompartment(), 
      GetArena());
  }
  targetcompartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetcompartment().empty()) {
    targetcompartment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetcompartment(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CompartmentLinkData)
}

void CompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcecompartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetcompartment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompartmentLinkData::~CompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcecompartment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetcompartment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompartmentLinkData::ArenaDtor(void* object) {
  CompartmentLinkData* _this = reinterpret_cast< CompartmentLinkData* >(object);
  (void)_this;
}
void CompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompartmentLinkData& CompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void CompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  sourcecompartment_.ClearToEmpty();
  targetcompartment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentLinkData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentLinkData.Path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SourceCompartment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sourcecompartment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentLinkData.SourceCompartment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TargetCompartment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_targetcompartment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentLinkData.TargetCompartment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentLinkData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentLinkData.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string SourceCompartment = 3;
  if (this->sourcecompartment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcecompartment().data(), static_cast<int>(this->_internal_sourcecompartment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentLinkData.SourceCompartment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourcecompartment(), target);
  }

  // string TargetCompartment = 4;
  if (this->targetcompartment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetcompartment().data(), static_cast<int>(this->_internal_targetcompartment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentLinkData.TargetCompartment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_targetcompartment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CompartmentLinkData)
  return target;
}

size_t CompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string SourceCompartment = 3;
  if (this->sourcecompartment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcecompartment());
  }

  // string TargetCompartment = 4;
  if (this->targetcompartment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetcompartment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CompartmentLinkData)
    MergeFrom(*source);
  }
}

void CompartmentLinkData::MergeFrom(const CompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.sourcecompartment().size() > 0) {
    _internal_set_sourcecompartment(from._internal_sourcecompartment());
  }
  if (from.targetcompartment().size() > 0) {
    _internal_set_targetcompartment(from._internal_targetcompartment());
  }
}

void CompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompartmentLinkData::CopyFrom(const CompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompartmentLinkData::IsInitialized() const {
  return true;
}

void CompartmentLinkData::InternalSwap(CompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sourcecompartment_.Swap(&other->sourcecompartment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetcompartment_.Swap(&other->targetcompartment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompartmentGraphData::_Internal {
 public:
};

CompartmentGraphData::CompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compartment_(arena),
  link_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CompartmentGraphData)
}
CompartmentGraphData::CompartmentGraphData(const CompartmentGraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compartment_(from.compartment_),
      link_(from.link_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CompartmentGraphData)
}

void CompartmentGraphData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompartmentGraphData::~CompartmentGraphData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CompartmentGraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompartmentGraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompartmentGraphData::ArenaDtor(void* object) {
  CompartmentGraphData* _this = reinterpret_cast< CompartmentGraphData* >(object);
  (void)_this;
}
void CompartmentGraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompartmentGraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompartmentGraphData& CompartmentGraphData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void CompartmentGraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compartment_.Clear();
  link_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompartmentGraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentGraphData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Compartment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_compartment();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentGraphData.Compartment"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Link = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_link();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentGraphData.Link"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompartmentGraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentGraphData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string Compartment = 2;
  for (int i = 0, n = this->_internal_compartment_size(); i < n; i++) {
    const auto& s = this->_internal_compartment(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentGraphData.Compartment");
    target = stream->WriteString(2, s, target);
  }

  // repeated string Link = 3;
  for (int i = 0, n = this->_internal_link_size(); i < n; i++) {
    const auto& s = this->_internal_link(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentGraphData.Link");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CompartmentGraphData)
  return target;
}

size_t CompartmentGraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CompartmentGraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Compartment = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(compartment_.size());
  for (int i = 0, n = compartment_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      compartment_.Get(i));
  }

  // repeated string Link = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(link_.size());
  for (int i = 0, n = link_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      link_.Get(i));
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompartmentGraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompartmentGraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompartmentGraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CompartmentGraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CompartmentGraphData)
    MergeFrom(*source);
  }
}

void CompartmentGraphData::MergeFrom(const CompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compartment_.MergeFrom(from.compartment_);
  link_.MergeFrom(from.link_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void CompartmentGraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompartmentGraphData::CopyFrom(const CompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompartmentGraphData::IsInitialized() const {
  return true;
}

void CompartmentGraphData::InternalSwap(CompartmentGraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compartment_.InternalSwap(&other->compartment_);
  link_.InternalSwap(&other->link_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompartmentGraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FluidCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentData& compartment(const FluidCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& inflow(const FluidCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& outflow(const FluidCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarPressureData& pressure(const FluidCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& volume(const FluidCompartmentData* msg);
};

const ::pulse::cdm::bind::CompartmentData&
FluidCompartmentData::_Internal::compartment(const FluidCompartmentData* msg) {
  return *msg->compartment_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
FluidCompartmentData::_Internal::inflow(const FluidCompartmentData* msg) {
  return *msg->inflow_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
FluidCompartmentData::_Internal::outflow(const FluidCompartmentData* msg) {
  return *msg->outflow_;
}
const ::pulse::cdm::bind::ScalarPressureData&
FluidCompartmentData::_Internal::pressure(const FluidCompartmentData* msg) {
  return *msg->pressure_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
FluidCompartmentData::_Internal::volume(const FluidCompartmentData* msg) {
  return *msg->volume_;
}
void FluidCompartmentData::clear_inflow() {
  if (GetArena() == nullptr && inflow_ != nullptr) {
    delete inflow_;
  }
  inflow_ = nullptr;
}
void FluidCompartmentData::clear_outflow() {
  if (GetArena() == nullptr && outflow_ != nullptr) {
    delete outflow_;
  }
  outflow_ = nullptr;
}
void FluidCompartmentData::clear_pressure() {
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
}
void FluidCompartmentData::clear_volume() {
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
}
FluidCompartmentData::FluidCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FluidCompartmentData)
}
FluidCompartmentData::FluidCompartmentData(const FluidCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compartment()) {
    compartment_ = new ::pulse::cdm::bind::CompartmentData(*from.compartment_);
  } else {
    compartment_ = nullptr;
  }
  if (from._internal_has_inflow()) {
    inflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.inflow_);
  } else {
    inflow_ = nullptr;
  }
  if (from._internal_has_outflow()) {
    outflow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.outflow_);
  } else {
    outflow_ = nullptr;
  }
  if (from._internal_has_pressure()) {
    pressure_ = new ::pulse::cdm::bind::ScalarPressureData(*from.pressure_);
  } else {
    pressure_ = nullptr;
  }
  if (from._internal_has_volume()) {
    volume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FluidCompartmentData)
}

void FluidCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compartment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&compartment_)) + sizeof(volume_));
}

FluidCompartmentData::~FluidCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FluidCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FluidCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compartment_;
  if (this != internal_default_instance()) delete inflow_;
  if (this != internal_default_instance()) delete outflow_;
  if (this != internal_default_instance()) delete pressure_;
  if (this != internal_default_instance()) delete volume_;
}

void FluidCompartmentData::ArenaDtor(void* object) {
  FluidCompartmentData* _this = reinterpret_cast< FluidCompartmentData* >(object);
  (void)_this;
}
void FluidCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluidCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FluidCompartmentData& FluidCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FluidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void FluidCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FluidCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
  if (GetArena() == nullptr && inflow_ != nullptr) {
    delete inflow_;
  }
  inflow_ = nullptr;
  if (GetArena() == nullptr && outflow_ != nullptr) {
    delete outflow_;
  }
  outflow_ = nullptr;
  if (GetArena() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
  if (GetArena() == nullptr && volume_ != nullptr) {
    delete volume_;
  }
  volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluidCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentData Compartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData InFlow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData OutFlow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outflow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData Volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FluidCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FluidCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::compartment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InFlow = 2;
  if (this->has_inflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData OutFlow = 3;
  if (this->has_outflow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::outflow(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  if (this->has_pressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pressure(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 5;
  if (this->has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FluidCompartmentData)
  return target;
}

size_t FluidCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FluidCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compartment_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData InFlow = 2;
  if (this->has_inflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inflow_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData OutFlow = 3;
  if (this->has_outflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outflow_);
  }

  // .pulse.cdm.bind.ScalarPressureData Pressure = 4;
  if (this->has_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pressure_);
  }

  // .pulse.cdm.bind.ScalarVolumeData Volume = 5;
  if (this->has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FluidCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FluidCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const FluidCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FluidCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FluidCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FluidCompartmentData)
    MergeFrom(*source);
  }
}

void FluidCompartmentData::MergeFrom(const FluidCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FluidCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compartment()) {
    _internal_mutable_compartment()->::pulse::cdm::bind::CompartmentData::MergeFrom(from._internal_compartment());
  }
  if (from.has_inflow()) {
    _internal_mutable_inflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_inflow());
  }
  if (from.has_outflow()) {
    _internal_mutable_outflow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_outflow());
  }
  if (from.has_pressure()) {
    _internal_mutable_pressure()->::pulse::cdm::bind::ScalarPressureData::MergeFrom(from._internal_pressure());
  }
  if (from.has_volume()) {
    _internal_mutable_volume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_volume());
  }
}

void FluidCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FluidCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidCompartmentData::CopyFrom(const FluidCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FluidCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidCompartmentData::IsInitialized() const {
  return true;
}

void FluidCompartmentData::InternalSwap(FluidCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FluidCompartmentData, volume_)
      + sizeof(FluidCompartmentData::volume_)
      - PROTOBUF_FIELD_OFFSET(FluidCompartmentData, compartment_)>(
          reinterpret_cast<char*>(&compartment_),
          reinterpret_cast<char*>(&other->compartment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FluidCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FluidCompartmentLinkData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentLinkData& link(const FluidCompartmentLinkData* msg);
  static const ::pulse::cdm::bind::ScalarVolumePerTimeData& flow(const FluidCompartmentLinkData* msg);
};

const ::pulse::cdm::bind::CompartmentLinkData&
FluidCompartmentLinkData::_Internal::link(const FluidCompartmentLinkData* msg) {
  return *msg->link_;
}
const ::pulse::cdm::bind::ScalarVolumePerTimeData&
FluidCompartmentLinkData::_Internal::flow(const FluidCompartmentLinkData* msg) {
  return *msg->flow_;
}
void FluidCompartmentLinkData::clear_flow() {
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
}
FluidCompartmentLinkData::FluidCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FluidCompartmentLinkData)
}
FluidCompartmentLinkData::FluidCompartmentLinkData(const FluidCompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::pulse::cdm::bind::CompartmentLinkData(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_flow()) {
    flow_ = new ::pulse::cdm::bind::ScalarVolumePerTimeData(*from.flow_);
  } else {
    flow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FluidCompartmentLinkData)
}

void FluidCompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&link_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flow_) -
      reinterpret_cast<char*>(&link_)) + sizeof(flow_));
}

FluidCompartmentLinkData::~FluidCompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FluidCompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FluidCompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete flow_;
}

void FluidCompartmentLinkData::ArenaDtor(void* object) {
  FluidCompartmentLinkData* _this = reinterpret_cast< FluidCompartmentLinkData* >(object);
  (void)_this;
}
void FluidCompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluidCompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FluidCompartmentLinkData& FluidCompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FluidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void FluidCompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FluidCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArena() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluidCompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentLinkData Link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FluidCompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FluidCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 2;
  if (this->has_flow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FluidCompartmentLinkData)
  return target;
}

size_t FluidCompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FluidCompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .pulse.cdm.bind.ScalarVolumePerTimeData Flow = 2;
  if (this->has_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FluidCompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FluidCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const FluidCompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FluidCompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FluidCompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FluidCompartmentLinkData)
    MergeFrom(*source);
  }
}

void FluidCompartmentLinkData::MergeFrom(const FluidCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FluidCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_link()) {
    _internal_mutable_link()->::pulse::cdm::bind::CompartmentLinkData::MergeFrom(from._internal_link());
  }
  if (from.has_flow()) {
    _internal_mutable_flow()->::pulse::cdm::bind::ScalarVolumePerTimeData::MergeFrom(from._internal_flow());
  }
}

void FluidCompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FluidCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidCompartmentLinkData::CopyFrom(const FluidCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FluidCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidCompartmentLinkData::IsInitialized() const {
  return true;
}

void FluidCompartmentLinkData::InternalSwap(FluidCompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FluidCompartmentLinkData, flow_)
      + sizeof(FluidCompartmentLinkData::flow_)
      - PROTOBUF_FIELD_OFFSET(FluidCompartmentLinkData, link_)>(
          reinterpret_cast<char*>(&link_),
          reinterpret_cast<char*>(&other->link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FluidCompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FluidCompartmentGraphData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentGraphData& graph(const FluidCompartmentGraphData* msg);
};

const ::pulse::cdm::bind::CompartmentGraphData&
FluidCompartmentGraphData::_Internal::graph(const FluidCompartmentGraphData* msg) {
  return *msg->graph_;
}
FluidCompartmentGraphData::FluidCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.FluidCompartmentGraphData)
}
FluidCompartmentGraphData::FluidCompartmentGraphData(const FluidCompartmentGraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph()) {
    graph_ = new ::pulse::cdm::bind::CompartmentGraphData(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.FluidCompartmentGraphData)
}

void FluidCompartmentGraphData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  graph_ = nullptr;
}

FluidCompartmentGraphData::~FluidCompartmentGraphData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.FluidCompartmentGraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FluidCompartmentGraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete graph_;
}

void FluidCompartmentGraphData::ArenaDtor(void* object) {
  FluidCompartmentGraphData* _this = reinterpret_cast< FluidCompartmentGraphData* >(object);
  (void)_this;
}
void FluidCompartmentGraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FluidCompartmentGraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FluidCompartmentGraphData& FluidCompartmentGraphData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FluidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void FluidCompartmentGraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.FluidCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FluidCompartmentGraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentGraphData Graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FluidCompartmentGraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.FluidCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentGraphData Graph = 1;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.FluidCompartmentGraphData)
  return target;
}

size_t FluidCompartmentGraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.FluidCompartmentGraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentGraphData Graph = 1;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FluidCompartmentGraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.FluidCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const FluidCompartmentGraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FluidCompartmentGraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.FluidCompartmentGraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.FluidCompartmentGraphData)
    MergeFrom(*source);
  }
}

void FluidCompartmentGraphData::MergeFrom(const FluidCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.FluidCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graph()) {
    _internal_mutable_graph()->::pulse::cdm::bind::CompartmentGraphData::MergeFrom(from._internal_graph());
  }
}

void FluidCompartmentGraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.FluidCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidCompartmentGraphData::CopyFrom(const FluidCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.FluidCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidCompartmentGraphData::IsInitialized() const {
  return true;
}

void FluidCompartmentGraphData::InternalSwap(FluidCompartmentGraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(graph_, other->graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FluidCompartmentGraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentData& fluidcompartment(const GasCompartmentData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentData&
GasCompartmentData::_Internal::fluidcompartment(const GasCompartmentData* msg) {
  return *msg->fluidcompartment_;
}
void GasCompartmentData::clear_substancequantity() {
  substancequantity_.Clear();
}
GasCompartmentData::GasCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substancequantity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasCompartmentData)
}
GasCompartmentData::GasCompartmentData(const GasCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      substancequantity_(from.substancequantity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidcompartment()) {
    fluidcompartment_ = new ::pulse::cdm::bind::FluidCompartmentData(*from.fluidcompartment_);
  } else {
    fluidcompartment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasCompartmentData)
}

void GasCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  fluidcompartment_ = nullptr;
}

GasCompartmentData::~GasCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidcompartment_;
}

void GasCompartmentData::ArenaDtor(void* object) {
  GasCompartmentData* _this = reinterpret_cast< GasCompartmentData* >(object);
  (void)_this;
}
void GasCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasCompartmentData& GasCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void GasCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substancequantity_.Clear();
  if (GetArena() == nullptr && fluidcompartment_ != nullptr) {
    delete fluidcompartment_;
  }
  fluidcompartment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidcompartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.GasSubstanceQuantityData SubstanceQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substancequantity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  if (this->has_fluidcompartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidcompartment(this), target, stream);
  }

  // repeated .pulse.cdm.bind.GasSubstanceQuantityData SubstanceQuantity = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substancequantity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_substancequantity(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasCompartmentData)
  return target;
}

size_t GasCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.GasSubstanceQuantityData SubstanceQuantity = 2;
  total_size += 1UL * this->_internal_substancequantity_size();
  for (const auto& msg : this->substancequantity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  if (this->has_fluidcompartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidcompartment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasCompartmentData)
    MergeFrom(*source);
  }
}

void GasCompartmentData::MergeFrom(const GasCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substancequantity_.MergeFrom(from.substancequantity_);
  if (from.has_fluidcompartment()) {
    _internal_mutable_fluidcompartment()->::pulse::cdm::bind::FluidCompartmentData::MergeFrom(from._internal_fluidcompartment());
  }
}

void GasCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasCompartmentData::CopyFrom(const GasCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasCompartmentData::IsInitialized() const {
  return true;
}

void GasCompartmentData::InternalSwap(GasCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substancequantity_.InternalSwap(&other->substancequantity_);
  swap(fluidcompartment_, other->fluidcompartment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GasCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasCompartmentLinkData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentLinkData& fluidlink(const GasCompartmentLinkData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentLinkData&
GasCompartmentLinkData::_Internal::fluidlink(const GasCompartmentLinkData* msg) {
  return *msg->fluidlink_;
}
GasCompartmentLinkData::GasCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasCompartmentLinkData)
}
GasCompartmentLinkData::GasCompartmentLinkData(const GasCompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidlink()) {
    fluidlink_ = new ::pulse::cdm::bind::FluidCompartmentLinkData(*from.fluidlink_);
  } else {
    fluidlink_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasCompartmentLinkData)
}

void GasCompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  fluidlink_ = nullptr;
}

GasCompartmentLinkData::~GasCompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasCompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasCompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidlink_;
}

void GasCompartmentLinkData::ArenaDtor(void* object) {
  GasCompartmentLinkData* _this = reinterpret_cast< GasCompartmentLinkData* >(object);
  (void)_this;
}
void GasCompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasCompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasCompartmentLinkData& GasCompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void GasCompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fluidlink_ != nullptr) {
    delete fluidlink_;
  }
  fluidlink_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasCompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidlink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasCompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  if (this->has_fluidlink()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidlink(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasCompartmentLinkData)
  return target;
}

size_t GasCompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasCompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  if (this->has_fluidlink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidlink_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasCompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasCompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasCompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasCompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasCompartmentLinkData)
    MergeFrom(*source);
  }
}

void GasCompartmentLinkData::MergeFrom(const GasCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fluidlink()) {
    _internal_mutable_fluidlink()->::pulse::cdm::bind::FluidCompartmentLinkData::MergeFrom(from._internal_fluidlink());
  }
}

void GasCompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasCompartmentLinkData::CopyFrom(const GasCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasCompartmentLinkData::IsInitialized() const {
  return true;
}

void GasCompartmentLinkData::InternalSwap(GasCompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fluidlink_, other->fluidlink_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GasCompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GasCompartmentGraphData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentGraphData& fluidgraph(const GasCompartmentGraphData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentGraphData&
GasCompartmentGraphData::_Internal::fluidgraph(const GasCompartmentGraphData* msg) {
  return *msg->fluidgraph_;
}
GasCompartmentGraphData::GasCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.GasCompartmentGraphData)
}
GasCompartmentGraphData::GasCompartmentGraphData(const GasCompartmentGraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidgraph()) {
    fluidgraph_ = new ::pulse::cdm::bind::FluidCompartmentGraphData(*from.fluidgraph_);
  } else {
    fluidgraph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.GasCompartmentGraphData)
}

void GasCompartmentGraphData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  fluidgraph_ = nullptr;
}

GasCompartmentGraphData::~GasCompartmentGraphData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.GasCompartmentGraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GasCompartmentGraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidgraph_;
}

void GasCompartmentGraphData::ArenaDtor(void* object) {
  GasCompartmentGraphData* _this = reinterpret_cast< GasCompartmentGraphData* >(object);
  (void)_this;
}
void GasCompartmentGraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GasCompartmentGraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GasCompartmentGraphData& GasCompartmentGraphData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GasCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void GasCompartmentGraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.GasCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fluidgraph_ != nullptr) {
    delete fluidgraph_;
  }
  fluidgraph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasCompartmentGraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidgraph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GasCompartmentGraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.GasCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  if (this->has_fluidgraph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidgraph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.GasCompartmentGraphData)
  return target;
}

size_t GasCompartmentGraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.GasCompartmentGraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  if (this->has_fluidgraph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidgraph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GasCompartmentGraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.GasCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const GasCompartmentGraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GasCompartmentGraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.GasCompartmentGraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.GasCompartmentGraphData)
    MergeFrom(*source);
  }
}

void GasCompartmentGraphData::MergeFrom(const GasCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.GasCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fluidgraph()) {
    _internal_mutable_fluidgraph()->::pulse::cdm::bind::FluidCompartmentGraphData::MergeFrom(from._internal_fluidgraph());
  }
}

void GasCompartmentGraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.GasCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GasCompartmentGraphData::CopyFrom(const GasCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.GasCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasCompartmentGraphData::IsInitialized() const {
  return true;
}

void GasCompartmentGraphData::InternalSwap(GasCompartmentGraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fluidgraph_, other->fluidgraph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GasCompartmentGraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentData& fluidcompartment(const LiquidCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarData& ph(const LiquidCompartmentData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& watervolumefraction(const LiquidCompartmentData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentData&
LiquidCompartmentData::_Internal::fluidcompartment(const LiquidCompartmentData* msg) {
  return *msg->fluidcompartment_;
}
const ::pulse::cdm::bind::ScalarData&
LiquidCompartmentData::_Internal::ph(const LiquidCompartmentData* msg) {
  return *msg->ph_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
LiquidCompartmentData::_Internal::watervolumefraction(const LiquidCompartmentData* msg) {
  return *msg->watervolumefraction_;
}
void LiquidCompartmentData::clear_ph() {
  if (GetArena() == nullptr && ph_ != nullptr) {
    delete ph_;
  }
  ph_ = nullptr;
}
void LiquidCompartmentData::clear_watervolumefraction() {
  if (GetArena() == nullptr && watervolumefraction_ != nullptr) {
    delete watervolumefraction_;
  }
  watervolumefraction_ = nullptr;
}
void LiquidCompartmentData::clear_substancequantity() {
  substancequantity_.Clear();
}
LiquidCompartmentData::LiquidCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  substancequantity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidCompartmentData)
}
LiquidCompartmentData::LiquidCompartmentData(const LiquidCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      substancequantity_(from.substancequantity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidcompartment()) {
    fluidcompartment_ = new ::pulse::cdm::bind::FluidCompartmentData(*from.fluidcompartment_);
  } else {
    fluidcompartment_ = nullptr;
  }
  if (from._internal_has_ph()) {
    ph_ = new ::pulse::cdm::bind::ScalarData(*from.ph_);
  } else {
    ph_ = nullptr;
  }
  if (from._internal_has_watervolumefraction()) {
    watervolumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.watervolumefraction_);
  } else {
    watervolumefraction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidCompartmentData)
}

void LiquidCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fluidcompartment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&watervolumefraction_) -
      reinterpret_cast<char*>(&fluidcompartment_)) + sizeof(watervolumefraction_));
}

LiquidCompartmentData::~LiquidCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidcompartment_;
  if (this != internal_default_instance()) delete ph_;
  if (this != internal_default_instance()) delete watervolumefraction_;
}

void LiquidCompartmentData::ArenaDtor(void* object) {
  LiquidCompartmentData* _this = reinterpret_cast< LiquidCompartmentData* >(object);
  (void)_this;
}
void LiquidCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidCompartmentData& LiquidCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void LiquidCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substancequantity_.Clear();
  if (GetArena() == nullptr && fluidcompartment_ != nullptr) {
    delete fluidcompartment_;
  }
  fluidcompartment_ = nullptr;
  if (GetArena() == nullptr && ph_ != nullptr) {
    delete ph_;
  }
  ph_ = nullptr;
  if (GetArena() == nullptr && watervolumefraction_ != nullptr) {
    delete watervolumefraction_;
  }
  watervolumefraction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidcompartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData pH = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data WaterVolumeFraction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_watervolumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidSubstanceQuantityData SubstanceQuantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substancequantity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  if (this->has_fluidcompartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidcompartment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData pH = 2;
  if (this->has_ph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ph(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data WaterVolumeFraction = 3;
  if (this->has_watervolumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::watervolumefraction(this), target, stream);
  }

  // repeated .pulse.cdm.bind.LiquidSubstanceQuantityData SubstanceQuantity = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_substancequantity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_substancequantity(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidCompartmentData)
  return target;
}

size_t LiquidCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.LiquidSubstanceQuantityData SubstanceQuantity = 4;
  total_size += 1UL * this->_internal_substancequantity_size();
  for (const auto& msg : this->substancequantity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pulse.cdm.bind.FluidCompartmentData FluidCompartment = 1;
  if (this->has_fluidcompartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidcompartment_);
  }

  // .pulse.cdm.bind.ScalarData pH = 2;
  if (this->has_ph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ph_);
  }

  // .pulse.cdm.bind.Scalar0To1Data WaterVolumeFraction = 3;
  if (this->has_watervolumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *watervolumefraction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidCompartmentData)
    MergeFrom(*source);
  }
}

void LiquidCompartmentData::MergeFrom(const LiquidCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substancequantity_.MergeFrom(from.substancequantity_);
  if (from.has_fluidcompartment()) {
    _internal_mutable_fluidcompartment()->::pulse::cdm::bind::FluidCompartmentData::MergeFrom(from._internal_fluidcompartment());
  }
  if (from.has_ph()) {
    _internal_mutable_ph()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_ph());
  }
  if (from.has_watervolumefraction()) {
    _internal_mutable_watervolumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_watervolumefraction());
  }
}

void LiquidCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidCompartmentData::CopyFrom(const LiquidCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidCompartmentData::IsInitialized() const {
  return true;
}

void LiquidCompartmentData::InternalSwap(LiquidCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  substancequantity_.InternalSwap(&other->substancequantity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidCompartmentData, watervolumefraction_)
      + sizeof(LiquidCompartmentData::watervolumefraction_)
      - PROTOBUF_FIELD_OFFSET(LiquidCompartmentData, fluidcompartment_)>(
          reinterpret_cast<char*>(&fluidcompartment_),
          reinterpret_cast<char*>(&other->fluidcompartment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidCompartmentLinkData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentLinkData& fluidlink(const LiquidCompartmentLinkData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentLinkData&
LiquidCompartmentLinkData::_Internal::fluidlink(const LiquidCompartmentLinkData* msg) {
  return *msg->fluidlink_;
}
LiquidCompartmentLinkData::LiquidCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidCompartmentLinkData)
}
LiquidCompartmentLinkData::LiquidCompartmentLinkData(const LiquidCompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidlink()) {
    fluidlink_ = new ::pulse::cdm::bind::FluidCompartmentLinkData(*from.fluidlink_);
  } else {
    fluidlink_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidCompartmentLinkData)
}

void LiquidCompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  fluidlink_ = nullptr;
}

LiquidCompartmentLinkData::~LiquidCompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidCompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidCompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidlink_;
}

void LiquidCompartmentLinkData::ArenaDtor(void* object) {
  LiquidCompartmentLinkData* _this = reinterpret_cast< LiquidCompartmentLinkData* >(object);
  (void)_this;
}
void LiquidCompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidCompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidCompartmentLinkData& LiquidCompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void LiquidCompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fluidlink_ != nullptr) {
    delete fluidlink_;
  }
  fluidlink_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidCompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidlink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidCompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  if (this->has_fluidlink()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidlink(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidCompartmentLinkData)
  return target;
}

size_t LiquidCompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentLinkData FluidLink = 1;
  if (this->has_fluidlink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidlink_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidCompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidCompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidCompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidCompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidCompartmentLinkData)
    MergeFrom(*source);
  }
}

void LiquidCompartmentLinkData::MergeFrom(const LiquidCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fluidlink()) {
    _internal_mutable_fluidlink()->::pulse::cdm::bind::FluidCompartmentLinkData::MergeFrom(from._internal_fluidlink());
  }
}

void LiquidCompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidCompartmentLinkData::CopyFrom(const LiquidCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidCompartmentLinkData::IsInitialized() const {
  return true;
}

void LiquidCompartmentLinkData::InternalSwap(LiquidCompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fluidlink_, other->fluidlink_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidCompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LiquidCompartmentGraphData::_Internal {
 public:
  static const ::pulse::cdm::bind::FluidCompartmentGraphData& fluidgraph(const LiquidCompartmentGraphData* msg);
};

const ::pulse::cdm::bind::FluidCompartmentGraphData&
LiquidCompartmentGraphData::_Internal::fluidgraph(const LiquidCompartmentGraphData* msg) {
  return *msg->fluidgraph_;
}
LiquidCompartmentGraphData::LiquidCompartmentGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.LiquidCompartmentGraphData)
}
LiquidCompartmentGraphData::LiquidCompartmentGraphData(const LiquidCompartmentGraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fluidgraph()) {
    fluidgraph_ = new ::pulse::cdm::bind::FluidCompartmentGraphData(*from.fluidgraph_);
  } else {
    fluidgraph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.LiquidCompartmentGraphData)
}

void LiquidCompartmentGraphData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  fluidgraph_ = nullptr;
}

LiquidCompartmentGraphData::~LiquidCompartmentGraphData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.LiquidCompartmentGraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LiquidCompartmentGraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fluidgraph_;
}

void LiquidCompartmentGraphData::ArenaDtor(void* object) {
  LiquidCompartmentGraphData* _this = reinterpret_cast< LiquidCompartmentGraphData* >(object);
  (void)_this;
}
void LiquidCompartmentGraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiquidCompartmentGraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiquidCompartmentGraphData& LiquidCompartmentGraphData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LiquidCompartmentGraphData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void LiquidCompartmentGraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fluidgraph_ != nullptr) {
    delete fluidgraph_;
  }
  fluidgraph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidCompartmentGraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fluidgraph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LiquidCompartmentGraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  if (this->has_fluidgraph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fluidgraph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.LiquidCompartmentGraphData)
  return target;
}

size_t LiquidCompartmentGraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.FluidCompartmentGraphData FluidGraph = 1;
  if (this->has_fluidgraph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fluidgraph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiquidCompartmentGraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const LiquidCompartmentGraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LiquidCompartmentGraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.LiquidCompartmentGraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.LiquidCompartmentGraphData)
    MergeFrom(*source);
  }
}

void LiquidCompartmentGraphData::MergeFrom(const LiquidCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fluidgraph()) {
    _internal_mutable_fluidgraph()->::pulse::cdm::bind::FluidCompartmentGraphData::MergeFrom(from._internal_fluidgraph());
  }
}

void LiquidCompartmentGraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiquidCompartmentGraphData::CopyFrom(const LiquidCompartmentGraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.LiquidCompartmentGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidCompartmentGraphData::IsInitialized() const {
  return true;
}

void LiquidCompartmentGraphData::InternalSwap(LiquidCompartmentGraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(fluidgraph_, other->fluidgraph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidCompartmentGraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TissueCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentData& compartment(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarMassPerMassData& acidicphospohlipidconcentration(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarVolumeData& matrixvolume(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& neutrallipidsvolumefraction(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::Scalar0To1Data& neutralphospholipidsvolumefraction(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarData& tissuetoplasmaalbuminratio(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarData& tissuetoplasmaalphaacidglycoproteinratio(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarData& tissuetoplasmalipoproteinratio(const TissueCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarMassData& totalmass(const TissueCompartmentData* msg);
};

const ::pulse::cdm::bind::CompartmentData&
TissueCompartmentData::_Internal::compartment(const TissueCompartmentData* msg) {
  return *msg->compartment_;
}
const ::pulse::cdm::bind::ScalarMassPerMassData&
TissueCompartmentData::_Internal::acidicphospohlipidconcentration(const TissueCompartmentData* msg) {
  return *msg->acidicphospohlipidconcentration_;
}
const ::pulse::cdm::bind::ScalarVolumeData&
TissueCompartmentData::_Internal::matrixvolume(const TissueCompartmentData* msg) {
  return *msg->matrixvolume_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
TissueCompartmentData::_Internal::neutrallipidsvolumefraction(const TissueCompartmentData* msg) {
  return *msg->neutrallipidsvolumefraction_;
}
const ::pulse::cdm::bind::Scalar0To1Data&
TissueCompartmentData::_Internal::neutralphospholipidsvolumefraction(const TissueCompartmentData* msg) {
  return *msg->neutralphospholipidsvolumefraction_;
}
const ::pulse::cdm::bind::ScalarData&
TissueCompartmentData::_Internal::tissuetoplasmaalbuminratio(const TissueCompartmentData* msg) {
  return *msg->tissuetoplasmaalbuminratio_;
}
const ::pulse::cdm::bind::ScalarData&
TissueCompartmentData::_Internal::tissuetoplasmaalphaacidglycoproteinratio(const TissueCompartmentData* msg) {
  return *msg->tissuetoplasmaalphaacidglycoproteinratio_;
}
const ::pulse::cdm::bind::ScalarData&
TissueCompartmentData::_Internal::tissuetoplasmalipoproteinratio(const TissueCompartmentData* msg) {
  return *msg->tissuetoplasmalipoproteinratio_;
}
const ::pulse::cdm::bind::ScalarMassData&
TissueCompartmentData::_Internal::totalmass(const TissueCompartmentData* msg) {
  return *msg->totalmass_;
}
void TissueCompartmentData::clear_acidicphospohlipidconcentration() {
  if (GetArena() == nullptr && acidicphospohlipidconcentration_ != nullptr) {
    delete acidicphospohlipidconcentration_;
  }
  acidicphospohlipidconcentration_ = nullptr;
}
void TissueCompartmentData::clear_matrixvolume() {
  if (GetArena() == nullptr && matrixvolume_ != nullptr) {
    delete matrixvolume_;
  }
  matrixvolume_ = nullptr;
}
void TissueCompartmentData::clear_neutrallipidsvolumefraction() {
  if (GetArena() == nullptr && neutrallipidsvolumefraction_ != nullptr) {
    delete neutrallipidsvolumefraction_;
  }
  neutrallipidsvolumefraction_ = nullptr;
}
void TissueCompartmentData::clear_neutralphospholipidsvolumefraction() {
  if (GetArena() == nullptr && neutralphospholipidsvolumefraction_ != nullptr) {
    delete neutralphospholipidsvolumefraction_;
  }
  neutralphospholipidsvolumefraction_ = nullptr;
}
void TissueCompartmentData::clear_tissuetoplasmaalbuminratio() {
  if (GetArena() == nullptr && tissuetoplasmaalbuminratio_ != nullptr) {
    delete tissuetoplasmaalbuminratio_;
  }
  tissuetoplasmaalbuminratio_ = nullptr;
}
void TissueCompartmentData::clear_tissuetoplasmaalphaacidglycoproteinratio() {
  if (GetArena() == nullptr && tissuetoplasmaalphaacidglycoproteinratio_ != nullptr) {
    delete tissuetoplasmaalphaacidglycoproteinratio_;
  }
  tissuetoplasmaalphaacidglycoproteinratio_ = nullptr;
}
void TissueCompartmentData::clear_tissuetoplasmalipoproteinratio() {
  if (GetArena() == nullptr && tissuetoplasmalipoproteinratio_ != nullptr) {
    delete tissuetoplasmalipoproteinratio_;
  }
  tissuetoplasmalipoproteinratio_ = nullptr;
}
void TissueCompartmentData::clear_totalmass() {
  if (GetArena() == nullptr && totalmass_ != nullptr) {
    delete totalmass_;
  }
  totalmass_ = nullptr;
}
TissueCompartmentData::TissueCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.TissueCompartmentData)
}
TissueCompartmentData::TissueCompartmentData(const TissueCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compartment()) {
    compartment_ = new ::pulse::cdm::bind::CompartmentData(*from.compartment_);
  } else {
    compartment_ = nullptr;
  }
  if (from._internal_has_acidicphospohlipidconcentration()) {
    acidicphospohlipidconcentration_ = new ::pulse::cdm::bind::ScalarMassPerMassData(*from.acidicphospohlipidconcentration_);
  } else {
    acidicphospohlipidconcentration_ = nullptr;
  }
  if (from._internal_has_matrixvolume()) {
    matrixvolume_ = new ::pulse::cdm::bind::ScalarVolumeData(*from.matrixvolume_);
  } else {
    matrixvolume_ = nullptr;
  }
  if (from._internal_has_neutrallipidsvolumefraction()) {
    neutrallipidsvolumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.neutrallipidsvolumefraction_);
  } else {
    neutrallipidsvolumefraction_ = nullptr;
  }
  if (from._internal_has_neutralphospholipidsvolumefraction()) {
    neutralphospholipidsvolumefraction_ = new ::pulse::cdm::bind::Scalar0To1Data(*from.neutralphospholipidsvolumefraction_);
  } else {
    neutralphospholipidsvolumefraction_ = nullptr;
  }
  if (from._internal_has_tissuetoplasmaalbuminratio()) {
    tissuetoplasmaalbuminratio_ = new ::pulse::cdm::bind::ScalarData(*from.tissuetoplasmaalbuminratio_);
  } else {
    tissuetoplasmaalbuminratio_ = nullptr;
  }
  if (from._internal_has_tissuetoplasmaalphaacidglycoproteinratio()) {
    tissuetoplasmaalphaacidglycoproteinratio_ = new ::pulse::cdm::bind::ScalarData(*from.tissuetoplasmaalphaacidglycoproteinratio_);
  } else {
    tissuetoplasmaalphaacidglycoproteinratio_ = nullptr;
  }
  if (from._internal_has_tissuetoplasmalipoproteinratio()) {
    tissuetoplasmalipoproteinratio_ = new ::pulse::cdm::bind::ScalarData(*from.tissuetoplasmalipoproteinratio_);
  } else {
    tissuetoplasmalipoproteinratio_ = nullptr;
  }
  if (from._internal_has_totalmass()) {
    totalmass_ = new ::pulse::cdm::bind::ScalarMassData(*from.totalmass_);
  } else {
    totalmass_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.TissueCompartmentData)
}

void TissueCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compartment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalmass_) -
      reinterpret_cast<char*>(&compartment_)) + sizeof(totalmass_));
}

TissueCompartmentData::~TissueCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.TissueCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TissueCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compartment_;
  if (this != internal_default_instance()) delete acidicphospohlipidconcentration_;
  if (this != internal_default_instance()) delete matrixvolume_;
  if (this != internal_default_instance()) delete neutrallipidsvolumefraction_;
  if (this != internal_default_instance()) delete neutralphospholipidsvolumefraction_;
  if (this != internal_default_instance()) delete tissuetoplasmaalbuminratio_;
  if (this != internal_default_instance()) delete tissuetoplasmaalphaacidglycoproteinratio_;
  if (this != internal_default_instance()) delete tissuetoplasmalipoproteinratio_;
  if (this != internal_default_instance()) delete totalmass_;
}

void TissueCompartmentData::ArenaDtor(void* object) {
  TissueCompartmentData* _this = reinterpret_cast< TissueCompartmentData* >(object);
  (void)_this;
}
void TissueCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TissueCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TissueCompartmentData& TissueCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TissueCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void TissueCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.TissueCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
  if (GetArena() == nullptr && acidicphospohlipidconcentration_ != nullptr) {
    delete acidicphospohlipidconcentration_;
  }
  acidicphospohlipidconcentration_ = nullptr;
  if (GetArena() == nullptr && matrixvolume_ != nullptr) {
    delete matrixvolume_;
  }
  matrixvolume_ = nullptr;
  if (GetArena() == nullptr && neutrallipidsvolumefraction_ != nullptr) {
    delete neutrallipidsvolumefraction_;
  }
  neutrallipidsvolumefraction_ = nullptr;
  if (GetArena() == nullptr && neutralphospholipidsvolumefraction_ != nullptr) {
    delete neutralphospholipidsvolumefraction_;
  }
  neutralphospholipidsvolumefraction_ = nullptr;
  if (GetArena() == nullptr && tissuetoplasmaalbuminratio_ != nullptr) {
    delete tissuetoplasmaalbuminratio_;
  }
  tissuetoplasmaalbuminratio_ = nullptr;
  if (GetArena() == nullptr && tissuetoplasmaalphaacidglycoproteinratio_ != nullptr) {
    delete tissuetoplasmaalphaacidglycoproteinratio_;
  }
  tissuetoplasmaalphaacidglycoproteinratio_ = nullptr;
  if (GetArena() == nullptr && tissuetoplasmalipoproteinratio_ != nullptr) {
    delete tissuetoplasmalipoproteinratio_;
  }
  tissuetoplasmalipoproteinratio_ = nullptr;
  if (GetArena() == nullptr && totalmass_ != nullptr) {
    delete totalmass_;
  }
  totalmass_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TissueCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentData Compartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassPerMassData AcidicPhospohlipidConcentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_acidicphospohlipidconcentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarVolumeData MatrixVolume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrixvolume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data NeutralLipidsVolumeFraction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_neutrallipidsvolumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.Scalar0To1Data NeutralPhospholipidsVolumeFraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_neutralphospholipidsvolumefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData TissueToPlasmaAlbuminRatio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissuetoplasmaalbuminratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissuetoplasmaalphaacidglycoproteinratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarData TissueToPlasmaLipoproteinRatio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tissuetoplasmalipoproteinratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarMassData TotalMass = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_totalmass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TissueCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.TissueCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::compartment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassPerMassData AcidicPhospohlipidConcentration = 2;
  if (this->has_acidicphospohlipidconcentration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::acidicphospohlipidconcentration(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarVolumeData MatrixVolume = 3;
  if (this->has_matrixvolume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::matrixvolume(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeutralLipidsVolumeFraction = 4;
  if (this->has_neutrallipidsvolumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::neutrallipidsvolumefraction(this), target, stream);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeutralPhospholipidsVolumeFraction = 5;
  if (this->has_neutralphospholipidsvolumefraction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::neutralphospholipidsvolumefraction(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlbuminRatio = 6;
  if (this->has_tissuetoplasmaalbuminratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::tissuetoplasmaalbuminratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio = 7;
  if (this->has_tissuetoplasmaalphaacidglycoproteinratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tissuetoplasmaalphaacidglycoproteinratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaLipoproteinRatio = 8;
  if (this->has_tissuetoplasmalipoproteinratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tissuetoplasmalipoproteinratio(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarMassData TotalMass = 9;
  if (this->has_totalmass()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::totalmass(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.TissueCompartmentData)
  return target;
}

size_t TissueCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.TissueCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compartment_);
  }

  // .pulse.cdm.bind.ScalarMassPerMassData AcidicPhospohlipidConcentration = 2;
  if (this->has_acidicphospohlipidconcentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acidicphospohlipidconcentration_);
  }

  // .pulse.cdm.bind.ScalarVolumeData MatrixVolume = 3;
  if (this->has_matrixvolume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *matrixvolume_);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeutralLipidsVolumeFraction = 4;
  if (this->has_neutrallipidsvolumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neutrallipidsvolumefraction_);
  }

  // .pulse.cdm.bind.Scalar0To1Data NeutralPhospholipidsVolumeFraction = 5;
  if (this->has_neutralphospholipidsvolumefraction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neutralphospholipidsvolumefraction_);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlbuminRatio = 6;
  if (this->has_tissuetoplasmaalbuminratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissuetoplasmaalbuminratio_);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaAlphaAcidGlycoproteinRatio = 7;
  if (this->has_tissuetoplasmaalphaacidglycoproteinratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissuetoplasmaalphaacidglycoproteinratio_);
  }

  // .pulse.cdm.bind.ScalarData TissueToPlasmaLipoproteinRatio = 8;
  if (this->has_tissuetoplasmalipoproteinratio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tissuetoplasmalipoproteinratio_);
  }

  // .pulse.cdm.bind.ScalarMassData TotalMass = 9;
  if (this->has_totalmass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *totalmass_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TissueCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.TissueCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const TissueCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TissueCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.TissueCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.TissueCompartmentData)
    MergeFrom(*source);
  }
}

void TissueCompartmentData::MergeFrom(const TissueCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.TissueCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compartment()) {
    _internal_mutable_compartment()->::pulse::cdm::bind::CompartmentData::MergeFrom(from._internal_compartment());
  }
  if (from.has_acidicphospohlipidconcentration()) {
    _internal_mutable_acidicphospohlipidconcentration()->::pulse::cdm::bind::ScalarMassPerMassData::MergeFrom(from._internal_acidicphospohlipidconcentration());
  }
  if (from.has_matrixvolume()) {
    _internal_mutable_matrixvolume()->::pulse::cdm::bind::ScalarVolumeData::MergeFrom(from._internal_matrixvolume());
  }
  if (from.has_neutrallipidsvolumefraction()) {
    _internal_mutable_neutrallipidsvolumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_neutrallipidsvolumefraction());
  }
  if (from.has_neutralphospholipidsvolumefraction()) {
    _internal_mutable_neutralphospholipidsvolumefraction()->::pulse::cdm::bind::Scalar0To1Data::MergeFrom(from._internal_neutralphospholipidsvolumefraction());
  }
  if (from.has_tissuetoplasmaalbuminratio()) {
    _internal_mutable_tissuetoplasmaalbuminratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_tissuetoplasmaalbuminratio());
  }
  if (from.has_tissuetoplasmaalphaacidglycoproteinratio()) {
    _internal_mutable_tissuetoplasmaalphaacidglycoproteinratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_tissuetoplasmaalphaacidglycoproteinratio());
  }
  if (from.has_tissuetoplasmalipoproteinratio()) {
    _internal_mutable_tissuetoplasmalipoproteinratio()->::pulse::cdm::bind::ScalarData::MergeFrom(from._internal_tissuetoplasmalipoproteinratio());
  }
  if (from.has_totalmass()) {
    _internal_mutable_totalmass()->::pulse::cdm::bind::ScalarMassData::MergeFrom(from._internal_totalmass());
  }
}

void TissueCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.TissueCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TissueCompartmentData::CopyFrom(const TissueCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.TissueCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TissueCompartmentData::IsInitialized() const {
  return true;
}

void TissueCompartmentData::InternalSwap(TissueCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TissueCompartmentData, totalmass_)
      + sizeof(TissueCompartmentData::totalmass_)
      - PROTOBUF_FIELD_OFFSET(TissueCompartmentData, compartment_)>(
          reinterpret_cast<char*>(&compartment_),
          reinterpret_cast<char*>(&other->compartment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TissueCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThermalCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentData& compartment(const ThermalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& heattransferratein(const ThermalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& heattransferrateout(const ThermalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarTemperatureData& temperature(const ThermalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarEnergyData& heat(const ThermalCompartmentData* msg);
};

const ::pulse::cdm::bind::CompartmentData&
ThermalCompartmentData::_Internal::compartment(const ThermalCompartmentData* msg) {
  return *msg->compartment_;
}
const ::pulse::cdm::bind::ScalarPowerData&
ThermalCompartmentData::_Internal::heattransferratein(const ThermalCompartmentData* msg) {
  return *msg->heattransferratein_;
}
const ::pulse::cdm::bind::ScalarPowerData&
ThermalCompartmentData::_Internal::heattransferrateout(const ThermalCompartmentData* msg) {
  return *msg->heattransferrateout_;
}
const ::pulse::cdm::bind::ScalarTemperatureData&
ThermalCompartmentData::_Internal::temperature(const ThermalCompartmentData* msg) {
  return *msg->temperature_;
}
const ::pulse::cdm::bind::ScalarEnergyData&
ThermalCompartmentData::_Internal::heat(const ThermalCompartmentData* msg) {
  return *msg->heat_;
}
void ThermalCompartmentData::clear_heattransferratein() {
  if (GetArena() == nullptr && heattransferratein_ != nullptr) {
    delete heattransferratein_;
  }
  heattransferratein_ = nullptr;
}
void ThermalCompartmentData::clear_heattransferrateout() {
  if (GetArena() == nullptr && heattransferrateout_ != nullptr) {
    delete heattransferrateout_;
  }
  heattransferrateout_ = nullptr;
}
void ThermalCompartmentData::clear_temperature() {
  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
}
void ThermalCompartmentData::clear_heat() {
  if (GetArena() == nullptr && heat_ != nullptr) {
    delete heat_;
  }
  heat_ = nullptr;
}
ThermalCompartmentData::ThermalCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ThermalCompartmentData)
}
ThermalCompartmentData::ThermalCompartmentData(const ThermalCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compartment()) {
    compartment_ = new ::pulse::cdm::bind::CompartmentData(*from.compartment_);
  } else {
    compartment_ = nullptr;
  }
  if (from._internal_has_heattransferratein()) {
    heattransferratein_ = new ::pulse::cdm::bind::ScalarPowerData(*from.heattransferratein_);
  } else {
    heattransferratein_ = nullptr;
  }
  if (from._internal_has_heattransferrateout()) {
    heattransferrateout_ = new ::pulse::cdm::bind::ScalarPowerData(*from.heattransferrateout_);
  } else {
    heattransferrateout_ = nullptr;
  }
  if (from._internal_has_temperature()) {
    temperature_ = new ::pulse::cdm::bind::ScalarTemperatureData(*from.temperature_);
  } else {
    temperature_ = nullptr;
  }
  if (from._internal_has_heat()) {
    heat_ = new ::pulse::cdm::bind::ScalarEnergyData(*from.heat_);
  } else {
    heat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ThermalCompartmentData)
}

void ThermalCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compartment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heat_) -
      reinterpret_cast<char*>(&compartment_)) + sizeof(heat_));
}

ThermalCompartmentData::~ThermalCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ThermalCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compartment_;
  if (this != internal_default_instance()) delete heattransferratein_;
  if (this != internal_default_instance()) delete heattransferrateout_;
  if (this != internal_default_instance()) delete temperature_;
  if (this != internal_default_instance()) delete heat_;
}

void ThermalCompartmentData::ArenaDtor(void* object) {
  ThermalCompartmentData* _this = reinterpret_cast< ThermalCompartmentData* >(object);
  (void)_this;
}
void ThermalCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalCompartmentData& ThermalCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void ThermalCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ThermalCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
  if (GetArena() == nullptr && heattransferratein_ != nullptr) {
    delete heattransferratein_;
  }
  heattransferratein_ = nullptr;
  if (GetArena() == nullptr && heattransferrateout_ != nullptr) {
    delete heattransferrateout_;
  }
  heattransferrateout_ = nullptr;
  if (GetArena() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
  if (GetArena() == nullptr && heat_ != nullptr) {
    delete heat_;
  }
  heat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentData Compartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData HeatTransferRateIn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heattransferratein(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData HeatTransferRateOut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heattransferrateout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarTemperatureData Temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarEnergyData Heat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ThermalCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::compartment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateIn = 2;
  if (this->has_heattransferratein()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::heattransferratein(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateOut = 3;
  if (this->has_heattransferrateout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heattransferrateout(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 4;
  if (this->has_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::temperature(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarEnergyData Heat = 5;
  if (this->has_heat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ThermalCompartmentData)
  return target;
}

size_t ThermalCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ThermalCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compartment_);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateIn = 2;
  if (this->has_heattransferratein()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heattransferratein_);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRateOut = 3;
  if (this->has_heattransferrateout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heattransferrateout_);
  }

  // .pulse.cdm.bind.ScalarTemperatureData Temperature = 4;
  if (this->has_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temperature_);
  }

  // .pulse.cdm.bind.ScalarEnergyData Heat = 5;
  if (this->has_heat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ThermalCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ThermalCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ThermalCompartmentData)
    MergeFrom(*source);
  }
}

void ThermalCompartmentData::MergeFrom(const ThermalCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ThermalCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compartment()) {
    _internal_mutable_compartment()->::pulse::cdm::bind::CompartmentData::MergeFrom(from._internal_compartment());
  }
  if (from.has_heattransferratein()) {
    _internal_mutable_heattransferratein()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_heattransferratein());
  }
  if (from.has_heattransferrateout()) {
    _internal_mutable_heattransferrateout()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_heattransferrateout());
  }
  if (from.has_temperature()) {
    _internal_mutable_temperature()->::pulse::cdm::bind::ScalarTemperatureData::MergeFrom(from._internal_temperature());
  }
  if (from.has_heat()) {
    _internal_mutable_heat()->::pulse::cdm::bind::ScalarEnergyData::MergeFrom(from._internal_heat());
  }
}

void ThermalCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ThermalCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalCompartmentData::CopyFrom(const ThermalCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ThermalCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalCompartmentData::IsInitialized() const {
  return true;
}

void ThermalCompartmentData::InternalSwap(ThermalCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalCompartmentData, heat_)
      + sizeof(ThermalCompartmentData::heat_)
      - PROTOBUF_FIELD_OFFSET(ThermalCompartmentData, compartment_)>(
          reinterpret_cast<char*>(&compartment_),
          reinterpret_cast<char*>(&other->compartment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThermalCompartmentLinkData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentLinkData& link(const ThermalCompartmentLinkData* msg);
  static const ::pulse::cdm::bind::ScalarPowerData& heattransferrate(const ThermalCompartmentLinkData* msg);
};

const ::pulse::cdm::bind::CompartmentLinkData&
ThermalCompartmentLinkData::_Internal::link(const ThermalCompartmentLinkData* msg) {
  return *msg->link_;
}
const ::pulse::cdm::bind::ScalarPowerData&
ThermalCompartmentLinkData::_Internal::heattransferrate(const ThermalCompartmentLinkData* msg) {
  return *msg->heattransferrate_;
}
void ThermalCompartmentLinkData::clear_heattransferrate() {
  if (GetArena() == nullptr && heattransferrate_ != nullptr) {
    delete heattransferrate_;
  }
  heattransferrate_ = nullptr;
}
ThermalCompartmentLinkData::ThermalCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ThermalCompartmentLinkData)
}
ThermalCompartmentLinkData::ThermalCompartmentLinkData(const ThermalCompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::pulse::cdm::bind::CompartmentLinkData(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_heattransferrate()) {
    heattransferrate_ = new ::pulse::cdm::bind::ScalarPowerData(*from.heattransferrate_);
  } else {
    heattransferrate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ThermalCompartmentLinkData)
}

void ThermalCompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&link_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&heattransferrate_) -
      reinterpret_cast<char*>(&link_)) + sizeof(heattransferrate_));
}

ThermalCompartmentLinkData::~ThermalCompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ThermalCompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalCompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete heattransferrate_;
}

void ThermalCompartmentLinkData::ArenaDtor(void* object) {
  ThermalCompartmentLinkData* _this = reinterpret_cast< ThermalCompartmentLinkData* >(object);
  (void)_this;
}
void ThermalCompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalCompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalCompartmentLinkData& ThermalCompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void ThermalCompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArena() == nullptr && heattransferrate_ != nullptr) {
    delete heattransferrate_;
  }
  heattransferrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalCompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentLinkData Link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarPowerData HeatTransferRate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_heattransferrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalCompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRate = 2;
  if (this->has_heattransferrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::heattransferrate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ThermalCompartmentLinkData)
  return target;
}

size_t ThermalCompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .pulse.cdm.bind.ScalarPowerData HeatTransferRate = 2;
  if (this->has_heattransferrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heattransferrate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalCompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalCompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalCompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ThermalCompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ThermalCompartmentLinkData)
    MergeFrom(*source);
  }
}

void ThermalCompartmentLinkData::MergeFrom(const ThermalCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_link()) {
    _internal_mutable_link()->::pulse::cdm::bind::CompartmentLinkData::MergeFrom(from._internal_link());
  }
  if (from.has_heattransferrate()) {
    _internal_mutable_heattransferrate()->::pulse::cdm::bind::ScalarPowerData::MergeFrom(from._internal_heattransferrate());
  }
}

void ThermalCompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalCompartmentLinkData::CopyFrom(const ThermalCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ThermalCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalCompartmentLinkData::IsInitialized() const {
  return true;
}

void ThermalCompartmentLinkData::InternalSwap(ThermalCompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalCompartmentLinkData, heattransferrate_)
      + sizeof(ThermalCompartmentLinkData::heattransferrate_)
      - PROTOBUF_FIELD_OFFSET(ThermalCompartmentLinkData, link_)>(
          reinterpret_cast<char*>(&link_),
          reinterpret_cast<char*>(&other->link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalCompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectricalCompartmentData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentData& compartment(const ElectricalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarElectricCurrentData& currentin(const ElectricalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarElectricCurrentData& currentout(const ElectricalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarElectricPotentialData& voltage(const ElectricalCompartmentData* msg);
  static const ::pulse::cdm::bind::ScalarElectricChargeData& charge(const ElectricalCompartmentData* msg);
};

const ::pulse::cdm::bind::CompartmentData&
ElectricalCompartmentData::_Internal::compartment(const ElectricalCompartmentData* msg) {
  return *msg->compartment_;
}
const ::pulse::cdm::bind::ScalarElectricCurrentData&
ElectricalCompartmentData::_Internal::currentin(const ElectricalCompartmentData* msg) {
  return *msg->currentin_;
}
const ::pulse::cdm::bind::ScalarElectricCurrentData&
ElectricalCompartmentData::_Internal::currentout(const ElectricalCompartmentData* msg) {
  return *msg->currentout_;
}
const ::pulse::cdm::bind::ScalarElectricPotentialData&
ElectricalCompartmentData::_Internal::voltage(const ElectricalCompartmentData* msg) {
  return *msg->voltage_;
}
const ::pulse::cdm::bind::ScalarElectricChargeData&
ElectricalCompartmentData::_Internal::charge(const ElectricalCompartmentData* msg) {
  return *msg->charge_;
}
void ElectricalCompartmentData::clear_currentin() {
  if (GetArena() == nullptr && currentin_ != nullptr) {
    delete currentin_;
  }
  currentin_ = nullptr;
}
void ElectricalCompartmentData::clear_currentout() {
  if (GetArena() == nullptr && currentout_ != nullptr) {
    delete currentout_;
  }
  currentout_ = nullptr;
}
void ElectricalCompartmentData::clear_voltage() {
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
}
void ElectricalCompartmentData::clear_charge() {
  if (GetArena() == nullptr && charge_ != nullptr) {
    delete charge_;
  }
  charge_ = nullptr;
}
ElectricalCompartmentData::ElectricalCompartmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectricalCompartmentData)
}
ElectricalCompartmentData::ElectricalCompartmentData(const ElectricalCompartmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compartment()) {
    compartment_ = new ::pulse::cdm::bind::CompartmentData(*from.compartment_);
  } else {
    compartment_ = nullptr;
  }
  if (from._internal_has_currentin()) {
    currentin_ = new ::pulse::cdm::bind::ScalarElectricCurrentData(*from.currentin_);
  } else {
    currentin_ = nullptr;
  }
  if (from._internal_has_currentout()) {
    currentout_ = new ::pulse::cdm::bind::ScalarElectricCurrentData(*from.currentout_);
  } else {
    currentout_ = nullptr;
  }
  if (from._internal_has_voltage()) {
    voltage_ = new ::pulse::cdm::bind::ScalarElectricPotentialData(*from.voltage_);
  } else {
    voltage_ = nullptr;
  }
  if (from._internal_has_charge()) {
    charge_ = new ::pulse::cdm::bind::ScalarElectricChargeData(*from.charge_);
  } else {
    charge_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectricalCompartmentData)
}

void ElectricalCompartmentData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compartment_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&charge_) -
      reinterpret_cast<char*>(&compartment_)) + sizeof(charge_));
}

ElectricalCompartmentData::~ElectricalCompartmentData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectricalCompartmentData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectricalCompartmentData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compartment_;
  if (this != internal_default_instance()) delete currentin_;
  if (this != internal_default_instance()) delete currentout_;
  if (this != internal_default_instance()) delete voltage_;
  if (this != internal_default_instance()) delete charge_;
}

void ElectricalCompartmentData::ArenaDtor(void* object) {
  ElectricalCompartmentData* _this = reinterpret_cast< ElectricalCompartmentData* >(object);
  (void)_this;
}
void ElectricalCompartmentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectricalCompartmentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectricalCompartmentData& ElectricalCompartmentData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectricalCompartmentData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void ElectricalCompartmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectricalCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && compartment_ != nullptr) {
    delete compartment_;
  }
  compartment_ = nullptr;
  if (GetArena() == nullptr && currentin_ != nullptr) {
    delete currentin_;
  }
  currentin_ = nullptr;
  if (GetArena() == nullptr && currentout_ != nullptr) {
    delete currentout_;
  }
  currentout_ = nullptr;
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
  if (GetArena() == nullptr && charge_ != nullptr) {
    delete charge_;
  }
  charge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectricalCompartmentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentData Compartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_compartment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricCurrentData CurrentIn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricCurrentData CurrentOut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricPotentialData Voltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricChargeData Charge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_charge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectricalCompartmentData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectricalCompartmentData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::compartment(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentIn = 2;
  if (this->has_currentin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::currentin(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentOut = 3;
  if (this->has_currentout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::currentout(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Voltage = 4;
  if (this->has_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::voltage(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricChargeData Charge = 5;
  if (this->has_charge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::charge(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectricalCompartmentData)
  return target;
}

size_t ElectricalCompartmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectricalCompartmentData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentData Compartment = 1;
  if (this->has_compartment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compartment_);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentIn = 2;
  if (this->has_currentin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentin_);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData CurrentOut = 3;
  if (this->has_currentout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentout_);
  }

  // .pulse.cdm.bind.ScalarElectricPotentialData Voltage = 4;
  if (this->has_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltage_);
  }

  // .pulse.cdm.bind.ScalarElectricChargeData Charge = 5;
  if (this->has_charge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charge_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectricalCompartmentData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectricalCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectricalCompartmentData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectricalCompartmentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectricalCompartmentData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectricalCompartmentData)
    MergeFrom(*source);
  }
}

void ElectricalCompartmentData::MergeFrom(const ElectricalCompartmentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectricalCompartmentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compartment()) {
    _internal_mutable_compartment()->::pulse::cdm::bind::CompartmentData::MergeFrom(from._internal_compartment());
  }
  if (from.has_currentin()) {
    _internal_mutable_currentin()->::pulse::cdm::bind::ScalarElectricCurrentData::MergeFrom(from._internal_currentin());
  }
  if (from.has_currentout()) {
    _internal_mutable_currentout()->::pulse::cdm::bind::ScalarElectricCurrentData::MergeFrom(from._internal_currentout());
  }
  if (from.has_voltage()) {
    _internal_mutable_voltage()->::pulse::cdm::bind::ScalarElectricPotentialData::MergeFrom(from._internal_voltage());
  }
  if (from.has_charge()) {
    _internal_mutable_charge()->::pulse::cdm::bind::ScalarElectricChargeData::MergeFrom(from._internal_charge());
  }
}

void ElectricalCompartmentData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectricalCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectricalCompartmentData::CopyFrom(const ElectricalCompartmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectricalCompartmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectricalCompartmentData::IsInitialized() const {
  return true;
}

void ElectricalCompartmentData::InternalSwap(ElectricalCompartmentData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectricalCompartmentData, charge_)
      + sizeof(ElectricalCompartmentData::charge_)
      - PROTOBUF_FIELD_OFFSET(ElectricalCompartmentData, compartment_)>(
          reinterpret_cast<char*>(&compartment_),
          reinterpret_cast<char*>(&other->compartment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectricalCompartmentData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ElectricalCompartmentLinkData::_Internal {
 public:
  static const ::pulse::cdm::bind::CompartmentLinkData& link(const ElectricalCompartmentLinkData* msg);
  static const ::pulse::cdm::bind::ScalarElectricCurrentData& current(const ElectricalCompartmentLinkData* msg);
};

const ::pulse::cdm::bind::CompartmentLinkData&
ElectricalCompartmentLinkData::_Internal::link(const ElectricalCompartmentLinkData* msg) {
  return *msg->link_;
}
const ::pulse::cdm::bind::ScalarElectricCurrentData&
ElectricalCompartmentLinkData::_Internal::current(const ElectricalCompartmentLinkData* msg) {
  return *msg->current_;
}
void ElectricalCompartmentLinkData::clear_current() {
  if (GetArena() == nullptr && current_ != nullptr) {
    delete current_;
  }
  current_ = nullptr;
}
ElectricalCompartmentLinkData::ElectricalCompartmentLinkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.ElectricalCompartmentLinkData)
}
ElectricalCompartmentLinkData::ElectricalCompartmentLinkData(const ElectricalCompartmentLinkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::pulse::cdm::bind::CompartmentLinkData(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_current()) {
    current_ = new ::pulse::cdm::bind::ScalarElectricCurrentData(*from.current_);
  } else {
    current_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.ElectricalCompartmentLinkData)
}

void ElectricalCompartmentLinkData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&link_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&current_) -
      reinterpret_cast<char*>(&link_)) + sizeof(current_));
}

ElectricalCompartmentLinkData::~ElectricalCompartmentLinkData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.ElectricalCompartmentLinkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElectricalCompartmentLinkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete current_;
}

void ElectricalCompartmentLinkData::ArenaDtor(void* object) {
  ElectricalCompartmentLinkData* _this = reinterpret_cast< ElectricalCompartmentLinkData* >(object);
  (void)_this;
}
void ElectricalCompartmentLinkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectricalCompartmentLinkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectricalCompartmentLinkData& ElectricalCompartmentLinkData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElectricalCompartmentLinkData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void ElectricalCompartmentLinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArena() == nullptr && current_ != nullptr) {
    delete current_;
  }
  current_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectricalCompartmentLinkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.CompartmentLinkData Link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.ScalarElectricCurrentData Current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectricalCompartmentLinkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData Current = 2;
  if (this->has_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::current(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.ElectricalCompartmentLinkData)
  return target;
}

size_t ElectricalCompartmentLinkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.CompartmentLinkData Link = 1;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .pulse.cdm.bind.ScalarElectricCurrentData Current = 2;
  if (this->has_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectricalCompartmentLinkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectricalCompartmentLinkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElectricalCompartmentLinkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.ElectricalCompartmentLinkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.ElectricalCompartmentLinkData)
    MergeFrom(*source);
  }
}

void ElectricalCompartmentLinkData::MergeFrom(const ElectricalCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_link()) {
    _internal_mutable_link()->::pulse::cdm::bind::CompartmentLinkData::MergeFrom(from._internal_link());
  }
  if (from.has_current()) {
    _internal_mutable_current()->::pulse::cdm::bind::ScalarElectricCurrentData::MergeFrom(from._internal_current());
  }
}

void ElectricalCompartmentLinkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectricalCompartmentLinkData::CopyFrom(const ElectricalCompartmentLinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.ElectricalCompartmentLinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectricalCompartmentLinkData::IsInitialized() const {
  return true;
}

void ElectricalCompartmentLinkData::InternalSwap(ElectricalCompartmentLinkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectricalCompartmentLinkData, current_)
      + sizeof(ElectricalCompartmentLinkData::current_)
      - PROTOBUF_FIELD_OFFSET(ElectricalCompartmentLinkData, link_)>(
          reinterpret_cast<char*>(&link_),
          reinterpret_cast<char*>(&other->link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectricalCompartmentLinkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompartmentManagerData::_Internal {
 public:
};

CompartmentManagerData::CompartmentManagerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  electricalcompartment_(arena),
  electricallink_(arena),
  liquidcompartment_(arena),
  liquidlink_(arena),
  liquidsubstance_(arena),
  liquidgraph_(arena),
  gascompartment_(arena),
  gaslink_(arena),
  gassubstance_(arena),
  gasgraph_(arena),
  thermalcompartment_(arena),
  thermallink_(arena),
  tissuecompartment_(arena),
  tissuesubstance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.CompartmentManagerData)
}
CompartmentManagerData::CompartmentManagerData(const CompartmentManagerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      electricalcompartment_(from.electricalcompartment_),
      electricallink_(from.electricallink_),
      liquidcompartment_(from.liquidcompartment_),
      liquidlink_(from.liquidlink_),
      liquidsubstance_(from.liquidsubstance_),
      liquidgraph_(from.liquidgraph_),
      gascompartment_(from.gascompartment_),
      gaslink_(from.gaslink_),
      gassubstance_(from.gassubstance_),
      gasgraph_(from.gasgraph_),
      thermalcompartment_(from.thermalcompartment_),
      thermallink_(from.thermallink_),
      tissuecompartment_(from.tissuecompartment_),
      tissuesubstance_(from.tissuesubstance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.CompartmentManagerData)
}

void CompartmentManagerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
}

CompartmentManagerData::~CompartmentManagerData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.CompartmentManagerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompartmentManagerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CompartmentManagerData::ArenaDtor(void* object) {
  CompartmentManagerData* _this = reinterpret_cast< CompartmentManagerData* >(object);
  (void)_this;
}
void CompartmentManagerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompartmentManagerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompartmentManagerData& CompartmentManagerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompartmentManagerData_pulse_2fcdm_2fbind_2fCompartment_2eproto.base);
  return *internal_default_instance();
}


void CompartmentManagerData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.CompartmentManagerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  electricalcompartment_.Clear();
  electricallink_.Clear();
  liquidcompartment_.Clear();
  liquidlink_.Clear();
  liquidsubstance_.Clear();
  liquidgraph_.Clear();
  gascompartment_.Clear();
  gaslink_.Clear();
  gassubstance_.Clear();
  gasgraph_.Clear();
  thermalcompartment_.Clear();
  thermallink_.Clear();
  tissuecompartment_.Clear();
  tissuesubstance_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompartmentManagerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pulse.cdm.bind.ElectricalCompartmentData ElectricalCompartment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_electricalcompartment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.ElectricalCompartmentLinkData ElectricalLink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_electricallink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidCompartmentData LiquidCompartment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidcompartment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidCompartmentLinkData LiquidLink = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidlink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string LiquidSubstance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_liquidsubstance();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentManagerData.LiquidSubstance"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.LiquidCompartmentGraphData LiquidGraph = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidgraph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.GasCompartmentData GasCompartment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gascompartment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.GasCompartmentLinkData GasLink = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gaslink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string GasSubstance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_gassubstance();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentManagerData.GasSubstance"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.GasCompartmentGraphData GasGraph = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gasgraph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.ThermalCompartmentData ThermalCompartment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thermalcompartment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.ThermalCompartmentLinkData ThermalLink = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thermallink(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pulse.cdm.bind.TissueCompartmentData TissueCompartment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tissuecompartment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string TissueSubstance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tissuesubstance();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.CompartmentManagerData.TissueSubstance"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompartmentManagerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.CompartmentManagerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ElectricalCompartmentData ElectricalCompartment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_electricalcompartment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_electricalcompartment(i), target, stream);
  }

  // repeated .pulse.cdm.bind.ElectricalCompartmentLinkData ElectricalLink = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_electricallink_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_electricallink(i), target, stream);
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentData LiquidCompartment = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidcompartment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_liquidcompartment(i), target, stream);
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentLinkData LiquidLink = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidlink_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_liquidlink(i), target, stream);
  }

  // repeated string LiquidSubstance = 5;
  for (int i = 0, n = this->_internal_liquidsubstance_size(); i < n; i++) {
    const auto& s = this->_internal_liquidsubstance(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentManagerData.LiquidSubstance");
    target = stream->WriteString(5, s, target);
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentGraphData LiquidGraph = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_liquidgraph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_liquidgraph(i), target, stream);
  }

  // repeated .pulse.cdm.bind.GasCompartmentData GasCompartment = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gascompartment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_gascompartment(i), target, stream);
  }

  // repeated .pulse.cdm.bind.GasCompartmentLinkData GasLink = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gaslink_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_gaslink(i), target, stream);
  }

  // repeated string GasSubstance = 9;
  for (int i = 0, n = this->_internal_gassubstance_size(); i < n; i++) {
    const auto& s = this->_internal_gassubstance(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentManagerData.GasSubstance");
    target = stream->WriteString(9, s, target);
  }

  // repeated .pulse.cdm.bind.GasCompartmentGraphData GasGraph = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gasgraph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_gasgraph(i), target, stream);
  }

  // repeated .pulse.cdm.bind.ThermalCompartmentData ThermalCompartment = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thermalcompartment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_thermalcompartment(i), target, stream);
  }

  // repeated .pulse.cdm.bind.ThermalCompartmentLinkData ThermalLink = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thermallink_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_thermallink(i), target, stream);
  }

  // repeated .pulse.cdm.bind.TissueCompartmentData TissueCompartment = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tissuecompartment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_tissuecompartment(i), target, stream);
  }

  // repeated string TissueSubstance = 14;
  for (int i = 0, n = this->_internal_tissuesubstance_size(); i < n; i++) {
    const auto& s = this->_internal_tissuesubstance(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.CompartmentManagerData.TissueSubstance");
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.CompartmentManagerData)
  return target;
}

size_t CompartmentManagerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.CompartmentManagerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pulse.cdm.bind.ElectricalCompartmentData ElectricalCompartment = 1;
  total_size += 1UL * this->_internal_electricalcompartment_size();
  for (const auto& msg : this->electricalcompartment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.ElectricalCompartmentLinkData ElectricalLink = 2;
  total_size += 1UL * this->_internal_electricallink_size();
  for (const auto& msg : this->electricallink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentData LiquidCompartment = 3;
  total_size += 1UL * this->_internal_liquidcompartment_size();
  for (const auto& msg : this->liquidcompartment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentLinkData LiquidLink = 4;
  total_size += 1UL * this->_internal_liquidlink_size();
  for (const auto& msg : this->liquidlink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string LiquidSubstance = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(liquidsubstance_.size());
  for (int i = 0, n = liquidsubstance_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      liquidsubstance_.Get(i));
  }

  // repeated .pulse.cdm.bind.LiquidCompartmentGraphData LiquidGraph = 6;
  total_size += 1UL * this->_internal_liquidgraph_size();
  for (const auto& msg : this->liquidgraph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.GasCompartmentData GasCompartment = 7;
  total_size += 1UL * this->_internal_gascompartment_size();
  for (const auto& msg : this->gascompartment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.GasCompartmentLinkData GasLink = 8;
  total_size += 1UL * this->_internal_gaslink_size();
  for (const auto& msg : this->gaslink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string GasSubstance = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(gassubstance_.size());
  for (int i = 0, n = gassubstance_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      gassubstance_.Get(i));
  }

  // repeated .pulse.cdm.bind.GasCompartmentGraphData GasGraph = 10;
  total_size += 1UL * this->_internal_gasgraph_size();
  for (const auto& msg : this->gasgraph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.ThermalCompartmentData ThermalCompartment = 11;
  total_size += 1UL * this->_internal_thermalcompartment_size();
  for (const auto& msg : this->thermalcompartment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.ThermalCompartmentLinkData ThermalLink = 12;
  total_size += 1UL * this->_internal_thermallink_size();
  for (const auto& msg : this->thermallink_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pulse.cdm.bind.TissueCompartmentData TissueCompartment = 13;
  total_size += 1UL * this->_internal_tissuecompartment_size();
  for (const auto& msg : this->tissuecompartment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string TissueSubstance = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tissuesubstance_.size());
  for (int i = 0, n = tissuesubstance_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tissuesubstance_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompartmentManagerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.CompartmentManagerData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompartmentManagerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompartmentManagerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.CompartmentManagerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.CompartmentManagerData)
    MergeFrom(*source);
  }
}

void CompartmentManagerData::MergeFrom(const CompartmentManagerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.CompartmentManagerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  electricalcompartment_.MergeFrom(from.electricalcompartment_);
  electricallink_.MergeFrom(from.electricallink_);
  liquidcompartment_.MergeFrom(from.liquidcompartment_);
  liquidlink_.MergeFrom(from.liquidlink_);
  liquidsubstance_.MergeFrom(from.liquidsubstance_);
  liquidgraph_.MergeFrom(from.liquidgraph_);
  gascompartment_.MergeFrom(from.gascompartment_);
  gaslink_.MergeFrom(from.gaslink_);
  gassubstance_.MergeFrom(from.gassubstance_);
  gasgraph_.MergeFrom(from.gasgraph_);
  thermalcompartment_.MergeFrom(from.thermalcompartment_);
  thermallink_.MergeFrom(from.thermallink_);
  tissuecompartment_.MergeFrom(from.tissuecompartment_);
  tissuesubstance_.MergeFrom(from.tissuesubstance_);
}

void CompartmentManagerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.CompartmentManagerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompartmentManagerData::CopyFrom(const CompartmentManagerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.CompartmentManagerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompartmentManagerData::IsInitialized() const {
  return true;
}

void CompartmentManagerData::InternalSwap(CompartmentManagerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  electricalcompartment_.InternalSwap(&other->electricalcompartment_);
  electricallink_.InternalSwap(&other->electricallink_);
  liquidcompartment_.InternalSwap(&other->liquidcompartment_);
  liquidlink_.InternalSwap(&other->liquidlink_);
  liquidsubstance_.InternalSwap(&other->liquidsubstance_);
  liquidgraph_.InternalSwap(&other->liquidgraph_);
  gascompartment_.InternalSwap(&other->gascompartment_);
  gaslink_.InternalSwap(&other->gaslink_);
  gassubstance_.InternalSwap(&other->gassubstance_);
  gasgraph_.InternalSwap(&other->gasgraph_);
  thermalcompartment_.InternalSwap(&other->thermalcompartment_);
  thermallink_.InternalSwap(&other->thermallink_);
  tissuecompartment_.InternalSwap(&other->tissuecompartment_);
  tissuesubstance_.InternalSwap(&other->tissuesubstance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompartmentManagerData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CompartmentGraphData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CompartmentGraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CompartmentGraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FluidCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FluidCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FluidCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FluidCompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FluidCompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FluidCompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::FluidCompartmentGraphData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::FluidCompartmentGraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::FluidCompartmentGraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasCompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasCompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasCompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::GasCompartmentGraphData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::GasCompartmentGraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::GasCompartmentGraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidCompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidCompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidCompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::LiquidCompartmentGraphData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::LiquidCompartmentGraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::LiquidCompartmentGraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::TissueCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::TissueCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::TissueCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ThermalCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ThermalCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ThermalCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ThermalCompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ThermalCompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ThermalCompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectricalCompartmentData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectricalCompartmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectricalCompartmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::ElectricalCompartmentLinkData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::ElectricalCompartmentLinkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::ElectricalCompartmentLinkData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::CompartmentManagerData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::CompartmentManagerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::CompartmentManagerData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
