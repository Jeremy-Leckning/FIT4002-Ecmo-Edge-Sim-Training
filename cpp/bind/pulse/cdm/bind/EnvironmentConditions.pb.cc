// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pulse/cdm/bind/EnvironmentConditions.proto

#include "pulse/cdm/bind/EnvironmentConditions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionData_pulse_2fcdm_2fbind_2fConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto;
namespace pulse {
namespace cdm {
namespace bind {
class AnyEnvironmentConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyEnvironmentConditionData> _instance;
} _AnyEnvironmentConditionData_default_instance_;
class EnvironmentConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentConditionData> _instance;
} _EnvironmentConditionData_default_instance_;
class InitialEnvironmentalConditionsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialEnvironmentalConditionsData> _instance;
} _InitialEnvironmentalConditionsData_default_instance_;
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
static void InitDefaultsscc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_AnyEnvironmentConditionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::AnyEnvironmentConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto}, {
      &scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_EnvironmentConditionData_default_instance_;
    new (ptr) ::pulse::cdm::bind::EnvironmentConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto}, {
      &scc_info_ConditionData_pulse_2fcdm_2fbind_2fConditions_2eproto.base,}};

static void InitDefaultsscc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pulse::cdm::bind::_InitialEnvironmentalConditionsData_default_instance_;
    new (ptr) ::pulse::cdm::bind::InitialEnvironmentalConditionsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto}, {
      &scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,
      &scc_info_EnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironment_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentConditionData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::AnyEnvironmentConditionData, Condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::EnvironmentConditionData, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::InitialEnvironmentalConditionsData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::InitialEnvironmentalConditionsData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::InitialEnvironmentalConditionsData, environmentcondition_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::pulse::cdm::bind::InitialEnvironmentalConditionsData, Option_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pulse::cdm::bind::AnyEnvironmentConditionData)},
  { 7, -1, sizeof(::pulse::cdm::bind::EnvironmentConditionData)},
  { 13, -1, sizeof(::pulse::cdm::bind::InitialEnvironmentalConditionsData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_AnyEnvironmentConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_EnvironmentConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pulse::cdm::bind::_InitialEnvironmentalConditionsData_default_instance_),
};

const char descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*pulse/cdm/bind/EnvironmentConditions.p"
  "roto\022\016pulse.cdm.bind\032 pulse/cdm/bind/Env"
  "ironment.proto\032\037pulse/cdm/bind/Condition"
  "s.proto\"\210\001\n\033AnyEnvironmentConditionData\022"
  "\\\n\036InitialEnvironmentalConditions\030\001 \001(\0132"
  "2.pulse.cdm.bind.InitialEnvironmentalCon"
  "ditionsDataH\000B\013\n\tCondition\"L\n\030Environmen"
  "tConditionData\0220\n\tCondition\030\001 \001(\0132\035.puls"
  "e.cdm.bind.ConditionData\"\355\001\n\"InitialEnvi"
  "ronmentalConditionsData\022F\n\024EnvironmentCo"
  "ndition\030\001 \001(\0132(.pulse.cdm.bind.Environme"
  "ntConditionData\022N\n\027EnvironmentalConditio"
  "ns\030\002 \001(\0132+.pulse.cdm.bind.EnvironmentalC"
  "onditionsDataH\000\022%\n\033EnvironmentalConditio"
  "nsFile\030\003 \001(\tH\000B\010\n\006OptionB/\n\032com.kitware."
  "pulse.cdm.bindH\001\252\002\016pulse.cdm.bindb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_deps[2] = {
  &::descriptor_table_pulse_2fcdm_2fbind_2fConditions_2eproto,
  &::descriptor_table_pulse_2fcdm_2fbind_2fEnvironment_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_sccs[3] = {
  &scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,
  &scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,
  &scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto = {
  false, false, descriptor_table_protodef_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto, "pulse/cdm/bind/EnvironmentConditions.proto", 641,
  &descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_once, descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_sccs, descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto::offsets,
  file_level_metadata_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto, 3, file_level_enum_descriptors_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto, file_level_service_descriptors_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto)), true);
namespace pulse {
namespace cdm {
namespace bind {

// ===================================================================

class AnyEnvironmentConditionData::_Internal {
 public:
  static const ::pulse::cdm::bind::InitialEnvironmentalConditionsData& initialenvironmentalconditions(const AnyEnvironmentConditionData* msg);
};

const ::pulse::cdm::bind::InitialEnvironmentalConditionsData&
AnyEnvironmentConditionData::_Internal::initialenvironmentalconditions(const AnyEnvironmentConditionData* msg) {
  return *msg->Condition_.initialenvironmentalconditions_;
}
void AnyEnvironmentConditionData::set_allocated_initialenvironmentalconditions(::pulse::cdm::bind::InitialEnvironmentalConditionsData* initialenvironmentalconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Condition();
  if (initialenvironmentalconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initialenvironmentalconditions);
    if (message_arena != submessage_arena) {
      initialenvironmentalconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialenvironmentalconditions, submessage_arena);
    }
    set_has_initialenvironmentalconditions();
    Condition_.initialenvironmentalconditions_ = initialenvironmentalconditions;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.AnyEnvironmentConditionData.InitialEnvironmentalConditions)
}
AnyEnvironmentConditionData::AnyEnvironmentConditionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.AnyEnvironmentConditionData)
}
AnyEnvironmentConditionData::AnyEnvironmentConditionData(const AnyEnvironmentConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Condition();
  switch (from.Condition_case()) {
    case kInitialEnvironmentalConditions: {
      _internal_mutable_initialenvironmentalconditions()->::pulse::cdm::bind::InitialEnvironmentalConditionsData::MergeFrom(from._internal_initialenvironmentalconditions());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.AnyEnvironmentConditionData)
}

void AnyEnvironmentConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  clear_has_Condition();
}

AnyEnvironmentConditionData::~AnyEnvironmentConditionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.AnyEnvironmentConditionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyEnvironmentConditionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Condition()) {
    clear_Condition();
  }
}

void AnyEnvironmentConditionData::ArenaDtor(void* object) {
  AnyEnvironmentConditionData* _this = reinterpret_cast< AnyEnvironmentConditionData* >(object);
  (void)_this;
}
void AnyEnvironmentConditionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyEnvironmentConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyEnvironmentConditionData& AnyEnvironmentConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyEnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  return *internal_default_instance();
}


void AnyEnvironmentConditionData::clear_Condition() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  switch (Condition_case()) {
    case kInitialEnvironmentalConditions: {
      if (GetArena() == nullptr) {
        delete Condition_.initialenvironmentalconditions_;
      }
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_NOT_SET;
}


void AnyEnvironmentConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Condition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyEnvironmentConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.InitialEnvironmentalConditionsData InitialEnvironmentalConditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialenvironmentalconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyEnvironmentConditionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.InitialEnvironmentalConditionsData InitialEnvironmentalConditions = 1;
  if (_internal_has_initialenvironmentalconditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initialenvironmentalconditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.AnyEnvironmentConditionData)
  return target;
}

size_t AnyEnvironmentConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Condition_case()) {
    // .pulse.cdm.bind.InitialEnvironmentalConditionsData InitialEnvironmentalConditions = 1;
    case kInitialEnvironmentalConditions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Condition_.initialenvironmentalconditions_);
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyEnvironmentConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyEnvironmentConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyEnvironmentConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.AnyEnvironmentConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.AnyEnvironmentConditionData)
    MergeFrom(*source);
  }
}

void AnyEnvironmentConditionData::MergeFrom(const AnyEnvironmentConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Condition_case()) {
    case kInitialEnvironmentalConditions: {
      _internal_mutable_initialenvironmentalconditions()->::pulse::cdm::bind::InitialEnvironmentalConditionsData::MergeFrom(from._internal_initialenvironmentalconditions());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
}

void AnyEnvironmentConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyEnvironmentConditionData::CopyFrom(const AnyEnvironmentConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.AnyEnvironmentConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyEnvironmentConditionData::IsInitialized() const {
  return true;
}

void AnyEnvironmentConditionData::InternalSwap(AnyEnvironmentConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(Condition_, other->Condition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyEnvironmentConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnvironmentConditionData::_Internal {
 public:
  static const ::pulse::cdm::bind::ConditionData& condition(const EnvironmentConditionData* msg);
};

const ::pulse::cdm::bind::ConditionData&
EnvironmentConditionData::_Internal::condition(const EnvironmentConditionData* msg) {
  return *msg->condition_;
}
void EnvironmentConditionData::clear_condition() {
  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
EnvironmentConditionData::EnvironmentConditionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.EnvironmentConditionData)
}
EnvironmentConditionData::EnvironmentConditionData(const EnvironmentConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::pulse::cdm::bind::ConditionData(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.EnvironmentConditionData)
}

void EnvironmentConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  condition_ = nullptr;
}

EnvironmentConditionData::~EnvironmentConditionData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.EnvironmentConditionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnvironmentConditionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete condition_;
}

void EnvironmentConditionData::ArenaDtor(void* object) {
  EnvironmentConditionData* _this = reinterpret_cast< EnvironmentConditionData* >(object);
  (void)_this;
}
void EnvironmentConditionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnvironmentConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentConditionData& EnvironmentConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentConditionData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.EnvironmentConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.ConditionData Condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentConditionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.EnvironmentConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.ConditionData Condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.EnvironmentConditionData)
  return target;
}

size_t EnvironmentConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.EnvironmentConditionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.ConditionData Condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.EnvironmentConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.EnvironmentConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.EnvironmentConditionData)
    MergeFrom(*source);
  }
}

void EnvironmentConditionData::MergeFrom(const EnvironmentConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.EnvironmentConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    _internal_mutable_condition()->::pulse::cdm::bind::ConditionData::MergeFrom(from._internal_condition());
  }
}

void EnvironmentConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.EnvironmentConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentConditionData::CopyFrom(const EnvironmentConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.EnvironmentConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentConditionData::IsInitialized() const {
  return true;
}

void EnvironmentConditionData::InternalSwap(EnvironmentConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(condition_, other->condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InitialEnvironmentalConditionsData::_Internal {
 public:
  static const ::pulse::cdm::bind::EnvironmentConditionData& environmentcondition(const InitialEnvironmentalConditionsData* msg);
  static const ::pulse::cdm::bind::EnvironmentalConditionsData& environmentalconditions(const InitialEnvironmentalConditionsData* msg);
};

const ::pulse::cdm::bind::EnvironmentConditionData&
InitialEnvironmentalConditionsData::_Internal::environmentcondition(const InitialEnvironmentalConditionsData* msg) {
  return *msg->environmentcondition_;
}
const ::pulse::cdm::bind::EnvironmentalConditionsData&
InitialEnvironmentalConditionsData::_Internal::environmentalconditions(const InitialEnvironmentalConditionsData* msg) {
  return *msg->Option_.environmentalconditions_;
}
void InitialEnvironmentalConditionsData::set_allocated_environmentalconditions(::pulse::cdm::bind::EnvironmentalConditionsData* environmentalconditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Option();
  if (environmentalconditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmentalconditions)->GetArena();
    if (message_arena != submessage_arena) {
      environmentalconditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmentalconditions, submessage_arena);
    }
    set_has_environmentalconditions();
    Option_.environmentalconditions_ = environmentalconditions;
  }
  // @@protoc_insertion_point(field_set_allocated:pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditions)
}
void InitialEnvironmentalConditionsData::clear_environmentalconditions() {
  if (_internal_has_environmentalconditions()) {
    if (GetArena() == nullptr) {
      delete Option_.environmentalconditions_;
    }
    clear_has_Option();
  }
}
InitialEnvironmentalConditionsData::InitialEnvironmentalConditionsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pulse.cdm.bind.InitialEnvironmentalConditionsData)
}
InitialEnvironmentalConditionsData::InitialEnvironmentalConditionsData(const InitialEnvironmentalConditionsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_environmentcondition()) {
    environmentcondition_ = new ::pulse::cdm::bind::EnvironmentConditionData(*from.environmentcondition_);
  } else {
    environmentcondition_ = nullptr;
  }
  clear_has_Option();
  switch (from.Option_case()) {
    case kEnvironmentalConditions: {
      _internal_mutable_environmentalconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_environmentalconditions());
      break;
    }
    case kEnvironmentalConditionsFile: {
      _internal_set_environmentalconditionsfile(from._internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:pulse.cdm.bind.InitialEnvironmentalConditionsData)
}

void InitialEnvironmentalConditionsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  environmentcondition_ = nullptr;
  clear_has_Option();
}

InitialEnvironmentalConditionsData::~InitialEnvironmentalConditionsData() {
  // @@protoc_insertion_point(destructor:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitialEnvironmentalConditionsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete environmentcondition_;
  if (has_Option()) {
    clear_Option();
  }
}

void InitialEnvironmentalConditionsData::ArenaDtor(void* object) {
  InitialEnvironmentalConditionsData* _this = reinterpret_cast< InitialEnvironmentalConditionsData* >(object);
  (void)_this;
}
void InitialEnvironmentalConditionsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialEnvironmentalConditionsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialEnvironmentalConditionsData& InitialEnvironmentalConditionsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialEnvironmentalConditionsData_pulse_2fcdm_2fbind_2fEnvironmentConditions_2eproto.base);
  return *internal_default_instance();
}


void InitialEnvironmentalConditionsData::clear_Option() {
// @@protoc_insertion_point(one_of_clear_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  switch (Option_case()) {
    case kEnvironmentalConditions: {
      if (GetArena() == nullptr) {
        delete Option_.environmentalconditions_;
      }
      break;
    }
    case kEnvironmentalConditionsFile: {
      Option_.environmentalconditionsfile_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void InitialEnvironmentalConditionsData::Clear() {
// @@protoc_insertion_point(message_clear_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && environmentcondition_ != nullptr) {
    delete environmentcondition_;
  }
  environmentcondition_ = nullptr;
  clear_Option();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialEnvironmentalConditionsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pulse.cdm.bind.EnvironmentConditionData EnvironmentCondition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentcondition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environmentalconditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EnvironmentalConditionsFile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_environmentalconditionsfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialEnvironmentalConditionsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentConditionData EnvironmentCondition = 1;
  if (this->has_environmentcondition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::environmentcondition(this), target, stream);
  }

  // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
  if (_internal_has_environmentalconditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::environmentalconditions(this), target, stream);
  }

  // string EnvironmentalConditionsFile = 3;
  if (_internal_has_environmentalconditionsfile()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environmentalconditionsfile().data(), static_cast<int>(this->_internal_environmentalconditionsfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pulse.cdm.bind.InitialEnvironmentalConditionsData.EnvironmentalConditionsFile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_environmentalconditionsfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  return target;
}

size_t InitialEnvironmentalConditionsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pulse.cdm.bind.EnvironmentConditionData EnvironmentCondition = 1;
  if (this->has_environmentcondition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmentcondition_);
  }

  switch (Option_case()) {
    // .pulse.cdm.bind.EnvironmentalConditionsData EnvironmentalConditions = 2;
    case kEnvironmentalConditions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Option_.environmentalconditions_);
      break;
    }
    // string EnvironmentalConditionsFile = 3;
    case kEnvironmentalConditionsFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialEnvironmentalConditionsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialEnvironmentalConditionsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialEnvironmentalConditionsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pulse.cdm.bind.InitialEnvironmentalConditionsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pulse.cdm.bind.InitialEnvironmentalConditionsData)
    MergeFrom(*source);
  }
}

void InitialEnvironmentalConditionsData::MergeFrom(const InitialEnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_environmentcondition()) {
    _internal_mutable_environmentcondition()->::pulse::cdm::bind::EnvironmentConditionData::MergeFrom(from._internal_environmentcondition());
  }
  switch (from.Option_case()) {
    case kEnvironmentalConditions: {
      _internal_mutable_environmentalconditions()->::pulse::cdm::bind::EnvironmentalConditionsData::MergeFrom(from._internal_environmentalconditions());
      break;
    }
    case kEnvironmentalConditionsFile: {
      _internal_set_environmentalconditionsfile(from._internal_environmentalconditionsfile());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void InitialEnvironmentalConditionsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialEnvironmentalConditionsData::CopyFrom(const InitialEnvironmentalConditionsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pulse.cdm.bind.InitialEnvironmentalConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialEnvironmentalConditionsData::IsInitialized() const {
  return true;
}

void InitialEnvironmentalConditionsData::InternalSwap(InitialEnvironmentalConditionsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(environmentcondition_, other->environmentcondition_);
  swap(Option_, other->Option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialEnvironmentalConditionsData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bind
}  // namespace cdm
}  // namespace pulse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::AnyEnvironmentConditionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::AnyEnvironmentConditionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::AnyEnvironmentConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::EnvironmentConditionData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::EnvironmentConditionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::EnvironmentConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::pulse::cdm::bind::InitialEnvironmentalConditionsData* Arena::CreateMaybeMessage< ::pulse::cdm::bind::InitialEnvironmentalConditionsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pulse::cdm::bind::InitialEnvironmentalConditionsData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
